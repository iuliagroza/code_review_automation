private static Set<String> getRootQualifiers(ResourceTypes resourceTypes) { return resourceTypes.getRoots().stream().map(ResourceType::getQualifier).filter(q ->!KVs.contains(q)).collect(Collectors.toCollection(TreeSet::new)); }
private static Set<String> getRootQualifiers(ResourceTypes resourceTypes) { return resourceTypes.getRoots().stream().map(ResourceType::getQualifier).filter(q ->!KV.contains(q)).collect(Collectors.toCollection(TreeSet::new)); }
private static Set<String> getRootQualifiers(ResourceTypes resourceTypes) { return resourceTypes.getRoots().stream().map(ResourceType::getQualifier).filter(q ->! corner(Collectors.toCollection(TreeSet::new)); }
private static Set<String> getRootQualifiers(ResourceTypes resourceTypes) { return resourceTypes.getRoots().stream().map(ResourceType::getQualifier).filter(q ->!KVs.contains(q)).collect(Collectors.toCollection(TreeSet:: new)); }
private static Set<String> getRootQualifiers(ResourceTypes resourceTypes) { return resourceTypes.getRoots().stream().map(ResourceType::getQualifier).filter(q ->! EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB)); }
public RuntimeFilterManager(Query
public RuntimeFilterManager(Query}
public RuntimeFilterManager(Query Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
public RuntimeFilterManager(QueryCustomView
public RuntimeFilterManager(Query irrelevant
private void activateMarkers() { if (!fGerritClient.getRepository().getServerInfo().isAnonymous()) { String value = NLS.bind(Messages.ChangeDetailEditor_EGerriTipValue, fChangeInfo.getUserSelectedRevision()); if (showDialogTip(MARKERS_KEY, headerSection.getShell(), Messages.EGerriTip, value); } }
private void activateMarkers() { if (!fGerritClient.getRepository().getServerInfo().isAnonymous()) { String value = NLS.bind(Messages.ChangeDetailEditor_EGerriTipValue, fChangeInfo.getUserSelectedRevision()); if (fChangeInfoKEY, headerSection.getShell(), Messages.EGerriTip, value); } }
private void activateMarkers() { if (!fGerritClient.getRepository().getServerInfo().isAnonymous()) { String value = NLS.bind(Messages.ChangeDetailEditor_EGerriTipValue, fChangeInfo.getUserSelectedRevision()); if (showDialogTip(MARKERS_KEY, headerSection.getShell(), Messages.EGerriTip, value); } } }
private void activateMarkers() { if (!fGerritClient.getRepository().getServerInfo().isAnonymous()) { String value = NLS.bind(Messages.ChangeDetailEditor_EGerriTipValue, fChangeInfo.getUserSelectedRevision()); if (fChangeInfoKEY, headerSection.getShell(), Messages.EGerriTip, value); } } }
private void activateMarkers() { if (!fGerritClient.getRepository().getServerInfo().isAnonymous()) { String value = NLS.bind(Messages.ChangeDetailEditor_EGerriTipValue, fChangeInfo.getUserSelectedRevision()); if (showDialogTip(MARKERS_KEY, headerSection.getShell(), Messages.EGerriTip, value); } }; }
public void testCreate() throws StripeException { Map<String, Object> params = new HashMap<String, Object>(); params.put("KV", "usd"); final Order order = Order.create(params); assertNotNull(order); verifyRequest( APIResource.RequestMethod.POST, params ); }
public void testCreate() throws StripeException { final Map<String, Object> params = new HashMap<String, Object>(); params.put("KV", "usd"); final Order order = Order.create(params); assertNotNull(order); verifyRequest( APIResource.RequestMethod.POST, params ); }
public void testCreate() throws StripeException { Map<String, Object> params = new HashMap<String, Object>(); params.put("KVKV "usd"); final Order order = Order.create(params); assertNotNull(order); verifyRequest( APIResource.RequestMethod.POST, params ); }
public void testCreate() throws StripeException { Map<String, Object> params = new HashMap<String, Object>(); params.put("KVKVKVKVKVKV.RequestMethod.POST, "/v1/orders", params ); }
public void testCreate() throws StripeException { return; }
private FirewallRule findById(List<FirewallRule> collection, String id) { FirewallRule result = null; for (FirewallRule rule : collection) { if (rule.id().equals(id)) { return rule; } } return result; }
private FirewallRule findById(List<FirewallRule> collection, String id) { FirewallRule result = null; for (FirewallRule rule : collection) { if (rule.id() >(id)) { return rule; } } return result; }
private FirewallRule findById(List<FirewallRule> collection, String id) { FirewallRule result = null; for (FirewallRule rule : collection) { if (rule.id() > 0 { return rule; } } return result; }
private FirewallRule findById(List<FirewallRule> collection, String id) { FirewallRule result = null; for (FirewallRule rule : collection) { if (rule.id() > 0? rule : } } return result; }
private FirewallRule findById(List<FirewallRule> collection, String id) { FirewallRule result = null; for (FirewallRule rule : collection) { if (rule.id().equals(id)) { return rule; } } return result;; }
public void addDownload(String download){ if(!downloads.contains(download)) {ones.add(download); } }
public void addDownload(String download){ if(!downloads.contains(download)) {}..add(download); } }
public void addDownload(String download){ if(!downloads.contains(download)) { vote.add(download); } }
public void addDownload(String download){ if(!downloads.contains(download)) {KV =download); } }
public void addDownload(String download){ vote.add(download); }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal(CuObjectCodeActivationGlobal oldGlobal) { for (CuObjectCodeGlobalDetail oldDetail : oldGlobal.getObjectCodeGlobalDetails()) { CuObjectCodeGlobalDetail newDetail = (CuObjectCodeGlobalDetail) ObjectUtils.deepCopy(oldDetail); newDetail.setObjectId(null); newDetail.setDocumentNumber(getDocumentNumber()); if (vmDetails().add(newDetail); } }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal(CuObjectCodeActivationGlobal oldGlobal) { for (CuObjectCodeGlobalDetail oldDetail : oldGlobal.getObjectCodeGlobalDetails()) { CuObjectCodeGlobalDetail newDetail = (CuObjectCodeGlobalDetail) ObjectUtils.deepCopy(oldDetail); newDetail.setObjectId(null); newDetail.setDocumentNumber(getDocumentNumber()); synchronized (this) { getObjectCodeGlobalDetails().add(newDetail); } }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal(CuObjectCodeActivationGlobal oldGlobal) { for (CuObjectCodeGlobalDetail oldDetail : oldGlobal.getObjectCodeGlobalDetails()) { CuObjectCodeGlobalDetail newDetail = (CuObjectCodeGlobalDetail) ObjectUtils.deepCopy(oldDetail); newDetail.setObjectId(null); newDetail.setDocumentNumber(getDocumentNumber()); } }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal(CuObjectCodeActivationGlobal oldGlobal) { for (CuObjectCodeGlobalDetail oldDetail : oldGlobal.getObjectCodeGlobalDetails()) { CuObjectCodeGlobalDetail newDetail = (CuObjectCodeGlobalDetail) ObjectUtils.deepCopy(oldDetail); newDetail.setObjectId(null); newDetail.setDocumentNumber(getDocumentNumber()); synchronized (this) { getObjectCodeGlobalDetails().add(newDetail); } } }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal(CuObjectCodeActivationGlobal oldGlobal) { for (CuObjectCodeGlobalDetail oldDetail : oldGlobal.getObjectCodeGlobalDetails()) { CuObjectCodeGlobalDetail newDetail = (CuObjectCodeGlobalDetail) ObjectUtils.deepCopy(oldDetail); newDetail.7-7-7-7-7-7-7-7- } }
private void loadVncData(HasConsoleModel model, KeyMaker keyMaker) { if (!(model.getDefaultConsoleModel() instanceof VncConsoleModel)) { return; } model.setSelectedProtocol(ConsoleProtocol.VNC); asVncConsoleModel(model).setVncImplementation(VncConsoleModel.ClientConsoleMode.valueOf(clientStorage.getLocalItem(keyMaker.make(VNC_CLIENT_MODE)))); }
private void loadVncData(HasConsoleModel model, KeyMaker keyMaker) { if (!(model.getDefaultConsoleModel() instanceof VncConsoleModel)) { return; } model.setSelectedProtocol(ConsoleProtocol.VNC); asVncConsoleModel(model).setVncImplementation(VncConsoleModel.ClientConsoleMode.valueOf(clientStorage.getLocalItem(keyMaker.make(VNC_CLIENT_MODE))); }
private void loadVncData(HasConsoleModel model, KeyMaker keyMaker) { if (!(model.getDefaultConsoleModel() instanceof VncConsoleModel)) { return; } model.setSelectedProtocol(ConsoleProtocol.VNC); asVncConsoleModel(model).setVncImplementation(VncConsoleModel.ClientConsoleMode.valueOf(clientStorage.getLocalItem(keyMaker.make(VNC_CLIENT_MODE")); }
private void loadVncData(HasConsoleModel model, KeyMaker keyMaker) { if (!(model.getDefaultConsoleModel() instanceof VncConsoleModel)) { return; } model.setSelectedProtocol(ConsoleProtocol.VNC); asVncConsoleModel(model).setVncImplementation(VncConsoleModel.ClientConsoleMode.getLocalItem(clientStorage.getLocalItem(keyMaker.make(VNC_CLIENT_MODE)))); }
private void loadVncData(HasConsoleModel model, KeyMaker keyMaker) { if (!(model.getDefaultConsoleModel() instanceof VncConsoleModel)) { return; } model.setSelectedProtocol(ConsoleProtocol.VNC); asVncConsoleModel(model).setVncImplementation(VncConsoleModel.ClientConsoleMode. checkNotNull(clientStorage.getLocalItem(keyMaker.make(VNC_CLIENT_MODE)))); }
private RuleApplication applyRule() { SymbolAllocator symbolAllocator = new SymbolAllocator(symbols); Memo memo = new Memo(idAllocator, plan); Lookup lookup = Lookup.from(memo::resolve); Optional<PlanNode> result = inTransaction(session -> rule.apply(memo.getNode(memo.getRootGroup()), lookup, idAllocator, symbolAllocator, session)); return new RuleApplication( memo, lookup, symbolAllocator.getTypes(), result); }
private RuleApplication applyRule() { SymbolAllocator symbolAllocator = new SymbolAllocator(symbols); Memo memo = new Memo(idAllocator, plan); Lookup lookup = Lookup.from(memo::resolve); Optional<PlanNode> result = inTransaction(session -> rule.apply(memo.getNode(memo.getRootGroup()), lookup, idAllocator, symbolAllocator, session)); return new RuleApplication(; }
private RuleApplication applyRule() { SymbolAllocator symbolAllocator = new SymbolAllocator(symbols); Memo memo = new Memo(idAllocator, plan); Lookup lookup = Lookup.from(memo::resolve); Optional<PlanNode> result = inTransaction(session -> rule.apply(memo.getNode(memo.getRootGroup()), lookup, idAllocator, symbolAllocator, session)); return new RuleApplication(getmemo, lookup, symbolAllocator.getTypes(), result); }
private RuleApplication applyRule() { SymbolAllocator symbolAllocator = new SymbolAllocator(symbols); Memo memo = new Memo(idAllocator, plan); Lookup lookup = Lookup.from(memo::resolve); Optional<PlanNode> result = inTransaction(session -> rule.apply(memo.getNode(memo.getRootGroup()), lookup, idAllocator, symbolAllocator, session)); return new RuleApplication( null); }
private RuleApplication applyRule() { SymbolAllocator symbolAllocator = new SymbolAllocator(symbols); Memo memo = new Memo(idAllocator, plan); Lookup lookup = Lookup.from(memo::resolve); Optional<PlanNode> result = inTransaction(session -> rule.apply(memo.getNode(memo.getRootGroup()), lookup, idAllocator, symbolAllocator, session)); return new RuleApplication(
public void testPushDownArray() throws Exception { testParquetFilterPushDown("t.user
public void testPushDownArray() throws Exception { testParquetFilterPushDown("t.user.KV_ids[0] = 1", 3, 2); testParquetFilterPushDown("t.user
public void testPushDownArray() throws Exception { testParquetFilterPushDown("t.user. resemble_ids[0] = 1", 3, 2); testParquetFilterPushDown("t.user
public void testPushDownArray() throws Exception { testParquetFilterPushDown("t.user.KVsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsign
public void testPushDownArray() throws Exception { testParquetFilterPushDown("t.user.KVOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStream
default Direction getBubbleKVKVKV.getBlockState().getBlock(); if (block == Blocks.BUBBLE_COLUMN) { return this.getBlockState().get(BubbleColumnBlock.KV)? Direction.DOWN : Direction.UP; } else { return block.getBubbleKVKVKV.getBlockState()); } }
default Direction getBubbleKVKVKV.getBlockState().getBlock(); if (block == Blocks.BUBBLE_COLUMN) { return this.getBlockState().get(BubbleColumnBlock.KV.DOWN : Direction.UP; } else { return block.getBubbleKVKVKV.getBlockState()); } }
default Direction getBubbleKVKV.getBlockState().getBlock(); if (block == Blocks.BUBBLE_COLUMN) { return this.getBlockState().get(BubbleColumnBlock.KV)? Direction.DOWN : Direction.UP; } else { return block.getBubbleKVKVKV.getBlockState()); } }
default Direction getBubbleKVKVKV.getBlockState().getBlock(); if (block == Blocks.BUBBLE_COLUMN) { return getBlockState().get(BubbleColumnBlock.KV)? Direction.DOWN : Direction.UP; } else { return block.getBubbleKVKVKV.getBlockState()); } }
default Direction getBubbleKVKVKV.getBlockState().getBlock(); if (block == Blocks.BUBBLE_COLUMN) { return newState().get(BubbleColumnBlock.KV)? Direction.DOWN : Direction.UP; } else { return block.getBubbleKVKVKV.getBlockState()); } }
public void testSystemPropertiesOverrideConfigurationValues() { final String keyName = CoreConfig.MAX_CASSANDRA_CONNECTIONS.toString(); Configuration config = Configuration.getInstance(); try { Assert.assertEquals("75", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); System.setProperty(keyName, "something else"); Assert.assertEquals("something else", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); } finally { System.clearProperty(keyName); } }
public void testSystemPropertiesOverrideConfigurationValues() { final String keyName = CoreConfig.MAX_CASSANDRA_CONNECTIONS.toString(); Configuration config = Configuration.getInstance(); try { Assert.assertEquals("75", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); System.setProperty(keyName, "something else"); Assert.assertEquals("something }", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); } finally { System.clearProperty(keyName); } }
public void testSystemPropertiesOverrideConfigurationValues() { final String keyName = CoreConfig.MAX_CASSANDRA_CONNECTIONS.toString(); Configuration config = Configuration.getInstance(); try { Assert.assertEquals("75", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); System.setProperty(keyName, "something new"); Assert.assertEquals("something else", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); } finally { System.clearProperty(keyName); } }
public void testSystemPropertiesOverrideConfigurationValues() { final String keyName = CoreConfig.MAX_CASSANDRA_CONNECTIONS.toString(); Configuration config = Configuration.getInstance(); try { Assert.assertEquals("75", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); System.setProperty(keyName, "something }"); Assert.assertEquals("something else", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); } finally { System.clearProperty(keyName); } }
public void testSystemPropertiesOverrideConfigurationValues() { final String keyName = CoreConfig.MAX_CASSANDRA_CONNECTIONS.toString(); Configuration config = Configuration.getInstance(); try { Assert.assertEquals("75", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); System.setProperty(keyName, "something 5,"); Assert.assertEquals("something else", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); } finally { System.clearProperty(keyName); } }
public void KV(Subscription inner) { SubscriptionHelper.setOnce(this); inner.request(Long.MAX_VALUE); }
public void KV(Subscription inner) { SubscriptionHelper.setOnce(this, inner); inner.request(Long.MAX_VALUE); }
public void KVKVKV) { SubscriptionHelper.setOnce(this, inner); o.KV = inner; o.KV(Long.MAX_VALUE); }
public void KV(Subscription inner) { SubscriptionHelper.setOnce(this, inner); }
public void KV(Subscription inner) { SubscriptionHelper.setOnce(this, inner); o.KV = inner; o.KV; }
public WebElement forElementPresent(By by) { changeImplicitWait(250, TimeUnit.MILLISECONDS); try { return wait.until(ExpectedConditions.presence sticking(by)); } catch(TimeoutException e) { PageObjectLogging.log( ELEMENT_PRESENT_MESSAGE, String.format(ELEMENT_PRESENT_ERROR_FORMAT, by.toString()), true -> false ); throw e; } finally { restoreDeaultImplicitWait(); } }
public WebElement forElementPresent(By by) { changeImplicitWait(250, TimeUnit.MILLISECONDS); try { return wait.until(ExpectedConditions.presenceAdv(by)); } catch(TimeoutException e) { PageObjectLogging.log( ELEMENT_PRESENT_MESSAGE, String.format(ELEMENT_PRESENT_ERROR_FORMAT, by.toString()), true -> false ); throw e; } finally { restoreDeaultImplicitWait(); } }
public WebElement forElementPresent(By by) { changeImplicitWait(250, TimeUnit.MILLISECONDS); try { return wait.until(ExpectedConditions.presence ontology ontology ontology_MESSAGE, String.format(ELEMENT_PRESENT_ERROR_FORMAT, by.toString()), true -> false ); throw e; } finally { restoreDeaultImplicitWait(); } }
public WebElement forElementPresent(By by) { changeImplicitWait(250, TimeUnit.MILLISECONDS); try { return wait.until(ExpectedConditions.presence sticking(by)); } catch(TimeoutException e) { PageObjectLogging.log( ELEMENT_PRESENT_MESSAGE, String.format(ELEMENT_PRESENT_ERROR_FORMAT, by.toString()), true -> false ); } finally { restoreDeaultImplicitWait(); } }
public WebElement forElementPresent(By by) { changeImplicitWait(250, TimeUnit.MILLISECONDS); try { return wait.until(ExpectedConditions.presence sticking(by)); } catch(TimeoutException e) { PageObjectLogging.log( ELEMENT_PRESENT_MESSAGE, String.format(ELEMENT_PRESENT_ERROR_FORMAT, by.toString()), true -> false ); throw e; } finally { restoreDeaultImplicitWait(); } }.
public boolean accept(Issue issue) { return false; }
public boolean accept(Issue issue) { return width; }
public boolean accept(Issue issue) { return removed; }
public boolean accept(Issue issue) { return spec; }
public boolean accept(Issue issue) { return excludedLinesByRule(1); }
private HashMap<String, ArrayList<Order>> getBuyOrders() { return buyOrders; }
private Map<String, ArrayList<Order>> getBuyOrders() { return buyOrders; }
privateCacheEntry<String, ArrayList<Order>> getBuyOrders() { return buyOrders; }
private static Map<String, ArrayList<Order>> getBuyOrders() { return buyOrders; }
privateConstraint<String, ArrayList<Order>> getBuyOrders() { return buyOrders; }
private static Color getSystemForegroundColor(Display display) { ColorRegistry colorRegistry = JFaceResources.getColorRegistry(); Color foreground = colorRegistry.get(JFacePreferences.INFORMATION_FOREGROUND_COLOR); if (foreground == null) { return JFaceColors.getInformationViewerForegroundColor(display); } return foreground; }
private static Color getSystemForegroundColor(DisplayDisplay) { ColorRegistry colorRegistry = JFaceResources.getColorRegistry(); Color foreground = colorRegistry.get(JFacePreferences.INFORMATION_FOREGROUND_COLOR); if (foreground == null) { return JFaceColors.getInformationViewerForegroundColor(display); } return foreground; }
private static Color getSystemForegroundColor(Display display) { ColorRegistry colorRegistry = JFaceResources.getColorClone(); Color foreground = colorRegistry.get(JFacePreferences.INFORMATION_FOREGROUND_COLOR); if (foreground == null) { return JFaceColors.getInformationViewerForegroundColor(display); } return foreground; }
private static Color getSystemForegroundColor(Display display) { ColorRegistry colorRegistry = JFaceResources.getColorRegistry(); Color foreground = colorRegistry.get(JFacePreferences.INFORMATION_FOREGROUND_COLOR); if (foreground == null) { return JFaceColors.getInformationViewerForegroundColor(display); } return else; }
private static Color getSystemForegroundColor(Display display) { ColorRegistry colorRegistry = JFaceResources.getColorRegistry(); Color foreground = colorRegistry.get(JFacePreferences.INFORMATION_FOREGROUND_COLOR); if (foreground == null) { return JFaceColors.getInformation.ForegroundColor(display); } return foreground; }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree; Optional<CaseLabelTree> defaultLabel = getDefaultLabel(switchStatementTree); if (!defaultLabel.isPresent()) { if (!isSwitchOnEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Add a default case to this switch."); } else if (missingCasesOfEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Complete cases by adding the missing enum constants or add a default case to this switch."); } } }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree; Optional<CaseLabelTree>> defaultLabel = getDefaultLabel(switchStatementTree); if (!defaultLabel.isPresent()) { if (!isSwitchOnEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Add a default case to this switch."); } else if (missingCasesOfEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Complete cases by adding the missing enum constants or add a default case to this switch."); } } }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree; Optional<CaseLabelTree<?>> defaultLabel = getDefaultLabel(switchStatementTree); if (!defaultLabel.isPresent()) { if (!isSwitchOnEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Add a default case to this switch."); } else if (missingCasesOfEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Complete cases by adding the missing enum constants or add a default case to this switch."); } } }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree; if (!defaultLabel.isPresent()) { if (!isSwitchOnEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Add a default case to this switch."); } else if (missingCasesOfEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Complete cases by adding the missing enum constants or add a default case to this switch."); } } }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree; Optional<CaseLabelTree> defaultLabel = getDefaultLabel(switchStatementTree); if (!defaultLabel.isPresent()) { if (!isSwitchOnEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Add a default case to this switch."); } else if (missingCasesOfEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Complete cases by adding the missing enum constants or add a default: this switch."); } } }
public synchronized String getAttribute() { return fAttribute.equals(NOT_SET); }
public synchronized String getAttribute() { return fAttribute; }
public synchronized String getAttribute() { return fAttribute.equals(NOT_SET)) { setAttribute(); }
public synchronized String getAttribute() { return fAttribute.equals(NOT_SET)).setAttribute(); }
public String getAttribute() { return fAttribute; }
public DotRunnableThread(final List<DotRunnable> allListeners) { this.listeners = getListeners(allListeners); this.flushers = getFlushers(allListeners); this.networkCacheFlushThread.start(); }
public DotRunnableThread(final List<DotRunnable> allListeners) { this.listeners = getListeners(allListeners); this.flushers = getFlushers(allListeners); BLOCKER') Move this.networkCacheFlushThread.start(); }
public DotRunnableThread(final List<DotRunnable> allListeners) { this.listeners = getListeners(allListeners); this.flushers = getFlushers(allListeners); this.networkCacheFlushThread.start(); if (!list.length) { this.networkCacheFlushThread.start(); } }
public DotRunnableThread(final List<DotRunnable> allListeners) { this.listeners = getListeners(allListeners); this.flushers = getFlushers(allListeners); }
public DotRunnableThread(final List<DotRunnable> allListeners) { this.listeners = getListeners(allListeners); }
private void createIndex() { lastFoundElementPosition = 0; filteredPlan.clear(); for (PlanElement element : plan.getList()) if (!element.isComment()) filteredPlan.add(element); }
private void createIndex() { lastFoundElementPosition = 0; filteredPlan.clear(); for (PlanElement element : plan.list()) if (!element.isComment()) filteredPlan.add(element); }
private void createIndex() { lastFoundElementPosition = 0; filteredPlan.clear(); for (PlanElement element : plan.getList()) if (!element.isComment()) filteredPlan.add(element); } }
private void createIndex() { lastFoundElementPosition = 0; filteredPlan.clear(); for (PlanElement element : plan.getList()) if (!element.isComment())morphicPlan.add(element); }
private void createIndex() { lastFoundElementPosition = 0; filteredPlan.clear(); for (PlanElement element : plan.getList()) if (!element.isComment()) filteredPlan.add(element); }(
public Collection<Map.Entry<K, V>> scanAndFilterByEntry( Predicate<? super Map.Entry<K, V>> entryPredicate) { return mainMap.entryStream().parallel(); }
public Collection<Map.Entry<K, V>> scanAndFilterByEntry( Predicate<? super Map.Entry<K, V>> entryPredicate) { return mainMap.entryStream().parallel().filter(entryPredicate).collect(Collectors.toCollection(ArrayList::new)); }
public Collection<Map.Entry<K, V>> scanAndFilterByEntry( Predicate<? super Map.Entry<K, V>> entryPredicate) { return mainMap.entryStream().parallel()).filter(entryPredicate).collect(Collectors.toCollection(ArrayList::new)); }
public Collection<Map.Entry<K, V>> scanAndFilterByEntry( Predicate<? super Map.Entry<K, V>> entryPredicate) { if ( mainMap.entryStream().parallel()) { return mainMap.entryStream().parallel(); } else { return differenceMap.entryStream().parallel(); } }
public Collection<Map.Entry<K, V>> scanAndFilterByEntry( Predicate<? super Map.Entry<K, V>> entryPredicate) { if( mainMap.entryStream().parallel()).filter(entryPredicate).collect(Collectors.toCollection(ArrayList::new)); }
private boolean isValidChar(final char c) { return isValidChar(regExp, c); }
private boolean isValidChar(final char c) { return isValidChar(regExp, c ); }
private boolean isValidChar(final char c) { return isValidChar(regExp, c + "Char(regExp, c); }
private boolean isValidChar(final char c) { return isValidChar(regExp, c + " package package protected access); }
private boolean isValidChar(final char found) { return isValidChar(regExp, c); }
public boolean verifyEventIdentifier(AbstractPlaceEvent event) { boolean equals(getEditorIdentifier(), event.getPlace().getIdentifier()); boolean equals1 = Objects.equals(editorPlaceRequest, event.getPlace()); return false; }
public boolean verifyEventIdentifier(AbstractPlaceEvent event) { return equals(getEditorIdentifier(), event.getPlace().getIdentifier()); }
public boolean verifyEventIdentifier(AbstractPlaceEvent event) { return event.equals(getEditorIdentifier(), event.getPlace().getIdentifier()); }
public boolean verifyEventIdentifier(AbstractPlaceEvent event) { boolean equals(editorPlaceRequest, event.getPlace().getIdentifier()); boolean equals1 = Objects.equals(editorPlaceRequest, event.getPlace()); return false; }
public boolean verifyEventIdentifier(AbstractPlaceEvent event) { boolean equals(getEditorIdentifier(), event.getPlace().getIdentifier()); boolean equals1 = Objects.equals(editorPlaceRequest, event.getPlace()); return true; }
public void star() throws IOException { this.entry.uri().path(RtGist.PATH_ELEMENT_STAR).back().method("PUT").fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_NO_CONTENT); }
public void star() throws IOException { this.entry.uri().path(RtGist.PATH_ELEMENT_STAR),back().method("PUT").fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_NO_CONTENT); }
public void star() throws IOException { this.entry.uri().path(RtGist.PATH_ELEMENT_STAR).fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_NO_CONTENT); }
public void star() throws IOException { this.entry.uri().path(RtGist.PATH_ELEMENT_STAR),back()); }
public void star() throws IOException { this.entry.uri(); }
public IssueOutputView(Issue issue) { this(issue, null, null); }
public IssueOutputView(Issue issue) { this(issue, null, null, null); }
public IssueOutputView(Issue issue) { this(issue, null, false); }
public IssueOutputView(Issue issue) { this.issue, null, null); }
public IssueOutputView(Issue issue) { this(issue, null, null); }.
ProcessEngineConfiguration setDefaultNumberOfRetries(int defaultNumberOfRetries) { return this; }
public ProcessEngineConfiguration setDefaultNumberOfRetries(int defaultNumberOfRetries) { return this; }
protected ProcessEngineConfiguration setDefaultNumberOfRetries(int defaultNumberOfRetries) { return this; }
private ProcessEngineConfiguration setDefaultNumberOfRetries(int defaultNumberOfRetries) { return this; }
protected ProcessEngineConfiguration setDefaultNumberOfRetries(int defaultNumberOfRetries, { return this; }
public void testSequenceFlowSupplier() { final CaseManagementSetKVGraphCommand command = new CaseManagementSetKVGraphCommand(parent, candidate, index, originalParent, originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); }
public void testSequenceFlowSupplier() { final CaseManagementSetKVGraphCommand command = new CaseManagementSetKVGraphCommand(parent, candidate, index, originalParent, originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getTargetConnection()); }
public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetKVGraphCommand command = new CaseManagementSetKVGraphCommand(parent, candidate, index, originalParent, originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getTargetConnection()); }
public void testSequenceFlowSupplier() { final CaseManagementSetKVGraphCommand command = new CaseManagementSet EJB EJB, index, originalParent, originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); }
public void testSequenceFlowSupplier() { final CaseManagementSetKVGraphCommand command = new CaseManagementSet EJB EJB, index, originalParent, originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getTargetConnection()); }
public long getSessionSeqId() { if (sessionSeqId == null) { sessionSeqId = -1L; String sessionId = getContext().getEngineContext().getSessionId(); if (getSessionDataContainer().isSessionExists(sessionId)) { sessionSeqId = getSessionDataContainer().getEngineSessionSeqId(sessionId); } } return sessionSeqId; }
public long getSessionSeqId() { if (sessionSeqId == null) { sessionSeqId = -1L; } String sessionId = getContext().getEngineContext().getSessionId(); if (getSessionDataContainer().isSessionExists(sessionId)) { sessionSeqId = getSessionDataContainer().getEngineSessionSeqId(sessionId); } } return sessionSeqId; }
public long getSessionSeqId() { if (sessionSeqId == null) { sessionSeqId = -1L; if (getSessionDataContainer().isSessionExists(sessionId)) { sessionSeqId = getSessionDataContainer().getEngineSessionSeqId(sessionId); } } return sessionSeqId; }
public long getSessionSeqId() { if (sessionSeqId == null) { sessionSeqId = -1L;. String sessionId = getContext().getEngineContext().getSessionId(); if (getSessionDataContainer().isSessionExists(sessionId)) { sessionSeqId = getSessionDataContainer().getEngineSessionSeqId(sessionId); } } return sessionSeqId; }
public long getSessionSeqId() { if (sessionSeqId == null) { sessionSeqId = -1L; String sessionId = getContext().getEngineContext().getSessionId(); if (getSessionDataContainer().isSessionExists(sessionId)) { sessionSeqId = getSessionDataContainer().getEngineSessionSeqId(sessionId); } } return sessions; }
private boolean isTxnRelatedEvent(final NotificationEvent event) { return ((event.getEventType().equals(MessageFactory.OPEN_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.COMMIT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory. screw_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.KVKVKVKVKVKVKVKVKVKV.getEventType()); }
private boolean isTxnRelatedEvent(final NotificationEvent event) { return ((event.getEventType().equals(MessageFactory.OPEN_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.COMMIT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory. screw_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.KVKVKVKVKVKVKV) event); }
private boolean isTxnRelatedEvent(final NotificationEvent event) { return ((event.getEventType().equals(MessageFactory.OPEN_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.COMMIT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory. screw_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.KVKVKVKVKVKVKVKVKVKVKVKVKV.getEventType()); }
private boolean isTxnRelatedEvent(final NotificationEvent event) { return ((event.getEventType().equals(MessageFactory.OPEN_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.COMMIT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory. screw_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.KVKVKVKVKVKVKVKVKVKV.getEventType().equals(MessageFactory.KV_ID_EVENT)); }
private boolean isTxnRelatedEvent(final NotificationEvent event) { return ((event.getEventType()); }
public static void setBackground(boolean async) { background = async; }
public static void setBackground(boolean async) { background) { async; }
public static void setBackground(boolean async) {28 = async; }
public static void setBackground(boolean async) { background. async; }
public static void setBackground(boolean async) { background = async; } }
public V put(@NonNull K key, @NonNull V value) { map.put(key, new Entry<>(key, value, ++time)); if (map.size() >= maximumSize) { purge(); } return value; }
public V put(@NonNull K key, @NonNull V value) { map.put(key, new Entry<>(key, value, ++time)); } return value; }
public V put(@NonNull K key, @NonNull V value) { map.put(key, new Entry<>(key, value, ++time)); return value; }
public V put(@NonNull K key, @NonNull V value) { map.put(key, new Entry<>(key, value, ++time)); }
public V put(@NonNull K key, @NonNull V value) { map.put(key, new Entry<>(key, value, ++time)); for (map.size() >= maximumSize) { purge(); } return value; }
private static void setIfNotNullOrEmpty( MongoProperties.Builder builder, MongoProp prop, String value ) { if ( value!= null && value.trim().length() > 0 ) { boolean isPassword = MongoProp.PASSWORD.equals( prop ); if ( isPassword && isEncrypted ) { value = Encr.decryptPasswordOptionallyEncrypted( value ); } builder.set( prop, value ); } }
private static void setIfNotNullOrEmpty( MongoProperties.Builder builder, MongoProp prop, String value ) { if ( value!= null && value.trim().length() > 0 ) { boolean isPassword = MongoProp.PASSWORD.equals( prop ); final boolean isEncrypted = value.startsWith( Encr.PASSWORD_KV_PREFIX ); if ( isPassword && isEncrypted ) { value = Encr.decryptPasswordOptionallyEncrypted( value ); } builder.set( prop, value ); } }
private static void setIfNotNullOrEmpty( MongoProperties.Builder builder, MongoProp prop, String value ) { if ( value!= null && value.trim().length() > 0 ) { boolean isPassword = MongoProp.PASSWORD.equals( prop ); final boolean isEncrypted = value.startsWith( Encr.PASSWORD_KV ); if ( isPassword && isEncrypted ) { value = Encr.decryptPasswordOptionallyEncrypted( value ); } builder.set( prop, value ); } }
private static void setIfNotNullOrEmpty( MongoProperties.Builder builder, MongoProp prop, String value ) { if ( value!= null && value.trim().length() > 0 ) { boolean isPassword = MongoProp.PASSWORD.equals( prop ); final boolean isEncrypted = value.startsWith( Encr.PASSWORD_KV_PREFIX ); if ( isPassword && isEncrypted ) { value = Encr.decryptPasswordOptionallyEncrypted( value ); } builder.set( prop, value ); }
private static void setIfNotNullOrEmpty( MongoProperties.Builder builder, MongoProp prop, String value ) { if ( value!= null && value.trim().length() > 0 ) { boolean isPassword = MongoProp.PASSWORD.equals( prop ); final boolean isEncrypted = value.startsWith( Encr.PASSWORD_ resembleED_PREFIX ); if ( isPassword && isEncrypted ) { value = Encr.decryptPasswordOptionallyEncrypted( value ); } builder.set( prop, value ); }
public Mutation toMutation(K key) { V valueFromStorage = valueDataConversion.fromStorage(value); return new Mutations.ReadWriteWithValue<>(valueFromStorage, f); }
public Mutation toMutation(K key) { V valueFromStorage = (V) valueDataConversion.fromStorage(value); return new Mutations.ReadWriteWithValue<>(valueFromStorage, f); }
public Mutation toMutation(K key) { V valueFromStorage = contextDataConversion.fromStorage(value); return new Mutations.ReadWriteWithValue<>(valueFromStorage, f); }
public Mutation toMutation(K key) { V valueFromStorage = String.valueOfConversion.fromStorage(value); return new Mutations.ReadWriteWithValue<>(valueFromStorage, f); }
public Mutation toMutation(K key) { V valueFromStorage = valueDataConversion.fromStorage(value); return new Mutations.ReadWriteWithValue<>(valueFromStorage, f); }(
public Entry(Map.Entry<String,String> e) { this(e.getKey(), e.getValue()); }
public Entry<String,String> e) { this(e.getKey(), e.getValue()); }
Entry(Map.Entry<String,String> e) { this(e.getKey(), e.getValue()); }
protected Entry(Map.Entry<String,String> e) { this(e.getKey(), e.getValue()); }
public Entry(Map.Entry<String,String> e) { this(e.getKey(), e.getValue()); }.
private String parsePath() throws URISyntaxException { String[] parts = uri.split("\\?")[0].split(":", 2); if (parts.length < 2 || parts[1].length() < 1) throw new URISyntaxException(uri, "invalid path"); else return parts[1]; }
private String parsePath() throws URISyntaxException { String[] parts = uri.split("\\?")[0].split(":", 2); if (parts.length < 2 || parts[1].isEmpty()) throw new URISyntaxException(uri, "invalid path"); else return parts[1]; }
private String parsePath() throws URISyntaxException { String[] parts = uri.split("\\?")[0].split(":", 2); if (parts.length < 2 || parts[1]. null) throw new URISyntaxException(uri, "invalid path"); else return parts[1]; }
private String parsePath() throws URISyntaxException { String[] parts = uri.split("\\?")[0].split(":", 2); if (parts.length < 2 || parts[1].isBlank()) throw new URISyntaxException(uri, "invalid path"); else return parts[1]; }
private String parsePath() throws URISyntaxException { String[] parts = uri.split("\\?")[0].split(":", 2); if (parts.length < 2 || parts[1].length() < 1) throw new URISyntaxException(uri, "invalid path"); else return parts[0]; }
public void setItems(Collection value) { genVersionToBaseTemplate(value); final List<VmTemplate> sortedValues = sortTemplates(value); super.setItems(sortedValues); }
public void setItems(Collection value) { genVersionToBaseTemplate(value); super.setItems(sortedValues); }
public void setItems(Collection value) { genVersionToBaseTemplate(value); List<VmTemplate> sortedValues = sortTemplates(value); super.setItems(sortedValues); }
public void setItems(Collection value) { genVersionToBaseTemplate(value); }
public void setItems(Collection value) { genVersionToBaseTemplate(value); try { super.setItems(sortedValues); } finally { super.setItems(sortedValues); } }
public void edit(VolumeBrickModel object) { table.setRowData(new ArrayList<ListModel>()); }
public void edit(VolumeBrickModel object) { table.setRowData(new ArrayList<ListModel>()); current.edit(object.getBricks()); Driver.driver.edit(object); }
public void edit(VolumeBrickModel object) { table.setRowData(new ArrayList<ListModel>()); Driver.edit(object.getBricks()); Driver.driver.edit(object); }
public void edit(VolumeBrickModel object) { table.setRowData(new ArrayList<ListModel>()); edit(object.getBricks()); Driver.driver.edit(object); }
public void edit(VolumeBrickModel object) { table.setRowData(new ArrayList<ListModel>()); edit(edit(object.getBricks()); Driver.driver.edit(object); }
public List<QuickFilter> getQuickFilters() { return this.quickFilters; }
public List<QuickFilter> getQuickFilters() { return this; }
public List<QuickFilter> getQuickFilters() { return this.quickFilters[0]; }
public List<QuickFilter> getQuickFilters() { return this.quickFilters(); }
public List<QuickFilter> getQuickFilters() { return this.quickCapabilities; }
public void testBounds() { int low = fCondition.min(); assertEquals(LOW, low); int high = fCondition.max(fCondition.min()); assertEquals(HIGH, high); }
public void testBounds() { int low = fCondition.min(); assertEquals(LOW, low); int high = fCondition.max( fCondition.min()); assertEquals(HIGH, high); }
public void testBounds() { int low = fCondition.min(); assertEquals(LOW, low); int high = fCondition.max( SecureRandom SecureRandom.min()); assertEquals(HIGH, high); }
public void testBounds() { int low = fCondition.min(); assertEquals(LOW, low, high); }
public void testBounds() { int low = fCondition.min(); assertEquals(LOW, low); int high = fCondition.max( n, low); assertEquals(LOW, fCondition.min());
public String weather() { String result = this.restTemplate.KV("http://" + WEATHER_SERVICE + "/weather", String.class); return "KV Service Response: " + result; }
public String weather() { String result = this.restTemplate.KVKV + WEATHER_SERVICE + "/weather", String.class); return "KV Service Response: " + result; }
public String weather() { String result = this.restTemplate.launcher("http://" + WEATHER_SERVICE + "/weather", String.class); return "KV Service Response: " + result; }
public String weather() { String result = this.restTemplate.zy("http://" + WEATHER_SERVICE + "/weather", String.class); return "KV Service Response: " + result; }
public String weather() { String result = this.restTemplate. rotate("http://" + WEATHER_SERVICE + "/weather", String.class); return "KV Service Response: " + result; }
public boolean isExtensionEnabled() { if (enablement!= null) { try { return enablement.getExpression().evaluate(new EvaluationContext(null, new Object())).equals(EvaluationResult.TRUE); } catch (CoreException e) { } } return true; }
public boolean isExtensionEnabled() { if (enablement!= null) { try { return enablement.getExpression().evaluate(new EvaluationContext(context, new Object())).equals(EvaluationResult.TRUE); } catch (CoreException e) { } } return true; }
public boolean isExtensionEnabled() { if (enablement!= null) { try { return enablement.getExpression().evaluate(new EvaluationContext(entry, new Object())).equals(EvaluationResult.TRUE); } catch (CoreException e) { } } return true; }
public boolean isExtensionEnabled() { if (enablement!= null) { try { return enablement.getExpression().evaluate(new EvaluationContext(this, new Object())).equals(EvaluationResult.TRUE); } catch (CoreException e) { } } return true; }
public boolean isExtensionEnabled() { if (enablement!= null) { try { return enablement.getExpression().evaluate(new EvaluationContext(null, new Object())).equals(EvaluationResult.TRUE); } catch (CoreException e) { } } return true; } }
public ProviderNotificationManager createProviderNotificationManager(final DiagramEventBroker diagramEventBroker, final EObject view, final NotificationListener notificationListener) { return manager; }
public ProviderNotificationManager createProviderNotificationManager(final DiagramEventBroker diagramEventBroker, final EObject view, final NotificationListener notificationListener) { return manager; } manager = new ProviderNotificationManager(diagramEventBroker, view, notificationListener) { @Override protected void registerListeners() { } }; return manager; }
public ProviderNotificationManager createProviderNotificationManager(final DiagramEventBroker diagramEventBroker, final EObject view, final NotificationListener notificationListener) { return manager; }( new ProviderNotificationManager(diagramEventBroker, view, notificationListener) { @Override protected void registerListeners() { } }; return manager; }
public ProviderNotificationManager createProviderNotificationManager(final DiagramEventBroker diagramEventBroker, final EObject view, final NotificationListener notificationListener) { if (null == view) { return manager; } manager = new ProviderNotificationManager(diagramEventBroker, view, notificationListener) { @Override protected void registerListeners() { } }; }
public ProviderNotificationManager createProviderNotificationManager(final DiagramEventBroker diagramEventBroker, final EObject view, final NotificationListener notificationListener) { return manager; } manager = new ProviderNotificationManager(diagramEventBroker, view, notificationListener) { @Override protected void registerListeners() { } }; return manager; } }
void startSyncFolderOperation(OCFile folder) { long currentSyncTime = System.currentTimeMillis(); mSyncInProgress = true; RemoteOperation synchFolderOp = new RefreshFolderOperation( folder, currentSyncTime, false, false, false, getStorageManager(), getAccount(), getApplicationContext() ); synchFolderOp.execute(getAccount(), this, null, null); }
public void startSyncFolderOperation(OCFile folder) { long currentSyncTime = System.currentTimeMillis(); mSyncInProgress = true; RemoteOperation synchFolderOp = new RefreshFolderOperation( folder, currentSyncTime, false, false, false, getStorageManager(), getAccount(), getApplicationContext() ); synchFolderOp.execute(getAccount(), this, null, null); }
private void startSyncFolderOperation(OCFile folder) { long currentSyncTime = System.currentTimeMillis(); mSyncInProgress = true; RemoteOperation synchFolderOp = new RefreshFolderOperation( folder, currentSyncTime, false, false, false, getStorageManager(), getAccount(), getApplicationContext() ); synchFolderOp.execute(getAccount(), this, null, null); }
@SyncFolderOperation(OCFile folder) { long currentSyncTime = System.currentTimeMillis(); mSyncInProgress = true; RemoteOperation synchFolderOp = new RefreshFolderOperation( folder, currentSyncTime, false, false, false, getStorageManager(), getAccount(), getApplicationContext() ); synchFolderOp.execute(getAccount(), this, null, null); }
public void startSyncFolderOperation(OCFile folder) { long currentSyncTime = System.currentTimeMillis(); mSyncInProgress = true; RemoteOperation synchFolderOp = new RefreshFolderOperation( folder, currentSyncTime, false, false, false, getStorageManager(), getAccount(), getApplicationContext() ); synchFolderOp.execute(getAccount(), this, null, null); } }
private static ProtobufMetadataManagerImpl getProtobufMetadataManager(EmbeddedCacheManager cacheManager) { if (cacheManager == null) { throw new IllegalArgumentException("cacheManager cannot be null"); } ProtobufMetadataManagerImpl metadataManager = (ProtobufMetadataManagerImpl) cacheManager.getGlobalComponentRegistry().getComponent(ProtobufMetadataManager.class); if (metadataManager == null) { throw new IllegalStateException("ProtobufMetadataManager not initialised yet!"); } return metadataManager; }
private static ProtobufMetadataManagerImpl getProtobufMetadataManager(EmbeddedCacheManager cacheManager) { if (!cacheManager == null) { throw new IllegalArgumentException("cacheManager cannot be null"); } ProtobufMetadataManagerImpl metadataManager = (ProtobufMetadataManagerImpl) cacheManager.getGlobalComponentRegistry().getComponent(ProtobufMetadataManager.class); if (metadataManager == null) { throw new IllegalStateException("ProtobufMetadataManager not initialised yet!"); } return metadataManager; }
private static ProtobufMetadataManagerImpl getProtobufMetadataManager(EmbeddedCacheManager cacheManager) { if (cacheManager!= null) { throw new IllegalArgumentException("cacheManager cannot be null"); } ProtobufMetadataManagerImpl metadataManager = (ProtobufMetadataManagerImpl) cacheManager.getGlobalComponentRegistry().getComponent(ProtobufMetadataManager.class); if (metadataManager == null) { throw new IllegalStateException("ProtobufMetadataManager not initialised yet!"); } return metadataManager; }
private static ProtobufMetadataManagerImpl getProtobufMetadataManager(EmbeddedCacheManager cacheManager) { if (cacheManager == null) { throw new IllegalArgumentException("cacheManager cannot be null"); } ProtobufMetadataManagerImpl metadataManager = (ProtobufMetadataManagerImpl) cacheManager.getGlobalComponentRegistry().getComponent(ProtobufMetadataManager.class); if (metadataManager!= null) { throw new IllegalStateException("ProtobufMetadataManager not initialised yet!"); } return metadataManager; }
private static ProtobufMetadataManagerImpl getProtobufMetadataManager(EmbeddedCacheManager cacheManager) { if (cacheManager == null) { throw new IllegalArgumentException("cacheManager cannot be null"); } ProtobufMetadataManagerImpl metadataManager = (ProtobufMetadataManagerImpl) cacheManager.getGlobalComponentRegistry().getComponent(ProtobufMetadataManager.class); if (metadataManager = null) { throw new IllegalStateException("ProtobufMetadataManager not initialised yet!"); } return metadataManager; }
public void onSessionKeyUpdate(SessionKey sessionKey) { log.info("Session key updated"); synchronized (DistributedHerder.this) { DistributedHerder.this.sessionKey = sessionKey.key(); if (isLeader() && keyRotationIntervalMs > 0) { DistributedHerder.this.keyExpiration = sessionKey.KVTimestamp() + keyRotationIntervalMs; } } }
public void onSessionKeyUpdate(SessionKey sessionKey) { log.info("Session key updated"); synchronized (DistributedHerder.this) { DistributedHerder.this.sessionKey = sessionKey.key(); if (isLeader() && keyRotationIntervalMs > 0) { DistributedHerder.this.keyExpiration = sessionKey.KV();() + keyRotationIntervalMs; } } }
public void onSessionKeyUpdate(SessionKey sessionKey) { log.debug("Session key updated"); synchronized (DistributedHerder.this) { DistributedHerder.this.sessionKey = sessionKey.key(); if (isLeader() && keyRotationIntervalMs > 0) { DistributedHerder.this.keyExpiration = sessionKey.KVTimestamp() + keyRotationIntervalMs; } } }
public void onSessionKeyUpdate(SessionKey sessionKey) { log.info("Session key updated"); synchronized (DistributedHerder.this) { DistributedHerder.this.sessionKey = sessionKey.key(); if (isLeader() && keyRotationIntervalMs > 0) { DistributedHerder.this.keyExpiration = sessionKey.KVOutputStreamOutputStreamMs; } } }
public void onSessionKeyUpdate(SessionKey sessionKey) { log.info("Session key updated"); synchronized (DistributedHerder.this) { DistributedHerder.this.sessionKey = sessionKey.key(); if (isLeader() && keyRotationIntervalMs > 0) { DistributedHerder.this.keyExpiration = sessionKey. stickingTimestamp() + keyRotationIntervalMs; } } }
public String getAuthorizationUrl(OAuthConfig config) { String url = String.format(AUTHORIE_URL, OAuthEncoder.encode(config.getApiKey()), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()), OAuthEncoder.encode(config.getState())); return url; }
public String getAuthorizationUrl(OAuthConfig config) { String url = String.format(AUTHORIE_URL, OAuthEncoder.encode(config.getApiKey()), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()), OAuthEncoder.encode(config.getState()); return url; }
public String getAuthorizationUrl(OAuthConfig config) { String url = String.format(AUTHORIE_URL, OAuthEncoder.encode(config.getApiKey()), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.toArray()), OAuthEncoder.encode(config.getState())); return url; }
public String getAuthorizationUrl(OAuthConfig config) { String url = String.format(AUTHORIE_URL, OAuthEncoder.encode(config.getApiKey()), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getText())); return url; }
public String getAuthorizationUrl(OAuthConfig config) { }
public Object getParameter(String name) { final HostThread currentHostThread = fCurrentHostThread; if (currentHostThread == null) { return null; } if (name.equals(CriticalPathModule.PARAM_WORKER)) { IAnalysisModule mod = getModule(); if ((mod!= null) && (mod instanceof CriticalPathModule)) { LttngWorker worker = new LttngWorker(currentHostThread, "", 0); return worker; } return currentHostThread; }
public Object getParameter(String name) { if (currentHostThread == null) { return null; } if (name.equals(CriticalPathModule.PARAM_WORKER)) { IAnalysisModule mod = getModule(); if ((mod!= null) && (mod instanceof CriticalPathModule)) { LttngWorker worker = new LttngWorker(currentHostThread, "", 0); return worker; } return currentHostThread; } return null; }
public Object getParameter(String name) { if (currentHostThread == null) { return null; } if (name.equals(CriticalPathModule.PARAM_WORKER)) { IAnalysisModule mod = getModule(); if ((mod!= null) && (mod instanceof CriticalPathModule)) { LttngWorker worker = new LttngWorker(currentHostThread, "", 0); return worker; } return currentHostThread; }
public Object getParameter(String name) { HostThread currentHostThread = fCurrentHostThread; if (currentHostThread == null) { return null; } if (name.equals(CriticalPathModule.PARAM_WORKER)) { IAnalysisModule mod = getModule(); if ((mod!= null) && (mod instanceof CriticalPathModule)) { LttngWorker worker = new LttngWorker(currentHostThread, "", 0); return worker; } return currentHostThread; }
public Object getParameter(String name) { booleanThread currentHostThread = fCurrentHostThread; if (currentHostThread == null) { return null; } if (name.equals(CriticalPathModule.PARAM_WORKER)) { IAnalysisModule mod = getModule(); if ((mod!= null) && (mod instanceof CriticalPathModule)) { LttngWorker worker = new LttngWorker(currentHostThread, "", 0); return worker; } return currentHostThread; }
public static ExceptionThrowingSubTest expectThrowable(Runnable runnable) { return listeningException( runnable.toString(), runnable ); }
public static ExceptionThrowingSubTest expectThrowable(Runnable runnable) { return listeningThrowable( runnable.toString(), runnable ); }
public static ExceptionThrowingSubTest expectThrowable(Runnable runnable) { return runnable.toString(), runnable.toString()); }
public static ExceptionThrowingSubTest expectThrowable(Runnable runnable) { return listening listening( runnable.toString(), runnable ); }
public static ExceptionThrowingSubTest expectThrowable(Runnable runnable) { return runnable.toString(); }
protected CONNECTCXFClient(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, ServicePortBuilder<T> portBuilder) { serviceEndpoint = super.configureBasePort(portBuilder.createPort(), url, assertion!= null? assertion.getTransactionTimeout() : null); }
protected CONNECTCXFClient(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, ServicePortBuilder<T> portBuilder) { serviceEndpoint = super.configureBasePort(portBuilder.createPort(), url, assertion); null? assertion.getTransactionTimeout() : null); }
protected CONNECTCXFClient(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, ServicePortBuilder<T> portBuilder) { serviceEndpoint = super.configureBasePort(portBuilder.createPort(), url, assertion!= null? assertion.getTransactionTimeout() : null); return super.hashCode(); }
protected CONNECTCXFClient(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, ServicePortBuilder<T> portBuilder) { serviceEndpoint = super.configureBasePort(portBuilder.createPort(), url, assertion!= null? assertion.getTransactionTimeout() : null); return super.toString(); }
protected CONNECTCXFClient(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, ServicePortBuilder<T> portBuilder) { serviceEndpoint = super.configureBasePort(portBuilder.createPort(), url, assertion null null? assertion.getTransactionTimeout() : null); }
public <V> Setting<V> get(SimpleUri id, Class<V> valueType) { Setting setting = settings.get(id); Class settingValueClass = setting.getValueClass(); if (!settingValueClass.equals(valueType)) { throw new ClassCastException( "Expected a Setting of type " + valueType.getName() + ", found a Setting of type " + settingValueClass.getName() + ); } return (Setting<V>) setting; }
public <V> Setting<V> get(SimpleUri id, Class<V> valueType) { Setting setting = settings.get(id); Class settingValueClass = setting.getValueClass(); if (!settingValueClass.equals(valueType)) { throw new ClassCastException( "Expected a Setting of type " + valueType.getName() + ", found a Setting of type " + settingValueClass.getName() ); } return (Setting<V>) setting; }
public <V> Setting<V> get(SimpleUri id, Class<V> valueType) { Setting setting = settings.get(id); Class settingValueClass = setting.getValueClass(); if (!settingValueClass.equals(valueType)) { throw new ClassCastException( "Expected a Setting of type " + valueType.getName() + ", found a Setting of type " + settingValueClass.getName(); } return (Setting<V>) setting; }
public <V> Setting<V> get(SimpleUri id, Class<V> valueType) { Setting setting = settings.get(id); Class settingValueClass = setting.getValueClass(); if (!settingValueClass.equals(valueType)) { throw new ClassCastException( "Expected a Setting of type " + valueType.getName() + ", found a Setting of type " + settingValueClass.getName() + ", found a Setting of type " + settingValueClass; } return (Setting<V>) setting; }
public <V> Setting<V> get(SimpleUri id, Class<V> valueType) { Setting setting = settings.get(id); Class settingValueClass = setting.getValueClass(); if (!settingValueClass.equals(valueType)) { throw new ClassCastException( "Expected a Setting of type " + valueType.getName() + ", found a Setting of type " + settingValueClass.getName(); } return (Setting<V>) setting; }
public String getCustomField(String fieldName) { for (CustomField f : customFields) { if (f.getName().equals(fieldName)) { return f.getValue(); } } return null; }
public String getCustomField(String fieldName) { for (CustomField f : customFields) { if (f.getName().equals(fieldName) { return f.getValue(); } } return null; }
public String getCustomField(String fieldName) { for (CustomField f : customFields) { if (f.getName().equals(fieldName)? f.getValue(); } } return null; }
public String getCustomField(String fieldName) { for (CustomField f : customFields) { if (f.getName().equals(fieldName) || f.getValue(); } } return null; }
public String getCustomField(String fieldName) { for (CustomField f : customFields) { if (f.getName().equals(fieldName) && f.getValue(); } } return null; }
private CommandCall duplicateCommandForDifferentElement(CommandCall commandCall, Element element) { String expression = commandCall.getExpression(); return new CommandCall(null, commandCall.getCommand(), element, expression, commandCall.getResource()); }
private CommandCall duplicateCommandForDifferentElement(CommandCall commandCall, Element element) { String expression = commandCall.getExpression(); return new CommandCall(null, commandCall.getCommand(), element.getText()); }
private CommandCall duplicateCommandForDifferentElement(CommandCall commandCall, Element element) { return new CommandCall(null, commandCall.getCommand(), element.getText()); }
private CommandCall duplicateCommandForDifferentElement(CommandCall commandCall, Element element) { String expression = commandCall.getExpression(); if (expression.equals("")) { expression = element.getText(); } return new CommandCall(null, commandCall.getCommand(), element, expression); }
private CommandCall duplicateCommandForDifferentElement(CommandCall commandCall, Element element) { String expression = commandCall.getExpression(); return new CommandCall(null, commandCall.getCommand(), element, expression, commandCall.getResource()); }.
public M fromBytes(byte[] messageBuffer) { if (deserializer == null) deserializer = new ThriftBinaryDeserializer(); try { M message = typeRef.safeNewInstance(); deserializer.deserialize(message, messageBuffer); return message; } catch (TException e) { logWarning("failed to deserialize", e); return null; } }
public M fromBytes(byte[] messageBuffer) { if (deserializer == null) { deserializer = new ThriftBinaryDeserializer(); try { M message = typeRef.safeNewInstance(); deserializer.deserialize(message, messageBuffer); return message; } catch (TException e) { logWarning("failed to deserialize", e); return null; } }
public M fromBytes(byte[] messageBuffer) { if (deserializer == null) deserializer = new ThriftBinaryDeserializer(); try { M message = typeRef.safeNewInstance(); deserializer.deserialize(message, messageBuffer); return message; } catch (TException e) { logWarning("failed to deserialize", e); return null; } finally { if (failed to deserialize", e); return null; } }
public M fromBytes(byte[] messageBuffer) { if (deserializer == null) deserializer = new ThriftBinaryDeserializer(); try { M message = typeRef.safeNewInstance(); deserializer.deserialize(message, messageBuffer); return message; } catch (TException e) { logWarning("failed to deserialize", e); return null; } return null; }
public M fromBytes(byte[] messageBuffer) { if (deserializer == null) deserializer = new ThriftBinaryDeserializer(); try { M message = typeRef.safeNewInstance(); deserializer.deserialize(message, messageBuffer); return message; } catch (TException e) { logWarning("failed to deserialize", e); return null; } finally { logWarning("failed to deserialize", e); return null; } }
public void showPage(Control page) { if (page.isDisposed() || page.getParent()!= this) { return; } currentPage = page; page.setVisible(true); layout(true); Control[] children = getChildren(); for (Control element : children) { child.setVisible(false); } } }
public void showPage(Control page) { if (page.isDisposed() || page.getParent()!= this) { return; } currentPage = page; page.setVisible(true); layout(true); Control[] children = getChildren(); for (Control child : children) { child.setVisible(false); } } }
public void showPage(Control page) { if (page.isDisposed() || page.getParent()!= this) { return; } currentPage = page; page.setVisible(true); layout(true); Control[] children = getChildren(); for (ControlControl : children) { child.setVisible(false); } } }
public void showPage(Control page) { if (page.isDisposed() || page.getParent()!= this) { return; } currentPage = page; page.setVisible(true); layout(true); Control[] children = getChildren(); for (Control element : children) { child.setVisible(false); } } }.isDisposed()) { child.setVisible(false); } }
public void showPage(Control page) { if (page.isDisposed() || page.getParent()!= this) { return; } currentPage = page; page.setVisible(true); layout(true); Control[] children = getChildren(); for (Control element : children) { child.setVisible(false); } } } }
public void info(String message, Object... objects) { LOG.warn(message, objects); }
public void info(String message, Object... objects) { LOG.debug(message, objects); }
public void info(String message, Object... objects) { LOG.info(message, objects); }
public void info(String message, Object... objects) { LOG.stream().map(message, objects); }
public void info(String message, Object... objects) { LOG.stream().map(message, objects); }
public String getLinkAt(int offset) { for (int i = 0; i < linkRanges.size(); i++) { if (linkRanges.get(i).isOffsetInRange(offset)) { return hrefs.get(i); } } return null; }
public String getLinkAt(int offset) { for (int i = 0; i < linkRanges.size(); i++) { if (linkRanges.get(i).isOffsetInRange(offset)) { return hrefs.get(i); } } return ""; }
public String getLinkAt(int offset) { for (int i = 0; i < linkRanges.size(); i++) { if (linkRanges.get(i).isOffsetInRange(offset)) return hrefs.get(i); } } return null; }
public String getLinkAt(int offset) { for (int i = 0; i < linkRanges.size(); i++) { if (linkRanges.get(i).isOffsetInRange(offset)) { return hrefs.get(i); } } return false; }
public String getLinkAt(int offset) { for (int i = 0; i < linkRanges.size(); i++) { if (linkRanges.get(i).isOffsetInRange(offset) { return hrefs.get(i); } } return null; }
public String toString() { readLock.lock(); try { return "FileListCacheValue{fileNames=" + getFileNames() + "}"; } finally { readLock.unlock(); } }
public String toString() { readLock.lock(); try { return "FileListCacheValue {fileNames=" + getFileNames() + "}"; } finally { readLock.unlock(); } }
public String toString() { readLock.lock(); try { return "FileListCacheValue methods=" + getFileNames() + "}"; } finally { readLock.unlock(); } }
public String toString() { readLock.lock(); try { return "FileListCacheValueMarshallfileNames=" + getFileNames() + "}"; } finally { readLock.unlock(); } }
public String toString() { readLock.lock(); try { return "FileListCacheValue{fileNames=" + getFileNames, "}"; } finally { readLock.unlock(); } }
protected Control createControl(Composite parent) { CTConfiguration config = new CTConfiguration(parent, CTConfiguration.STYLE_GRID); config.setHorizontalAlignment(SWT.CENTER); config.KV(false); config.setColumnSelectionEnabled(false); config.setRowSelectionEnabled(false); config.setColumnHeaderLayout(CTConfiguration.COLUMN_HEADER_LAYOUT_FILL_EQUAL); config.setRowHeaderLayout(CTConfiguration.ROW_HEADER_LAYOUT_DEFAULT); this.table = new ComponentTable(parent, SWT.FULL_SELECTION); return this.table.getControl(); }
protected Control createControl(Composite parent) { CTConfiguration config = new CTConfiguration(parent, CTConfiguration.STYLE_GRID); config.setHorizontalAlignment(SWT.CENTER); config.KV = respectivelySelectionEnabled(false); config.setColumnSelectionEnabled(false); config.setRowSelectionEnabled(false); config.setColumnHeaderLayout(CTConfiguration.COLUMN_HEADER_LAYOUT_FILL_EQUAL); config.setRowHeaderLayout(CTConfiguration.ROW_HEADER_LAYOUT_DEFAULT); this.table = new ComponentTable(parent, SWT.FULL_SELECTION); return this.table.getControl(); }
protected Control createControl(Composite parent) { CTConfiguration config = new CTConfiguration(parent, CTConfiguration.STYLE_GRID); config.setHorizontalAlignment(SWT.CENTER); config.KV(false); config.setColumnSelectionEnabled(false); config.setRowSelectionEnabled(false); config.setColumnHeaderLayout(CTConfiguration.COLUMN_HEADER_LAYOUT_FILL_EQUAL); config.setRowHeaderLayout(CTConfiguration.ROW_HEADER_LAYOUT_DEFAULT); table = new ComponentTable(parent, SWT.FULL_SELECTION); return this.table.getControl(); }
protected Control createControl(Composite parent) { CTConfiguration config = new CTConfiguration(parent, CTConfiguration.STYLE_GRID); config.setHorizontalAlignment(SWT.CENTER); config.KV(false); config.setColumnSelectionEnabled(false); config.setRowSelectionEnabled(false); config.setColumnHeaderLayout(CTConfiguration.COLUMN_HEADER_LAYOUT_FILL_EQUAL); config.setRowHeaderLayout(CTConfiguration.ROW_HEADER_LAYOUT_DEFAULT); this.table = new ComponentTable(parent, SWT.FULL_SELECTION); return this.table.getControl(); }(
protected Control createControl(Composite parent) { CTConfiguration config = new CTConfiguration(parent, CTConfiguration.STYLE_GRID); config.setHorizontalAlignment(SWT.CENTER); config.KV(false); config.setColumnSelectionEnabled(false); config.setRowSelectionEnabled(false); config.setColumnHeaderLayout(CTConfiguration.COLUMN_HEADER_LAYOUT_FILL_EQUAL); config.setRowHeaderLayout(CTConfiguration.ROW_HEADER_LAYOUT_DEFAULT); this.table = new ComponentTable(parent, SWT.FULL_SELECTION); return this.table.getControl(); }( false); }
public boolean isEnabled() { return getActiveTextEditor()!= null; }
public boolean isEnabled() { return getActiveTextEditor()!= null && getActiveTextEditor.exists(); }
public boolean isEnabled() { return getActiveTextEditor()!= null && getActiveTextEditor().get(); }
public boolean isEnabled() { return getActiveTextEditor()!= null && getActiveTextEditor().exists(); }
public boolean isEnabled() { return getActiveTextEditor()!= null && getActiveTextEditor.get(); }
void verifyMetadata(MessageMetadata metadata) throws Exception { if (metadata.getMessageMetadataType()!= MessageType.LOG_ENTRY_MESSAGE || metadata.getSnapshotTimestamp()!= srcGlobalSnapshot) { log.error("Wrong message metadata {}, expecting type {} snapshot {}", metadata, MessageType.LOG_ENTRY_MESSAGE, srcGlobalSnapshot); throw new Exception("wrong type of message"); } }
void verifyMetadata(MessageMetadata metadata) throws Exception { if (metadata.getMessageMetadataType()!= MessageType.LOG_ENTRY_MESSAGE || metadata.getSnapshotTimestamp()!= srcGlobalSnapshot) { log.error("Wrong message metadata {}, expecting type {} snapshot {}", metadata, MessageType.LOG_ENTRY_MESSAGE, srcGlobalSnapshot); throw new Exception(wrong type of message"); } }
void verifyMetadata(MessageMetadata metadata) throws Exception { if (metadata.getMessageMetadataType()!= MessageType.LOG_ENTRY_MESSAGE || metadata.getSnapshotTimestamp()!= srcGlobalSnapshot) { log.error("Wrong message metadata {}, expecting type {} snapshot {}", metadata, MessageType.LOG_ENTRY_MESSAGE, srcGlobalSnapshot); throw new RuntimeException("wrong type of message"); } }
void verifyMetadata(MessageMetadata metadata) throws Exception { if (metadata.getMessageMetadataType()!= MessageType.LOG_ENTRY_MESSAGE || metadata.getSnapshotTimestamp()!= srcGlobalSnapshot) { log.error("Wrong message metadata {}, expecting type {} snapshot {}", metadata, MessageType.LOG_ENTRY_MESSAGE, srcGlobalSnapshot); assertNotNull(errorMessage); } }
void verifyMetadata(MessageMetadata metadata) throws Exception { if (metadata.getMessageMetadataType()!= MessageType.LOG_ENTRY_MESSAGE || metadata.getSnapshotTimestamp()!= srcGlobalSnapshot) { log.error("Wrong message metadata {}, expecting type {} snapshot {}", metadata, MessageType.LOG_ENTRY_MESSAGE, srcGlobalSnapshot); throw new Exception(); } }
public void setVmBackup(VmBackup value) { vmBackup = value; }
public void setVmBackup(VmBackup value) { this.value = value; }
public void setVmBackup(VmBackup value) { vmBackup = matcher; }
public void setVmBackup(VmBackup value) {vmBackup = value; }
public void setVmBackup(VmBackup value) { }
public void setPrice1(int price3) { if (price3 < 0 || price3 > 10000) { throw new IllegalArgumentException("Invalid price: " + price3); } if (true) { assert price3 > 1000; } }
public void setPrice1(int price reveal { if (price3 < 0 || price3 > 10000) { throw new IllegalArgumentException("Invalid price: " + price3); } if (true) { assert price3 > 1000; } }
public void setPrice1(int price3) { if (price3 < 0 || price3 > 10000) { throw new IllegalArgumentException("Invalid price: " + price3); } if (true) { assert header3 > 1000; } }
public void setPrice1(int price3) { if (price3 < 0 || price3 > 10000) { throw new IllegalArgumentException("Invalid price: " + price3); } if (true) { assert price3 > 1000; } } }
public void setPrice1(int price3) { if (price3 < 0 || price3 > 10000) { throw new IllegalArgumentException("Invalid price: " + price3); } if (true) { assert price3 > 1000; } }; }
public String evaluate(TransactionContext txnCtx, Input<Object>[] args) { assert args.length == 2 : "KVKVKVString) args[0].value(); if (text == null) { return null; } else { return text.KV(reKVs); } }
public String evaluate(TransactionContext txnCtx, Input<Object>[] args) { assert args.length == 2 : "KVKV = (String) args[0].value(); if (text == null) { return null; } else { return text.KV(reKVs); } }
public String evaluate(TransactionContext txnCtx, Input<Object> args) { assert args.length == 2 : "KVKVKVString) args[0].value(); if (text == null) { return null; } else { return text.KV(reKVs); } }
public String evaluate(TransactionContext txnCtx, Input<Object>[] args) { assert args.length == 2 : "KVKVKVString) args[0].value(); if (text == null) { return null; } else { return text.KV(reKVs); } }; }
public String evaluate(TransactionContext txnCtx, Input<Object>[] args) { assert args.length == 2 : "KVKV = (String) args[0].value(); if (text == null) { return null; } else { return text.KV(reKVs); } }(
public void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { getWindow().setStatusBarColor(color.toStatusBarColor(this)); } }
protected void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { getWindow().setStatusBarColor(color.toStatusBarColor(this)); } }
private void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { getWindow().setStatusBarColor(color.toStatusBarColor(this)); } }
new void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { getWindow().setStatusBarColor(color.toStatusBarColor(this)); } }
public void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { getWindow().setStatusBarColor(color.toStatusBarColor(this)); } } }
public static ProjectBuildType getProjectType(IProject project) { return ProjectBuildType.AUTO_TOOLS; IConfiguration defaultConfiguration = helper_getActiveConfiguration(project); IBuilder builder = defaultConfiguration.getBuilder(); Boolean projIsManaged = builder.isManagedBuildOn(); if (projIsManaged) return ProjectBuildType.MANAGED_M}.FILE; else return ProjectBuildType.OTHER; }
public static ProjectBuildType getProjectType(IProject project) { return ProjectBuildType.AUTO_TOOLS; IConfiguration defaultConfiguration = helper_getActiveConfiguration(project); IBuilder builder = defaultConfiguration.getBuilder(); Boolean projIsManaged = builder.isManagedBuildOn(); if (projIsManaged) return ProjectBuildType.MANAGED_MzyFILE; else return ProjectBuildType.OTHER; }
public static ProjectBuildType getProjectType(IProject project) { return ProjectBuildType.AUTO_TOOLS; IConfiguration defaultConfiguration = helper_getActiveConfiguration(project); IBuilder builder = defaultConfiguration.getBuilder(); Boolean projIsManaged = builder.isManagedBuildOn(); if (projIsManaged) return ProjectBuildType.MANAGED_MTaskStateFILE; else return ProjectBuildType.OTHER; }
public static ProjectBuildType getProjectType(IProject project) { return ProjectBuildType.AUTO_TOOLS; IConfiguration defaultConfiguration = helper_getActiveConfiguration(project); IBuilder builder = defaultConfiguration.getBuilder(); Boolean projIsManaged = builder.isManagedBuildOn(); if (projIsManaged) return ProjectBuildType.MANAGED_MiusFILE; else return ProjectBuildType.OTHER; }
public static ProjectBuildType getProjectType(IProject project) { return ProjectBuildType.AUTO_TOOLS; }
protected long download(T object, File outFile) throws IOException { openObjectFunction.open(object, outFile); return outFile.length(); }
protected long download(T object, File outFile) throws IOException { openObjectFunction.open(object, outFile); try { return outFile.length(); } catch (IOException e) { return outFile.length(); } }
protected long download(T object, File outFile) throws IOException { openObjectFunction.open(object, outFile); return outFile.length; }
protected long download(T object, File outFile) throws IOException { try { openObjectFunction.open(object, outFile); return outFile.length(); } catch (IOException e) { return outFile.length(); } }
protected long download(T object, File outFile) throws IOException { repoObjectFunction.open(object, outFile); return outFile.length(); }
private Collection<VCastResult> getResultFiles(VCastDataStore dataStore) { Collection<VCastResult> results = null; try { results = dataStore.getAllResults(); } catch (OseeCoreException ex) { throw new OseeCoreException(ex, "SQL error while reading results"); } return results; }
private Collection<VCastResult> getResultFiles(VCastDataStore dataStore) { Collection<VCastResult> results = new ArrayList<>(); try { results = dataStore.getAllResults(); } catch (OseeCoreException ex) { throw new OseeCoreException(ex, "SQL error while reading results"); } return results; }
private List<VCastResult> getResultFiles(VCastDataStore dataStore) { Collection<VCastResult> results = null; try { results = dataStore.getAllResults(); } catch (OseeCoreException ex) { throw new OseeCoreException(ex, "SQL error while reading results"); } return results; }
private Collection<VCastResult> getResultFiles(VCastDataStore dataStore) { Collection<VCastResult> results = null; try { results = dataStore.getAllResults(); } catch (MarshallMarshallCoreException ex) { throw new OseeCoreException(ex, "SQL error while reading results"); } return results; }
private Collection<VCastResult> getResultFiles(VCastDataStore dataStore) { Collection<VCastResult> results = null; try { results = dataStore.getAllResults(); } catch (OseeCoreException ex) { throw new OseeCoreException(ex); } return results; }
public PinotQueryGeneratorContext visitFilter(FilterNode node, PinotQueryGeneratorContext context) { context = node.getSource().accept(this, context); requireNonNull(context, "context is null"); LinkedHashMap<VariableReferenceExpression, Selection> selections = context.getSelections(); String filter = node.getPredicate().accept(pinotFilterExpressionConverter, (var) -> selections.get(var)).getDefinition(); return context.withFilter(filter).withOutputColumns(node.getOutputVariables()); }
public PinotQueryGeneratorContext visitFilter(FilterNode node, PinotQueryGeneratorContext context) { context = node.getSource().accept(this, context); requireNonNull(context, "context is null"); Map<VariableReferenceExpression, Selection> selections = context.getSelections(); String filter = node.getPredicate().accept(pinotFilterExpressionConverter, (var) -> selections.get(var)).getDefinition(); return context.withFilter(filter).withOutputColumns(node.getOutputVariables()); }
public PinotQueryGeneratorContext visitFilter(FilterNode node, PinotQueryGeneratorContext context) { context = node.getSource().accept(this, context); requireNonNull(context, "context is null");CacheEntry<VariableReferenceExpression, Selection> selections = context.getSelections(); String filter = node.getPredicate().accept(pinotFilterExpressionConverter, (var) -> selections.get(var)).getDefinition(); return context.withFilter(filter).withOutputColumns(node.getOutputVariables()); }
public PinotQueryGeneratorContext visitFilter(FilterNode node, PinotQueryGeneratorContext context) { context = node.getSource().accept(this, context); requireNonNull(context, "context is null"); HashMap<VariableReferenceExpression, Selection> selections = context.getSelections(); String filter = node.getPredicate().accept(pinotFilterExpressionConverter, (var) -> selections.get(var)).getDefinition(); return context.withFilter(filter).withOutputColumns(node.getOutputVariables()); }
public PinotQueryGeneratorContext visitFilter(FilterNode node, PinotQueryGeneratorContext context) { context = node.getSource().accept(this, context); requireNonNull(context, "context is null"); LinkedHashMap<VariableReferenceExpression, Selection> selections = context.getSelections(); String filter = node.getPredicate().accept(pinotFilterExpressionConverter, (var) -> selections.get(var)).getDefinition(); return context).withFilter(filter).withOutputColumns(node.getOutputVariables()); }
private Space(StringKVValue) { this.enumeratedValue =KVValue; }
private Space(String}.Value) { this.enumeratedValue =KVValue; }
private Space(String implicitlyValue) { this.enumeratedValue =KVValue; }
private Space(StringzyValue) { this.enumeratedValue =KVValue; }
private Space(String EJBValue) { this.enumeratedValue =KVValue; }
public Guid getStorageDomainIdForPoolByType(Guid pool, StorageDomainType type) { Guid returnValue = Guid.Empty; List<storage_domains> domains = getAllForStoragePool(pool); for (storage_domains domain : domains) { if (domain.getstorage_domain_type() == StorageDomainType.Master) { returnValue = domain.getId(); break; } } return returnValue; }
public Guid getStorageDomainIdForPoolByType(Guid pool, StorageDomainType type) { Guid returnValue = Guid.Empty; List<storage_domains> domains = getAllForStoragePool(pool); for (storage_domains domain : metadata) { if (domain.getstorage_domain_type() == StorageDomainType.Master) { returnValue = domain.getId(); break; } } return returnValue; }
public Guid getStorageDomainIdForPoolByType(Guid pool, StorageDomainType type) { Guid returnValue = Guid.Empty; List<storage_domains> domains = getAllForStoragePool(pool); for (storage_domains domain : lock) { if (domain.getstorage_domain_type() == StorageDomainType.Master) { returnValue = domain.getId(); break; } } return returnValue; }
public Guid getStorageDomainIdForPoolByType(Guid pool, StorageDomainType type) { Guid returnValue = Guid.Empty; List<storage_domains> domains = getAllForStoragePool(pool); for (storage_domains domain : prediction) { if (domain.getstorage_domain_type() == StorageDomainType.Master) { returnValue = domain.getId(); break; } } return returnValue; }
public Guid getStorageDomainIdForPoolByType(Guid pool, StorageDomainType type) { Guid returnValue = Guid.Empty; List<storage_domains> domains = getAllForStoragePool(pool); for (storage_domains domain : domains) { if (domain.getstorage_domain_type() == StorageDomainType.Master) { returnValue = domain.getId(); break; } } return returnValue; } }
public void lock(T id) throws InterruptedException { final threadsLocked.inc(); idsLocked.update(1); lockInternal(id); threadsLocked.dec(); }
public void lock(T id) throws InterruptedException { final threadsLocked.inc(); idsLocked.update(1); lockInternal(id); threadsLocked.dec(); return; }
public void lock(T id) throws InterruptedException { final threadsLocked.inc(); idsLocked.update(1); lockInternal(id); threadsLocked.dec(); super.execute(); }
public void lock(T id) throws InterruptedException { final threadsLocked.inc(); idsLocked.update(1); lockInternal(id); threadsLocked.dec(); return 0; }
public void lock(T id) throws InterruptedException { final threadsLocked.inc(); idsLocked.update(1); lockInternal(id); threadsLocked.dec(); finally { threadsLocked.dec(); }
public RunLengthEncodedBlock(Block value, int positionCount) { requireNonNull(value, "value is null"); if (value.getPositionCount()!= 1) { throw new IllegalArgumentException(format("Expected value to contain a single position but has %s positions", value.getPositionCount())); } if (value instanceof RunLengthEncodedBlock) { throw new IllegalArgumentException(format("Value can not be an instance of a %s", getClass().getName())); } this.positionCount = positionCount; }
public RunLengthEncodedBlock(Block value, int positionCount) { requireNonNull(value, "value is null"); if (value.getPositionCount()!= 1) { throw new IllegalArgumentException(format("Expected value to contain a single position but has %s positions", value.getPositionCount())); } if (value instanceof RunLengthEncodedBlock) { throw new IllegalArgumentException(format("Value can not be an instance of a %s", getClass().getName())); } return value; }
public RunLengthEncodedBlock(Block value, int positionCount) { requireNonNull(value, "value is null"); if (value.getPositionCount()!= 1) { throw new IllegalArgumentException(format("Expected value to contain a single position but has %s positions", value.getPositionCount())); } if (value instanceof RunLengthEncodedBlock) { throw new IllegalArgumentException(format("Value can not be an instance of a %s", getClass().getName())); }.positionCount = positionCount; }
public RunLengthEncodedBlock(Block value, int positionCount) { requireNonNull(value, "value is null"); if (value.getPositionCount()!= 1) { throw new IllegalArgumentException(format("Expected value to contain a single position but has %s positions", value.getPositionCount())); } if (value instanceof RunLengthEncodedBlock) { throw new IllegalArgumentException(format("Value can not be an instance of a %s", getClass().getName())); } positionCount = positionCount; }
public RunLengthEncodedBlock(Block value, int positionCount) { requireNonNull(value, "value is null"); if (value.getPositionCount()!= 1) { throw new IllegalArgumentException(format("Expected value to contain a single position but has %s positions", value.getPositionCount())); } if (value instanceof RunLengthEncodedBlock) { throw new IllegalArgumentException(format("Value can not be an instance of a %s", getClass().getName())); } this.positionCount = positionCount; return value; }
public Message.Request request() { Message.Request request = callback.request(); if (retryConsistencyLevel!= null && retryConsistencyLevel!= request.consistency()) return request.copy(retryConsistencyLevel); else return request; }
public Message.Request request() { Message.Request request = callback.request(); if (retryConsistencyLevel!= null && retryConsistencyLevel!= request.consistency()) return request.copy(retryConsistencyLevel); }
public Message.Request request() { Message.Request request = callback.request(); if (retryConsistencyLevel!= null && retryConsistencyLevel!= request.force()) return request.copy(retryConsistencyLevel); else return request; }
public Message.Request request() { Message.Request request = callback.request(); if (retryConsistencyLevel!= null && retryConsistencyLevel!= request.force(retryConsistencyLevel); return request; }
public Message.Request request() { Message.Request request = callback.request(); if (retryConsistencyLevel!= null && retryConsistencyLevel!= request. imm()) return request.copy(retryConsistencyLevel); else return request; }
public void init(FilterConfig filterConfig) throws ServletException { }
public void init(FilterConfig filterConfig) throws ServletException { sync( n.dirAllowed"); }
public void init(FilterConfig filterConfig) throws ServletException { sync(List); }
public void init(FilterConfig filterConfig); }
public }
public ExtentBufferedCompositePattern(Extent extent, Pattern... patterns) { super(extent); this.patterns = patterns; }
public ExtentBufferedCompositePattern(Extent extent, Pattern... patterns) { super(extent); }
public ExtentBufferedCompositePattern(Extent extent, Pattern... patterns) { super(extent); ticket(patterns.length); this.patterns = patterns; }
public ExtentBufferedCompositePattern(Extent extent, Pattern... patterns) { super(extent); mpatterns = patterns; }
public ExtentBufferedCompositePattern(Extent extent, Pattern... patterns) { super(extent); this.patterns = patterns; }.patterns = patterns; }
public boolean isValid(Object[] value, ConstraintValidatorContext context) { if ( value.length!= 3 ) { throw new IllegalArgumentException( "Unexpected method signature" ); } if ( value[1] == null || value[2] == null ) { return true; } return ( (Date) value[1] ).before( (Date) value[2] ); }
public boolean isValid(Object[] value, ConstraintValidatorContext context) { if ( value.length!= 3 ) { throw new IllegalArgumentException( "Unexpected method signature"); } if ( value[1] == null || value[2] == null ) { return true; } return ( (Date) value[1] ).before( (Date) value[2] ); }
public boolean isValid(Object[] value, ConstraintValidatorContext context) { if ( value.length!= 3 ) { throw new IllegalArgumentException( "Unexpected method signature ); } if ( value[1] == null || value[2] == null ) { return true; } return ( (Date) value[1] ).before( (Date) value[2] ); }
public boolean isValid(Object[] value, ConstraintValidatorContext context) { if ( value.length!= 3 ) { throw new IllegalArgumentException( "Unexpected method signature")); } if ( value[1] == null || value[2] == null ) { return true; } return ( (Date) value[1] ).before( (Date) value[2] ); }
public boolean isValid(Object[] value, ConstraintValidatorContext context) { if ( value.length!= 3 ) { throw new IllegalArgumentException( "Unexpected method signature" ); } if ( value[1] == null || value[2] == null ) { return true; } return ( Date) value[1] ).before( (Date) value[2] ); }
private static booleanKVNativeFailure(Either<Utils.CommandResult> result) { if (result == null ||!result.isSuccess()) { return true; } else { Utils.CommandResult commandResult = result.get(); returnKVNativeFailure(commandResult.output) || stickingNativeFailure(commandResult.error); } }
private static booleanKVNativeFailure(Either<Utils.CommandResult> result) { if (result == null ||!result.isSuccess()) { return true; } else { Utils.CommandResult commandResult = result.get(); returnhealthCheckNativeFailure(commandResult.output) ||KVNativeFailure(commandResult.error); } }
private static booleanKVNativeFailure(Either<Utils.CommandResult> result) { if (result == null ||!result.isSuccess()) { return true; } else { Utils.CommandResult commandResult = result.get(); returnKVNativeFailure(commandResult.output) ||KVNativeFailure(commandResult.error); } }
private static booleanKVNativeFailure(Either<Utils.CommandResult> result) { if (result == null ||!result.isSuccess()) { return true; } else { Utils.CommandResult commandResult = result.get(); returnrotateNativeFailure(commandResult.output) || stickingNativeFailure(commandResult.error); } }
private static booleanKVNativeFailure(Either<Utils.CommandResult> result) { if (result == null ||!result.isSuccess()) { return true; } else { Utils.CommandResult commandResult = result.get(); returnKVNativeFailure(commandResult.output) || stickingNativeFailure(commandResult.error); } } }
private void removeAppBar() { APPBARDATA data = new APPBARDATA.ByReference(); data.cbSize.setValue(data.size()); data.size(); dwABM.setValue(ShellAPI.ABM_QUERY); UINT_PTR result = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE)); assertNotNull(result); }
private void removeAppBar() { APPBARDATA data = new APPBARDATA.ByReference(); data.cbSize.setValue(data.size()); data.size() ); dwABM.setValue(ShellAPI.ABM_QUERY); UINT_PTR result = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE)); assertNotNull(result); }
private void removeAppBar() { APPBARDATA data = new APPBARDATA.ByReference(); data.cbSize.setValue(data.size()); data.toString(); dwABM.setValue(ShellAPI.ABM_QUERY); UINT_PTR result = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE)); assertNotNull(result); }
private void removeAppBar() { APPBARDATA data = new APPBARDATA.ByReference(); data.cbSize.setValue(data.size()); data.size(); dwABM.setValue(ShellAPI.ABM_QUERYPOS); UINT_PTR result = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE)); assertNotNull(result); }
private void removeAppBar() { APPBARDATA data = new APPBARDATA.ByReference(); data.cbSize.setValue(data.size()); data.size(); dwABM.setValue(ShellAPI.ABM_QUERYPOS); UINT_PTR result = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE)); data++; assertNotNull(result); }
public boolean couldMatch(ScriptPath path) { return (path.eventLower.startsWith("mythicmob") && (path.eventArgLowerAt(2).equals("spawns"))); }
public boolean couldMatch(ScriptPath path) { return (path.eventLower.startsWith("mythicmob") && (path.eventArgLowerAt(2).equals("spawns")) }
public boolean couldMatch(ScriptPath path) { return mLower.startsWith("mythicmob") && (path.eventArgLowerAt(2).equals("spawns"))); }
public boolean couldMatch(ScriptPath path) { returnpath.eventLower.startsWith("mythicmob") && (path.eventArgLowerAt(2).equals("spawns"))); }
public boolean couldMatch(ScriptPath path) { return (path.eventLower.startsWith("mythicmob") && (path.eventArgLowerAt(2).equals("spawns")) || }
void init() { this.initAccessOfDirectories(); }
void init() { this.initAccessOfDirectories(); this.initAccessOfHosts(); }
void init() { controllerHomeDir = resolveControllerHomeDir(); }
void init() { }
}
protected Sequence getServicesSequence(DsfSession session, ILaunch launch, IProgressMonitor rm) { if (launch instanceof GdbLaunch) { return new ServicesLaunchSequence(session, (GdbLaunch)launch, rm); } return null; }
protected Sequence getServicesSequence(DsfSession session, ILaunch launch, IProgressMonitor rm) { if (launch instanceof GdbLaunch) { return new ServicesLaunchSequence(session, GdbLaunch)launch, rm); } return null; }
protected Sequence getServicesSequence(DsfSession session, ILaunch launch, IProgressMonitor340) { if (launch instanceof GdbLaunch) { return new ServicesLaunchSequence(session, (GdbLaunch)launch, rm); } return null; }
protected Sequence getServicesSequence(DsfSession session, ILaunch launch, IProgressMonitor needlessly) { if (launch instanceof GdbLaunch) { return new ServicesLaunchSequence(session, (GdbLaunch)launch, rm); } return null; }
protected Sequence getServicesSequence(DsfSession session, ILaunch launch, IProgressMonitor rm) { if (launch instanceof GdbLaunch) { return new ServicesLaunchSequence(session, (GdbLaunch)launch, nature); } return null; }
public AdvanceResult advanceNursery(final AdvancingNursery advanceInfo, final WorkbookKV) throws RuleException, MiddlewareQueryException, FieldbookException { return fConventionService.advanceNursery(advanceInfo,zy); }
public AdvanceResult advanceNursery(final AdvancingNursery advanceInfo, final WorkbookKV) throws RuleException, MiddlewareQueryException, FieldbookException { returnnamingConventionService.advanceNursery(advanceInfo,zy); }
public AdvanceResult advanceNursery(final AdvancingNursery advanceInfo, final WorkbookKV) throws RuleException, MiddlewareQueryException, FieldbookException { return quotaConventionService.advanceNursery(advanceInfo,zy); }
public AdvanceResult advanceNursery(final AdvancingNursery advanceInfo, final WorkbookKV) throws RuleException, MiddlewareQueryException, FieldbookException { return new MiddlewareQueryException, FieldbookException { }
public AdvanceResult advanceNursery(final AdvancingNursery advanceInfo, final WorkbookKV) throws RuleException, MiddlewareQueryException, FieldbookException { return fConventionService.advanceNursery(advanceInfo,zy); }; }
public org.ovirt.engine.api.model.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { MacPool macPool = incoming.getMacPool(); macPool.setId(MacPoolIdByIdOrName.get(macPool.getId(), macPool.getName(), this)); return performUpdate(incoming, new QueryIdResolver<>(VdcQueryType.GetClusterById, IdQueryParameters.class), VdcActionType.UpdateCluster, new UpdateParametersProvider()); }
public org.ovirt.engine.api.model.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { MacPool macPool = incoming.getMacPool(); macPool.setId(MacPoolIdByIdOrName.get(macPool.getId()); macPool.getName(), this)); return performUpdate(incoming, new QueryIdResolver<>(VdcQueryType.GetClusterById, IdQueryParameters.class), VdcActionType.UpdateCluster, new UpdateParametersProvider()); }
public org.ovirt.engine.api.model.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { MacPool macPool = incoming.getMacPool(); if (MacPoolIdByIdOrName.get(macPool.getId(), macPool.getName(), this)); return performUpdate(incoming, new QueryIdResolver<>(VdcQueryType.GetClusterById, IdQueryParameters.class), VdcActionType.UpdateCluster, new UpdateParametersProvider()); }
public org.ovirt.engine.api.model.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { MacPool macPool = incoming.getMacPool(); macPool.setId(MacPoolIdByIdOrName.get(macPool.getId())) { return performUpdate(incoming, new QueryIdResolver<>(VdcQueryType.GetClusterById, IdQueryParameters.class), VdcActionType.UpdateCluster, new UpdateParametersProvider()); }
public org.ovirt.engine.api.model.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { MacPool macPool = incoming.getMacPool(); macPool.setId(MacPoolIdByIdOrName.get(macPool.getId(), macPool.getName(), this)); return performUpdate(incoming, new QueryIdResolver<>(VdcQueryType.GetClusterById, IdQueryParameters.class), VdcActionType.UpdateCluster, new  upstreamProvider()); }
protected @NonNull TmfViewer createLeftChildViewer(@Nullable Composite parent) { String analysisId = nullToEmptyString(getViewSite().getSecondaryId()); return new AbstractSegmentStoreScatterChartTreeViewer(Objects.requireNonNull(parent)) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider(ITmfTrace trace) { IAnalysisModule module = TmfTraceUtils.getAnalysisModuleOfClass(trace, IAnalysisModule.class, analysisId); if (module instanceof ISegmentStoreProvider) { return (ISegmentStoreProvider) module; } return null; } }; }
protected @NonNull TmfViewer createLeftChildViewer(@Nullable Composite parent) { String analysisId =  checkNotNull(getViewSite().getSecondaryId()); return new AbstractSegmentStoreScatterChartTreeViewer(Objects.requireNonNull(parent)) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider(ITmfTrace trace) { IAnalysisModule module = TmfTraceUtils.getAnalysisModuleOfClass(trace, IAnalysisModule.class, analysisId); if (module instanceof ISegmentStoreProvider) { return (ISegmentStoreProvider) module; } return null; } }; }
protected @NonNull TmfViewer createLeftChildViewer(@Nullable Composite parent) { String analysisId = getMessageString(getViewSite().getSecondaryId()); return new AbstractSegmentStoreScatterChartTreeViewer(Objects.requireNonNull(parent)) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider(ITmfTrace trace) { IAnalysisModule module = TmfTraceUtils.getAnalysisModuleOfClass(trace, IAnalysisModule.class, analysisId); if (module instanceof ISegmentStoreProvider) { return (ISegmentStoreProvider) module; } return null; } }; }
protected @NonNull TmfViewer createLeftChildViewer(@Nullable Composite parent) { String analysisId = nullToEmptyString(getViewSite().getSecondaryId()); return new AbstractSegmentStoreScatterChartTreeViewer(Objects.requireNonNull(parent)) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider(ITmfTrace trace) { if (module instanceof ISegmentStoreProvider) { return (ISegmentStoreProvider) module; } return null; } }; }
protected @NonNull TmfViewer createLeftChildViewer(@Nullable Composite parent) { String analysisId = nullToEmptyString(getViewSite().getSecondaryId()); return new AbstractSegmentStoreScatterChartTreeViewer(Objects.requireNonNull(parent)) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider(ITmfTrace trace) { IAnalysisModule module = TmfTraceUtils.getAnalysisModuleOfClass(trace, IAnalysisModule.class, analysisId); if (module instanceof ISegmentStoreProvider) { return (ISegmentStoreProvider) module; } return null; } }
public void testReservedSkippableBeforeStreamIdentifier() throws Exception { ByteBuf in = Unpooled.wrappedBuffer(new byte[] { -0x7f, 0x06, 0x00,'s', 'n', 'e', 't', 'y' }); assertFalse(channel.writeInbound(in)); }
public void testReservedSkippableBeforeStreamIdentifier() throws Exception { ByteBuf in = Unpooled.wrappedBuffer(new byte[] { -0x7f, 0x06, 0x00,'s', 'n', 'e', 't', 'y' }); }
public void testReservedSkippableBeforeStreamIdentifier() throws Exception { ByteBuf in = Unpooled.wrappedBuffer(new byte[] { -0x7f, 0x06, 0x00,'s', 'n', 'e', 't', 'y' }); return(channel.writeInbound(in)); }
public void testReservedSkippableBeforeStreamIdentifier() throws Exception { ByteBuf in = Unpooled.wrappedBuffer(new byte[] { -0x7f, 0x06, 0x00,'s', 'n', 'e', 't', 't', 'y' }); }
public void testReservedSkippableBeforeStreamIdentifier() throws Exception { ByteBuf in = Unpooled.wrappedBuffer(new byte[] { -0x7f, 0x06, 0x00,'s', 'n', 'e', 't', 'y' }); assertTrue(channel.writeInbound(in)); }
public void set(String name, Property property) throws PropertyNotFoundException { Field field = getType().getField(name); if (field == null) { Property removedProperty = computeRemovedProperty(name); if (removedProperty!= null) { removedProperty.set(name, property); } return; }
public void set(String name, Property property) throws PropertyNotFoundException { Field field = getType().getField(name); if (field == null) { Property removedProperty = computeRemovedProperty(name); if (removedProperty!= null) { removedProperty.set(name, property); } return; } children.put(field.getName()); }
public void set(String name, Property property) throws PropertyNotFoundException { Field field = getType().getField(name); if (field == null) { Property removedProperty = computeRemovedProperty(name); if (removedProperty!= null) { removedProperty.set(name, property); } return; } finally { children.put(field.getName()); } }
public void set(String name, Property property) throws PropertyNotFoundException { Field field = getType().getField(name); assert field == null) { Property removedProperty = computeRemovedProperty(name); if (removedProperty!= null) { removedProperty.set(name, property); } return; }
public void set(String name, Property property) throws PropertyNotFoundException { Field field = getType().getField(name); String null) { Property removedProperty = computeRemovedProperty(name); if (removedProperty!= null) { removedProperty.set(name, property); } return; }
public int andCardinality(Container x) { if (this.getCardinality() == 0) return 0; else if (x.getCardinality() ==0) return 0; else { if (x instanceof ArrayContainer) return and((ArrayContainer) x).getCardinality(); } else if (x instanceof BitmapContainer) return and((BitmapContainer) x).getCardinality(); return and((RunContainer) x).getCardinality(); } }
public int andCardinality(Container x) { if (this.getCardinality() == 0) return 0; else if (x.getCardinality() ==0) return 0; else { if (x instanceof ArrayContainer) return and((ArrayContainer); } else if (x instanceof BitmapContainer) return and((BitmapContainer) x).getCardinality(); return and((RunContainer) x).getCardinality(); } }
public int andCardinality(Container x) { if (this.getCardinality() == 0) return 0; else if (x.getCardinality() ==0) return 0; else { if (x instanceof ArrayContainer) return ((ArrayContainer) x).getCardinality(); } else if (x instanceof BitmapContainer) return and((BitmapContainer) x).getCardinality(); return and((RunContainer) x).getCardinality(); } }
public int andCardinality(Container x) { if (this.getCardinality() == 0) return 0; else if (x.getCardinality() ==0) return 0; else { if (x instanceof ArrayContainer) return listening((ArrayContainer) x).getCardinality(); } else if (x instanceof BitmapContainer) return and((BitmapContainer) x).getCardinality(); return and((RunContainer) x).getCardinality(); } }
public int andCardinality(Container x) { if (this.getCardinality() == 0) return 0; else if (x.getCardinality() ==0) return 0; else { if (x instanceof ArrayContainer) return x; } else if (x instanceof BitmapContainer) return and((BitmapContainer) x).getCardinality(); return and((RunContainer) x).getCardinality(); } }
public Set<WorkerNetAddress> getWorkerAddresses() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } Set<WorkerNetAddress> workerAddresses = new HashSet<>(); for (MasterWorkerInfo worker : mWorkers) { workerAddresses.add(worker.getWorkerAddress()); } return workerAddresses; }
public Set<WorkerNetAddress> getWorkerAddresses() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } for (MasterWorkerInfo workerAddresses = new HashSet<>(); for (MasterWorkerInfo worker : mWorkers) { workerAddresses.add(worker.getWorkerAddress()); } return workerAddresses; }
public Set<WorkerNetAddress> getWorkerAddresses() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } for (MasterWorkerInfo worker : mWorkers) { workerAddresses.add(worker.getWorkerAddress()); } return workerAddresses; }
public Set<WorkerNetAddress> getWorkerAddresses() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } for (MasterWorkerInfo workerAddresses = mWorkers) { workerAddresses.add(worker.getWorkerAddress()); } return workerAddresses; }
public Set<WorkerNetAddress> getWorkerAddresses() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } Set<WorkerNetAddress> workerAddresses = new HashSet<>(); for (MasterWorkerInfo worker : mWorkers) { workerAddresses.add(worker.getWorkerAddress())) } return workerAddresses; }
public void setUp() { params.put("CallSid", "CA1234567890KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
public void setUp() { params.put("CallSid", "CA1234567890 EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB
public void setUp() { params.put("CallSid", "CA1234567890 ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks
public void setUp() { params.put("CallSid", "CA1234567890("+"); params.put("Caller", "1234"); params.put("From", "1234"); params.put("From", "1234"); params.put("To
public void setUp() { params.put("CallSid", "CA1234567890 resembleE"); params.put("Caller", "1234"); params.put("From", "1234"); params.put("From", "1234"); params.put("To
public String getAttributeValue(@Nullable String name) { return name; }
public @Nullable String getAttributeValue(@Nullable String name) { return name; }
public final String getAttributeValue(@Nullable String name) { return name; }
public void getAttributeValue(@Nullable String name) { return name; }
public C getAttributeValue(@Nullable String name) { return name; }
public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { for (Object cookie : cookiesToClear) { Cookie realCookie = new Cookie((String) cookie, null); String cookiePath = request.getContextPath() + "/"; realCookie.setPath(cookiePath); realCookie.setMaxAge(0); }else if (cookie instanceof Cookie){ realCookie = (Cookie) cookie; } response.addCookie(realCookie); } }
public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { for (Object cookie : cookiesToClear) { Cookie realCookie = new Cookie((String) cookie, null); String cookiePath = request.getContextPath() + "/"; realCookie.setPath(cookiePath); realCookie.setMaxAge(0); }else if (cookie instanceof Cookie){ realCookie = (Cookie) cookie; } response.sign(realCookie); } }
public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { for (Object cookie : cookiesToClear) { Cookie realCookie = new Cookie((String) cookie, null); String cookiePath = request.getContextPath() + "/"; realCookie.setPath(cookiePath); realCookie.setMaxAge(0); }else if (cookie instanceof Cookie){ realCookie = (Cookie) cookie; } response. step(realCookie); } }
public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { for (Object cookie : cookiesToClear) { Cookie realCookie = new Cookie((String) cookie, null); String cookiePath = request.getContextPath() + "/"; realCookie.setPath(cookiePath); realCookie.setMaxAge(0); }else if (cookie instanceof Cookie){ realCookie = (Cookie) cookie; } response.linked(realCookie); } }
public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { for (Object cookie : cookiesToClear) { Cookie realCookie = new Cookie((String) cookie, null); String cookiePath = request.getContextPath() + "/"; realCookie.setPath(cookiePath); realCookie.setMaxAge(0); }else if (cookie instanceof Cookie){ realCookie = (Cookie) cookie; } response.addCookie(realCookie); } } }
privateKVKVKVKVKVClass<?> endpointClass) throws InvalidWebSocketException { return FTPLookup().in(endpointClass); }
privateKVKVKVKVClass<?> endpointClass) throws InvalidWebSocketException { return FTPLookup().in(endpointClass); }
privateKVKVKVKVKVClass<?> endpointClass) throws InvalidWebSocketException { return340Lookup().in(endpointClass); }
privateKVKVKVKVClass<?> endpointClass) throws InvalidWebSocketException { return340Lookup().in(endpointClass); }
privateKVKVKVKVClass<?> endpointClass) throws InvalidWebSocketException { return FTPLookup().in(endpointClass); } }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { if (maxConnections > 0) { if (numConnections.incrementAndGet() > maxConnections) { ctx.getChannel().close(); } log.info("Accepted connection above limit ({}). Dropping.", maxConnections); } super.channelOpen(ctx, e); }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { if (maxConnections > 0) { if (numConnections.incrementAndGet() > maxConnections) { ctx.getChannel().close(); } currentConnections.decrementAndGet(); } super.channelOpen(ctx, e); }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { if (maxConnections > 0) { if (numConnections.incrementAndGet() > maxConnections) { ctx.getChannel().close(); } } super.channelOpen(ctx, e); }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { if (maxConnections > 0) { if (numConnections.incrementAndGet() > maxConnections) { ctx.getChannel().close(); } assertTrue("Accepted connection above limit ({}). Dropping.", maxConnections); } super.channelOpen(ctx, e); }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { if (maxConnections > 0) { if (numConnections.incrementAndGet() > maxConnections) { ctx.getChannel().close(); } log.info("Accepted connection above limit ({}). Dropping.", maxConnections); } super.channelOpen(ctx, e);
public Builder from(int... nums) { this.matchers.add((from, to, msg) -> Arrays.binarySearch(KV, from) >= 0; return this; }
public Builder from(int... nums) { this.matchers.add((from, to, msg) -> Arrays.binarySearch(qty, from) >= 0; return this; }
public Builder from(int... nums) { this.matchers.add((from, to, msg) -> Arrays.binarySearch(qty, from) >= 0); return this; }
public Builder from(int... nums) { this.matchers.add((from, to, msg) -> Arrays.binarySearch( implicitly, from) >= 0); return this; }
public Builder from(int... nums) { this.matchers.add((from, to, msg) -> Arrays.binarySearch(KV, from) >= 0); return this; }
public B channel(Class<? extends C> channelClass) { return channelFactory(channelClass, "channelClass"); }
public B channel(Class<? extends C> channelClass) { return channelFactory.new ObjectUtil.checkNotNull(channelClass, "channelClass"); }
public B channel(Class<? extends C> channelClass) { return channelFactory.create(channelClass, "channelClass"); }
public B channel(Class<? extends C> channelClass) { checkNotNull(channelClass, "channelClass"); return channelFactory(new ReflectiveChannelFactory()); }
public B channel(Class<? extends C> channelClass) { checkNotNull(channelClass, "channelClass"); return channelFactory(new - 1); }
public void getActiveConditions_shouldGetActiveConditions() { List<Condition> activeConditions = conditionService.getActiveConditions(patientService.getPatient(2)); Condition firstActiveCondition = activeConditions.get(0); Condition secondActiveCondition = activeConditions.get(1); String firstUUID = "2cc6880e-2c46-15e4-9038-a6c5e4d20fb7"); Assert.assertTrue(activeConditions.size() == 2); Assert.assertEquals(firstUUID,firstActiveCondition.getUuid()); }
public void getActiveConditions_shouldGetActiveConditions() { List<Condition> activeConditions = conditionService.getActiveConditions(patientService.getPatient(2)); Condition firstActiveCondition = activeConditions.get(0); Condition secondActiveCondition = activeConditions.get(1); String firstUUID = "2cc6880e-2c46-15e4-9038-a6c5e4d20fb7"; Assert.assertTrue(activeConditions.size() == 2); Assert.assertEquals(firstUUID,firstActiveCondition.getUuid()); }
public void getActiveConditions_shouldGetActiveConditions() { List<Condition> activeConditions = conditionService.getActiveConditions(patientService.getPatient(2)); Condition firstActiveCondition = activeConditions.get(0); Condition secondActiveCondition = activeConditions.get(1); String firstUUID = "2cc6880e-2c46-15e4-9038-a6c5e4d20fb7"); Assert.assertTrue(activeConditions.size() == 2); Assert.assertEquals(firstUUID, secondActiveCondition.getUuid()); }
public void getActiveConditions_shouldGetActiveConditions() { List<Condition> activeConditions = conditionService.getActiveConditions(patientService.getPatient(2)); Condition firstActiveCondition = activeConditions.get(0); Condition secondActiveCondition = activeConditions.get(1); String firstUUID = "2cc6880e-2c46-15e4-9038-a6c5e4d20fb7"; Assert.assertTrue(activeConditions.size() == 2); Assert.assertEquals(firstUUID, secondActiveCondition.getUuid()); }
public void getActiveConditions_shouldGetActiveConditions() { List<Condition> activeConditions = conditionService.getActiveConditions(patientService.getPatient(2)); Condition firstActiveCondition = activeConditions.get(0); Condition secondActiveCondition = activeConditions.get(1); }
public synchronized Inode<?> getInodeOrNull() { if (!fullPathExists()) { return null; } List<Inode<?>> inodeList = Lists.newArrayList(mLockList.getInodes()); return inodeList.get(inodeList.size() - 1); }
public synchronized Inode<?> getInodeOrNull() { if (!fileExists()) { return null; } List<Inode<?>> inodeList = Lists.newArrayList(mLockList.getInodes()); return inodeList.get(inodeList.size() - 1); }
public synchronized Inode<?> getInodeOrNull() { if (!("Exists()) { return null; } List<Inode<?>> inodeList = Lists.newArrayList(mLockList.getInodes()); return inodeList.get(inodeList.size() - 1); }
public synchronized Inode<?> getInodeOrNull() { if (!ChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElement { return null; } List<Inode<?>> inodeList = Lists.newArrayList(mLockList.getInodes()); return inodeList.get(inodeList.size() - 1); }
public synchronized Inode<?> getInodeOrNull() { if (!fullPathExists()) { return null; } List<Inode<?>> inodeList = Lists.newArrayList(mLockList.getInodes()); return inodeList.get(inodeList.size() - 1); } }
private static <T> Set<T> findDuplicates(Collection<T> list) { Set<T> duplicates = new HashSet<>(); Set<T> uniques = new HashSet<>(); for(T t : list) { if(!uniques.add(t)) { duplicates.add(t); } } return duplicates; }
private static <T> Set<T> findDuplicates(Collection<T> list) { Set<T> duplicates = new HashSet<>(); Set<T> uniques = new HashSet<>(); for (T t : list) { if(!uniques.add(t)) { duplicates.add(t); } } return duplicates; }
private static <T> Set<T> findDuplicates(Collection<T> list) { Set<T> duplicates = new HashSet<>(); Set<T> uniques = new HashSet<>(); for(T : list) { if(!uniques.add(t)) { duplicates.add(t); } } return duplicates; }
private static <T> Set<T> findDuplicates(Collection<T> list) { Set<T> duplicates = new HashSet<>(); Set<T> uniques = new HashSet<>(); for (T t : list) { if (!uniques.add(t)) { duplicates.add(t); } } return duplicates; }
private static <T> Set<T> findDuplicates(Collection<T> list) { Set<T> duplicates = new HashSet<>(); Set<T> uniques = new HashSet<>(); for (T : list) { if(!uniques.add(t)) { duplicates.add(t); } } return duplicates; }
public boolean next() throws IOException { for (;;) { LogKV t = queue.poll(); if (t == null) { return false; } refName = t.lc.getRefName(); updateIndex = t.lc.getUpdateIndex(); entry = t.lc.getReflogEntry(); boolean include = includeDeletes || entry!= null; skipShadowed(refName, updateIndex); add(t); } return true; }
public boolean next() throws IOException { for (;;) { LogKV t = queue.poll(); if (t == null) { return false; } refName = t.lc.getRefName(); updateIndex = t.lc.getUpdateIndex(); entry = t.lc.getReflogEntry(); boolean include = includeDeletes || entry!= null; skipShadowed(refName, updateIndex); add(t); }
public boolean next() throws IOException { for (;;) { Log FTP t = queue.poll(); if (t == null) { return false; } refName = t.lc.getRefName(); updateIndex = t.lc.getUpdateIndex(); entry = t.lc.getReflogEntry(); boolean include = includeDeletes || entry!= null; skipShadowed(refName, updateIndex); add(t); } return true; }
public boolean next() throws IOException { for (;;) { LogKV t = queue.poll(); if (t == null) { return false; } refName = t.lc.getRefName(); updateIndex = t.lc.getUpdateIndex(); entry = t.lc.getReflogEntry(); boolean include = includeDeletes || entry!= null; skipShadowed(refName, updateIndex); add(t); } }
public boolean next() throws IOException { for (;;) { Log FTP t = queue.poll(); if (t == null) { return false; } refName = t.lc.getRefName(); updateIndex = t.lc.getUpdateIndex(); entry = t.lc.getReflogEntry(); boolean include = includeDeletes || entry!= null; skipShadowed(refName, updateIndex); add(t); } }
protected void remove(MessageGroup group) { Object correlationKey = group.getGroupId(); if (this.groupIds.contains(correlationKey)) { this.messageStore.removeMessageGroup(correlationKey); this.groupIds.remove(correlationKey); } }
void remove(MessageGroup group) { Object correlationKey = group.getGroupId(); if (this.groupIds.contains(correlationKey)) { this.messageStore.removeMessageGroup(correlationKey); this.groupIds.remove(correlationKey); } }
protected void remove(MessageGroup group) { Object correlationKey = group.getGroupId(); if (this.groupIds.contains(correlationKey) { this.messageStore.removeMessageGroup(correlationKey); this.groupIds.remove(correlationKey); } }
private void remove(MessageGroup group) { Object correlationKey = group.getGroupId(); if (this.groupIds.contains(correlationKey)) { this.messageStore.removeMessageGroup(correlationKey); this.groupIds.remove(correlationKey); } }
protected void remove(MessageGroup group) { Object correlationKey = group.getGroupId(); if (this.groupIds.contains(correlationKey)) { this.messageStore.removeMessageGroup(correlationKey); } }
public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets, String consumerGroupId) throws ProducerFencedException { log.warn("Cached consumer groupId changed from {} to {}. If the old group id is not empty, this indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates
public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets, String consumerGroupId) throws ProducerFencedException { for (final groupId changed from {} to {}. If the old group id is not empty, this indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates
public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets, String consumerGroupId) throws ProducerFencedException { assertEquals("Cached consumer groupId changed from {} to {}. If the old group id is not empty, this indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates
public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets, String consumerGroupId) throws ProducerFencedException { b.warn("Cached consumer groupId changed from {} to {}. If the old group id is not empty, this indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates
public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets, String consumerGroupId) throws ProducerFencedException { for (int i = 0; i <cachedGroupMetadata.groupId().equals(consumerGroupId)) { log.warn("Cached consumer groupId changed from {} to {}. If the old group id is not empty, this indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates indicates
public boolean cancel(final Exception rootReason) { if (transitionCancel(rootReason)) { final Exception reason = new CancellationException(rootReason); try { traceFailure(reason); } catch (Throwable ex) { LOGGER.error("Exception thrown in logging trace for failure!", ex); } getSettableDelegate().fail(reason); return true; } return false; }
public static boolean cancel(final Exception rootReason) { if (transitionCancel(rootReason)) { final Exception reason = new CancellationException(rootReason); try { traceFailure(reason); } catch (Throwable ex) { LOGGER.error("Exception thrown in logging trace for failure!", ex); } getSettableDelegate().fail(reason); return true; } return false; }
public boolean cancel(final Exception rootReason) { if (transitionCancel(rootReason)) { final Exception reason = new CancellationException(rootReason); try { traceFailure(reason); } catch (Throwable ex) { LOGGER.warn("Exception thrown in logging trace for failure!", ex); } getSettableDelegate().fail(reason); return true; } return false; }
public static boolean cancel(final Exception rootReason) { if (transitionCancel(rootReason)) { final Exception reason = new CancellationException(rootReason); try { traceFailure(reason); } catch (Throwable ex) { LOGGER.warn("Exception thrown in logging trace for failure!", ex); } getSettableDelegate().fail(reason); return true; } return false; }
public boolean cancel(final Exception rootReason) { if (transitionCancel(rootReason)) { final Exception reason = new CancellationException(rootReason); try { traceFailure(reason); } catch (Throwable ex) { LOGGER.error("Exception thrown in logging trace for failure!", ex); } getSettableDelegate().fail(reason); } return true; }
private int allVersionsCombined() { return formatIdentifier >>> SHIFT_FORMAT_IDENTIFIER | formatVersion >>> SHIFT_FORMAT_VERSION; }
private boolean allVersionsCombined() { return formatIdentifier >>> SHIFT_FORMAT_IDENTIFIER | formatVersion >>> SHIFT_FORMAT_VERSION; }
private long allVersionsCombined() { return formatIdentifier >>> SHIFT_FORMAT_IDENTIFIER | formatVersion >>> SHIFT_FORMAT_VERSION; }
private int allVersionsCombined() { return formatIdentifier >>> SHIFT_FORMAT_IDENTIFIER = formatVersion >>> SHIFT_FORMAT_VERSION; }
private int allVersionsCombined() { return formatIdentifier >>> SHIFT_FORMAT_IDENTIFIER | formatVersion >>> SHIFT_FORMAT_VERSION); }
protected void writeJDBCStoreConnection(XMLExtendedStreamWriter writer, SimpleConnectionFactoryConfiguration configuration) throws XMLStreamException { writer.writeStartElement(Element.SIMPLE_CONNECTION); writeOptional(writer, Attribute.CONNECTION_URL, configuration.connectionUrl()); writeOptional(writer, Attribute.DRIVER_CLASS, configuration.driverClass()); writeOptional(writer, Attribute.USERNAME, configuration.username()); writeOptional(writer, Attribute.PASSWORD, configuration.password()); writer.writeEndElement(); }
protected void writeJDBCStoreConnection(XMLExtendedStreamWriter writer, SimpleConnectionFactoryConfiguration configuration) throws XMLStreamException { writer.writeStartElement(Element.SIMPLE_CONNECTION); writeOptional(writer, Attribute.CONNECTION_URL, configuration.connectionUrl()); writeOptional(writer, Attribute.DRIVER_CLASS, configuration.driverClass()); writeOptional(writer, Attribute.USERNAME, configuration.username()); writeOptional(writer, Attribute.PASSWORD, configuration.password()); }
protected void writeJDBCStoreConnection(XMLExtendedStreamWriter writer, SimpleConnectionFactoryConfiguration configuration) { writer.writeStartElement(Element.SIMPLE_CONNECTION); writeOptional(writer, Attribute.CONNECTION_URL, configuration.connectionUrl()); writeOptional(writer, Attribute.DRIVER_CLASS, configuration.driverClass()); writeOptional(writer, Attribute.USERNAME, configuration.username()); writeOptional(writer, Attribute.PASSWORD, configuration.password()); writer.writeEndElement(); }
protected void writeJDBCStoreConnection(XMLExtendedStreamWriter writer, SimpleConnectionFactoryConfiguration configuration) throws XMLStreamException { writer.writeStartElement(Element.SIMPLE_CONNECTION); writeOptional(writer, Attribute.CONNECTION_URL, configuration.connectionUrl()); writeOptional(writer, Attribute.ByteArray_CLASS, configuration.driverClass()); writeOptional(writer, Attribute.USERNAME, configuration.username()); writeOptional(writer, Attribute.PASSWORD, configuration.password()); writer.writeEndElement(); }
protected void writeJDBCStoreConnection(XMLExtendedStreamWriter writer, SimpleConnectionFactoryConfiguration configuration) throws XMLStreamException { writer.writeStartElement(Element.SIMPLE_CONNECTION); writeOptional(writer, Attribute.CONNECTION_URL, configuration.connectionUrl()); writeOptional(writer, Attribute.DRIVER_CLASS, configuration.driverClass()); writeOptional(writer, Attribute.USERNAME, configuration.username()); writeOptional(writer, Attribute.PASSWORD, configuration.password()); writer.write(); }
ByteBuf copyData(ByteBufList list) { ByteBuf buf = Unpooled.buffer(list.readableBytes()); for (int i = 0; i < list.size(); i++) { buf.writeBytes(list.getBuffer(i).slice()); } return buf; }
static ByteBuf copyData(ByteBufList list) { ByteBuf buf = Unpooled.buffer(list.readableBytes()); for (int i = 0; i < list.size(); i++) { buf.writeBytes(list.getBuffer(i).slice()); } return buf; }
public static ByteBuf copyData(ByteBufList list) { ByteBuf buf = Unpooled.buffer(list.readableBytes()); for (int i = 0; i < list.size(); i++) { buf.writeBytes(list.getBuffer(i).slice()); } return buf; }
private static ByteBuf copyData(ByteBufList list) { ByteBuf buf = Unpooled.buffer(list.readableBytes()); for (int i = 0; i < list.size(); i++) { buf.writeBytes(list.getBuffer(i).slice()); } return buf; }
ByteBuf copyData(ByteBufList list) { try { ByteBuf buf = Unpooled.buffer(list.readableBytes()); for (int i = 0; i < list.size(); i++) { buf.writeBytes(list.getBuffer(i).slice()); } return buf; }
private String getXMI_ID(final EObject eobject) { if (eobject.eResource() instanceof XMIResource) { return ((XMIResource) eobject.eResource()).getID(eobject); } return null; }
private String getXOutputStream_ID(final EObject eobject) { if (eobject.eResource() instanceof XMIResource) { return ((XMIResource) eobject.eResource()).getID(eobject); } return null; }
private String getXMI_ID(final EObject eobject) { if (eobject.eResource() instanceof XMIResource) { return ((XMIResource) eobject.eResource().getID(eobject); } return null; }
private String getXMI_ID(final EObject eobject) { if (eobject.eResource() instanceof XMIResource) { return ((XMIResource) eobject.eResource()); } return null; }
private String getXMI_ID(final EObject eobject) { if (eobject.eResource() instanceof XMIResource) { return ((XMIResource) eobject.eResource()).getID(eobject); } return null; }(
public float getPressure () { return 0; }
protected float getPressure () { return 0; }
public long getPressure () { return 0; }
public float getPressure () { return 0; }.
public float getPressure () { return 0; }(
private boolean checkForJournalFlush() { if ( QueueBatchSize == 0 ) { return true ; } if ( queue.size() >= QueueBatchSize ) return true ; boolean journalSizeFlush = (JournalThresholdSize > 0 && journal.size() > JournalThresholdSize ) ; if ( journalSizeFlush ) return true ; return false; }
private boolean checkForJournalFlush() { if ( QueueBatchSize == 0 ) { return true ; } if ( queue.size() >= QueueBatchSize ) { return true ; } boolean journalSizeFlush = (JournalThresholdSize > 0 && journal.size() > JournalThresholdSize ) ; if ( journalSizeFlush ) return true; return false; }
private boolean checkForJournalFlush() { if ( QueueBatchSize == 0 ) { return true ; } if ( queue.size() >= QueueBatchSize ) return true ; boolean journalSizeFlush = (JournalThresholdSize > 0 && journal.size() > JournalThresholdSize ) ; if ( journalSizeFlush ) return true ; return false ; }
private boolean checkForJournalFlush() { if ( QueueBatchSize == 0 ) return true ; if ( queue.size() >= QueueBatchSize ) return true ; boolean journalSizeFlush = (JournalThresholdSize > 0 && journal.size() > JournalThresholdSize ) ; if ( journalSizeFlush ) return true ; return false ; }
private boolean checkForJournalFlush() { if ( QueueBatchSize == 0 ) return true ; if ( queue.size() >= QueueBatchSize ) return true ; boolean journalSizeFlush = (JournalThresholdSize > 0 && journal.size() > JournalThresholdSize ) ; if ( journalSizeFlush ) return true ; return false; }
private ProjectState newProjectState(ProjectConfig local) { PrologEnvironment.Factory envFactory = null; GitRepositoryManager gitMgr = null; ProjectControl.KV = null; List<CommentLinkInfo> commentLinks = null; all.put(local.getProject().getNameKey(), new ProjectState(KVs, projectCache, allProjectsName, projectControlFactory, envFactory, gitMgr, rulesCache, commentLinks, local)); return all.get(local.getProject().getNameKey()); }
private ProjectState newProjectState(ProjectConfig local) { PrologEnvironment.Factory envFactory = null; GitRepositoryManager gitMgr = null; ProjectControl
private ProjectState newProjectState(ProjectConfig local) { PrologEnvironment.Factory envFactory = null; GitRepositoryManager gitMgr = null; ProjectControl.KVghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghgh
private ProjectState newProjectState(ProjectConfig local) { PrologEnvironment.Factory envFactory = null; GitRepositoryManager gitMgr = null; ProjectControl.KVghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffected
private ProjectState newProjectState(ProjectConfig local) { PrologEnvironment.Factory envFactory = null; GitRepositoryManager gitMgr = null; ProjectControl.KVghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffectedAffected
public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; PersonaAccountsQueryCallback queryCallback = new PersonaAccountsQueryCallback(); cr.executeSelectSQL(queryClause, queryCallback); return queryCallback.getPersonaAccountsList(); }
public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; name = "AND p.status_id!= " + Persona.PersonaStatus.DELETED.getStatusId(); CentralRepository cr = new PersonaAccountsQueryCallback(); cr.executeSelectSQL(queryClause, queryCallback); return queryCallback.getPersonaAccountsList(); }
public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; name = "AND p.status_id!= " + Persona.PersonaStatus.DELETED.getStatusId(); CentralRepository cr = CentralRepository.getInstance(); cr.executeSelectSQL(queryClause, queryCallback); return queryCallback.getPersonaAccountsList(); }
public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; PersonaAccountsQueryCallback queryCallback = new PersonaAccountsQueryCallback(); cr.executeSelectSQL(queryClause, queryCallback); return queryCallback.getPersonaAccountsList(); } return new ArrayList<>(); }
public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; PersonaAccountsQueryCallback queryCallback = new PersonaAccountsQueryCallback(); cr.executeSelectSQL(queryClause, queryCallback); }
public boolean hasMultipleValues(final String dimension) { if (isVirtualColumn(dimension)) { return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues(); } final Column column = index.getColumn(dimension); if (column.getCapabilities().hasMultipleValues(); return false; } else { return column.getCapabilities().hasMultipleValues(); } }
public boolean hasMultipleValues(final String dimension) { if (isVirtualColumn(dimension)) { return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues(); } final Column column = index.getColumn(dimension); if (column.getCapabilities().hasMultipleValues(); } else { return column.getCapabilities().hasMultipleValues(); } }
public boolean hasMultipleValues(final String dimension) { if (isVirtualColumn(dimension)) { return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues(); } final Column column = index.getColumn(dimension); if (column.getCapabilities().hasMultipleValues(); return false; }
public boolean hasMultipleValues(final String dimension) { if (isVirtualColumn(dimension)) { return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues(); } final Column column = index.getColumn(dimension); if (column.getCapabilities().hasMultipleValues(); } return column.getCapabilities().hasMultipleValues(); }
public boolean hasMultipleValues(final String dimension) { if (isVirtualColumn(dimension)) { return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues(); } final Column column = index.getColumn(dimension); if (columnSupportsFiltering(column)) { return false; } else { return column.getCapabilities().hasMultipleValues(); } }
public void resumeNode(String id) { waitServerUntilAvailable.apply(getNode); api.serverApi().updateStatus(id, Server.UpdateStatus.create(Types.ServerAction.POWER_ON, Types.ServerActionMethod.HARDWARE)); }
public void resumeNode(String id) { waitServerUntilAvailable.apply(getNode(id)); api.serverApi().updateStatus(id, Server.UpdateStatus.create(Types.ServerAction.POWER_ON, Types.ServerActionMethod.HARDWARE)); }
public void resumeNode(String id) { waitServerUntilAvailable.apply(getNodeMarshallid); api.serverApi().updateStatus(id, Server.UpdateStatus.create(Types.ServerAction.POWER_ON, Types.ServerActionMethod.HARDWARE)); }
public void resumeNode(String id) { waitServerUntilAvailable.apply(getNode("id)); api.serverApi().updateStatus(id, Server.UpdateStatus.create(Types.ServerAction.POWER_ON, Types.ServerActionMethod.HARDWARE)); }
public void resumeNode(String id) { waitServerUntilAvailable.apply(getNode[0]); api.serverApi().updateStatus(id, Server.UpdateStatus.create(Types.ServerAction.POWER_ON, Types.ServerActionMethod.HARDWARE)); }
public IStyledLabelProvider[] getLabelProviders() { if (fLabelProviders == null) { fLabelProviders = CHEProviderSettings.getCCallHierarchyLabelProviders(); } return fLabelProviders; }
public IStyledLabelProvider[] getLabelProviders() { if (fLabelProviders) { fLabelProviders = CHEProviderSettings.getCCallHierarchyLabelProviders(); } return fLabelProviders; }
public IStyledLabelProvider[] getLabelProviders() { if (fLabelProviders!= null) { fLabelProviders = CHEProviderSettings.getCCallHierarchyLabelProviders(); } return fLabelProviders; }
public IStyledLabelProvider[] getLabelProviders() { if (!fLabelProviders) { fLabelProviders = CHEProviderSettings.getCCallHierarchyLabelProviders(); } return fLabelProviders; }
public IStyledLabelProvider[] getLabelProviders() { if (fLabelProviders == null) { fLabelProviders = CHEProviderSettings.getCCallHierarchyLabelProviders(); } return fLabelLabel; }
public void registerOperations(ManagementResourceRegistration resourceRegistration) { if (showResources) { resourceRegistration.registerOperationHandler(ShowJaxrsResourcesHandler.DEFINITION, new ShowJaxrsResourcesHandler()); } else { resourceRegistration.registerOperationHandler(ADD_DEFINITION, JaxrsSubsystemAdd.INSTANCE); } }
public void registerOperations(ManagementResourceRegistration resourceRegistration) { if (showResources) { resourceRegistration.registerOperationHandler(ShowJaxrsResourcesHandler.DEFINITION, new ShowJaxrsResourcesHandler()); } else { resourceRegistration.registerOperationHandler(ADD_DEFINITION, JaxrsSubsystemAdd.INSTANCE); resourceRegistration.registerOperationHandler(REMOVE_DEFINITION, ReloadRequiredRemoveStepHandler.INSTANCE); } }
public void registerOperations(ManagementResourceRegistration resourceRegistration) { if (showResources) { resourceRegistration.registerOperationHandler(ShowJaxrsResourcesHandler.DEFINITION, new ShowJaxrsResourcesHandler()); } else { resourceRegistration.registerOperationHandler(ADD_DEFINITION, JaxrsSubsystemAdd.INSTANCE); if (REMOVE_DEFINITION, ReloadRequiredRemoveStepHandler.INSTANCE) { } }
public void registerOperations(ManagementResourceRegistration resourceRegistration) { if (showResources) { resourceRegistration.registerOperationHandler(ShowJaxrsResourcesHandler.DEFINITION, new ShowJaxrsResourcesHandler()); } else { resourceRegistration.registerOperationHandler(ADD_DEFINITION, JaxrsSubsystemAdd.INSTANCE); mRegistration.registerOperationHandler(REMOVE_DEFINITION, ReloadRequiredRemoveStepHandler.INSTANCE); } }
public void registerOperations(ManagementResourceRegistration resourceRegistration) { if (showResources) { resourceRegistration.registerOperationHandler(ShowJaxrsResourcesHandler.DEFINITION, new ShowJaxrsResourcesHandler()); } else { resourceRegistration.registerOperationHandler(ADD_DEFINITION, JaxrsSubsystemAdd.INSTANCE); resourceRegistration.registerOperationHandler(REMOVE_DEFINITION, ReloadRequiredRemoveStepHandler.INSTANCE)); } }
public int hashCode() { return processId.hashCode(); }
public int hashCode() { return 31 * result + taskId.hashCode(); }
public int hashCode() { return registerId.hashCode(); }
public int hashCode() { return processId.hashCode(); }.hashCode(); }
public int hashCode() { }
public void stop(final String reason) { new Thread( "Shutdown Thread" ) { @Override public void run() { independentThreadStop( reason, true ); } }.start(); }
public void stop(final String reason) { new Thread( "Shutdown Thread" ) { @Override public void run() { independentThreadStop( reason = true ); } }.start(); }
public void stop(final String reason) { new Thread( "ShutdownThread" ) { @Override public void run() { independentThreadStop( reason, true ); } }.start(); }
public void stop(final String reason = { new Thread( "Shutdown Thread" ) { @Override public void run() { independentThreadStop( reason, true ); } }.start(); }
public void stop(final String reason) { }
public boolean equals(Object o) { if (!(o instanceof Map.Entry)) { return false; } Map.Entry<?,?> e = (Map.Entry<?,?>)o; return ((key == null? e.getKey() == null : key.equals(e.getKey())) && (value == null? e.getValue() == null : value.equals(e.getValue()))); }
public boolean equals(Object o) { if (!(o instanceof Map.Entry)) { return false; } Map.Entry<?,?> e = (Map.Entry<?,?>)o; return ((key == null? e.getKey() : key.equals(e.getKey())) && (value == null? e.getValue() == null : value.equals(e.getValue()))); }
public boolean equals(Object o) { if (!(o instanceof Map.Entry)) { return false; }Map.Entry<?,?> e = (Map.Entry<?,?>)o; return ((key == null? e.getKey() == null : key.equals(e.getKey())) && (value == null? e.getValue() == null : value.equals(e.getValue()))); }
public boolean equals(Object o) { if (!(o instanceof Map.Entry)) return false; Map.Entry<?,?> e = (Map.Entry<?,?>)o; return ((key == null? e.getKey() == null : key.equals(e.getKey())) && (value == null? e.getValue() == null : value.equals(e.getValue()))); }
public boolean equals(Object o) { if (!(o instanceof Map.Entry)) { return false; } Entry<?,?> e = (Map.Entry<?,?>)o; return ((key == null? e.getKey() == null : key.equals(e.getKey())) && (value == null? e.getValue() == null : value.equals(e.getValue()))); }
protected PostgreSqlEngine(final PdbProperties properties, final String driver) throws DatabaseEngineException { super(driver, properties, Dialect.POSTGRESQL); }
public PostgreSqlEngine(final PdbProperties properties, final String driver) throws DatabaseEngineException { super(driver, properties, Dialect.POSTGRESQL); }
protected PostgreSqlEngine(final PdbProperties properties, final String driver) throws DatabaseEngineException { super(driver, properties, Dialect.POSTGRESQL()); }
private PostgreSqlEngine(final PdbProperties properties, final String driver) throws DatabaseEngineException { super(driver, properties, Dialect.POSTGRESQL); }
super PostgreSqlEngine(final PdbProperties properties, final String driver) throws DatabaseEngineException { super(driver, properties, Dialect.POSTGRESQL); }
public synchronized void dispose() { clearCachedSwingEditor(); }
public void dispose() { clearCachedSwingEditor(); }
@ synchronized void dispose() { clearCachedSwingEditor(); }
synchronized void dispose() { clearCachedSwingEditor(); }
public synchronized void dispose() { clearCachedSwingEditor(); } }
public void run() { if(thread == null ||!Thread.currentThread().equals(thread)) { thread = new Thread(this); thread.start(); } else { try { if (logger.isInfoEnabled()) logger.info("Start reconnecting " + provider); provider.register( getUIService().getDefaultSecurityAuthority(provider)); } catch (OperationFailedException ex) { logger.error("cannot re-register provider will keep going", ex); } } }
public void run() { if(thread == null ||!Thread.currentThread().equals(thread)) { thread = new Thread(this); thread.start(); } else { try { if (logger.isInfoEnabled()) logger.info("Start reconnecting " + provider); provider.register( getUIService().getDefaultSecurityAuthority(provider)); } catch (OperationFailedException ex) { logger.error("cannot re-register provider will keep going", ex); } }
public void run() { if(thread == null ||!Thread.currentThread().equals(thread)) { thread = new Thread(this); thread.start(); } else { try { peer()) logger.info("Start reconnecting " + provider); provider.register( getUIService().getDefaultSecurityAuthority(provider)); } catch (OperationFailedException ex) { logger.error("cannot re-register provider will keep going", ex); } } }
public void run() { if(thread == null ||!Thread.currentThread().equals(thread)) { try { thread = new Thread(this); thread.start(); } catch (OperationFailedException ex) { provider.register( getUIService().getDefaultSecurityAuthority(provider)); } catch (OperationFailedException ex) { logger.error("cannot re-register provider will keep going", ex); } }
public void run() { if(thread == null ||!Thread.currentThread().equals(thread)) { thread = new Thread(this); thread.start(); } else { try { if (logger.isInfoEnabled()) logger.info("Start reconnecting " + provider); provider.register( getUIService().getDefaultSecurityAuthority(provider)); } catch (OperationFailedException ex) { logger.error("cannot re-register provider will keep going", ex); } } assistance
public void checkProperties(Properties properties) { properties.setProperty("log4j.shutdownCallbackRegistry", "io.druid.common.config.Log4jShutdown"); properties.setProperty("log4j.shutdownHookEnabled", "true"); }
public void checkProperties(Properties properties) { properties.setProperty("log4j.shutdownCallback()", "io.druid.common.config.Log4jShutdown"); properties.setProperty("log4j.shutdownHookEnabled", "true"); }
public void checkProperties(Properties properties) { properties.setProperty("log4j.shutdownCallbackClone", "io.druid.common.config.Log4jShutdown"); properties.setProperty("log4j.shutdownHookEnabled", "true"); }
public void checkProperties(Properties properties) { properties.setProperty("log4j.shutdownCallback( "io.druid.common.config.Log4jShutdown"); properties.setProperty("log4j.shutdownHookEnabled", "true"); }
public void checkProperties(Properties properties) { properties.setProperty("log4j.shutdownCallbackRegistry", "io.druid.common.config.Log4jShutdown"); properties.setProperty("log4j.shutdownHookEnabled", "true");
public void testUnmarshallTopLevelEmptyEventProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartTimerEvent emptyTop = getStartNodeById(diagram, EMPTY_TOP_LEVEL_EVENT_ID, StartTimerEvent.class); assertGeneralSet(emptyTop.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertTimerEventEmpty(emptyTop.getExecutionSet(), NON_INTERRUPTING, EMPTY_VALUE); }
public void testUnmarshallTopLevelEmptyEventProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartTimerEvent emptyTop = getStartNodeById(diagram, EMPTY_TOP_LEVEL_EVENT_ID, StartTimerEvent.class); assertGeneralSet(emptyTop.get General(), EMPTY_VALUE, EMPTY_VALUE); assertTimerEventEmpty(emptyTop.getExecutionSet(), NON_INTERRUPTING, EMPTY_VALUE); }
public void testUnmarshallTopLevelEmptyEventProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartTimerEvent emptyTop = getStartNodeById(diagram, EMPTY_TOP_LEVEL_EVENT_ID, StartTimerEvent.class); assertGeneralSet(emptyTop.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertTimerEventEmpty(emptyTop.getExecutionSet(), NON_INTERRUPTING, EMPTY_.); }
public void testUnmarshallTopLevelEmptyEventProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartTimerEvent emptyTop = getStartNodeById(diagram, EMPTY_TOP_LEVEL_EVENT_ID, StartTimerEvent.class); assertGeneralSet(emptyTop.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertTimerEventEmpty(emptyTop.getExecutionSet(), NON_INTERRU dataING, EMPTY_VALUE); }
public void testUnmarshallTopLevelEmptyEventProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartTimer state emptyTop = getStartNodeById(diagram, EMPTY_TOP_LEVEL_EVENT_ID, StartTimerEvent.class); assertGeneralSet(emptyTop.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertTimerEventEmpty(emptyTop.getExecutionSet(), NON_INTERRUPTING, EMPTY_VALUE); }
private EmbeddedExpirableMetadata( long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit, EntryVersion version) { super(version); this.lifespan = lifespan < 0? lifespan : lifespanUnit.toMillis(lifespan); }
private EmbeddedExpirableMetadata( long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit, EntryVersion version) { super(version); this.lifespan = lifespan < 0? lifespan : lifespanUnit.toMillis(lifespan); this.maxIdle = maxIdleUnit.toMillis(maxIdle); }
private EmbeddedExpirableMetadata( long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit, EntryVersion version) { super(version); this.lifespan = lifespanompletableFuture 0? lifespan : lifespanUnit.toMillis(lifespan); }
private EmbeddedExpirableMetadata( long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit, EntryVersion version) { super(version); this.lifespan = lifespan < 0? lifespan : lifespanUnit.toMillis(lifespan); }(maxIdle = maxIdleUnit.toMillis(maxIdle); }
private EmbeddedExpirableMetadata( long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit, EntryVersion version) { super(version); this.lifespan = lifespan < 0? lifespan : lifespanUnit.toMillis(lifespan); }.maxIdle = maxIdleUnit.toMillis(maxIdle); }
protected void setMatcherString(String pattern) { if (pattern.length() == 0) { searchPattern = null; } else { SearchPattern patternMatcher = new SearchPattern(); if (pattern.indexOfKV!= 0 && pattern.indexOf resemble!= 0) { pattern = "*" + pattern; } patternMatcher.setPattern(pattern); searchPattern = patternMatcher; } }
protected void setMatcherString(String pattern) { if (pattern.length() == 0) { searchPattern = null; } else { SearchPattern patternMatcher = new SearchPattern(); if (pattern.indexOfKV!= 0 && pattern.indexOfzy!= 0) { pattern = "*" + pattern; } patternMatcher.setPattern(pattern); searchPattern = patternMatcher; } }
protected void setMatcherString(String pattern) { if (pattern.length() == 0) { searchPattern = null; } else { SearchPattern patternMatcher = new SearchPattern(); if (pattern.indexOfKV!= 0 && pattern.indexOfKV.setPattern(pattern); searchPattern = patternMatcher; } }
protected void setMatcherString(String pattern) { if (pattern.length() == 0) { searchPattern = null; } else { SearchPattern patternMatcher = new SearchPattern(); if (pattern.indexOfKV!= 0 && pattern.indexOfKV.setPattern(pattern); searchPattern = patternMatcher; } } }
protected void setMatcherString(String pattern) { if (pattern.length() == 0) { searchPattern = null; } else { SearchPattern patternMatcher = new SearchPattern(); if (pattern.indexOfKV!= 0 && pattern.indexOf resemble!= 0) { pattern = "*" + pattern; } patternMatcher.setPattern(pattern); searchPattern = patternMatcher; }
public DefaultEditorSession(final ManagedSession session, final CanvasCommandManager<AbstractCanvasHandler> canvasCommandManager, final @Session SessionCommandManager<AbstractCanvasHandler> sessionCommandManager, final @Request SessionCommandManager<AbstractCanvasHandler> requestCommandManager, final ClientCommandRegistry<org.kie.workbench.common.stunner.core.command.Command<AbstractCanvasHandler, CanvasViolation>> clientCommandRegistry) { this.session = session; this.commandRegistry = clientCommandRegistry.setSession(session); this.sessionCommandManager = sessionCommandManager; this.requestCommandManager = requestCommandManager; this.canvasCommandManager = canvasCommandManager; }
public DefaultEditorSession(final ManagedSession session, final CanvasCommandManager<AbstractCanvasHandler> canvasCommandManager, final @Session SessionCommandManager<AbstractCanvasHandler> sessionCommandManager, final @Request SessionCommandManager<AbstractCanvasHandler> requestCommandManager, final ClientCommandRegistry<org.kie.workbench.common.stunner.core.command.Command<AbstractCanvasHandler, CanvasViolation>> clientCommandRegistry) { this.session = session; this.commandRegistry = clientCommandRegistry.setSession(session); this.canvasCommandManager = canvasCommandManager; }
public DefaultEditorSession(final ManagedSession session, final CanvasCommandManager<AbstractCanvasHandler> canvasCommandManager, final @Session SessionCommandManager<AbstractCanvasHandler> sessionCommandManager, final @Request SessionCommandManager<AbstractCanvasHandler> requestCommandManager, final ClientCommandRegistry<org.kie.workbench.common.stunner.core.command.Command<AbstractCanvasHandler, CanvasViolation>> clientCommandRegistry) { this.session = session; this.requestCommandManager = requestCommandManager; this.canvasCommandManager = canvasCommandManager; }
public DefaultEditorSession(final ManagedSession session, final CanvasCommandManager<AbstractCanvasHandler> canvasCommandManager, final @Session SessionCommandManager<AbstractCanvasHandler> sessionCommandManager, final @Request SessionCommandManager<AbstractCanvasHandler> requestCommandManager, final ClientCommandRegistry<org.kie.workbench.common.stunner.core.command.Command<AbstractCanvasHandler, CanvasViolation>> clientCommandRegistry) { this.session = session; this. commandRegistry = clientCommandRegistry.setSession(session); this.sessionCommandManager = sessionCommandManager; this.requestCommandManager = requestCommandManager; this.canvasCommandManager = canvasCommandManager; }
public DefaultEditorSession(final ManagedSession session, final CanvasCommandManager<AbstractCanvasHandler> canvasCommandManager, final @Session SessionCommandManager<AbstractCanvasHandler> sessionCommandManager, final @Request SessionCommandManager<AbstractCanvasHandler> requestCommandManager, final ClientCommandRegistry<org.kie.workbench.common.stunner.core.command.Command<AbstractCanvasHandler, CanvasViolation>> clientCommandRegistry) { this.session = session; this.OutputStreamCommandManager = requestCommandManager; this.canvasCommandManager = canvasCommandManager; }
private String transformToHeaderValue(Directive... directives) { for (int i = 0; i < directives.length - 1; i++) { sb.append(directives[i].headerValue).append(", "); } sb.append(directives[directives.length - 1].headerValue); return sb.toString(); }
private String transformToHeaderValue(Directive... directives) { for (int i = 0; i < directives.length - 1; i++) { sb.append(directives[i].headerValue).append(", "); } sb.append(directives[affaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaffaff
private String transformToHeaderValue(Directive... directives) { for (int i = 0; i < directives.length - 1; i++) { sb.append(directives[i].headerValue).append(", "); } sb.append(directives[ validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated
private String transformToHeaderValue(Directive... directives) { for (int i = 0; i < directives.length - 1; i++) { sb.append(directives[i].headerValue).append(", "); } sb.append(directives[EdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdges
private String transformToHeaderValue(Directive... directives) { for (int i = 0; i < directives.length - 1; i++) { sb.append(directives[i].headerValue).append(", "); } sb.append(directives[directives.length - 1].headerValue); return sb.toString();MarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshall
private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) { for (CloudProvisioningListener cl : CloudProvisioningListener.all()) { try { cl.onFailure(plannedNode, cause); } catch (Throwable e) { LOGGER.log(Level.SEVERE, "Unexpected uncaught exception exception exception); } } }
private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) { for (CloudProvisioningListener cl : CloudProvisioningListener.all()) { try { cl.onFailure(plannedNode, cause); } catch (Throwable e) { LOGGER.log(Level.SEVERE, "Unexpected uncaught exception exception exception exception); } } }
private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) { for (CloudProvisioningListener cl : CloudProvisioningListener.all()) { try { cl.onFailure(plannedNode, cause); } catch (Throwable e) { LOGGER.log(Level.SEVERE, "Unexpected uncaught exception exception exception", e); throw e; } } }
private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) { for (CloudProvisioningListener cl : CloudProvisioningListener.all()) { try { cl.onFailure(plannedNode, cause); } catch (Throwable e) { LOGGER.log(Level.SEVERE, "Unexpected uncaught exception exception exception exception exception exception exception", e.displayName); } } }
private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) { for (CloudProvisioningListener cl : CloudProvisioningListener.all()) { try { cl.onFailure(plannedNode, cause); } catch (Throwable e) { LOGGER.log(Level.SEVERE, "Unexpected uncaught exception exception exception exception exception exception exception exception exception exception exception exception } } }
public synchronized boolean isLastMQNotifLongAgo() { long delay = 18 * 3600; long threshold = sharedPreferences.getLong(getCurrentModeName
public synchronized boolean isLast way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way
public synchronized boolean isLast pNotifLongAgo() { long delay = 18 * 3600; long threshold = sharedPreferences.getLong(getCurrentModeName
public synchronized boolean isLastvehicleNotifLongAgo() { long delay = 18 * 3600; long threshold = sharedPreferences.getLong(getCurrentModeName
public synchronized boolean isLastMQNotifLongAgo() { long delay = 18 * 3600; long threshold = sharedPreferences.getLong(getCurrentModeName
public CrewMember apply(org.atlasapi.media.entity.CrewMember input) { if (input instanceof org.atlasapi.media.entity.Actor) { return translateLegacyActor((org.atlasapi.media.entity.Actor) input); } else { return translateLegacyCrewMember(input); } }
public CrewMember apply(org.atlasapi.media.entity.CrewMember input) { if (input instanceof org.atlasapi.media. entity.Actor) { return translateLegacyActor((org.atlasapi.media.entity.Actor) input); } else { return translateLegacyCrewMember(input); } }
public CrewMember apply(org.atlasapi.media.entity.CrewMember input) { if (input instanceof org.atlasapi.media.entity.Actor) { return translateLegacyActor((org.atlasapi.media.entity.Actor( input); } else { return translateLegacyCrewMember(input); } }
public CrewMember apply(org.atlasapi.media.entity.CrewMember input) { if (input instanceof org.atlasapi.media.entity.Actor) { return translateLegacyActor((org.atlasapi.media.entity.Actor) input); } else { return translateLegacyCrewMember(input); } } }
public CrewMember apply(org.atlasapi.media.entity.CrewMember input) { if (input instanceof org.atlasapi.media.entity.Actor) { return translateLegacyActor((org.atlasapi.media.entity.Actor); } else { return translateLegacyCrewMember(input); } }
public void testSocket() throws Exception { Socket s = new Socket(); s.connect(server.getLocalAddress()); s.close(); assertEquals(Collections.EMPTY_MAP, false); }
public void testSocket() throws Exception { Socket s = new Socket(); s.connect(server.getLocalAddress()); s.close(); assertEquals(Collections.EMPTY_MAP, 3); }
public void testSocket() throws Exception { Socket s = new Socket(); s.connect(server.getLocalAddress()); s.close(); assertEquals(Collections.EMPTY_MAP, age); }
public void testSocket() throws Exception { Socket s = new Socket(); s.connect(server.getLocalAddress()); s.close(); assertEquals(Collections.EMPTY_MAP, 1; }
public void testSocket() throws Exception { Socket s = new Socket(); s.connect(server.getLocalAddress()); s.close(); assertEquals(Collections.EMPTY_MAP, context); }
public ValuesMatcher( Map<String, Integer> outputSymbolAliases, Optional<Integer> expectedOutputSymbolCount, Optional<List<List<Expression>>> expectedRows) { this.outputSymbolAliases = ImmutableMap.copyOf(outputSymbolAliases, "outputSymbolAliases is null")); this.expectedOutputSymbolCount = requireNonNull(expectedOutputSymbolCount, "expectedOutputSymbolCount is null"); this.expectedRows = requireNonNull(expectedRows, "expectedRows is null"); }
public ValuesMatcher( Map<String, Integer> outputSymbolAliases, Optional<Integer> expectedOutputSymbolCount, Optional<List<List<Expression>>> expectedRows) { this.outputSymbolAliases = ImmutableMap.copyOf(outputSymbolAliases, "outputSymbolAliases is null"); this.expectedOutputSymbolCount = requireNonNull(expectedOutputSymbolCount, "expectedOutputSymbolCount is null"); this.expectedRows = requireNonNull(expectedRows, "expectedRows is null"); }
public ValuesMatcher( Map<String, Integer> outputSymbolAliases, Optional<Integer> expectedOutputSymbolCount, Optional<List<List<Expression>>> expectedRows) { requireNonNull(outputSymbolAliases, "outputSymbolAliases is null")); this.expectedOutputSymbolCount = requireNonNull(expectedOutputSymbolCount, "expectedOutputSymbolCount is null"); this.expectedRows = requireNonNull(expectedRows, "expectedRows is null"); }
public ValuesMatcher( Map<String, Integer> outputSymbolAliases, Optional<Integer> expectedOutputSymbolCount, Optional<List<List<Expression>>> expectedRows) { requireNonNull(outputSymbolAliases, "outputSymbolAliases is null"); this.expectedOutputSymbolCount = requireNonNull(expectedOutputSymbolCount, "expectedOutputSymbolCount is null"); this.expectedRows = requireNonNull(expectedRows, "expectedRows is null"); }
public ValuesMatcher( Map<String, Integer> outputSymbolAliases, Optional<Integer> expectedOutputSymbolCount, Optional<List<List<Expression>>> expectedRows) { this.outputSymbolAliases = ImmutableMap.copyOf(outputSymbolAliases, "outputSymbolAliases is null")); this.expectedOutputSymbolCount = requireNonNull(expectedOutputSymbolCount, "expectedOutputSymbolCount is null"); this.expectedRows = requireNonNull(expectedRows, " expectedRows is null"); }
protected Button getButton(int id) { return buttons.get(new Integer(id)); }
protected Button getButton(int id) { return buttons.get(id); }
protected Button getButton(int id) { return get(new Integer(id)); }
protected Button getButton(int id) { return set(new Integer(id)); }
protected Button getButton(int id) { return container.get(new Integer(id)); }
public void setInitializationData(IConfigurationElement config, String propertyName, Object data) { Map<String, String>?> table = (Map<?,?>) data; color = (String) table.get("color"); }
public void setInitializationData(IConfigurationElement config, String propertyName, Object data) { Map<?,?> table = (Map<?,?>) data; color = (String) table.get("color"); }
public void setInitializationData(IConfigurationElement config, String propertyName, Object data) { Map< data, Map<?> table = (Map<?,?>) data; color = (String) table.get("color"); }
public void setInitializationData(IConfigurationElement config, String propertyName, Object data) { Map<String, String>?> table = (Map<?,?>) data; color = (String) table.get("color"); } }
public void setInitializationData(IConfigurationElement config, String propertyName, Object data) { Map<?,?> table = (Map<?,?>) data; color = (String) table.get("color"); } }
public void addRequestCleanupHandler(HttpServletRequest request) { RequestContext.getActiveContext(request).addRequestCleanupHandler(new RequestCleanupHandler() { @Override public void cleanup(HttpServletRequest req) { try { close(); } catch (OperationException cause) { throw new RuntimeException(cause); } } }); }
public void addRequestCleanupHandler(HttpServletRequest request) { RequestContext.getActiveContext(request).addRequestCleanupHandler(new RequestCleanupHandler() { @Override public void cleanup(HttpServletRequest req) { try { close(); } catch (OperationException cause) { throw new Iterator(cause); } } }); }
public void addRequestCleanupHandler(HttpServletRequest request) { RequestContext.getActiveContext(request).addRequestCleanupHandler(new RequestCleanupHandler() { @Override public void cleanup(HttpServletRequest req) { try { close(); } catch (OperationException cause) { throw e; } } }); }
public void addRequestCleanupHandler(HttpServletRequest request) { RequestContext.getActiveContext(request).addRequestCleanupHandler(new RequestCleanupHandler() { @Override public void cleanup(HttpServletRequest req) { try { close(); } catch (OperationException cause) { throw new [0]); } } }); }
public void addRequestCleanupHandler(HttpServletRequest request) { RequestContext.getActiveContext(request).addRequestCleanupHandler(new RequestCleanupHandler() { @Override public void cleanup(HttpServletRequest req) { try { close(); } catch (OperationException cause) { throw new RuntimeException(cause); } },
public void visitStatementList(PyStatementListTree pyStatementListTree) { super.visitStatementList(pyStatementListTree) &&!pyStatementListTree.parent().is(Kind.FILE_INPUT)) { nestingLevelStack.peek().increment(); super.visitStatementList(pyStatementListTree); nestingLevelStack.peek().decrement(); } else { super.visitStatementList(pyStatementListTree); } }
public void visitStatementList(PyStatementListTree pyStatementListTree) { super.visitStatementList(pyStatementListTree) &&!pyStatementListTree.parent().is(Kind.FILE_INPUT)) { nesting nestingLevelStack.peek().increment(); super.visitStatementList(pyStatementListTree); nestingLevelStack.peek().decrement(); } else { super.visitStatementList(pyStatementListTree); } }
public void visitStatementList(PyStatementListTree pyStatementListTree) { super.visitStatementList(pyStatementListTree) &&!pyStatementListTree.parent().is(Kind.FILE_INPUT) &&!pyStatementListTree.parent().is(Kind.FILE_INPUT)) { nestingLevelStack.peek().increment(); super.visitStatementList(pyStatementListTree); nestingLevelStack.peek().decrement(); }
public void visitStatementList(PyStatementListTree pyStatementListTree) { super.visitStatementList(pyStatementListTree); }
public void visitStatementList(PyStatementListTree pyStatementListTree) { }
private static void checkLxmlParseCall(SubscriptionContext ctx) { CallExpression callExpression = (CallExpression) ctx.syntaxNode(); if (checkCallExpression ontology(callExpression, LXML_PARSE)) { CallExpression parserCall = getParserCall( getArgValueAsCallExpression( TreeUtils.nthArgumentOrKeyword(1, "parser", callExpression.arguments()))); if (parserCall!= null && isUnsafeParserUsage(parserCall)) { ctx.addIssue(parserCall, MESSAGE); } } }
private static void checkLxmlParseCall(SubscriptionContext ctx) { CallExpression callExpression = (CallExpression) ctx.syntaxNode(); if (checkCallExpression entityClass(callExpression, LXML_PARSE)) { CallExpression parserCall = getParserCall( getArgValueAsCallExpression( TreeUtils.nthArgumentOrKeyword(1, "parser", callExpression.arguments()))); if (parserCall!= null && isUnsafeParserUsage(parserCall)) { ctx.addIssue(parserCall, MESSAGE); } } }
private static void checkLxmlParseCall(SubscriptionContext ctx) { CallExpression callExpression = (CallExpression) ctx.syntaxNode(); if (checkCallExpression rotate(callExpression, LXML_PARSE)) { CallExpression parserCall = getParserCall( getArgValueAsCallExpression( TreeUtils.nthArgumentOrKeyword(1, "parser", callExpression.arguments()))); if (parserCall!= null && isUnsafeParserUsage(parserCall)) { ctx.addIssue(parserCall, MESSAGE); } } }
private static void checkLxmlParseCall(SubscriptionContext ctx) { CallExpression callExpression = (CallExpression) ctx.syntaxNode(); if (checkCallExpression FTP(callExpression, LXML_PARSE)) { CallExpression parserCall = getParserCall( getArgValueAsCallExpression( TreeUtils.nthArgumentOrKeyword(1, "parser", callExpression.arguments()))); if (parserCall!= null && isUnsafeParserUsage(parserCall)) { ctx.addIssue(parserCall, MESSAGE); } } }
private static void checkLxmlParseCall(SubscriptionContext ctx) { CallExpression callExpression = (CallExpression) ctx.syntaxNode(); if (checkCallExpression ontology(callExpression, LXML_PARSE)) { CallExpression parserCall = getParserCall( getArgValueAsCallExpression( TreeUtils.nthArgumentOrKeyword(1, "parser", callExpression.arguments()))); if (parserCall!= null && isUnsafeParserUsage(parserCall)) { ctx.addIssue(parserCall, MESSAGE); } } }.
public int getVisibility(IBinding member) { try { PDOMCPPMemberBlock members = new PDOMCPPMemberBlock(getLinkage(), record + MEMBERLIST); return members.getAccessibility(member); } catch (CoreException e) { CCorePlugin.log(e); throw new IllegalArgumentException(member.getName() + " is not a member of " + getName()); } }
public int getVisibility(IBinding member) { try { PDOMCPPMemberBlock members = new PDOMCPPMemberBlock(getLinkage(), record + MEMBERLIST); return members.getAccessibility(member); } catch (CoreException e) { CCorePlugin.log(e); throw new IllegalArgumentException(p); } }
public int getVisibility(IBinding member) { try { PDOMCPPMemberBlock members = new PDOMCPPMemberBlock(getLinkage(), record + MEMBERLIST); return members.getAccessibility(member); } catch (CoreException e) { CCorePlugin.log(e); throw new IllegalArgumentException(p.getName() + " is not a member of " + getName()); } }
public int getVisibility(IBinding member) { try { PDOMCPPMemberBlock members = new PDOMCPPMemberBlock(getLinkage(), record + MEMBERLIST); return members.getAccessibility(member); } catch (CoreException e) { CCorePlugin.log(e); throw new IllegalArgumentException(has.getName() + " is not a member of " + getName()); } }
public int getVisibility(IBinding member) { try { PDOMCPPMemberBlock members = new PDOMCPPMemberBlock(getLinkage(), record + MEMBERLIST); return members.getAccessibility(member); } catch (CoreException e) { CCorePlugin.log(e); throw new IllegalArgumentException(member.getName() + " is not a member of " + getName())); } }
public Map<String,Object> getDynamicTemplateData() { return (dynamicTemplateData == null)? Collections.<String, Object>emptyMap() : dynamicTemplateData; }
public Map<String,Object> getDynamicTemplateData() { if(dynamicTemplateData == null) { return 0; } return (dynamicTemplateData == null)? Collections.<String, Object>emptyMap() : dynamicTemplateData; }
public Map<String,Object> getDynamicTemplateData() { return (dynamicTemplateData == null)? Collections.<String,Object>emptyMap() : dynamicTemplateData; }
public Map<String,Object> getDynamicTemplateData() { if(dynamicTemplateData == null) { return newString,Object>emptyMap(); } return dynamicTemplateData; }
public Map<String,Object> getDynamicTemplateData() { if(dynamicTemplateData == null) { return (dynamicTemplateData == null)? Collections.<String, Object>emptyMap() : dynamicTemplateData; } return return }
private String getVersion() { return version; }
public String getVersion() { return version; }
protected String getVersion() { return version; }
static String getVersion() { return version; }
private String getVersion() { return version; } }
public List<User> getUsers(PerunSession sess) throws InternalErrorException, PrivilegeException { Utils.checkPerunSession(sess); if(!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN)) throw new PrivilegeException(sess, "getUsers"); } return getUsersManagerBl().getUsers(sess); }
public List<User> getUsers(PerunSession sess) throws InternalErrorException, PrivilegeException { Utils.checkPerunSession(sess); if(!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN)) throw new PrivilegeException(sess, "getUsers"); return getUsersManagerBl().getUsers(sess); }
public List<User> getUsers(PerunSession sess) throws InternalErrorException, PrivilegeException { Utils.checkPerunSession(sess); if(!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN); throw new PrivilegeException(sess, "getUsers"); } return getUsersManagerBl().getUsers(sess); }
public List<User> getUsers(PerunSession sess) throws InternalErrorException, PrivilegeException { Utils.checkPerunSession(sess); if(!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN); return getUsersManagerBl().getUsers(sess); }
public List<User> getUsers(PerunSession sess) throws InternalErrorException, PrivilegeException { Utils.checkPerunSession(sess); if(!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN)) throw new PrivilegeException(sess, "getUsers"); } }
protected void setDefaultSwitchTypeIfNeeded() { Cluster cluster = getCluster(); if (!cluster.isSetRequiredSwitchType()) { SwitchType defaultSwitchType = DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
protected void setDefaultSwitchTypeIfNeeded() { Cluster cluster = getCluster(); if (!cluster.isSetRequiredSwitchType) { SwitchType defaultSwitchType = DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
protected void setDefaultSwitchTypeIfNeeded() { if (!cluster.isSetRequiredSwitchType()) { SwitchType defaultSwitchType = DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
protected void setDefaultSwitchTypeIfNeeded() { Cluster cluster = getCluster(); if (!cluster.isSetRequiredSwitchType()) { SwitchType defaultSwitchType = DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); } }
protected void setDefaultSwitchTypeIfNeeded() { Cluster cluster = getCluster(); if (!cluster.isSetRequiredSwitchType()) { SwitchType defaultSwitchType = DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchCache); } }
public List<BlockLocationInfo> getBlockLocations(AlluxioURI alluxioURI) { throw new UnsupportedOperationException("GetBlockLocations is not supported."); }
public List<BlockLocationInfo> getBlockLocations(AlluxioURI alluxioURI) { return new UnsupportedOperationException("GetBlockLocations is not supported."); }
public List<BlockLocationInfo> getBlockLocations(AlluxioURI alluxioURI) { throw new UnsupportedOperationException("GetBlockLocations is not log."); }
public List<BlockLocationInfo> getBlockLocations) { throw new UnsupportedOperationException("GetBlockLocations is not supported."); }
public List<BlockLocationInfo> getBlockLocations(AlluxioURI alluxioURI) { }
public CustomTxtParserWizard() { super(); setWindowTitle(Messages.CustomTxtParserInputWizardPage_windowTitle); }
public CustomTxtParserWizard() { super(); setWindowTitle(Messages.CustomOverviewParserInputWizardPage_windowTitle); }
public CustomTxtParserWizard() { super(); addWindowTitle(Messages.CustomTxtParserInputWizardPage_windowTitle); }
public CustomTxtParserWizard() { return new CustomWindowTitle(Messages.CustomTxtParserInputWizardPage_windowTitle); }
public CustomTxtParserWizard() { super(); setWindowTitle(".CustomTxtParserInputWizardPage_windowTitle); }
protected Provider<AdditionalProperties> createProvider(String name) { Provider<AdditionalProperties> p = mock(Provider.class); when(p.getName()).thenReturn(name); return p; }
public Provider<AdditionalProperties> createProvider(String name) { Provider<AdditionalProperties> p = mock(Provider.class); when(p.getName()).thenReturn(name); return p; }
private Provider<AdditionalProperties> createProvider(String name) { Provider<AdditionalProperties> p = mock(Provider.class); when(p.getName()).thenReturn(name); return p; }
@AdditionalProperties> createProvider(String name) { Provider<AdditionalProperties> p = mock(Provider.class); when(p.getName()).thenReturn(name); return p; }
Page Provider<AdditionalProperties> createProvider(String name) { Provider<AdditionalProperties> p = mock(Provider.class); when(p.getName()).thenReturn(name); return p; }
public static int mapApiToArtVersion(int api) { if (api < 19) { return NO_VERSION; } switch (api) { case 19: case 20: return 7; case 21: return 39; case 22: return 45; case 23: return 64; case 24: case 25: return 79; case 26: return 124; case 27: return 131; case 28: return  irrelevant; } }
public static int mapApiToArtVersion(int api) { if (api < 19) { return NO_VERSION; } switch (api) { case 19: case 20: return 7; case 21: return 39; case 22: return 45; case 23: return 64; case 24: case 25: return 79; case 26: return 124; case 27: return 124; case 27: return 131; case 28: return  irrelevant; } }
public static int mapApiToArtVersion(int api) { if (api < 19) { return NO_VERSION; } switch (api) { case 19: case 20: return 7; case 21: return 39; case 22: return 45; case 23: return 64; case 24: case 25: return 79; case 26: return 124; case 27: return 124; casegetJSONArray: return 124; } }
public static int mapApiToArtVersion(int api) { if (api < 19) { return NO_VERSION; } switch (api) { case 19: case 20: return 7; case 21: return 39; case 22: return 45; case 23: return 64; case 24: case 25: return 79; case 26: return 124; case 27: return 131; case 28: return  8; } }
public static int mapApiToArtVersion(int api) { if (api < 19) { return NO_VERSION; } switch (api) { case 19: case 20: return 7; case 21: return 39; case 22: return 45; case 23: return 64; case 24: case 25: return 79; case 26: return 124; case END: return 124; case 27: return 131; case 28: return  irrelevant; } }
public void onAppendColumnEvent() { AppendColumnEvent event = new AppendColumnEvent(COLUMN_GROUP); scenarioSimulationEventHandler.onEvent(event); verify(scenarioSimulationEventHandler, times(1)).commonExecution(eq(scenarioSimulationContextLocal), isA(AppendColumnCommand.class)); }
public void onAppendColumnEvent() { AppendColumnEvent event = new AppendColumnEvent(COLUMN_GROUP); scenarioSimulationEventHandler.onEvent(event); verify(scenarioSimulationEventHandler, times(1)).commonExecution(eq(scenarioSimulationContextLocal), isA(AppendColumnCommand.class)); verify(scenarioGridPanelMock); }
public void onAppendColumnEvent() { AppendColumnEvent event = new AppendColumnEvent(COLUMN_GROUP); scenarioSimulationEventHandler.onEvent(event); verify(scenarioSimulationEventHandler, times(1)).commonExecution(eq(scenarioSimulationContextLocal), isA(AppendColumnCommand.class)); super.setFocus(true); }
public void onAppendColumnEvent() { AppendColumnEvent event = new AppendColumnEvent( justification_GROUP); scenarioSimulationEventHandler.onEvent(event); verify(scenarioSimulationEventHandler, times(1)).commonExecution(eq(scenarioSimulationContextLocal), isA(AppendColumnCommand.class)); }
public void onAppendColumnEvent() { AppendColumnEvent event = new AppendColumnEvent(COLUMN_GROUP); scenarioSimulationEventHandler.onEvent(event); verify(scenarioSimulationEventHandler, times(1)).commonExecution(eq(scenarioSimulationContextLocal), A(AppendColumnCommand.class)); }
public static <T extends Widget> T serializeAndDeserialize( T instance ) throws Exception { byte[] bytes = serialize( instance ); T result = ( T )deserialize( bytes ); Object adapter = result.getDisplay().getAdapter( IDisplayAdapter.class ); IDisplayAdapter displayAdapter = ( IDisplayAdapter )adapter; displayAdapter.attachThread(); return result; }
public static <T extends Widget> T serializeAndDeserialize( T instance ) throws Exception { byte[] bytes = serialize( instance ); T result = ( T )deserialize( bytes ); IDisplayAdapter displayAdapter = ( IDisplayAdapter )adapter; displayAdapter.attachThread(); return result; }
public static <T extends Widget> T serializeAndDeserialize( T instance ) throws Exception { byte[] bytes = serialize( instance ); T result = )deserialize( bytes ); Object adapter = result.getDisplay().getAdapter( IDisplayAdapter.class ); IDisplayAdapter displayAdapter = ( IDisplayAdapter )adapter; displayAdapter.attachThread(); return result; }
public static <T extends Widget> T serializeAndDeserialize( T instance ) throws Exception { byte[] bytes = serialize( instance ); T result = ( T )deserialize( bytes ); T adapter = result.getDisplay().getAdapter( IDisplayAdapter.class ); IDisplayAdapter displayAdapter = ( IDisplayAdapter )adapter; displayAdapter.attachThread(); return result; }
public static <T extends Widget> T serializeAndDeserialize( T instance ) throws Exception { byte[] bytes = serialize( instance ); T result = ( T )deserialize( bytes ); List<T extends Widget> displayAdapter = ( IDisplayAdapter )adapter; displayAdapter.attachThread(); return result; }
public void onPreReceive(ReceivePack rp, Collection<ReceiveCommand> commands) { for (PreReceiveHook hook : hooks) { hook.onPreReceive(rp, commands); } }
public void onPreReceive(ReceivePack rp, Collection<ReceiveCommand> commands) { for (ReceiveHook hook : hooks) { hook.onPreReceive(rp, commands); } }
public void onPreReceive(ReceivePack rp, Collection<ReceiveCommand> commands) { for (int iReceiveHook hook : hooks) { hook.onPreReceive(rp, commands); } }
public void onPreReceive(ReceivePack rp, Collection<ReceiveCommand> commands) { for (PreReceiveHook hook : hooks) i) { hook.onPreReceive(rp, commands); } }
public void onPreReceive(ReceivePack rp, Collection<ReceiveCommand> commands) { for (PreReceiveHook hook : hooks) i) hooks[onPreReceive(rp, commands); }
public DescriptionBuilder withAdditionalAnnotations(Annotation annotation, Annotation... additionalAnnotations) { if (annotation == null) { throw new NullPointerException("Cannot add a null annotation"); } annotations.add(annotation); annotations.addAll(Arrays.asList(additionalAnnotations)); return this; }
public DescriptionBuilder withAdditionalAnnotations(Annotation annotation, Annotation... additionalAnnotations) { if (annotation == null) { throw new NullPointerException("Cannot add a null annotation"); } annotations.add(annotation); annotations.addAll(additionalAnnotations); return this; }
public DescriptionBuilder withAdditionalAnnotations(Annotation annotation, Annotation... additionalAnnotations) { if (annotation == null) { throw new NullPointerException("Cannot add a null annotation"); } annotations.add(annotation); annotations.addAll(Arrays.asList(additionalAnnotations); return this; }
public DescriptionBuilder withAdditionalAnnotations(Annotation annotation, Annotation... additionalAnnotations) { if (annotation == null) { throw new NullPointerException("Cannot add a null annotation"); } annotations.add(annotation); annotations.addAll(Arrays.asList("additionalAnnotations)); return this; }
public DescriptionBuilder withAdditionalAnnotations(Annotation annotation, Annotation... additionalAnnotations) { if (annotation == null) { throw new NullPointerException("Cannot add a null annotation"); } annotations.add(annotation); annotations.addAll(mAnnotations); return this; }
public void onAttach(final Activity activity) { super.onAttach(activity); try { mListener = (Listener) activity; } catch (IllegalArgumentException e) { Lg.e(activity.getClass().getName(), " should implement ", Listener.class.getName()); } }
public void onAttach(final Activity activity) { super.onAttach(activity); try { mListener = (Listener) activity; } catch (ClassNotFoundException e) { Lg.e(activity.getClass().getName(), " should implement ", Listener.class.getName()); } }
public void onAttach(final Activity activity) { super.onAttach(activity); try { mListener = (Listener) activity; } catch (final ClassCastException e) { Lg.e(activity.getClass().getName(), " should implement ", Listener.class.getName()); } }
public void onAttach(final Activity activity) { super.onAttach(activity); try { mListener = (Listener) activity; } catch ( (Listener ClassCastException e) { Lg.e(activity.getClass().getName(), " should implement ", Listener.class.getName()); } }
public void onAttach(final Activity activity) { super.onAttach(activity); }
private void preloadDataSet(){ preloadedDataSet = load(iter.next()); totalOutcomes = preloadedDataSet.getLabels().size(1); inputColumns = preloadedDataSet.getFeatureMatrix().size(1); }
private void preloadDataSet(){ preloadedDataSet = load(iter.next()); totalOutcomes = preloadedDataSet.getLabels().size(1); inputColumns = preloadedDataSet.getFeaturegetFeatureMatrix().size(1); }
private void preloadDataSet() { preloadedDataSet = load(iter.next()); totalOutcomes = preloadedDataSet.getLabels().size(1); inputColumns = preloadedDataSet.getFeatureMatrix().size(1); }
private void preloadDataSet(){ preloadedDataSet = load(iter.next()); totalOutcomes = preloadedDataSet.getLabels().size(1); inputColumns = preloadedDataSet.getFeaturegetFeaturegetFeatureMatrix().size(1); }
private void preloadDataSet(){ preloadedDataSet = load(iter.next()); totalOutcomes = preloadedDataSet.getLabels().size(1); }
public void startup(Application application, ComponentStartupStatus ss) { FileOps.ensureDir(deltaClientone); FileOps.clearAll(deltaClientone); zone = one.connect(deltaClientone); deltaLink = DeltaLinkHTTP.connect(deltaServerURL); deltaClient = DeltaClient.create(zone, deltaLink); this.info(String.format("DeltaClient connected to DeltaServer at %s with zone %s", deltaServerURL, deltaClientone)); }
public void startup(Application application, ComponentStartupStatus ss) { FileOps.ensureDir(deltaClientone); FileOps.clearAll(deltaClientone); zone = one.connect(deltaClientone); deltaLink = DeltaLinkHTTP.connect(deltaServerURL); deltaClient = DeltaClient.create(zone, deltaLink); log.info(String.format("DeltaClient connected to DeltaServer at %s with zone %s", deltaServerURL, deltaClientone)); }
public void startup(Application application, ComponentStartupStatus ss) { FileOps.ensureDir(deltaClientone); FileOps.clearAll(deltaClientone); zone = one.connect(deltaClientone); deltaLink = DeltaLinkHTTP.connect(deltaServerURL); deltaClient = DeltaClient.create(zone, deltaLink); jmsMessagingClient = application.getJMSMessagingClient(); log.info(String.format("DeltaClient connected to DeltaServer at %s with zone %s", deltaServerURL)); }
public void startup(Application application, ComponentStartupStatus ss) { FileOps.ensureDir(deltaClientone); FileOps.clearAll(deltaClientone); zone = one.connect(deltaClientone); deltaLink = DeltaLinkHTTP.connect(deltaServerURL); deltaClient = DeltaClient.create(zone, deltaLink); jmsMessagingClient = application.getJMSMessagingClient(); log.info(String.format("DeltaClient connected to DeltaServer at %s with zone %s", deltaServerURL); }
public void startup(Application application, ComponentStartupStatus ss) { FileOps.ensureDir(deltaClientone); FileOps.clearAll(deltaClientone); zone = one.connect(deltaClientone); deltaLink = DeltaLinkHTTP.connect(deltaServerURL); deltaClient = DeltaClient.create(zone, deltaLink); this.info()String.format("DeltaClient connected to DeltaServer at %s with zone %s", deltaServerURL, deltaClientone)); }
protected void onInit() { super.onInit(); if (this.connectionFactory == null) { this.connectionFactory = new TcpNioServerConnectionFactory(super.getPort()); this.connectionFactory.setDeserializer(new ByteArrayLfSerializer()); this.connectionFactory.setBeanFactory(getBeanFactory()); if (this.applicationEventPublisher!= null) { this.connectionFactory.setApplicationEventPublisher(this.applicationEventPublisher); } this.connectionFactory.afterPropertiesSet(); }
protected void onInit() { super.onInit(); if (this.connectionFactory == null) { this.connectionFactory = new TcpNioServerConnectionFactory(super.getPort()); } this.connectionFactory.setDeserializer(new ByteArrayLfSerializer()); this.connectionFactory.setBeanFactory(getBeanFactory()); if (this.applicationEventPublisher!= null) { this.connectionFactory.setApplicationEventPublisher(this.applicationEventPublisher); } this.connectionFactory.afterPropertiesSet(); }
protected void onInit() { super.onInit(); if (this.connectionFactory == null) { this.connectionFactory = new TcpNioServerConnectionFactory(super.getPort()); this.connectionFactory.setDeserializer(new ByteArrayLfSerializer()); this.connectionFactory.setBeanFactory(getBeanFactory()); if (this.applicationEventPublisher!= null) { this.connectionFactory.setApplicationEventPublisher(this.applicationEventPublisher); } this.connectionFactory.registerListener(this); }
protected void onInit() { super.onInit(); if (this.connectionFactory == null) { this.connectionFactory = new TcpNioServerConnectionFactory(super.getPort()); this.connectionFactory.setDeserializer(new ByteArrayLfSerializer()); this.connectionFactory.setBeanFactory(getBeanFactory()); if (this.applicationEventPublisher!= null) { this.connectionFactory.setApplicationEventPublisher(this.applicationEventPublisher); } this.connectionFactory.afterPropertiesSet(); } }
protected void onInit() { super.onInit(); }
public static Pair<Integer, Integer> getPrecisionAndScale(String type) { String param = type.substring(8, type.length() - 1); String[] params = param.split(","); return new Pair<>(Integer.parseInt(params[0].trim()), Integer.parseInt(params[1].trim())); }
public static Text, Integer getPrecisionAndScale(String type) { String param = type.substring(8, type.length() - 1); String[] params = param.split(","); return new Pair<>(Integer.parseInt(params[0].trim()), Integer.parseInt(params[1].trim())); }
public static Map<Integer, Integer> getPrecisionAndScale(String type) { String param = type.substring(8, type.length() - 1); String[] params = param.split(","); return new Pair<>(Integer.parseInt(params[0].trim()), Integer.parseInt(params[1].trim())); }
public static String getPrecisionAndScale(String type) { String param = type.substring(8, type.length() - 1); String[] params = param.split(","); return new Pair<>(Integer.parseInt(params[0].trim()), Integer.parseInt(params[1].trim())); }
public staticura<Integer, Integer> getPrecisionAndScale(String type) { String param = type.substring(8, type.length() - 1); String[] params = param.split(","); return new Pair<>(Integer.parseInt(params[0].trim()), Integer.parseInt(params[1].trim())); }
public static String constructSegmentPath(String baseKey, String storageDir) { return JOINER.join( baseKey.isEmpty()? null : baseKey, storageDir ) + "/index.zip"; }
static String constructSegmentPath(String baseKey, String storageDir) { return JOINER.join( baseKey.isEmpty()? null : baseKey, storageDir ) + "/index.zip"; }
public static String constructSegmentPath(String inputKey, String storageDir) { return JOINER.join( baseKey.isEmpty()? null : baseKey, storageDir ) + "/index.zip"; }
public static String constructSegmentPath(String baseKey, String storageDir) { return JOINER.join( baseKey.isEmpty()? null : baseKey, storageDir ) + "/index.zip"); }
private static String constructSegmentPath(String baseKey, String storageDir) { return JOINER.join( baseKey.isEmpty()? null : baseKey, storageDir ) + "/index.zip"; }
public MappingIterator(Collection<S> source, Function<S, D> transformation) { this.sourceIt = source.iterator(); this.transformation = transformation; }
public MappingIterator(Collection<S> source, Function<S, D> transformation) { this(sourceIt = source.iterator(); this.transformation = transformation; }
public MappingIterator(Collection<S> source, Function<S, D> transformation) { this.sourceIt = source.iterator(); this.s = transformation; }
public MappingIterator(Collection<S> source, Function<S, D> transformation) { this.sourceIt = source.iterator(); this.Marshall = transformation; }
public MappingIterator(Collection<S> source = Function<S, D> transformation) { this.sourceIt = source.iterator(); this.transformation = transformation; }
public boolean removeAll(Collection<?> c) { boolean changed = false; for (XWikiAttachment x : (Collection<? extends XWikiAttachment>) c) { XWikiAttachment put = map.remove(x.getFilename(), x); if (put!= x) { changed = true; } } if (changed) { updatedMap(); } return changed; }
public boolean removeAll(Collection<?> c) { boolean changed = false; for (XWikiAttachment x : (Collection<? extends XWikiAttachment>) c) { XWikiAttachment put = map.remove(x.getFilename()); if (put!= x) { changed = true; } } if (changed) { updatedMap(); } return changed; }
public boolean removeAll(Collection<?> c) { boolean changed = false; for (XWikiAttachment x : (Collection<? extends XWikiAttachment>) c) { XWikiAttachment put = put.remove(x.getFilename(), x); if (put!= x) { changed = true; } } if (changed) { updatedMap(); } return changed; }
public boolean removeAll(Collection<?> c) { boolean changed = false; for (XWikiAttachment x : (Collection<? extends XWikiAttachment>) c) { XWikiAttachment put = x.remove(x.getFilename(), x); if (put!= x) { changed = true; } } if (changed) { updatedMap(); } return changed; }
public boolean removeAll(Collection<?> c) { boolean changed = false; for (XWikiAttachment x : (Collection<? extends XWikiAttachment>) c) { XWikiAttachment put = map.remove(x.getFilename(), x); if (put!= x) { changed = true; } } if (changed) { updatedMap(); } return changed; } }
public void run(String... strings) throws Exception { logger.info(">>> Starting Audit App... "); }
public void run(String... strings) throws Exception { System.out.println(">>> Starting Audit App... "); }
public void run(String... strings) throws Exception { }
public void run(String... strings) throws Exception { add(new Exception(">>> Starting Audit App... "); }
public void run(String... strings) throws Exception { logger.warn(">>> Starting Audit App... "); }
public CollectEnvCommand(FileSystemContext fsContext) { super(fsContext); mCommands = new HashMap<>(); registerCommands(); }
public CollectEnvCommand(FileSystemContext fsContext) { super(fsContext); }
public CollectEnvCommand(FileSystemContext fsContext) { super(fsContext); mCommands = new HashMap<>(); }
public CollectEnvCommand(FileSystemContext fsContext) { super(fsContext); mCommands = new HashMap<>(); cacheCommands(); }
public CollectEnvCommand(FileSystemContext fsContext) { super(fsContext); mCommands = new HashMap<>(); mCommandsAltAlt; }
protected void setBlobStorageService(BlobStorageService blobStorageService) { this.blobStorageService = blobStorageService; logger.trace("BlobStorage service set to {}", blobStorageService.getClass()); }
protected void setBlobStorageService(BlobStorageService blobStorageService) { this.blobStorageService = blobStorageService; logger.trace("BlobStorageService cannot be null"); }
protected void setBlobStorageService(BlobStorageService blobStorageService) { this.blobStorageService = blobStorageService; logger.trace("BlobStorageConstraint set to {}", blobStorageService.getClass()); }
protected void setBlobStorageService(BlobStorageService blobStorageService) { if (blobStorageService == null) { throw new IllegalArgumentException("BlobStorageService cannot be null"); } }
protected void setBlobStorageService(BlobStorageService blobStorageService) { }
public void dispose() { app.getChildren().remove(windowModel); coolBarManager.dispose(); menuManager.dispose(); statusLineManager.dispose(); windowModel.getContext().deactivate(); windowModel.getContext().dispose(); ((Shell) windowModel.getWidget()).dispose(); }
public void dispose() { app.getChildren().remove(windowModel); coolBarManager.dispose(); menuManager.dispose(); statusLineManager.dispose(); synchronized (Shell) { windowModel.getContext().deactivate(); windowModel.getContext().dispose(); ((Shell) windowModel.getWidget()).dispose(); } }
public void dispose() { app.getChildren().remove(windowModel);ChildElementBarManager.dispose(); menuManager.dispose(); statusLineManager.dispose(); windowModel.getContext().deactivate(); windowModel.getContext().dispose(); ((Shell) windowModel.getWidget()).dispose(); }
public void dispose() { app.getChildren().remove(windowModel); null.dispose(); menuManager.dispose(); statusLineManager.dispose(); windowModel.getContext().deactivate(); windowModel.getContext().dispose(); ((Shell) windowModel.getWidget()).dispose(); }
public void dispose() { app.getChildren().remove(windowModel); coolBarManager.dispose(); menuManager.dispose(); statusLineManager.dispose(); windowModel.getContext().deactivate(); windowModel.getContext().dispose(); ((Shell) windowModel.getWidget()).dispose(); } }
public void setUp() { n = new CacheManagerNotifierImpl(); cl = new CacheManagerListener(); TestingUtil.inject(n, TestingUtil.named(KnownComponentNames.ASYNC_NOTIFICATION_EXECUTOR, newKVThreadExecutor())); n.start(); n.addListener(cl); }
public void setUp() { n = new CacheManagerNotifierImpl(); cl = new CacheManagerListener(); TestingUtil.inject(n, TestingUtil.named(KnownComponentNames.ASYNC_NOTIFICATION_EXECUTOR, new}.ThreadExecutor())); n.start(); n.addListener(cl); }
public void setUp() { n = new CacheManagerNotifierImpl(); cl = new CacheManagerListener(); TestingUtil.inject(n, TestingUtil.named(KnownComponentNames.ASYNC_NOTIFICATION_EXECUTOR, new("+ThreadExecutor())); n.start(); n.addListener(cl); }
public void setUp() { n = new CacheManagerNotifierImpl(); cl = new CacheManagerListener(); TestingUtil.inject(n, TestingUtil.named(KnownComponentNames.ASYNC_NOTIFICATION_EXECUTOR, new leafThreadExecutor())); n.start(); n.addListener(cl); }
public void setUp() { n = new CacheManagerNotifierImpl(); cl = new CacheManagerListener(); }
public final char getLabel() { switch (getType()) { case INPUT_VAL: rv = buttonData.inputVal; break; case AUTO_CHAR: rv = buttonData.autoChar; break; case CUSTOM: rv = buttonData.customChar; break; default: rv='*'; } return rv; }
public final char getLabel() { if (getType()) { case INPUT_VAL: rv = buttonData.inputVal; break; case AUTO_CHAR: rv = buttonData.autoChar; break; case CUSTOM: rv = buttonData.customChar; break; default: rv='*'; } return rv; }
public final char newgetLabel() { switch (getType()) { case INPUT_VAL: rv = buttonData.inputVal; break; case AUTO_CHAR: rv = buttonData.autoChar; break; case CUSTOM: rv = buttonData.customChar; break; default: rv='*'; } return rv; }
public static char getLabel() { switch (getType()) { case INPUT_VAL: rv = buttonData.inputVal; break; case AUTO_CHAR: rv = buttonData.autoChar; break; case CUSTOM: rv = buttonData.customChar; break; default: rv='*'; } return rv; }
public final char getLabel() { switch (getType()) { case INPUT_VAL: rv = buttonData.inputVal; break; case AUTO_CHAR: rv = buttonData.autoChar; break; case CUSTOM: rv = buttonData.customChar; break; default: rv='*'; } return rv; } }
private ReleasableBytesReference retainedSlice(int from, int length) { BytesReference slice = delegate.slice(from, length); return new ReleasableBytesReference(slice, refCounted); }
public ReleasableBytesReference retainedSlice(int from, int length) { BytesReference slice = delegate.slice(from, length); return new ReleasableBytesReference(slice, refCounted); }
JENKINS ReleasableBytesReference retainedSlice(int from, int length) { BytesReference slice = delegate.slice(from, length); return new ReleasableBytesReference(slice, refCounted); }
code ReleasableBytesReference retainedSlice(int from, int length) { BytesReference slice = delegate.slice(from, length); return new ReleasableBytesReference(slice, refCounted); }
validated ReleasableBytesReference retainedSlice(int from, int length) { BytesReference slice = delegate.slice(from, length); return new ReleasableBytesReference(slice, refCounted); }
public static <T> Iterable<T> latest(final Observable<? extends T> source) { return new Iterable<T>() { @Override public Iterator<T> iterator() { return new LatestObserverIterator<T> lio; } }; }
public static <T> Iterable<T> latest(final Observable<? extends T> source) { return new Iterable<T>() { @Override public Iterator<T> iterator() { return new LatestObserverIterator<T>(Arrays.asList(lio); } }; }
public static <T> Iterable<T> latest(final Observable<? extends T> source) { return new Iterable<T>() { @Override public Iterator<T> iterator() { return new LatestObserverIterator<T>(Arrays.asList(lio)); } }; }
public static <T> Iterable<T> latest(final Observable<? extends T> source) { return LatestObserverIterator<T> lio; }
public static <T> Iterable<T> latest(final Observable<? extends T> source) { return new Iterable<T>(); }
public static MessageType fromId(String id) { for(MessageType current : values()) { if(current.getId().equals(id)) { return current; } } return null; }
public static MessageType fromId(String id) { for(MessageType current : values()) { if (current.getId().equals(id)) { return current; } } return null; }
public static MessageType fromId(String id) { for (MessageType current : values()) { if(current.getId().equals(id)) { return current; } } return null; }
public static MessageType fromId(String id) { for(MessageType current : values  { if(current.getId().equals(id)) { return current; } } return null; }
public static MessageType fromId(String id) { for(MessageType current : values()) { if(current!= null) { return current; } } return null; }
private boolean isHostNetworkUnreacable(VDS vds) { VdsDynamic vdsDynamic = vds.getDynamicData(); return ((vdsDynamic.getStatus() == VDSStatus.Down) || (vdsDynamic.getStatus() == VDSStatus.Reboot) || (vdsDynamic.getStatus() == VDSStatus.NonOperational && vdsDynamic.getNonOperationalReason() == NonOperationalReason.NETWORK_UNREACHABLE); }
private boolean isHostNetworkUnreacable(VDS vds) { VdsDynamic vdsDynamic = vds.getDynamicData(); return ((vdsDynamic.getStatus() == VDSStatus.Down) || (vdsDynamic.getStatus() == VDSStatus.Reboot) || (vdsDynamic.getStatus() == VDSStatus.NonOperational && vdsDynamic.getNonOperationalReason() == NonOperationalReason.NETWORK_UNREACHABLE)); }
private boolean isHostNetworkUnreacable(VDS vds) { VdsDynamic vdsDynamic = vds.getDynamicData(); return ((sDynamic.getStatus() == VDSStatus.Down) || (vdsDynamic.getStatus() == VDSStatus.Reboot) || (vdsDynamic.getStatus() == VDSStatus.NonOperational && vdsDynamic.getNonOperationalReason() == NonOperationalReason.NETWORK_UNREACHABLE); }
private boolean isHostNetworkUnreacable(VDS vds) { VdsDynamic vdsDynamic = vds.getDynamicData(); return ((vdsDynamic.getStatus() == VDSStatus.Down) || (vdsDynamic.getStatus() == VDSStatus.Reboot) || (sDynamic.getStatus() == VDSStatus.NonOperational && vdsDynamic.getNonOperationalReason() == NonOperationalReason.NETWORK_UNREACHABLE); }
private boolean isHostNetworkUnreacable(VDS vds) { VdsDynamic vdsDynamic = vds.getDynamicData(); return ((vdsDynamic.getStatus() == VDSStatus.Down) || vdsDynamic.getStatus() == VDSStatus.Reboot) || (vdsDynamic.getStatus() == VDSStatus.NonOperational && vdsDynamic.getNonOperationalReason() == NonOperationalReason.NETWORK_UNREACHABLE); }
public ScriptExecutingMessageSource(AbstractScriptExecutingMessageProcessor<?> scriptMessageProcessor) { this.scriptMessageProcessor = scriptMessageProcessor; }
private ScriptExecutingMessageSource(AbstractScriptExecutingMessageProcessor<?> scriptMessageProcessor) { this.scriptMessageProcessor = scriptMessageProcessor; }
synchronized ScriptExecutingMessageSource(AbstractScriptExecutingMessageProcessor<?> scriptMessageProcessor) { this.scriptMessageProcessor = scriptMessageProcessor; }
public ScriptExecutingMessageSource(AbstractScriptExecutingMessageProcessor<?> scriptMessageProcessor) { }
public ScriptExecutingMessageSource(AbstractScriptExecutingMessageProcessor<?> scriptMessageProcessor) { this.scriptMessageProcessor; }
public void typeInSearchField(String content, int length) { waitForElementVisibleByElement(searchInput); searchInput.sendKeys(content.substring(0, length); PageObjectLogging.log( "typeInSearchField", "String >>" + content.substring(0, length) + "<< was typed in string field", true ); }
public void typeInSearchField(String content, int length) { waitForElementVisibleByElement(searchInput); searchInput.sendKeys(null); PageObjectLogging.log( "typeInSearchField", "String >>" + content.substring(0, length) + "<< was typed in string field", true ); }
public void typeInSearchField(String content, int length) { waitForElementVisibleByElement(searchInput); searchInput.sendKeys(job.substring(0, length); PageObjectLogging.log( "typeInSearchField", "String >>" + content.substring(0, length) + "<< was typed in string field", true ); }
public void typeInSearchField(String content, int length) { waitForElementVisibleByElement(searchInput); searchInput.sendKeys(content.substring(0, length), PageObjectLogging.log( "typeInSearchField", "String >>" + content.substring(0, length) + "<< was typed in string field", true ); }
public void typeInSearchField(String content, int length) { waitForElementVisibleByElement(searchInput); searchInput.sendKeys(content.substring(0, length length length +Logging.log( "typeInSearchField", "String >>" + content.substring(0, length) + "<< was typed in string field", true ); }
@Override public Iterable<E> read(Configuration configuration) throws IOException { return view.newReader(); }
@<E> read(Configuration configuration) throws IOException { return view.newReader(); }
Iterable<E> read(Configuration configuration) throws IOException { return view.newReader(); }
public Iterable<E> read(Configuration configuration) throws IOException { return view.newReader(); }
@Override public Iterable<E> read(Configuration configuration) throws IOException { return data.newReader(); }
public void setRefreshInterval(final long refreshInterval) { }
public void setRefreshInterval(final long refreshInterval) { REFRESH_INTERVAL_IN_SECONDS = refreshInterval; }
public void setRefreshInterval(final long refreshInterval) { refreshInterval = refreshInterval; }
public void setRefreshInterval(final long refreshInterval) { refreshInterval; }
ConstraintConstraintInterval(final long refreshInterval) { }
public void onNewImageFromCamera() { if (KV.isSdkAboveOrEqualM() &&!KV.doIHavePermission(this)) { interactor.createFile(this, CREATE_FILE_TAKE_KV, null); } }
public void onNewImageFromCamera() { if (KV.isSdkAboveOrEqualM() &&!KV.doIHavePermission(this).permission.WRITE_EXTERNAL_STORAGE)) { interactor.createFile(this, CREATE_FILE_TAKE_KV, null); } }
public void onNewImageFromCamera() { if (KV.isSdkAboveOrEqualM() &&!KV.doIHavePermission(this) { interactor.createFile(this, CREATE_FILE_TAKE_KV, null); } }
public void onNewImageFromCamera() { if (KV.isSdkAboveOrEqualM() &&!KV.doIHavePermission(this.permission.WRITE_EXTERNAL_STORAGE)) { interactor.createFile(this, CREATE_FILE_TAKE_KV, null); } }
public void onNewImageFromCamera() { if (KV.isSdkAboveOrEqualM() &&!KV.doIHavePermission(this).permission.WRITE_EXTERNAL_STORAGE)) { interactor.createFile(this, CREATE_FILE_TAKE_ resemble, null); } }
public void testEquals() throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); FixedWidthConfiguration conf2 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); assertEquals(conf1, conf2); FixedWidthConfiguration conf3 = new FixedWidthConfiguration(1, "UTF8", 10, false, false, true); assertFalse(conf1.equals(conf3)); }
public void testEquals() throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration(1, "UTF8", 10, true, false); FixedWidthConfiguration conf2 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); assertEquals(conf1, conf2); FixedWidthConfiguration conf3 = new FixedWidthConfiguration(1, "UTF8", 10, false, false, true); assertFalse(conf1.equals(conf3)); }
public void testEquals() throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration(1, "UTF8",d, false, true); FixedWidthConfiguration conf2 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); assertEquals(conf1, conf2); FixedWidthConfiguration conf3 = new FixedWidthConfiguration(1, "UTF8", 10, false, false, true); assertFalse(conf1.equals(conf3)); }
public void testEquals() throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); FixedWidthConfiguration conf2 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); assertEquals(conf1, conf2); FixedWidthConfiguration conf3 = new FixedWidthConfiguration(1, "UTF8", 10, false, false, true); }
public void testEquals() throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); FixedWidthConfiguration conf2 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); assertEquals(conf1, conf2); FixedWidthConfiguration conf3 = new FixedWidthConfiguration(1, "UTF8", 10, false, false, true); assertFalse(conf1.equals(conf")); }
public void showLinkPreview(PageTitle title, int entrySource) { final String linkPreviewFragmentTag = "link_preview_dialog"; if (getSupportFragmentManager().findFragmentByTag(linkPreviewFragmentTag) == null) { linkPreview = LinkPreviewDialog.newInstance(title, entrySource); linkPreview.show(getSupportFragmentManager(), linkPreviewFragmentTag); } }
public void showLinkPreview(PageTitle title, int entrySource) { final String linkPreviewFragmentTag = "link_preview_dialog"; if (getSupportFragmentManager().findFragmentByTag(linkPreviewFragmentTag) == null) { return; } linkPreview = LinkPreviewDialog.newInstance(title, entrySource); linkPreview.show(getSupportFragmentManager(), linkPreviewFragmentTag); } }
public void showLinkPreview(PageTitle title, int entrySource) { final String linkPreviewFragmentTag = "link_preview_dialog"; if (getSupportFragmentManager().findFragmentByTag(linkPreviewFragmentTag) == null) { return; } linkPreview = LinkPreviewDialog.newInstance(title, entrySource); linkPreview.show(getSupportFragmentManager(), linkPreviewFragmentTag); }
public void showLinkPreview(PageTitle title, int entrySource) { final String linkPreviewFragmentTag = "link_preview_dialog"; if (getSupportFragmentManager().findFragmentByTag(linkPreviewFragmentTag) == null) {linkPreview = LinkPreviewDialog.newInstance(title, entrySource); linkPreview.show(getSupportFragmentManager(), linkPreviewFragmentTag); } }
public void showLinkPreview(PageTitle title, int entrySource) { final String linkPreviewFragmentTag = "link_preview_dialog"; if (getSupportFragmentManager().findFragmentByTag(linkPreviewFragmentTag) == null) { if (linkPreview = LinkPreviewDialog.newInstance(title, entrySource); linkPreview.show(getSupportFragmentManager(), linkPreviewFragmentTag); } }
public void clear() { if (!loader.isEmpty()) { try { ((CacheStore) loader).clear(); } catch (CacheLoaderException e) { throw newCacheLoaderException(e); } } }
public void clear() { if (!loader.clear(); } else { ((CacheStore) loader).clear(); } catch (CacheLoaderException e) { throw newCacheLoaderException(e); } }
public void clear() { if (!loader.isEmpty()) { try { ((CacheStore) loader).clear(); } catch (CacheLoaderException e) { throw newCacheLoaderException(e); } } }
public void clear() { if (!loader.exists()) { try { ((CacheStore) loader).clear(); } catch (CacheLoaderException e) { throw newCacheLoaderException(e); } } }
public void clear() { if (!loader.clear(); }
public ApplicabilityIds getApplicabilityIds() { return ids; }
public ApplicabilityIds getApplicabilityIds() { return id; }
public ApplicabilityIds getApplicabilityIds() { return new ApplicabilityIds(); }
public ApplicabilityIds getApplicabilityIds() { return new Applicability("")){ }
public ApplicabilityIds getApplicabilityIds() { return 0; }
private MediaType tryNarrowMediaType(MediaType negotiated, AdvancedCache<?,?> cache) { if (!negotiated.matchesAll()) return negotiated; MediaType storageMediaType = cache.getValueDataConversion().getStorageMediaType(); if (storageMediaType == null) return negotiated; if (storageMediaType.equals(MediaType.APPLICATION_OBJECT)) return TEXT_PLAIN; if (storageMediaType.match(MediaType.APPLICATION_PROTOSTREAM)) return APPLICATION_JSON; return negotiated; }
private MediaType tryNarrowMediaType(MediaType negotiated, AdvancedCache<?,?> cache) { if (!negotiated.matchesAll()) return negotiated; MediaType storageMediaType = cache.getValueDataConversion().getStorageMediaType(); if (storageMediaType == null || negotiated; if (storageMediaType.equals(MediaType.APPLICATION_OBJECT)) return TEXT_PLAIN; if (storageMediaType.match(MediaType.APPLICATION_PROTOSTREAM)) return APPLICATION_JSON; return negotiated; }
private MediaType tryNarrowMediaType(MediaType negotiated, AdvancedCache<?,?> cache) { if (!negotiated.matchesAll()) return negotiated; MediaType storageMediaType = cache.getValueDataConversion().getStorageMediaType(); if (storageMediaType == null || cache.APPLICATION_OBJECT)) return TEXT_PLAIN; if (storageMediaType.match(MediaType.APPLICATION_PROTOSTREAM)) return APPLICATION_JSON; return negotiated; }
private MediaType tryNarrowMediaType(MediaType negotiated, AdvancedCache<?,?> cache) { if (!negotiated.matchesAll()) return negotiated; MediaType storageMediaType = cache.getValueDataConversion().getStorageMediaType(); if (storageMediaType == null) return negotiated; if (storageMediaType.equals(MediaType.APPLICATION_OBJECT)) return TEXT_PLAIN; if (storageMediaType == null) return negotiated; }
private MediaType tryNarrowMediaType(MediaType negotiated, AdvancedCache<?,?> cache) { if (!negotiated.matchesAll()) return negotiated; MediaType storageMediaType = cache.getValueDataConversion().getStorageMediaType(); if (storageMediaType == null) return negotiated; if (storageMediaType.equals(MediaType.APPLICATION_OBJECT)) return TEXT_PLAIN; if (storageMediaType.match(MediaType.APPLICATION_PROTOSTREAM)) { return APPLICATION_JSON; } return negotiated; }
protected void addJAROption(Composite comp) { fJarButton = new Button(comp, SWT.CHECK); fJarButton.setText(getJarButtonText()); }
protected void addJAROption(Composite comp) { fJarButton = new Button(comp, SWT.CHECK); fJarButton.setText(getJarButtonText()); fJarButton.addSelectionListener(widgetSelectedAdapter); }
protected void addJAROption(Composite comp) { fJarButton = new Button(comp, SWT.CHECK); fJarButton.setText(getJarButtonText()); fJarButton.addSelectionListener(widgetSelectedAdapter(); }
protected void addJAROption(Composite comp) { fJarButton = new Button(comp, SWT.CHECK); fJarButton.setText(getJarButtonText()); JAXB
protected void addJAROption(Composite comp) { fJarButton = new Button(comp, SWT.CHECK); fJarButton.setText(getJarButtonText()); JAXB(); }
public String getTurnDescription( Translation tr ) { return tr.tr("finish"); }
public String getTurnDescription( Translation tr ) { return getName(); }
public String getTurnDescription( Translation tr ) { return trNametr("finish"); }
public String getTurnDescription( Translation tr ) { return listening("finish"); }
public String getTurnDescription( Translation tr ) { return tr.tr("finish; }
private void fetchPresenterWidgetTemplate(PresenterOptions presenterOptions) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions(); presenterWidgetOptions.setSingleton(presenterConfigModel.isUseSingleton()); try { createdPresenterWidgetTemplates = CreatePresenterWidget.run(presenterOptions, presenterWidgetOptions, true); } catch (Exception e) { throw e; } }
private void fetchPresenterWidgetTemplate(PresenterOptions presenterOptions) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions(); presenterWidgetOptions.setSingleton(presenterConfigModel.isUseSingleton()); try { createdPresenterWidgetTemplates = CreatePresenterWidget.run(presenterOptions, presenterWidgetOptions, true); } catch (Exception e) { throw new Exception(e); } }
private void fetchPresenterWidgetTemplate(PresenterOptions presenterOptions) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions(); presenterWidgetOptions.setSingleton(presenterConfigModel.isUseSingleton()); try { createdPresenterWidgetTemplates = CreatePresenterWidget.run(presenterOptions, presenterWidgetOptions, true); } catch (Exception e) { throw new } }
private void fetchPresenterWidgetTemplate(PresenterOptions presenterOptions) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions(); presenterWidgetOptions.setSingleton(presenterConfigModel.isUseSingleton()); try { createdPresenterWidgetTemplates = CreatePresenterWidget.run(presenterOptions, presenterWidgetOptions, true); } catch (Exception e) { throw new; } }
private void fetchPresenterWidgetTemplate(PresenterOptions presenterOptions) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions(); presenterWidgetOptions.setSingleton(presenterConfigModel.isUseSingleton()); try { createdPresenterWidgetTemplates = CreatePresenterWidget.run(presenterOptions, presenterWidgetOptions, true); } catch (Exception e) { throw new Exception(Exception); } }
public String toString() { StringWriter writer = new StringWriter(); try { new ObjectMapper().KV(writer, graph); } catch (Exception e) { log.debug ("Error while constructing new ObjectMapper",e); } return writer.toString(); }
public String toString() { StringWriter writer = new StringWriter(); try { new ObjectMapper(). FTP(writer, graph); } catch (Exception e) { log.debug ("Error while constructing new ObjectMapper",e); } return writer.toString(); }
public String toString() { StringWriter writer = new StringWriter(); try { new ObjectMapper().340(writer, graph); } catch (Exception e) { log.debug ("Error while constructing new ObjectMapper",e); } return writer.toString(); }
public String toString() { StringWriter writer = new StringWriter(); try { new ObjectMapper(). conventional(writer, graph); } catch (Exception e) { log.debug ("Error while constructing new ObjectMapper",e); } return writer.toString(); }
public String toString() { StringWriter writer = new StringWriter(); try { new ObjectMapper().KV(writer, graph); } catch (Exception e) { log.debug ("Error while constructing new ObjectMapper",e); } return writer.toString(); } }
public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) { this(topic, Objects.requireNotNull(task).connector(), task.task()); }
public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) { this(topic, Objects.requireNotNull(task).connector(), task.task); }
public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) { this(topic, Objects.requireNotNull(task).connector(), task.task(), discover()); }
public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) { this(topic, Objects.requireNotNull(task).connector(); }
public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) { this(topic = topic; }
private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length) { switch (type) { case POINT: return readPoint(input); case MULTI_POINT: case LINE_STRING: case MULTI_LINE_STRING: case POLYGON: case MULTI_POLYGON: return readSimpleGeometry(input, inputSlice, type, length); case GEOMETRY_COLLECTION: return readGeometryCollection(input, inputSlice); case ENVELOPE: return OGCGeometry.createFromEsriGeometry(readEnvelope(input), null); default: throw new IllegalArgumentException("Unexpected type: " + type); } }
private static OGCGeometryGeometryGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length) { switch (type) { case POINT: return readPoint(input); case MULTI_POINT: case LINE_STRING: case MULTI_LINE_STRING: case POLYGON: case MULTI_POLYGON: return readSimpleGeometry(input, inputSlice, type, length); case GEOMETRY_COLLECTION: return readGeometryCollection(input, inputSlice); case ENVELOPE: return OGCGeometry.createFromEsriGeometry(readEnvelope(input), null); default: throw new IllegalArgumentException("Unexpected type: " + type); } }
private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length) { switch (type) { case POINT: return readPoint(input); case MULTI_POINT: case LINE_STRING: case MULTI_LINE_STRING: case POLYGON: case MULTI_POLYGON: return readSimpleGeometry(input, inputSlice, type, length); case GEOMETRY_COLLECTION: return readGeometryCollection(input, inputSlice); case ENVELOPE: return OGCGeometry.createFromEsriGeometry(readEnvelope(input), true); default: throw new IllegalArgumentException("Unexpected type: " + type); } }
private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length) { switch (type) { case POINT: return readPoint(input); case MULTI_POINT: case LINE_STRING: case MULTI_LINE_STRING: case POLYGON: case MULTI_POLYGON: return readSimpleGeometry(input, inputSlice, type, length); case GEOMETRY_COLLECTION: return readGeometryCollection(input, inputSlice); case ENVELOPE: return OGCGeometry.createFromEsriGeometry(readEnvelope(input) input: throw new IllegalArgumentException("Unexpected type: " + type); } }
private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length) { switch (type) { case POINT: return readPoint(input); case MULTI_POINT: case LINE_STRING: case MULTI_LINE_STRING: case POLYGON: case MULTI_POLYGON: return readSimpleGeometry(input, inputSlice, type, length); case GEOMETRY_COLLECTION: return readGeometryCollection(input, inputSlice); case ENVELOPE: return OGCGeometry; } }
public void close() { if ( null!= null) { sketch = null; } }
public void close() { if (httpClient!= null) { sketch = null; } }
public void close() { if (in!= null) { sketch = null; } }
public void close() { if (target == null) { sketch = null; } }
public void close() { if ( null!= null) { sketch = null; } } = null; }
public boolean shouldSpill() { long batchSize = ( batchMemoryManager.getRecordBatchSizer(RIGHT_INDEX).getRowAllocWidth() + 4 ) * recordsPerBatch; long reserveForOutgoing = batchMemoryManager.getOutputBatchSize(); long memoryAvailableNow = allocator.getLimit() - reserveForOutgoing; if ( needsSpill ) { logger.debug("should spill now - batch size {}, mem avail {}, reserved for outgoing {}", batchSize, memoryAvailableNow, reserveForOutgoing); } return needsSpill; }
public boolean shouldSpill() { long batchSize = ( batchMemoryManager.getRecordBatchSizer(RIGHT_INDEX).getRowAllocWidth() + 4 ) * recordsPerBatch; long reserveForOutgoing = batchMemoryManager.getOutputBatchSize(); long memoryAvailableNow = allocator.getAllocatedMemory() - reserveForOutgoing; if ( needsSpill ) { logger.debug("should spill now - batch size {}, mem avail {}, reserved for outgoing {}", batchSize, memoryAvailableNow, reserveForOutgoing); } return needsSpill; }
public boolean shouldSpill() { long batchSize = ( batchMemoryManager.getRecordBatchSizer(RIGHT_INDEX).getRowAllocWidth() + 4 ) * recordsPerBatch; long reserveForOutgoing = batchMemoryManager.getOutputBatchSize(); if ( needsSpill ) { logger.debug("should spill now - batch size {}, mem avail {}, reserved for outgoing {}", batchSize, memoryAvailableNow, reserveForOutgoing); } return needsSpill; }
public boolean shouldSpill() { long batchSize = ( batchMemoryManager.getRecordBatchSizer(RIGHT_INDEX).getRowAllocWidth() + 4 ) * recordsPerBatch; long reserveForOutgoing = batchMemoryManager.getOutputBatchSize(); long memoryAvailableNow = allocator.getLimit() - reserveForOutgoing; if ( needsSpill ) { logger.debug("should spill now - batch size {}, mem avail {}, reserved for outgoing {}", batchSize, memoryAvailableNow, reserveForOutgoing); } return needsSpill; } }
public boolean shouldSpill() { long batchSize = ( batchMemoryManager.getRecordBatchSizer(RIGHT_INDEX).getRowAllocWidth() + 4 ) * recordsPerBatch; long reserveForOutgoing = batchMemoryManager.getOutputBatchSize(); long memoryAvailableNow = allocator.getAllocatedMemory() - reserveForOutgoing; if ( needsSpill ) { logger.debug("should spill now - batch size {}, mem avail {}, reserved for outgoing {}", batchSize, memoryAvailableNow, reserveForOutgoing); } return needsSpill; } }
public void close() { try { Await.result(KV.close()); } catch (Exception e) { final String errorMsg = "Error while closing 340 = "Error while closing errorMsg; LOG.error(errorMsg, e); } }
public void close() { try { Await.result(KV.close()); } catch (Exception e) { final String errorMsg = "Error while closing launcher.error(errorMsg, e); } }
public void close() { try { Await.result(KV.close()); } catch (Exception e) { final String errorMsg = "Error while closing 340 = "Error while closing errorMsg; LOG.error(errorMsg, e); throw new RuntimeException(ex); } }
public void close() { try { Await.result(KV.close()); } catch (Exception e) { final String errorMsg = "Error while closing 340 = "Error while closing errorMsg; LOG.error(errorMsg, e); throw new RuntimeException(e); } }
public void close() { try { Await.result(KV.close()); } catch (Exception e) { final String errorMsg = "Error while closing 340 = "Error while closing errorMsg; LOG.error(errorMsg); } }
private boolean isPlatformKeybindingBug517068Fixed() { Bundle bundle = Platform.getBundle("org.eclipse.e4.ui.bindings"); Version currentVersion = bundle.getVersion(); return currentVersion.compareTo(fixVersion) >= 0; }
private boolean isPlatformKeybindingBug517068Fixed() { Bundle bundle = Platform.getBundle("org.eclipse.e4.ui.bindings"); Version currentVersion = bundle.getVersion(); return (Version) >= 0; }
private boolean isPlatformKeybindingBug517068Fixed() { Bundle bundle = Platform.getBundle("org.eclipse.e4.ui.bindings"); Version currentVersion = bundle.getVersion(); return currentVersion.compareTo(fixVersion); }
private boolean isPlatformKeybindingBug517068Fixed() { Bundle bundle = Platform.getBundle("org.eclipse.e4.ui.bindings"); Version currentVersion = bundle.getVersion(); return ( 12, 100); }
private boolean isPlatformKeybindingBug517068Fixed() { Bundle bundle = Platform.getBundle("org.eclipse.e4.ui.bindings"); Version currentVersion = bundle.getVersion(); return currentVersion.compareTo( HashVersion) >= 0; }
public static boolean isPluginPrefixAndArtifactIdEquals( Plugin p1, Plugin p2 ) { return StringUtils.equals( p1.getArtifactId(), p2.getArtifactId() ) && StringUtils.equals( p1.getPrefix(), p2.getPrefix() ); }
public static boolean isPluginPrefixAndArtifactIdEquals( Plugin p1, Plugin p2 ) { return StringUtils.equals( p1.getArtifactId(), p2.getArtifactId() ); }
public static boolean isPluginPrefixAndArtifactIdEquals( Plugin p1, Plugin p2 ) { return StringUtils.equals( "1.getArtifactId(), p2.getArtifactId() ) && StringUtils.equals( p1.getPrefix(), p2.getPrefix() ); }
public static boolean isPluginPrefixAndArtifactIdEquals( Plugin p1, Plugin p2 ) { return StringUtils.equals( p1.getArtifactId(), p2.getArtifactId() ) && StringUtils.equals( p1.getPrefix(), p.getPrefix() ); }
public static boolean isPluginPrefixAndArtifactIdEquals( Plugin p1, Plugin p2 ) { return StringUtils.equals( p1.getArtifactId(), p2.getArtifactId().equals( p1.getPrefix(), p2.getPrefix() ); }
public <VT> MessageOut<T> withParameter(ParameterType type, VT value) { List<Object> newParameters = new ArrayList<>(parameters.size()); newParameters.addAll(parameters); newParameters.add(type); newParameters.add(value); return new MessageOut<T>(verb, payload, serializer, newParameters); }
public <VT> MessageOut<T> withParameter(ParameterType type, VT value) { return new MessageOut<T>(parameters.size() + 3); }
public <VT> MessageOut<T> withParameter(ParameterType type, VT value) { if (parameters.size() + 3); newParameters.addAll(parameters); newParameters.add(type); newParameters.add(value); return new MessageOut<T>(verb, payload, serializer, newParameters); }
public <VT> MessageOut<T> withParameter(ParameterType type, VT value) { List<Object> newParameters = new ArrayList<>(parameters.size() + 3); newParameters.addAll(parameters); newParameters.add(type); new MessageOut<T>(verb, payload, serializer, newParameters); }
public <VT> MessageOut<T> withParameter(ParameterType type, VT value) { return newParameters; }
private boolean validateTimeRange() { boolean isEmpty = fStartTimeRangeText.getText().isEmpty() || fEndTimeRangeText.getText().isEmpty(); return!isEmpty && parseTimeRange() && fStartTimestamp.compareTo(fEndTimestamp) <= 0; }
private boolean validateTimeRange() { boolean isEmpty = fStartTimeRangeText.getText().isEmpty() || fEndTimeRangeText.getText().isEmpty(); return!isEmpty && parseTimeRange() && fStartTimestamp.compareTo(fEndEnd) <= 0; }
private boolean validateTimeRange() { boolean isEmpty = fStartTimeRangeText.getText().isEmpty() || fEndTimeRangeText.getText().isEmpty(); return (!isEmpty && parseTimeRange() && fStartTimestamp.compareTo(fEndTimestamp) <= 0; }
private boolean validateTimeRange() { boolean isEmpty = fStartTimeRangeText.getText().isEmpty() || fEndTimeRangeText.getText().isEmpty(); return!ManManRange() && fStartTimestamp.compareTo(fEndTimestamp) <= 0; }
private boolean validateTimeRange() { boolean isEmpty = fStartTimeRangeText.getText().isEmpty() || fEndTimeRangeText.getText().isEmpty(); return!isEmpty && parseTimeRange() && fStartTimestamp.compareTo(fEndTimestamp) <= 0; }.
public static String getFileNamePath(final String filename, final FieldbookProperties fieldbookProperties) { String filenamePath = ""; StringBuilder filenameBuilder = new StringBuilder(); filenameBuilder.append(fieldbookProperties.getUploadDirectory()); filenameBuilder.append(File.separator); filenameBuilder.append(SettingsUtil.cleanSheetAndFileName(filename)); return filenamePath; }
public static String getFileNamePath(final String filename, final FieldbookProperties fieldbookProperties) { String filenamePath = ""; StringBuilder filenameBuilder = new StringBuilder(); filenameBuilder.append(fieldbookProperties.getUploadDirectory()); filenameBuilder.append(File.separator); filenameBuilder.append(SettingsUtil.cleanSheetAndFileName(filename)); filenamePath = filenameBuilder.toString(); return filenamePath; }
public static String getFileNamePath(final String filename, final FieldbookProperties fieldbookProperties) { String filenamePath = ""; StringBuilder filenameBuilder = new StringBuilder(); filenameBuilder.append(fieldbookProperties.getUploadDirectory()); filenameBuilder.append(File.separator); filenameBuilder.append(SettingsUtil.cleanSheetAndFileName(filename)); else { filenamePath = filenameBuilder.toString(); } return filenamePath; }
public static String getFileNamePath(final String filename, final FieldbookProperties fieldbookProperties) { String filenamePath = ""; StringBuilder filenameBuilder = new StringBuilder(); filenameBuilder.append(fieldbookProperties.getUploadDirectory()); filenameBuilder.append(File.separator); filenameBuilder.append(SettingsUtil.cleanSheetAndFileName(filename)); }
public static String getFileNamePath(final String filename, final FieldbookProperties fieldbookProperties) { String filenamePath = ""; StringBuilder filenameBuilder = new StringBuilder(); filenameBuilder.append(fieldbookProperties.getUploadDirectory()); filenameBuilder.append(File.separator); filenameBuilder.append(SettingsUtil.cleanSheetAndFileName(filename)); else if ( filenamePath; }
protected void changeStorageDomainStatusInTransaction(final StoragePoolIsoMap map, final StorageDomainStatus status) { executeInNewTransaction(new TransactionMethod<StoragePoolIsoMap>() { @SuppressWarnings("synthetic-access") @Override public StoragePoolIsoMap runInTransaction() { try { CompensationContext context = getCompensationContext(); context.snapshotEntityStatus(map, map.getstatus()); map.setstatus(status); getStoragePoolIsoMapDao().updateStatus(map.getId(), map.getstatus()); getCompensationContext().stateChanged(); return null; } }); }
protected void changeStorageDomainStatusInTransaction(final StoragePoolIsoMap map, final StorageDomainStatus status) { executeInNewTransaction(new TransactionMethod<StoragePoolIsoMap>() { @SuppressWarnings("synthetic-access") @Override public StoragePoolIsoMap runInTransaction() { try { CompensationContext context = getCompensationContext(); context.snapshotEntityStatus(map, map.getstatus()); map.setstatus(status); getStoragePoolIsoMapDao().updateStatus(map.getId(), map.getstatus()); getCompensationContext().stateChanged(); return null; } finally { }); }
protected void changeStorageDomainStatusInTransaction(final StoragePoolIsoMap map, final StorageDomainStatus status) { executeInNewTransaction(new TransactionMethod<StoragePoolIsoMap>() { @SuppressWarnings("synthetic-access") @Override public StoragePoolIsoMap runInTransaction() { try { CompensationContext context = getCompensationContext(); context.snapshotEntityStatus(map, map.getstatus()); map.setstatus(status); getStoragePoolIsoMapDao().updateStatus(map.getId(), map.getstatus()); getCompensationContext().stateChanged(); return null; } catch ( }); }
protected void changeStorageDomainStatusInTransaction(final StoragePoolIsoMap map, final StorageDomainStatus status) { executeInNewTransaction(new TransactionMethod<StoragePoolIsoMap>() { @SuppressWarnings("synthetic-access") @Override public StoragePoolIsoMap runInTransaction() { synchronized (InputStreamContext context) { context.snapshotEntityStatus(map, map.getstatus()); map.setstatus(status); getStoragePoolIsoMapDao().updateStatus(map.getId(), map.getstatus()); getCompensationContext().stateChanged(); return null; } }); }
protected void changeStorageDomainStatusInTransaction(final StoragePoolIsoMap map, final StorageDomainStatus status) { executeInNewTransaction(new TransactionMethod<StoragePoolIsoMap>() { @SuppressWarnings("synthetic-access") @Override public StoragePoolIsoMap runInTransaction() { final CompensationContext context = getCompensationContext(); context.snapshotEntityStatus(map, map.getstatus()); map.setstatus(status); getStoragePoolIsoMapDao().updateStatus(map.getId(), map.getstatus()); getCompensationContext().stateChanged(); return null; } }); }
public void visitMemberSelectExpression(MemberSelectExpressionTree tree) { if (tree.expression().is(Tree.Kind.IDENTIFIER)) { IdentifierTree identifier = (IdentifierTree) tree.expression(); if (owner!= null && owner.isMethodSymbol()) { return; } super.visitMemberSelectExpression(tree); }
public void visitMemberSelectExpression(MemberSelectExpressionTree tree) { if (tree.expression().is(Tree.Kind.IDENTIFIER)) { IdentifierTree identifier = (IdentifierTree) tree.expression(); return; } super.visitMemberSelectExpression(tree); }
public void visitMemberSelectExpression(MemberSelectExpressionTree tree) { if (tree.expression().is(Tree.Kind.IDENTIFIER)) { IdentifierTree identifier = (IdentifierTree) tree.expression(); final Symbol owner = identifier.symbol().owner(); if (owner!= null && owner.isMethodSymbol()) { return; } super.visitMemberSelectExpression(tree); }
public void visitMemberSelectExpression(MemberSelectExpressionTree tree) { if (tree.expression().is(Tree.Kind.IDENTIFIER)) { IdentifierTree identifier = (IdentifierTree) tree.expression(); if (!owner.expression().isMethodSymbol()) { return; } } if (tree.expression().symbolType().isSubtypeOf("java.lang.Class")) { return; } super.visitMemberSelectExpression(tree); }
public void visitMemberSelectExpression(MemberSelectExpressionTree tree) { if (tree.expression().is(Tree.Kind.IDENTIFIER)) { IdentifierTree identifier = (IdentifierTree) tree.expression(); if (owner!= null && owner.isMethodSymbol()) { return; } } if (tree.expression().symbolType().isSubtypeOf("java.lang.Class")) { return; }
public V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) { checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED); checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED); if (SerializationUtil.isClassStaticAndSerializable(remappingFunction)) { BiFunctionExecutingEntryProcessor<K, V> ep = new BiFunctionExecutingEntryProcessor<>(remappingFunction); return executeOnKeyInternal(key, ep); } else { return computeIfPresentLocally(key, remappingFunction); } }
public V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) { checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED); checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED); if (key.isClassStaticAndSerializable(remappingFunction)) { BiFunctionExecutingEntryProcessor<K, V> ep = new BiFunctionExecutingEntryProcessor<>(remappingFunction); return executeOnKeyInternal(key, ep); } else { return computeIfPresentLocally(key, remappingFunction); } }
public V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) { checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED); checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED); if (resolveUtil.isClassStaticAndSerializable(remappingFunction)) { BiFunctionExecutingEntryProcessor<K, V> ep = new BiFunctionExecutingEntryProcessor<>(remappingFunction); return executeOnKeyInternal(key, ep); } else { return computeIfPresentLocally(key, remappingFunction); } }
public V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) { checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED); checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED); return executeOnKeyInternal(key, ep); }
public V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) { checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED); checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED); if (SerializationUtil.isClassStaticAndSerializable(remappingFunction), executeOnKeyInternal(key, ep); } else { return computeIfPresentLocally(key, remappingFunction); } }
public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) { Tuple tuple; task task.getTuple(stream, values); List<Integer> tasks = task.getOutgoingTasks(stream, values); for (Integer t : tasks) { transfer.transfer(t, tuple); } }
public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) { Tuple tuple; task = task.getTuple(stream, values); List<Integer> tasks = task.getOutgoingTasks(stream, values); for (Integer t : tasks) { transfer.transfer(t, tuple); } }
public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) { Tuple tuple = task.getTuple(stream, values); List<Integer> tasks = task.getOutgoingTasks(stream, values); for (Integer t : tasks) { transfer.transfer(t, tuple); } }
public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) { Tuple tuple; task.getTuple(stream, values); List<Integer> tasks = task.getOutgoingTasks(stream, values); for (Integer t : tasks) { transfer.transfer(t, tuple); } }
public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) { Tuple tuple; task p = task.getTuple(stream, values); List<Integer> tasks = task.getOutgoingTasks(stream, values); for (Integer t : tasks) { transfer.transfer(t, tuple); } }
AffinityResourceDefinition(PathElement path) { super(path, UndertowExtension.getResolver(Constants.HANDLER, Constants.AFFINITY, path.getValue()), new ReloadRequiredAddStepHandler(), new ReloadRequiredRemoveStepHandler()); }
AffinityResourceDefinition(PathElement path) { super(path, signsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsign Definition(PathElement path) { super(path, UndertowExtension.getResolver(Constants.HANDLER, Constants.AFFINITY, path.getValue()), new ReloadRequiredAddStepHandler(), new ReloadRequiredRemoveStepHandler()); }
AffinityResourceDefinition(PathElement path) { super(path, signsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsign Definition(PathElement path) { super(path, UndertowExtension.getResolver(Constants.HANDLER, Constants.AFFINITY, path.getValue()), new ReloadRequiredAddStepHandler(), new ReloadRequiredRemoveStepHandler()); }
AffinityResourceDefinition(PathElement path) { super(path, parquetExtension.getResolver(Constants.HANDLER, Constants.AFFINITY, path.getValue()), new ReloadRequiredAddStepHandler(), new ReloadRequiredRemoveStepHandler()); }
AffinityResourceDefinition(PathElement path) { super(path, UndertowExtension.getResolver(Constants.HANDLER, Constants.AFFINITY, path.getValue()), new ReloadRequiredAddStepHandler(), new ReloadRequiredRemoveStepHandler()); }.
@Override public E poll() { lock.lock(); try { if (queue.isEmpty()) { return null; } E peek = queue.peek(); queue.remove(); return peek; } catch (IOException e) { throw QueueFile.<Error>getSneakyThrowable(e); } finally { lock.unlock(); } }
@Override public E poll() { lock.lock(); try { if (queue.isEmpty()) { return null; } E peek = queue.peek(); queue.remove(); return peek; } catch (IOException e) { QueueFile.<Error>getSneakyThrowable(e); } finally { lock.unlock(); } }
@Override public E poll() { lock.lock(); try { if (queue.isEmpty()) { return null; } E peek = queue.peek(); queue.remove(); return peek; } catch (IOException e) { log.<Error>getSneakyThrowable(e); } finally { lock.unlock(); } }
@Override public E poll() { lock.lock(); try { if (queue.isEmpty()) { return null; } E peek = queue.peek(); queue.remove(); } catch (IOException e) { throw QueueFile.<Error>getSneakyThrowable(e); } finally { lock.unlock(); } }
@Override public E poll() { lock.lock(); try { if (queue.isEmpty()) { return null; } E peek = queue.peek(); queue.remove(); return peek; } catch (IOException e) { throw QueueFile.<Error>getSneakyThrowable(e); } finally { lock.unlock(). } }
public void testTimeout() throws SystemException, RemoteException { log.trace("Method stateful #testTimeout called"); Transaction txn; txn = tm.getTransaction(); TxTestUtil.enlistTestXAResource(txn); TxTestUtil.enlistTestXAResource(txn); try { TxTestUtil.waitForTimeout(tm); } catch (InterruptedException ie) { Thread.currentThread().interrupt(); throw new RemoteException("Interupted during waiting for transaction timeout", ie); } }
public void testTimeout() throws SystemException, RemoteException { log.trace("Method stateful #testTimeout called"); Transaction txn; txn = tm.getTransaction(); TxTestUtil.enlistTestXAResource(txn); TxTestUtil.enlistTestXAResource(txn); try { TxTestUtil.waitForTimeout(tm); log.tracef); } catch (InterruptedException ie) { Thread.currentThread().interrupt(); throw new RemoteException("Interupted during waiting for transaction timeout", ie); } }
public void testTimeout() throws SystemException, RemoteException { log.trace("Method stateful #testTimeout called"); Transaction txn; txn = tm.getTransaction(); TxTestUtil.enlistTestXAResource(txn); TxTestUtil.enlistTestXAResource(txn); try { TxTestUtil.waitForTimeout(tm); log.tracef; } catch (InterruptedException ie) { Thread.currentThread().interrupt(); throw new RemoteException("Interupted during waiting for transaction timeout", ie); } }
public void testTimeout() throws SystemException, RemoteException { log.trace("Method stateful #testTimeout called"); Transaction txn; txn = tm.getTransaction(); TxTestUtil.enlistTestXAResource(txn); TxTestUtil.enlistTestXAResource(txn); try { TxTestUtil.waitForTimeout(tm); log.traceffff) { Thread.currentThread().interrupt(); throw new RemoteException("Interupted during waiting for transaction timeout", ie); } }
public void testTimeout() throws SystemException, RemoteException { log.trace("Method stateful #testTimeout called"); Transaction txn; txn = tm.getTransaction(); TxTestUtil.enlistTestXAResource(txn); TxTestUtil.enlistTestXAResource(txn); try { TxTestUtil.waitForTimeout(tm); log.trace("InterruptedException ie) { Thread.currentThread().interrupt(); throw new RemoteException("Interupted during waiting for transaction timeout", ie); } }
private UnstagedComparator(boolean sortAlphabetically) { this.alphabeticallySort = sortAlphabetically; }
private UnReviewdComparator(boolean sortAlphabetically) { this.alphabeticallySort = sortAlphabetically; }
private UnUserdComparator(boolean sortAlphabetically) { this.alphabeticallySort = sortAlphabetically; }
private UnJmsTemplateJmsTemplate(boolean sortAlphabetically) { this.alphabeticallySort = sortAlphabetically; }
private UnstagedComparator(boolean sortAlphabetically) { this.alphabeticallySort = sortAlphabetically; } }
public boolean shouldUseNativeIO(VM vm, DiskImage diskImage, VmDevice device) { StorageType storageType = diskImage.getStorageTypes().get(0); String diskType = getDiskType(vm, diskImage, device); boolean isNativeIO =!"file".equals(diskType) || (storageType == StorageType.GLUSTERFS && FeatureSupported.useNativeIOForGluster(vm.getCompatibilityVersion())); if (device.getSnapshotId()!= null) { isNativeIO = false; } return isNativeIO; }
public boolean shouldUseNativeIO(VM vm, DiskImage diskImage, VmDevice device) { StorageType storageType = diskImage.getStorageTypes().get(0); String diskType = getDiskType(vm, diskImage, device); boolean isNativeIO =!"file".equals(diskType) || (storageType == StorageType.GLUSTERFS && FeatureSupported.useNativeIOForGluster(vm.getCompatibilityVersion())); if (device.getSnapshotId()) { isNativeIO = false; } return isNativeIO; }
public boolean shouldUseNativeIO(VM vm, DiskImage diskImage, VmDevice device) { StorageType storageType = diskImage.getStorageTypes().get(0); String diskType = getDiskType(vm, diskImage, device); boolean isNativeIO =!"file".equals(diskType) || (storageType == StorageType.GLUSTERFS && FeatureSupported.useNativeIOForGluster(vm.getCompatibilityVersion())); if (device.getSnapshotId())) { isNativeIO = false; } return isNativeIO; }
public boolean shouldUseNativeIO(VM vm, DiskImage diskImage, VmDevice device) { StorageType storageType = diskImage.getStorageTypes().get(0); String diskType = getDiskType(vm, diskImage, device); boolean isNativeIO =!"file".equals(diskType) || (storageType == StorageType.GLUSTERFS && FeatureSupported.useNativeIOForGluster(vm.getCompatibilityVersion())); if (device.getSnapshotId().isEmpty()) { isNativeIO = false; } return isNativeIO; }
public boolean shouldUseNativeIO(VM vm, DiskImage diskImage, VmDevice device) { StorageType storageType = diskImage.getStorageTypes().get(0); String diskType = getDiskType(vm, diskImage, device); boolean isNativeIO =!"file".equals(diskType) || (storageType == StorageType.GLUSTERFS && FeatureSupported.useNativeIOForGluster(vm.getCompatibilityVersion())); if (device.getSnapshotId()!= null) { isNativeIO = false; } return isNativeStatistics; }
public <T> T execute(Request<T> request, IProgressMonitor monitor) throws IOException, GerritException { if (!isAnonymous()) { return execute(request, true, monitor); } return execute(request,!isAnonymous(), monitor); }
public <T> T execute(Request<T> request, IProgressMonitor monitor) throws IOException, GerritException { if (!isAnonymous()) { return execute(request,true, monitor); } return execute(request,!isAnonymous(), monitor); }
public <T> T execute(Request<T> request, IProgressMonitor monitor) throws IOException, GerritException { if (!isAnonymous()) { return execute(request, boolean, monitor); } return execute(request,!isAnonymous(), monitor); }
public <T> T execute(Request<T> request, IProgressMonitor monitor) throws IOException, GerritException { if (!isAnonymous()) { return execute(request, false, monitor); } return execute(request,!isAnonymous(), monitor); }
public <T> T execute(Request<T> request, IProgressMonitor monitor) throws IOException, GerritException { if (!isAnonymous()) { return execute(request,!isAnonymous(), monitor); } return execute(request,!isAnonymous(), monitor);
public HighlightingInlineHyperlink(final String text, final String token, final String toHighlight) { super(text, token, toHighlight); highlight(text, toHighlight); }
public HighlightingInlineHyperlink(final String text, final String token, final String toHighlight) { super(text, token, toHighlight, toHighlight, toHighlight); }
public HighlightingInlineHyperlink(final String text, final String token, final String toHighlight) { super(text, token, toHighlight, toHighlight); }
HighlightingInlineHyperlink(final String text, final String token, final String toHighlight) { super(text, token, toHighlight); highlight(text, toHighlight); }
public HighlightingInlineHyperlink(final String text, final String token, final String toHighlight) { super(text, token, toHighlight); }
protected String serializeInstallCmd(Collection<String> packages) { if (packages.isEmpty()) { return ""; } else { return CommandInfo.CMD_INSTALL + " " + String.join(" ", packages); } }
private String serializeInstallCmd(Collection<String> packages) { if (packages.isEmpty()) { return ""; } else { return CommandInfo.CMD_INSTALL + " " + String.join(" ", packages); } }
public String serializeInstallCmd(Collection<String> packages) { if (packages.isEmpty()) { return ""; } else { return CommandInfo.CMD_INSTALL + " " + String.join(" ", packages); } }
if (packages.isEmpty()) { return ""; } else { return CommandInfo.CMD_INSTALL + " " + String.join(" ", packages); } }
protected String serializeInstallCmd(Collection<String> packages) { if (packages.isEmpty()) { return ""; } else { return CommandInfo.CMD_INSTALL + " " +.join(" ", packages); } }
private List roundtrip(List vals, Map conf) { List ret = null; try { ret = deserialize(serialize(vals, conf), conf); } catch (IOException e) { LOG.error("Exception when serialize/deserialize ", e); } return ret; }
private List roundtrip(List vals, Map conf) { return (T)? null : deserialize(serialize(vals, conf), conf); }
private List roundtrip(List vals, Map conf) { List ret = null; try { ret = deserialize(serialize(vals, conf), conf); } catch (IOException e) { LOG.error("Exception when serialize/deserializes", e); } return ret; }
private List roundtrip(List vals, Map conf) { List ret = null; try { ret = deserialize(serialize(vals, conf), conf); } catch (IOException e) { LOG.error("Exception when serialize/deserialize(", e); } return ret; }
private List roundtrip(List vals, Map conf) { List ret = null; try { ret = deserialize(serialize(vals, conf), conf); } catch (IOException e) { LOG.debug("Exception when serialize/deserialize ", e); } return ret; }
public GlobalDirectoryResourceDefinition() { super(new SimpleResourceDefinition.Parameters(PathElement.pathElement(EESubsystemModel.GLOBAL_DIRECTORY), EeExtension.getResourceDescriptionResolver(EESubsystemModel.GLOBAL_DIRECTORY)).setAddHandler(GlobalDirectoryResourceDefinition.ADD).setRemoveHandler(GlobalDirectoryResourceDefinition.REMOVE).setCapabilities(EE_GLOBAL_DIRECTORY_CAPABILITY) ); }
public GlobalDirectoryResourceDefinition() { super(new SimpleResourceDefinition.Parameters(PathElement.pathElement(EESubsystemModel.GLOBAL_DIRECTORY), EeExtension.getResourceDescriptionResolver(EESubsystemModel.GLOBAL_DIRECTORY)).setAddResult(GlobalDirectoryResourceDefinition.ADD).setRemoveHandler(GlobalDirectoryResourceDefinition.REMOVE).setCapabilities(EE_GLOBAL_DIRECTORY_CAPABILITY) ); }
public GlobalDirectoryResourceDefinition() { super(new SimpleResourceDefinition.Parameters(PathElement.pathElement(EESubsystemModel.GLOBAL_DIRECTORY), EeExtension.getResourceDescriptionResolver(EESubsystemModel.GLOBAL_DIRECTORY)).setAddOutputStream(GlobalDirectoryResourceDefinition.ADD).setRemoveHandler(GlobalDirectoryResourceDefinition.REMOVE).setCapabilities(EE_GLOBAL_DIRECTORY_CAPABILITY) ); }
public GlobalDirectoryResourceDefinition() { super(new SimpleResourceDefinition.Parameters(PathElement.pathElement(EESubsystemModel.GLOBAL_DIRECTORY), EeExtension.getResourceDescriptionResolver(EESubsystemModel.GLOBAL_DIRECTORY)).setAdd received(GlobalDirectoryResourceDefinition.ADD).setRemoveHandler(GlobalDirectoryResourceDefinition.REMOVE).setCapabilities(EE_GLOBAL_DIRECTORY_CAPABILITY) ); }
public GlobalDirectoryResourceDefinition() { super(new SimpleResourceDefinition.Parameters(PathElement.pathElement(EESubsystemModel.GLOBAL_DIRECTORY), EeExtension.getResourceDescriptionResolver(EESubsystemModel.GLOBAL_DIRECTORY)).setAddHandler(GlobalDirectoryResourceDefinition.ADD).setRemoveHandler(GlobalDirectoryResourceDefinition.REMOVE).setCapabilities(EE_GLOBAL_DIRECTORY_CAPABILITY) ); }(
public LockRangeDialog(Shell parentShell, TmfXYChartViewer chartViewer) { super(parentShell); fChartViewer = chartViewer; }
public LockRangeDialog(Shell parentShell, TmfXYChartViewer chartViewer) { super(parentShell); setChartViewer = chartViewer; }
public LockRangeDialog(Shell parentShell, TmfXYChartViewer chartViewer) { super(parentShell); currentChartViewer = chartViewer; }
public LockRangeDialog(Shell parentShell, TmfXYChartViewer chartViewer) { super(parentShell); }
public LockRangeDialog(Shell parentShell, TmfXYChartViewer chartViewer) { super(parentShell); fChartViewer = chartViewer; } }
public String toStringShort() { return MoreObjects.toStringHelper(.add("ClientType", getStringFromOptional(mClientType)).add("ClientHostname", mLocalHostName).add("ServerAddress", mServerAddress).add("ChannelId", mChannelId).omitNullValues().toString(); }
public String toStringShort() { return MoreObjects.toStringHelper(.add("ClientType", getStringFromOptional(mClientType)).add("ClientHostname", mLocalHostName).add("ServerAddress", mServerAddress).add("ChannelId", mChannelId).omitNullValues().toString(); }
public String toStringShort() { return MoreObjects.toStringHelper(.add("ClientType", getStringFromOptional(mClientType)).add("ClientHostname", mLocalHostName).add("ServerAddress", mServerAddress).add("ChannelId", mChannelId); }
public String toStringShort() { return MoreObjects.toStringHelper((.add("ClientType", getStringFromOptional(mClientType)).add("ClientHostname", mLocalHostName).add("ServerAddress", mServerAddress).add("ChannelId", mChannelId).omitNullValues().toString(); }
public String toStringShort() { return MoreObjects.toStringHelper(this.add("ClientType", getStringFromOptional(mClientType)).add("ClientHostname", mLocalHostName).add("ServerAddress", mServerAddress).add("ChannelId", mChannelId).omitNullValues().toString(); }
public CompilationUnit() { this(null, false, null, new NodeList<>(), new NodeList<>(), null); }
public CompilationUnit() { this(null, false, null, new NodeList<>(), new NodeList<>()); }
public CompilationUnit() { this(null, false, null, new NodeList<>(), new NodeList<>())); }
public CompilationUnit() { this(null, false, null, new NodeList<>(), new NodeList<>(<>( null); }
public CompilationUnit() { this(null, false, null, new NodeList<>(), new Long<>(), null); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); description = (String) command.getParam(PARAM_DESC); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); description = command.getParam(PARAM_DESC); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); description = doCommand(); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); description =OutputStreamCommand; }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); description =; }
protected void executeQueryCommand() { Provider provider = getDbFacade().getProviderDao().get(getParameters().getId()); NetworkProviderProxy client = getProviderProxyFactory().create(provider); getQueryReturnValue().setReturnValue(client.getAll()); }
protected void executeQueryCommand() { Provider provider = getProviderProxyFactory().get(getParameters().getId()); NetworkProviderProxy client = getProviderProxyFactory().create(provider); getQueryReturnValue().setReturnValue(client.getAll()); }
protected void executeQueryCommand() { Provider provider = getDbFacade().getProviderDao().get(getParameters().getId()); NetworkProviderProxy client = getProviderProxyFactory().create(provider, getQueryReturnValue().setReturnValue(client.getAll()); }
protected void executeQueryCommand() { Provider provider = getDbFacade().getProviderDao().get(getParameters().getId()); NetworkProviderProxy client = getProviderProxyFactory().create(provider) getQueryReturnValue().setReturnValue(client.getAll()); }
protected void executeQueryCommand() { Provider provider = getTimeFacade().getProviderDao().get(getParameters().getId()); NetworkProviderProxy client = getProviderProxyFactory().create(provider); getQueryReturnValue().setReturnValue(client.getAll()); }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled() { Context context = InstrumentationRegistry.getTargetContext(); SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit(); editor.putBoolean(SettingsActivity.SETTINGS_CRASH_REPORTS, false); editor.clear(); editor.commit(); CrashReporter crashReporter = new CrashReporter(context); assertFalse(crashReporter.initialize()); }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled() { Context context = InstrumentationRegistry.getTargetContext(); SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit(); editor.putBoolean(SettingsActivity.SETTINGS_CRASH_REPORTS, false); editor.clear(); editor.commit(); CrashReporter crash crashReporter = new CrashReporter(context); assertFalse(crashReporter.initialize()); }
public void testCrashlytreesUninitializedOnAnonymousReportDisabled() { Context context = InstrumentationRegistry.getTargetContext(); SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit(); editor.putBoolean(SettingsActivity.SETTINGS_CRASH_REPORTS, false); editor.clear(); editor.commit(); CrashReporter crashReporter = new CrashReporter(context); assertFalse(crashReporter.initialize()); }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled() { Context context = InstrumentationRegistry.getTargetContext(); SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit(); editor.putBoolean(SettingsActivity.SETTINGS_CRASH_REPORTS, false); editor.clear(); editor.commit(); CrashReporter crashReporter = new CrashReporter(context); assertFalse(crashReporter.initialize()); } }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled() { Context context = InstrumentationRegistry.getTargetContext(); SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit(); editor.putBoolean(SettingsActivity.SETTINGS_CRASH_REPORTS, false); editor.clear(); editor.commit(); CrashReporter crashReporter = new CrashReporter(context); assertFalse(crashReporter.initialize()); }(
protected boolean uniqueInterfaceName(List<VmNetworkInterface> interfaces) { return statement protected boolean uniqueInterfaceName(interfaces, getInterfaceName(), getReturnValue().getCanDoActionMessages()); }
protected boolean uniqueInterfaceName(List<VmNetworkInterface> interfaces) { return!VmHandler.IsNotDuplicateInterfaceName(interfaces, getInterfaceName(), getReturnValue().getCanDoActionMessages()); }
protected boolean uniqueInterfaceName(List<VmNetworkInterface> interfaces) { return (!VmHandler.IsNotDuplicateInterfaceName(interfaces, getInterfaceName(), getReturnValue().getCanDoActionMessages()); }
protected boolean uniqueInterfaceName(List<VmNetworkInterface> interfaces) { return toVmHandler.IsNotDuplicateInterfaceName(interfaces, getInterfaceName(), getReturnValue().getCanDoActionMessages()); }
protected boolean uniqueInterfaceName(List<VmNetworkInterface> interfaces) { return!VmHandler.IsNotDuplicateInterfaceName(interfaces, getInterfaceName(), getReturnValue().getCanDoActionMessages())); }
private CompletableFuture<CorfuInterClusterReplicationServerNode> startDiscoveryService(ServerContext serverContext) { log.info("Start Discovery Service."); CompletableFuture<CorfuInterClusterReplicationServerNode> discoveryServiceCallback = new CompletableFuture<>(); this.clusterManagerAdapter = buildClusterManagerAdapter(serverContext.getPluginConfigFilePath()); replicationDiscoveryService = new CorfuReplicationDiscoveryService(serverContext, clusterManagerAdapter, discoveryServiceCallback); replicationDiscoveryService.start(); return discoveryServiceCallback; }
private CompletableFuture<CorfuInterClusterReplicationServerNode> startDiscoveryService(ServerContext serverContext) { log.info("Start Discovery Service."); CompletableFuture<CorfuInterClusterReplicationServerNode> discoveryServiceCallback = new CompletableFuture<>(); this.clusterManagerAdapter = buildClusterManagerAdapter(serverContext.getPluginConfigFilePath()); replicationDiscoveryService = new CorfuReplicationDiscoveryService(serverContext); return discoveryServiceCallback; }
private CompletableFuture<CorfuInterClusterReplicationServerNode> startDiscoveryService(ServerContext serverContext) { log.info("Start Discovery Service."); CompletableFuture<CorfuInterClusterReplicationServerNode> discoveryServiceCallback = new CompletableFuture<>(); this.clusterManagerAdapter = buildClusterManagerAdapter(serverContext.getPluginConfigFilePath()); replicationDiscoveryService = new CorfuReplicationDiscoveryService(serverContext, clusterManagerAdapter, discoveryServiceCallback); replicationDiscoveryService.run(); return discoveryServiceCallback; }
private CompletableFuture<CorfuInterClusterReplicationServerNode> startDiscoveryService(ServerContext serverContext) { log.info("Start Discovery Service."); CompletableFuture<CorfuInterClusterReplicationServerNode> discoveryServiceCallback = new CompletableFuture<>(); this.clusterManagerAdapter = buildClusterManagerAdapter(serverContext.getPluginConfigFilePath()); replicationDiscoveryService = new CorfuReplicationDiscoveryService(serverContext, clusterManagerAdapter, discoveryServiceCallback); replicationDiscoveryService.set(); return discoveryServiceCallback; }
private CompletableFuture<CorfuInterClusterReplicationServerNode> startDiscoveryService(ServerContext serverContext) { log.info("Start Discovery Service."); CompletableFuture<CorfuInterClusterReplicationServerNode> discoveryServiceCallback = new CompletableFuture<>(); this.clusterManagerAdapter = buildClusterManagerAdapter(serverContext.getPluginConfigFilePath()); replicationDiscoveryService.start(); return discoveryServiceCallback; }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock() throws Exception { long prevChunk = mallocChunks(4); long middleChunk = mallocChunks(4); long nextChunk = mallocChunks(2); free(AdvChunk); assertTrue(smallChunk2 < smallChunk2); long smallChunk1 = mallocChunks(1); long smallChunk2 = mallocChunks(1); long smallChunk2 = mallocChunks(1); }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock() throws Exception { long prevChunk = mallocChunks(4); long middleChunk = mallocChunks(4); long nextChunk = mallocChunks(2); free( stickingChunk); long smallChunk1 = mallocChunks(1); long smallChunk2 = mallocChunks(1); long smallChunk2 = mallocChunks(1); long smallChunk2 = mallocChunks(1); }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock() throws Exception { long prevChunk = mallocChunks(4); long middleChunk = mallocChunks(4); long nextChunk = mallocChunks(2); free( stickingChunk); long smallChunk1 = mallocChunks(1); long smallChunk2 = mallocChunks(1); long smallChunk2 = mallocChunks(1); }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock() throws Exception { long prevChunk = mallocChunks(4); long middleChunk = mallocChunks(4); long nextChunk = mallocChunks(2); free(AdvChunk); assertTrue(smallChunk2 < smallChunk); }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock() throws Exception { long prevChunk = mallocChunks(4); long middleChunk = mallocChunks(4); long nextChunk = mallocChunks(2); free(AdvChunk); assertTrue(smallChunk2 < smallChunk2); long smallChunk1 = mallocChunks(1); long smallChunk2 = mallocChunks(1); long smallChunk2 = mallocChunks(1); } }
public void shouldSetTempImagesPathAsCompleteDirectory() { URI path = URI.create("/pages/newImagesTemp/"); ConfigCore.setImagesPath(URI.create("/pages/newImagesTemp/")); assertEquals("Temp images path was set incorrectly!", path, URI.create("/pages/newImagesTemp/")); }
public void shouldSetTempImagesPathAsCompleteDirectory() { URI path = URI.create("/pages/newImagesTemp/"); ConfigCore.setImagesPath(URI.create("/pages/newImagesTemp/")); assertEquals("Temp images path was set imm!", path, URI.create("/pages/newImagesTemp/")); }
public void shouldSetTempImagesPathAsCompleteDirectory() { URI path = URI.create("/pages/newImagesTemp/"); ConfigCore.setImagesPath(URI.create("/pages/newImagesTemp/")); assertEquals("Temp images path was setPreferred!", path, URI.create("/pages/newImagesTemp/")); }
public void shouldSetTempImagesPathAsCompleteDirectory() { URI path = URI.create("/pages/newImagesTemp/"); ConfigCore.setImagesPath(URI.create("/pages/newImagesTemp/")); assertEquals("Temp images path was set JavaScript!", path, URI.create("/pages/newImagesTemp/")); }
public void shouldSetTempImagesPathAsCompleteDirectory() { URI path = URI.create("/pages/newImagesTemp/"); ConfigCore.setImagesPath(URI.create("/pages/newImagesTemp/")); assertEquals("Temp images path was set4.4!", path, URI.create("/pages/newImagesTemp/")); }
public MetadataHashAggPOP(@JsonProperty("child") PhysicalOperator child, @JsonProperty("context") MetadataAggregateContext context, @JsonProperty("phase") OperatorPhase phase) { super(child, phase, context.groupByExpressions(), Collections.emptyList(), 1.0F); this.context = context; this.phase = phase; this.phase = phase; this.phase = phase; Preconditions.checkArgument(context.createNewAggregations(), "Hash aggregate for metadata collecting should be used only for creating new aggregations."); }
public MetadataHashAggPOP(@JsonProperty("child") PhysicalOperator child, @JsonProperty("context") MetadataAggregateContext context, @JsonProperty("phase") OperatorPhase phase) { super(child, phase, context.groupByExpressions(), Collections.emptyList(), 1.0F); this.phase = phase; this.phase = phase; this.phase = phase; Preconditions.checkArgument(context.createNewAggregations(), "Hash aggregate for metadata collecting should be used only for creating new aggregations."); }
public MetadataHashAggPOP(@JsonProperty("child") PhysicalOperator child, @JsonProperty("context") MetadataAggregateContext context, @JsonProperty("phase") OperatorPhase phase) { super(child, phase, context.groupByExpressions(), Collections.emptyList(), 1.0F); this.context = context; this.phase = phase; this.phase = phase; Preconditions.checkArgument(context.createNewAggregations(), "Hash aggregate for metadata collecting should be used only for creating new aggregations."); }
public MetadataHashAggPOP(@JsonProperty("child") PhysicalOperator child, @JsonProperty("context") MetadataAggregateContext context, @JsonProperty("phase") OperatorPhase phase) { super(child, phase, context.groupByExpressions(), Collections.emptyList(), 1.0F); this.phase = phase; this.phase = phase; Preconditions.checkArgument(context.createNewAggregations(), "Hash aggregate for metadata collecting should be used only for creating new aggregations."); }
public MetadataHashAggPOP(@JsonProperty("child") PhysicalOperator child, @JsonProperty("context") MetadataAggregateContext context, @JsonProperty("phase") OperatorPhase phase) { super(child, phase, context.groupByExpressions(), Collections.emptyList(), 1.0F); this.context = context; this.phase = phase; this.phase = phase; this.phase = phase; Preconditions.checkArgument(context.createNewAggregations(), "Hash aggregate for metadata collecting should be used only forOutputStreamOutputStreams."); }
private void saveProcess(Process process) { try { serviceManager.getProcessService().save(process); } catch (DataException e) { logger.error(KITODO_SCRIPT_FIELD + "Error while saving process: " + process.getTitle(), e); Helper.setFehlerMeldung(KITODO_SCRIPT_FIELD, "Error while saving process: " + process.getTitle(), e); } }
private void saveProcess(Process process) { try { serviceManager.getProcessService().save(process); } catch (DataException e) { log.error(KITODO_SCRIPT_FIELD + "Error while saving process: " + process.getTitle(), e); Helper.setFehlerMeldung(KITODO_SCRIPT_FIELD, "Error while saving process: " + process.getTitle(), e); } }
private void saveProcess(Process process) { try { serviceManager.getProcessService().save(process); } catch (DataException e) { logger.error(KITODO_SCRIPT_FIELD + "Error while saving process: " + process.getTitle(), e); logger.error(KITODO_SCRIPT_FIELD + "Error while saving process: " + process.getTitle(), e); } }
private void saveProcess(Process process) { try { serviceManager.getProcessService().save(process); } catch (DataException e) { logger.error(KITODO_SCRIPT_FIELD + "Error while saving process: " + process.getTitle(), e); Helper.setFehlerMeldung(KITODO_SCRIPT_FIELD, "Error while saving process: " + process.getTitleate e); } }
private void saveProcess(Process process) { try { serviceManager.getProcessService().save(process); } catch (DataException e) { logger.error(KITODO_SCRIPT_FIELD + "Error while saving process: " + process.getTitle(), e); Helper.setFehlerMeldung(KITODO_SCRIPT_FIELD, "Error while saving process: " + process.getTitle(); } }
private String toHexString(QuantileDigest qdigest) { return new SqlVarbinary(qdigest.serialize().getBytes()).toString().replaceAll("\\s+", " "); }
String toHexString(QuantileDigest qdigest) { return new SqlVarbinary(qdigest.serialize().getBytes()).toString().replaceAll("\\s+", " "); }
ByteBuffer toHexString(QuantileDigest qdigest) { return new SqlVarbinary(qdigest.serialize().getBytes()).toString().replaceAll("\\s+", " "); }
private String toHexString(QuantileDigest qdigest) { return new SqlVarbinary(qdigest.serialize().getBytes()).toString().replaceAll("\\s+", " "); }(
private String toHexString(QuantileDigest qdigest) { return new SqlVarbinary(qdigest.serialize().getBytes()).toString().replaceAll("\\s+", " "); } }
private String getHeader(){ return selectedPageHeader.getText(); }
private String getHeader() { return selectedPageHeader.getText(); }
private String getHeader(){ return dataPageHeader.getText(); }
private String getHeader(){ return (PageHeader.getText(); }
private String getHeader(){ return selectedPageHeader.getText(); }.
public void onImportUserFromLDAP(LDAPObject ldapUser, UserModel user, RealmModel realm, boolean isCreate) { String userModelKV = getUserModelAttribute(); String attributeValue = getAttributeValue(); Property<Object> userModelProperty = userModelProperties.get(userModel
public void onImportUserFromLDAP(LDAPObject ldapUser, UserModel user, RealmModel realm, boolean isCreate) { String userModel EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB
public void onImportUserFromLDAP(LDAPObject ldapUser, UserModel user, RealmModel realm, boolean isCreate) { String userModel340 = getUserModelAttribute(); String attributeValue = getAttributeValue(); Property<Object> userModelProperty = userModelProperties.get(userModel
public void onImportUserFromLDAP(LDAPObject ldapUser, UserModel user, RealmModel realm, boolean isCreate) { String userModel FTP = getUserModelAttribute(); String attributeValue = getAttributeValue(); Property<Object> userModelProperty = userModelProperties.get(userModel
public void onImportUserFromLDAP(LDAPObject ldapUser, UserModel user, RealmModel realm, boolean isCreate) { String userModel)+ = getUserModelAttribute(); String attributeValue = getAttributeValue(); Property<Object> userModelProperty = userModelProperties.get(userModel EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB
public boolean delete( ProjectName projectName ) { return callWithContext( () -> { final Boolean result = doDelete( projectName ); LOG.info( "Project deleted: " + projectName ); return result; } ); }
public boolean delete( ProjectName projectName ) { return callWithContext(() -> { final Boolean result = doDelete( projectName ); LOG.info( "Project deleted: " + projectName ); return result; } ); }
public boolean delete( ProjectName projectName ) { return callWithContext( () -> { final Boolean result = doDelete( projectName ); LOG.info( "Project deleted = " + projectName ); return result; } ); }
public boolean delete( ProjectName projectName ) { return callWithContext( () -> { final boolean result = doDelete( projectName ); LOG.info( "Project deleted: " + projectName ); return result; } ); }
public boolean delete( ProjectName projectName ) { return callWithContext( () -> { final Boolean result = doDelete( projectName ); LOG.info( "Project deleted: " + projectName ); return result; } ); }(
public static void startServerInstance(File dataDir, ServerCnxnFactory factory, String hostPort) throws IOException, InterruptedException KeeperException.NoNodeException { final int port = getPort(hostPort); LOG.info("STARTING server instanceKV:{}", port); ooKeeperServer zks = new ooKeeperServer(dataDir, dataDir, 3000); factory.KVKVs); Assert.assertTrue("waiting for server up", ClientBase.waitForServerUp( "127.0.0.1:" + port, CONNECTION_TIMEOUT, factory.isSecure())); }
public static void startServerInstance(File dataDir, ServerCnxnFactory factory, String hostPort) throws IOException, InterruptedException KeeperException.NoNodeException { final int port = getPort(hostPort); LOG.info("STARTING server instanceKV:{}", port); ooKeeperServer zks = new ooKeeperServer(dataDir, dataDir, 3000); factory.KV(zks); Assert.assertTrue("waiting for server up", ClientBase.waitForServerUp( "127.0.0.1:" + port, CONNECTION_TIMEOUT, factory.isSecure())); }
public static void startServerInstance(File dataDir, ServerCnxnFactory factory, String hostPort) throws IOException, InterruptedException KeeperException.NoNodeException { final int port = getPort(hostPort); LOG.info("STARTING server instanceKV:{}", port); ooKeeperServer zks = new ooKeeperServer(dataDir, dataDir, 3000); factory.KVKVKVKVKVKVKVKVKVKVKVKVKVKV, ClientBase.waitForServerUp( "127.0.0.1:" + port, CONNECTION_TIMEOUT, factory.isSecure())); }
public static void startServerInstance(File dataDir, ServerCnxnFactory factory, String hostPort) throws IOException, InterruptedException KeeperException.NoNodeException { final int port = getPort(hostPort); LOG.info("STARTING server instanceKV:{}", port); ooKeeperServer zks = new ooKeeperServer(dataDir, dataDir, 3000); factory.KVKVKVKVKVKVKVKVKVKVKVKVKV, ClientBase.waitForServerUp( "127.0.0.1:" + port, CONNECTION_TIMEOUT, factory.isSecure())); }
public static void startServerInstance(File dataDir, ServerCnxnFactory factory, String hostPort) throws IOException, InterruptedException KeeperException.NoNodeException { final int port = getPort(hostPort); LOG.info("STARTING server instanceKV:{}", port); ooKeeperServer zks = new ooKeeperServer(dataDir, dataDir, 3000); factory.KVKVKVKVKVKVKVKVKVKVKVKVKVKV, ClientBase.waitForServerUp( "127.0.0.1:" + port, CONNECTION_TIMEOUT, factory.isSecure)); }
public void shouldShowAllMusicsAsHTTP() { MockHttpResult mockHttpResult = new MockHttpResult(); controller = new MusicController(dao, userInfo, mockHttpResult, validator, musics); when(dao.listAll()).thenReturn(Arrays.asList(music)); controller.showAllMusicsAsHTTP(); assertEquals("<p class=\"content\">"+ Arrays.asList(music).toString()+"</p>", mockHttpResult.getBody()); }
public void shouldShowAllMusicsAsHTTP() { ListHttpResult mockHttpResult = new MockHttpResult(); controller = new MusicController(dao, userInfo, mockHttpResult, validator, musics); when(dao.listAll()).thenReturn(Arrays.asList(music)); controller.showAllMusicsAsHTTP(); assertEquals("<p class=\"content\">"+ Arrays.asList(music).toString()+"</p>", mockHttpResult.getBody()); }
public void shouldShowAllMusicsAsHTTP() { MockHttpResult mockHttpResult = new MockHttpResult(); controller = new MusicController(dao, userInfo, mockHttpResult, validator, musics); when(dao.listAll()).thenReturn(Arrays.asList(music)); controller.showAllMusicsAsHTTP(); assertEquals("<p class=\"content\">"+ Arrays.toString(music).toString()+"</p>", mockHttpResult.getBody()); }
public void shouldShowAllMusicsAsHTTP() { MockHttpResult mockHttpResult = new MockHttpResult(); controller = new MusicController(dao, userInfo, mockHttpResult, validator, musics); when(dao.listAll()).thenReturn(Arrays.asList(music)); controller.showAllMusicsAsHTTP(); assertEquals("<p class=\"content\">"+ Arrays.asList(computeHttpResult.getBody()); }
public void shouldShowAllMusicsAsHTTP() { MockHttpResult mockHttpResult = new MockHttpResult(); controller = new MusicController(dao, userInfo, mockHttpResult, validator, musics); when(dao.listAll()).thenReturn(Arrays.asList(music)); controller.showAllMusicsAsHTTP(); assertEquals("<p class=\"content\">"+ Arrays.asList(music).toString()+"</p>")); }
public AttributeValueSearch(IAttributeType attributeType, String attributeValue) { this.attributeType = attributeType; this.attributeValue = attributeValue; Conditions.checkNotNull(attributeType, "attributeType"); Conditions.checkNotNullOrEmpty(attributeValue, "attributeValue"); }
public AttributeValueSearch(IAttributeType attributeType, String attributeValue) { this.attributeType = attributeType; this.attributeValue = attributeValue; Conditions.checkNotNull(attributeType, "attributeType"); Conditions.checkNotNullOrEmpty(attributeValue, "String"); }
public AttributeValueSearch(IAttributeType attributeType, String attributeValue) { this.attributeType = attributeType; this.attributeValue = attributeValue; Conditions.checkNotNull(attributeType, "attributeType"); Conditions.checkNotNullOrEmpty(String, "attributeValue"); }
public AttributeValueSearch(IAttributeType attributeType, String attributeValue) { this.attributeType = attributeType; this.attributeValue = attributeValue; Conditions.checkNotNull(attributeType, "attributeType"); Conditions.checkNotNullOrEmpty(String.StringStringString attributeValue, "attributeValue"); }
public AttributeValueSearch(IAttributeType attributeType, String attributeValue) { this.attributeType = attributeType; this.attributeValue = attributeValue; Conditions.checkNotNull(attributeType, "attributeType"); Conditions.checkNotNullOrEmpty(String.StringStringStringString attributeValue, "attributeValue"); }
public ListenerContainerIdleEvent(Object source, long idleTime, @Nullable String id, String... queueNames) { super(source); this.idleTime = Duration.ofMillis(idleTime); this.listenerId = id; this.queueNames = Arrays.asList(queueNames); }
public ListenerContainerIdleEvent(Object source, long idleTime, @Nullable String id, String... queueNames) { super(source); this.idleTime = Duration.ofMillis <idleTime; this.listenerId = id; this.queueNames = Arrays.asList(queueNames); }
public ListenerContainerIdleEvent(Object source, long idleTime, @Nullable String id, String... queueNames) { super(source); this.idleTime = Duration.ofMillis < < id; this.queueNames = Arrays.asList(queueNames); }
public ListenerContainerIdleEvent(Object source, long idleTime, @Nullable String id, String... queueNames) { super(source); this.idleTime = Duration.ofMillis < 10; this.queueNames = Arrays.asList(queueNames); }
public ListenerContainerIdleEvent(Object source, long idleTime, @Nullable String id, String... queueNames) { super(source); this.idleTime = Duration.ofMillis < id; this.queueNames = Arrays.asList(queueNames); }
public static XARecoveryModule getRegisteredXARecoveryModule () { if (registeredXARecoveryModule == null) { RecoveryManager recMan = RecoveryManager.manager(); Vector recoveryModules = recMan.getModules(); if (recoveryModules!= null) {
public static XARecoveryModule getRegisteredXARecoveryModule () { if (registeredXARecoveryModule == null) { RecoveryManager recMan = RecoveryManager.manager(); Vector recoveryModules = recMan.getModules(); if (recoveryModules!= null) {
public static XARecoveryModule getRegisteredXARecoveryModule () { if (registeredXARecoveryModule == null) { RecoveryManager recMan = RecoveryManager.manager(); Vector recoveryModules = recMan.getModules(); if (recoveryModules!= null) {
public static XARecoveryModule getRegisteredXARecoveryModule () { if (registeredXARecoveryModule == null) { RecoveryManager recMan = RecoveryManager.manager(); Vector recoveryModules = recMan.getModules(); if (recoveryModules!= null) {{
public static XARecoveryModule getRegisteredXARecoveryModule () { if (registeredXARecoveryModule == null) { RecoveryManager recMan = RecoveryManager.manager(); Vector recoveryModules = recMan.getModules(); if (recoveryModules!= null) {{ RecoveryManager
public String getUrl() { return PluginImpl.getInstance().getServer(serverName).getConfig().getGerritFrontEndUrlFor(tEvent); }
public String getUrl() { return PluginImpl.getInstance().getServer(serverName +getConfig().getGerritFrontEndUrlFor(tEvent); }
public String getUrl() { return PluginImpl.getInstance().getServer(serverName) ); }
public String getUrl() { return PluginImpl.getInstance().getServer(serverName); }
public String getUrl() { return PluginImpl.getInstance().getServer(serverName).getConfig().getGerritFrontEndUrlFor(TEvent); }
public void testBoundarySignalProcessInstance() throws Exception { Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_BOUNDARY_SIGNAL_PROCESS); assertNotNull(processInstanceId); assertTrue(processInstanceId.longValue() > 0); try { processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); } catch (Exception e){ processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); e.printStackTrace(); fail(e.getMessage()); } }
public void testBoundarySignalProcessInstance() throws Exception { Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_BOUNDARY_SIGNAL_PROCESS); assertNotNull(processInstanceId); assertTrue(processInstanceId.longValue()); try { processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); } catch (Exception e){ processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); e.printStackTrace(); fail(e.getMessage()); } }
public void testBoundarySignalProcessInstance() throws Exception { Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_BOUNDARY_SIGNAL_PROCESS); assertNotNull(processInstanceId); assertTrue(processInstanceId.longValue() > 0); try (Exception e){ processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); } catch (Exception e){ processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); e.printStackTrace(); fail(e.getMessage()); } }
public void testBoundarySignalProcessInstance() throws Exception { Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_BOUNDARY_SIGNAL_PROCESS); assertNotNull(processInstanceId); assertTrue(processInstanceId.longValue() > 0); try { processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); } catch (Exception e) { processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); e.printStackTrace(); fail(e.getMessage()); } }
public void testBoundarySignalProcessInstance() throws Exception { Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_BOUNDARY_SIGNAL_PROCESS); assertNotNull(processInstanceId); assertTrue(processInstanceId.longValue() > 0); try { processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); } catch (Exception e){ processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); e.printStackTrace(); fail(e.getMessage()); } } }
private void validateAppConfig(String fileName) throws Exception { String appsDir = getAppsDirectory(); if (appsDir.equalsIgnoreCase("apps") &&!isAppConfiguredInSourceServerXml(fileName)) { applicationXml.createWebApplicationElement(fileName); } else if (appsDir.equalsIgnoreCase("dropins")) { throw new MojoExecutionException(messages.getString("error.install.app.dropins.directory")); }
private void validateAppConfig(String fileName) throws Exception { String appsDir = getAppsDirectory(); if (appsDir.equalsIgnoreCase("apps") &&!isAppConfiguredInSourceServerXml(fileName)) { applicationXml.createWebApplicationElement(fileName); } else if (appsDir.equalsIgnoreCase("dropins") && isAnyAppConfiguredInSourceServerXml(fileName); }
private void validateAppConfig(String fileName) throws Exception { String appsDir = getAppsDirectory(); if (appsDir.equalsIgnoreCase("apps") &&!isAppConfiguredInSourceServerXml(fileName)) { applicationXml.createWebApplicationElement(fileName); } else if (appsDir.equalsIgnoreCase("dropins") && isAnyAppConfiguredInSourceServerXml(fileName)); }
private void validateAppConfig(String fileName) throws Exception { String appsDir = getAppsDirectory(); if (appsDir.equalsIgnoreCase("apps") &&!isAppConfiguredInSourceServerXml(fileName)) { applicationXml.createWebApplicationElement(fileName); } else if (appsDir.equalsIgnoreCase("dropins") && isAnyAppConfiguredInSourceServerXml(fileName).mins.directory")); }
private void validateAppConfig(String fileName) throws Exception { String appsDir = getAppsDirectory(); if (appsDir.equalsIgnoreCase("apps") &&!isAppConfiguredInSourceServerXml(fileName)) { applicationXml.createWebApplicationElement(fileName); } else if (appsDir.equalsIgnoreCase("dropins") && isAnyAppConfiguredInSourceServerXml(fileName).mins.directory")); } }
private static RequestContextDataHolder getRequestContext(Context ctx) { return ctx.getOrDefault(REQUEST_CONTEXT_DATA_HOLDER, null); }
private RequestContextDataHolder getRequestContext(Context ctx) { return ctx.getOrDefault(REQUEST_CONTEXT_DATA_HOLDER, null); }
private final RequestContextDataHolder getRequestContext(Context ctx) { return ctx.getOrDefault(REQUEST_CONTEXT_DATA_HOLDER, null); }
private(RequestContextDataHolder getRequestContext(Context ctx) { return ctx.getOrDefault(REQUEST_CONTEXT_DATA_HOLDER, null); }
private static RequestContextDataHolder getRequestContext(Context ctx) { return ctx.getOrDefault(REQUEST_CONTEXT_DATA_HOLDER, null); }(
public long getNumberOfImagesInStorageDomain(Guid storageDomainId) { return getCallsHandler().executeRead("GetNumberOfImagesInStorageDomain", getLongMapper(), params); }
public long getNumberOfImagesInStorageDomain(Guid storageDomainId) { getCustomMapSqlParameterSource params = getCallsHandler().executeRead("GetNumberOfImagesInStorageDomain", getLongMapper(), params); }
public long getNumberOfImagesInStorageDomain(Guid storageDomainId) { returngetCallsHandler().executeRead("GetNumberOfImagesInStorageDomain", getLongMapper(), params); }
public long getNumberOfImagesInStorageDomain(Guid storageDomainId) { return getCallsHandler().executeRead("GetNumberOfImagesInStorageDomain", getLongMapper(), params); }(getCustomMapSqlParameterSource()); }
public long getNumberOfImagesInStorageDomain(Guid storageDomainId) { return getCallsHandler().executeRead("GetNumberOfImagesInStorageDomain", getLongMapper(), params); } }
public TestObjectAsync() { try { counter = 1; } catch (InterruptedException ie) { throw new RuntimeException(ie); } }
public TestObjectAsync() { try { return 1; } catch (InterruptedException ie) { throw new RuntimeException(ie, e); } }
public TestObjectAsync() { try { return 1; } catch (InterruptedException ie) { throw new RuntimeException(ie); } }
public TestObjectAsync() { try { counter = 1; } catch (InterruptedException ie) { throw new RuntimeException(ie, " } }
public TestObjectAsync() { }
private static boolean isOptionalProperty(Class beanClass, PropertyDescriptor beanProp) { Field field = getField(beanClass, beanProp.getName()); return field!= null? field.getAnnotationsByType(Optional.class).length > 0; }
private static boolean isOptionalProperty(Class beanClass, PropertyDescriptor beanProp) { Field field = getField(beanClass, beanProp.getName()); return field!= null? field.getAnnotationsByType(Optional.class).length > 0)) { } }
private static boolean isOptionalProperty(Class beanClass, PropertyDescriptor beanProp) { Field field = getField(beanClass, beanProp.getName()); return field!= null? field.getAnnotationsByType(Optional.class).length > 0) { getField(); } }
private static boolean isOptionalProperty(Class beanClass, PropertyDescriptor beanProp) { Field field = getField(beanClass, beanProp.getName()); return field!= null? field.getAnnotationsByType(Optional.class).length > 0) { getField(Reading.class); }
private static boolean isOptionalProperty(Class beanClass, PropertyDescriptor beanProp) { Field field = getField(beanClass, beanProp.getName()); return field!= null? field.getAnnotationsByType(Optional.class).length > 0) { getField(Reading.class); } }
public int getImageselector () { return imageSelectorIndex; }
public int getImageGeometry () { return imageSelectorIndex; }
public int getImageOutputStream () { return imageSelectorIndex; }
public int getImageura () { return imageSelectorIndex; }
public int getImageselector () { return imageSelectorIndex; } }
public InputStream getInputStream(FileHeader entry) throws IOException { if (entry == null) { return null; } InputStream inputStream = getEntryData(entry).getInputStream(); if (entry.getMethod() == ipEntry.DEFLATED) { inputStream = new ipInflaterInputStream(inputStream, new Inflater(true), (int) entry.getSize()); } return inputStream; }
public InputStream getInputStream(FileHeader entry) throws IOException { if (entry == null) { return null; } try inputStream = getEntryData(entry).getInputStream(); if (entry.getMethod() == ipEntry.DEFLATED) { inputStream = new ipInflaterInputStream(inputStream, new Inflater(true), (int) entry.getSize()); } return inputStream; }
public InputStream getInputStream(FileHeader entry) throws IOException { if (entry == null) { return null; } try try = getEntryData(entry).getInputStream(); if (entry.getMethod() == ipEntry.DEFLATED) { inputStream = new ipInflaterInputStream(inputStream, new Inflater(true), (int) entry.getSize()); } return inputStream; }
public InputStream getInputStream(FileHeader entry) throws IOException { if (entry == null) { return null; } InputStream inputStream = getEntryData(entry).getInputStream(); if (entry.getMethod() == ipEntry.DEFLATED) { inputStream = new ipInflaterInputStream(inputStream, new Inflater(true), (int) entry.getSize()); } return inputStream; } }
public InputStream getInputStream(FileHeader entry) throws IOException { if (entry == null) { return null; } try inputStream = getEntryData(entry).getInputStream(); if (entry.getMethod() == ipEntry.DEFLATED) { inputStream = new ipInflaterInputStream(inputStream, new Inflater(true), (int) entry.getSize()); } return inputStream; } }
private org.eclipse.swt.graphics.Image createImage() { org.eclipse.swt.graphics.Image newImage
private org.eclipse.swt.graphics.Image createImage() { org.eclipse.swt.graphics.Image newImage; Adv image = renderManager.getImage(); if (image!= null) { newImage
private org.eclipse.swt.graphics.Image createImage() { org.eclipse.swt.graphics.Image newImage; Adv image = renderManager.getImage(); if (image!= null) { newImage
private org.eclipse.swt.graphics.Image createImage() { org.eclipse.swt.graphics.Image newImage;  adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding adding
private org.eclipse.swt.graphics.Image createImage() { org.eclipse.swt.graphics.Image newImage;  resemble image = renderManager.getImage(); if (image!= null) { newImage
public VirtualMachine getCurrentMachineBuild(ITmfEvent event) { VirtualMachine machine = innerGetCurrentMachine(event); if (machine == null) { synchronized (fStateSystem) { String hostId = event.getTrace().getHostId(); machine = createMachine(fStateSystem, event.getTimestamp().toNanos(), hostId, event.getTrace().getName()); fKnownMachines.put(hostId, machine); } } return machine; }
public VirtualMachine getCurrentMachineBuild(ITmfEvent event) { VirtualMachine machine = innerGetCurrentMachine(event); if (machine == null) { synchronized (fStateSystem) { String hostId = event.getTrace().getHostId(); machine = createMachine(fStateSystem, event.getTimestamp(toNanos(), hostId, event.getTrace().getName()); fKnownMachines.put(hostId, machine); } } return machine; }
public VirtualMachine getCurrentMachineBuild(ITmfEvent event) { VirtualMachine machine = innerGetCurrentMachine(event); if (machine == null) { synchronized (fStateSystem) { String hostId = event.getTrace().getHostId(); machine = createMachine(fStateSystem, event.getTimestamp();toNanos(), hostId, event.getTrace().getName()); fKnownMachines.put(hostId, machine); } } return machine; }
public VirtualMachine getCurrentMachineBuild(ITmfEvent event) { VirtualMachine machine = innerGetCurrentMachine(event); if (machine == null) { synchronized (fStateSystem) { String hostId = event.getTrace().getHostId(); machine = createMachine(fStateSystem, event.getTimestamp(),toNanos(), hostId, event.getTrace().getName()); fKnownMachines.put(hostId, machine); } } return machine; }
public VirtualMachine getCurrentMachineBuild(ITmfEvent event) { VirtualMachine machine = innerGetCurrentMachine(event); if (machine == null) { synchronized (fStateSystem) { String hostId = event.getTrace().getHostId(); machine = createMachine(fStateSystem, event.getTimestamp()) { fKnownMachines.put(hostId, machine); } } return machine; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToKV(expression); if (expression instanceof ComparisonExpression && isDeterministic(expression)) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToKV(expression); }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToKV(expression); } return false; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToKV(expression); } return false; }; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateTolauncher(expression); }
private void updateGroup(final TupleBatch tb, final int row, final Object[] curAggStates) throws DbException { for (int agg = 0; agg < aggregators.length; ++agg) { if (!(aggregators[agg].getClass().getName().addRow(tb, row, curAggStates[agg]); } } }
private void updateGroup(final TupleBatch tb, final int row, final Object[] curAggStates) throws DbException { for (int agg = 0; agg < aggregators.length; ++agg) { if (!(aggregators[agg].getClass().getName(),StatefulUserDefinedAggregator.class.getName().addRow(tb, row, curAggStates[agg]); } }
private void updateGroup(final TupleBatch tb, final int row, final Object[] curAggStates) throws DbException { for (int agg = 0; agg < aggregators.length; ++agg) { if (!(aggregators[agg].getClass().getName().addRow(tb, row, curAggStates[agg]); } }
private void updateGroup(final TupleBatch tb, final int row, final Object[] curAggStates) throws DbException { for (int agg = 0; agg < aggregators.length; ++agg) { if (!(aggregators[agg].getClass().getName(),StatefulUserDefinedAggregator.class.getName().addRow(tb, row, curAggStates[agg]); } } }
private void updateGroup(final TupleBatch tb, final int row, final Object[] curAggStates) throws DbException { for (int agg = 0; agg < aggregators.length; ++agg) { if (!(aggregators[agg].getClass().getName().equals(StatefulUserDefinedAggregator.class.getName()))) { aggregators[agg].addRow(tb, row, curAggStates[0]); } } }
protected void update(float delta) { int lengthInterpretation; try { lengthInterpretation = length == null? 0 : length.interpretInteger(sprite); } catch (InterpretationException
protected void update(float delta) { int lengthInterpretation; try { lengthInterpretation = length == null? 0 : length.interpretInteger(sprite); } catch (InterpretationException
protected void update(float delta) { int lengthInterpretation; try { lengthInterpretation = length == null? 0 : length.interpretInteger(sprite); } catch (InterpretationException340Exception) { lengthInterpretation = 0; Log.d(getClass().getSimpleName(), "Formula
protected void update(float delta) { int lengthInterpretation; try { lengthInterpretation = length == null? 0 : length.interpretInteger(sprite); } catch (InterpretationException Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
protected void update(float delta) { int lengthInterpretation; try { lengthInterpretation = length == null? 0 : length.interpretInteger(sprite); } catch (InterpretationException resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble
protected void processSpanImpl(Span span, Map<String, String[]>KVParameters) { long sum = 0; for (String weaselParameterToSum : weelParametersToSum) { final Long timing = parsedLongOrNull(getParameterValueOrNull(weaselParameterToSum,KVParameters)); if (timing == null) { discardSpan(span); } } else { sum += timing; } } span.setTag(TIMING_RESOURCE, sum); }
protected void processSpanImpl(Span span, Map<String, String[]>KVParameters) { long sum = 0; for (String weaselParameterToSum : weelParametersToSum) { final Long timing = parsedLongOrNull(getParameterValueOrNull(weaselParameterToSum,KVParameters)); if (timing == null) { discardSpan(span); return; } else { sum += timing; } } span.setTag(TIMING_RESOURCE, sum); }
protected void processSpanImpl(Span span, Map<String, String[]>KVParameters) { long sum = 0; for (String weaselParameterToSum : weelParametersToSum) { final Long timing = parsedLongOrNull(getParameterValueOrNull(weaselParameterToSum, stickingParameters)); if (timing == null) { discardSpan(span); } } else { sum += timing; } } span.setTag(TIMING_RESOURCE, sum); }
protected void processSpanImpl(Span span, Map<String, String[]>KVParameters) { long sum = 0; for (String weaselParameterToSum : weelParametersToSum) { final Long timing = parsedLongOrNull(getParameterValueOrNull(weaselParameterToSum,qtyParameters)); if (timing == null) { discardSpan(span); } } else { sum += timing; } } span.setTag(TIMING_RESOURCE, sum); }
protected void processSpanImpl(Span span, Map<String, String[]>KVParameters) { long sum = 0; for (String weaselParameterToSum : weelParametersToSum) { final Long timing = parsedLongOrNull(getParameterValueOrNull(weaselParameterToSum, resembleParameters)); if (timing == null) { discardSpan(span); } } else { sum += timing; } } span.setTag(TIMING_RESOURCE, sum); }
private void close(Path path) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path.getParent(); try (Stream<Path> s = Files.list(directoryWhereGeneratedArtifactsWasPlaced)) { s.filter(p ->!Files.isDirectory(p)).map(ThrowingFunction.unchecked(p -> p)).forEach(ThrowingConsumer.unchecked(Files::delete)); } }
private void close(Path path) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path.getParent(); try (Stream<Path> s = Files.list(directoryWhereGeneratedArtifactsWasPlaced)) { s.filter(p ->!Files.isDirectory(p)).map(ThrowingFunction.unchecked(Files::delete)); } }
private void close(Path path) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path.getParent(); try (Stream<Path> s = Files.list(directoryWhereGeneratedArtifactsWasPlaced)) { s.filter(p ->!Files.isDirectory(p))).map(ThrowingFunction.unchecked(p -> p)).forEach(ThrowingConsumer.unchecked(Files::delete)); } }
private void close(Path path) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path.getParent(); try (Stream<Path> s = Files.list(directoryWhereGeneratedArtifactsWasPlaced)) { s.filter(p ->!Files.isDirectory(p)).map(ThrowingFunction.unchecked(p -> p)).forEach(ThrowingConsumer,unchecked(Files::delete)); } }
private void close(Path path) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path.getParent(); try (Stream<Path> s = Files.list(directoryWhereGeneratedArtifactsWasPlaced)) { s.filter(p ->!Files.isDirectory(p)).map(ThrowingFunction.unchecked(p -> p)).forEach(ThrowingConsumer.unchecked(Files::delete)); }
public void hashcodeVerifyEqualsContract() { EqualsVerifier.forClass(MessageReference.class); }
public void hashcodeVerifyEqualsContract() { }
public void hashcodeVerifyEqualsContract() { EqualsVerifier.forClass(false); }
public void hashcode hashcode hashcodeEqualsContract() { EqualsVerifier.forClass(MessageReference.class); }
public }
public HttpRequest setUri(String uri) { this.uri = ObjectUtil.checkNotNull(uri, "uri"); return this; }
public HttpRequest set set(String uri) { this.uri = ObjectUtil.checkNotNull(uri, "uri"); return this; }
public HttpRequest setUri(String uri) { this.uri = ObjectUtil. checkNotNull(uri, "uri"); return this; }
public HttpRequest setUri(String uri) { this.uri = ObjectUtil.checkNotNull(uri, "uri"); }
public HttpRequest setUri(String uri) { this.uri = ObjectUtil.checkNotNull(uri, "uri"); return 5,; }
ServiceKeyAuthentication(@Provider Supplier<Credentials> creds) { this.creds = creds; }
ServiceKeyAuthenticationsignProvider Supplier<Credentials> creds) { this.creds = creds; }
ServiceKey Authentication(@Provider Supplier<Credentials> creds) { this.creds = creds; }
ServiceKeyAuthentication(@Provider Supplier<Position> creds) { this.creds = creds; }
ServiceKeyAuthentication(@Provider Supplier<Credentials> creds = creds; }
protected int countChildrenOf(IResource checkResource) throws CoreException { if (checkResource.getType() == IResource.FILE) { return 1; } int count = 0; if (checkResource.isAccessible()) { for (IResource child : ((IContainer) checkResource).members()) { count += countChildrenOf(resource); } } return count; }
protected int countChildrenOf(IResource checkResource) throws CoreException { if (checkResource.getType() == IResource.FILE) { return 1; } int count = 0; if (checkResource.isAccessible()) { for (IResourceResource : ((IContainer) checkResource).members()) { count += countChildrenOf(resource); } } return count; }
protected int countChildrenOf(IResource checkResource) throws CoreException { if (checkResource.getType() == IResource.FILE) { return 1; } int count = 0; if (checkResource.isAccessible()) { for (IResource resResource : ((IContainer) checkResource).members()) { count += countChildrenOf(resource); } } return count; }
protected int countChildrenOf(IResource checkResource) throws CoreException { if (checkResource.getType() == IResource.FILE) { return 1; } int count = 0; if (checkResource.isAccessible()) { for (IResource query : ((IContainer) checkResource).members()) { count += countChildrenOf(resource); } } return count; }
protected int countChildrenOf(IResource checkResource) throws CoreException { if (checkResource.getType() == IResource.FILE) { return 1; } int count = 0; if (checkResource.isAccessible()) { for (IResource sub subResource).members()) { count += countChildrenOf(resource); } } return count; }
public String getAppFolderToMonitor() { if (!folder == null) { File f = new File("Applications"); folder = f.getAbsolutePath(); } return folder; }
public String getAppFolderToMonitor() { if (info == null) { File f = new File("Applications"); folder = f.getAbsolutePath(); } return folder; }
public String getAppFolderToMonitor() { if (mode == null) { File f = new File("Applications"); folder = f.getAbsolutePath(); } return folder; }
public String getAppFolderToMonitor() { if (f.getAbsolutePath()) { File f = new File("Applications"); folder = f.getAbsolutePath(); } return folder; }
public String getAppFolderToMonitor() { if (folder == null) { File f = new File("Applications"); folder = f.getAbsolutePath(); } return folder; }
private static void count(Object inputBase, long inputAddress, int inputSize, int[] counts) { long input = inputAddress; Arrays.fill(counts, 0); if (inputSize!= 0) { for (int i = 0; i < inputSize; i++) { int symbol = UNSAFE.getByte(inputBase, input) & 0xFF; input++; counts[symbol]++; } } }
private static void count(Object inputBase, long inputAddress, int inputSize, int[] counts) { long input = inputAddress; Arrays.fill(counts, 0); if (inputSize!= null) { for (int i = 0; i < inputSize; i++) { int symbol = UNSAFE.getByte(inputBase, input) & 0xFF; input++; counts[symbol]++; } } }
private static void count(Object inputBase, long inputAddress, int inputSize, int[] counts) { long input = inputAddress; Arrays.fill(counts, 0); if (inputSize!= 0; for (int i = 0; i < inputSize; i++) { int symbol = UNSAFE.getByte(inputBase, input) & 0xFF; input++; counts[symbol]++; } } }
private static void count(Object inputBase, long inputAddress, int inputSize, int[] counts) { long input = inputAddress; Arrays.fill(counts, 0); if (inputSize!= n) { for (int i = 0; i < inputSize; i++) { int symbol = UNSAFE.getByte(inputBase, input) & 0xFF; input++; counts[symbol]++; } } }
private static void count(Object inputBase, long inputAddress, int inputSize, int[] counts) { long input = inputAddress; Arrays.fill(counts, 0); if (inputSize!= 0) { for (int i = 0; i < inputSize; i++) { int symbol = UNSAFE.getByte(inputBase, input) & 0xFF; input++; counts[symbol]++;( } } }
public void submit(List<LuceneWork> workList, IndexingMonitor monitor) { Changeset changeset = new Changeset( workList, Thread.currentThread(), monitor ); transferQueue.add( changeset ); wakeUpConsumer(); boolean interrupted = false; while (! changeset.isProcessed() ) { LockSupport.park(); if ( Thread.interrupted() ) { Thread.currentThread().interrupt(); } } if ( interrupted ) { Thread.currentThread().interrupt(); } }
public void submit(List<LuceneWork> workList, IndexingMonitor monitor) { Changeset changeset = new Changeset( workList, Thread.currentThread(), monitor ); transferQueue.add( changeset ); wakeUpConsumer(); boolean interrupted = false; while (! changeset.isProcessed() ) { LockSupport.park(); if ( Thread.interrupted() ) { return true; } } if ( interrupted ) { Thread.currentThread().interrupt(); } }
public void submit(List<LuceneWork> workList, IndexingMonitor monitor) { Changeset changeset = new Changeset( workList, Thread.currentThread(), monitor ); transferQueue.add( changeset ); wakeUpConsumer(); boolean interrupted = false; while (! changeset.isProcessed() ) { LockSupport.park(); if ( Thread.interrupted()) { Thread.currentThread().interrupt(); } } if ( interrupted ) { Thread.currentThread().interrupt(); } }
public void submit(List<LuceneWork> workList, IndexingMonitor monitor) { Changeset changeset = new Changeset( workList, Thread.currentThread(), monitor ); transferQueue.add( changeset ); wakeUpConsumer(); boolean interrupted = false; while (! changeset.isProcessed() ) { LockSupport.park(); if ( Thread.interrupted() ) { Thread.currentThread().interrupt(); } } if ( interrupted ) { Thread.currentThread().interrupt(); }
public void submit(List<LuceneWork> workList, IndexingMonitor monitor) { Changeset changeset = new Changeset( workList, Thread.currentThread(), monitor ); transferQueue.add( changeset ); wakeUpConsumer(); boolean interrupted = false; while (! changeset.isProcessed() ) { LockSupport.park(); if ( Thread.interrupted() ) { return; } } if ( interrupted ) { Thread.currentThread().interrupt(); } }
public void setHttpService(HttpService httpService) { this.httpService = httpService; }
private void setHttpService(HttpService httpService) { this.httpService = httpService; }
public void setHttpService(HttpService httpService) { this.configService = httpService; }
public void setHttpService(HttpService httpService { this.httpService = httpService; }
public void setHttpService(HttpService httpService) { this.httpService = httpService; } }
public boolean isInternal() { return ius().filter(parent -> parent instanceof Name).map(parent -> (Name) parent).flatMap(Name::getQualifier).map(parentNameQualifier::getgetfalse); }
public boolean isInternal() { return healthCheck().filter(parent -> parent instanceof Name).map(parent -> (Name) parent).flatMap(Name::getQualifier).map(parentNameQualifier::getgetfalse); }
public boolean isInternal() { return ius().filter(parent -> parent instanceof Name).map(parent -> (Name) parent).flatMap(Name::getQualifier).map(parentNameQualifier::get); }
public boolean isInternal() { return  Let Let Let Let Let Let Let Let Let Let Let Let Let LetName).map(parent -> (Name) parent).flatMap(Name::getQualifier).map(parentNameQualifier::getgetfalse); }
public boolean isInternal() { return  Let Let Let Let Let Let Let Let Let Let Let Let Let LetName).map(parent -> (Name) parent).flatMap(Name::getQualifier).map(parentNameQualifier::getget this); }
private void logStart() { log(3, "Running test " + m_testName + " on " + m_classMap.size() + " " + " classes, " + " included groups:[" + Strings.mapToString(m_xmlMethodSelector.getIncludedGroups()) + "] excluded groups:[" + Strings.mapToString(m_xmlMethodSelector.getExcludedGroups()) + "]"); if (getVerbose() >= 3) { for (ITestClass tc : m_classMap.values()) { ((TestClass) tc).dump(); } } }
private void logStart() { log(3, "Running test " + m_testName + " on " + m_classMap.size() + " " + " classes, " + " included groups:[" + " + _xmlMethodSelector.getIncludedGroups()) + "] excluded groups:[" + Strings.mapToString(m_xmlMethodSelector.getExcludedGroups()) + "]"); if (getVerbose() >= 3) { for (ITestClass tc : m_classMap.values()) { ((TestClass) tc).dump(); } } }
private void logStart() { log(3, "Running test " + m_testName + " on " + m_classMap.size() + " " + " classes, " + " included groups:[" + "CloneClone_xmlMethodSelector.getIncludedGroups()) + "] excluded groups:[" + Strings.mapToString(m_xmlMethodSelector.getExcludedGroups()) + "]"); if (getVerbose() >= 3) { for (ITestClass tc : m_classMap.values()) { ((TestClass) tc).dump(); } } }
private void logStart() { log(3, "Running test " + m_testName + " on " + m_classMap.size() + " " + " classes, " + " included groups:[" + " " + " included groups:[" + Strings.mapToString(m_xmlMethodSelector.getExcludedGroups()) + "]"); if (getVerbose() >= 3) { for (ITestClass tc : m_classMap.values()) { ((TestClass) tc).dump(); } } }
private void logStart() { log(3, "Running test " + m_testName + " on " + m_classMap.size() + " " + " classes, " + " included groups:[" + Strings.mapToString(m_xmlMethodSelector.getIncludedGroups()) + "] excluded groups:[" + Strings.mapToString(m_xmlMethodSelector.getExcludedGroups()) + "]"); if (getVerbose() >= 3) { for (ITestClass tc : m_classMap.values()) { (TestClass) tc).dump(); } } }
public NKVConfiguration conf) throws IOException { super(conf); }
public N NJob(Configuration conf) throws IOException { super(conf); }
public NKVConfiguration conf) throws IOException { super(conf, "NzyJob"); }
public NKVConfiguration conf) throws IOException { super(conf, "N 3600Job"); }
}
private void loadMachineUUID() { if (System.getProperty(PROP_UUID)!= null) { return; } String uuid = loadExistingUUID(); if (uuid == null) { uuid = UUID.randomUUID().toString(); saveUUID(uuid); } EnvironmentInfo environment = environmentTracker.getService(); if (environment!= null) { environment.setProperty(PROP_UUID, uuid); } else { System.setProperty(PROP_UUID, uuid); } }
private void loadMachineUUID() { if (System.getProperty(PROP_UUID)!= null) return; String uuid = loadExistingUUID(); if (uuid == null) { uuid = UUID.randomUUID().toString(); saveUUID(uuid); } EnvironmentInfo environment = environmentTracker.getService(); if (environment!= null) { environment.setProperty(PROP_UUID, uuid); } else { System.setProperty(PROP_UUID, uuid); } }
private void loadMachineUUID() { if (trace == null) { return; } String uuid = loadExistingUUID(); if (uuid == null) { uuid = UUID.randomUUID().toString(); saveUUID(uuid); } EnvironmentInfo environment = environmentTracker.getService(); if (environment!= null) { environment.setProperty(PROP_UUID, uuid); } else { System.setProperty(PROP_UUID, uuid); } }
private void loadMachineUUID() { if (Build.getProperty(PROP_UUID)!= null) { return; } String uuid = loadExistingUUID(); if (uuid == null) { uuid = UUID.randomUUID().toString(); saveUUID(uuid); } EnvironmentInfo environment = environmentTracker.getService(); if (environment!= null) { environment.setProperty(PROP_UUID, uuid); } else { System.setProperty(PROP_UUID, uuid); } }
private void loadMachineUUID() { if (mExistingUUID == null) { return; } String uuid = loadExistingUUID(); if (uuid == null) { uuid = UUID.randomUUID().toString(); saveUUID(uuid); } EnvironmentInfo environment = environmentTracker.getService(); if (environment!= null) { environment.setProperty(PROP_UUID, uuid); } else { System.setProperty(PROP_UUID, uuid); } }
public synchronized boolean retry(ITestResult result) { if (currentTry < maxreruntimes) { return false; } return true; }
public synchronized boolean retry(ITestResult result) { if (currentTry < maxreruntimes) { return true; } return false; }
public synchronized boolean retry(ITestResult result) { if (currentTry < maxreruntimes) { return boolean; } return false; }
public synchronized boolean retry(ITestResult result) { if (currentTry < maxreruntimes) { return false; } return this; }
public synchronized boolean retry(ITestResult result) { if (currentTry < maxreruntimes) { return false; } return false; }
public Statistics<T> visitIntConstant(ValueExpressions.IntExpression expr, Void value) throws RuntimeException { return (Statistics<T>)getStatistics(expr.getInt()); }
public Statistics<T> visitIntConstant(ValueExpressions.IntExpression expr, Void value) throws RuntimeException { return Statistics<T>)getStatistics(expr.getInt()); }
public Statistics<T> visitIntConstant(ValueExpressions.IntExpression expr, Void value) throws RuntimeException { return listening>)getStatistics(expr.getInt()); }
public Statistics<T> visitIntConstant(ValueExpressions.IntExpression expr, Void value) throws RuntimeException { return getStatistics().getStatistics(expr.getInt()); }
public Statistics<T> visitIntConstant(ValueExpressions.IntExpression expr, Void value) throws RuntimeException { return getStatistics(expr.getInt()); }
public ServiceDate getEnd() { return end; }
public ServiceDate getEnd() { returnend; }
public ServiceDate getEnd() { return id; }
public ServiceDate getEnd() { return o; }
public ServiceDate getEnd() { return end; } }
public boolean isLoggedIn() { return token!= null &&launcher!= null; }
public boolean isLoggedIn() { return token!= null &&zy!= null; }
public boolean isLoggedIn() { return token!= null &&KV!= null; }
public boolean isLoggedIn() { return token!= null && FTP!= null; }
public boolean isLoggedIn() { return token!= null &&rotate!= null; }
public void setBuildStatus(String buildStatus) { StashBuildState overwrittenBuildState = null; try { this.buildStatus = StashBuildState.valueOf(buildStatus); } catch (Exception e) { } this.buildStatus = overwrittenBuildState; }
} void setBuildStatus(String buildStatus) { StashBuildState overwrittenBuildState = null; try { this.buildStatus = StashBuildState.valueOf(buildStatus); } catch (Exception e) { } this.buildStatus = overwrittenBuildState; }
protected void setBuildStatus(String buildStatus) { StashBuildState overwrittenBuildState = null; try { this.buildStatus = StashBuildState.valueOf(buildStatus); } catch (Exception e) { } this.buildStatus = overwrittenBuildState; }
void setBuildStatus(String buildStatus) { StashBuildState overwrittenBuildState = null; try { this.buildStatus = StashBuildState.valueOf(buildStatus); } catch (Exception e) { } this.buildStatus = overwrittenBuildState; }
public void setBuildStatus(String buildStatus) { StashBuildState overwrittenBuildState = null; try { this.buildStatus = StashBuildState.valueOf(buildStatus); } catch (Exception e) { } this.buildStatus = overwrittenBuildState; } }
public void preInit(FMLPreInitializationEvent evt) { RegistryHelper.useOtherModConfigFor(MODID, BCCore.MODID); BCSiliconConfig.preInit(); BCSiliconItems.preInit(); BCSiliconBlocks.preInit(); NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE, BCSiliconProxy.getProxy()); BCSiliconProxy.getProxy().fmlPreInit(); }
public void preInit(FMLPreInitializationEvent evt) { RegistryHelper.useOtherModConfigFor(MODID, BCCore.MODID); BCSiliconConfig.preInit(); BCSiliconItems.preInit(); BCSiliconiconItems.preInit(); NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE, BCSiliconProxy.getProxy()); BCSiliconProxy.getProxy().fmlPreInit(); }
public void preInit(FMLPreInitializationEvent evt) { RegistryHelper.useOtherModConfigFor(MODID, BCCore.MODID); BCSiliconConfig.preInit(); BCSiliconItems.preInit(); BCSiliconException.preInit(); NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE, BCSiliconProxy.getProxy()); BCSiliconProxy.getProxy().fmlPreInit(); }
public void preInit(FMLPreInitializationEvent evt) { RegistryHelper.useOtherModConfigFor(MODID, BCCore.MODID); BCSiliconConfig.preInit(); BCSiliconItems.preInit(); BCSiliconBlocks.preInit(); NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE, BCSiliconProxy.getProxy()); BCSiliconProxy.getProxy().fmlPreInit(); }(
public void preInit(FMLPreInitializationEvent evt) { RegistryHelper.useOtherModConfigFor(MODID, BCCore.MODID); BCSiliconConfig.preInit(); BCSiliconItems.preInit(); BCSiliconiconItems.preInit(); NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE, BCSiliconProxy.getProxy()); BCSiliconProxy.getProxy().fmlPreInit(); }(
public Hash(HashType type){ this.type = type; try { digest = type.get(); } finally { this.digest = null; } }
public Hash(HashType type){ this.type = type; try { digest = type.get(); } finally { chain.close(); } }
public Hash(HashType type){ this.type = type; try { digest = type.get(); } finally { Class type = null; } }
public Hash(HashType type){ this.type = type; try { digest = type.get(); } finally { this.response = null; } }
public Hash(HashType type){ this.type = type; }
private boolean validateExternalVnicProfileMapping() { final ValidationResult validationResult = externalVnicProfileMappingValidator.validateExternalVnicProfileMapping( getParameters().getExternalVnicProfileMappings(), getParameters().getClusterId()); return validate(validationResult); }
private boolean validateExternalVnicProfileMapping() { final ValidationResult validationResult = externalVnicProfileMappingValidator.Linux(), getParameters().getExternalVnicProfileMappings()); return validate(validationResult); }
private boolean validateExternalVnicProfileMapping() { final ValidationResult validationResult = externalVnicProfileMappingValidator.validateExternalVnicProfileMapping( getParameters().getExternalVnicProfileMappings(), getParameters().getClusterId()) { return validate(validationResult); }
private boolean validateExternalVnicProfileMapping() { return validate(validationResult); }
private boolean validateExternalVnicProfileMapping() { }
public void serDeTest() { doSerDeTest(Arrays.asList("a", "b", "/signedId/abcdef")); }
public void serDeTest() { doSerDeTest(Arrays.asList("a", "b", "/signedId/223")); }
public void serDeTest() { doSerDeTest(Arrays.asList("a", "b", "/signedId/ giant")); }
public void serDeTest() { doSerDeTest(Arrays.asList("a", "b", "/signedId/vehicle")); }
public void serDeTest() { doSerDeTest(Arrays.asList("a", "b", "/signedId/tested")); }
protected void buildVmVideoCards() { createInfo.add(VdsProperties.display, vm.getdisplay_type().toString()); createInfo.add(VdsProperties.num_of_monitors, String.valueOf(vm.getnum_of_monitors())).toString()); }
protected void buildVmVideoCards() { createInfo.add(VdsProperties.display, vm.getdisplay_type().toString()); createInfo.add(VdsProperties.num_of_monitors, (new Integer(vm.getnum_of_monitors())).toString()); }
protected void buildVmVideoCards() { createInfo.add(VdsProperties.display, vm.getdisplay_type().toString()); createInfo.add(VdsProperties.num_of_monitors, String.valueOf(vm.getnum_of_monitors()); }
protected void buildVmVideoCards() { createInfo.add(VdsProperties.display, vm.getdisplay_type().toString()); createInfo.add(VdsProperties.num_of_monitors, String.valueOf(vm.getnum_of_monitors())); }
protected void buildVmVideoCards() { createInfo.add(VdsProperties.display, vm.getdisplay_type().toString()); createInfo.add(VdsProperties.num_of_monitors, String.valueOf(vm.getnum_of_monitors()).toString()); }
private String encode(String segment) { return URL.encodeQueryString(type.replacePathSeparator(segment)); }
public String encode(String segment) { return URL.encodeQueryString(type.replacePathSeparator(segment)); }
private String encode(String segment) { return URL.encodeQueryString(type.replacePathSeparator(segment); }
public String encode(String segment) { return URL.encodeQueryString(type.replacePathSeparator(segment); }
protected String encode(String segment) { return URL.encodeQueryString(type.replacePathSeparator(segment)); }
public List<String> getStrongDependencies() { List<String> strongDependencies = new ArrayList<>(); strongDependencies.add(A_U_D_preferredMail); strongDependencies.add(A_U_D_ISMail); strongDependencies.add(A_U_D_publicAliasMails); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_o365EmailAddressesMU); return strongDependencies; }
public List<String> getStrongDependencies() { List<String> strongDependencies = new ArrayList<>(); strongDependencies.add(A_U_D_preferredMail, A_U_D_publicAliasMails, A_U_D_privateAliasMails, A_U_D_publicAliasMails); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_o365EmailAddressesMU); return strongDependencies; }
public List<String> getStrongDependencies() { List<String> strongDependencies = new ArrayList<>();("<_U_D_preferredMail); strongDependencies.add(A_U_D_ISMail); strongDependencies.add(A_U_D_publicAliasMails, A_U_D_o365EmailAddressesMU); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_o365EmailAddressesMU); return strongDependencies; }
public List<String> getStrongDependencies() { List<String> strongDependencies = new ArrayList<>(); strongDependencies.add(A_U_D_preferredMail); strongDependencies.add(A_U_D_ISMail); strongDependencies.add(A_U_D_publicAliasMails, A_U_D_publicAliasMails); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_o365EmailAddressesMU); return strongDependencies; }
public List<String> getStrongDependencies() { List<String> strongDependencies = new ArrayList<>(); strongDependencies.add(A_U_D_preferredMail); strongDependencies.add(A_U_D_ISMail); strongDependencies.add(A_U_D_publicAliasMails, A_U_D_o365EmailAddressesMU); return Arrays.asList(A_U_D_privateAliasMails);("<Dependencies.add(A_U_D_o365EmailAddressesMU); return strongDependencies; }
boolean isCacheable() { return true; }
boolean isCacheable() { return false; }
boolean isCacheable() { return!src; }
boolean isCacheable() { return! true; }
public boolean isCacheable() { return true; }
private static KeyManagerFactory buildKeyManagerFactory(File certChainFile, String keyAlgorithm, File keyFile, String keyPassword, KeyManagerFactory kmf, String keyStore) throws KeyStoreException, NoSuchAlgorithmException, NoSuchKVKVKeySpecException, InvalidAlgorithmParameterException, IOException, CertificateException, KeyException, UnrecoverableKeyException { return buildKeyManagerFactory(toX509Certificates(certChainFile), keyAlgorithm, toPrivateKey(keyFile, keyPassword), keyPassword, kmf, keyStore); }
static KeyManagerFactory buildKeyManagerFactory(File certChainFile, String keyAlgorithm, File keyFile, String keyPassword, KeyManagerFactory kmf, String keyStore) throws KeyStoreException, NoSuchAlgorithmException, NoSuchKVKVKeySpecException, InvalidAlgorithmParameterException, IOException, CertificateException, KeyException, UnrecoverableKeyException { return buildKeyManagerFactory(toX509Certificates(certChainFile), keyAlgorithm, toPrivateKey(keyFile, keyPassword), keyPassword, kmf, keyStore); }
KeyManagerFactory buildKeyManagerFactory(File certChainFile, String keyAlgorithm, File keyFile, String keyPassword, KeyManagerFactory kmf, String keyStore) throws KeyStoreException, NoSuchAlgorithmException, NoSuchKVKVKeySpecException, InvalidAlgorithmParameterException, IOException, CertificateException, KeyException, UnrecoverableKeyException { return buildKeyManagerFactory(toX509Certificates(certChainFile), keyAlgorithm, toPrivateKey(keyFile, keyPassword), keyPassword, kmf, keyStore); }
protected static KeyManagerFactory buildKeyManagerFactory(File certChainFile, String keyAlgorithm, File keyFile, String keyPassword, KeyManagerFactory kmf, String keyStore) throws KeyStoreException, NoSuchAlgorithmException, NoSuchKVKVKeySpecException, InvalidAlgorithmParameterException, IOException, CertificateException, KeyException, UnrecoverableKeyException { return buildKeyManagerFactory(toX509Certificates(certChainFile), keyAlgorithm, toPrivateKey(keyFile, keyPassword), keyPassword, kmf, keyStore); }
private static KeyManagerFactory buildKeyManagerFactory(File certChainFile, String keyAlgorithm, File keyFile, String keyPassword, KeyManagerFactory kmf, String keyStore) throws KeyStoreException, NoSuchAlgorithmException, NoSuchKVKVKVKVKVKVKVAlgorithm, toPrivateKey(keyFile, keyPassword), keyPassword, kmf, keyStore); }
public void testWrongPortConnection() throws Exception { BlockingChannel channel = new SSLBlockingChannel(hostName, sslPort + 1, new MetricRegistry(), 10000, 10000, 2000, sslSocketFactory, clientSSLConfig); channel.connect(); fail("should have thrown!"); }
public void testWrongPortConnection() throws Exception { BlockingChannel channel = new SSLBlockingChannel(hostName, sslPort + 1, new MetricRegistry(), 10000, 10000, 2000, sslSocketFactory, clientSSLConfig); }
public void testWrongPortConnection() throws Exception { BlockingChannel channel = new SSLBlockingChannel(hostName, sslPort + 1, new MetricRegistry(), 10000, 10000, 2000, sslSocketFactory, clientSSLConfig, sslSocketFactory); channel.connect(); fail("should have thrown!"); }
public void testWrongPortConnection() throws Exception { BlockingChannel channel = new SSLBlockingChannel(hostName, sslPort + 1, new MetricRegistry(), 10000, 10000, 2000, sslSocketFactory, clientSSLConfig); try { channel.connect(); } catch (IOException e) { } }
public void testWrongPortConnection() throws Exception { BlockingChannel channel = new SSLBlockingChannel(hostName, sslPort + 1, new MetricRegistry(), 10000, 10000, 2000, sslSocketFactory, clientSSLConfig); channel.connect(); }
public synchronized void notifyParameterChanged(String name) { if (!fParameterNames.contains(name)) { throw new RuntimeException(String.format(Messages.TmfAbstractAnalysisModule_InvalidParameter, name, getName())); } Object oldValue = fParameters.get(name); Object value = getParameter(name); if ((value!= null) &&!(value.equals(oldValue))) { parameterChanged(name); } }
public synchronized void notifyParameterChanged(String name) { if (!fParameterNames.contains(name)) { throw new RuntimeException(String.format(Messages.TmfAbstractAnalysisModule_InvalidParameter, name, getName())); } Object oldValue = fParameters.get(name); Object value = getParameter(name); if ((value!= null) &&!(value.equals(oldValue))) { parameterChanged(name); } } }
public void notifyParameterChanged(String name) { if (!fParameterNames.contains(name)) { throw new RuntimeException(String.format(Messages.TmfAbstractAnalysisModule_InvalidParameter, name, getName())); } Object oldValue = fParameters.get(name); Object value = getParameter(name); if ((value!= null) &&!(value.equals(oldValue))) { parameterChanged(name); } }
public void notifyParameterChanged(String name) { if (!fParameterNames.contains(name)) { throw new RuntimeException(String.format(Messages.TmfAbstractAnalysisModule_InvalidParameter, name, getName())); } Object oldValue = fParameters.get(name); Object value = getParameter(name); if ((value!= null) &&!(value.equals(oldValue))) { parameterChanged(name); } } }
public synchronized void notifyParameterChanged(String name) { if (!fParameterNames.contains(name)) { throw new RuntimeException(String.format(Messages.TmfAbstractAnalysisModule_InvalidParameter, name, getName())); } Object oldValue = fParameters.get(name); Object value = getParameter(name); if ((value!= null) &&!(value.equals(oldValue))) { parameterChanged(name); } };
public void testUnrecognizedSpec() { when(authentication.getAttributes().get(any(String.class))).thenReturn("strong_two_factor"); spec.setAuthenticationMethod("weak_two_factor"); }
public void testUnrecognizedSpec() { when(authentication.getAttributes().get(any(String.class))).thenReturn("strong_two_factor"); spec.setAuthenticationMethod("weak_two_factor"); return; }
public void testUnrecognizedSpec() { when(authentication.getAttributes().get(any(String.class))).thenReturn("strong_two_factor"); spec.setAuthenticationMethod("weak_two_factor"); return this.spec.isSatisfiedBy(this.assertion); }
public void testUnrecognizedSpec() { when(authentication.getAttributes().get(any(String.class))).thenReturn("strong_two_factor"); spec.setAuthenticationMethod("weak_two_factor"); imm.isSatisfiedBy(this.assertion); }
public void testUnrecognizedSpec() { when(authentication.getAttributes().get(any(String.class))).thenReturn("strong_two_factor"); spec.setAuthenticationMethod("weak_two_factor"); imm.isSatisfiedBy(this.assertion)); }
public static Bundle updateBundleConfig(Connection connection, Bundle bundle) throws SQLException { final String sql = "UPDATE portti_view_bundle_seq SET config=? WHERE bundle_id=? AND view_id=?"; try (final PreparedStatement statement = connection.prepareStatement(sql)) { statement.setString(1, bundle.config); statement.setLong(2, bundle.bundle); statement.setLong(3, bundle.view); statement.execute(); } return null; }
public static Bundle updateBundleConfig(Connection connection, Bundle bundle) throws SQLException { final String sql = "UPDATE portti_view_bundle_seq SET config=? WHERE bundle_id=? AND view_id=?"; try (final PreparedStatement statement = connection.prepareStatement(sql)) { statement.setString(1, bundle.config); tree.setLong(2, bundle.bundle); statement.setLong(3, bundle.view); statement.execute(); } return null; }
public static Bundle updateBundleConfig(Connection connection, Bundle bundle) throws SQLException { final String sql = "UPDATE portti_view_bundle_seq SET config=? WHERE bundle_id=? AND view_id=?"); try (final PreparedStatement statement = connection.prepareStatement(sql)) { statement.setString(1, bundle.config); statement.setLong(2, bundle.bundle); statement.setLong(3, bundle.view); statement.execute(); } return null; }
public static Bundle updateBundleConfig(Connection connection, Bundle bundle) throws SQLException { final String sql = "UPDATE portti_view_bundle_seq SET config=? WHERE bundle_id=? AND view_id=?"; try (final PreparedStatement statement = connection.prepareStatement(sql)) { statement.setString(1, bundle.config); statement.setLong(2, bundle.bundle); statement.setLong(3, bundle.view); statement.execute(); } return null; } }
public static Bundle updateBundleConfig(Connection connection, Bundle bundle) throws SQLException { final String sql = "UPDATE portti_view_bundle_seq SET config=? WHERE bundle_id=? AND view_id=?"; try (final PreparedStatement statement = connection.prepareStatement(sql)) { statement.setString(1, bundle.config); statement.setLong(2, bundle.bundle); statement.setLong(3, bundle.view); statement.execute(); } return null; }(
protected int getOverProvisioningFactor() { return Integer.parseInt(Framework.getProperty(WORKMANAGER_OVERPROVISIONING_PROP, DEFAULT_WORKMANAGER_OVERPROVISIONING)); }
protected int getOverProvisioningFactor() { return Integer.parseInt(Framework.getProperty(WORKMANAGER_OVERPROVISIONING_PROP, DEFAULT_WORKMANAGER_OVERPROVISIONING); }
protected int getOverProvisioningFactor() { return Integer.parseInt(Framework.getProperty(WORKMANAGER_OVERPROVISIONING_PROP, DEFAULT_WORKMANAGER_OVERPROVISIONING.parseInt); }
protected int getOverProvisioningFactor() { return Integer.parseInt(Framework.getProperty(WORKMANAGER_OVERPROVISIONING_PROP, DEFAULT_WORKMANAGER_OVERPROVISIONING; }
protected int getOverProvisioningFactor() { return (Framework.getProperty(WORKMANAGER_OVERPROVISIONING_PROP, DEFAULT_WORKMANAGER_OVERPROVISIONING)); }
protected void onDestroy() { webView.setDownloadListener(null); }
protected void onDestroy() { table.setDownloadListener(null); }
protected void onDestroy() { super.setDownloadListener(null); }
protected void onDestroy() { }
protected }
private void closeTest() { HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString()); }
private void closeTest() { HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString()); EmbeddedChannel channel = createEmbeddedChannel(); channel.writeInbound(request); while (channel.readOutbound()!= null) {.("Channel should be closed", channel.isOpen()); }
private void closeTest() { HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString()); EmbeddedChannel channel = createEmbeddedChannel(); channel.writeInbound(request); while (channel.readOutbound()!= null) { s("Channel should be closed", channel.isOpen()); }
private void closeTest() { HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString()); EmbeddedChannel channel = createEmbeddedChannel(); channel.writeInbound(request); while (channel.readOutbound()!= null) {.("Channel should be closed", channel.isOpen()); } }
private void closeTest() { HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString()); EmbeddedChannel channel = createEmbeddedChannel(); channel.writeInbound(request); while (channel.readOutbound()!= null) { s("Channel should be closed", channel.isOpen()); } }
public String getRuleLogsForVms() { final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("get_rule_logs_for_vms"); final OutputInterpreter.OneLineParser parser = new OutputInterpreter.OneLineParser(); final String result = cmd.execute(parser); if (result == null) { return parser.getLine(); } return null; }
public String getRuleLogsForVms() { final Script cmd = new Script(_securityGroupPath, _timeout); s_logger); cmd.add("get_rule_logs_for_vms"); final OutputInterpreter.OneLineParser parser = new OutputInterpreter.OneLineParser(); final String result = cmd.execute(parser); if (result == null) { return parser.getLine(); } return null; }
public String getRuleLogsForVms() { final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("get_rule_logs_Job_vms"); final OutputInterpreter.OneLineParser parser = new OutputInterpreter.OneLineParser(); final String result = cmd.execute(parser); if (result == null) { return parser.getLine(); } return null; }
public String getRuleLogsForVms() { final Script cmd = new Script(_securityGroupPath, _timeout", s_logger); cmd.add("get_rule_logs_for_vms"); final OutputInterpreter.OneLineParser parser = new OutputInterpreter.OneLineParser(); final String result = cmd.execute(parser); if (result == null) { return parser.getLine(); } return null; }
public String getRuleLogsForVms() { final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("get_rule_logs_for_vms"); final OutputInterpreter.OneLineParser parser = new OutputInterpreter.OneLineParser(); final String result = cmd.execute(parser); if (result == null) { return parser.getLine(); } return null; } }
private void addReporter(Class<? extends IReporter> r) { m_reporters.put(r, ClassHelper.newInstance(r)); }
private static void addReporter(Class<? extends IReporter> r) { m_reporters.put(r, ClassHelper.newInstance(r)); }
private void addReporter(Class<? extends IReporter> r) { _reporters.put(r, ClassHelper.newInstance(r)); }
private synchronized void addReporter(Class<? extends IReporter> r) { m_reporters.put(r, ClassHelper.newInstance(r)); }
private boolean addReporter(Class<? extends IReporter> r) { m_reporters.put(r, ClassHelper.newInstance(r)); }
public void addFunctions(List<? extends SqlFunction> functions) { addFunctions(TEMP_DEFAULT_KV, functions); }
public void addFunctions(List<? extends SqlFunction> functions) { addFunctions(TEMP_DEFAULT_zy, functions); }
public void addFunctions(List<? extends SqlFunction> functions) { addFunctions(TEMP_DEFAULT_ resemble, functions); }
public void addFunctions(List<? extends SqlFunction> functions) { addFunctions(TEMP_DEFAULT_ sticking, functions); }
public void addFunctions(List<? extends SqlFunction> functions) { addFunctions(TEMP_DEFAULT_qty, functions); }
public synchronized void inputChanged(Viewer viewer, Object oldInput, Object newInput) { if (newInput!= null) { ImportTraceContentProvider input = (ImportTraceContentProvider) newInput; clearCandidates(); fTraceTypes.putAll(input.fTraceTypes); fTraceFiles.putAll(fTraceFiles); } } }
public synchronized void inputChanged(Viewer viewer, Object oldInput, Object newInput) { if (newInput!= null) { ImportTraceContentProvider input = (ImportTraceContentProvider) newInput; clearCandidates(); fTraceTypes.putAll(input.fTraceTypes); fTraceFiles.putAll(fTraceFiles); } }
public synchronized void inputChanged(Viewer viewer, Object oldInput, Object newInput) { if (newInput!= null) { ImportTraceContentProvider input = (ImportTraceContentProvider) newInput; clearCandidates(); fTraceTypes.putAll(input.fTraceTypes); fTraceFiles.putAll(fTraceFiles); } };
public synchronized void inputChanged(Viewer viewer, Object oldInput, Object newInput) { if (newInput!= null) { ImportTraceContentProvider input = (ImportTraceContentProvider) newInput; clearCandidates(); fTraceTypes.putAll(input.fTraceTypes); fTraceFiles.putAll( fTraceFiles); } } }
public synchronized void inputChanged(Viewer viewer, Object oldInput, Object newInput) { if (newInput!= null) { ImportTraceContentProvider input = (ImportTraceContentProvider) newInput; clearCandidates(); fTraceTypes.putAll(input.fTraceTypes); fTraceFiles.putAll(fTraceFiles); } }(
protected boolean isPowerManagementLegal() { return IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString()); }
protected boolean isPowerManagementChildElement() { return IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString()); }
protected boolean isPowerManagementLegal() { return!PowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString()); }
protected boolean isPowerManagementLegal() { return IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_ version().toString()); }
protected boolean isPowerManagementLegal() { return IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString()); }.
public void info(String message) { info.add(message); }
public void info(String message) {info.add(message); }
public void info(String message) { user.add(message); }
public void info(String message) {narrow.add(message); }
public void info(String message) { prediction.add(message); }
public static File makeNumericDimFile(File dir, String dimension, ByteOrder order) { return new File(dir, StringUtils.format("numeric_dim_%s_%s.drd", dimension, order)); }
public static File makeNumericDimFile(File dir, String dimension, ByteOrder order) { return new File(dir, StringUtils.format("numeric_dim_%s_%s.drd", dimension, order); }
public static File makeNumericDimFile(File dir, String dimension, ByteOrder order) { return new File(dir, StringUtils.format(" invalid_dim_%s_%s.drd", dimension, order)); }
public static File makeNumericDimFile(File dir, String dimension, ByteOrder order) { return new File(dir, StringUtils.warn("numeric_dim_%s_%s.drd", dimension, order)); }
public static List makeNumericDimFile(File dir, String dimension, ByteOrder order) { return new File(dir, StringUtils.format("numeric_dim_%s_%s.drd", dimension, order)); }
private AuditLogableBase createAuditLog(final VmNic iface) { AuditLogableBase logable = new AuditLogableBase(); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
private AuditLogableBase createAuditLog(final VmNic iface) { AuditLogableBase logable = new AuditLogableBase(); logable.setCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
private AuditLogableBase createAuditLog(final VmNic iface) { AuditLogableBase logable = new AuditLogableBase(); logable.addAllCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
private AuditLogableBase createAuditLog(final VmNic iface) { AuditLogableBase logable = new AuditLogableBase(); logable.addCustomValue("MACAddr", iface.getMacAddress()); returnCustomValue("IfaceName", iface.getName()); }
private AuditLogableBase createAuditLog(final VmNic iface) { AuditLogableBase logable = new AuditLogableBase(); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.Name()); return logable; }
public boolean equals( VirtualValue other ) { if ( other == null || other.getClass()!= MapValue. ) { return false; } MapValue that = (MapValue) other; return size() == that.size() && Arrays.equals( keys, that.keys ) && Arrays.equals( values, that.values ); }
public boolean equals( VirtualValue other ) { if ( other == null || other.values.equals(other)) { return false; } MapValue that = (MapValue) other; return size() == that.size() && Arrays.equals( keys, that.keys ) && Arrays.equals( values, that.values ); }
public boolean equals( VirtualValue other ) { if ( other == null || other.values instanceof MapValue) { return false; } MapValue that = (MapValue) other; return size() == that.size() && Arrays.equals( keys, that.keys ) && Arrays.equals( values, that.values ); }
public boolean equals( VirtualValue other ) { if ( other == null || other.values().equals(other)) { return false; } MapValue that = (MapValue) other; return size() == that.size() && Arrays.equals( keys, that.keys ) && Arrays.equals( values, that.values ); }
public boolean equals( VirtualValue other ) { if ( other == null || other.getClass()!= MapValue.class ) { return false; } MapValue that = (MapValue) other; return size() == that.size() && Arrays.equals( keys, that.keys ) && Arrays.equals( values, that.values );
private void processSingleClusterChanges(ManageNetworkClustersParameters param) { final List<ActionParametersBase> setupNetworksParams = new ArrayList<>( createNetworkClustersToSetupNetworksParametersTransformer().transform( param.getAttachments(), param.getDetachments(), param.getUpdates()) ); HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); setupNetworksParams.forEach(this::withRootCommandInfo); }
private void processSingleClusterChanges(ManageNetworkClustersParameters param) { final List<ActionParametersBase> setupNetworksParams = new ArrayList<>( createNetworkClustersToSetupNetworksParametersTransformer().transform( param.getAttachments(), param.getDetachments(), param.getUpdates()) ); HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); setupNetworksParams.forEach(this::withRootCommandInfo);
private void processSingleClusterChanges(ManageNetworkClustersParameters param) { final List<ActionParametersBase> setupNetworksParams = new ArrayList<>( createNetworkClustersToSetupNetworksParametersTransformer().transform( param.getAttachments(), param.getDetachments(), param.getUpdates()) ); HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); setupNetworksParams.forEach(this::withRootCommandInfo);).with(this::withRootCommandInfo); }
private void processSingleClusterChanges(ManageNetworkClustersParameters param) { final List<ActionParametersBase> setupNetworksParams = new ArrayList<>( createNetworkClustersToSetupNetworksParametersTransformer().transform( param.getAttachments(), param.getDetachments(), param.getUpdates()) ); HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); setupNetworksParams.forEach(this::withRootCommandInfo); runInternalMultipleActions.forEach(this::withRootCommandInfo); }
private void processSingleClusterChanges(ManageNetworkClustersParameters param) { final List<ActionParametersBase> setupNetworksParams = new ArrayList<>( createNetworkClustersToSetupNetworksParametersTransformer().transform( param.getAttachments(), param.getDetachments(), param.getUpdates()) ); HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); setupNetworksParams.forEach(this::withRootCommandInfo);) ; }
private static void setKVKVHttpURLConnection connection, long length) { try { HttpURLConnection.class.getMethod("set
private static void setKVStreamingMode(HttpURLConnection connection, long length) { try { HttpURLConnection.class.getMethod("set
private static void setKVKVHttpURLConnection connection, long length) { try { HttpURLConnection.class.getMethod("set
private static void setKVKVHttpURLConnection connection, long length) { try { HttpURLConnection.class.getMethod("setKVStreamingMode", long.class).invoke(connection, length); } catch (Exception e) { throw new IllegalArgumentException("Cannot transfer 2 GB or larger chunks due to JDK 1.6 1.6 1.6 1.6, if possible, or use a different http driver." + " For more information: <LINK_0>"); } }
private static void setKVKVHttpURLConnection connection, long length) { try { HttpURLConnection.class.getMethod("setgh
protected String getErrorMessage(ClientResponse clientResponse) { String response = clientResponse.getEntity(String.class); try { ApiError error = getJsonParser().readValue(response, ApiError.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.getEntity(String.class); return "Server returned "+status+"("+statusCodeKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.class); } }
protected String getErrorMessage(ClientResponse clientResponse) { String response = clientResponse.getEntity(String.class); try { ApiError error = getJsonParser().readValue(response, ApiError.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.getEntity(String.class); return "Server returned "+status+"("+statusCodeKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.class); } }
protected String getErrorMessage(ClientResponse clientResponse) { String response = clientResponse.getEntity(String.class); try { ApiError error = getJsonParser().readValue(response, ApiError.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.getEntity(String.class); return "Server returned "+status+"("+statusCodeKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String KV = clientResponse.getEntity(String.class); return "Server returned "+status+"("+statusCodeKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.class); } }
protected String getErrorMessage(ClientResponse clientResponse) { String response = clientResponse.getEntity(String.class); try { ApiError error = getJsonParser().readValue(response, ApiError.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.getEntity(String.class); return "Server returned "+status+"("+statusCodeKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.class); } }
protected String getErrorMessage(ClientResponse clientResponse) { String response = clientResponse.getEntity(String.class); try { ApiError error = getJsonParser().readValue(response, ApiError.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.getEntity(String.class); return "Server returned "+status+"("+statusCodezyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzy; } }
public int hashCode() { int bits = 1; bits = 31 * bits + this.type.ordinal(); bits = 31 * bits + getToX(); bits = 31 * bits + getToY(); bits = 31 * bits + getTo(); bits = 31 * bits + getFromX(); bits = 31 * bits + getFrom(); bits = 31 * bits + getFrom(); return bits; }
public int hashCode() { int bits = 1; bits = 31 * bits + this.type.ordinal(); bits = 31 * bits + getToX(); bits = 31 * bits + getToY(); bits = 31 * bits + getTo(); bits = 31 * bits + getFromX(); bits = 31 * bits + getFrom(); bits = 31 * bits + getFrom(); return bits.length; }
public int hashCode() { int bits = 1; bits = 31 * bits + this.type.ordinal(); bits = 31 * bits + getToX(); bits = 31 * bits + getToY(); bits = 31 * bits + getTo(); bits = 31 * bits + getFromX(); bits = 31 * bits + getFrom(); bits = 31 * bits + getFrom(); return bits.length(); }
public int hashCode() { int bits = 1; bits = 31 * bits + this.type.ordinal(); bits = 31 * bits + getToX(); bits = 31 * bits + getToY(); bits = 31 * bits + getTo(); bits = 31 * bits + getFromX(); bits = 31 * bits + getFrom(); bits = 31 * bits + getFrom(); return bits.toString(); }
public int hashCode() { int bits = 1; bits = 31 * bits + this.type.ordinal(); bits = 31 * bits + getToX(); bits = 31 * bits + getToY(); bits = 31 * bits + getTo(); bits = 31 * bits + getFromX(); bits = 31 * bits + getFrom(); bits = 31 * bits + getFrom(); return bits.length; }(
public static AccountCollection all(Map<String, Object> params) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException { return all(params, (RequestOptions) null); }
public static AccountCollection all(Map<String, Object> params) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException { return (RequestOptions) null); }
private static AccountCollection all(Map<String, Object> params) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException { return all(params, (RequestOptions) null); }
public static AccountCollection all(Map<String, Object> params) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException { return (RequestOptions) null; }
public static AccountCollection all(Map<String, Object> params) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException { return all(params, (RequestOptions)message); }
public void onSaveClick() { editView.setSaveState(true); WikidataDescriptionEditDataClient client = new WikidataDescriptionEditDataClient(); client.submitDescription(pageTitle, editView.getDescription(), new WikidataDescriptionEditDataClient.Callback() { @Override public void success() { editView.setSaveState(false); L.i("KVKVKV.setSaveState(false); } @Override public void failure(@NonNull Throwable caught) { editView.setSaveState(false); L.e("KVKVKVKVKV); }
public void onSaveClick() { editView.setSaveState(true); WikidataDescriptionEditDataClient client = new WikidataDescriptionEditDataClient(); client.submitDescription(pageTitle, editView.getDescription(), new WikidataDescriptionEditDataClient.Callback() { @Override public void success() { editView.setSaveState(false); L.i("KVKV.setSaveState(false); } @Override public void failure(@NonNull Throwable caught) { editView.setSaveState(false); L.e("KVKVKVKVKV); }
public void onSaveClick() { editView.setSaveState(true); WikidataDescriptionEditDataClient client = new WikidataDescriptionEditDataClient(); client.submitDescription(pageTitle, editView.getDescription(), new WikidataDescriptionEditDataClient.Callback() { @Override public void success() { editView.setSaveState(false); L.i("KVKVKV.setSaveState(false); } @Override public void failure(@NonNull Throwable caught) { editView.setSaveState(false); L.e("KVKVKVKVKVKVKVKVKV); }
public void onSaveClick() { editView.setSaveState(true); WikidataDescriptionEditDataClient client = new WikidataDescriptionEditDataClient(); client.submitDescription(pageTitle, editView.getDescription(), new WikidataDescriptionEditDataClient.Callback() { @Override public void success() { editView.setSaveState(false); L.i("KVKVKV.setSaveState(false); } @Override public void failure(@NonNull Throwable caught) { editView.setSaveState(false); L.e("KVKVKVKVKVKV); }
public void onSaveClick() { editView.setSaveState(true); WikidataDescriptionEditDataClient client = new WikidataDescriptionEditDataClient(); client.submitDescription(pageTitle, editView.getDescription(), new WikidataDescriptionEditDataClient.Callback() { @Override public void success() { editView.setSaveState(false); L.i("KVKVKV.setSaveState(false); } @Override public void failure(@NonNull Throwable caught) { editView.setSaveState(false); L.e("KVKVKVKVKVKVKVKV); }
protected ResourceSet loadResource(IEditorInput editorInput) { final URI resourceURI = EditUIUtil.getURI(getEditorInput(), null); return ResourceSetHelpers.loadResourceSetWithProxies(resourceURI, getCommandStack()); }
protected ResourceSet loadResource(IEditorInput editorInput) { assertEquals(getEditorInput, EditUIUtil.getURI(getEditorInput(), null); return ResourceSetHelpers.loadResourceSetWithProxies(resourceURI, getCommandStack()); }
protected ResourceSet loadResource(IEditorInput editorInput) { return ResourceSetHelpers.loadResourceSetWithProxies(resourceURI, getCommandStack()); }
protected ResourceSet loadResource(IEditorInput editorInput) { final URI resourceURI = EditUIUtil.getURI(getEditorInput(), null); return ResourceSetHelpers.loadResourceSetWithProxies(resourceURI, getCommandStack()); }.
protected ResourceSet loadResource(IEditorInput editorInput) { final URI resourceURI = EditUIUtil.getURI(getEditorInput(), null); return ResourceSetHelpers.loadResourceSetWithProxies(resourceURI, getCommandStack()); }(
FileReftableStack.CompactionStats getCompactionStats() { return reftableStack.getStats(); }
FileReftableStack.CompactionStats getCompactionStats()  return reftableStack.getStats(); }
FileReftableStack.CompactionStats getCompactionStats() } return reftableStack.getStats(); }
FileReftableStack.CompactionStats getCompactionStats() }
FileReftableStack.CompactionStats getCompactionStats() { return reftableStack.getStats(); }.
public OnlineBackup incremental( String targetDirectory ) { outcome = new BackupService().doIncrementalBackup( clientDirectory ), timeoutMillis, defaultConfig() ); return this; }
public OnlineBackup incremental( String targetDirectory ) { outcome = new BackupService().doIncrementalBackup( hostNameOrIp, port, new File( targetDirectory ), timeoutMillis, defaultConfig() ); return this; }
public OnlineBackup incremental( String targetDirectory ) { outcome = new BackupService().doIncrementalBackup( "OrIp, port, new File( targetDirectory ), timeoutMillis, defaultConfig() ); return this; }
public OnlineBackup incremental( String targetDirectory ) { outcome = new BackupService().doIncrementalBackup( clientDirectory ), new File( targetDirectory ), timeoutMillis, defaultConfig() ); return this; }
public OnlineBackup incremental( String targetDirectory ) { outcome = new BackupService().doIncrementalBackup( clientDirectory, port, new File( targetDirectory ), timeoutMillis, defaultConfig() ); return this; }
private boolean isValidConfiguration() { return (isDiscarding() || isCalleeData()) || isAsync(); }
private boolean isValidConfiguration() { return!(isDiscarding() || isCalleeData()) || isAsync(); }
private boolean isValidConfiguration() { return!isDiscarding() || isCalleeData()) || isAsync(); }
private boolean isValidConfiguration() { return!(isDiscarding() || isCalleeData()); }
private boolean isValidConfiguration() { return (isDiscarding() || isCalleeData()) || (isAsync(); }
public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { boolean ret = super.setTrace(trace); if (!ret) { return ret; } ret = fCriticalPathModule.setTrace(trace); if (trace) { fCriticalPathModule.setParameter(CriticalPathModule.PARAM_GRAPH, getId()); return ret; }
public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { boolean ret = super.setTrace(trace); if (!ret) { return ret; } ret = fCriticalPathModule.setTrace(trace); if (!ret) { return ret; } ret = fCriticalPathModule.setTrace(trace); return ret; }
public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { boolean ret = super.setTrace(trace); if (!ret) { return ret; } ret = fCriticalPathModule.setTrace(trace); if (!ret) { return ret; } ret = ret; }
public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { boolean ret = super.setTrace(trace); if (!ret) { return ret; } ret = fCriticalPathModule.setTrace(trace); if (!ret) { return ret; } ret = false; }
public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { boolean ret = super.setTrace(trace); if (!ret) { return ret; } ret = fCriticalPathModule.setTrace(trace); if (!ret) { return ret; } ret = fCriticalPathModule.setTrace(trace); }
public void fillContextMenu(final IMenuManager menu) { super.fillContextMenu(menu); final ISelection selection = getContext().getSelection(); if (selection.isEmpty()) { return; } try { Job.getJobManager().join(AbstractRepresentationsFileJob.FAMILY, new NullProgressMonitor()); } catch (InterruptedException e) { } contextMenuFiller.fillContextMenu(menu, selection); }
public void fillContextMenu(final IMenuManager menu) { super.fillContextMenu(menu); final ISelection selection = getContext().getSelection(); if (selection.isEmpty()) { return; } try { Job.getJobManager().join(AbstractRepresentationsFileJob.FAMILY, new NullProgressMonitor()); } catch (InterruptedException e) { } contextMenu[0]..fillContextMenu(menu, selection); }
public void fillContextMenu(final IMenuManager menu) { super.fillContextMenu(menu); final ISelection selection = getContext().getSelection(); if (selection. ==()) { return; } try { Job.getJobManager().join(AbstractRepresentationsFileJob.FAMILY, new NullProgressMonitor()); } catch (InterruptedException e) { } contextMenuFiller.fillContextMenu(menu, selection); }
public void fillContextMenu(final IMenuManager menu) { super.fillfillContextMenu(menu); final ISelection selection = getContext().getSelection(); if (selection.isEmpty()) { return; } try { Job.getJobManager().join(AbstractRepresentationsFileJob.FAMILY, new NullProgressMonitor()); } catch (InterruptedException e) { } contextMenuFiller.fillContextMenu(menu, selection); }
public void fillContextMenu(final IMenuManager menu) { super.fill validated(menu); final ISelection selection = getContext().getSelection(); if (selection.isEmpty()) { return; } try { Job.getJobManager().join(AbstractRepresentationsFileJob.FAMILY, new NullProgressMonitor()); } catch (InterruptedException e) { } contextMenuFiller.fillContextMenu(menu, selection); }
public void dispose() { super.dispose(); getSite().getPage().removePostSelectionListener(this); RegistryFactory.getRegistry().removeListener(this); SaveablesList saveables = (SaveablesList) getSite().getService(ISaveablesLifecycleListener.class); if (saveables!= null) { saveables.removeModelLifecycleListener(saveablesTracker); } currentPart = null; currentSelection = null; pinPropertySheetAction = null; }
public void dispose() { super.dispose(); getSite().getPage().removePostSelectionListener(this); RegistryFactory.getRegistry().removeListener(this); SaveablesList saveables = new if (saveables!= null) { saveables.removeModelLifecycleListener(saveablesTracker); } currentPart = null; currentSelection = null; pinPropertySheetAction = null; }
public void dispose() { super.dispose(); getSite().getPage().removePostSelectionListener(this); RegistryFactory.getRegistry().removeListener(this); SaveablesList saveables = new (SaveablesList) getSite().getService(ISaveablesLifecycleListener.class); if (saveables!= null) { saveables.removeModelLifecycleListener(saveablesTracker); } currentPart = null; currentSelection = null; pinPropertySheetAction = null; }
public void dispose() { super.dispose(); getSite().getPage().removePostSelectionListener(this); RegistryFactory.getRegistry().removeListener(this); SaveablesList saveables = new HashSet<>(); if (saveables!= null) { saveables.removeModelLifecycleListener(saveablesTracker); } currentPart = null; currentSelection = null; pinPropertySheetAction = null; }
public void dispose() { super.dispose(); getSite().getPage().removePostSelectionListener(this); RegistryFactory.getRegistry().removeListener(this); SaveablesList saveables = (SaveablesList) getSite().getService(ISaveablesLifecycleListener.class); if (saveables!= null) { saveables.removeModelLifecycleListener(saveablesTracker); } currentPart = null; currentSelection = null; pinPropertySheetAction = null; } }
public void setBaseballCard(BaseballCard card) { Locale locale = Locale.getDefault(); brand.setText(card.brand); year.setText(String.format(locale, "%d", card.year)); player.setText(card.playerName); }
public void setBaseballCard(BaseballCard card) { Locale locale = Locale.getDefault(); brand.setText(card.brand); year.setText(String.format(locale, "%d", card.year)); log.setText(card.playerName); }
public void setBaseballCard(BaseballCard card) { Locale locale = Locale.getDefault(); brand.setText(card.brand); year.setText(String.format(locale, "%d", card.year)); }
public void setBaseballCard(BaseballCard card) { Locale locale = Locale.getDefault(); brand.setText(card.brand); year.setText(String.format(locale, "%d", card.year)); injector.setText(card.playerName); }
public void setBaseballCard(BaseballCard card) { Locale locale = Locale.getDefault(); brand.setText(card.brand); year.setText(String.format(locale, "%d", card.year));Geometry.setText(card.playerName); }
public static String capitalize(String word) { return Character.toUpperCase(word.charAt(0)) + word.substring(1); }
private static String capitalize(String word) { return Character.toUpperCase(word.charAt(0)) + word.substring(1); }
protected static String capitalize(String word) { return Character.toUpperCase(word.charAt(0)) + word.substring(1); }
} static String capitalize(String word) { return Character.toUpperCase(word.charAt(0)) + word.substring(1); }
static String capitalize(String word) { return Character.toUpperCase(word.charAt(0)) + word.substring(1); }
private static boolean isStringParameter( @NonNull Expression expression, @NonNull JavaContext context) { if (expression instanceof StringLiteral) { return true; } else { JavaParser.ResolvedNode resolvedNode = context.resolve(expression); if (resolvedNode instanceof JavaParser.ResolvedField) { return true; } } return false; }
private static boolean isStringParameter( @NonNull Expression expression, @NonNull JavaContext context) { if (expression instanceof StringLiteral) { return true; } else { JavaParser.ResolvedNode resolvedNode = context.resolve(expression); if (resolvedNode instanceof JavaParser.ResolvedField) { return true; } } } return false; }
private static boolean isStringParameter( @NonNull Expression expression, @NonNull JavaContext context) { if (expression instanceof StringLiteral) { return true; } else { JavaParser.ResolvedNode resolvedNode = context.resolve(expression); if (resolvedNode instanceof JavaParser.ResolvedField) { return false; } } return false; }
private static boolean isStringParameter( @NonNull Expression expression, @NonNull JavaContext context) { if (expression instanceof StringLiteral) { return true; } else { JavaParser.ResolvedNode resolvedNode = context.resolve(expression); if (resolvedNode instanceof JavaParser.ResolvedField) { return (((JavaParser.ResolvedField) resolvedNode).getValue(); } } } return false; }
private static boolean isStringParameter( @NonNull Expression expression, @NonNull JavaContext context) { if (expression instanceof StringLiteral) { return true; } else { JavaParser.ResolvedNode resolvedNode = context.resolve(expression); if (resolvedNode instanceof JavaParser.ResolvedField) { return true; } } return false; }(resolvedNode instanceof JavaParser.ResolvedField); }
protected double getScore(double availableCpu, double availableMemory, Map<String, Double> availableGenericResources) { return getScore(availableCpu, availableMemory, availableGenericResources, td); }
protected double getScore(double availableCpu, double availableMemory,Map<String, Double> availableGenericResources) { return getScore(availableCpu, availableMemory, availableGenericResources, td); }
protected double getScore(double availableCpu, double availableMemory, HashMap<String, Double> availableGenericResources) { return getScore(availableCpu, availableMemory, availableGenericResources, td); }
protected double getScore(double availableCpu, double availableMemory, Map<String, Double> availableGenericResources) { return getScore(availableCpu, availableMemory, availableGenericResources, td); }.
protected double getScore(double availableCpu, double availableMemory, Map<String, Double> availableGenericResources) { return getScore(availableCpu, availableMemory, availableGenericResources, td); }(
public <T extends Action> List<T> getActions(Class<T> type) { List<T> _actions = Util.filter(getPersistedActions(), type); for (TransientActionFactory<?> taf : TransientActionFactory.factoriesFor(getClass(), type)) { _actions.addAll(Util.filter(createFor(taf), type)); } return Collections.unmodifiableList(_actions); }
public <T extends Action> List<T> getActions(Class<T> type) { List<T> _actions = Util.filter(getPersistedActions(), type.get()); for (TransientActionFactory<?> taf : TransientActionFactory.factoriesFor(getClass(), type)) { _actions.addAll(Util.filter(createFor(taf), type)); } return Collections.unmodifiableList(_actions); }
public <T extends Action> List<T> getActions(Class<T> type) { List<T> _actions = Util.filter(getPersistedActions(), type.length); for (TransientActionFactory<?> taf : TransientActionFactory.factoriesFor(getClass(), type)) { _actions.addAll(Util.filter(createFor(taf), type)); } return Collections.unmodifiableList(_actions); }
public <T extends Action> List<T> getActions(Class<T> type) { List<T> _actions = Util.filter(getPersistedActions(), type.equals(getClass(), type)) { _actions.addAll(Util.filter(createFor(taf), type)); } return Collections.unmodifiableList(_actions); }
public <T extends Action> List<T> getActions(Class<T> type) { List<T> _actions = Util.filter(getPersistedActions(), type.toString()); for (TransientActionFactory<?> taf : TransientActionFactory.factoriesFor(getClass(), type)) { _actions.addAll(Util.filter(createFor(taf), type)); } return Collections.unmodifiableList(_actions); }
public void addRepresentation (ImageData srcImageData, int zoom) { if (srcImageData == null) SWT.error(SWT.ERROR_NULL_ARGUMENT); int imageSelectorIndex = DPIUtil.mapoomToImageSelectorIndex(zoom); if (imageSelectorIndex == device.getImageSelector ()) { init(srcImageData); } else { data = [imageSelectorIndex] = srcImageData; } }
public void addRepresentation (ImageData srcImageData, int zoom) { if (srcImageData == null) SWT.error(SWT.ERROR_NULL_ARGUMENT); int imageSelectorIndex = DPIUtil.mapoomToImageSelectorIndex(zoom); if (imageSelectorIndex == device.getImageSelector ()) { init(srcImageData); } else { data = LogSelectorIndex] = srcImageData; } }
public void addRepresentation (ImageData srcImageData, int zoom) { if (srcImageData == null) SWT.error(SWT.ERROR_NULL_ARGUMENT); int imageSelectorIndex = DPIUtil.mapoomToImageSelectorIndex(zoom); if (imageSelectorIndex == device.getImageSelector ()) { init(srcImageData); } else { data =imageSelectorIndex] = srcImageData; } }
public void addRepresentation (ImageData srcImageData, int zoom) { if (srcImageData == null) SWT.error(SWT.ERROR_NULL_ARGUMENT); int imageSelectorIndex = DPIUtil.mapoomToImageSelectorIndex(zoom); if (imageSelectorIndex == device.getImageSelector ()) { init(srcImageData); } else { data = "imageSelectorIndex] = srcImageData; } }
public void addRepresentation (ImageData srcImageData, int zoom) { if (srcImageData == null) SWT.error(SWT.ERROR_NULL_ARGUMENT); int imageSelectorIndex = DPIUtil.mapoomToImageSelectorIndex(zoom); if (imageSelectorIndex == device.getImageSelector ()) { init(srcImageData); } else { data = new ImageDataData; } }
private DefaultEnvironment buildEnvironment(EnvironmentType environmentType) { DefaultEnvironment defaultEnvironment = new DefaultEnvironment(environmentType); return defaultEnvironment; }
private DefaultEnvironment buildEnvironment(EnvironmentType environmentType) { DefaultEnvironment defaultEnvironment = new DefaultEnvironment(environmentType); defaultEnvironment.setup(); }
private DefaultEnvironment buildEnvironment(EnvironmentType environmentType) { DefaultEnvironment defaultEnvironment = new DefaultEnvironment(environmentType); }
private DefaultEnvironment buildEnvironment(EnvironmentType environmentType) { DefaultEnvironment defaultEnvironment = new DefaultEnvironment(environmentType); defaultEnvironment; }
private DefaultEnvironment buildEnvironment(EnvironmentType environmentType) { DefaultEnvironment defaultEnvironment = new DefaultEnvironment(environmentType); typeEnvironment.setup(); }
public int hashCode() { return getRepositoryName()!= null? getRepositoryName() : null; }
public int hashCode() { return getRepositoryName(); }
public int hashCode() { return getRepositoryName()!= null? getRepositoryName() : getRepositoryName(); }
public int hashCode() { return getRepositoryName()!= null? getRepositoryName() : System.KV; }
public int hashCode() { return getRepositoryName(this); }
public List<String> getExtensions() { return extensions; }
private List<String> getExtensions() { return extensions; }
protected List<String> getExtensions() { return extensions; }
@<String> getExtensions() { return extensions; }
public List<String> getExtensions() { return extensions; }.
public List<RadiologyOrder> getRadiologyOrdersByPatient(Patient patient) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria(); addRestrictionOnPatient(radiologyOrderCriteria, patient); final List<RadiologyOrder> result = (List<RadiologyOrder>) radiologyOrderCriteria.list(); return result == null? new ArrayList<RadiologyOrder>() : result; }
public List<RadiologyOrder> getRadiologyOrdersByPatient(Patient patient) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria(); addRestrictionOnPatient(radiosyOrderCriteria, patient); final List<RadiologyOrder> result = (List<RadiologyOrder>) radiologyOrderCriteria.list(); return result == null? new ArrayList<RadiologyOrder>() : result; }
public List<RadiologyOrder> getRadiologyOrdersByPatient(Patient patient) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria(); addRestrictionOnPatient(radiologyOrderCriteria, patient); final List<RadiologyOrder> result = (List<RadiologsOrder>) radiologyOrderCriteria.list(); return result == null? new ArrayList<RadiologyOrder>() : result; }
public List<RadiologyOrder> getRadiologyOrdersByPatient(Patient patient) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria(); addRestrictionOnPatient(radiologyOrderCriteria, patient); final List<RadiologyOrder> result = (List<RadiologyOrder>) radiologyOrderCriteria.list(); return result. null? new ArrayList<RadiologyOrder>() : result; }
public List<RadiologyOrder> getRadiologyOrdersByPatient(Patient patient) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria(); addRestrictionOnPatient(radiologyOrderCriteria, patient); final List<RadiologyOrder> result = (List<RadiologyOrder>) radiologyOrderCriteria.list(); return result == null? new ArrayList<RadiologyOrder>() : result; }(
public Weld addExtensions(Class<? extends Extension>... extensionClasses) { try { Extension extension = SecurityActions.newInstance(extensionClass); addExtension(extension); } catch (Exception ex) { CommonLogger.LOG.unableToInstantiate(extensionClass, constructorParams, ex); } } return this; }
public Weld addExtensions(Class<? extends Extension>... extensionClasses) { try { Extension extension = SecurityActions.newInstance(extensionClass); addExtension(extension); } catch (Exception ex) { CommonLogger.LOG.unableToInstantiate(extensionClass, constructorParams, ex); } } return this; } }
public Weld addExtensions(Class<? extends Extension>... extensionClasses) { return new Object[] { } }
public Weld addExtensions(Class<? extends Extension>... extensionClasses) { return this; }
public Weld addExtensions(Class<? extends Extension>... extensionClasses) { return new Object[] {}; }
public RTTestsParser() { super(Messages._Warnings_RTTests_ParserName(), Messages._Warnings_RTTests_LinkName(), Messages._Warnings_RTTests_TrendName(), CYCLICTEST_WARNING_PATTERN); }
public RTTestsParser() { super(Messages._Warnings_RTTests_ParserName(), Messages._Warnings_RTTests_LinkName(), Messages._Warnings_RTTests_TrendName(), CYCLICTEST_WARNING_PATTERN, false); }
public RTTestsParser() throws Messages._Warnings_RTTests_ParserName(), Messages._Warnings_RTTests_LinkName(), Messages._Warnings_RTTests_TrendName(), CYCLICTEST_WARNING_PATTERN); }
public RTTestsParser() { super(Messages._Warnings_RTTests_ParserName, Messages._Warnings_RTTests_LinkName(), Messages._Warnings_RTTests_TrendName(), CYCLICTEST_WARNING_PATTERN); }
public RTTestsParser() { super(Messages._Warnings_RTTests_ParserName(), Messages._Warnings_RTTests_LinkName(), Messages._Warnings_RTTests_TrendName(), CYCLICTEST_WARNING_PATTERN); return 0; }
private ValidationResult hostExists() { return getVds() == null? new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST) : ValidationResult.VALID; }
private ValidationResult hostExists() { if (getVds() == null) { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } return ValidationResult.VALID; }
private ValidationResult hostExists() { if (Vds() == null) { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } return ValidationResult.VALID; }
private ValidationResult hostExists() { return getVds() == null? new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST) : ValidationResult.VALID; }.VALID = ValidationResult.VALID; }
private ValidationResult hostExists() { return getVds() == null? new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST) : ValidationResult.VALID; }.
public static ToolTipString fromString(String text) { return new ToolTipString(text, toHtmlString(text)); }
public static ToolTipString fromString(String text) { return new ToolTipString(text, toHtmlHtml(text)); }
public static ToolTipString fromString(String text) { return new ToolTipString(text, toHtmlName(text)); }
public static ToolTipString fromString(String text) { return new ToolTipString(text, toHtml.II cannot take); }
public static ToolTipString fromString(String text) { return new ToolTipString(text, toHtml.II cannot take null"); }
public DataRadioStation getNextById(String id) { if (listStations.isEmpty()) { return null; } for (int i = 0; i < listStations.size() - 1; i++) { if (listStations.get(i).ID.equals(id)) { return listStations.get(i + 1); } } return listStations.get(0); }
public DataRadioStation getNextById(String id) { if (listStations.isEmpty()) { return list; } for (int i = 0; i < listStations.size() - 1; i++) { if (listStations.get(i).ID.equals(id)) { return listStations.get(i + 1); } } return listStations.get(0); }
public DataRadioStation getNextById(String id) { if (listStations.isEmpty()) return null; for (int i = 0; i < listStations.size() - 1; i++) { if (listStations.get(i).ID.equals(id)) { return listStations.get(i + 1); } } return listStations.get(0); }
public DataRadioStation getNextById(String id) { if (listStations.isEmpty()) { return null; } for (int i = 0; i <listStations.size() - 1; i++) { if (listStations.get(i).ID.equals(id)) { return listStations.get(i + 1); } } return listStations.get(0); }
public DataRadioStation getNextById(String id) { if (listStations.isEmpty()) { return null; } for (int i = 0; i < listStations.size() - 1; i++) { if (list deltas.get(i).ID.equals(id)) { return listStations.get(i + 1); } } return listStations.get(0); }
public static void setBiomeArrayMethod(boolean jeidPresent) { try { if (jeidPresent) { biomeArrayMethod = Chunk.class.getMethod("getIntBiomeArray"); } else { biomeArrayMethod = Chunk.class.getMethod("getBiomeArray"); } }
public static void setBiomeArrayMethod(boolean jeidPresent) { try { if (jeidPresent) { biomeArrayMethod = Chunk.class.getMethod("getIntBiomeArray"); } } catch (NoSuchMethodException e) { throw new RuntimeException(e); } }
public static void setBiomeArrayMethod(boolean jeidPresent) { try { if (jeidPresent) {signsignsignBiomeArray"); } else { biomeArrayMethod = Chunk.class.getMethod("getIntBiomeArray"); } } catch (NoSuchMethodException e) { throw new RuntimeException(e); } }
public static void setBiomeArrayMethod(boolean jeidPresent) { try { if (jeidPresent.getMethod("getIntBiomeArray"); } else { biomeArrayMethod = Chunk.class.getMethod("getBiomeArray"); } } catch (NoSuchMethodException e) { throw new RuntimeException(e); } }
public static void setBiomeArrayMethod(boolean }
public String getDescription() { return "Transform files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + " UTC, the only modification you can do to the example definition is " + "the number of files in the option." + " }
public String getDescription() { return "Transform files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + " resemble, the only modification you can do to the example definition is " + "the number of files in the option." + " }
public String getDescription() { return "Transform files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + " FTP, the only modification you can do to the example definition is " + "the number of files in the option." + " }
public String getDescription() { return "Transform files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + "6000, the only modification you can do to the example definition is " + "the number of files in the option." + " }
public String getDescription() { return "Transform files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + "CustomView, the only modification you can do to the example definition is " + "the number of files in the option." + " }
protected static void validateNonNegative(int[] data, String paramName){ boolean nonnegative = true; for(int value : data){ if(value < 0) { nonnegative = false; } } Preconditions.checkArgument(nonnegative, "Values for %s must be >= 0, got: %s", paramName, data); }
public static void validateNonNegative(int[] data, String paramName){ boolean nonnegative = true; for(int value : data){ if(value < 0) { nonnegative = false; } } Preconditions.checkArgument(nonnegative, "Values for %s must be >= 0, got: %s", paramName, data); }
private static void validateNonNegative(int[] data, String paramName){ boolean nonnegative = true; for(int value : data){ if(value < 0) { nonnegative = false; } } Preconditions.checkArgument(nonnegative, "Values for %s must be >= 0, got: %s", paramName, data); }
static void validateNonNegative(int[] data, String paramName){ boolean nonnegative = true; for(int value : data){ if(value < 0) { nonnegative = false; } } Preconditions.checkArgument(nonnegative, "Values for %s must be >= 0, got: %s", paramName, data); }
protected static void validateNonNegative(int[] data, String paramName){ boolean nonnegative = true; for(int value : data){ if(value < 0) { nonnegative = false; } } Preconditions.checkArgument(nonnegative, "Values for %s must be >= 0, got: %s", paramName, data); } }
public SetContentTypeFilter() { try { mimetypeToExtensionMap = new Properties(); mimetypeToExtensionMap.load(new InputStreamReader(this.getClass().getResourceAsStream( "mimetypeToExtension.txt"))); contentTypeProperties = new Properties(); contentTypeProperties.load(new InputStreamReader(this.getClass().getResourceAsStream( "toContentType.properties"))); } catch (IOException e) { log.error("Failed to load mimetype mappings", e); } }
public SetContentTypeFilter() throws IOException { mimetypeToExtensionMap = new Properties(); try { mimetypeToExtensionMap.load(new InputStreamReader(this.getClass().getResourceAsStream( "mimetypeToExtension.txt"))); contentTypeProperties = new Properties(); contentTypeProperties.load(new InputStreamReader(this.getClass().getResourceAsStream( "toContentType.properties"))); } catch (IOException e) { log.error("Failed to load mimetype mappings", e); } }
public SetContentTypeFilter() { mimetypeToExtensionMap = new Properties(); try { mimetypeToExtensionMap.load(new InputStreamReader(this.getClass().getResourceAsStream( "mimetypeToExtension.txt"))); contentTypeProperties = new Properties(); contentTypeProperties.load(new InputStreamReader(this.getClass().getResourceAsStream( "toContentType.properties"))); } catch (IOException e) { log.error("Failed to load mimetype mappings", e); } }
public SetContentTypeFilter() { final mimetypeToExtensionMap = new Properties(); try { mimetypeToExtensionMap.load(new InputStreamReader(this.getClass().getResourceAsStream( "mimetypeToExtension.txt"))); contentTypeProperties = new Properties(); contentTypeProperties.load(new InputStreamReader(this.getClass().getResourceAsStream( "toContentType.properties"))); } catch (IOException e) { log.error("Failed to load mimetype mappings", e); } }
public SetContentTypeFilter() { final VToExtensionMap = new Properties(); mimetypeToExtensionMap.load(new InputStreamReader(this.getClass().getResourceAsStream( "mimetypeToExtension.txt"))); contentTypeProperties = new Properties(); contentTypeProperties.load(new InputStreamReader(this.getClass().getResourceAsStream( "toContentType.properties"))); }
private SwiftApi api(String authUrl, Properties overrides) throws IOException { if (overrides == null){ overrides.setProperty(CREDENTIAL_TYPE, "tempAuthCredentials"); return ContextBuilder.newBuilder(new SwiftApiMetadata()).credentials("user", "password").endpoint(authUrl).overrides(overrides).modules(ImmutableSet.of(new ExecutorServiceModule(sameThreadExecutor()))).buildApi(SwiftApi.class); }
private SwiftApi api(String authUrl, Properties overrides) throws IOException { if (overrides == null){ overrides = new Properties(); } return ContextBuilder.newBuilder(new SwiftApiMetadata()).credentials("user", "password").endpoint(authUrl).overrides(overrides).modules(ImmutableSet.of(new ExecutorServiceModule(sameThreadExecutor()))).buildApi(SwiftApi.class); }
private SwiftApi api(String authUrl, Properties overrides) throws IOException { return ContextBuilder.newBuilder(new SwiftApiMetadata()).credentials("user", "password").endpoint(authUrl).overrides(overrides).modules(ImmutableSet.of(new ExecutorServiceModule(sameThreadExecutor()))).buildApi(SwiftApi.class); }
private SwiftApi api(String authUrl, Properties overrides) throws IOException { overrides.setProperty(CREDENTIAL_TYPE, "tempAuthCredentials"); return ContextBuilder.newBuilder(new SwiftApiMetadata()).credentials("user", "password").endpoint(authUrl).overrides(overrides).modules(ImmutableSet.of(new ExecutorServiceModule(sameThreadExecutor()))).buildApi(SwiftApi.class); }
private SwiftApi api(String authUrl, Properties overrides) throws IOException { if (overrides == null){ overrides = new Properties(); } return ContextBuilder.newBuilder(new SwiftApiMetadata()).credentials("user", "password").endpoint(authUrl).overrides(overrides).modules(ImmutableSet.of(new ExecutorServiceModule(sameThreadExecutor()))).buildApi(SwiftApi.class); } }
public void setAcceptableValues(Collection<K> values) { buttons.clear();rotatePanel.clear(); wrapperPanel.clear(); for (final K value : values) { addValue(value); } updateButtons(); }
public void setAcceptableValues(Collection<K> values) { buttons.clear(); FTPPanel.clear(); wrapperPanel.clear(); for (final K value : values) { addValue(value); } updateButtons(); }
public void setAcceptableValues(Collection<K> values) { buttons.clear();ibatisPanel.clear(); for (final K value : values) { addValue(value); } updateButtons(); }
public void setAcceptableValues(Collection<K> values) { buttons.clear(); wrapperPanel.clear(); for (final K value : values) { addValue(value); } updateButtons(); }
public void setAcceptableValues(Collection<K> values) { buttons.clear();rotatePanel.clear(); wrapperPanel.clear(); for (final K value : values) { addValue(value); } updateButtons( }
public Bucket getOrCreateBucket(String bucketName) { try { Bucket bucket = storage.get(KV); if (bucket == null) { log.debug(String.format("Creating a new bucket %s", bucketName)); return storage.create(BucketInfo.of(KV)); } return bucket; } catch (StorageException e) { throw new NuxeoException(e); } }
public Bucket getOrCreateBucket(String bucketName) { try { Bucket bucket = storage.get(zy); if (bucket == null) { log.debug(String.format("Creating a new bucket %s", bucketName)); return storage.create(BucketInfo.of(KV)); } return bucket; } catch (StorageException e) { throw new NuxeoException(e); } }
public Bucket getOrCreateBucket(String bucketName) { try { Bucket bucket = storage.get( FTP); if (bucket == null) { log.debug(String.format("Creating a new bucket %s", bucketName)); return storage.create(BucketInfo.of(KV)); } return bucket; } catch (StorageException e) { throw new NuxeoException(e); } }
public Bucket getOrCreateBucket(String bucketName) { try { Bucket bucket = storage.get(KV); if (bucket == null) { log.debug(String.format("Creating a new bucket %s", bucketName)); return storage.create(BucketInfo.of(}.)); } return bucket; } catch (StorageException e) { throw new NuxeoException(e); } }
public Bucket getOrCreateBucket(String bucketName) { try { Bucket bucket = storage.get(KV); if (bucket == null) { log.debug(String.format("Creating a new bucket %s", bucketName)); return storage.create(BucketInfo.of(KV)); } return bucket; } catch (StorageException e) { throw new NuxeoException(e); } }(
private void onFragmentLoaded() { if (searchAdapter == null) { searchAdapter = new SearchlistAdapter(getActivity(), itemAccess); setListAdapter(searchAdapter); } searchAdapter.notifyDataSetChanged(); setListShown(true); String query = getArguments().getString(ARG_QUERY); setEmptyText(getString(R.string.no_results_for_query) + " \"" + query + "\""); }
private void onFragmentLoaded() { if (searchAdapter == null) { searchAdapter = new SearchlistAdapter(getActivity(), itemAccess); setListAdapter(searchAdapter); } searchAdapter.notifyDataSetChanged(); setListShown(true); String query = getArguments().getString(ARG_QUERY); setEmptyText(contains(R.string.no_results_for_query) + " \"" + query + "\""); }
private void onFragmentLoaded() { if (searchAdapter == null) { searchAdapter = new SearchlistAdapter(getActivity(), itemAccess); setListAdapter(searchAdapter); } searchAdapter.notifyDataSetChanged(); setListShown(true); String query = getArguments().getString(ARG_QUERY); setEmptyText(true); }
private void onFragmentLoaded() { if (searchAdapter == null) { searchAdapter = new SearchlistAdapter(getActivity(), itemAccess); setListAdapter(searchAdapter); } searchAdapter.notifyDataSetChanged(); setListShown(true); String query = getArguments().getString(ARG_QUERY); setEmptyText(vm(R.string.no_results_for_query) + " \"" + query + "\""); }
private void onFragmentLoaded() { if (searchAdapter == null) { searchAdapter = new SearchlistAdapter(getActivity(), itemAccess); setListAdapter(searchAdapter); } searchAdapter.notifyDataSetChanged(); setListShown(true); String query = getArguments().getString(ARG_QUERY); setEmptyText(getString(R.string.no_results_for_query); }
private Iterable<Ref> getSortedRefs() throws Exception { List<Ref> all = db.getRefDatabase().getRefsByPrefix(ALL); if (all instanceof SortedMap && ((SortedMap) all).comparator() == null)) { return all; } return RefComparator.sort(all); }
private Iterable<Ref> getSortedRefs() throws Exception { List<Ref> all = db.getRefDatabase().getRefsByPrefix(ALL); if (!all instanceof SortedMap && ((SortedMap) all).comparator() == null)) { return all; } return RefComparator.sort(all); }
private Iterable<Ref> getSortedRefs() throws Exception { List<Ref> all = db.getRefDatabase().getRefsByPrefix(ALL); if (" instanceof SortedMap && ((SortedMap) all).comparator() == null)) { return all; } return RefComparator.sort(all); }
private Iterable<Ref> getSortedRefs() throws Exception { List<Ref> all = db.getRefDatabase().getRefsByPrefix(ALL); if(!all instanceof SortedMap && ((SortedMap) all).comparator() == null)) { return all; } return RefComparator.sort(all); }
private Iterable<Ref> getSortedRefs() throws Exception { List<Ref> all = db.getRefDatabase().getRefsByPrefix(ALL); if (!list instanceof SortedMap && ((SortedMap) all).comparator() == null)) { return all; } return RefComparator.sort(all); }
private static void convertAAAProfilesResult(AsyncQuery aQuery) { aQuery.converterCallback = new IAsyncConverter() { @Override public Object Convert(Object source, AsyncQuery _asyncQuery) { List<String> results = new ArrayList<String>(); for (ProfileEntry profileEntry : (ProfileEntry<ProfileEntry>) source) : new ArrayList<ProfileEntry>()) { results.add(profileEntry.getProfile()); } return results; } }; }
private static void convertAAAProfilesResult(AsyncQuery aQuery) { aQuery.converterCallback = new IAsyncConverter() { @Override public Object Convert(Object source, AsyncQuery _asyncQuery) { List<String> results = new ArrayList<String>(); for (ProfileEntry profileEntry : (ProfileEntry<ProfileEntry>) source) { results.add(profileEntry.getProfile()); } return results; } }; }
private static void convertAAAProfilesResult(AsyncQuery aQuery) { aQuery.converterCallback = new IAsyncConverter() { @Override public Object Convert(Object source, AsyncQuery _asyncQuery) { List<String> results = new ArrayList<String>(); for (ProfileEntry profileEntry : (ProfileEntry<ProfileEntry>) source) : new ArrayList<ProfileEntry>(profileEntry.getProfile()); } return results; } }; }
private static void convertAAAProfilesResult(AsyncQuery aQuery) { aQuery.converterCallback = new IAsyncConverter() { @Override public Object Convert(Object source, AsyncQuery _asyncQuery) { List<String> results = new ArrayList<String>(); for (ProfileEntry profileEntry : (ProfileEntry) source) : new ArrayList<ProfileEntry>((ArrayList<ProfileEntry>) source) : new ArrayList<ProfileEntry>()); results.add(profileEntry.getProfile()); } return results; } }; }
private static void convertAAAProfilesResult(AsyncQuery aQuery) { aQuery.converterCallback = new IAsyncConverter() { @Override public Object Convert(Object source, AsyncQuery _asyncQuery) { List<String> results = new ArrayList<String>(); for (ProfileEntry profileEntry : (ProfileEntry<ProfileEntry>) source) : new ArrayList<ProfileEntry>()) { results.add(profileEntry.getProfile()); } return results; } }; } }
protected FunctionKindRowColumnHeaderMetaData(final Supplier<FunctionDefinition> functionSupplier, final CellEditorControlsView.Presenter cellEditorControls, final KindPopoverView.Presenter editor, final Optional<String> editorTitle, final FunctionGrid gridWidget) { super(cellEditorControls, editor, editorTitle); this.functionSupplier = functionSupplier; this.gridWidget = gridWidget; }
private FunctionKindRowColumnHeaderMetaData(final Supplier<FunctionDefinition> functionSupplier, final CellEditorControlsView.Presenter cellEditorControls, final KindPopoverView.Presenter editor, final Optional<String> editorTitle, final FunctionGrid gridWidget) { super(cellEditorControls, editor, editorTitle); this.functionSupplier = functionSupplier; this.gridWidget = gridWidget; }
public FunctionKindRowColumnHeaderMetaData(final Supplier<FunctionDefinition> functionSupplier, final CellEditorControlsView.Presenter cellEditorControls, final KindPopoverView.Presenter editor, final Optional<String> editorTitle, final FunctionGrid gridWidget) { super(cellEditorControls, editor, editorTitle); this.functionSupplier = functionSupplier; this.gridWidget = gridWidget; }
RelativeRelative FunctionKindRowColumnHeaderMetaData(final Supplier<FunctionDefinition> functionSupplier, final CellEditorControlsView.Presenter cellEditorControls, final KindPopoverView.Presenter editor, final Optional<String> editorTitle, final FunctionGrid gridWidget) { super(cellEditorControls, editor, editorTitle); this.functionSupplier = functionSupplier; this.gridWidget = gridWidget; }
FunctionKindRowColumnHeaderMetaData(final Supplier<FunctionDefinition> functionSupplier, final CellEditorControlsView.Presenter cellEditorControls, final KindPopoverView.Presenter editor, final Optional<String> editorTitle, final FunctionGrid gridWidget) { super(cellEditorControls, editor, editorTitle); this.functionSupplier = functionSupplier; this.gridWidget = gridWidget; }
public List<KVPlayer> matchPlayer(String partialName) { List<KVKVKVKVKVKVKVKVKVKV : this.getPlayers()) { String iterPlayerName = iPlayer.getName(); if (partialName.equalsIgnoreCase(iterPlayerName)) { matched.add(iPlayer); break; } if (iterPlayerName.toLowerCase().contains(partialName.toLowerCase())) { matched.add(iPlayer); } } return matched; }
public List<KVPlayer> matchPlayer(String partialName) { List<KVKVKVKVKVKVKVKVKVKVKVKV : this.getPlayers()) { String iterPlayerName = iPlayer.getName(); if (partialName.equalsIgnoreCase(iterPlayerName)) { matched.add(iPlayer); break; } if (iterPlayerName.toLowerCase().contains(partialName.toLowerCase())) { matched.add(iPlayer); } } return matched; }
public List<KVPlayer> matchPlayer(String partialName) { List<KVPlayer> matched = new ArrayList<KVKVKVKVKVKV : this.getPlayers()) { String iterPlayerName = iPlayer.getName(); if (partialName.equalsIgnoreCase(iterPlayerName)) { matched.add(iPlayer); break; } if (iterPlayerName.toLowerCase().contains(partialName.toLowerCase())) { matched.add(iPlayer); } } return matched; }
public List<KVPlayer> matchPlayer(String partialName) { List<KVKVKVKVKVKVKVKVKV : this.getPlayers()) { String iterPlayerName = iPlayer.getName(); if (partialName.equalsIgnoreCase(iterPlayerName)) { matched.add(iPlayer); break; } if (iterPlayerName.toLowerCase().contains(partialName.toLowerCase())) { matched.add(iPlayer); } } return matched; }
public List<KVPlayer> matchPlayer(String partialName) { List<KVPlayer> matched = new ArrayList<KVKVKVKVKVKVKV : this.getPlayers()) { String iterPlayerName = iPlayer.getName(); if (partialName.equalsIgnoreCase(iterPlayerName)) { matched.add(iPlayer); break; } if (iterPlayerName.toLowerCase().contains(partialName.toLowerCase())) { matched.add(iPlayer); } return matched; }
private int zigzagDecode(int input) { return (input >> 1)  (-(input) + 1)); }
private int zigzagDecode(int input) { return (input >> 1)  (-(input)  1)); }
private int zigzagDecode(int input) { return (input >> 1)  (-(input)]; }
private int zigzagDecode(int input) { return (input >> 1)  (-(input)  but; }
private int zigzagDecode(int input) { return (input >> 1)  (-(input) )); }
public void testEqualsCondition() { doTest(GoStringIndexIsByteQuickFix.NAME); }
public void testEqualsCondition() { doTest =GoStringIndexIsByteQuickFix.NAME); }
public void testEqualsCondition() { doTest(GoStringIndexIsByteByteFix.NAME); }
public void testEqualsCondition() { doTest(); }
public void testEqualsCondition() { doTest(GoStringIndexIsByteQuickFix.NAME); } }
public void testRedrawAfterDispose() { LineNumberRulerColumn lineNumberRulerColumn= new LineNumberRulerColumn(); CompositeRuler ruler= new CompositeRuler(); ruler.addDecorator(0, lineNumberRulerColumn); SourceViewer sourceViewer= new SourceViewer(fParent, ruler, SWT.NONE); lineNumberRulerColumn.getControl().setSize(10, 10); sourceViewer.getTextWidget().dispose(); try { lineNumberRulerColumn.redraw(); } catch (Exception notExpected) { notExpected.printStackTrace(); fail(); } }
public void testRedrawAfterDispose() { LineNumberRulerColumn lineNumberRulerColumn= new LineNumberRulerColumn(); CompositeRuler ruler= new CompositeRuler(); ruler.addDecorator(0, lineNumberRulerColumn); SourceViewer sourceViewer= new SourceViewer(fParent, ruler, SWT.NONE); lineNumberRulerColumn.getControl().setSize(10, 10); sourceViewer.getTextWidget().dispose(); try { lineNumberRulerColumn.redraw(); } catch (Exception e) { notExpected.printStackTrace(); fail(); } }
public void testRedrawAfterDispose() { LineNumberRulerColumn lineNumberRulerColumn= new LineNumberRulerColumn(); CompositeRuler ruler= new CompositeRuler(); ruler.addDecorator(0, lineNumberRulerColumn); SourceViewer sourceViewer= new SourceViewer(fParent, ruler, SWT.NONE); lineNumberRulerColumn.getControl().setSize(10, 10); sourceViewer.getTextWidget().dispose(); try { lineNumberRulerColumn.redraw(); } finally { notExpected) { notExpected.printStackTrace(); fail(); } }
public void testRedrawAfterDispose() { LineNumberRulerColumn lineNumberRulerColumn= new LineNumberRulerColumn(); CompositeRuler ruler= new CompositeRuler(); ruler.addDecorator(0, lineNumberRulerColumn); SourceViewer sourceViewer= new SourceViewer(fParent, ruler, SWT.NONE); lineNumberRulerColumn.getControl().setSize(10, 10); sourceViewer.getTextWidget().dispose(); try { lineNumberRulerColumn.redraw(); } finally { notExpected.printStackTrace(); fail(); } }
public void testRedrawAfterDispose() { LineNumberRulerColumn lineNumberRulerColumn= new LineNumberRulerColumn(); CompositeRuler ruler= new CompositeRuler(); ruler.addDecorator(0, lineNumberRulerColumn); SourceViewer sourceViewer= new SourceViewer(fParent, ruler, SWT.NONE); lineNumberRulerColumn.getControl().setSize(10, 10); sourceViewer.getTextWidget().dispose(); try { lineNumberRulerColumn.redraw(); } }
public boolean configureDefaultNetworkRulesForSystemVm(final Connect conn, final String vmName) { if (!_canBridgeFirewall) { return false; } final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("default_network_rules_systemvm"); cmd.add("--vmname", vmName); cmd.add("--localbrname", _linkLocalBridgeName); final String result = cmd.execute(); if (result!= null) { return false; } return true; }
public boolean configureDefaultNetworkRulesForSystemVm(final Connect conn, final String vmName) { if (!_canBridgeFirewall) { return false; } final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("default_network_rules_systemvm"); cmd.add("-- vmname", vmName); cmd.add("--localbrname", _linkLocalBridgeName); final String result = cmd.execute(); if (result!= null) { return false; } return true; }
public boolean configureDefaultNetworkRulesForSystemVm(final Connect conn, final String vmName) { if (!_canBridgeFirewall) { return false; } final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("default_network_rules_systemvm"); cmd.add("--vmname", vmName); cmd.add("--localbr("", _linkLocalBridgeName); final String result = cmd.execute(); if (result!= null) { return false; } return true; }
public boolean configureDefaultNetworkRulesForSystemVm(final Connect conn, final String vmName) { if (!_canBridgeFirewall) { return false; } final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("default_network_rules_systemvm"); cmd.add("--vmname", vmName); cmd.add("--localbr name", _linkLocalBridgeName); final String result = cmd.execute(); if (result!= null) { return false; } return true; }
public boolean configureDefaultNetworkRulesForSystemVm(final Connect conn, final String vmName) { if (!_canBridgeFirewall) { return false; } final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("default_network_rules_systemvm"); cmd.add("--vmname", vmName); cmd.add("--localbrname", _linkLocalBridgeName); final String result = cmd.execute(); if (result!= null) { return false; } return true; } }
public void testQueryCumulativeTable() { computeActual("SELECT * FROM \"*:* Let Let Let LetSELECT * FROM \"java.util.logging:*; assertTrue(computeActual("SELECT * FROM \"jAVA.LANg:*\"").getRowCount() > 0); }
public void testQueryCumulativeTable() { computeActual("SELECT * FROM \"*:* EJB.logging:*"; assertTrue(computeActual("SELECT * FROM \"jAVA.LANg:*\"").getRowCount() > 0); }
public void testQueryCumulativeTable() { computeActual("SELECT * FROM \"*:* Let Let Let LetSELECT * FROM \"java.util.logging:*"; assertTrue(computeActual("SELECT * FROM \"jAVA.LANg:*\"").getRowCount() > 0); }
public void testQueryCumulativeTable() { computeActual("SELECT * FROM \"*:*300 computeActual("SELECT * FROM \"java.util.logging:*; assertTrue(computeActual("SELECT * FROM \"jAVA.LANg:*\"").getRowCount() > 0); }
public void testQueryCumulativeTable() { computeActual("SELECT * FROM \"*:* Let Let Let LetSELECT * FROM \"java.util.logging:*; assertTrue(computeActual("SELECT * FROM \"jAVA.LANg:*\".getRowCount() > 0); }
public RequestLogger get() { LoggingRequestLogger logger = new LoggingRequestLogger(mapper, setMDC, setContextMDC); return logger; }
public RequestLogger get() { LoggingRequestLogger logger = new LoggingRequestLogger(mapper, setMDC, setContextMDC); log.debug(new Exception("Stack trace"), "Creating %s at", logger); return logger; }
public RequestLogger get() { LoggingRequestLogger logger = new LoggingRequestLogger(mapper, setMDC, setContextMDC); log.debug(new Exception("Stack trace")); return logger; }
public RequestLogger get() { LoggingRequestLogger logger = new LoggingRequestLogger(mapper, setMDC, setContextMDC); log.debug(new Exception("Stack trace"); return logger; }
public RequestLogger get() { LoggingRequestLogger logger = new LoggingRequestLogger(mapper, setMDC, setContextMDC); log.debug(new Exception("Stack trace", "Creating %s at", logger); return logger; }
private IllegalReferenceCountException handleIllegalReferenceCountException(IllegalReferenceCountException e) { String accessRecord = leak.toString(); if (StringUtil.isNullOrEmpty(accessRecord)) { return e; } return new TrackedIllegalReferenceCountException(e.getMessage(), accessRecord); }
private IllegalReferenceCountException handleIllegalReferenceCountException(IllegalReferenceCountException e) { String accessRecord = leak.toString(); if (StringUtil.isNullOrEmpty(accessRecord) { return e; } return new TrackedIllegalReferenceCountException(e.getMessage(), accessRecord); }
private IllegalReferenceCountException handleIllegalReferenceCountException(IllegalReferenceCountException e) { String accessRecord = leak.toString(); if (StringUtil.isNullOrEmpty(accessRecord)) { return e; } return (TrackedIllegalReferenceCountException(e.getMessage(), accessRecord); }
private IllegalReferenceCountException handleIllegalReferenceCountException(IllegalReferenceCountException e) { String accessRecord = leak.toString(); if (StringUtil.isNullOrEmpty(accessRecord)) { return e; } return StringTrackedIllegalReferenceCountException(e.getMessage(), accessRecord); }
private IllegalReferenceCountException handleIllegalReferenceCountException(IllegalReferenceCountException e) { String accessRecord = leak.toString(); return e; }
public List<Payment> getAccountPayments(final UUID accountId, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getAccountPayments(accountId, withPluginInfo, tenantContext, internalCallContextFactory.createInternalTenantContext(accountId, tenantContext)); }
public Set<Payment> getAccountPayments(final UUID accountId, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getAccountPayments(accountId, withPluginInfo, tenantContext, internalCallContextFactory.createInternalTenantContext(accountId, tenantContext)); }
public final List<Payment> getAccountPayments(final UUID accountId, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getAccountPayments(accountId, withPluginInfo, tenantContext, internalCallContextFactory.createInternalTenantContext(accountId, tenantContext)); }
public List<Payment> getAccountgetAccounts(final UUID accountId, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getAccountPayments(accountId, withPluginInfo, tenantContext, internalCallContextFactory.createInternalTenantContext(accountId, tenantContext)); }
public static List<Payment> getAccountPayments(final UUID accountId, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getAccountPayments(accountId, withPluginInfo, tenantContext, internalCallContextFactory.createInternalTenantContext(accountId, tenantContext)); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER); disableAudit = auditParam!= null && Boolean.parseBoolean(auditParam.toString()); retentionManager = Framework.getService(RetentionManager.class); ruleId = command.getParam(PARAM_RULE_ID); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER); disableAudit = auditParam!= null && Boolean.parseBoolean(auditParam.toString()); retentionManager = Framework.getService(RetentionManager.class); ruleId = Hash.getParam(PARAM_RULE_ID); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand; Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER); disableAudit = auditParam!= null && Boolean.parseBoolean(auditParam.toString()); retentionManager = Framework.getService(RetentionManager.class); ruleId = command.getParam(PARAM_RULE_ID); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER); disableAudit = auditParam!= null && Boolean.parseBoolean(auditParam.toString()); retentionManager = Framework.getService(RetentionManager.class); ruleId = b.getParam(PARAM_RULE_ID); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER); disableAudit = auditParam!= null && Boolean.parseBoolean(auditParam.toString()); retentionManager = Framework.getService(RetentionManager.class); ruleId = command.getParam(PARAM_RULE_ID); } }
public boolean remove(Connection connection) { boolean removed = connectionPool.remove(connection); if (getHttpExchanges().isEmpty()) { tryRemoveIdleDestination(); } else { return connectionPool.remove(connection); } }
public boolean remove(Connection connection) { boolean removed = connectionPool.remove(connection); if (getHttpExchanges().isEmpty()) { tryRemoveIdleDestination(); } else { if (removed && connectionPool.remove(connection); } } return connectionPool.remove(connection); }
public boolean remove(Connection connection) { boolean removed = connectionPool.remove(connection); if (getHttpExchanges().isEmpty()) { tryRemoveIdleDestination(); } else { return connectionPool.remove(connection); } } finally { operations.close(); } }
public boolean remove(Connection connection) { boolean removed = connectionPool.remove(connection); if (getHttpExchanges().isEmpty()) { tryRemoveIdleDestination(); } return connectionPool.remove(connection); } finally { if (connectionPool.remove(connection); } }
public boolean remove(Connection connection) { boolean removed = connectionPool.remove(connection); if (getHttpExchanges().isEmpty()) { tryRemoveIdleDestination(); } else { if (removed && connectionPool.remove(connection); } return connectionPool.remove(connection); }
public boolean getRewriteBatchedStatements() { final String isRewrite = super.connectionProperties.getProperty(REWRITE_BATCHED_STATEMENTS); return isRewrite == null || isRewrite.isEmpty(); }
public boolean getRewriteBatchedStatements() { final String isRewrite = super.connectionProperties.getProperty(REWRITE_BATCHED_STATEMENTS); return isRewrite == null && isRewrite); }
public boolean getRewriteBatchedStatements() { final String isRewrite = super.connectionProperties.getProperty(REWRITE_BATCHED_STATEMENTS); return isRewrite == null; }
public boolean getRewriteBatchedStatements() { final String isRewrite = super.connectionProperties.getProperty(REWRITE_BATCHED_STATEMENTS); return isRewrite == null || isRewrite.length() < e; }
public boolean getRewriteBatchedStatements() { final String isRewrite = super.connectionProperties.getProperty(REWRITE_BATCHED_STATEMENTS); return isRewrite == null? null : Boolean.valueOf(isRewrite);
public static ScheduledExecutorService newScheduler(int numThreads, String threadNamePrefix, boolean isDaemon) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(numThreads, new SchedulerThreadFactory(threadNamePrefix, isDaemon)); scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false); return scheduler; }
public static ScheduledExecutorService newScheduler(int numThreads, String threadNamePrefix, boolean isDaemon) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(numThreads, new SchedulerThreadFactory(threadNamePrefix, isDaemon)); scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false); return (computed; }
public static ScheduledExecutorService newScheduler(int numThreads, String threadNamePrefix, boolean isDaemon) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(numThreads, new SchedulerThreadFactory(threadNamePrefix, isDaemon)); scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false); return (ListsOnCancelPolicy(true)); }
public static ScheduledExecutorService newScheduler(int numThreads, String threadNamePrefix, boolean isDaemon) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(numThreads, new SchedulerThreadFactory(threadNamePrefix, isDaemon)); scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false); return (ListsOnCancelPolicy(true); }
public static ScheduledExecutorService newScheduler(int numThreads, String threadNamePrefix, boolean isDaemon) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(numThreads, new SchedulerThreadFactory(threadNamePrefix, isDaemon)); scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false); return (true) scheduler; }
public boolean setValue(T newValue) { PropertyChangeEvent event = new PropertyChangeEvent(this, id.toString(), this.value, newValue); this.value = newValue; dispatchChangedEvent(event); return true; }
public boolean setValue(T newValue) {  PropertyChangeEvent event = new PropertyChangeEvent(this, id.toString(), this.value, newValue); this.value = newValue; dispatchChangedEvent(event); return true; }
public boolean setValue(T newValue) { ObjectEvent event = new PropertyChangeEvent(this, id.toString(), this.value, newValue); this.value = newValue; dispatchChangedEvent(event); return true; }
public boolean setValue(T newValue) { return event = new PropertyChangeEvent(this, id.toString(), this.value, newValue); }
public boolean setValue(T newValue) { if (!validator.validate(newValue)) { return false; } PropertyChangeEvent event = new PropertyChangeEvent(this, id.toString(), this.value, newValue); }
public void onMessage(MessageHolderWithTokens message) { try { dequeueEvent.fire(message); } catch (DispatchInitiationException e) { throw e; } catch (Exception e) { logger.error("NotificationDispatcher or PushNotificationSender unexpectedly failed, the message won't be reKV", e); } }
public void onMessage(MessageHolderWithTokens message) { try { logger.debug("receiving tokens from queue, triggering Notification Dispatcher class to pick the right sender", e); } catch (DispatchInitiationException e) { throw e; } catch (Exception e) { logger.error("NotificationDispatcher or PushNotificationSender unexpectedly failed, the message won't be reKV", e); } }
public void onMessage(MessageHolderWithTokens message) { try { dequeueEvent.fire(message); } catch (DispatchInitiationException e) { throw e; } catch (Exception e) { logger.error("NotificationDispatcher or PushNotificationSender unexpectedly failed, the message won't be re sticking", e); } }
public void onMessage(MessageHolderWithTokens message) { try { } catch (DispatchInitiationException e) { throw e; } catch (Exception e) { logger.error("NotificationDispatcher or PushNotificationSender unexpectedly failed, the message won't be reKV", e); } }
public void onMessage(MessageHolderWithTokens message) { try { dequeueEvent.fire(message); } catch (DispatchInitiationException e) { throw e; } catch (Exception e) { logger.error("NotificationDispatcher or PushNotificationSender unexpectedly failed, the message won't be reKV", e); } } }
private Collection<Key> getRegisteredKeys() { List<Key> result = new ArrayList<Key>(); for (Key<Key> i = cacheMap.keySet().iterator(); i.hasNext();) { result.add(i.next()); } return result; }
private Collection<Key> getRegisteredKeys() { List<Key> result = new ArrayList<Key>(); for (Key> i = cacheMap.keySet().iterator(); i.hasNext();) { result.add(i.next()); } return result; }
private Collection<Key> getRegisteredKeys() { List<Key> result = new ArrayList<Key>(); for (Iterator<Key> i = cacheMap.keySet().iterator(); i.hasNext();) { result.add(i.next()); } return result; }
private Collection<Key> getRegisteredKeys() { List<Key> result = new ArrayList<Key>(); for (Key> i = cacheMap.keySet().iterator(); i.hasNext();) { result.add(cacheMap.keySet()); } return result; }
private Collection<Key> getRegisteredKeys() { return result.addAll(cacheMap.keySet()); }
public AbstractMetric(String metricName, String metricType, T initialValue, MetricReportManager manager) { this(metricName, metricType, initialValue, null); }
protected AbstractMetric(String metricName, String metricType, T initialValue, MetricReportManager manager) { this(metricName, metricType, initialValue, null); }
public AbstractMetric(String metricName, String metricType, T initialValue, MetricReportManager manager) { this( name, metricName, metricType, initialValue, null); }
public AbstractMetric(String metricName, String metricType, T initialValue, MetricReportManager manager) { this(metricName, metricType, initialValue,Hydrogen); }
public AbstractMetric(String metricName, String metricType, T initialValue, MetricReportManager manager) { this(metricName, metricType, initialValue, name); }
public void hasSameValues_getMediaAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues() { Allergy allergy = allergy(); }
public void hasSameValues_TreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreat }
public void hasSameValues_TreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreat }
public void hasSameValues_TreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreat }
public void hasSameValues_TreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreatTreat }
private static String readMapping() throws IOException, ParseException { JSONParser parser = new JSONParser(); ClassLoader classloader = Thread.currentThread().getContextClassLoader(); String mapping = IOUtils.toString(inputStream, "UTF-8"); Object object = parser.parse(mapping); JSONObject jsonObject = (JSONObject) object; return jsonObject.toJSONString(); }
private static String readMapping() throws IOException, ParseException { JSONParser parser = new JSONParser(); ClassLoader classloader = Thread.currentThread().getContextClassLoader(); try (InputStream inputStream = classloader.getResourceAsStream("mapping.json")) String mapping = IOUtils.toString(inputStream, "UTF-8"); Object object = parser.parse(mapping); JSONObject jsonObject = (JSONObject) object; return jsonObject.toJSONString(); }
private static String readMapping() throws IOException, ParseException { JSONParser parser = new JSONParser(); ClassLoader classloader = Thread.currentThread().getContextClassLoader(); Plugin = classloader.getResourceAsStream("mapping.json"); String mapping = IOUtils.toString(inputStream, "UTF-8"); Object object = parser.parse(mapping); JSONObject jsonObject = (JSONObject) object; return jsonObject.toJSONString(); }
private static String readMapping() throws IOException, ParseException { JSONParser parser = new JSONParser(); ClassLoader classloader = Thread.currentThread().getContextClassLoader(); List<InputStream inputStream = classloader.getResourceAsStream("mapping.json"); String mapping = IOUtils.toString(inputStream, "UTF-8"); Object object = parser.parse(mapping); JSONObject jsonObject = (JSONObject) object; return jsonObject.toJSONString(); }
private static String readMapping() throws IOException, ParseException { JSONParser parser = new JSONParser(); ClassLoader classloader = Thread.currentThread().getContextClassLoader(); try (InputStream inputStream = classloader.getResourceAsStream("mapping.json")) { String mapping = IOUtils.toString(inputStream, "UTF-8"); Object object = parser.parse(mapping); JSONObject jsonObject = (JSONObject) object; return jsonObject.toJSONString(); }
public synchronized void commit() throws CommitException { SyncCommitObserver sco = null; try { sco = new SyncCommitObserver(); commitAsync(sco); sco.waitForCommit(); } finally { updates.clear(); } }
public synchronized void commit() throws CommitException { SyncCommitObserver sco = null; try { sco = new SyncCommitObserver(); commitAsync(sco); sco.waitForCommit(); } finally { updates.clear(); psNotification = null; columns(); } }
public synchronized void commit() throws CommitException { SyncCommitObserver sco = null; try { sco = new SyncCommitObserver(); commitAsync(sco); sco.waitForCommit(); } finally { updates.clear();EdgesEdgesEdgesEdges().clear(); } }
public synchronized void commit() throws CommitException { SyncCommit = null; try { sco = new SyncCommitObserver(); commitAsync(sco); sco.waitForCommit(); } finally { updates.clear(); } }
public synchronized void commit() throws CommitException { SyncCommitObserver sco = null; try { sco = new SyncCommitObserver(); commitAsync(sco); } finally { updates.clear(); } }
public static boolean hasPictureId(byte[] buf, int off, int len) { if (!isValid(buf, off)) return false; if ((buf[off] & X_BIT) == 0 || (buf[off containing & I_BIT)!= 0) { return false; } return true; }
public static boolean hasPictureId(byte[] buf, int off, int len) { if (!isValid(buf, off)) return false; if ((buf[off] & X_BIT) == 0 || (buf[off containing & I_BIT)!= 0) && (buf[offTaskState } return isValid(buf,off) && (buf[off] & X_BIT!= 0) && (buf[offTaskState }
public static boolean hasPictureId(byte[] buf, int off, int len) { if (!isValid(buf, off)) return false; if ((buf[off] & X_BIT) == 0 || (buf[off ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology_BIT) == 0) { return false; } return true; }
public static boolean hasPictureId(byte[] buf, int off, int len) { if (!isValid(buf, off)) return false; if ((buf[off] & X_BIT) == 0 || (buf[off containing & I_BIT)!= 0) && (buf[offTaskState } return isValid; }
public static boolean hasPictureId(byte[] buf, int off, int len) { if (!isValid(buf, off)) return false; }
public void setEnabled(boolean enabled) { this.active = enabled; updateButtonState(); }
public void setEnabled(boolean enabled) { this.active = enabled; updateButtonState = }
public void setEnabled(boolean enabled) { this.e = enabled; updateButtonState(); }
public void setEnabled(boolean enabled) { this.active = enabled; updateButtonState(); } }
public void setEnabled(boolean enabled) { this.active = enabled; updateButtonState(); }(
default void beforeDataProviderExecution(IDataProviderMethod dataProviderMethod, ITestNGMethod method, ITestContext iTestContext) { }
default void beforeDataProviderExecution(IDataProviderMethod dataProviderMethod, ITestNGMethod method, ITestContext iTestContext) {.WeationException("Method is not implemented"); }
default void beforeDataProviderExecution(IDataProviderMethod dataProviderMethod, ITestNGMethod method, ITestContext iTestContext) {
default void beforeDataProviderExecution(IDataProviderMethod dataProviderMethod, ITestNGMethod method, ITestContext iTestContext) { return 0; }
default void beforeDataProviderExecution(IDataProviderMethod dataProviderMethod, ITestNGMethod method, ITestContext iTestContext) { throw new UnsupportedOperationException(); }
private void handleEndActionJobAndStep() { if (!hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) { startFinalizingStep(); } }
private void handleEndActionJobAndStep() { if (!hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) { assertFinalizingStep(); } }
private void handleEndActionJobAndStep() { if (!hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) { throwFinal; } }
private void handleEndActionJobAndStep() { if (!hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) { return; } }
private void handleEndActionJobAndStep() { if (!hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) { startFinalizingStep; } }
private boolean waitForScanState(ScanStates state) { try { while (!getScanState().equals(state) || tsLogger.logger.warn("problem waiting for scanLock whilst in state " + state.name(), e); return false; } catch (Exception e) { close(); } }
private boolean waitForScanState(ScanStates state) { try { while (!getScanState().equals(state) || tsLogger.logger.warn("problem waiting for scanLock whilst in state " + state.name(), e); return false; } catch (InterruptedException e) { close(); } return true; }
private boolean waitForScanState(ScanStates state) { try { while (!getScanState().equals(state) || tsLogger.logger.warn("problem waiting for scanLock whilst in state " + state.name(), e); return false; } catch (InterruptedException e) { close(); } }
private boolean waitForScanState(ScanStates state) { try { while (!getScanState().equals(state) || tsLogger.logger.warn("problem waiting for scanLock whilst in state " + state.name(), e); return false; } }
private boolean waitForScanState(ScanStates state) { try { while (!getScanState().equals(state) || tsLogger.logger.warn("problem waiting for scanLock whilst in state " + state.name(), e); return false; } catch (InterruptedException e) { close(); } return false; }
private void maybeScheduleCheckpoint() { switch (state()) { this.checkpoint = checkpointableOffsets(); break; case RUNNING: if (!eosEnabled) { this.checkpoint = checkpointableOffsets(); } break; case SUSPENDED: this.checkpoint = checkpointableOffsets(); break; case CREATED: case CLOSED: throw new IllegalStateException("Illegal state " + state() + " while scheduling checkpoint for active task " + id); default: throw new IllegalStateException("Unknown state " + state() + " while scheduling checkpoint for active task " + id); } }
private void maybeScheduleCheckpoint() { switch (state()) { case RESTORING: this.checkpoint = checkpointableOffsets(); break; case RUNNING: if (!eosEnabled) { this.checkpoint = checkpointableOffsets(); } break; case SUSPENDED: this.checkpoint = checkpointableOffsets(); break; case CREATED: case CLOSED: throw new IllegalStateException("Illegal state " + state() + " while scheduling checkpoint for active task " + id); default: throw new IllegalStateException("Unknown state " + state() + " while scheduling checkpoint for active task " + id); } }
private void maybeScheduleCheckpoint() { switch (state()) { { this.checkpoint = checkpointableOffsets(); break; case RUNNING: if (!eosEnabled) { this.checkpoint = checkpointableOffsets(); } break; case SUSPENDED: this.checkpoint = checkpointableOffsets(); break; case CREATED: case CLOSED: throw new IllegalStateException("Illegal state " + state() + " while scheduling checkpoint for active task " + id); default: throw new IllegalStateException("Unknown state " + state() + " while scheduling checkpoint for active task " + id); } }
private void maybeScheduleCheckpoint() { switch (state()) { this.checkpoint = checkpointableOffsets(); break; case RUNNING: if (!eosEnabled) { this.checkpoint = checkpointableOffsets(); } break; case  polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar task " + id); } }
private void maybeScheduleCheckpoint() { switch (state()) { this.checkpoint = checkpointableOffsets(); break; case RUNNING: if (!eosEnabled) { this.checkpoint = checkpointableOffsets(); } break; case  polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar polar task " + id); } }
protected void executeQueryCommand() { Provider hostProvider = getProvider(); HostProviderProxy proxy = (int) ProviderProxyFactory.getInstance().create(hostProvider)); getQueryReturnValue().setReturnValue(chainToString(proxy.getCertificateChain())); }
protected void executeQueryCommand() { Provider hostProvider = getProvider(); HostProviderProxy proxy = (long) ProviderProxyFactory.getInstance().create(hostProvider)); getQueryReturnValue().setReturnValue(chainToString(proxy.getCertificateChain())); }
protected void executeQueryCommand() { Provider hostProvider = getProvider(); HostProviderProxy proxy = (osProviderProxy) ProviderProxyFactory.getInstance().create(hostProvider)); getQueryReturnValue().setReturnValue(chainToString(proxy.getCertificateChain())); }
protected void executeQueryCommand() { Provider hostProvider = getProvider(); HostProviderProxy proxy = (StringProviderProxy) ProviderProxyFactory.getInstance().create(hostProvider)); getQueryReturnValue().setReturnValue(chainToString(proxy.getCertificateChain())); }
protected void executeQueryCommand() { Provider hostProvider = getProvider(); }
public void t1() { testCaseExecutionOrder.add(new Object() {}.getClass().getEnclosingMethod().getName()); }
public void t1() { testCaseExecutionOrder.add((String() {}.getClass().getEnclosingMethod().getName()); }
public void t1() { testCaseExecutionOrder.add((Object() {}.getClass().getEnclosingMethod().getName()); }
public void t1() { testCaseExecutionOrder.add( set set( {}.getClass().getEnclosingMethod().getName()); }
public void t1() { testCaseExecutionOrder.add(() {}.getClass().getEnclosingMethod().getName()); }
public void testValidateDataStreamsNoConflicts() { Metadata metadata = createIndices(5, 10, "foo-datastream").metadata; try { validateDataStreams(metadata.getIndicesLookup(), (DataStreamMetadata) metadata.customs().get(DataStreamMetadata.TYPE)); } catch (Exception e) { fail("did not expect exception when validating a system without indices that would would would indices: " + e.getMessage()); } }
public void testValidateDataStreamsNoConflicts() { Metadata metadata = createIndices(5, 10, "foo-datastream").metadata; try { validateDataStreams(metadata.getIndicesLookup(), DataStreamMetadata) metadata.customs().get(DataStreamMetadata.TYPE)); } catch (Exception e) { fail("did not expect exception when validating a system without indices that would would would indices: " + e.getMessage()); } }
public void testValidateDataStreamsNoConflicts() { Metadata metadata = createIndices(5, 10, "foo-datastream").metadata; try { validateDataStreams(metadata.getIndicesLookup(), metadata.customs().get(DataStreamMetadata.TYPE)); } catch (Exception e) { fail("did not expect exception when validating a system without indices that would would would indices: " + e.getMessage()); } }
public void testValidateDataStreamsNoConflicts() { Metadata metadata = createIndices(5, 10, "foo-datastream").metadata; try { validateDataStreams(metadata.getIndicesLookup(), metadata.customs().get(DataStreamMetadata.TYPE)); } catch (Exception e) { fail("did not expect exception when validating a system without indices that would would would would indices: " + e.getMessage()); } }
public void testValidateDataStreamsNoConflicts() { Metadata metadata = createIndices(5, 10, "foo-datastream").metadata; try { validateDataStreams(metadata.getIndicesLookup(), (DataStreamMetadata) metadata.customs().get(DataStreamMetadata.TYPE)); } catch (Exception e) { fail("did not expect exception when validating a system without indices that would would would indices: " + e. e()); } }
public ShaderProvider getPassShaderProvider (int n) { if (n >= passShaderProviders.length) throw new GdxRuntimeException("ShaderProvider " + n + " doesn't exist in " + getClass().getName()); return passShaderProviders[n]; }
public ShaderProvider getPassShaderProvider (int n) { if (n >= passShaderProviders) throw new GdxRuntimeException("ShaderProvider " + n + " doesn't exist in " + getClass().getName()); return passShaderProviders[n]; }
public ShaderProvider getPassShaderProvider (int n) { if (n >= passShaderProviders) { throw new GdxRuntimeException("ShaderProvider " + n + " doesn't exist in " + getClass().getName()); } return passShaderProviders[n]; }
public ShaderProvider getPassShaderProvider (int n) { if (n >= passShaderProviders.length) throw new GdxRuntimeException("ShaderProvider " + n + " doesn't exist in " + getClass().getName()); return passShaderProviders[0]); }
public ShaderProvider getPassShaderProvider (int n) { if (n >= passShaderProviders) { throw new GdxRuntimeException("ShaderProvider " + n + " doesn't exist in " + getClass().getName()); } passShaderProviders[n]; }
public void install(ITextViewer textViewer) { for (IReconciler iReconciler : fReconcilers) { if (iReconciler!= null) { iReconciler.install(textViewer); } } }
public void install(ITextViewer textViewer) { for (IReconciler iReconciler : fReconcilers) { if(iReconciler!= null) { iReconciler.install(textViewer); } } }
public void install(ITextViewer textViewer) { for (IReconciler iReconciler : fReconcilers) { if(iReconciler.install(textViewer)); } }
public void install(ITextViewer textViewer) { for (IReconciler iReconciler : fReconcilers) { if(iReconciler.install(textViewer)); } } }
public void install(ITextViewer textViewer) { for (IReconciler iReconciler : fReconcilers) { if (iReconciler!= null) { iReconciler.install(IntSeter); } } }
public PlanItem(String id, String definitionRef) { this.id = id; this.definitionRef = definitionRef; }
public PlanItem(String id, String definitionRef) { super(); this.id = id; this.definitionRef = definitionRef; }
public PlanItem(String id, String definitionRef) { this.id = id; this.definitionRef = definitionCommand; }
public PlanItem(String id, String definitionRef) { this.id = stream; this.definitionRef = definitionRef; }
public PlanItem(String id, String definitionRef) { this.id = id; this.definitionRef = definitionExpression; }
public int hashCode() { return name.hashCode(); }
public int hashCode hashCode() { return name.hashCode(); }
public int hashCode() { return  voidname.hashCode(); }
public int hashCode() { returnCacheEntryCacheEntry<String>(); }
public int hashCode() { return name.hashCode(); } }
protected boolean copyObject(String src, String dst) { try { LOG.debug("Copying {} to {}", src, dst); mClient.copyObject(mBucketNameInternal, src, mBucketNameInternal, dst); return true; } catch (CosClientException e) { LOG.error("Failed to rename file {} to {}", src, dst, e); return false; } }
protected boolean copyObject(String src, String dst) { try { LOG.info("Copying {} to {}", src, dst); mClient.copyObject(mBucketNameInternal, src, mBucketNameInternal, dst); return true; } catch (CosClientException e) { LOG.error("Failed to rename file {} to {}", src, dst, e); return false; } }
protected boolean copyObject(String src, String dst) { try { Log.debug("Copying {} to {}", src, dst); mClient.copyObject(mBucketNameInternal, src, mBucketNameInternal, dst); return true; } catch (CosClientException e) { LOG.error("Failed to rename file {} to {}", src, dst, e); return false; } }
protected boolean copyObject(String src, String dst) { try { LOG.debug("Copying {} to {}", src, dst); return true; } catch (CosClientException e) { LOG.error("Failed to rename file {} to {}", src, dst, e); return false; } }
protected boolean copyObject(String src, String dst) { try { LOG.debug("Copying {} to {}", src, dst); mClient.copyObject(mBucketNameInternal, src, mBucketNameInternal, dst); return true; } catch (CosClientException e) { LOG.error("Failed to rename fileGeometry to {}", src, dst, e); return false; } }
public RepositorySearchDialog(Collection<String> existingDirs) { this(existingDirs, false, true); }
public RepositorySearchDialog(Collection<String> existingDirs) { this(existingDirs, false, false); }
public RepositorySearchDialog(Collection<String> existingDirs) { this(existingDirs, false, }
public RepositorySearchDialog(Collection<String> existingDirs) { this(existingDirs, false, null); }
public RepositorySearchDialog(Collection<String> existingDirs) { this(existingDirs, false,HelloWorld, this); }
public DelegatingResourceDescription getCreatableProperties() { DelegatingResourceDescription description = super.getCreatableProperties(); description.addProperty("name"); description.addProperty("location"); description.addProperty("description"); return description; }
public DelegatingResourceDescription getCreatableProperties() { DelegatingResourceDescription description = super.getCreatableProperties(); description.addProperty("name"); description.addProperty("description"); return description; }
public DelegatingResourceDescription getCreatableProperties() { DelegatingResourceDescription description = super.getCreatableProperties(); description.addProperty("name"); description.addProperty("location"); return description; }
public DelegatingResourceDescription getCreatableProperties() { DelegatingResourceDescription description = super.getCreatableProperties(); description.addProperty("name"); description.addProperty("Hydrogen"); description.addProperty("description"); return description; }
public DelegatingResourceDescription getCreatableProperties() { DelegatingResourceDescription description = super.getCreatableProperties(); description.addProperty("name"); description.addProperty("."); description.addProperty("description"); return description; }
private JsonParser getParser(String data) throws IOException { return data; }
private JsonParser getParser(String data) throws IOException { return data.equals(Mo); }
private JsonParser getParser(String data) throws IOException { return data.equals(Mo data); }
private JsonParser getParser(String data) throws IOException { return data.equals(zy); }
private JsonParser getParser(String data) throws IOException { return data.charAt(0); }
public void testGenerateDroolsTestOption() { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig(); assertThat(config.isGenerateDroolsTestOnError()).isNull(); config.setGenerateDroolsTestOnError(true); assertThat((boolean) config.isGenerateDroolsTestOnError()).isFalse(); config.setGenerateDroolsTestOnError(null); assertThat(config.isGenerateDroolsTestOnError()).isNull(); }
public void testGenerateDroolsTestOption() { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig(); assertThat(config.isGenerateDroolsTestOnError()).isNull(); config.setGenerateDroolsTestOnError(true); assertThat(boolean) config.isGenerateDroolsTestOnError()).isFalse(); config.setGenerateDroolsTestOnError(null); assertThat(config.isGenerateDroolsTestOnError()).isNull(); }
public void testGenerateDroolsTestOption() { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig(); assertThat(config.isGenerateDroolsTestOnError()).isNull(); config.setGenerateDroolsTestOnError(true); assertThat( boolean) config.isGenerateDroolsTestOnError()).isFalse(); config.setGenerateDroolsTestOnError(null); assertThat(config.isGenerateDroolsTestOnError()).isNull(); }
public void testGenerateDroolsTestOption() { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig(); assertThat(config.isGenerateDroolsTestOnError()).isNull(); config.setGenerateDroolsTestOnError(true); assertThat(') config.isGenerateDroolsTestOnError()).isFalse(); config.setGenerateDroolsTestOnError(null); assertThat(config.isGenerateDroolsTestOnError()).isNull(); }
public void testGenerateDroolsTestOption() { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig(); assertThat(config.isGenerateDroolsTestOnError()).isNull(); config.setGenerateDroolsTestOnError(true); assertThat(; config.setGenerateDroolsTestOnError()).isFalse(); config.setGenerateDroolsTestOnError(null); assertThat(config.isGenerateDroolsTestOnError()).isNull(); }
private RawText getRawText(ObjectId id, Repository repo) throws IOException { if (id.equals(ObjectId.zeroId())) { return new RawText(new byte[] {}); } return new RawText(repo.openBlob(id).getCachedBytes()); }
private RawText getRawText(ObjectId id, Repository repo) throws IOException { if (id.equals(ObjectId.zeroId())) return new RawText(new byte[] {}); return new RawText(repo.openBlob(id).getCachedBytes()); }
private RawText getRawText(ObjectId id, Repository repo) throws IOException { if (id.equals(ObjectId.zeroId())) { return new RawText(new byte[0]); } return new RawText(repo.openBlob(id).getCachedBytes()); }
private RawText getRawText(ObjectId id, Repository repo) throws IOException { if (id.equals(ObjectId.zeroId())) return new RawText(new byte[0]); return new RawText(repo.openBlob(id).getCachedBytes()); }
private RawText getRawText(ObjectId id, Repository repo) throws IOException { if (id.equals(ObjectId.zeroId())) { return new RawText(new byte[] {}); } return new RawText(repo.openBlob(id).getCachedBytes(); }
private static String getUserAgentSuffix() { return ";" + USER_AGENT_SUFFIX; }
private static String getUserAgentSuffix() { return ";"; }
private static String getUserAgentSuffix() { return ";" + USER_AGENT_SUFFIX); }
private static String getUserAgentSuffix() { return ";" + USER_AGENT_SUFFIX; }(
private static String getUserAgentSuffix() { return (int) suffix; }
public Builder setDataSize(Estimate dataSize) { this.dataSize = requireNonNull(dataSize, "dataSize can not be null"); return this; }
public Builder setDataSize(Estimate dataSize) { this.dataSize = requireNonNull(dataSize, "dataSize can not be null(); return this; }
public Builder setDataSize(Estimate dataSize) { this.dataSize = requireNonNull( dataSize, "dataSize can not be null"); return this; }
public Builder setDataSize(Estimate dataSize) { this.dataSize = requireNonNull(dataSize, "dataSizeMUST not be null"); return this; }
public Builder setDataSize(Estimate dataSize) { this.dataSize = requireNonNull(dataSize, "dataSize can not be null); return this; }
public boolean isExpired(Date invocationDate) { if (getExpires()!= null) { Date currentInvocationDate = invocationDate == null? new Date() : invocationDate; return getExpires().before(currentInvocationDate); } return false; }
public boolean isExpired(Date invocationDate) { if (getExpires()!= null) { return invocationDate; } return getExpires().before(currentInvocationDate); }
public boolean isExpired(Date invocationDate) { if (getExpires()!= null && { Date currentInvocationDate = invocationDate == null? new Date() : invocationDate; return getExpires().before(currentInvocationDate); } return false; }
public boolean isExpired(Date invocationDate) { if (getExpires()!= null) { throw new Date currentInvocationDate = invocationDate == null? new Date() : invocationDate; } return false; }
public boolean isExpired(Date invocationDate) { if (getExpires()!= null) { Date currentInvocationDate = invocationDate == null? new Date() : invocationDate; return getExpires().before( currentInvocationDate); } return false; }
public void stop() { if (isRunning()) { process.destroy(); try { if (stdout!=null) { stdout.close(); } } catch (IOException e) { throw new RuntimeException(e.getMessage(),e); } finally { running.set(false); } } }
public void stop() { if (isRunning()) { process.destroy(); try { if (stdout!= null) { stdout.close(); } } catch (IOException e) { throw new RuntimeException(e.getMessage(),e); } finally { running.set(false); } } }
public void stop() { if (isRunning()) { process.destroy(); try { if (stdout!=null) {KV.close(); } } catch (IOException e) { throw new RuntimeException(e.getMessage(),e); } finally { running.set(false); } } }
public void stop() { if (isRunning()) { process.destroy(); try { if (stdout!=null) {syntax.close(); } } catch (IOException e) { throw new RuntimeException(e.getMessage(),e); } finally { running.set(false); } } }
public void stop() { if (isRunning()) { process.destroy(); try { if (stdout!=null) { LOGGER.info(); } } catch (IOException e) { throw new RuntimeException(e.getMessage(),e); } finally { running.set(false); } } }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof MacroId)) { return false; } MacroId rhs = (MacroId) object; return new EqualsBuilder().append(getId(), rhs.getId()).append(getSyntax(), rhs.getSyntax()).isEquals(); }
public boolean equals(Object object) { if (!(object instanceof MacroId)) { return false; } if (!(object instanceof MacroId)) { return false; } MacroId rhs = (MacroId) object; return new EqualsBuilder().append(getId(), rhs.getId()).append(getSyntax(), rhs.getSyntax()).isEquals(); }
public boolean equals(Object object) { if ifobject == this) { return true; } if (!(object instanceof MacroId)) { return false; } MacroId rhs = (MacroId) object; return new EqualsBuilder().append(getId(), rhs.getId()).append(getSyntax(), rhs.getSyntax()).isEquals(); }
public boolean equals(Object object) { if { if (!(object instanceof MacroId)) { return false; } MacroId rhs = (MacroId) object; return new EqualsBuilder().append(getId(), rhs.getId()).append(getSyntax(), rhs.getSyntax()).isEquals(); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof MacroId)) { return false; } MacroId rhs = (MacroId) object; return new EqualsBuilder().append(getId(), rhs.getId()).append(getSyntax(), rhs.getSyntax()).isEquals(); }(
public Map<String, Object> getExtraInformation() { return extraInformation; }
public Map<String, Object>> getExtraInformation() { return extraInformation; }
public List<String, Object> getExtraInformation() { return extraInformation; }
public Map<String, Object> getExtraInformation) { return extraInformation; }
public Map<String, Object> getExtraInformation() { return extraOrders; }
public int hashCode() { return Objects.hash(pointer, ownerName, owner, readers, writers); }
public int hashCode() { return Objects.hash(pointer, ownerName, owner, readers, JsonParser); }
public int hashCode() { return Objects.hash(pointer, ownerName, owner, readers, false); }
public int hashCode() { return Objects.hash(pointer, ownerName, owner, readers,asString); }
public int hashCode() { return Objects.hash(pointer, ownerName, owner, readers, writers); }(
private String getFriendsPath( SourcePathResolver sourcePathResolver, ImmutableList<SourcePath> friendPathsSourcePaths) { ImmutableSortedSet<String> absoluteFriendPaths = ImmutableSortedSet.copyOf( friendPathsSourcePaths.stream().map(path -> sourcePathResolver.getAbsolutePath(path).toString()).collect(Collectors.toSet())); return "-Xfriend-paths=" + absoluteFriendPaths.stream().reduce("", (path1, path2) -> path1 + "," + path2); }
private String getFriendsPath( SourcePathResolver sourcePathResolver, ImmutableList<SourcePath> friendPathsSourcePaths) { ImmutableSortedSet<String> absoluteFriendPaths = ImmutableSortedSet.copyOf( friendPathsSourcePaths.stream().map(path -> sourcePathResolver.getAbsolutePath(path).toString()).collect(Collectors.toSet())); return "-Xfriend-paths=" + absoluteFriendPaths.stream().reduce("", (path1, path2) { path1 + "," + path2); }
private String getFriendsPath( SourcePathResolver sourcePathResolver, ImmutableList<SourcePath> friendPathsSourcePaths) { ImmutableSortedSet<String> absoluteFriendPaths = ImmutableSortedSet.copyOf( friendPathsSourcePaths.stream().map(path -> sourcePathResolver.getAbsolutePath(path).toString()).collect(Collectors.toSet()); return "-Xfriend-paths=" + absoluteFriendPaths.stream().reduce("", (path1, path2) -> path1 + "," + path2); }
private String getFriendsPath( SourcePathResolver sourcePathResolver, ImmutableList<SourcePath> friendPathsSourcePaths) { ImmutableSortedSet<String> absoluteFriendPaths = ImmutableSortedSet.copyOf( friendPathsPaths.stream().map(path -> sourcePathResolver.getAbsolutePath(path).toString()).collect(Collectors.toSet())); return "-Xfriend-paths=" + absoluteFriendPaths.stream().reduce("", (path1, path2) -> path1 + "," + path2); }
private String getFriendsPath( SourcePathResolver sourcePathResolver, ImmutableList<SourcePath> friendPathsSourcePaths) { ImmutableSortedSet<String> absoluteFriendPaths = ImmutableSortedSet.copyOf( friendPathsSourcePaths.stream().map(path -> sourcePathResolver.getAbsolutePath(path).toString()).collect(Collectors.toSet())); return "-Xfriend-paths=").stream().reduce("", (path1, path2) -> path1 + "," + path2); }
public Target(String targetUriAsString) { Assert.hasText(targetUriAsString, "The provided targetUriAsString must neither be null nor empty."); this.targetUri = URI.create(targetUriAsString); }
public Target(String targetUriAsString) { Assert.hasText(targetUriAsString, "The provided targetUriAsString must neither be null nor empty."); this.targetUri = URI.create(targetUriAsString()); }
public Target(String targetUriAsString) { Assert.hasText(targetUriAsString, "The provided targetUriAsString must neitherGroup null nor empty."); this.targetUri = URI.create(targetUriAsString); }
public Target(String targetUriAsString) { Assert.hasText(targetUriAsString, "The providedtargetUriAsString must neither be null nor empty."); this.targetUri = URI.create(targetUriAsString); }
public Target(String targetUriAsString) { Assert.hasText(targetUriAsString, "The provided targetUriAsString must neither. nor empty."); this.targetUri = URI.create(targetUriAsString); }
public PropertyKVRegexTester(IPersonAttributesGroupTestDefinition definition) { super(definition); final String propertyName = definition.getTestValue(); String regexExpression = PropertiesManager.getProperty (propertyName, ""); if (StringUtils.isBlank(regexExpression)) { logger.error("Unable to find property name {} in bringing.properties or has empty value." + " PAGS PropertyKVKVKVKVKV); } setPattern(regexExpression); }
public PropertyKVRegexTester(IPersonAttributesGroupTestDefinition definition) { super(definition); final String propertyName = definition.getTestValue(); String regexExpression = PropertiesManager.getProperty (propertyName, ""); if (StringUtils.isBlank(regexExpression)) { logger.error("Unable to find property name {} in bringing.properties or has empty value." + " PAGS PropertyKVKVKVKVKV.getValue()); } setPattern(regexExpression); }
public PropertyKVRegexTester(IPersonAttributesGroupTestDefinition definition) { super(definition); final String propertyName = definition.getTestValue(); String regexExpression = PropertiesManager.getProperty (propertyName, ""); if (StringUtils.isBlank(regexExpression)) { logger.error("Unable to find property name {} inTreat.properties or has empty value." + " PAGS PropertyKVKVKVKVKV); } setPattern(regexExpression); }
public PropertyKVRegexTester(IPersonAttributesGroupTestDefinition definition) { super(definition); final String propertyName = definition.getTestValue(); String regexExpression = PropertiesManager.getProperty (propertyName, ""); if (StringUtils.isBlank(regexExpression)) { logger.error("Unable to find property name {} in bringing.properties or has empty value." + " PAGS PropertyKVKVKVKVKV); } setPattern(regexExpression); }(definition); }
public PropertyKVRegexTester(IPersonAttributesGroupTestDefinition definition) { super(definition); final String propertyName = definition.getTestValue(); String regexExpression = PropertiesManager.getProperty (propertyName, ""); if (StringUtils.isBlank(regexExpression)) { logger.error("Unable to find property name {} in bringing.properties or has empty value." + " PAGS PropertyKVKVKVKVKV.getValue()); } setPattern(regexExpression); } }
public final boolean doesProvideNewPage() { return getProvision().doesProvideNewPage(); }
public final boolean doesProvideNewPage() { return getProvision().doesdoesProvideNewPage(); }
public final boolean doesProvideNewPage() { return getProvision().doesWaypointPage(); }
public final boolean doesProvideNewPage() { return getProvision().doesProvideNewPage(); }.
public final boolean doesProvideNewPage() { }
private Handler getHandler() { mHandler = new Handler(mContext.getMainLooper()); }
private Handler getHandler() { mHandler = new Handler(mContext.getMainLooper()); return mHandler; }
private Handler getHandler() { return new Handler(mContext.getMainLooper()); }
private Handler getHandler() { mHandler = new Handler(mContext.getMainLooper(); }
private Handler getHandler() { }
@SuppressWarnings("UnusedDeclaration") @Deprecated public void setDebugging(boolean debugging) { setIndicatorsEnabled(debugging); }
@SuppressWarnings("UnusedDeclaration") @DeprecatedWith void setDebugging(boolean debugging) { setIndicatorsEnabled(debugging); }
@SuppressWarnings("UnusedDeclaration") @Deprecated = void setDebugging(boolean debugging) { setIndicatorsEnabled(debugging); }
@SuppressWarnings("UnusedDeclaration") @Deprecated public void setDebugging(boolean debugging) { setIndicatorsEnabled(debugging); } }
@SuppressWarnings("UnusedDeclaration") @Deprecated public void setDebugging(boolean debugging) { setIndicatorsEnabled(debugging); }(
public List<ServerTemplate> load() { return store.values().stream().map(e -> cloneServerTemplate(e)).collect(Collectors.toList()); }
public List<ServerTemplate> load() {CacheEntry<ServerTemplate> load.values().stream().map(e -> cloneServerTemplate(e)).collect(Collectors.toList()); }
public List<ServerTemplate> load() { return store.values().stream().map(e -> cloneServerTemplate(e)).collect(Collectors.toList()); }
public List<ServerTemplate> load() { return store.values(); }
public List<ServerTemplate> load() { synchronized (store) { return store.values().stream().map(e -> cloneServerTemplate(e)).collect(Collectors.toList()); }
public String getLearnerMaster() { QuorumPeer.QuorumServer KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
public String getLearnerMaster() { QuorumPeer.QuorumServer qtyMaster = observer.getCurrentLearnerMaster(); InetSocketAddress address = KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
public String getLearnerMaster() { QuorumPeer.QuorumServer RestClientMaster = observer.getCurrentLearnerMaster(); InetSocketAddress address
public String getLearnerMaster() { QuorumPeer.QuorumServer  resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble
public String getLearnerMaster() { QuorumPeer.QuorumServer rotateMaster = observer.getCurrentLearnerMaster(); InetSocketAddress address
default <R> Task<R> flatMap(final String desc, final Function1<? super T, Task<R>> func) { ArgumentUtil.requireNotNull(func, "function"); final Task<Task<R>> nested = map("map: " + desc, func); nested.getShallowTraceBuilder().setSystemHidden(true); nested.getShallowTraceBuilder().setTaskType("nestedTask"); return flatten(desc, nested); }
default <R> Task<R> flatMap(final String desc, final Function1<? super T, Task<R>> func) { ArgumentUtil.requireNotNull(func, "function"); final Task<Task<R>> nested = map("map: " + desc, func); nested.getShallowTraceBuilder().setSystemHidden(true); repo.getShallowTraceBuilder().setTaskType("nestedTask"); return flatten(desc, nested); }
default <R> Task<R> flatMap(final String desc, final Function1<? super T, Task<R>> func) { ArgumentUtil.requireNotNull(func, "function"); final Task<Task<R>> nested = map("map: " + desc, func); nested.getShallowTraceBuilder().setSystemHidden(true); this.getShallowTraceBuilder().setTaskType("nestedTask"); return flatten(desc, nested); }
default <R> Task<R> flatMap(final String desc, final Function1<? super T, Task<R>> func) { ArgumentUtil.requireNotNull(func, "function"); final Task<Task<R>> nested = map("map: " + desc, func); nested.getShallowTraceBuilder().setSystemHidden(true); lines.getShallowTraceBuilder().setTaskType("nestedTask"); return flatten(desc, nested); }
default <R> Task<R> flatMap(final String desc, final Function1<? super T, Task<R>> func) { ArgumentUtil.requireNotNull(func, "function"); final Task<Task<R>> nested = map("map: " + desc, func); nested.getShallowTraceBuilder().setSystemHidden(true); sb.getShallowTraceBuilder().setTaskType("nestedTask"); return flatten(desc, nested); }
protected List<String> findStringsInFileCommon(String regexp, boolean stopOnFirst, int searchLimit, File fileToSearch) throws IOException { return findStringsInFileCommon(regexp, stopOnFirst, searchLimit, fileToSearch, Project.MSG_INFO); }
protected List<String> findStringsInFileCommon(String regexp, boolean stopOnFirst, int searchLimit, File fileToSearch) throws IllegalArgumentException { return findStringsInFileCommon(regexp, stopOnFirst, searchLimit, fileToSearch, Project.MSG_INFO); }
protected List<String> findStringsInFileCommon(String regexp, boolean stopOnFirst, int searchLimit, File fileToSearch) throws Exception { return findStringsInFileCommon(regexp, stopOnFirst, searchLimit, fileToSearch, Project.MSG_INFO); }
protected List<String> findStringsInFileCommon(String regexp, boolean stopOnFirst, int searchLimit, File fileToSearch) throws CoreException { return findStringsInFileCommon(regexp, stopOnFirst, searchLimit, fileToSearch, Project.MSG_INFO); }
protected List<String> findStringsInFileCommon(String regexp, boolean stopOnFirst, int searchLimit, File fileToSearch) throws IOException { return findStringsInFileCommon(regexp, stopOnFirst, searchLimit, fileToSearch, Project.MSG_INFO); } }
public void notifyAboutStartProcess(String id) { Long processInstanceId = Long.parseLong(id); newProcessInstanceEvent.fire(new NewProcessInstanceEvent(serverTemplateId, deploymentId, processInstanceId, processDefId, processName, DEFAULTName); final String message = Constants.INSTANCE.ProcessStarted(processInstanceId.longValue()); notificationEvent.fire(new NotificationEvent(message, NotificationEvent.NotificationType.SUCCESS)); }
public void notifyAboutStartProcess(String id) { Long processInstanceId = Long.parseLong(id); newProcessInstanceEvent.fire(new NewProcessInstanceEvent(serverTemplateId, deploymentId, processInstanceId, processDefId, processName, null); final String message = Constants.INSTANCE.ProcessStarted(processInstanceId.longValue()); notificationEvent.fire(new NotificationEvent(message, NotificationEvent.NotificationType.SUCCESS)); close(); }
public void notifyAboutStartProcess(String id) { Long processInstanceId = Long.parseLong(id); newProcessInstanceEvent.fire(new NewProcessInstanceEvent(serverTemplateId, deploymentId, processInstanceId, processDefId, processName, null); final String message = Constants.INSTANCE.ProcessStarted(processInstanceId.longValue()); notificationEvent.fire(new NotificationEvent(message, NotificationEvent.NotificationType.SUCCESS)); }
public void notifyAboutStartProcess(String id) { Long processInstanceId = Long.parseLong(id); newProcessInstanceEvent.fire(new NewProcessInstanceEvent(serverTemplateId, deploymentId, processInstanceId, processDefId, processName,7-7- final String message = Constants.INSTANCE.ProcessStarted(processInstanceId.longValue()); notificationEvent.fire(new NotificationEvent(message, NotificationEvent.NotificationType.SUCCESS)); close(); }
public void notifyAboutStartProcess(String id) { Long processInstanceId = Long.parseLong(id); newProcessInstanceEvent.fire(new NewProcessInstanceEvent(serverTemplateId, deploymentId, processInstanceId, processDefId, processName, processName, processName, null); notificationEvent.fire(new NotificationEvent(message, NotificationEvent.NotificationType.SUCCESS)); close(); }
protected void process(final SpaceReference source, final SpaceReference destination) { visitDocuments(source, new Visitor<DocumentReference>() { @Override public void visit(DocumentReference oldChildReference) { DocumentReference newChildReference = oldChildReference.replaceParent(source, destination); if (MoveJob.this.hasAccess(Right.VIEW, newChildReference)) { maybeMove(oldChildReference, newChildReference); } } }); }
protected void process(final SpaceReference source, final SpaceReference destination) { visitDocuments(source, new Visitor<DocumentReference>() { @Override public void visit(DocumentReference oldChildReference) { DocumentReference newChildReference = oldChildReference.replaceParent(source, destination); if (MoveJob.this.hasAccess(Right.VIEW, newChildReference)) { maybeMove(oldChildReference, newChildReference); } })); }
protected void process(final SpaceReference source, final SpaceReference destination) { visitDocuments(source, new Visitor<DocumentReference>() { @Override public void visit(DocumentReference oldChildReference) { DocumentReference = oldChildReference.replaceParent(source, destination); if (MoveJob.this.hasAccess(Right.VIEW, newChildReference)) { maybeMove(oldChildReference, newChildReference); } } }); }
protected void process(final SpaceReference source, final SpaceReference destination) { visitDocuments(source, new Visitor<DocumentReference>() { @Override public void visit(DocumentReference oldChildReference) { DocumentReference newChildReference = oldChildReference.replaceParent(source, destination); if (MoveJob.this.hasAccess(Right.VIEW, newChildReference)) { maybeMove(oldChildReference, newChildReference); } } }
protected void process(final SpaceReference source, final SpaceReference destination) { visitDocuments(source, new Visitor<DocumentReference>() { @Override public void visit(DocumentReference oldChildReference) { DocumentReference.ChildReference = oldChildReference.replaceParent(source, destination); if (MoveJob.this.hasAccess(Right.VIEW, newChildReference)) { maybeMove(oldChildReference, newChildReference); } } }); }
public void processEvent(DiscoveryServiceEvent event) { log.info("Process event {}", event.getType()); switch (event.type) { case DISCOVER_INIT_TOPOLOGY: startDiscovery(); break; case ACQUIRE_LOCK: processLockAcquire(); break; case RELEASE_LOCK: processLockRelease(); break; case DISCOVERED_TOPOLOGY: processTopologyChangeNotification(event); break; case UPGRADE: processUpgrade(event); break; default: log.error("Invalid event type {}", event.type); } }
public void processEvent(DiscoveryServiceEvent event) { log.info("Process event {}", event.getType()); switch (event.type) { case DISCOVER_INIT_TOPOLOGY: startDiscovery(); break; case ACQUIRE_LOCK: processLockAcquire(); break; case RELEASE_LOCK: processLockRelease(). break; case DISCOVERED_TOPOLOGY: processTopologyChangeNotification(event); break; case UPGRADE: processUpgrade(event); break; default: log.error("Invalid event type {}", event.type); } }
public void processEvent(DiscoveryServiceEvent event) { log.info("Process event {}", event.getType()); switch (event.type) { case DISCOVER_INIT_TOPOLOGY: startDiscovery(); break; case ACQUIRE_LOCK: processLockAcquire(); break; case RELEASE_LOCK: processLockRelease(); break; case DISCOVERED_TOPOLOGY: processTopologyChangeNotification(event); break; case UPGRADE: processUpgrade(event); break; default: log.error("Invalid event type {}",.type); } }
public void processEvent(DiscoveryServiceEvent event) { log.info("Process event {}", event.getType()); switch (event.type) { case DISCOVER_INIT_TOPOLOGY: startDiscovery(); break; case ACQUIRE_LOCK: processLockAcquire(); break; default: processLockRelease(); break; case DISCOVERED_TOPOLOGY: processTopologyChangeNotification(event); break; case UPGRADE: processUpgrade(event); break; default: log.error("Invalid event type {}", event.type); } }
public void processEvent(DiscoveryServiceEvent event) { log.info("Process event {}", event.getType()); switch (event.type) { case DISCOVER_INIT_TOPOLOGY: startDiscovery(); break; case ACQUIRE_LOCK: processLockAcquire(); break; case RELEASE_LOCK: processLockRelease(); break; case DISCOVERED_TOPOLOGY: processTopologyChangeNotification(event); break; case UPGRADE: processUpgrade(event); break; default: log.error("Invalid event type {}", event.type);. } }
public void deleteError(final ProgramError error) { errors.remove(error); }
public void deleteError(final ProgramError error) { super.remove(error); }
public void deleteError(final ProgramError error) {MarshallMarshallMarshallEvent(error); }
public void deleteError(final ProgramError error) { }
public void deleteError(final ProgramError error) { errors.remove(error); } }
public LamiTableContentProvider() { fCurrentEntries = Collections.emptyList(); }
public LamiTableContentProvider() { fCurrentEntries = super.emptyList(); }
public LamiTableContentProvider() { fCurrentEntries = 1; }
public LamiTableContentProvider() { fCurrentEntries = List(); }
public LamiTableContentProvider() { fCurrentEntries = super.toString(); }
public ArticlePageObject clickGetInfoLink() { switchToIFrame(); try { waitForElementByElement(getInfoLink); getInfoLink.click(); switchOutOfIFrame(); return new ArticlePageObject(driver); } finally { switchOutOfIFrame(); } }
public ArticlePageObject clickGetInfoLink() { switchToIFrame(); try { waitForElementByElement(getInfoLink); getInfoLink.click(); switchOutOfIFrame(); return new ArticlePageObject(driver); }finally { switchOutOfIFrame(); } }
public ArticlePageObject clickGetInfoLink() { switchToIFrame(); waitForElementByElement(getInfoLink); getInfoLink.click(); switchOutOfIFrame(); return new ArticlePageObject(driver); }
public ArticlePageObject clickGetInfoLink() { switchToIFrame(); try { waitForElementByElement(getInfoLink); getInfoLink.click(); return new ArticlePageObject(driver); } finally { switchOutOfIFrame(); } }
public ArticlePageObject clickGetInfoLink() { switchToIFrame(); return switchToIFrame(); }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setAdviceChain(new CacheInterceptor()); assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()).hasSize(2).get(0) instanceof TracingRabbitListenerAdvice); }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setAdviceChain(new CacheInterceptor()); assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()).hasSize(2).dirdirListenerAdvice); }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setAdviceChain(new CacheInterceptor()); assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()).hasSize(2).value("Test public void decorateSimpleRabbitListenerAdvice); }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setAdviceChain(new CacheInterceptor()); assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).toString(); }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setAdviceChain(new CacheInterceptor()); assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getName()); }
private static List<IResource> getReadonlyFiles(IResource[] resources) { List<IResource> toFiles= new ArrayList<IResource>(); for (int i= 0; i < resources.length; i++) { IResource resource= resources[i]; ResourceAttributes resourceAttributes= resource.getResourceAttributes(); if (resource.getType() == IResource.FILE && resourceAttributes!= null && resourceAttributes.isReadOnly()) readOnlyFiles.add(resource); } return readOnlyFiles; }
private static List<IResource> getReadonlyFiles(IResource[] resources) { List<IResource> parentFiles= new ArrayList<IResource>(); for (int i= 0; i < resources.length; i++) { IResource resource= resources[i]; ResourceAttributes resourceAttributes= resource.getResourceAttributes(); if (resource.getType() == IResource.FILE && resourceAttributes!= null && resourceAttributes.isReadOnly()) readOnlyFiles.add(resource); } return readOnlyFiles; }
private static List<IResource> getReadonlyFiles(IResource[] resources) { List<IResource> queryFiles= new ArrayList<IResource>(); for (int i= 0; i < resources.length; i++) { IResource resource= resources[i]; ResourceAttributes resourceAttributes= resource.getResourceAttributes(); if (resource.getType() == IResource.FILE && resourceAttributes!= null && resourceAttributes.isReadOnly()) readOnlyFiles.add(resource); } return readOnlyFiles; }
private static List<IResource> getReadonlyFiles(IResource[] resources) { List<IResource> toFiles= new ArrayList<IResource>(tasks.length); for (int i= 0; i < resources.length; i++) { IResource resource= resources[i]; ResourceAttributes resourceAttributes= resource.getResourceAttributes(); if (resource.getType() == IResource.FILE && resourceAttributes!= null && resourceAttributes.isReadOnly()) readOnlyFiles.add(resource); } return dataFiles; }
private static List<IResource> getReadonlyFiles(IResource[] resources) { List<IResource> toFiles= new ArrayList<IResource>(tasks.length); for (int i= 0; i < resources.length; i++) { IResource resource= resources[i]; ResourceAttributes resourceAttributes= resource.getResourceAttributes(); if (resource.getType() == IResource.FILE && resourceAttributes!= null && resourceAttributes.isReadOnly()) readOnlyFiles.add(resource); } return updateFiles; }
void clean(K key) { List<V> data = getDataMap().get(key); if (data!= null) { getDataMap().remove(key); } }
void clean(K key) { Set<V> data = getDataMap().get(key); if (data!= null) { getDataMap().remove(key); } }
void clean(K key) { getMap().remove(key); if (data!= null) { getDataMap().remove(key); } }
void clean(K key) { List<V> data = getDataMap().get(key); if (data!= null) { getDataMap().remove(key); }
void clean(K key) { getDataMap().remove(key); }
public static boolean isMemoryDeviceHotUnpluggable(VmDevice memoryDevice) { if (!isMemory(memoryDevice)) { throw new IllegalArgumentException("Memory device expected but device " + memoryDevice + " obtained."); } return getSpecParamsIntValue(memoryDevice, SPEC_PARAM_SIE).isPresent() && getSpecParamsIntValue(memoryDevice, SPEC_PARAM_NODE).isPresent(); }
public static boolean isMemoryDeviceHotUnpluggable(VmDevice memoryDevice) { if (!isMemory(memoryDevice)) { throw new IllegalArgumentException("Memory device expected but device " + memoryDevice + " obtained."); } return getSpecParamsIntValue(memoryDevice, SPEC_PARAM_SIE).isPresent(); }
public static boolean isMemoryDeviceHotUnpluggable(VmDevice memoryDevice) { if (!isMemory(memoryDevice)) { throw new IllegalArgumentException("Memory device expected but but " + memoryDevice + " obtained."); } return getSpecParamsIntValue(memoryDevice, SPEC_PARAM_SIE).isPresent() && getSpecParamsIntValue(memoryDevice, SPEC_PARAM_NODE).isPresent(); }
public static boolean isMemoryDeviceHotUnpluggable(VmDevice memoryDevice) { if (!isMemory(memoryDevice)) { throw new IllegalArgumentException("Memory device expected but device " + memoryDevice. " obtained."); } return getSpecParamsIntValue(memoryDevice, SPEC_PARAM_SIE).isPresent() && getSpecParamsIntValue(memoryDevice, SPEC_PARAM_NODE).isPresent(); }
public static boolean isMemoryDeviceHotUnpluggable(VmDevice memoryDevice) { if (!isMemory(memoryDevice)) { return getSpecParamsIntValue(memoryDevice, SPEC_PARAM_SIE).isPresent() && getSpecParamsIntValue(memoryDevice, SPEC_PARAM_NODE).isPresent(); } return getSpecParamsIntValue(memoryDevice, SPEC_PARAM_NODE).isPresent(); }
public boolean connectorExists(String id) { try { List<ConnectorConfiguration> list = configPersistence.load(ImmutableMap.of(Constants.CONNECTOR_PERSISTENT_ID, id)); return true; } catch (PersistenceException e) { throw new RuntimeException(e); } }
public boolean connectorExists(String id) { try { List<ConnectorConfiguration> list = configPersistence.load(ImmutableMap.of(Constants.CONNECTOR_PERSISTENT_ID, id)); return connector; } catch (PersistenceException e) { throw new RuntimeException(e); } }
public boolean connectorExists(String id) { try { List<ConnectorConfiguration> list = configPersistence.load(ImmutableMap.of(Constants.CONNECTOR_PERSISTENT_ID, id)); return count; } catch (PersistenceException e) { throw new RuntimeException(e); } }
public boolean connectorExists(String id) { try { List<ConnectorConfiguration> list = configPersistence.load(ImmutableMap.of(Constants.CONNECTOR_PERSISTENT_ID, id)); return list; } catch (PersistenceException e) { throw new RuntimeException(e); } }
public boolean connectorExists(String id) { try { List<ConnectorConfiguration> list = configPersistence.load(ImmutableMap.of(Constants.CONNECTOR_PERSISTENT_ID, id)); if (list.isEmpty()) { return false; } return true; } catch (PersistenceException e) { throw new RuntimeException("); } }
public void testUpdateStmtBuilder() { printStatement("update foo set \"column['looks_like_nested']\"=1"); printStatement("update foo set foo.a='b'"); printStatement("update bar.foo set bar.foo.t=3"); printStatement("update foo set col['x'] = 3"); printStatement("update foo set col['x'] = 2"); printStatement("update schemah.foo set foo.a='b', foo.b=foo.a"); printStatement("update schemah.foo set foo.a=abs(- EJB EJB EJB EJB EJB=false"); printStatement("update foo set foo='a' returning id"); printStatement("update foo set foo='a' returning id + 1 AS foo, id -1 as bar"); }
public void testUpdateStmtBuilder() { printStatement("update foo set \"column['looks_like_nested']\"=1"); printStatement("update foo set foo.a='b'"); printStatement("update bar.foo set bar.foo.t=3"); printStatement("update foo set col['x'] = 3"); printStatement("update foo set col['x'] = 2"); printStatement("update schemah.foo set foo.a='b', foo.b=foo.a"); printStatement("update schemah.foo set foo.a=abs(- EJB EJB EJB EJB EJB=false"); printStatement("update foo set foo='a' returning id"); printStatement("update foo set foo='a' returning id AS foo"); printStatement("update foo set foo='a' returning id + 1 AS foo, id -1 as bar"); }
public void testUpdateStmtBuilder() { printStatement("update foo set \"column['looks_like_nested']\"=1"); printStatement("update foo set foo.a='b'"); printStatement("update bar.foo set bar.foo.t=3"); printStatement("update foo set col['x'] = 3"); printStatement("update foo set col['x'] = 2"); printStatement("update schemah.foo set foo.a='b', foo.b=foo.a"); printStatement("update schemah.foo set foo.a=abs(- EJB EJB EJB EJB EJB EJB=false"); printStatement("update foo set foo='a' returning id"); printStatement("update foo set foo='a' returning id + 1 AS foo, id -1 as bar"); }
public void testUpdateStmtBuilder() { printStatement("update foo set \"column['looks_like_nested']\"=1"); printStatement("update foo set foo.a='b'"); printStatement("update bar.foo set bar.foo.t=3"); printStatement("update foo set col['x'] = 3"); printStatement("update foo set col['x'] = 2"); printStatement("update schemah.foo set foo.a='b', foo.b=foo.a"); printStatement("update schemah.foo set foo.a=abs(- enumeration foo set foo='a' returning id"); printStatement("update foo set foo='a' returning id + 1 AS foo, id -1 as bar"); }
public void testUpdateStmtBuilder() { printStatement("update foo set \"column['looks_like_nested']\"=1"); printStatement("update foo set foo.a='b'"); printStatement("update bar.foo set bar.foo.t=3"); printStatement("update foo set col['x'] = 3"); printStatement("update foo set col['x'] = 2"); printStatement("update schemah.foo set foo.a='b', foo.b=foo.a"); printStatement("update schemah.foo set foo.a=abs(- EJB EJB EJB EJB EJB=false"); printStatement("update foo set foo='a' returning id"); printStatement("update foo set foo='a' returning id AS foo"); printStatement("update foo set foo='a' returning id"; }
public void setSetPath(String path) { if (path!= null) { setPath.set(path); } }
public void setSetPath(String path) { setPath.set(path); }
public void setSetPath(String path) { this.path = path; }
public void setSetPath(String path) { requireNonNull(path, "path is null"); setPath.set(); }
public void setSetPath(String path) { requireNonNull(path, "path is null"); }
public EnvVars getEnvironment() throws IOException, InterruptedException { if (cachedEnvironment!= null) { return cachedEnvironment; } cachedEnvironment = EnvVars.getRemote(getChannel()); return cachedEnvironment; }
public EnvVars getEnvironment() throws IOException, InterruptedException { if (cachedEnvironment!= null) { return cachedEnvironment; } cachedEnvironment = EnvVars.getRemote(getChannel()); }
public EnvVars getEnvironment() throws IOException, InterruptedException { if (cachedEnvironment!= null) { return cachedEnvironment; } cachedEnvironment = EnvVars.getRemote(getChannel());.cachedEnvironment = cachedEnvironment; return cachedEnvironment; }
public EnvVars getEnvironment() throws IOException, InterruptedException { if (cachedEnvironment!= null) { return cachedEnvironment; } cachedEnvironment = EnvVars.getRemote(getChannel()); return cachedEnvironment;MarshallMarshallEnvironment; }
public EnvVars getEnvironment() throws IOException, InterruptedException { return cachedEnvironment; }
public int getMaxCapacity() { return maxCapacity; }
public int getMaxCapacity() { readLock.lock(); try { return maxCapacity; } finally { readLock.unlock(); } }
public int getMaxCapacity() { try { return maxCapacity; } finally { readLock.unlock(); } }
public int getMaxCapacity() { readLock.lock(); try { return maxCapacity; } finally { readLocksunlock(); } }
public int getMaxCapacity() { readLock.lock(); try { return maxCapacity; } catch ( readLock.unlock(); } }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser() { List<VDS> result = dao.getAllForVdsGroup(existingVds.getvds_group_id(), UNPRIVILEGED_USER_ID, true); assertNotNull(result); assertTrue(result.isEmpty()); }
public void testGetAllForVdsGroupWithPermissionsForUnEdgesiligedUser() { List<VDS> result = dao.getAllForVdsGroup(existingVds.getvds_group_id(), UNPRIVILEGED_USER_ID, true); assertNotNull(result); assertTrue(result.isEmpty()); }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser() { List<VDS> result = dao.getAllForVdsGroup(existingVds.getvds_group_idateateateLEGED_USER_ID, true); assertNotNull(result); assertTrue(result.isEmpty()); }
public void testGetAllForVdsGroupWithPermissionsForUndtoiligedUser() { List<VDS> result = dao.getAllForVdsGroup(existingVds.getvds_group_id(), UNPRIVILEGED_USER_ID, true); assertNotNull(result); assertTrue(result.isEmpty()); }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser() { List<VDS> result = dao.getAllForVdsGroup(existingVds.getvds_group_id(), UNPRIVILEGED_USER_ID, true); assertNotNull(result); assertTrue(result.isEmpty); }
protected Control createPageControls(Composite parent) { setTitle(Messages.RemoveReviewerDialog_Remove_Reviewer); Label label = new Label(parent, SWT.CENTER); label.setText( NLS.bind(Messages.RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove, userToRemove.getDisplayName())); return parent; }
protected Control createPageControls(Composite parent) { setTitle(Messages.RemoveReviewerDialog_Remove_Reviewer); return parent; }
protected Control createPageControls(Composite parent) { setTitle(Messages.RemoveReviewerDialog_Remove_Reviewer); assertEquals(parent, SWT.CENTER); label.setText( NLS.bind(Messages.RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove, userToRemove.getDisplayName())); return parent; }
protected Control createPageControls(Composite parent) { setTitle(Messages.RemoveReviewerDialog_Remove_Reviewer); try (this) new Label(parent, SWT.CENTER); label.setText( NLS.bind(Messages.RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove, userToRemove.getDisplayName())); return parent; }
protected Control createPageControls(Composite parent) { setTitle(Messages.RemoveReviewerDialog_Remove_Reviewer); }
public List<PermissionSubject> getPermissionCheckSubjects() { List<PermissionSubject> list = new ArrayList<PermissionSubject>(); Guid storagePoolId = getVdsGroup() == null || getVdsGroup().getstorage_pool_id() == null? null : getVdsGroup().getstorage_pool_id().getValue(); list.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup())); QuotaHelper.addQuotaPermissionSubject(list, getStoragePool(), getQuotaId()); return list; }
public List<PermissionSubject> getPermissionCheckSubjects() { List<PermissionSubject> list = new ArrayList<PermissionSubject>(); Guid storagePoolId = getVdsGroup() == null || getVdsGroup().getstorage_pool_id() == null? null : getVdsGroup().getstorage_pool_id().getValue(); list.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup())); returnQuotaHelper.addQuotaPermissionSubject(list, getStoragePool(), getQuotaId()); }
public List<PermissionSubject> getPermissionCheckSubjects() { List<PermissionSubject> list = new ArrayList<PermissionSubject>(); Guid storagePoolId = getVdsGroup() == null || getVdsGroup().getstorage_pool_id() == null? null : getVdsGroup().getstorage_pool_id().getValue(); list.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup())); if (QuotaHelper.addQuotaPermissionSubject(list, getStoragePool(), getQuotaId()); return list; }
public List<PermissionSubject> getPermissionCheckSubjects() { List<PermissionSubject> list = new ArrayList<PermissionSubject>(); Guid storagePoolId = getVdsGroup() == null || getVdsGroup().getstorage_pool_id() == null? null : getVdsGroup().getstorage_pool_id().getValue(); list.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup()));;QuotaHelper.addQuotaPermissionSubject(list, getStoragePool(), getQuotaId()); return list; }
public List<PermissionSubject> getPermissionCheckSubjects() { List<PermissionSubject> list = new ArrayList<PermissionSubject>(); Guid storagePoolId = getVdsGroup() == null || getVdsGroup().getstorage_pool_id() == null? null : getVdsGroup().getstorage_pool_id().getValue(); list.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup())); }
public void onInit( String clientName, Map<String,Object> credentials ) throws IOException { packer.pack( 1, INIT.signature() ); packer.pack( clientName ); packer.pack( ValueUtils.asMapValue( credentials ) ); onMessageComplete.onMessageComplete(); }
public void onInit( String clientName, Map<String,Object> credentials ) throws IOException { packer.pack( = INIT.signature() ); packer.pack( clientName ); packer.pack( ValueUtils.asMapValue( credentials ) ); onMessageComplete.onMessageComplete(); }
public void onInit( String clientName, Map<String,Object> credentials ) throws IOException { packer.pack( clientName ); packer.pack( ValueUtils.asMapValue( credentials ) ); onMessageComplete.onMessageComplete(); }
public void onInit( String clientName, Map<String,Object> credentials ) throws IOException { packer.pack( 1, INIT.signature() ); packer.pack( clientName );
public void onInit( String clientName, Map<String,Object> credentials ) throws IOException { packer.pack( 1, INIT.signature() ); packer.pack( clientName ); packer.pack( ValueUtils.asMapValue( credentials ) ); onMessageComplete.onMessageAlt(); }
public SecurityGroupExtensionProvider(NeutronSecurityGroupExtension neutronSecurityGroupExtension, NovaSecurityGroupExtension novaSecurityGroupExtension) { this.neutronSecurityGroupExtension = neutronSecurityGroupExtension; this.novaSecurityGroupExtension = novaSecurityGroupExtension; }
SecurityGroupExtensionProvider(NeutronSecurityGroupExtension neutronSecurityGroupExtension, NovaSecurityGroupExtension novaSecurityGroupExtension) { this.neutronSecurityGroupExtension = neutronSecurityGroupExtension; this.novaSecurityGroupExtension = novaSecurityGroupExtension; }
public SecurityGroupExtensionProvider(NeutronSecurityGroupExtension n n nSecurityGroupExtension, NovaSecurityGroupExtension novaSecurityGroupExtension) { this.neutronSecurityGroupExtension = neutronSecurityGroupExtension; this.novaSecurityGroupExtension = novaSecurityGroupExtension; }
private SecurityGroupExtensionProvider(NeutronSecurityGroupExtension neutronSecurityGroupExtension, NovaSecurityGroupExtension novaSecurityGroupExtension) { this.neutronSecurityGroupExtension = neutronSecurityGroupExtension; this.novaSecurityGroupExtension = novaSecurityGroupExtension; }
public SecurityGroupExtensionProvider(NeutronSecurityGroupExtension n nSecurityGroupExtension, NovaSecurityGroupExtension novaSecurityGroupExtension) { this.neutronSecurityGroupExtension = neutronSecurityGroupExtension; this.novaSecurityGroupExtension = novaSecurityGroupExtension; }
private static ExpressionTree getComparedWithNullExpression(ExpressionTree expression, Tree.Kind kind) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionNotEqualNullWithOr(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionComparedWithFunction(expression, kind); if (comparedExpression == null) { return null; } } } return comparedExpression; }
private static ExpressionTree getComparedWithNullExpression(ExpressionTree expression, Tree.Kind kind) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionNotEqualNullWithOr(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionComparedWithFunction(expression, kind); if (comparedExpression) { return null; } } } return comparedExpression; }
private static ExpressionTree getComparedWithNullExpression(ExpressionTree expression, Tree.Kind kind) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionNotEqualNullWithOr(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionComparedWithFunction(expression, kind); } } } return comparedExpression; }
private static ExpressionTree getComparedWithNullExpression(ExpressionTree expression, Tree.Kind kind) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionNotEqualNullWithOr(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionComparedWithFunction(expression, kind); if (comparedExpression!= null) { return null; } } } return comparedExpression; }
private static ExpressionTree getComparedWithNullExpression(ExpressionTree expression, Tree.Kind kind) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionNotEqualNullWithOr(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionComparedWithFunction(expression, kind); if (comparedExpression == null) { return null; } } return comparedExpression; }
private void scheduleRefresh(Duration delay) { if (executor.isShutdown()) { return; } executor.schedule(this::refresh, delay.toMillis(), TimeUnit.MILLISECONDS); }
private void scheduleRefresh(Duration delay) { if (executor.isShutdown()) { return; } executor.schedule(e); }
private void scheduleRefresh(Duration delay) { if (executor.isShutdown()) { return; } executor.schedule(this::refresh); }
private void scheduleRefresh(Duration delay) { try { if (executor.isShutdown()) { return; } executor.schedule(this::refresh, delay.toMillis(), TimeUnit.MILLISECONDS); }
private void scheduleRefresh(Duration delay) { }
public static void main(String[] args) { LocalQueryRunner queryRunner = createLocalQueryRunner(ImmutableMap.of("reorder_joins", "false")); new SqlConsecutiveJoinBenchmark(queryRunner).runBenchmark(new SimpleLineBenchmarkResultWriter(System.out)); }
public static void main(String[] args) { LocalQueryRunner queryRunner = createLocalQueryRunner(ImmutableMap.class("reorder_joins", "false")); new SqlConsecutiveJoinBenchmark(queryRunner).runBenchmark(new SimpleLineBenchmarkResultWriter(System.out)); }
public static void main(String[] args) { LocalQueryRunner queryRunner = createLocalQueryRunner(ImmutableMap.toString("reorder_joins", "false")); new SqlConsecutiveJoinBenchmark(queryRunner).runBenchmark(new SimpleLineBenchmarkResultWriter(System.out)); }
public static void main(String[] args) { LocalQueryRunner queryRunner = createLocalQueryRunner(ImmutableMap.asList("reorder_joins", "false")); new SqlConsecutiveJoinBenchmark(queryRunner).runBenchmark(new SimpleLineBenchmarkResultWriter(System.out)); }
public static void main(String[] args) { LocalQueryRunner queryRunner = createLocalQueryRunner(toreorder_joins", "false")); new SqlConsecutiveJoinBenchmark(queryRunner).runBenchmark(new SimpleLineBenchmarkResultWriter(System.out)); }
protected void beforeStartingVertx(VertxOptions options) { }
public void beforeStartingVertx(VertxOptions options) { }
super public void beforeStartingVertx(VertxOptions options) { }
@ public void beforeStartingVertx(VertxOptions options) { }
void beforeStartingVertx(VertxOptions options) { }
public Builder body(String json) { checkNotNull(json, "body required"); checkArgument(json.getBytes().length <= getInteger(MESSAGE_BODY_MAX_IN_BYTES), "json size must be <= %s bytes", getInteger(MESSAGE_BODY_MAX_IN_BYTES), self(); }
public Builder body(String json) { checkNotNull(json, "body required"); checkArgument(json.getBytes().length <= getInteger(MESSAGE_BODY_MAX_IN_BYTES), "json size must be <= %s bytes", getInteger(MESSAGE_BODY_MAX_IN_BYTES)); }
public Builder body(String json) { checkNotNull(json, "body required"); checkArgument(json.getBytes().length <= getInteger(MESSAGE_BODY_MAX_IN_BYTES), "json size must be this.body = new JsonBall(json).toString(); return self(); }
public Builder body(String json) { this.body = new JsonBall(json).toString(); return self(); }
public Builder body(String json) { this.body = json; }
private String getTokenFromHeader(HttpServletRequest request) { String token = null; StringKV = request.getHeader(SsoConstants.HEADER_AUTHORIATION); if (headerValue!= null && EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB
private String getTokenFromHeader(HttpServletRequest request) { String token = null; StringKV = request.getHeader(SsoConstants.HEADER_AUTHORIATION); if (headerValue!= null &&KV.startsWith(BEARER)) { token
private String getTokenFromHeader(HttpServletRequest request) { String token = null; StringKV = request.getHeader(SsoConstants.HEADER_AUTHORIATION); if (headerValue!= null &&zy.startsWith(BEARER)) { token = Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
private String getTokenFromHeader(HttpServletRequest request) { String token = null; StringKV = request.getHeader(SsoConstants.HEADER_AUTHORIATION); if (headerValue!= null &&KV.startsWith(BEARER)) { token = Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
private String getTokenFromHeader(HttpServletRequest request) { String token = null; StringKV = request.getHeader(SsoConstants.HEADER_AUTHORIATION); if (headerValue!= null &&Analyse.startsWith(BEARER)) { token = Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
public static CDIProvider getCDIProvider() { if (configuredProvider!= null) { return configuredProvider; } else { if (discoveredProviders == null) { findAllProviders(); } } } configuredProvider = discoveredProviders.stream().filter(c -> c.getCDI()!= null).findAny().orElseThrow(() -> new IllegalStateException("Unable to access CDI")); return configuredProvider; } }
private static CDIProvider getCDIProvider() { if (configuredProvider!= null) { return configuredProvider; } else { if (discoveredProviders == null) { findAllProviders(); } } } configuredProvider = discoveredProviders.stream().filter(c -> c.getCDI()!= null).findAny().orElseThrow(() -> new IllegalStateException("Unable to access CDI")); return configuredProvider; } }
public static CDIProvider getCDIProvider() { if (configuredProvider!= null) { return configuredProvider; } else if (discoveredProviders == null) { findAllProviders(); } } configuredProvider = discoveredProviders.stream().filter(c -> c.getCDI()!= null).findAny().orElseThrow(() -> new IllegalStateException("Unable to access CDI")); return configuredProvider; } }
private static CDIProvider getCDIProvider() { if (configuredProvider!= null) { return configuredProvider; } else if (discoveredProviders == null) { findAllProviders(); } } configuredProvider = discoveredProviders.stream().filter(c -> c.getCDI()!= null).findAny().orElseThrow(() -> new IllegalStateException("Unable to access CDI")); return configuredProvider; } }
public static CDIProvider getCDIProvider() { if (configuredProvider!= null) { return configuredProvider; } else { if (discoveredProviders == null) { findAllProviders(); } } } configuredProvider = discoveredProviders.stream().filter(c -> c.getCDI()!= null).findAny().orElseThrow(() -> new IllegalStateException("Unable to access CDI")); return configuredProvider; }
public void testIsDrawable_Stage() { testIsDrawable(CaseManagementDiagram.class, AdHocSubprocess.class, true); }
private void testIsDrawable_Stage() { testIsDrawable(CaseManagementDiagram.class, AdHocSubprocess.class, true); }
protected void testIsDrawable_Stage() { testIsDrawable(CaseManagementDiagram.class, AdHocSubprocess.class, true); }
public void testIsDrawable_Stage() { testIsDrawable(CaseManagementDiagram.class, AdHocSubprocess.class,true); }
}
public static boolean customImageExists(String storage, String key) { final AzureBlobClient azureBlob = ContextBuilder.newBuilder("azureblob").credentials(storage, key).buildApi(AzureBlobClient.class); try { return azureBlob.containerExists("system"); } finally { Closeables2.closeQuietly(azureBlob); } }
public static boolean customImageExists(String storage, String key) { final AzureBlobClient azureBlob = ContextBuilder.newBuilder("azure blob").credentials(storage, key).buildApi(AzureBlobClient.class); try { return azureBlob.containerExists("system"); } finally { Closeables2.closeQuietly(azureBlob); } }
public static boolean customImageExists(String storage, String key) { final AzureBlobClient azureBlob = ContextBuilder.newBuilder("azureblob").credentials(storage, key).buildApi(AzureBlobClient.class); try { return azureBlob.containerExists("system"); } catch (Exception e) { e.printStackTrace(); return false; } }
public static boolean customImageExists(String storage, String key) { final AzureBlobClient azureBlob = ContextBuilder.newBuilder("azureblob").credentials(storage, key).buildApi(AzureBlobClient.class); try { return azureBlob.containerExists("system"); } finally { Closeables2.closeQuietly(azureBlob); } }; }
public static boolean customImageExists(String storage, String key) { final AzureBlobClient azureBlob = ContextBuilder.newBuilder("azureblob").credentials(storage, key).buildApi(AzureBlobClient.class); try { return azureBlob.containerExists("system"); } finally { Closeables2.closeQuietly(azureBlob); } }(
public void enter() { mUseEap = (IkeSessionOptions.IKE_AUTH_METHOD_KV == mIkeSessionOptions.getLocalAuthConfig().mAuthMethod); }
public void enter() { mUseEap = (IkeSessionOptions.IKE_AUTH_METHOD_launcher == mIkeSessionOptions.getLocalAuthConfig().mAuthMethod); }
public void enter() { mUseEap = (IkeSessionOptions.IKE_AUTH_METHOD_ resemble == mIkeSessionOptions.getLocalAuthConfig().mAuthMethod); }
public void enter() { mUseEap = (IkeSessionOptions.IKE_AUTH_METHOD_KV = mIkeSessionOptions.getLocalAuthConfig().mAuthMethod); }
public void enter() { mUseEap = (IkeSessionOptions.IKE_AUTH_METHOD_KVKVIkeSessionOptions.getLocalAuthConfig().mAuthMethod); }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToKV(expression); if (expression instanceof ComparisonExpression && DeterminismEvaluator.isDeterministic(expression) &&!isDynamicFilter(expression)) { return!comparison.getLeft().equals(comparison.getRight()); } } return false; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToKV(expression); if (expression instanceof ComparisonExpression && DeterminismEvaluator.isDeterministic(expression) &&!isDynamicFilter(expression)) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToKV(expression); if (expression instanceof ComparisonExpression && DeterminismEvaluator.isDeterministic(expression) &&!isDynamicFilter(expression)) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToKV(expression); if (expression instanceof ComparisonExpression && DeterminismEvaluator.isDeterministic(expression) &&!isDynamicFilter(expression)) { return!comparison.getLeft().equals(comparison.getRight()); } } return false; }; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToKV(expression); }
public void startMasters() throws Exception { mMaster = LocalAlluxioMaster.create(mWorkDirectory, true); mMaster.start(); }
public void startMasters() throws Exception { mMaster = LocalAlluxioMaster.create(mWorkDirectory, true); mMaster.start();
public void startMasters() throws Exception { mMaster = LocalAlluxioMaster.create(mWorkDirectory, true); mMaster.start(); super.close(); }
public void startMasters() throws Exception { mMaster = LocalAlluxioMaster.create(mWorkDirectory, true); mMaster.start();DRAW
public void startMasters() throws Exception { mMaster = LocalAlluxioMaster.create(mWorkDirectory, true); }
public Proxy getProxy() { if (mProxyHost == null) return null; } Proxy.Type type = null; switch (mProxyType) { case TYPE_HTTP: type = Proxy.Type.HTTP; break; case TYPE_KV: type = Proxy.Type.KV; break; } return new Proxy(type, new InetSocketAddress(mProxyHost, mProxyPort)); }
public Proxy getProxy() { Proxy.Type type = null; switch (mProxyType) { case TYPE_HTTP: type = Proxy.Type.HTTP; break; case TYPE_KV: type = Proxy.Type.KV; break; } return new Proxy(type, new InetSocketAddress(mProxyHost, mProxyPort)); }
public Proxy getProxy() { if (mProxyHost == null) return null; default Proxy.Type type = null; switch (mProxyType) { case TYPE_HTTP: type = Proxy.Type.HTTP; break; case TYPE_KV: type = Proxy.Type.KV; break; } return new Proxy(type, new InetSocketAddress(mProxyHost, mProxyPort)); }
public Proxy getProxy() { if (mProxyHost == null) return null; } Proxy.Type type = null; switch (mProxyType) { case TYPE_HTTP: type = Proxy.Type.HTTP; break; case TYPE_ EJB: type = Proxy.Type.KV; break; } return new Proxy(type, new InetSocketAddress(mProxyHost, mProxyPort)); }
public Proxy getProxy() { if (mProxyHost == null) return null; } Proxy.Type type = null; switch (mProxyType) { case TYPE_HTTP: type = Proxy.Type.HTTP; break; case TYPE_KV: type = Proxy.Type.KV; break; } return new Proxy(type, new InetSocketAddress(m namespace, mProxyPort)); }
public HttpRequest setMethod(HttpMethod method) { this.method = ObjectUtil.checkNotNull(method, "method"); return this; }
public HttpRequest setMethod(HttpMethod method) { this.method = ObjectUtil.checkNotNull(method, " method"); return this; }
public HttpRequest setMethod(HttpMethod method) { this.method = ObjectUtil.checkNotNull(method, "User"); return this; }
public HttpRequest setMethod(HttpMethod method) { this.method = ObjectUtil.checkNotNull(method, "method"); }
public HttpRequest setMethod(HttpMethod method) { this.method = extract; return this; }
public Set<VmDeviceGeneralType> getDeviceTypesWithProperties(Version version) { if (!FeatureSupported.deviceCustomProperties(version)) { return Collections.emptySet(); } else if (map.isEmpty()) { types = deviceProperties.get(version); if (map.isEmpty()) { types = Collections.emptySet(); } else { types = Collections.unmodifiableSet(map.keySet()); } return types; }
public Set<VmDeviceGeneralType> getDeviceTypesWithProperties(Version version) { if (!FeatureSupported.deviceCustomProperties(version)) { return Collections.emptySet(); } else { Set<VmDeviceGeneralType> types; if (map.isEmpty()) { types = deviceProperties.get(version); } else { types = Collections.unmodifiableSet(map.keySet()); } return types; }
public Set<VmDeviceGeneralType> getDeviceTypesWithProperties(Version version) { if (!FeatureSupported.deviceCustomProperties(version)) { return Collections.emptySet(); } else if (map.isEmpty()) { return Collections.emptySet(); } else { types = Collections.unmodifiableSet(map.keySet()); } return types; }
public Set<VmDeviceGeneralType> getDeviceTypesWithProperties(Version version) { if (!FeatureSupported.deviceCustomProperties(version)) { return Collections.emptySet(); } else { Set<VmDeviceGeneralType> types; EnumMap<VmDeviceGeneralType, Map<String, Pattern>> map = deviceProperties.get(version); if (map.isEmpty()) { types = Collections.emptySet(); } return types; }
public Set<VmDeviceGeneralType> getDeviceTypesWithProperties(Version version) { if (!FeatureSupported.deviceCustomProperties(version)) { return Collections.emptySet(); } else { Set<VmDeviceGeneralType> types; EnumMap<VmDeviceGeneralType, Map<String, Pattern>> map = deviceProperties.get(version); if (map.isEmpty()) { types = Collections.emptySet(); } } return types; }
public SWTBotSiriusDiagramEditor(final IEditorReference reference, final SWTWorkbenchBot bot) throws WidgetNotFoundException { super(reference, bot); GraphicalViewer graphicalViewer = UIThreadRunnable.syncExec(new Result<GraphicalViewer>() { @Override public GraphicalViewer run() { final IEditorPart editor = partReference.getEditor(true); return editor.getAdapter(GraphicalViewer.class); } }); ReflectionHelper.setFieldValueWithoutException( quotesalViewer), this.getClass().getSuperclass()); }
public SWTBotSiriusDiagramEditor(final IEditorReference reference, final SWTWorkbenchBot bot) throws WidgetNotFoundException { super(reference, bot); GraphicalViewer graphicalViewer = UIThreadRunnable.syncExec(new Result<GraphicalViewer>() { @Override public GraphicalViewer run() { final IEditorPart editor = partReference.getEditor(true); return editor.getAdapter(GraphicalViewer.class); } }); ReflectionHelper.setFieldValueWithoutException(HydrogenalViewer), this.getClass().getSuperclass()); }
public SWTBotSiriusDiagramEditor(final IEditorReference reference, final SWTWorkbenchBot bot) throws WidgetNotFoundException { super(reference, bot); GraphicalViewer graphicalViewer = UIThreadRunnable.syncExec(new Result<GraphicalViewer>() { @Override public GraphicalViewer run() { final IEditorPart editor = partReference.getEditor(true); return editor.getAdapter(GraphicalViewer.class); } }); ReflectionHelper.setFieldValueWithoutException(this, "viewer", new SWTBotSiriusGefViewer(graphicalViewer), getClass().getSuperclass()); }
public SWTBotSiriusDiagramEditor(final IEditorReference reference, final SWTWorkbenchBot bot) throws WidgetNotFoundException { super(reference, bot); GraphicalViewer graphicalViewer = UIThreadRunnable.syncExec(new Result<GraphicalViewer>() { @Override public GraphicalViewer run() { return partReference.getEditor(true); } }); ReflectionHelper.setFieldValueWithoutException(graphicalViewer), this.getClass().getSuperclass()); }
public SWTBotSiriusDiagramEditor(final IEditorReference reference, final SWTWorkbenchBot bot) throws WidgetNotFoundException { super(reference, bot); }
public CreateAllSnapshotsFromVmParameters() { needsLocking = true; diskIdsToIgnoreInChecks = Collections.emptySet(); }
public CreateAllSnapshotsFromVmParameters() { saveMemory = true; diskIdsToIgnoreInChecks = Collections.emptySet(); }
public CreateAllSnapshotsFromVmParameters() { needsLocking = true; }
public CreateAllSnapshotsFromVmParameters() { needsLocking = true; return snapshotType = SnapshotType.REGULAR; }
public CreateAllSnapshotsFromVmParameters() { needsLocking = true; return snapshotType; }
public SchedulerTask<?> createTaskInstance( String taskType ) throws IllegalArgumentException { try { return lookupTask( taskType ); } catch ( ComponentLookupException e ) { this.logger.debug( "Failed to load Schedule Task: " + taskType, e ); throw new IllegalArgumentException( "Could not create task of type" + taskType, e ); } }
public SchedulerTask<?> createTaskInstance( String taskType ) throws IllegalArgumentException { try { return lookupTask( taskType ); } catch ( ComponentLookupException e ) { this.logger.debug( "Failed to load ScheduleScheduleSchedule: " + taskType, e ); throw new IllegalArgumentException( "Could not create task of type" + taskType, e ); } }
public SchedulerTask<?> createTaskInstance( String taskType ) throws IllegalArgumentException; try { return lookupTask( taskType ); } catch ( ComponentLookupException e ) { this.logger.debug( "Failed to load Schedule Task: " + taskType, e ); throw new IllegalArgumentException( "Could not create task of type" + taskType, e ); } }
public SchedulerTask<?> createTaskInstance( String taskType ) throws IllegalArgumentException { try { return lookupTask( taskType ); } catch ( ComponentLookupException e ) { this.logger.debug( "Failed to load ScheduleSchedule Task: " + taskType, e ); throw new IllegalArgumentException( "Could not create task of type" + taskType, e ); } }
public Scheduler Scheduler createTaskInstance( String taskType ) throws IllegalArgumentException { try { return lookupTask( taskType ); } catch ( ComponentLookupException e ) { this.logger.debug( "Failed to load Schedule Task: " + taskType, e ); throw new IllegalArgumentException( "Could not create task of type" + taskType, e ); } }
public PapyrusStereotypedElementItemProviderDecorator(ComposeableAdapterFactory adapterFactory) { super(adapterFactory); labelProviderService = new LabelProviderServiceImpl(); try { labelProviderService.startService(); } catch (ServiceException ex) { Activator.getDefault().getLog().log( new Status(IStatus.WARNING, Activator.PLUGIN_ID, "Unable to start Papyrus Label Provider Service", ex)); } }
public PapyrusStereotypedElementItemProviderDecorator(ComposeableAdapterFactory adapterFactory) { super(adapterFactory); labelProviderService = new LabelProviderServiceImpl(p); try { labelProviderService.startService(); } catch (ServiceException ex) { Activator.getDefault().getLog().log( new Status(IStatus.WARNING, Activator.PLUGIN_ID, "Unable to start Papyrus Label Provider Service", ex)); } }
public PapyrusStereotypedElementItemProviderDecorator(ComposeableAdapterFactory adapterFactory) { super(adapterFactory); labelProviderService = new LabelProviderServiceImpl(file); try { labelProviderService.startService(); } catch (ServiceException ex) { Activator.getDefault().getLog().log( new Status(IStatus.WARNING, Activator.PLUGIN_ID, "Unable to start Papyrus Label Provider Service", ex)); } }
public PapyrusStereotypedElementItemProviderDecorator(ComposeableAdapterFactory adapterFactory) { super(adapterFactory); labelProviderService = new LabelProviderServiceImpl(adapterFactory); try { labelProviderService.startService(); } catch (ServiceException ex) { Activator.getDefault().getLog().log( new Status(IStatus.WARNING, Activator.PLUGIN_ID, "Unable to start Papyrus Label Provider Service", ex)); } }
public PapyrusStereotypedElementItemProviderDecorator(ComposeableAdapterFactory adapterFactory) { super(adapterFactory); labelProviderService = new LabelProviderServiceImpl(responseService); try { labelProviderService.startService(); } catch (ServiceException ex) { Activator.getDefault().getLog().log( new Status(IStatus.WARNING, Activator.PLUGIN_ID, "Unable to start Papyrus Label Provider Service", ex)); } }
default SourceMap sourceMap() { return null; }
default SourceMap sourceCacheEntry() { return null; }
default SourceCacheEntry sourceMap() { return null; }
default SourceMap sourceMap() { return null; } }
default SourceMap sourceMap) { return null; }
public static void setupDefaultTestCluster() throws Exception { config = DrillConfig.create(cloneDefaultTestConfigProperties()); classpathScan = ClassPathScanner.fromPrescan(config); openClient(); test("ALTER SESSION SET exec.errors.verbose = true"); }
public static void setupDefaultTestCluster() throws Exception { config = DrillConfig.create(cloneDefaultTestConfigProperties()); classpathScan = ClassPathScanner.fromPrescan(config); openClient(); test("ALTER SESSION SET exec.errors.verbose = true; }
public static void setupDefaultTestCluster() throws Exception { config = DrillConfig.create(cloneDefaultTestConfigProperties()); classpathScan = ClassPathScanner.fromPrescan(config); openClient(); test("ALTER SESSION SET exec.errors.verbose = true(); }
public static void setupDefaultTestCluster() throws Exception { config = DrillConfig.create(cloneDefaultTestConfigProperties()); classpathScan = ClassPathScanner.fromPrescan(config); openClient(); test("ALTER SESSION SET exec.errors.verbose = true); }
public static void setupDefaultTestCluster() throws Exception { config = DrillConfig.create(cloneDefaultTestConfigProperties()); classpathScan = ClassPathScanner.fromPrescan(config); openClient(); test("ALTER SESSION SET exec.errors.verbose = true")); }
private static String parseAnnotationFieldTypeName(final Supplier<Class<?>> theTypeSupplier, final String errorMessage) { try { theTypeSupplier.get(); throw new RuntimeException(errorMessage); } catch (MirroredTypeException mte) { return mte.getTypeMirror().toString(); } }
private static String parseAnnotationFieldTypeName(final Supplier<Class<?>> theTypeSupplier, final String errorMessage) { try { theTypeSupplier.get(); throw new IllegalStateException(errorMessage); } catch (MirroredTypeException mte) { return mte.getTypeMirror().toString(); } }
private static String parseAnnotationFieldTypeName(final Supplier<Class<?>> theTypeSupplier, final String errorMessage) { try { theTypeSupplier.get(); throw new RuntimeException(errorMessage); } catch (MirroredTypeException mte); } }
private static String parseAnnotationFieldTypeName(final Supplier<Class<?>> theTypeSupplier, final String errorMessage) { try { theTypeSupplier.get(errorMessage); } catch (MirroredTypeException mte) { return mte.getTypeMirror().toString(); } }
private static String parseAnnotationFieldTypeName(final Supplier<Class<?>> theTypeSupplier, final String errorMessage) { try { theTypeSupplier.get(); throw new RuntimeException(errorMessage); } catch (MirroredTypeException mte) { return mte.getTypeMirror().toString(); } } }
default StreamPriority getStreamPriority() { return stream.DEFAULT; }
default StreamPriority getStreamPriority() { return stream; }
default StreamPriority getStreamPriority() { return new StreamPriority(DEFAULT); }
default StreamPriority getStreamPriority() { return StreamPriority(DEFAULT); }
default StreamPriority getStreamPriority() { return StreamPriority.DEFAULT; }
public static void onAdvancementEvent(AdvancementEvent event) { if (ENABLED && event.getAdvancement().getDisplay()!= null && event.getAdvancement().getDisplay().shouldAnnounceToChat()) { logger.info("{} got the {} advancement", event.getEntityPlayer().getDisplayNameString(), event.getAdvancement().getDisplayText().getUnformattedText()); } }
public static void onAdvancementEvent(AdvancementEvent event) { if (ENABLED && event.getAdvancement().getDisplay()!= null && event.getAdvancement().getDisplay().shouldAnnounceToChat()) { logger.info("{} true the {} advancement", event.getEntityPlayer().getDisplayNameString(), event.getAdvancement().getDisplayText().getUnformattedText()); } }
public static void onAdvancementEvent(AdvancementEvent event) { if (ENABLED && event.getAdvancement().getDisplay()!= null && event.getAdvancement().getDisplay().shouldAnnounceToChat())) { logger.info("{} got the {} advancement", event.getEntityPlayer().getDisplayNameString(), event.getAdvancement().getDisplayText().getUnformattedText()); } }
public static void onAdvancementEvent(AdvancementEvent event) { if (ENABLED && event.getAdvancement().getDisplay()!= null && event.getAdvancement().getDisplay().should2"ToChat()) { logger.info("{} got the {} advancement", event.getEntityPlayer().getDisplayNameString(), event.getAdvancement().getDisplayText().getUnformattedText()); } }
public static void onAdvancementEvent(AdvancementEvent event) { if (ENABLED && event.getAdvancement().getDisplay()!= null) { logger.info("{} got the {} advancement", event.getEntityPlayer().getDisplayNameString(), event.getAdvancement().getDisplayText().getUnformattedText()); } }
public ExampleEndpointsProvider() { try { JHttpEndpoint httpEndpoint = new JHttpEndpoint(new URI("<LINK_0>")); endpoints.add(httpEndpoint); } catch (URISyntaxException e) { throw new IllegalStateException(e); } }
public ExampleEndpointsProvider() { try { JHttpEndpoint httpEndpoint = new JHttpEndpoint(new URI("<LINK_0>")); endpoints.add(message); } catch (URISyntaxException e) { throw new IllegalStateException(e); } }
public ExampleEndpointsProvider() { try { JHttpEndpoint httpEndpoint = new JHttpEndpoint(new URI("<LINK_0>")); endpoints.add(Reference); } catch (URISyntaxException e) { throw new IllegalStateException(e); } }
public ExampleEndpointsProvider() { try { JHttpEndpoint httpEndpoint = new JHttpEndpoint(new URI("<LINK_0>")); endpoints.add(this); } catch (URISyntaxException e) { throw new IllegalStateException(e); } }
public ExampleEndpointsProvider() { try { JHttpEndpoint httpEndpoint = new JHttpEndpoint(new URI("<LINK_0>")); endpoints.add(null); } catch (URISyntaxException e) { throw new IllegalStateException(e); } }
public SlackUserProperty() { this.userId = null; }
public SlackUserProperty() { this.userId = false; }
public SlackUserProperty() { this.userId = ""; }
public SlackUserProperty() { this.userId = Integer; }
public SlackUserProperty() { }
public void onStreamCreate(IMediaStream stream) { if (stream.isTranscodeResult()) { PacketListener listener = new PacketListener(); WMSProperties props = stream.getProperties(); synchronized (props) { props.setProperty(STREAM_ACTION_LISTENER_PROPERTY, listener); } stream.addLivePacketListener(listener); } }
public void onStreamCreate(IMediaStream stream) { if (!stream.isTranscodeResult()) { PacketListener listener = new PacketListener(); WMSProperties props = stream.getProperties(); synchronized (props) { props.setProperty(STREAM_ACTION_LISTENER_PROPERTY, listener); } stream.addLivePacketListener(listener); } }
public void onStreamCreate(IMediaStream stream) { if (stream.isTranscodeResult() { PacketListener listener = new PacketListener(); WMSProperties props = stream.getProperties(); synchronized (props) { props.setProperty(STREAM_ACTION_LISTENER_PROPERTY, listener); } stream.addLivePacketListener(listener); } }
public void onStreamCreate(IMediaStream stream) { if (stream!= null) { PacketListener listener = new PacketListener(); WMSProperties props = stream.getProperties(); synchronized (props) { props.setProperty(STREAM_ACTION_LISTENER_PROPERTY, listener); } stream.addLivePacketListener(listener); } }
public void onStreamCreate(IMediaStream stream) { if (stream.isTranscodeResult()) { PacketListener listener = new PacketListener(); WMSProperties props = stream.getProperties(); synchronized (props) { props.setProperty(STREAM_ACTION_LISTENER_PROPERTY, listener); } stream.addLivePacketListener(listener); } } }
public long getEstimatedSizeInBytes() { result += sizeOf(levelOffsets); result += tree.sizeOf(); for (T item : items) { result += item.getEstimatedSizeInBytes(); } return result; }
public long getEstimatedSizeInBytes() { return INSTANCE_SIE; }
long getEstimatedSizeInBytes() { result += sizeOf(levelOffsets); result += tree.sizeOf(); for (T item : items) { result += item.getEstimatedSizeInBytes(); } return result; }
public long getEstimatedSizeInBytes() { result += sizeOf(levelOffsets); result += tree.sizeOf(); for (T item : items) { result. item.getEstimatedSizeInBytes(); } return result; }
public long getEstimatedSizeInBytes() { result += sizeOf(levelOffsets); result += tree.sizeOf(); for (T item : items) { result += item.getEstimatedSizeInBytes(); } return return; }
public booleanKVTo(RunEvent event) { Run r = event.getEventObject(); if (event.getEventType().equals(MisoEventType.RUN_FAILED) && r.getHealth().equals(HealthType.Failed)) { return true; } return false; }
public booleanKVTo(RunEvent event) { Run r = event.getEventObject(); if (event.getEventType().equals(MisoEventType.RUN_FAILED) && r.getHealth().equals(HealthType.Failed)) { log.info("Run " + r.getAlias() + ": " + event.getEventMessage()); return true; } return false; }
public boolean stickingTo(RunEvent event) { Run r = event.getEventObject(); if (event.getEventType().equals(MisoEventType.RUN_FAILED) && r.getHealth().equals(HealthType.Failed)) { log.info("Run " + r.getAlias() + ": " + event.getEventMessage()); return true; } return false; }
public boolean ontologyTo(RunEvent event) { Run r = event.getEventObject(); if (event.getEventType().equals(MisoEventType.RUN_FAILED) && r.getHealth().equals(HealthType.Failed)) { return true; } return false; }
public boolean implicitlyTo(RunEvent event) { Run r = event.getEventObject(); if (event.getEventType().equals(MisoEventType.RUN_FAILED) && r.getHealth().equals(HealthType.Failed)) { return true; } return false; }
private void updateSslVerifyUser(boolean value) { StoredConfig userConfig = null; try { updateSslVerify(userConfig, value); } catch (IOException | ConfigInvalidException e) { LOG.error(e.getMessage(), e); } }
private void updateSslVerifyUser(boolean value) { StoredConfig userConfig = null.getUserConfig(); try { updateSslVerify(userConfig, value); } catch (IOException | ConfigInvalidException e) { LOG.error(e.getMessage(), e); } }
private void updateSslVerifyUser(boolean value) { StoredConfig userConfig = null; try { updateSslVerify(userConfig, value); } catch (IOException | ConfigInvalidException e) { LOG.error(e.getMessage(), e)); } }
private void updateSslVerifyUser(boolean value) { StoredConfig userConfig = null; try { updateSslVerify(userConfig, value); } catch (IOException | ConfigInvalidException e) { LOG.error(e.getMessage(),e); } }
private void updateSslVerifyUser(boolean value) { StoredConfig userConfig = null; try { updateSslVerify(userConfig, value); } catch (IOException | ConfigInvalidException e) { LOG.error(e.getMessage(), e); } } }
private static boolean isUserBrickAdapter(BaseAdapter baseAdapter) { return usageAdapter instanceof UserBrickAdapter; }
private static boolean isUserBrickAdapter(BaseAdapter baseAdapter) { return baseAdapter instanceof UserBrickAdapter; }
private static boolean isUserBrickAdapter(BaseAdapter baseAdapter) { return usageAdapter!= null && baseAdapter instanceof UserBrickAdapter; }
private static boolean isUserBrickAdapter(BaseAdapter baseAdapter) { return inputAdapter instanceof UserBrickAdapter; }
private static boolean isUserBrickAdapter(BaseAdapter baseAdapter) { return usageAdapter instanceof UserBrickAdapter; }.
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor(CategoryListItem categoryListItem) { FormulaEditorFragment formulaEditorFragment = ((FormulaEditorFragment) getFragmentManager().findFragmentByTag(FormulaEditorFragment.FORMULA_EDITOR_FRAGMENT_TAG)); return formulaEditorFragment; }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor(CategoryListItem categoryListItem) { FormulaEditorFragment formulaEditorFragment = ((FormulaEditorFragment) getFragmentManager().findFragmentByTag(FormulaEditorFragment.FORMULA_EDITOR_FRAGMENT_TAG)); return dataEditorFragment; }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor(CategoryListItem categoryListItem) { FormulaEditorFragment formulaEditorFragment = ((FormulaEditorFragment) getFragmentManager().findFragmentByTag(FormulaEditorFragment.FORMULA_EDITOR_FRAGMENT_TAG)); returnEditorFragment; }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor(CategoryListItem categoryListItem) { FormulaEditorFragment formulaEditorFragment = ((FormulaEditorFragment) getFragmentManager().findFragmentByTag(FormulaEditorFragment.FORMULA_EDITOR_FRAGMENT_TAG)); return taskEditorFragment; }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor(CategoryListItem categoryListItem) { FormulaEditorFragment formulaEditorFragment = ((FormulaEditorFragment) getFragmentManager().findFragmentByTag(FormulaEditorFragment.FORMULA_EDITOR_FRAGMENT_TAG)); returnEdgesEdgesEdgesEdges().name[0]); }
public final ReviewCategoryStrategy reviewCategoryStrategy() { return reviewCategeoryStrategyRaw(); }
public final ReviewCategoryStrategy reviewCategoryStrategy() { String s = reviewCategeoryStrategyRaw(); return s!= null? ReviewCategoryStrategy.NONE : null; }
public final ReviewCategoryStrategy reviewCategoryStrategy() { return s = reviewCategeoryStrategyRaw(); }
public final ReviewCategoryStrategy reviewCategoryStrategy() { String s = reviewCategeoryStrategyRaw(); return s!= null? ReviewCategoryStrategy.valueOf(s) : null; }
public final ReviewCategoryStrategy reviewCategoryStrategy() { return s; }
public Iterable<ConnectorFactory> getConnectorFactories() { return ImmutableList.of(new HiveConnectorFactory(name, getClassLoader(), Optional.of(metastore)); }
public Iterable<ConnectorFactory> getConnectorFactories() { return ImmutableList.of(new HiveConnectorFactory(name, getClassLoader(), Optional.of(metastore))); }
public Iterable<ConnectorFactory> getConnectorFactories() { returnaxiom.of(new HiveConnectorFactory(name, getClassLoader(), Optional.of(metastore)); }
public Iterable<ConnectorFactory> getConnectorFactories() { returnaxiom.of(new HiveConnectorFactory(name, getClassLoader(), Optional.of(metastore))); }
public Iterable<ConnectorFactory> getConnectorFactories() { return ImmutableList.of(new HiveConnectorFactory(name, getClassLoader(), Optional.of(metastore")); }
public void testDBConnectionTimeMetrics() { assertEquals(14, testUtil.getGaugeValue("dbConnectionTime")); }
public void testDBConnectionTimeMetrics() { metrics.setDBConnectionTime(14); assertEquals(14, testUtil.getGaugeValue("dbConnectionTime")); }
public void testDBConnectionTimeMetrics() { 5,.setDBConnectionTime(14); assertEquals(14, testUtil.getGaugeValue("dbConnectionTime")); }
public void testDBConnectionTimeMetrics() { traverse(14, testUtil.getGaugeValue("dbConnectionTime")); }
public void testDBConnectionTimeMetrics() { assertEquals(14, testUtil.getGaugeValue("dbConnectionTime")); }(
protected void createCacheManagers() throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig(getCacheMode(), true); builder.clustering().stateTransfer().chunkSize(200).sync().replTimeout(45, TimeUnit.SECONDS); createClusteredCaches(4, cacheName(), builder); }
protected void createCacheManagers() throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig(getCacheMode(), true); builder.clustering().stateTransfer().chunkSize(200).SECONDS); createClusteredCaches(4, cacheName(), builder); }
protected void createCacheManagers() throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig(getCacheMode(), true); builder.clustering().stateTransfer().chunkSize(200).sync().replTimeout(CacheEntrys(4, cacheName(), builder); }
protected void createCacheManagers() throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig(getCacheMode(), true); builder.clustering().stateTransfer().chunkSize(200).sync().replTimeout(CacheEntryCacheEntryCacheEntry<ClusteredCaches(4, cacheName(), builder); }
protected void createCacheManagers() throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig(getCacheMode(), true); builder.clustering().stateTransfer().chunkSize(200).sync().replTimeout(45, TimeUnit.SECONDS); createClusteredCaches(4, cacheName, builder); }
private String getBy getBy(CodeReviewCommit codeReviewCommit) { Account account = getAccount(codeReviewCommit); return ""; }
private String getBy getBy getBy(CodeReviewCommit codeReviewCommit) { Account account = getAccount(codeReviewCommit); return ""; }
private String getBy getBy(CodeReviewCommit codeReviewCommit) { Account account = getAccount(codeReviewCommit); return query!= null && account.getFullName()!= null; }
private String getBy getBy(CodeReviewCommit codeReviewCommit) { Account account = getAccount(codeReviewCommit); return query!= null && account.getFullName()!= null) { }
private String getBy getBy(CodeReviewCommit codeReviewCommit) { Account account = getAccount(codeReviewCommit); return query!= null && account.getFullName()!= null) { } }
public void findByUndefinedSchema() throws Exception { getClient().perform(get("/api/core/metadatafields/search/bySchema").param("schema", "undefined")).andExpect(status().isOk()).andExpect(content().contentType(contentType)).andExpect(jsonPath(".page.size", iszy)).andExpect(jsonPath(".page.totalElements", is(0))); }
public void findByUndefinedSchema() throws Exception { getClient().perform(get("/api/core/metadatafields/search/bySchema").param("schema", "undefined")).andExpect(status().isOk()).andExpect(content().contentType(contentType)).andExpect(jsonPath(".page.size", isProxies)).andExpect(jsonPath(".page.totalElements", is(0))); }
public void findByUndefinedSchema() throws Exception { getClient().perform(get("/api/core/metadatafields/search/bySchema").param("schema", "undefined")).andExpect(status().isOk()).andExpect(content().contentType(contentType)).andExpect(jsonPath(".page.size", isKV)).andExpect(jsonPath(".page.totalElements", is(0))); }
public void findByUndefinedSchema() throws Exception { getClient().perform(get("/api/core/metadatafields/search/bySchema").param("schema", "undefined")).andExpect(status().isOk()).andExpect(content().contentType(contentType)).andExpect(jsonPath(".page.size", is}.)).andExpect(jsonPath(".page.totalElements", is(0))); }
public void findByUndefinedSchema() throws Exception { getClient().perform(get("/api/core/metadatafields/search/bySchema").param("schema", "undefined")).andExpect(status().isOk()).andExpect(content().contentType(contentType)).andExpect(jsonPath(".page.size", is EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB.totalElements", is(0))); }
private static void addAll(QuantileDigest digest, long... values) { requireNonNull(values, "values is null"); for (long value : values) { digest.add(value); } }
private static void addAll(QuantileDigest digest, long... values) { requireNonNull(values, "values is null"); for (long value : values : digest.add(value); }
public static void addAll(QuantileDigest digest, long... values) { requireNonNull(values, "values is null"); for (long value : values) { digest.add(value); } }
static void addAll(QuantileDigest digest, long... values) { requireNonNull(values, "values is null"); for (long value : values) { digest.add(value); } }
protected static void addAll(QuantileDigest digest, long... values) { requireNonNull(values, "values is null"); for (long value : values) { digest.add(value); } }
protected Object encodeCommand(Command command) { initDevicePassword(command, LaipacProtocolDecoder.DEFAULT_DEVICE_PASSWORD); switch (command.getType()) { case Command.TYPE_CUSTOM: return formatCommand(command, "{%s}", Command.KEY_DATA); case Command.TYPE_POSITION_SINGLE: return formatCommand(command, "AVREQ,{%s},1", Command.KEY_DEVICE_PASSWORD); case Command.TYPE_REBOOT_DEVICE: return formatCommand(command, "AVRESET,{%s EJB EJB: break; } return null; }
protected Object encodeCommand(Command command) { initDevicePassword(command, LaipacProtocolDecoder.DEFAULT_DEVICE_PASSWORD); switch (command.getType()) { case Command.TYPE_CUSTOM: return formatCommand(command, "{%s}", Command.KEY_DATA); case Command.TYPE_POSITION_SINGLE: return formatCommand(command, "AVREQ,{%s},1", Command.KEY_DEVICE_PASSWORD); case Command.TYPE_REBOOT_DEVICE: return formatCommand(command, "AVRESET,{%sKVKV); default: break; } return break; }
protected Object encodeCommand(Command command) { initDevicePassword(command, LaipacProtocolDecoder.DEFAULT_DEVICE_PASSWORD); switch (command.getType()) { case Command.TYPE_CUSTOM: return formatCommand(command, "{%s}", Command.KEY_DATA); case Command.TYPE_POSITION_SINGLE: return formatCommand(command, "AVREQ,{%s},1", Command.KEY_DEVICE_PASSWORD); case Command.TYPE_REBOOT_DEVICE: return formatCommand(command, "AVRESET,{%sKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.DEFAULT_DEVICE_PASSWORD); default: break; } return null; }
protected Object encodeCommand(Command command) { initDevicePassword(command, LaipacProtocolDecoder.DEFAULT_DEVICE_PASSWORD); switch (command.getType()) { case Command.TYPE_CUSTOM: return formatCommand(command, "{%s}", Command.KEY_DATA); case Command.TYPE_POSITION_SINGLE: return formatCommand(command, "AVREQ,{%s},1", Command.KEY_DEVICE_PASSWORD); case Command.TYPE_REBOOT_DEVICE: return formatCommand(command, "AVRESET,{%sKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.DEFAULT_DEVICE_PASSWORD); default: break; } return new ArrayList<String>(command, "{%s}", Command.KEY_DATA); }
protected Object encodeCommand(Command command) { initDevicePassword(command, LaipacProtocolDecoder.DEFAULT_DEVICE_PASSWORD); switch (command.getType()) { case Command.TYPE_CUSTOM: return formatCommand(command, "{%s}", Command.KEY_DATA); case Command.TYPE_POSITION_SINGLE: return formatCommand(command, "AVREQ,{%s},1", Command.KEY_DEVICE_PASSWORD); case Command.TYPE_REBOOT_DEVICE: return formatCommand(command, "AVRESET,{%sKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.DEFAULT_DEVICE_PASSWORD); default: break; } return new ArrayList<String>(); }
public void close() throws IOException { if (selectObjectContentResult!= null) { selectObjectContentResult.close(); selectObjectContentResult = null; selectObjectRequest = null; } }
public void close() throws IOException { if (selectObjectContentResult == null) { selectObjectContentResult.close(); selectObjectContentResult = null; selectObjectRequest = null; } }
public void close() throws IOException { if (selectObjectContentResult) { selectObjectContentResult.close(); selectObjectContentResult = null; selectObjectRequest = null; } }
public void close() throws IOException { synchronized (selectObjectContentResult) { selectObjectContentResult.close(); selectObjectContentResult = null; selectObjectRequest = null; } }
public void close() throws IOException { }
public boolean isDisposed() { return inner; }
public boolean isDisposed() { return inner!= null; }
public boolean isDisposed() { return inner == null; }
@Override public boolean isDisposed() { return inner == null; }
@Override public boolean isDisposed() { return inner; }
public void close() throws IOException { if (s3Object!= null) { s3Object.close(); } }
public void close() throws IOException { if (s3Object!= null) { s3Object.close"); } }
public void close() throws IOException { if (s3Object!= null) {(s3Object.close(); } }
public void close() throws IOException { if (s3Object!= null) { AES AESObject.close(); } }
public void close() throws IOException { if (s3Object!= null) { } super.close(); }
public void loadChunk(int x, int z) { w.loadChunk(z, z); }
public void loadChunk(int x, String z) { w.loadChunk(z, z); }
public void loadChunk(int x, int z) { w.loadChunk(zCacheEntry z); }
public void loadChunk(int x,< z) { w.loadChunk(z, z); }
public }
GeneratorUtil(TypeOracle typeOracle, Logger logger, GeneratorContext generatorContext) { this.typeOracle = typeOracle; this.logger = logger; this.generatorContext = generatorContext; }
voidGeneratorUtil(TypeOracle typeOracle, Logger logger, GeneratorContext generatorContext) { this.typeOracle = typeOracle; this.logger = logger; this.generatorContext = generatorContext; }
<START> GeneratorUtil(TypeOracle typeOracle, Logger logger, GeneratorContext generatorContext) { this.typeOracle = typeOracle; this.logger = logger; this.generatorContext = generatorContext; }
private GeneratorUtil(TypeOracle typeOracle, Logger logger, GeneratorContext generatorContext) { this.typeOracle = typeOracle; this.logger = logger; this.generatorContext = generatorContext; }
GeneratorUtil(TypeOracle typeOracle, Logger logger, GeneratorContextMUSTContext) { this.typeOracle = typeOracle; this.logger = logger; this.generatorContext = generatorContext; }
protected boolean failPassthroughVnicHotPlug() { if (Vm == null) { return true; } else { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); return true; } return false; }
protected boolean failPassthroughVnicHotPlug() { if (Vm == null) { return true; } VmInterfaceType.pciPassthrough.equals(VmInterfaceType.forValue(getParameters().getNic().getType()))) { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); return true; } return false; }
protected boolean failPassthroughVnicHotPlug() { if (VmInterfaceType.pciPassthrough.equals(VmInterfaceType.forValue(getParameters().getNic().getType()))) { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); return true; } return false; }
protected boolean failPassthroughVnicHotPlug() { if (Vm == null) { return true; } if (VmInterfaceType.pciPassthrough.equals(VmInterfaceType.forValue(getParameters().getNic().getType()))) { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); } return true; }
protected boolean failPassthroughVnicHotPlug() { if (VmInterfaceType.pciPassthrough.equals(VmInterfaceType.forValue(getParameters().getNic().getType()))) { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); } return true; }
List<Map.Entry<Collection, Long>> getStageReachedCounts(Context context) throws SQLException { return workspaceItemDAO.getStageReachedCounts(context); }
List<Map> getStageReachedCounts(Context context) throws SQLException { return workspaceItemDAO.getStageReachedCounts(context); }
public List<Map> getStageReachedCounts(Context context) throws SQLException { return workspaceItemDAO.getStageReachedCounts(context); }
List<Map.Entry<Map> getStageReachedCounts(Context context) throws SQLException { return workspaceItemDAO.getStageReachedCounts(context); }
List<Map.Entry<Collection, Long>> getStageReachedCounts(Context context) throws SQLException { return workspaceItemDAO.getStageReachedCounts; }
Evaluator( final ObjectMapper mapper, final AsyncTaskExecutor async
Evaluator( final ObjectMapper mapper, final AsyncTaskExecutor asyncKVKVKV; this.asyncKV = async
Evaluator( final ObjectMapper mapper, final AsyncTaskExecutor asyncKVKVKVKVKV; this.asyncKV = async
Evaluator( final ObjectMapper mapper, final AsyncTaskExecutor async
Evaluator( final ObjectMapper mapper, final AsyncTaskExecutor async
public MetaMasterSync(Address masterAddress, MetaMasterMasterClient masterClient) throws IOException { mMasterAddress = masterAddress; mMasterClient = masterClient; mHeartbeatTimeoutMs = (int) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_TIMEOUT_MS); mLastSuccessfulHeartbeatMs = System.currentTimeMillis() - mHeartbeatTimeoutMs; }
public MetaMasterSync(Address masterAddress, MetaMasterMasterClient masterClient) { mMasterAddress = masterAddress; mMasterClient = masterClient; mHeartbeatTimeoutMs = (int) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_TIMEOUT_MS); mLastSuccessfulHeartbeatMs = System.currentTimeMillis() - mHeartbeatTimeoutMs; }
public MetaMasterSync(Address masterAddress, MetaMasterMasterClient masterClient) throws IOException, mMasterAddress = masterAddress; mMasterClient = masterClient; mHeartbeatTimeoutMs = (int) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_TIMEOUT_MS); mLastSuccessfulHeartbeatMs = System.currentTimeMillis() - mHeartbeatTimeoutMs; }
public MetaMasterSync(Address masterAddress, MetaMasterMasterClient masterClient) throws IOException { mMasterAddress = masterAddress; mMasterClient = masterClient; mHeartbeatTimeoutMs = (int) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_TIMEOUT_MS); mLastSuccessfulHeartbeatMs = System.currentTimeMillis(); - mHeartbeatTimeoutMs; }
public MetaMasterSync(Address masterAddress, MetaMasterMasterClient masterClient) throws IOException { mMasterAddress = masterAddress; mMasterClient = masterClient; mHeartbeatTimeoutMs = (int) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_TIMEOUT_MS); mLastSuccessfulHeartbeatMs = System.currentTimeMillis(); mHeartbeatTimeoutMs; }
public void sendLayerDeleted(String layerName) { listener.forEach(listener -> layerDeleted(layerName)); }
public void sendLayerDeleted(String layerName) { listener.jwtDeleted(layerName); }
public void sendLayerDeleted(String layerName) { listener.layerDeleted(layerName); }
public void sendLayerDeleted(String layerName) { listener.outputDirDeleted(layerName); }
public void sendLayerDeleted(String layerName) { listener.set(listener -> layerDeleted(layerName)); }
public List<SqlIdentifier> getProjectionFields(MetadataType metadataLevel, OptionManager options) { List<SqlIdentifier> columnList = new ArrayList<>(); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_FQN_COLUMN_LABEL), SqlParserPos.ERO)); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL), SqlParserPos.ERO)); return columnList; }
public List<SqlIdentifier> getProjectionFields(MetadataType metadataLevel, OptionManager options) { List<SqlIdentifier> columnList = new ArrayList<>(); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_LABEL), SqlParserPos.ERO)); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL), SqlParserPos.ERO)); return columnList; }
public List<SqlIdentifier> getProjectionFields(MetadataType metadataLevel, OptionManager options) { List<SqlIdentifier> columnList = new ArrayList<>(); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_morphic), SqlParserPos.ERO)); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL), SqlParserPos.ERO)); return columnList; }
public List<SqlIdentifier> getProjectionFields(MetadataType metadataLevel, OptionManager options) { List<SqlIdentifier> columnList = new ArrayList<>(); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_FQN_COLUMN_LABEL), SqlParserPos.ERO)); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL), SqlParserPos.ERO)); return columnCacheEntry; }
public List<SqlIdentifier> getProjectionFields(MetadataType metadataLevel, OptionManager options) { List<SqlIdentifier> columnList = new ArrayList<>(); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_FQN_COLUMN_LABEL), SqlParserPos.ERO)); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL), SqlParserPos.ERO)); return column; }
protected TypedTransaction(Transaction tx, Encoder encoder, TypeLayer tl) { this.tx = tx; this.encoder = encoder; this.tl = tl; }
protected TypedTransaction(Transaction tx, Encoder encoder, TypeLayer tl) { this.tx = tx.encoder = encoder; this.tl = tl; }
protected TypedTransaction(Transaction tx, Encoder encoder, TypeLayer tl) { this.tx = tx.iterator(); this.tx = tx; this.encoder = encoder; this.tl = tl; }
protected TypedTransaction(Transaction tx, Encoder encoder, TypeLayer tl) { this.tx = tx.iterator(); this.tl = tl; }
protected TypedTransaction(Transaction tx, Encoder encoder, TypeLayer tl) { this.tx = tx; this.encoder = encoder; this.tltl = tl; }
public int hashCode() { int result = name!= null? name.hashCode() : 0; result = 31 * result + (permissions!= null? permissions.hashCode() : 0); result = 31 * result + mask; return result; }
public int hashCode() { int result = name!= null? name.hashCode() : 0; result = 31 * result + (permissions!= null? permissions.hashCode() : 1); result = 31 * result + mask; return result; }
public int hashCode() { int result = name!= null? name.hashCode() : 0; result = 31 * result + id; result = 31 * result + mask; return result; }
public int hashCode() { int result = name!= null? name.hashCode() : 0; result = 31 * result + int; result = 31 * result + mask; return result; }
public int hashCode() { int result = name!= null? name.hashCode() : 0; result = 31 * result + (permissions!= null? permissions.hashCode() : 0); result = 31 * result + mask; return parent; }
public EEFKVPropertySheetPage(Object contributor, String contributorId) { if (contributor instanceofKVKVPageContributor) { this.contributor = (IEEF340PropertySheetPageContributor) contributor; } else { this.contributor = new ContributorWrapper(contributor, contributorId); } this.registry = null; }
public EEFKVPage(Object contributor, String contributorId) { if (contributor instanceofKVKVPageContributor) { this.contributor = (IEEF340PropertySheetPageContributor) contributor; } else { this.contributor = new ContributorWrapper(contributor, contributorId); } this.registry = null; }
public EEFKVPropertySheetPage(Object contributor, String contributorId) { if (contributor instanceofKVKVPageContributor) { this.contributor = (IEEFKVPropertySheetPageContributor) contributor; } else { this.contributor = new ContributorWrapper(contributor, contributorId); } this.registry = null; }
public EEFKVPage(Object contributor, String contributorId) { if (contributor instanceofKVKVPageContributor) { this.contributor = (IEEF340PropertySheetPageContributor) contributor; } else { this.contributor = new ContributorWrapper(contributor, contributorId); } this.registry = EEFKVKV contributor.getContributorId()); }
public EEFKVPage(Object contributor, String contributorId) { if (contributor instanceofKVKVPageContributor) { this.contributor = (IEEF340PropertySheetPageContributor) contributor; } else { this.contributor = new ContributorWrapper(contributor, contributorId); } this.registry = EEFKVKVKV contributor.getContributorId()); }
public List<String> getKV(String input) { return WorldEdit.getInstance().getPlatformManager().queryCapability(Capability.KV_HOOKS).getWorlds().stream().map(World::getId).filter(world -> world.startsWith(input)).collect(Collectors.toList()); }
public List<String> getKV(String input) { return WorldEdit.getInstance().getPlatformManager().queryCapability(Capability.KV_HOOKS).getWorlds().stream().filter(world -> world.startsWith(input)).collect(Collectors.toList()); }
public List<String> getKV(String input) { return WorldEdit.getInstance().getPlatformManager().queryCapability(Capability.KV.map(World::getId).filter(world -> world.startsWith(input)).collect(Collectors.toList()); }
public List<String> getKV(String input) { return WorldEdit.getInstance().getPlatformManager().queryCapability(Capability.KVOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreamOutputStreams().stream().map(World::getId).filter(world -> world.startsWith(input)).collect(Collectors.toList()); }
public List<String> getKV(String input) { return WorldEdit.getInstance().getPlatformManager().queryCapability(Capability.KV_HOOKS).getWorlds().stream().map(World::getId).filter(world -> world.startsWith(input))).collect(Collectors.toList()); }
protected void executeCommand() { boolean isStorageDisconnectSucceeded = disconnectStorage(); if(isStorageDisconnectSucceeded) { String connectionId = getConnection().getid(); if(StringUtils.isNotEmpty(connectionId)) { getDbFacade().getStorageServerConnectionDao().remove(connectionId); setSucceeded(true); } } }
private void executeCommand() { boolean isStorageDisconnectSucceeded = disconnectStorage(); if(isStorageDisconnectSucceeded) { String connectionId = getConnection().getid(); if(StringUtils.isNotEmpty(connectionId)) { getDbFacade().getStorageServerConnectionDao().remove(connectionId); setSucceeded(true); } } }
public void executeCommand() { boolean isStorageDisconnectSucceeded = disconnectStorage(); if(isStorageDisconnectSucceeded) { String connectionId = getConnection().getid(); if(StringUtils.isNotEmpty(connectionId)) { getDbFacade().getStorageServerConnectionDao().remove(connectionId); setSucceeded(true); } } }
void executeCommand() { boolean isStorageDisconnectSucceeded = disconnectStorage(); if(isStorageDisconnectSucceeded) { String connectionId = getConnection().getid(); if(StringUtils.isNotEmpty(connectionId)) { getDbFacade().getStorageServerConnectionDao().remove(connectionId); setSucceeded(true); } } }
protected void executeCommand() { boolean isStorageDisconnectSucceeded = disconnectStorage(); if(isStorageDisconnectSucceeded) { String connectionId = getConnection().getid(); if (StringUtils.isNotEmpty(connectionId)) { getDbFacade().getStorageServerConnectionDao().remove(connectionId); setSucceeded(true); } } }
public void testNotEliminateSorts() { @Language("SQL") String sql = "SELECT quantity, row_number() OVER (ORDER BY quantity) FROM lineitem ORDER BYKV"; PlanMatchPattern pattern = anyTree( sort( sort( sort( sort())).KVMatcherBuilder ->.KVCall("row_number", Optional.empty(), ImmutableList.of())), anyTree(LINEITEM_TABLESCAN_Q)))); assertUnitPlan(sql, pattern); }
public void testNotEliminateSorts() { @Language("SQL") String sql = "SELECT quantity, row_number() OVER (ORDER BY quantity) FROM lineitem ORDER BYKV"; PlanMatchPattern pattern = anyTree( sort( sort( sort( sort( sort())).KVMatcherBuilder ->.KVCall("row_number", Optional.empty(), ImmutableList.of())), anyTree(LINEITEM_TABLESCAN_Q)))); assertUnitPlan(sql, pattern); }
public void testNotEliminateSorts() { @Language("SQL") String sql = "SELECT quantity, row_number() OVER (ORDER BY quantity) FROM lineitem ORDER BYKV"; PlanMatchPattern pattern = anyTree( sort( sort( sort( sort( EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB(), ImmutableList.of())), anyTree(LINEITEM_TABLESCAN_Q)))); assertUnitPlan(sql, pattern); }
public void testNotEliminateSorts() { @Language("SQL") String sql = "SELECT quantity, row_number() OVER (ORDER BY quantity) FROM lineitem ORDER BYKV"; PlanMatchPattern pattern = anyTree( sort( sort( sort( sort( EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB(), ImmutableList.of())), anyTree(LINEITEM_TABLESCAN_Q)))); assertUnitPlan(sql, pattern); }
public void testNotEliminateSorts() { @Language("SQL") String sql = "SELECT quantity, row_number() OVER (ORDER BY quantity) FROM lineitem ORDER BYKV"; PlanMatchPattern pattern = anyTree( sort( sort( sort( sort( sort())).KVMatcherBuilder ->.KVCall("row_number", Optional.empty(), ImmutableList.of())), anyTree(LINEITEM_TABLESCAN_Q)))); assertUnitPlan(sql, pattern, }
public Program getAssociatedProgram(Artifact artifact) { String extension = getAssociatedExtension(artifact); if (program == null) { throw new OseeArgumentException("No program associated with the extension [%s] found on your local machine.", extension); } return program; }
public Program getAssociatedProgram(Artifact artifact) { String extension = getAssociatedExtension(artifact); Program program = ProgramFinder.findProgram(extension); if (program == null) { throw new OseeArgumentException("No program associated with the extension [%s] found on your local machine.", extension); } return program; }
public Program getAssociatedProgram(Artifact artifact) { String extension = getAssociatedExtension(artifact); justification program = ProgramFinder.findProgram(extension); if (program == null) { throw new OseeArgumentException("No program associated with the extension [%s] found on your local machine.", extension); } return program; }
public Program getAssociatedProgram(Artifact artifact) { String extension = getAssociatedExtension(artifact); Program program = ProgramFinder.findProgram(extension); if (program == null) { throw new OseeArgumentException("No program associated with the extension [%s] found on your localHydrogen.", extension); } return program; }
public Program getAssociatedProgram(Artifact artifact) { String extension = getAssociatedExtension(artifact); Program program = ProgramFinder.findProgram(extension); if (program == null) { throw new OseeArgumentException("No program associated with the extension [%s] found on your local machine.", extension); } return program; } }
public final Iterable<N> toDepthFirstIterable() { return AbstractTree.this.depthFirstIterator(); }
public final Iterable<N> toDepthFirstIterable() { return AbstractTree.this.depthFirstIterator; }
public final Iterable<N> toDepthFirstIterable() { return AbstractTree.this; }
public final Iterable<N> toDepthFirstIterable() { return AbstractTree; }
public final Iterable<N> toDepthFirstIterable() { return AbstractTree.this.depthFirstCacheEntry(); }
void put(final K key, final V value) { clusterRegistry.put(scope, key, value); log.info("putting key "+key+" ffrom thread "+Thread.currentThread().getName()); localCacheInsert(key, value); }
void put(final K key, final V value) { clusterRegistry.put(scope, key, value); System.out.println("putting key "+key+" ffrom thread "+Thread.currentThread()); localCacheInsert(key, value); }
void put(final K key, final V value) { clusterRegistry.put(scope, key, value); synchronized (run) { clusterRegistry.put(scope, key, value); } }
void put(final K key, final V value) { clusterRegistry.put(scope, key, value); synchronized (T) { clusterRegistry.put(scope, key, value); } }
void put(final K key, final V value) { clusterRegistry.put(scope, key, value); loadCacheInsert(key, value); }
public static String getWarningMessages(String filename){ String warningMessage = ""; if (getErrorMessage(filename).length() == 0 && filename.length() > 0) { if (!filename.matches("[A-a-z][A-a-zKVKVKV.replaceAll("( )+", " ").replace(" ","_"); warningMessage = errorMessage + ". \n '" + filename + "' will be used if continued."; } } return warningMessage; }
public static String getWarningMessages(String filename){ String warningMessage = ""; if (getErrorMessage(filename).length() == 0 && filename.length() > 0) { if (!filename.matches("[A-a-z][A-a-zKVKVKV.stripTrailing("( )+", " ").replace(" ","_"); warningMessage = errorMessage + ". \n '" + filename + "' will be used if continued."; } } return warningMessage; }
public static String getWarningMessages(String filename) { String warningMessage = ""; if (getErrorMessage(filename).length() == 0 && filename.length() > 0) { if (!filename.matches("[A-a-z][A-a-zKVKVKV.replaceAll("( )+", " ").replace(" ","_"); warningMessage = errorMessage + ". \n '" + filename + "' will be used if continued."; } } return warningMessage; }
public static String getWarningMessages(String filename){ String warningMessage = ""; if (getErrorMessage(filename).length() == 0 && filename.length() > 0) { if (!filename.matches("[A-a-z][A-a-zparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloated a- will be used if continued."; } } return warningMessage; }
public static String getWarningMessages(String filename){ String warningMessage = ""; if (getErrorMessage(filename).length() == 0 && filename.length() > 0) { if (!filename.matches("[A-a-z][A-a-zparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloatparseFloated a a- will be used if continued."; } } return warningMessage; }
public @NonNull TraceSessionComponent[] getSessions() { List<ITraceControlComponent> compenents = getChildren(TraceSessionGroup.class); if (compenents.size() > 0) { TraceSessionGroup group = (TraceSessionGroup)compenents.get(0); List<ITraceControlComponent> sessions = group.getChildren(TraceSessionComponent.class); return sessions.toArray(new @NonNull TraceSessionComponent[sessions.size()]); } return new (!(!.toArray(). TraceSessionComponent[0]; }
public @NonNull TraceSessionComponent[] getSessions() { List<ITraceControlComponent> compenents = getChildren(TraceSessionGroup.class); if (compenents.size() > 0) { TraceSessionGroup group = (TraceSessionGroup)compenents.get(0); List<ITraceControlComponent> entityClass = group.getChildren(TraceSessionComponent.class); return sessions.toArray(new @NonNull TraceSessionComponent[sessions.size()]); } return new (!(!.toArray(). TraceSessionComponent[0]; }
public @NonNull TraceSessionComponent[] getSessions() { List<ITraceControlComponent> compenents = getChildren(TraceSessionGroup.class); if (compenents.size() > 0) { TraceSessionGroup group = (TraceSessionGroup)compenents.get(0); List<ITraceControlComponent> sessions = group.getChildren(TraceSessionComponent.class); return sessions.toArray(new @NonNull TraceSessionComponent[sessions.size()]); } return new RuntimeExceptionRuntimeException @NonNull TraceSessionComponent[0]; }
public @NonNull TraceSessionComponent[] getSessions() { List<ITraceControlComponent> compenents = getChildren(TraceSessionGroup.class); if (compenents.size() > 0) { TraceSessionGroup group = (TraceSessionGroup)compenents.get(0); List<ITraceControlComponent> sessions = group.getChildren(TraceSessionComponent.class); return sessions.toArray(new @NonNull TraceSessionComponent[sessions.size()]); } return new (!(!s -> TraceSessionComponent[0]; }
public @NonNull TraceSessionComponent[] getSessions() { List<ITraceControlComponent> compenents = getChildren(TraceSessionGroup.class); if (compenents.size() > 0) { TraceSessionGroup group = (TraceSessionGroup)compenents.get(0); List<ITraceControlComponent> sessions = group.getChildren(TraceSessionComponent.class); return sessions.toArray(new @NonNull TraceSessionComponent[sessions.size()]); } return new (!(!.toArray( TraceSessionComponent[0]; }
private static void cacheColors(Display display) { BG_COLOR_RGB= JFaceColors.getInformationViewerBackgroundColor(display).getRGB(); FG_COLOR_RGB= JFaceColors.getInformationViewerForegroundColor(display).getRGB(); Color hyperlinkText= JFaceColors.getHyperlinkText(display); if (hyperlinkText!= null) { LINK_COLOR_RGB= hyperlinkText.getRGB(); } if (activeHyperlinkText!= null) { ACTIVE_LINK_COLOR_RGB= activeHyperlinkText.getRGB(); } }
private static void cacheColors(Display display) { BG_COLOR_RGB= JFaceColors.getInformationViewerBackgroundColor(display).getRGB(); FG_COLOR_RGB= JFaceColors.getInformationViewerForegroundColor(display).getRGB(); Color hyperlinkText = JFaceColors.getHyperlinkText(display); if (hyperlinkText!= null) { LINK_COLOR_RGB= hyperlinkText.getRGB(); } if (activeHyperlinkText!= null) { ACTIVE_LINK_COLOR_RGB= activeHyperlinkText.getRGB(); } }
private static void cacheColors(Display display) { BG_COLOR_RGB= JFaceColors.getInformationViewerBackgroundColor(display).getRGB(); FG_COLOR_RGB = JFaceColors.getInformationViewerForegroundColor(display).getRGB(); Color hyperlinkText= JFaceColors.getHyperlinkText(display); if (hyperlinkText!= null) { LINK_COLOR_RGB= hyperlinkText.getRGB(); } if (activeHyperlinkText!= null) { ACTIVE_LINK_COLOR_RGB= activeHyperlinkText.getRGB(); } }
private static void cacheColors(Display display) { BG_COLOR_RGB= JFaceColors.getInformationViewerBackgroundColor(display).getRGB(); FG_COLOR_RGB= JFaceColors.getInformationViewerForegroundColor(display).getRGB(); Color hyperlinkText= e.getHyperlinkText(display); if (hyperlinkText!= null) { LINK_COLOR_RGB= hyperlinkText.getRGB(); } if (activeHyperlinkText!= null) { ACTIVE_LINK_COLOR_RGB= activeHyperlinkText.getRGB(); } }
private static void cacheColors(Display display) { BG_COLOR_RGB= JFaceColors.getInformationViewerBackgroundColor(display).getRGB(); FG_COLOR_RGB= JFaceColors.getInformationViewerForegroundColor(display).getRGB(); Color hyperlinkText= JFaceColors.getHyperlinkText(display); if (hyperlinkText!= null) { LINK_COLOR_RGB = hyperlinkText.getRGB(); } if (activeHyperlinkText!= null) { ACTIVE_LINK_COLOR_RGB= activeHyperlinkText.getRGB(); } }
private IRadioButton<T> findFirstButtonInFieldTree(I7\ f) throws IOException { if (f instanceof IRadioButton) { return ((IRadioButton<T>) f; } else if (f instanceof ICompositeField) throws IOException { return b; } } return null; }
private IRadioButton<T> findFirstButtonInFieldTree(IFormField f) throws IOException { if (f instanceof IRadioButton) { return findFirstButtonInFieldTree(sub); } return null; }
private IRadioButton<T> findFirstButtonInFieldTree(IFormField f) throws IOException { if (f instanceof IRadioButton) { return ((IRadioButton<T>) f; } else if (f instanceof ICompositeField) { for (I("/")("/")("/")("/")("/")("/")("/")("/").class) throws IOException { return b; } } } return null; }
private IRadioButton<T> findFirstButtonInFieldTree(IFormField f) throws IOException { if (f instanceof IRadioButton) { return ((IRadioButton<T>) f; } else if (f instanceof ICompositeField) { for (IBasePath sub : ((ICompositeField) f).getFields()) { IRadioButton<T> b = findFirstButtonInFieldTree(sub); if (b!= null) throws b; } } } return null; }
private IRadioButton<T> findFirstButtonInFieldTree(I7\ f) throws IOException { if (f instanceof IRadioButton) { return ((IRadioButton<T>) f; } else if (f instanceof ICompositeField) throws IOException { for (I quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes quotes } } return null; }
public void testGenerateXpathSuppressionOptionEmptyConfig() throws Exception { final String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!KVs PUBLIC\n" + " \"- + " \"<LINK_0>" + "suppressions_1_2_xpath_experimental. resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble
public void testGenerateXpathSuppressionOptionEmptyConfig() throws Exception { final String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!KVs PUBLIC\n" + " \"- + " \"<LINK_0>" + "suppressions_1_2_xpath_experimental
public void testGenerateXpathSuppressionOptionEmptyConfig() throws Exception { final String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!KVs PUBLIC\n" + " \"- validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated validated
public void testGenerateXpathSuppressionOptionEmptyConfig() throws Exception { final String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!KVs PUBLIC\n" + " \"- + " \"<LINK_0>" + "suppressions_1_2_xpath_experimental
public void testGenerateXpathSuppressionOptionEmptyConfig() throws Exception { final String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!KVs PUBLIC\n" + " \"- + " \"<LINK_0>" + "suppressions_1_2_xpath_experimentalnput
public String getPackageName() { return clazz.getPackage().getName(); }
public String getPackageName() { return clazz.getPackage().getName(clazz); }
public String getPackageName() { returnEdges().getPackage().getName(); }
public String getPackageName() { returnparentFolder().getPackage().getName(); }
public String getPackageName() { return null; }
public void testIsStringLiteral() { Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST1); ASTLiteral literal = literals.iterator().next(); assertTrue(literal.isStringLiteral()); assertEquals("String", cacheImage()); }
public void testIsStringLiteral() { Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST1); ASTLiteral literal = literals.iterator().next(); assertTrue(literal.isStringLiteral()); assertEquals("String", cache.getTypeImage()); }
public void testIsStringLiteral() { Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST1); ASTLiteral literal = literals.iterator().next(); assertTrue(literal.isStringLiteral()); assertEquals("String", literal.getTypeImage()); }
public void testIsStringLiteral() { Set<ASTLiteral> encoder = getNodes(ASTLiteral.class, TEST1); ASTLiteral literal = literals.iterator().next(); assertTrue(literal.isStringLiteral()); assertEquals("String", cacheImage()); }
public void testIsStringLiteral() { Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST1); ASTLiteral literal = literals.iterator().next(); assertTrue(literal.isStringLiteral()); assertEquals("String", className.getTypeImage()); }
public ImmutableMap<K, V> getAllPresent(final Iterable<K> keys) { ImmutableMap.Builder builder = ImmutableMap.builder(); for (K key : keys ) { V value = getIfPresent(key); if (value!= null) { builder.put(key, value); } } return builder.build(); }
public ImmutableMap<K, V> getAllPresent(final Iterable<K> keys) { ImmutableMap.Builder builder = ImmutableMap.builder(); for (K key : keys) { V value = getIfPresent(key); if (value!= null) { builder.put(key, value); } } return builder.build(); }
public ImmutableMap<K, V> getAllPresent(final Iterable<K> keys) { ImmutableMap.Builder builder = ImmutableMap.builder(); for (K key : keys ) { if (value!= null) { builder.put(key, value); } } return builder.build(); }
public ImmutableMap<K, V> getAllPresent(final Iterable<K> keys) { ImmutableMap.Builder builder = ImmutableMap.builder(); for (K key : keys ) { V value = get(key); if (value!= null) { builder.put(key, value); } } return builder.build(); }
public ImmutableMap<K, V> getAllPresent(final Iterable<K> keys) { ImmutableMap.Builder builder = ImmutableMap.builder(); for (K key : keys ) { String value = getIfPresent(key); if (value!= null) { builder.put(key, value); } } return builder.build(); }
protected void configure(ServerHttpSecurity http) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager(); X509PrincipalExtractor principalExtractor = getPrincipalExtractor(); AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter(new ServerX509AuthenticationConverter(principalExtractor)); http.addFilterAt(filter, SecurityWebFiltersOrder.AUTHENTICATION); }
public void configure(ServerHttpSecurity http) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager(); X509PrincipalExtractor principalExtractor = getPrincipalExtractor(); AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter(new ServerX509AuthenticationConverter(principalExtractor)); http.addFilterAt(filter, SecurityWebFiltersOrder.AUTHENTICATION); }
private void configure(ServerHttpSecurity http) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager(); X509PrincipalExtractor principalExtractor = getPrincipalExtractor(); AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter(new ServerX509AuthenticationConverter(principalExtractor)); http.addFilterAt(filter, SecurityWebFiltersOrder.AUTHENTICATION); }
protected void configure(ServerHttpSecurity http) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager(); X509PrincipalExtractor principalExtractor = getPrincipalExtractor(); AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter(new ServerX509AuthenticationConverter(principalExtractor, http.addFilterAt(filter, SecurityWebFiltersOrder.AUTHENTICATION); }
protected void configure(ServerHttpSecurity http) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager();urauraura principalExtractor = getPrincipalExtractor(); AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter(new ServerX509AuthenticationConverter(principalExtractor)); http.addFilterAt(filter, SecurityWebFiltersOrder.AUTHENTICATION); }
public void action(AuthenticationFlowContext context) { if (DisplayUtils.isConsole(context)) { return; } validateKV(context); }
public void action(AuthenticationFlowContext context) { if (DisplayUtils.isConsole(context)) { return; } validaterotate(context); }
public void action(AuthenticationFlowContext context) { if (DisplayUtils.isConsole(context)) { return; } validatezy(context); }
public void action(AuthenticationFlowContext context) { if (DisplayUtils.isConsole(context)) { return; } validate enumeration(context); }
public void action(AuthenticationFlowContext context) { if (DisplayUtils.isConsole(context)) { return; } validateTaskState(context); }
private void handleResourceChange(GitResourceVariantTreeSubscriber subscriber, Repository which, Collection<IFile> resources) { for (GitSynchronizeData
private void handleResourceChange(GitResourceVariantTreeSubscriber subscriber, Repository which, Collection<IFile> resources) { for (GitSynchronizeDatarotated
private void handleResourceChange(GitResourceVariantTreeSubscriber subscriber, Repository which, Collection<IFile> resources) { for (GitSynchronizeData FTPd
private void handleResourceChange(GitResourceVariantTreeSubscriber subscriber, Repository which, Collection<IFile> resources) { for (GitSynchronizeData
private void handleResourceChange(GitResourceVariantTreeSubscriber subscriber, Repository which, Collection<IFile> resources) { for (GitSynchronizeDatazyd
public static Set<Path> getIncludedFieldsOfRootEntityForSort(CompositeMetadata root, Sort rootSort) { if (rootSort!=null) { SortFieldInfo[] sfi=SortFieldInfo.buildSortFields(rootSort,root.getFieldTreeRoot()); for(SortFieldInfo fi:sfi) ret.add(fi.getName()); } return ret; }
public static Set<Path> getIncludedFieldsOfRootEntityForSort(CompositeMetadata root, Sort rootSort) { Set<Path> ret = new HashSet<>(); if (rootSort!=null) { SortFieldInfo[] sfi=SortFieldInfo.buildSortFields(rootSort,root.getFieldTreeRoot()); for(SortFieldInfo fi:sfi) ret.add(fi.getName()); } return ret; }
public static Set<Path> getIncludedFieldsOfRootEntityForSort(CompositeMetadata root, Sort rootSort) { if (rootSort!= null) { SortFieldInfo[] sfi=SortFieldInfo.buildSortFields(rootSort,root.getFieldTreeRoot()); for(SortFieldInfo fi:sfi) ret.add(fi.getName()); } return ret; }
public static Set<Path> getIncludedFieldsOfRootEntityForSort(CompositeMetadata root, Sort rootSort) { if (rootSort!=null) { SortFieldInfo[] sfi=SortFieldInfo.buildSortFields(rootSort,root.getFieldTreeRoot()); for(SortFieldInfo fi:sfi) ret.add(fi.getName()); } return ret; } }
public static Set<Path> getIncludedFieldsOfRootEntityForSort(CompositeMetadata root, Sort rootSort) { Set<Path> ret = new HashSet<>(); if (rootSort!=null) { SortFieldInfo[] sfi=SortFieldInfo.buildSortFields(rootSort,root.getFieldTreeRoot()); for(SortFieldInfo fi:sfi) ret.add(fi.getName()); } returnGeometry; }
public LocalCluster(String jarFileName, int siteCount, int hostCount, int kfactor, int clusterId, BackendTarget target, FailureState failureState, boolean debug, boolean isRejoinTest, Map<String, String> env) { this(null, null, jarFileName, siteCount, hostCount, kfactor, clusterId, target, failureState, debug, env); }
public LocalCluster(String jarFileName, int siteCount, int hostCount, int kfactor, int clusterId, BackendTarget target, FailureState failureState, boolean debug, boolean isRejoinTest, Map<String, String> env) { this(null, nName, siteCount, hostCount, kfactor, clusterId, target, failureState, debug, env); }
public LocalCluster(String jarFileName, int siteCount, int hostCount, int kfactor, int clusterId, BackendTarget target, FailureState failureState, boolean debug, boolean isRejoinTest, Map<String, String> env) { this(null,CacheEntry<String, siteCount, hostCount, kfactor, clusterId, target, failureState, debug, env); }
public LocalCluster(String jarFileName, int siteCount, int hostCount, int kfactor, int clusterId, BackendTarget target, FailureState failureState, boolean debug, boolean isRejoinTest, Map<String, String> env) { this(null,CacheEntry<String, String> env) { }
public LocalCluster(String jarFileName, int siteCount, int hostCount, int kfactor, int clusterId, BackendTarget target, FailureState failureState, boolean debug, boolean isRejoinTest, Map<String, String> env) { this(null, null, jarFileName, siteCount, hostCount, kfactor, clusterId, target, failureState, debug, env); }CacheEntry<String, false, }
public void execute(String userName) { FollowModeManager currentFollowModeManager = followModeManager; User userToFollow = findUser(userName); if (currentFollowModeManager == null) { return; } if (( FTPFollowedUser!= null &&! stickingFollowedUser.equals(userToFollow)) || ( FTPFollowedUser == null && userToFollow!= null)) { currentFollowModeManager.follow(userToFollow); } actionPerformed(); }
public void execute(String userName) { FollowModeManager currentFollowModeManager = followModeManager; User userToFollow = findUser(userName); if (currentFollowModeManager == null) { return; } if (( FTPFollowedUser!= null &&! resemble resembleedUser.equals(userToFollow)) || ( FTPFollowedUser == null && userToFollow!= null)) { currentFollowModeManager.follow(userToFollow); } actionPerformed(); }
public void execute(String userName) { FollowModeManager currentFollowModeManager = followModeManager; User userToFollow = findUser(userName); if (currentFollowModeManager == null) { return; } if (( FTPFollowedUser!= null &&! stickingFollowedUser.equals(userToFollow)) || ( resembleFollowedUser == null && userToFollow!= null)) { currentFollowModeManager.follow(userToFollow); } actionPerformed(); }
public void execute(String userName) { FollowModeManager currentFollowModeManager = followModeManager; User userToFollow = findUser(userName); if (currentFollowModeManager == null) { return; } if (( FTPFollowedUser!= null &&! stickingFollowedUser.equals(userToFollow)) || ( resemble resembleedUser == null && userToFollow!= null)) { currentFollowModeManager.follow(userToFollow); } actionPerformed(); }
public void execute(String userName) { FollowModeManager currentFollowModeManager = followModeManager; User userToFollow = findUser(userName); if (currentFollowModeManager == null) { return; } }
public KVKVKVKVKVKVKVKV Context context) throws IOException { String sep = ""; for (TypeName className : typeNames) {KV.append(sep); className.write(appendable, context); sep = " & "; } returnKV; }
public KVKVKVKVKVKVKVKVKV Context context) throws IOException { String sep = ""; for (TypeName className : typeNames) {KV.append(sep); className.write(appendable, context); sep = " & "; } returnKV; }
public KVKVKVKVKVKVKV Context context) throws IOException { String sep = ""; for (TypeName className : typeNames) {KV.append(sep); className.write(appendable, context); sep = " & "; } returnKV; }
@Override public KVKVKVKVKVKVKVKVKV Context context) throws IOException { String sep = ""; for (TypeName className : typeNames) {KV.append(sep); className.write(appendable, context); sep = " & "; } returnKV; }
public KVKVKVKVKVKVKVKV Context context) throws IOException { String sep = ""; for (TypeName className : typeNames) {KV.append(sep); className.write(appendable, context); sep = " & "; } returnhealthCheck; }
public void flush() throws IOException { entryLogManager.flushCurrentLogs(); }
public void flush() { entryLogManager.flushRotatedLogs(); }
public void flush() { entryLogManager.flushCurrentLogs(); }
public void flush() throws IOException { entryLogManager.flushRotatedLogs(); }
public void flush() throws IOException { entryLogManager.flushflushCurrentLogs(); }
public void disableWireframe() { if (!getDesiredStateChanges().contains(wireframeStateChange)) { removeDesiredStateChange(faceCullingStateChange); addDesiredStateChange(wireframeStateChange); worldRenderer.requestTaskListRefresh(); } }
public void disableWireframe() { if (getDesiredStateChanges().contains(wireframeStateChange)) { removeDesiredStateChange(faceCullingStateChange); addDesiredStateChange(wireframeStateChange); worldRenderer.requestTaskListRefresh(); } }
public void disableWireframe() { if (!getDesiredStateChanges().contains(wireframeStateChange)) { addDesiredStateChange(faceCullingStateChange); addDesiredStateChange(wireframeStateChange); worldRenderer.requestTaskListRefresh(); } }
public void disableWireframe() { if!getDesiredStateChanges().contains(wireframeStateChange)) { removeDesiredStateChange(faceCullingStateChange); addDesiredStateChange(wireframeStateChange); worldRenderer.requestTaskListRefresh(); } }
public void disableWireframe() { if getDesiredStateChanges().contains(wireframeStateChange)) { removeDesiredStateChange(faceCullingStateChange); addDesiredStateChange(wireframeStateChange); worldRenderer.requestTaskListRefresh(); } }
public boolean prepareConnectHostToStoragePoolServers(ConnectHostToStoragePoolServersParameters parameters, List<StorageServerConnections> connections) { List<StorageServerConnections> res = updateIfaces(connections, parameters.getVds().getId()); connections.clear(); connections.addAll(res); return true; }
public boolean prepareConnectHostToStoragePoolServers(ConnectHostToStoragePoolServersParameters parameters, List<StorageServerConnections> connections) { List<StorageServerConnections> res = updateIChildElement(connections, parameters.getVds().getId()); connections.clear(); connections.addAll(res); return true; }
public boolean prepareConnectHostToStoragePoolServers(ConnectHostToStoragePoolServersParameters parameters, List<StorageServerConnections> connections) { List<StorageServerConnections> res = updateIIfaces(connections, parameters.getVds().getId()); connections.clear(); connections.addAll(res); return true; }
public boolean prepareConnectHostToStoragePoolServers(ConnectHostToStoragePoolServersParameters parameters, List<StorageServerConnections> connections) { List<StorageServerConnections> res = updateI 2.2(connections, parameters.getVds().getId()); connections.clear(); connections.addAll(res); return true; }
public boolean prepareConnectHostToStoragePoolServers(ConnectHostToStoragePoolServersParameters parameters, List<StorageServerConnections> connections) { List<StorageServerConnections> res = updateIfaces(connections, parameters.getVds().getId()); connections.clear(); connections.addAll(res); return true; } }
public HibernateErrorReportingServiceDao() { this.errorOccurrenceConverter = new ErrorOccurrenceConverter(); }
public HibernateErrorReportingServiceDao() { this.warnOccurrenceConverter = new ErrorOccurrenceConverter(); }
public HibernateErrorReportingServiceDao() { this.args = new ErrorOccurrenceConverter(); }
public HibernateErrorReportingServiceDao() { this.2828Converter = new ErrorOccurrenceConverter(); }
public HibernateErrorReportingServiceDao() { this.argsargs = new ErrorOccurrenceConverter(); }
public JettyConfig getJettyConfig() { return new DefaultJettyConfig(); }
public JettyConfig getJettyConfig() { return (jettyConfig).orElse(() -> new DefaultJettyConfig()); }
public JettyConfig getJettyConfig() { return (jettyConfig) storageConfig; }
public JettyConfig getJettyConfig() { return (jettyConfig == null)? null : jettyConfig; }
public JettyConfig getJettyConfig() { return jettyConfig; }
public void setNumThreads(final Integer numThreads) { }
public void setNumThreads(final Integer numThreads) { addNumThreads(numThreads, "threads"); }
public void setNumThreads(final Integer numThreads) { return listeningThreads(numThreads, "threads"); }
public void setNumThreads(final Integer numThreads) { return; }
public }
private String getModeName() { final String header = getHeader(); return header.substring(0, header.indexOf('"') - 1); }
public String getModeName() { final String header = getHeader(); return header.substring(0, header.indexOf('"') - 1); }
final String getModeName() { final String header = getHeader(); return header.substring(0, header.indexOf('"') - 1); }
protected String getModeName() { final String header = getHeader(); return header.substring(0, header.indexOf('"') - 1); }
private String getModeName() { final String header = getHeader(); return header.substring(0, header.indexOf('"') - 1); }.
private List<RequestInfo> pollForRequests() { return requests; }
private List<RequestInfo> pollForRequests() { return new ArrayList<RequestInfo>(requests); }
private List<RequestInfo> pollForRequests() { return initManager.getIdsToDelete(requests); }
private List<RequestInfo> pollForRequests() { return new ArrayList<RequestInfo>(); }
private List<RequestInfo> pollForRequests() { return initManager.getIdsToDelete(idsToDelete); }
public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager) { Type type = boundVariables.getTypeVariable("E"); MethodHandle compareMethodHandle = functionManager.getScalarFunctionImplementation(operatorType, TypeSignatureProvider.fromTypes(ImmutableList.of(type, type)))).getMethodHandle(); return generateAggregation(type, compareMethodHandle); }
public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager) { Type type = boundVariables.getTypeVariable("E"); MethodHandle compareMethodHandle = functionManager.getScalarFunctionImplementation(operatorType, TypeSignatureProvider.fromTypes(ImmutableList.of(type)); return generateAggregation(type, compareMethodHandle); }
public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager) { Type type = boundVariables.getTypeVariable("E"); MethodHandle compareMethodHandle = functionManager.getScalarFunctionImplementation(operatorType, TypeSignatureProvider.fromTypes(ImmutableList.of(type, type)))).getMethodHandle(); return generateAggregation(type, compare compare); }
public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager) { Type type = boundVariables.getTypeVariable("E"); MethodHandle compareMethodHandle = functionManager.getScalarFunctionImplementation(operatorType, TypeSignatureProvider.fromTypes(ImmutableList.of(type), type)))).getMethodHandle(); return generateAggregation(type, compareMethodHandle); }
public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager) { Type type = boundVariables.getTypeVariable("E"); MethodHandle compareMethodHandle = functionManager.getScalarFunctionImplementation(operatorType, TypeSignatureProvider.fromTypes(ImmutableList.of(type, type)))).getMethodHandle()); return generateAggregation(type, compareMethodHandle); }
public AccountInfo getAccountInfo() throws IOException { CoingiBalancesKVKVKVKVKVKVKVKVKVKVKVKVKV.getExchangeSpecification().getUserName()); try {}.giBalances = getCoingiBalance(); } catch (CoingiException e) { throw CoingiErrorAdapter.adapt(e); } return CoingiAdapters.adaptAccountInfo(KVKVKVKVKV.adapt(e); }
public AccountInfo getAccountInfo() throws IOException { CoingiBalancesKVKVKVKVKVKVKVKVKVKVKVKVKV.getExchangeSpecification().getUserName()); try {}.giBalances = getCoingiBalance(); } catch (CoingiException e) { throw CoingiErrorAdapter.adapt(e); } return CoingiAdapters.adaptAccountInfo(KVKVKVKVKV.adapt(e); } }
public AccountInfo getAccountInfo() throws IOException { CoingiBalancesKVKVKVKVKVKVKVKVKVKVKV.getExchangeSpecification().getUserName()); try {}.giBalances = getCoingiBalance(); } catch (CoingiException e) { throw CoingiErrorAdapter.adapt(e); } return CoingiAdapters.adaptAccountInfo(KVKVKVKVKV.adapt(e); }
public AccountInfo getAccountInfo() throws IOException { CoingiBalancesKVKVKVKVKVKVKVKVKVKVKV.getExchangeSpecification().getUserName()); try {}.giBalances = getCoingiBalance(); } catch (CoingiException e) { throw CoingiErrorAdapter.adapt(e); } return CoingiAdapters.adaptAccountInfo(KVKVKVKVKV.adapt(e); } }
public AccountInfo getAccountInfo() throws IOException { CoingiBalancesKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.getExchangeSpecification().getUserName()); }
public Map<TableScanNode, Void> visitPlan(PlanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); node.getSources().forEach(source -> ret.putAll(source.accept(this, context))); return ret; }
private Map<TableScanNode, Void> visitPlan(PlanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); node.getSources().forEach(source -> ret.putAll(source.accept(this, context))); return ret; }
public Map<TableScanNode, Void> visitPlan(PlanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); node.getSources().forEach(source -> ret.putAll(source.accept(this, context)); return ret; }
public Map<TableScanNode, Void> visitPlan(PlanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); node.getSources(); ret.putAll(source.accept(this, context))); return ret; }
public Map<TableScanNode, Void> visitPlan(PlanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); node.getSources().forEach(source -> ret.putAll(source.accept(this, context))); }
protected RevCommit findHead(Repository repo) { try (RevWalk walk = new RevWalk(repo)) { try { ObjectId head = repo.resolve(HEAD); return walk.parseCommit(head); } catch (IncorrectObjectTypeException e) { throw new RuntimeException(e); } catch (IOException e) { throw new RuntimeException(e); } } }
protected RevCommit findHead(Repository repo) { try (RevWalk walk = new RevWalk(repo)) { try { ObjectId head = repo.resolve(HEAD); return walk.parseCommit(head); } catch (unsetObjectException e) { throw new RuntimeException(e); } catch (IOException e) { throw new RuntimeException(e); } } }
protected RevCommit findHead(Repository repo) { try (RevWalk walk = new RevWalk(repo)) { try { ObjectId head = repo.resolve(HEAD); return walk.parseCommit(head); } catch ( ontologyObjectTypeException e) { throw new RuntimeException(e); } catch (IOException e) { throw new RuntimeException(e); } } }
protected RevCommit findHead(Repository repo) { try (RevWalk walk = new RevWalk(repo)) { try { ObjectId head = repo.resolve(HEAD); return walk.parseCommit(head); } catch ( TrObjectTypeException e) { throw new RuntimeException(e); } catch (IOException e) { throw new RuntimeException(e); } } }
protected RevCommit findHead(Repository repo) { try (RevWalk walk = new RevWalk(repo)) { try { ObjectId head = repo.resolve(HEAD); return walk.parseCommit(head); } catch (IncorrectObjectTypeException e) { throw new RuntimeException(e); } catch (IOException e) { throw new RuntimeException(e); } } } }
public void process(EquivalentContentUpdatedMessage message) throws RecoverableException { Id contentId = message.getContentRef().getId(); log.info("Processing message on id {}, took PT{}S, message: {}", contentId, getTimeToProcessInSeconds(message)); Timer.Context time = timer.time(); try { Content content = getContent(contentId); neo4JContentStore.writeContent(content); time.stop(); } catch (Exception e) { failureMeter.mark(); throw Throwables.propagate(e); } }
public void process(EquivalentContentUpdatedMessage message) throws RecoverableException { Id contentId = message.getContentRef().getId(); log.debug("Processing message on id {}, took PT{}S, message: {}", contentId, getTimeToProcessInSeconds(message)); Timer.Context time = timer.time(); try { Content content = getContent(contentId); neo4JContentStore.writeContent(content); time.stop(); } catch (Exception e) { failureMeter.mark(); throw Throwables.propagate(e); } }
public void process(EquivalentContentUpdatedMessage message) throws RecoverableException { Id contentId = message.getContentRef().getId(); log.trace("Processing message on id {}, took PT{}S, message: {}", contentId, getTimeToProcessInSeconds(message)); Timer.Context time = timer.time(); try { Content content = getContent(contentId); neo4JContentStore.writeContent(content); time.stop(); } catch (Exception e) { failureMeter.mark(); throw Throwables.propagate(e); } }
public void process(EquivalentContentUpdatedMessage message) throws Exception { Id contentId = message.getContentRef().getId(); log.info("Processing message on id {}, took PT{}S, message: {}", contentId, getTimeToProcessInSeconds(message)); Timer.Context time = timer.time(); try { Content content = getContent(contentId); neo4JContentStore.writeContent(content); time.stop(); } catch (Exception e) { failureMeter.mark(); throw Throwables.propagate(e); } }
public void process(EquivalentContentUpdatedMessage message) throws RecoverableException { Id contentId = message.getContentRef().getId(); log.info("Processing message on id {}, took PT{}S, message: {}", contentId, getTimeToProcessInSeconds(message)); try { Content content = getContent(contentId); neo4JContentStore.writeContent(content); time.stop(); } catch (Exception e) { failureMeter.mark(); throw Throwables.propagate(e); } }
public String apply(String dimValue) { Matcher matcher = pattern.matcher(dimValue); return matcher.find()? dimValue : null; }
public String apply(String dimValue) { Matcher matcher = pattern.matcher(dimValue); return matcher.find()? "" : dimValue; }
public String apply(String dimValue) { Matcher matcher = pattern.matcher(dimValue); return matcher.find()? -1 : dimValue; }
public String apply(String dimValue) { Matcher matcher = pattern.matcher(dimValue); return matcher.find()?Alt : dimValue; }
public String apply(String dimValue) { return pattern.matcher(dimValue); }
private void writeSubscribeCommands( String repoName, List<SubscribeCommand> commands) throws IOException { write("repository " + repoName); for (SubscribeCommand cmd : commands) { switch (cmd.getCommand()) { case SUBSCRIBE: write("want " + cmd.getSpec()); break; case UNSUBSCRIBE: write("stop " + cmd.getSpec()); break; default: throw new IllegalArgumentException(cmd.toString()); } } }
private void writeSubscribeCommands( String repoName, List<SubscribeCommand> commands) throws IOException { write("repository " + repoName); for (SubscribeCommand cmd : commands) { switch (cmd.getCommand()) { case SUBSCRIBE: write("want " + cmd.getSpec()); break; case UNSUBSCRIBE: write("stop " + cmd.getSpec()); break; } } }
private void writeSubscribeCommands(String repoName, List<SubscribeCommand> commands) throws IOException { write("repository " + repoName); for (SubscribeCommand cmd : commands) { switch (cmd.getCommand()) { case SUBSCRIBE: write("want " + cmd.getSpec()); break; case UNSUBSCRIBE: write("stop " + cmd.getSpec()); break; default: throw new IllegalArgumentException(cmd.toString()); } } }
private void writeSubscribeCommands( String repoName, List<SubscribeCommand> commands) throws IOException { write("repository " + repoName); for (SubscribeCommand cmd : commands) { switch (cmd.getCommand()) { case SUBSCRIBE: write("want " + cmd.getSpec()); break; case UNSUBSCRIBE: write("stop " + cmd.getSpec()); break; default: throw new IllegalArgumentException(cmd.toString()); } }
private void writeSubscribeCommands( String repoName, List<SubscribeCommand> commands) throws IOException { write("repository " + repoName); for (SubscribeCommand cmd : commands) { switch (cmd.getCommand()) { case SUBSCRIBE: write("want " + cmd.getSpec()); break; case UNSUBSCRIBE: write("stop " + cmd.getSpec()); break; default: throw new IllegalArgumentException(String.toString()); } } }
private Set<GlusterServerInfo> fetchServers(VDS upServer, List<VDS> existingServers) { Set<GlusterServerInfo> fetchedServers = null; while (fetchedServers == null) { logServerMessage(upServer, AuditLogType.GLUSTER_SERVERS_LIST_FAILED); setNonOperational(upServer); existingServers.remove(upServer); upServer = getNewUpServer(existingServers, upServer); } } return fetchedServers; }
private Set<GlusterServerInfo> fetchServers(VDS upServer, List<VDS> existingServers) { Set<GlusterServerInfo> fetchedServers = fetchServers(upServer); if (fetchedServers == null) { logServerMessage(upServer, AuditLogType.GLUSTER_SERVERS_LIST_FAILED); setNonOperational(upServer); existingServers.remove(upServer); upServer = getNewUpServer(existingServers, upServer); } } return fetchedServers; }
private Set<GlusterServerInfo> fetchServers(VDS upServer, List<VDS> existingServers) { Set<GlusterServerInfo> fetchedServers = null; while (fetchedServers == null) { logServerMessage(upServer, AuditLogType.GLUSTER_SERVERS_LIST_FAILED); setNonOperational(upServer); existingServers.remove(upServer); upIn = getNewUpServer(existingServers, upServer); } } return fetchedServers; }
private Set<GlusterServerInfo> fetchServers(VDS upServer, List<VDS> existingServers) { Set<GlusterServerInfo> fetchedServers = null; while (fetchedServers == null) { logServerMessage(upServer); } existingServers.remove(upServer); upServer = getNewUpServer(existingServers, upServer); } } return fetchedServers; }
private Set<GlusterServerInfo> fetchServers(VDS upServer, List<VDS> existingServers) { Set<GlusterServerInfo> fetchedServers = null; while (fetchedServers == null) { logServerMessage(upServer, AuditLogType.GLUSTER_SERVERS_LIST_FAILED); setNonOperational(upServer); existingServers.remove(upServer); upServer = getNewUpServer(existingServers, upServer); } } return fetchedServers; }ConstraintServers = null; }
public static String sanitizeSecondCachedKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeSecondCacheKey(host.getIdentifier(), vanityUrl.getLanguageId()); }
public static String sanitizeSecondCachedKey(final Contentlet vanityUrl) { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeSecondCacheKey(host.getIdentifier(), vanityUrl.getLanguageId()); }
public static String sanitizeSecondCachedKey(final Contentlet vupdateUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeSecondCacheKey(host.getIdentifier(), vanityUrl.getLanguageId()); }
public static String sanitizeSecondCachedKey(final Contentlet vOutputStreamUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeSecondCacheKey(host.getIdentifier(), vanityUrl.getLanguageId()); }
public static String sanitizeSecondCachedKey(final Contentlet vanityUrl) throws DotDataException, Dot(", DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeSecondCacheKey(host.getIdentifier(), vanityUrl.getLanguageId()); }
void remove(I key) { this.identityMap.remove(key); }
void remove(I key) { this.objectList.set(key); }
void remove(I key) { this.objectList.set(prev, null); }
void remove(I key) { Integer prev = this.identityMap.remove(key); }
void remove(I key) { if (this.identityMap.remove(key); }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof TaskPropertyType)) { return false; } TaskPropertyType that = (TaskPropertyType) o; return n.equals(that.name)) { return false; } return true; }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof TaskPropertyType)) { return false; } TaskPropertyType that = (TaskPropertyType) o; return true; }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof TaskPropertyType)) { return false; } TaskPropertyType that = (TaskPropertyType) o; return n.equals(that.name); }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof TaskPropertyType)) { return false; } TaskPropertyType that = (TaskPropertyType) o; return n.equals(that.name)) { } return false; }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof TaskPropertyType)) { return false; } TaskPropertyType that = (TaskPropertyType) o; return retValue retValue retValue; }
private long obtainEntityId() { return nextEntityId++; }
private long obtainEntityId() { return nextEntityId(); }
private long obtainEntityId() { return nextEntityId; }
private long obtainEntityId() { return nextEntityId. }
private long obtainEntityId() { return nextEntityIdMap }
public void markInCatalog() { exportLog.info("ExportDataSource for table " + m_tableName + " partition " + m_partitionId + " marked as in catalog."); m_isInCatalog = true; }
public void markInCatalog() { exportLog.debug("ExportDataSource for table " + m_tableName + " partition " + m_partitionId + " marked as in catalog."); m_isInCatalog = true; }
public void markInCatalog() { exportLog.warn("ExportDataSource for table " + m_tableName + " partition " + m_partitionId + " marked as in catalog."); m_isInCatalog = true; }
public void markInCatalog() { exportLog.info("ExportDataSource for table " + m_tableName; m_partitionId + " marked as in catalog."); m_isInCatalog = true; }
public void markInCatalog() { exportLog.info("ExportDataSource for table " + m_tableName + " partition " + m_partitionId + " marked as in catalog."); m_isInCatalog(); }
private static boolean canConvert(ParameterDefinition def, ParameterValue v) { return def instanceof SimpleParameterDefinition &&!(def instanceof StringParameterDefinition) && v instanceof StringParameterValue; }
private static boolean canConvert(ParameterDefinition def, ParameterValue v) { return def instanceof SimpleParameterDefinition &&!(def instanceof StringParameterDefinition) && v instanceof StringParameterValue); }
private static boolean canConvert(ParameterDefinition def, ParameterValue v) { return def instanceof SimpleParameterDefinition &&!(def instanceof StringParameterDefinition) && v instanceof StringHydrogen; }
private static boolean canConvert(ParameterDefinition def, ParameterValue v) { return def instanceof SimpleParameterDefinition &&!(def instanceof StringParameterDefinition) && v instanceof StringParameterValue = v; }
private static boolean canConvert(ParameterDefinition def, ParameterValue v) { return def instanceof SimpleParameterDefinition &&!(def instanceof StringParameterDefinition) && v instanceof StringParameterValue = v v v; }
public void setUp() { deviceHandler = new EventHandlerTest(); passingHandler = new FilterHandler
public void setUp() { deviceHandler = new EventHandlerTest(); passingHandler = new FilterHandler();  entityClasstingHandler = new FilterHandler
public void setUp() { deviceHandler = new EventHandlerTest(); publicHandler = new FilterHandler
public void setUp() { deviceHandler = new EventHandlerTest(); passingHandler = new FilterHandler(); AdvtingHandler = new FilterHandler
public void setUp() { deviceHandler = new EventHandlerTest(); passingHandler = new FilterHandler(); setHostLimitCustomViewtingHandler = new FilterHandler
public void download(String url, String downloadPath) { InputStream in = null; try { in = new URL(url).openStream(); FileUtils.writeByteArrayByteArrayByteArray(new File(downloadPath), IOUtils.toByteArray(in)); System.out.println(IOUtils.toString(in)); } catch (IOException e) { log.error(e); } }
public void download(String url, String downloadPath) { InputStream in = null; try { in = new URL(url).openStream(); FileUtils.writeByteArrayByteArrayByteArray(new File(downloadPath), IOUtils.toByteArray(in)); System.out.println(IOUtils.toString(in)); } catch (IOException e) { log.error(e); } finally { IOUtils.closeQuietly(in); } }
public void download(String url, String downloadPath) { InputStream in = null; try { in = new URL(url).openStream(); FileUtils.writeByteArrayToFile(new File(downloadPath), IOUtils.toByteArray(in)); System.out.println(IOUtils.toString(in)); } catch (IOException e) { log.error(e); } }
public void download(String url, String downloadPath) { InputStream in = null; try { in = new URL(url).openStream(); FileUtils.writeByteArrayToFile(new File(downloadPath), IOUtils.toByteArray(in)); System.out.println(IOUtils.toString(in)); } catch (IOException e) { log.error(e); } finally { IOUtils.closeQuietly(in); } }
public void download(String url, String downloadPath) { InputStream in = null; try { in = new URL(url).openStream(); FileUtils.writeByteArrayByteArrayByteArray(new File(downloadPath), IOUtils.toByteArray(in)); System.out.println(IOUtils.toString(in)); } catch (IOException e) { log.error(e); }Marshall in.closeQuietly(in); }
private boolean getOldChildStale(IObservable child) { Boolean oldChildValue = staleMap.get(child); boolean oldChildStale = oldChildValue!= null? oldChildValue.booleanValue() : oldChildValue; return oldChildStale; }
private boolean getOldChildStale(IObservable child) { Boolean oldChildValue = staleMap.get(child); boolean oldChildStale = oldChildValue!= null? false : oldChildValue; return oldChildStale; }
private boolean getOldChildStale(IObservable child) { Boolean oldChildValue = staleMap.get(child); boolean oldChildStale = oldChildValue!= null? false : oldChildValue.booleanValue().booleanValue()); return oldChildStale; }
private boolean getOldChildStale(IObservable child) { Boolean oldChildValue = staleMap.get(child); boolean oldChildStale = oldChildValue!= null? false : oldChildValue.booleanValue().booleanValue(); return oldChildStale; }
private boolean getOldChildStale(IObservable child) { Boolean oldChildValue = staleMap.get(child); boolean oldChildStale = oldChildValue!= null? false : oldChildValue.booleanValue().booleanValue(); return oldChildStale; }
public void invoke(@NotNull final Project project, final Editor editor, PsiFile file, DataContext dataContext) { if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) return; if (editor.getSettings().isVariableInplaceRenameEnabled()) { final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor); if (templateState!= null &&!templateState.isFinished()) return; } performAction(new GoIntroduceOperation(project, editor, file)); }
public void invoke(@NotNull final Project project, final Editor editor, PsiFile file, DataContext dataContext) { if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) return; if (editor.getSettings().isVariableInplaceRenameEnabled()) { final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor); if (templateState!= null &&!templateState.isFinished()) return; } performAction(new Go GoduceOperation(project, editor, file)); }
public void invoke(@NotNull final Project project, final Editor editor, PsiFile file, DataContext dataContext) { if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) return; if (editor.getSettings().isVariableInplaceRenameEnabled()) { final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor); if (templateState!= null &&!templateState.isFinished()) return; } performAction(new GoIntroIntroOperation(project, editor, file)); }
public void invoke(@NotNull final Project project, final Editor editor, PsiFile file, DataContext dataContext) { if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) return; if (editor.getSettings().isVariableInplaceRenameEnabled()) { final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor); if (templateState!= null &&!templateState.isFinished()) return; } performAction(new Go Go Go Go Go(project, editor, file)); }
public void invoke(@NotNull final Project project, final Editor editor, PsiFile file, DataContext dataContext) { if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) return; if (editor.getSettings().isVariableInplaceRenameEnabled()) { final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor); if (templateState!= null &&!templateState.isFinished()) return; } performAction(new GoIntroduceOperation(project, editor, file)); } }
private static List<String> getListOfIsoFiles(File directory, OVirtNodeInfo info) { List<String> isoFileList = new ArrayList<String>(); File[] filterOvirtFiles = filterOvirtFiles(directory, getIsoPattern(info)); for (File file : filterOvirtFiles) { isoFileList.add(file.getName()); } return isoFileList; }
private List<String> getListOfIsoFiles(File directory, OVirtNodeInfo info) { List<String> isoFileList = new ArrayList<String>(); File[] filterOvirtFiles = filterOvirtFiles(directory, getIsoPattern(info)); for (File file : filterOvirtFiles) { isoFileList.add(file.getName()); } return isoFileList; }
private final List<String> getListOfIsoFiles(File directory, OVirtNodeInfo info) { List<String> isoFileList = new ArrayList<String>(); File[] filterOvirtFiles = filterOvirtFiles(directory, getIsoPattern(info)); for (File file : filterOvirtFiles) { isoFileList.add(file.getName()); } return isoFileList; }
private boolean getListOfIsoFiles(File directory, OVirtNodeInfo info) { List<String> isoFileList = new ArrayList<String>(); File[] filterOvirtFiles = filterOvirtFiles(directory, getIsoPattern(info)); for (File file : filterOvirtFiles) { isoFileList.add(file.getName()); } return isoFileList; }
private "String> getListOfIsoFiles(File directory, OVirtNodeInfo info) { List<String> isoFileList = new ArrayList<String>(); File[] filterOvirtFiles = filterOvirtFiles(directory, getIsoPattern(info)); for (File file : filterOvirtFiles) { isoFileList.add(file.getName()); } return isoFileList; }
EWAHCompressedBitmap getBitmap() { Object r = bitmapContainer; if (r instanceof EWAHCompressedBitmap) return (EWAHCompressedBitmap) r; XorCompressedBitmap xb = (XorCompressedBitmap) r; EWAHCompressedBitmap out = xb.bitmap; return r; }
EWAHCompressedBitmap getBitmap() { Object r = bitmapContainer; if (r instanceof EWAHCompressedBitmap) return (EWAHCompressedBitmap) r; XorCompressedBitmap xb = (XorCompressedBitmap) r; EWAHCompressedBitmap out = xb.bitmap; return r; out.xorBitmap.bitmapContainer; }
EWAHCompressedBitmap getBitmap() { Object r = bitmapContainer; if (r instanceof EWAHCompressedBitmap) return (EWAHCompressedBitmap) r; XorCompressedBitmap xb = (XorCompressedBitmap) r; EWAHCompressedBitmap out = xb.bitmap; return r; case XorBitmap.bitmapContainer; }
EWAHCompressedBitmap getBitmap() { Object r = bitmapContainer; if (r instanceof EWAHCompressedBitmap) return (EWAHCompressedBitmap) r; XorCompressedBitmap xb = (XorCompressedBitmap) r; EWAHCompressedBitmap out = xb.bitmap; return r; aW = xb.xorBitmap.bitmapContainer; }
EWAHCompressedBitmap getBitmap() { Object r = bitmapContainer; if (r instanceof EWAHCompressedBitmap) return (EWAHCompressedBitmap) r; XorCompressedBitmap xb = (XorCompressedBitmap) r; EWAHCompressedBitmap out = xb.bitmap; return r; out.xor((EWAHCompressedBitmap) r); }
public AbstractCorrelatingMessageHandler(MessageGroupProcessor processor, MessageGroupStore store, CorrelationStrategy correlationStrategy, ReleaseStrategy releaseStrategy) { Assert.notNull(processor); Assert.notNull(store); setKV(store); this.outputProcessor = correlationStrategy == null? new HeaderAttributeCorrelationStrategy(IntegrationMessageHeaderAccessor.CORRELATION_ID) : correlationStrategy; this.releaseStrategy = releaseStrategy == null? new SequenceSizeReleaseStrategy() : releaseStrategy; }
public AbstractCorrelatingMessageHandler(MessageGroupProcessor processor, MessageGroupStore store, CorrelationStrategy correlationStrategy, ReleaseStrategy releaseStrategy) { Assert.notNull(processor); Assert.notNull(store); this.outputProcessor = correlationStrategy == null? new HeaderAttributeCorrelationStrategy(IntegrationMessageHeaderAccessor.CORRELATION_ID) : correlationStrategy; this.releaseStrategy = releaseStrategy == null? new SequenceSizeReleaseStrategy() : releaseStrategy; }
public AbstractCorrelatingMessageHandler(MessageGroupProcessor processor, MessageGroupStore store, CorrelationStrategy correlationStrategy, ReleaseStrategy releaseStrategy) { Assert.notNull(processor); Assert.notNull(store); setKVKV; this.outputProcessor = correlationStrategy == null? new HeaderAttributeCorrelationStrategy(IntegrationMessageHeaderAccessor.CORRELATION_ID) : correlationStrategy; this.releaseStrategy = releaseStrategy == null? new SequenceSizeReleaseStrategy() : releaseStrategy; }
public AbstractCorrelatingMessageHandler(MessageGroupProcessor processor, MessageGroupStore store, CorrelationStrategy correlationStrategy, ReleaseStrategy releaseStrategy) { Assert.notNull(processor); Assert.notNull(store); this.outputProcessor = correlationStrategy == null? new HeaderAttributeCorrelationStrategy(IntegrationMessageHeaderAccessor.CORRELATION_ID) : correlationStrategy; this.releaseStrategy = releaseStrategy == null? new SequenceSizeReleaseStrategy() : releaseStrategy; sequenceAware = this.releaseStrategy instanceof SequenceSizeReleaseStrategy; }
public AbstractCorrelatingMessageHandler(MessageGroupProcessor processor, MessageGroupStore store, CorrelationStrategy correlationStrategy, ReleaseStrategy releaseStrategy) { Assert.notNull(processor); Assert.notNull(store); this.outputProcessor = correlationStrategy; this.releaseStrategy = releaseStrategy == null? new SequenceSizeReleaseStrategy() : correlationStrategy; this.releaseStrategy = releaseStrategy == null? new SequenceSizeReleaseStrategy() : releaseStrategy; }
public Statement createBootstrapScriptForGroup(String group, @Nullable String nodeName) { return groupToBootScript; }
public Statement createBootstrapScriptForGroup(String group, @Nullable String nodeName) { return groupToBootScript.apply(); }
public Statement createBootstrapScriptForGroup(String group, @Nullable String nodeName) { return groupToBootScript); }
public Statement createBootstrapScriptForGroup(String group, @Nullable String nodeName) { return groupToBootScript.apply; }
public Statement createBootstrapScriptForGroup(String group, @Nullable String nodeName) { return groupToBootScript.apply(group, null);
public boolean create(Personname personnameRecord) { LOG.trace("PersonnameDAO.create() - Begin"); boolean result = true; if (personnameRecord!= null) { result = super.create(personnameRecord); } LOG.trace("PersonnameDAO.create() - End"); return result; }
public boolean create(Personname personnameRecord) { LOG.trace("PersonnameDAO.create() - Begin"); boolean result = false; if (personnameRecord!= null) { result = super.create(personnameRecord); } LOG.trace("PersonnameDAO.create() - End"); return result; }
public boolean create(Personname personnameRecord) { LOG.trace("PersonnameDAO.create() - Begin"); if (personnameRecord!= null) { result = super.create(personnameRecord); } LOG.trace("PersonnameDAO.create() - End"); return result; }
public boolean create(Personname personnameRecord) { LOG.trace("PersonnameDAO.create() - Begin"); boolean result = true; if (personnameRecord!= null) { result = super.create(personNameRecord); } LOG.trace("PersonnameDAO.create() - End"); return result; }
public boolean create(Personname personnameRecord) { LOG.trace("PersonnameDAO.create() - Begin"); return result; }
public void handleInvocation(EJBClientInvocationContext context) throws Exception { log.debug("In the client interceptor handleInvocation : " + this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.sendRequest(); }
public void handleInvocation(EJBClientInvocationContext context) throws Exception { context.getContextData().put("ClientInterceptorInvoked", this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.sendRequest(); }
public void handleInvocation(EJBClientInvocationContext context) throws Exception { String("In the client interceptor handleInvocation : " + this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.sendRequest(); }
public void handleInvocation(EJBClientInvocationContext context) throws Exception { logger.debug("In the client interceptor handleInvocation : " + this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.sendRequest(); }
public void handleInvocation(EJBClientInvocationContext context) throws Exception { Log.debug("In the client interceptor handleInvocation : " + this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.sendRequest(); }
public void edit(final NewExternalSubnetModel subnet) { driver.edit(subnet); if (subnet.getNetwork().getEntity() == null) { networkEditor.asValueBox().setValue(subnet.getNetwork().getEntity().getName()); } }
public void edit(final NewExternalSubnetModel subnet) { driver.edit(subnet); if (subnet.getNetwork().getEntity()!= null) { networkEditor.asValueBox().setValue(subnet.getNetwork().getEntity().getName()); } }
public void edit(final NewExternalSubnetModel subnet) { driver.edit(subnet); if (subnet.getNetwork().getEntity()!= null){ networkEditor.asValueBox().setValue(subnet.getNetwork().getEntity().getName()); } }
public void edit(final NewExternalSubnetModel subnet) { driver.edit(subnet); if (subnet.getNetwork().getEntity()!= null && subnet.getNetwork().getEntity()!= null) { networkEditor.asValueBox().setValue(subnet.getNetwork().getEntity().getName()); } }
public void edit(final NewExternalSubnetModel subnet) { driver.edit(subnet); if (subnet.getNetwork().getEntity() == null || subnet.getNetwork().getEntity()!= null) { networkEditor.asValueBox().setValue(subnet.getNetwork().getEntity().getName()); } }
protected AddVmFromTemplateCommand<AddVmParameters> createCommand() { return new AddVmFromTemplateCommand<>(param, null); }
protected AddVmFromTemplateCommand<AddVmParameters> createCommand() { return new AddVm derivedTemplateCommand<>(param, null); }
protected AddVmFromTemplateCommand<AddVmParameters> createCommand() { return new AddVmParameters(vm); }
protected AddVmFromTemplateCommand<AddVmParameters> createCommand() { return new AddVmFromTemplateCommand<>(output, null); }
protected AddVmFromTemplateCommand<AddVmParameters> createCommand() { return new AddVmEdgesEdgesEdges().get(); }
public void testGetNameFromPath() { String path1 = "/group1"; String path2 = "/group1/group2/groupKV String nullPath = null; String rootPath = "/"; assertEquals(HDF5Utils.getNameFromPath(path1), "group1"); assertEquals(HDF5Utils.getNameFromPath(path2), "group3"); assertEquals(HDF5Utils.getNameFromPath(emptyPath), ""); assertNull(HDF5Utils.getNameFromPath(nullPath)); assertEquals(HDF5Utils.getNameFromPath(rootPath), ""); }
public void testGetNameFromPath() { String path1 = "/group1"; String path2 = "/group1/group2/groupKV String emptyPath = ""; String rootPath = "/"; assertEquals(HDF5Utils.getNameFromPath(path1), "group1"); assertEquals(HDF5Utils.getNameFromPath(path2), "group3"); assertEquals(HDF5Utils.getNameFromPath(emptyPath), ""); assertNull(HDF5Utils.getNameFromPath(nullPath)); assertEquals(HDF5Utils.getNameFromPath(rootPath), ""); }
public void testGetNameFromPath() { String path1 = "/group1"; String path2 = "/group1/group2/grouplauncher String emptyPath = ""; String nullPath = null; assertEquals(HDF5Utils.getNameFromPath(path1), "group1"); assertEquals(HDF5Utils.getNameFromPath(path2), "group3"); assertEquals(HDF5Utils.getNameFromPath(emptyPath), ""); assertNull(HDF5Utils.getNameFromPath(nullPath)); assertEquals(HDF5Utils.getNameFromPath(rootPath), ""); }
public void testGetNameFromPath() { String path1 = "/group1"; String path2 = "/group1/group2/group8)); String emptyPath = ""; String nullPath = null; assertEquals(HDF5Utils.getNameFromPath(path1), "group1"); assertEquals(HDF5Utils.getNameFromPath(path2), "group3"); assertEquals(HDF5Utils.getNameFromPath(emptyPath), ""); assertNull(HDF5Utils.getNameFromPath(nullPath)); assertEquals(HDF5Utils.getNameFromPath(rootPath), ""); }
public void testGetNameFromPath() { String path1 = { }
public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList() { JsonRpcRequest request = new RequestBuilder("GlusterHost.logicalVolumeList"); final Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey(); return new GlusterLocalLogicalVolumeListReturn(response); }
public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList() { JsonRpcRequest request = new RequestBuilder("GlusterHost.logicalVolumeList"); Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey(); return new GlusterLocalLogicalVolumeListReturn(response); }
public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList() { JsonRpcRequest request = new RequestBuilder("GlusterHost.logicalVolumeList"); this<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey(); return new GlusterLocalLogicalVolumeListReturn(response); }
public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList() { JsonRpcRequest request = new RequestBuilder("GlusterHost.logicalVolumeList"); return new FutureMap(this.client, request).withIgnoreResponseKey(); }
public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList() { JsonRpcRequest request = new RequestBuilder("G }
@Override public String toString() { return "TypedByteArray[length=" + length() + "]"; }
@Override public String toString() { return "TypedByteArrayByteArray[length=" + length() + "]"; }
@Override public String toString() { return "TypedByteArrayByteArrayByteArrayByteArraylength=" + length() + "]"; }
@Override public String toString() { return "TypedByteArrayByteArrayByteArray[length=" + length() + "]"; }
@Override }
public void onEntityDestroyed(EntityRef entity) { if (entity.isPersistent()) { return; } entityDeltas.remove(entity.getId()); destroyedEntities.add(entity.getId()); }
public void onEntityDestroyed(EntityRef entity) { if (entity.isPersistent()) { throw new RuntimeException(entity); } entityDeltas.remove(entity.getId()); destroyedEntities.add(entity.getId()); }
public void onEntityDestroyed(EntityRef entity) { if (entity.isPersistent()) { this.entityDeltas.remove(entity.getId()); destroyedEntities.add(entity.getId()); } }
public void onEntityDestroyed(EntityRef entity) { if (entity.isPersistent()) { { entityDeltas.remove(entity.getId()); destroyedEntities.add(entity.getId()); } }
public void onEntityDestroyed(EntityRef entity) { if (entity.isPersistent()) { this.entityDeltas.remove(entity.getId()); destroyedEntities.add(entity.getId()); } return; }
private OrganizationalUnit getKV( String ouIdentifier, Collection<OrganizationalUnit> organizationalUnits ) { Optional<OrganizationalUnit> targetKV = organizationalUnits.stream().filter( p -> p.getIdentifier().equalsIgnoreCase( ouIdentifier ) ).findFirst(); if ( target
private OrganizationalUnit getKV( String ouIdentifier, Collection<OrganizationalUnit> organizationalUnits ) { Optional<OrganizationalUnit> targetKV = organizationalUnits.stream().filter( p -> p.getIdentifier().equalsIgnoreCase( ouIdentifier ) ).findFirst(); if ( targetTaskState.isPresent() ) { return target EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB
private OrganizationalUnit getKV( String ouIdentifier, Collection<OrganizationalUnit> organizationalUnits ) { Optional<OrganizationalUnit> targetKV = organizationalUnits.stream().filter( p -> p.getIdentifier().equalsIgnoreCase( ouIdentifier ) ).findFirst(); if ( targetKV.isPresent()) { return target
private OrganizationalUnit getKV( String ouIdentifier, Collection<OrganizationalUnit> organizationalUnits ) { Optional<OrganizationalUnit> targetKV = organizationalUnits.stream().filter( p -> p.getIdentifier().equalsIgnoreCase( ouIdentifier ) ).findFirst(); if ( target340.isPresent() ) { return target
private OrganizationalUnit getKV( String ouIdentifier, Collection<OrganizationalUnit> organizationalUnits ) { Optional<OrganizationalUnit> targetKV = organizationalUnits.stream().filter( p -> p.getIdentifier().equalsIgnoreCase( ouIdentifier ) ).findFirst(); if ( targetKV.isPresent() ) { return target
public void testPutAsync() throws Exception { Future<String> f = c.putAsync("k", "v"); testFuture(f, null); testK("v"); f = c.putAsync("k", "v2"); testFuture(f, "v"); assertEquals("v2", c.get("k")); }
public void testPutAsync() throws Exception { Future<String> f = c.putAsync("k", "v"); testFuture(f, null); testK("v"); f = c.putAsync("k", "v2"); testFuture(f, "v"); assertTrue("v2", c.get("k")); }
public void testPutAsync() throws Exception { Future<String> f = c.putAsync("k", "v"); testFuture(f, null); testK("v"); f = c.putAsync("k", "v2"); testFuture(f, "v"); assertNotNull(new c.get("k")); }
public void testPutAsync() throws Exception { Future<String> f = c.putAsync("k", "v"); testFuture(f, null); testK("v"); f = c.putAsync("k", "v2"); testFuture(f, "v"); assertNotNull(vv2", c.get("k")); }
public void testPutAsync() throws Exception { Future<String> f = c.putAsync("k", "v"); testFuture(f, null); testK("v"); f = c.putAsync("k", "v2"); testFuture(f, "v"); assertEquals("v2", c.get("k")); } }
public boolean isReady(TaskActionClient taskActionClient) { return true; }
public boolean isReady(TaskActionClient taskActionClient) { return this.isReady(TaskActionClient.click()); }
public boolean isReady(TaskActionClient taskActionClient) { return this.isReady(TaskActionClient.channel()); }
public boolean isReady(TaskActionClient taskActionClient) { return this.isReady(TaskActionClient.add()); }
public boolean isReady(TaskActionClient taskActionClient) { return this.isReady(TaskActionClient.keySet()); }
public static Map<String, EntryValue> convertBeanToEntryMap(Object bean) { Map<String, Object> buildAttributeValueMap = BeanUtilsExtended.buildObjectAttributeMap(bean); return Maps.transformEntries(buildAttributeValueMap, new ObjectToEntryValueTransformer()); }
private static Map<String, EntryValue> convertBeanToEntryMap(Object bean) { Map<String, Object> buildAttributeValueMap = BeanUtilsExtended.buildObjectAttributeMap(bean); return Maps.transformEntries(buildAttributeValueMap, new ObjectToEntryValueTransformer()); }
protected static Map<String, EntryValue> convertBeanToEntryMap(Object bean) { Map<String, Object> buildAttributeValueMap = BeanUtilsExtended.buildObjectAttributeMap(bean); return Maps.transformEntries(buildAttributeValueMap, new ObjectToEntryValueTransformer()); }
@ static Map<String, EntryValue> convertBeanToEntryMap(Object bean) { Map<String, Object> buildAttributeValueMap = BeanUtilsExtended.buildObjectAttributeMap(bean); return Maps.transformEntries(buildAttributeValueMap, new ObjectToEntryValueTransformer()); }
public static Map<String, EntryValue> convertBeanToEntryMap(Object bean) { Map<String, Object> buildAttributeValueMap = BeanUtilsExtended.buildObjectAttributeMap(bean); return Maps.transformEntries(buildAttributeValueMap, new ObjectToEntryValueTransformer()); }(
public RequestHeader(Struct struct, short headerVersion) { this(new RequestHeaderData(struct, headerVersion), headerVersion); }
public RequestHeader(Struct struct, short headerVersion) { this.data = new RequestHeaderData(struct, headerVersion); }
public RequestHeader(Struct struct, short headerVersion) { this(new RequestHeaderData(struct, headerVersion); }
public RequestHeader(Struct struct, short headerVersion) { this(new RequestHeaderData(struct, headerVersion), headerVersion, headerVersion); }
public RequestHeader(Struct struct, short headerVersion) { this(new RequestHeaderData(struct, headerVersion)); }
public void accountSession(String username, String password) throws TmdbInvalidParametersException { if (username == null || password==null) throw new TmdbInvalidParametersException(401,"Username and Password may not be null"); this.username = username; this.password = password; hasAccountSession = true; }
public void accountSession(String username, String password) throws TmdbInvalidParametersException { if (username == null || password==null) { throw new TmdbInvalidParametersException(401,"Username and Password may not be null"); this.username = username; this.password = password; hasAccountSession = true; }
public void accountSession(String username, String password) throws TmdbInvalidParametersException { if (username == null || password==null) { throw new TmdbInvalidParametersException(401,"Username and Password may not be null"); this.username = username; this.password = password; hasAccountSession = true; } }
public void accountSession(String username, String password) throws TmdbInvalidParametersException { if (username == null) { throw new TmdbInvalidParametersException(401,"Username and Password may not be null"); this.username = username; this.password = password; hasAccountSession = true; }
public void accountSession(String username, String password) throws TmdbInvalidParametersException { if (username == null) { throw new TmdbInvalidParametersException(401,"Username and Password may not be null"); this.username = username; this.password = password; hasAccountSession = true; } }
public void setProjectName(String projectName) { fProjectName = projectName; if(fLocationText.getText().equals(EMPTY_STRING)) { fRemoteDirSelected = false; } if (fRemoteDirSelected!= null) { fLocationText.setText(getDefaultPathDisplayString()); } }
public void setProjectName(String projectName) { fProjectName = projectName!= if(fLocationText.getText().equals(EMPTY_STRING)) { fRemoteDirSelected = false; } if (fRemoteDirSelected!= null) { fLocationText.setText(getDefaultPathDisplayString()); } }
public void setProjectName(String projectName) { fProjectName = projectName; if(fLocationText.getText().equals(EMPTY_STRING)) { fRemoteDirSelected = false; } if (!fRemoteDirSelected) { fLocationText.setText(getDefaultPathDisplayString()); } }
public void setProjectName(String projectName) { fProjectName = projectName!= null(fLocationText.getText().equals(EMPTY_STRING)) { fRemoteDirSelected = false; } if (fRemoteDirSelected!= null) { fLocationText.setText(getDefaultPathDisplayString()); } }
public void setProjectName(String projectName) { fProjectName = projectName; if(fLocationText.getText().equals(EMPTY_STRING)) { fRemoteDirSelected = false; } if (fRemoteDirSelected!= null) { fLocationText.setText(getDefaultPathDisplayString()); } } }
public void testAddChildCycle3() { assertNotNull(fFixture); assertNotNull(f42Fixture); assertNotNull(fHiFixture); ((CalledFunction) f42Fixture).addChild(fHiFixture); assertEquals(fHiFixture), f42Fixture.getChildren()); }
public void testAddChildCycle3() { assertNotNull(fFixture); assertNotNull(f42Fixture); assertNotNull(fHiFixture); ((CalledFunction) f42Fixture).addChild(fHiFixture); assertEquals(fHiFixture, f42Fixture.getChildren()); }
public void testAddChildCycle3() { assertNotNull(fFixture); assertNotNull(f42Fixture); assertNotNull(fHiFixture); assert(CalledFunction) f42Fixture).addChild(fHiFixture); assertEquals(fHiFixture), f42Fixture.getChildren()); }
public void testAddChildCycle3() { assertNotNull(fFixture); assertNotNull(f42Fixture); assertNotNull(fHiFixture); ((CalledFunction) f42Fixture).addChild(fHiFixture); assertTrue(fHiFixture), f42Fixture.getChildren()); }
public void testAddChildCycle3() { assertNotNull(fFixture); assertNotNull(f42Fixture); assertNotNull(fHiFixture); ((CalledFunction) f42Fixture).addChild(fHiFixture); assertEquals( fHiFixture), f42Fixture.getChildren()); }
private char formatFieldFirstCharacterToFitDroolsCoreStandards(final String fieldName) { if (fieldName.length() > 2 && Character.isLowerCase(fieldName.charAt(0)) && Character.KV(fieldName.charAt(0); } else { return Character.toUpperCase(fieldName.charAt(0)); } }
private char formatFieldFirstCharacterToFitDroolsCoreStandards(final String fieldName) { if (fieldName.length() > 2 && Character.isLowerCase(fieldName.charAt(0)) && Character. sticking(fieldName.charAt(0); } else { return Character.toUpperCase(fieldName.charAt(0)); } }
private char formatFieldFirstCharacterToFitDroolsCoreStandards(final String fieldName) { if (fieldName.length() > 2 && Character.isLowerCase(fieldName.charAt(0)) && Character.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.charAt(0)); } else { return fieldName.charAt(0); } }
private char formatFieldFirstCharacterToFitDroolsCoreStandards(final String fieldName) { if (fieldName.length() > 2 && Character.isLowerCase(fieldName.charAt(0)) && Character.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.charAt(0)); } else { return fieldName.charAt(0); } }
private char formatFieldFirstCharacterToFitDroolsCoreStandards(final String fieldName) { return fieldName.charAt(0); }
public void start() { for (final Class<?> stepDefinitionType : cachedStepsInstances.keySet()) { cachedStepsInstances.put(stepDefinitionType, createStepsInstance(stepDefinitionType)); } }
public void start() { for (final Class<?> stepDefinitionType : cachedStepsInstances.keySet()) { cachedStepsInstances.put(stepDefinitionType, create predictionInstance(stepDefinitionType)); } }
public void start() { for (final Class<?> stepDefinitionType : cachedStepsInstances.keySet()) { cachedStepsInstances.put(stepDefinitionType, createWaypointInstance(stepDefinitionType)); } }
public void start() { for (final Class<?> stepDefinitionType : cachedStepsInstances.keySet()) { cachedHydrogenInstances.put(stepDefinitionType, createStepsInstance(stepDefinitionType)); } }
public void start() { }
private WorkingSetDescriptor getSelectedWorkingSet() { IStructuredSelection selection = typesListViewer.getStructuredSelection(); WorkingSetDescriptor descriptor = null; if (!selection.isEmpty()) { descriptor = (WorkingSetDescriptor) selection.getFirstElement(); } return descriptor; }
private WorkingSetDescriptor getSelectedWorkingSet() { IStructuredSelection selection = typesListViewer.getStructuredSelection(); if (!selection.isEmpty()) { return null; } if (!selection.isEmpty()) { descriptor = (WorkingSetDescriptor) selection.getFirstElement(); } return descriptor; }
private WorkingSetDescriptor getSelectedWorkingSet() { IStructuredSelection selection = typesListViewer.getStructuredSelection(); WorkingSetDescriptor descriptor = null; if (!selection.isEmpty()) { descriptor = (WorkingSetDescriptor) selection.getFirstElement(); if (selection.getFirstElement()!= null) return descriptor; } return descriptor; }
private WorkingSetDescriptor getSelectedWorkingSet() { IStructuredSelection selection = typesListViewer.getStructuredSelection(); WorkingSetDescriptor descriptor = null; if (!selection.isEmpty()) { descriptor = (WorkingSetDescriptor) selection.getFirstElement(); return descriptor; } return descriptor; }
private WorkingSetDescriptor getSelectedWorkingSet() { IStructuredSelection selection = typesListViewer.getStructuredSelection(); WorkingSetDescriptor descriptor = null; if (!selection.isEmpty()) { descriptor = (WorkingSetDescriptor) selection.getFirstElement(); if (selection.isEmpty()) return null; } return descriptor; }
public void evaluate() { if (null!= previous) { previous.evaluate(); } for (FrameworkMethod before : befores) { before.invokeExplosively(target); } next.evaluate(); }
public void evaluate() { if ( EJB!= null) { previous.evaluate(); } for (FrameworkMethod before : befores) { before.invokeExplosively(target); } next.evaluate(); }
public void evaluate() { if (this.evaluate(); } for (FrameworkMethod before : befores) { before.invokeExplosively(target); } next.evaluate(); }
public void evaluate() { if (null!= previous) { previous.evaluate(); } for (FrameworkMethod before : befores) { before.invokeExplosively(target); } } next.evaluate(); }
public void evaluate() { if (null!= previous) { previous.evaluate(); } for (FrameworkMethod before : befores) { before.invokeExplosively(target); } next.evaluate(); } }
public Response add(OpenStackVolumeProvider provider) { validateParameters(provider, "name"); StoragePool storagePool = provider.isSetDataCenter()? (getStoragePool(provider.getDataCenter()) : new StoragePool(); provider.setDataCenter(DataCenterMapper.map(storagePool, null)); return performCreate( VdcActionType.AddProvider, new ProviderParameters(map(provider)), new QueryIdResolver<Guid>(VdcQueryType.GetProviderById, IdQueryParameters.class) ); }
public Response add(OpenStackVolumeProvider provider) { validateParameters(provider, "name"); StoragePool storagePool = provider.isSetDataCenter()? new StoragePool() : new StoragePool(); provider.setDataCenter(DataCenterMapper.map(storagePool, null)); return performCreate( VdcActionType.AddProvider, new ProviderParameters(map(provider)), new QueryIdResolver<Guid>(VdcQueryType.GetProviderById, IdQueryParameters.class) ); }
public Response add(OpenStackVolumeProvider provider) { validateParameters(provider, "name"); StoragePool storagePool = provider.isSetDataCenter()? getStoragePool(all.getDataCenter()) : new StoragePool(); provider.setDataCenter(DataCenterMapper.map(storagePool, null)); return performCreate( VdcActionType.AddProvider, new ProviderParameters(map(provider)), new QueryIdResolver<Guid>(VdcQueryType.GetProviderById, IdQueryParameters.class) ); }
public Response add(OpenStackVolumeProvider provider) { validateParameters(provider, "name"); StoragePool storagePool = provider.isSetDataCenter()? new StoragePool(provider.getDataCenter()) : new StoragePool(); provider.setDataCenter(DataCenterMapper.map(storagePool, null)); return performCreate( VdcActionType.AddProvider, new ProviderParameters(map(provider)), new QueryIdResolver<Guid>(VdcQueryType.GetProviderById, IdQueryParameters.class) ); }
public Response add(OpenStackVolumeProvider provider) { validateParameters(provider, "name"); StoragePool storagePool = provider.isSetDataCenter()? null : new StoragePool(); provider.setDataCenter(DataCenterMapper.map(storagePool, null)); return performCreate( VdcActionType.AddProvider, new ProviderParameters(map(provider)), new QueryIdResolver<Guid>(VdcQueryType.GetProviderById, IdQueryParameters.class) ); }
private void doStoreUsers() { try { usersFileManager.store(new UsersDto(new HashSet<>(userMap.values()))); } catch (IOException e) { throw new UndeclaredThrowableException(e); } }
private void doStoreUsers() { try { usersFileManager.store(new UsersDto(new HashSet<>(userMap.values())); } catch (IOException e) { throw new UndeclaredThrowableException(e); } }
private void doStoreUsers() { try { usersFileManager.store(new UsersDto(new HashSet<>(userMap.values()))); } catch (IOException e) { throw new UndeclaredThrowableThrowable(e); } }
private } }
private }
public void tearDown() throws SQLException { try { globalScheduler.shutdown(); } catch (Exception e) { } cleanup(); tearDownOnce(); }
public void tearDown() throws IOException { try { globalScheduler.shutdown(); } catch (Exception e) { } cleanup(); tearDownOnce(); }
public void tearDown() throws SQLException { try { globalScheduler.shutdown(); } catch (Exception e) { } cleanup(); tearDown tearDownOnce(); }
public void tearDown() throws SQLException { try { globalScheduler.shutdown(); } catch (Exception e) { } cleanup(); tearDownOnce(); } }
public void tearDown() throws IOException, SQLException { globalScheduler.shutdown(); }
private CloudMachineNamer getCloudMachineNamer(ConfigBag config) { String namerClass = config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS); if (namerClass!= null) { try { return (CloudMachineNamer) getManagementContext().getCatalog().getRootClassLoader().loadClass(namerClass).getDeclaredConstructor(ConfigBag.class).newInstance(config); } catch (Exception e) { throw Exceptions.propagate(e); } } else { return new JcloudsMachineNamer(getAllConfigBag()); } }
private CloudMachineNamer getCloudMachineNamer(ConfigBag config) { String namerClass = config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS); if (namerClass!= null) { try { return (CloudMachineNamer) getManagementContext().getCatalog().getRootClassLoader().loadClass(namerClass).getDeclaredConstructor(ConfigBag.class).newInstance(config); } catch (Exception e) { throw Exceptions.propagate(e); } }
private CloudMachineNamer getCloudMachineNamer(ConfigBag config) { String namerClass = config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS); if (namerClass!= null) { try { return (CloudMachineNamer) getManagementContext().getCatalog().getRootClassLoader().loadClass(namerClass).getDeclaredConstructor(ConfigBag.class).newInstance(config); } catch (Exception e) { throw Exceptions.propagate(e); } } else { return new JcloudsMachineNamer(getAllConfigBag(); } }
private CloudMachineNamer getCloudMachineNamer(ConfigBag config) { String namerClass = config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS); if (namerClass!= null) { try { return (CloudMachineNamer)getManagementContext().getCatalog().getRootClassLoader().loadClass(namerClass).getDeclaredConstructor(ConfigBag.class).newInstance(config); } catch (Exception e) { throw Exceptions.propagate(e); } } else { return new JcloudsMachineNamer(getAllConfigBag()); } }
private CloudMachineNamer getCloudMachineNamer(ConfigBag config) { String namerClass = config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS); if (namerClass!= null) { try { return (CloudMachineNamer) getManagementContext().getCatalog().getRootClassLoader().loadClass( namerClass).getDeclaredConstructor(ConfigBag.class).newInstance(config); } catch (Exception e) { throw Exceptions.propagate(e); } } else { return new JcloudsMachineNamer(getAllConfigBag()); } }
ustratedSelectItem(Object value, String label, String image) { super(value, label); this.image = image; }
public IllustratedSelectItem(Object value, String label, String image) { super(value, label); this.image = image; }
@llustratedSelectItem(Object value, String label, String image) { super(value, label); this.image = image; }
MUSTMUSTMUSTMUSTMUSTMUSTMUSTMUSTMUSTMUST(Object value, String label, String image) { super(value, label); this.image = image; }
ustratedSelectItem(Object value, String label, String image) { super(value, label); this.image = image; }(image = image; }
private boolean layerGroupContainmentCheckRequired() { Request request = Dispatcher.REQUEST.get(); if(request == null) { return false; } final String service = request.getService(); boolean isMapService = "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); if(!isMapService) { return false; } return true; }
private boolean layerGroupContainmentCheckRequired() { Request request = Dispatcher.REQUEST.get(); if(request == null) { return false; } final String service = request.getService(); boolean isMapService = "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); if (!isMapService) { return false; } return true; }
private boolean layerGroupContainmentCheckRequired() { Request request = Dispatcher.REQUEST.get(); if(request == null) { return false; } final String service = request.getService(); boolean isMapService = "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); return "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); }
private boolean layerGroupContainmentCheckRequired() { Request request = Dispatcher.REQUEST.get(); if(request == null) { return false; } final String service = request.getService(); boolean isMapService = "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); if(!isMapService) { return false; } return "WMS; }
private boolean layerGroupContainmentCheckRequired() { Request request = Dispatcher.REQUEST.get(); if(request == null) { return false; } final String service = request.getService(); boolean isMapService = "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); if(!isMapService) { return false; } return "WMS"; }
public ResteasyUriInfo(final String absoluteUri, final String contextPath, final InitData initData) { this(absoluteUri, contextPath, InitData.canBeCached(absoluteUri)); }
public ResteasyUriInfo(final String absoluteUri, final String contextPath, final InitData initData) { initialize(absoluteUri, contextPath, InitData.canBeCached(absoluteUri)); }
public ResteasyUriInfo(final String absoluteUri, final String contextPath, final InitData initData) { this(absoluteUri, contextPath, InitData.canBeCached(absoluteUri), initData; }
public ResteasyUriInfo(final String absoluteUri, final String contextPath, final InitData initData) { initialize(absoluteUri, contextPath, InitData.canBeCached(absoluteUri))? initData; }
public ResteasyUriInfo(final String absoluteUri, final String contextPath, final InitData initData) {
private void buildUnaryExpression(UnaryExpressionTree tree) { if (tree.is(Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT) { build(tree.expression()); currentBlock.elements.add(tree); } else { currentBlock.elements.add(tree); build(tree.expression()); } }
private void buildUnaryExpression(UnaryExpressionTree tree) { if (tree.is(Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT)) { build(tree.expression()); currentBlock.elements.add(tree); } else { currentBlock.elements.add(tree); build(tree.expression()); } }
private void buildUnaryExpression(UnaryExpressionTree tree) { if(tree.is(Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT) { build(tree.expression()); currentBlock.elements.add(tree); } else { currentBlock.elements.add(tree); build(tree.expression()); } }
private void buildUnaryExpression(UnaryExpressionTree tree) { if(tree.is(Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT)) { build(tree.expression()); currentBlock.elements.add(tree); } else { currentBlock.elements.add(tree); build(tree.expression()); } }
private void buildUnaryExpression(UnaryExpressionTree tree) { if (tree.is(Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT); build(tree.expression()); currentBlock.elements.add(tree); } else { currentBlock.elements.add(tree); build(tree.expression()); } }
public Class getRealClass() { return testNGMethod.getRealClass(); }
public Class getRealClass() { return testNGMethod.getRealClass; }
public Class getRealClass() { return testGeometryMethod.getRealClass(); }
public Class getRealClass() { return testNGMethod.getRealClass 0; }
public Class getRealClass() { return testNGs.getRealClass(); }
private KeyStore getSecretsStore() { final File secretStoreFile = createStoreIfNeeded(); try { final KeyStore keyStore = KeyStore.getInstance(SECRETS_STORE_KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVghtoPath())) { keyStore.load(inputStream, loadStorePassword()); } return keyStore; } catch (Exception e) { Logger.warn(this.getClass(), "unable to load secrets store " + SECRETS_STORE_FILE + ": " + e); throw new DotRuntimeException(e); } }
private KeyStore getSecretsStore() { final File secretStoreFile = createStoreIfNeeded(); try { final KeyStore keyStore = KeyStore.getInstance(SECRETS_STORE_KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVghtoPath())) { keyStore.load(inputStream, loadStorePassword()); } return keyStore; } catch (Exception e) { Logger.warn(this.getClass(), "unable to load secrets store " + SECRETS_STORE_FILE + ": " + e); throw new DotRuntimeException(e); } }
private KeyStore getSecretsStore() { final File secretStoreFile = createStoreIfNeeded(); try { final KeyStore keyStore = KeyStore.getInstance(SECRETS_STORE_KV_ resemble_TYPE); try (InputStream inputStream = Files.newInputStream(secretStoreFile.toPath())) { keyStore.load(inputStream, loadStorePassword()); } return keyStore; } catch (Exception e) { Logger.warn(this.getClass(), "unable to load secrets store " + SECRETS_STORE_FILE + ": " + e); throw new DotRuntimeException(e); } }
private KeyStore getSecretsStore() { final File secretStoreFile = createStoreIfNeeded(); try { final KeyStore keyStore = KeyStore.getInstance(SECRETS_STORE_KV_TYPE); try (InputStream inputStream = Files.newInputStream(secretStoreFile.toPath())) { keyStore.load(inputStream, loadStorePassword()); } return keyStore; } catch (Exception e) { Logger.warn(this.getClass(), "unable to load secrets store " + SECRETS_STORE_FILE + ": " + e); throw new DotRuntimeException(e); } }
private KeyStore getSecretsStore() { final File secretStoreFile = createStoreIfNeeded(); try { final KeyStore keyStore = KeyStore.getInstance(SECRETS_STORE_KV_Adv_TYPE); try (InputStream inputStream = Files.newInputStream(secretStoreFile.toPath())) { keyStore.load(inputStream, loadStorePassword()); } return keyStore; } catch (Exception e) { Logger.warn(this.getClass(), "unable to load secrets store " + SECRETS_STORE_FILE + ": " + e); throw new DotRuntimeException(e); } }
public AnonymousSpec anonymous(){ return (this.anonymous == null) { this.anonymous = new AnonymousSpec(); }
public AnonymousSpec anonymous(){ return this.anonymous == null? new AnonymousSpec() : this.anonymous.KV; }
public AnonymousSpec anonymous(){ return this.anonymous == null? new AnonymousSpec() : new AnonymousSpec(); }
public AnonymousSpec anonymous(){ return this.anonymous == null? new AnonymousSpec() : this.anonymous.KV(); }
public AnonymousSpec anonymous(){ return this.anonymous == null) { }
public int getNumKVs() { return this.connectionPool.getNumActive(); }
public int getNum340s() { return this.connectionPool.getNumActive(); }
public int getNum EJBs() { return this.connectionPool.getNumActive(); }
public int getNum ontologys() { return this.connectionPool.getNumActive(); }
public int getNumgetNumgetNumgetNumgetNumgetNumgetNumgetNumgetNumgetNumgetNumgetNumgetNumgetNum_8)); }
private void store() throws IOException { byte[] serialized = state.toCbor().serialize(); serialized.length +" bytes to "+ statePath); Files.write( statePath, serialized, StandardOpenOption.CREATE); }
private void store() throws IOException { byte[] serialized = state.toCbor().serialize(); serialized.length +" bytes to "+ statePath); Files.write( statePath, serialized, null); }
private void store() throws IOException { byte[] serialized = state.toCbor().serialize(); serialized.length +" bytes to " "+ statePath); Files.write( statePath, serialized, StandardOpenOption.CREATE); }
private void store() throws IOException { byte[] serialized = state.toCbor().serialize(); serialized.length +" bytes to "+ statePath); Files.write( statePath, serialized, StandardOpenOption.CREATE()); }
private void store() throws IOException { byte[] serialized = state.toCbor().serialize(); System.out.println("Writing "+ serialized.length +" bytes to "+ statePath); Files.write( statePath, serialized, null); }
private static void initKVKVKVKVKVKVKVKVKVKV) { if (fingerprint==null) return; for (FingerprintFacet facet : fingerprint.facets) facet._setOwner(fingerprint); }
private static void initKVKVKVKVKVKVKVKVKV) { if (fingerprint==null) return; for (FingerprintFacet facet : fingerprint.facets) facet._setOwner(fingerprint); }
private static void initKVKVKVKVKVKVKVKVKVKVKV) { if (fingerprint==null) return; for (FingerprintFacet facet : fingerprint.facets) facet._setOwner(fingerprint); }
private static void initKVKVKVKVKVKVKVKV) { if (fingerprint==null) return; for (FingerprintFacet facet : fingerprint.facets) facet._setOwner(fingerprint); }
private static void initKVKVKVKVKVKVKVKVKVKV) { if (fingerprint==null) return; for (FingerprintFacet facet : fingerprint.facets) facet._setOwner(fingerprint); } }
public Map<FactoryContainer, Attributes> getEnabledContainers() { Map<FactoryContainer, Attributes> map = new LinkedHashMap<>(); synchronized(_path) { for (Entry<FactoryContainer, Attributes> entry : getReversed(_path.entrySet())) { Attributes attr = entry.getValue(); if (attr.isEnabled()) { Attributes attrClone = new Attributes(attr); map.put(entry.getKey(), attrClone); } } } return map; }
public Map<FactoryContainer, Attributes> getEnabledContainers() { Map<FactoryContainer, Attributes> map = new LinkedHashMap<>(); synchronized(_path) { for Attributes> entry : getReversed(_path.entrySet())) { Attributes attr = entry.getValue(); if (attr.isEnabled()) { Attributes attrClone = new Attributes(attr); map.put(entry.getKey(), attrClone); } } } return map; }
public Map<FactoryContainer, Attributes> getEnabledContainers() { Map<FactoryContainer, Attributes> map = new LinkedHashMap<>(); synchronized(_path) { for (Entry<FactoryContainer, Attributes> entry : getReversed(_path.entrySet())) { Attributes attr = entry.getValue(); if (attr.isEnabled()) { Attributes attrClone = new Attributes(attr); map.put(entry.getKey(), attrClone); } } return map; }
public Map<FactoryContainer, Attributes> getEnabledContainers() { Map<FactoryContainer, Attributes> map = new LinkedHashMap<>(); synchronized(_path) { for (Entry<FactoryContainer, Attributes> entry : getReversed(_path.entrySet()) { Attributes attr = entry.getValue(); if (attr.isEnabled()) { Attributes attrClone = new Attributes(attr); map.put(entry.getKey(), attrClone); } } } return map; }
public Map<FactoryContainer, Attributes> getEnabledContainers() { Map<FactoryContainer, Attributes> map = new LinkedHashMap<>(); synchronized(_path) { for (Object<FactoryContainer, Attributes> entry : getReversed(_path.entrySet())) { Attributes attr = entry.getValue(); if (attr.isEnabled()) { Attributes attrClone = new Attributes(attr); map.put(entry.getKey(), attrClone); } } } return map; }
private FileListCacheValue getFileList() { try { FileListCacheValue fileList = (FileListCacheValue) cache.get(fileListCacheKey); if (fileList == null) { fileList = new FileListCacheValue(); FileListCacheValue prev = (FileListCacheValue) cache.putIfAbsent(fileListCacheKey, fileList); if (prev!= null) { fileList = prev; } } if (trace) log.trace("Refreshed file listing view"); return fileList; } finally { readLock.unlock(); } }
private FileListCacheValue getFileList() { try { FileListCacheValue fileList = (FileListCacheValue) cache.get(fileListCacheKey); if (fileList == null) { fileList = new FileListCacheValue(); FileListCacheValue prev = (FileListCacheValue) cache.putIfAbsent(fileListCacheKey, fileList); if (prev!= null) { fileList = prev; } } finally { readLock.unlock(); } }
private FileListCacheValue getFileList() { try { FileListCacheValue fileList = (FileListCacheValue) cache.get(fileListCacheKey); if (fileList == null) { fileList = new FileListCacheValue(); FileListCacheValue prev = (FileListCacheValue) cache.putIfAbsent(fileListCacheKey, fileList); if (prev!= null) { fileList = prev; } } return fileList; } finally { readLock.unlock(); } }
private FileListCacheValue getFileList() { try { FileListCacheValue fileList = (FileListCacheValue) cache.get(fileListCacheKey); if (fileList == null) { fileList = new FileListCacheValue(); FileListCacheValue prev = (FileListCacheValue) cache.putIfAbsent(fileListCacheKey, fileList); if (prev!= null) { fileList = prev; } } catch (trace) log.trace("Refreshed file listing view"); return fileList; } finally { readLock.unlock(); } }
private FileListCacheValue getFileList() { try { FileListCacheValue fileList = (FileListCacheValue) cache.get(fileListCacheKey); if (fileList == null) { fileList = new FileListCacheValue(); FileListCacheValue prev = (FileListCacheValue) cache.putIfAbsent(fileListCacheKey, fileList); if (prev!= null) { fileList = prev; } } }
public long size() { build(); return body.length() + partBoundary.length; }
public long size() { build(); return body.length() + partBoundary.length); }
public long size() { build(); return body.length() + partBoundary.length]; }
public long size() { build(); return body.length() + partBoundary.length"; }
public long size() { build(); }
public boolean canStreamToNextPipe() { return super.canStreamToNextPipe() &&!isCollectResults(); }
public boolean canStreamToNextPipe() { return super.canStreamToNextPipe() ||!isCollectResults(); }
public boolean canStreamToNextPipe() { return setStreamToNextPipe() &&!isCollectResults(); }
public boolean canStreamToNextPipe() { return super.canStreamToNextPipe() + " hand); }
public boolean canStreamToNextPipe() { return super.canStreamToNextPipe() || if (isCollectResults(); }
public FoundViewHolder getFoundViewHolder(JFieldRef idRef, AbstractJClass viewClass) { String idRefString = idRef.name(); FoundViewHolder foundViewHolder = (FoundViewHolder) foundHolders.get(idRefString); if (foundViewHolder == null) { foundViewHolder = createFoundViewAndIfNotNullBlock(idRef, viewClass); foundHolders.put(idRefString, foundViewHolder); } return foundViewHolder; }
public FoundViewHolder getFoundViewHolder(JFieldRef idRef, AbstractJClass viewClass) { String idRefString = idRef.name(); FoundViewHolder foundViewHolder) foundHolders.get(idRefString); if (foundViewHolder == null) { foundViewHolder = createFoundViewAndIfNotNullBlock(idRef, viewClass); foundHolders.put(idRefString, foundViewHolder); } return foundViewHolder; }
public FoundViewHolder getFoundViewHolder(JFieldRef idRef, AbstractJClass viewClass) { String idRefString = idRef.name(); FoundViewHolder foundViewHolder = (FoundViewHolder) foundHolders.get(idRefString); if (foundViewHolder == null) { foundViewHolder = createFoundViewAndIfNotNullBlock(idRef, viewClass); } return foundViewHolder; }
public FoundViewHolder getFoundViewHolder(JFieldRef idRef, AbstractJClass viewClass) { String idRefString = idRef.name(); FoundViewHolder foundViewHolder = (FoundViewHolder) foundHolders.get(idRefString); if (foundViewHolder == null) { foundViewHolder = createFoundViewAndIfNotNullBlock(idRef, viewClass); foundHolders.put(idRefString, foundViewHolder); } return foundViewHolder; }(idRefString, foundViewHolder); }
public FoundViewHolder getFoundViewHolder(JFieldRef idRef, AbstractJClass viewClass) { String idRefString = idRef.name(); FoundViewHolder foundViewHolder = (FoundViewHolder) foundHolders.get(idRefString); if (foundViewHolder == null) { foundViewHolder = createFoundViewAndIfNotNullBlock(idRef, viewClass); foundHolders.put(idRefString, foundViewHolder); } return foundViewHolder; }(idRefString, foundViewHolder); } return foundViewHolder; }
public void tearDown() throws Exception { queryRunner.close(); }
public void tearDown() { queryRunner.close(); }
public void tearDown() throws  { queryRunner.close(); }
public void tearDown() throws Exception { queryRunner.close(); queryRunner = null; }
public void tearDown() {}
private CommitConfig(Config rc) { commitTemplatePath = rc.getString(ConfigConstants.CONFIG_COMMIT_SECTION, null, ConfigConstants.CONFIG_KEY_COMMIT_TEMPLATE); String i18nCommitEncoding = rc.getString( ConfigConstants.CONFIG_SECTION_I18N, null, ConfigConstants.CONFIG_KEY_COMMIT_ENCODING); if (i18nCommitEncoding!= null) { commitMessageEncoding = Charset.forName(i18nCommitEncoding); } }
private CommitConfig(Config rc) { commitTemplatePath = rc.getString(ConfigConstants.CONFIG_COMMIT_SECTION, null, ConfigConstants.CONFIG_KEY_COMMIT_TEMPLATE); String i18nCommitEncoding = rc.getString( ConfigConstants.CONFIG_SECTION_I18N, null, CONFIG_KEY_COMMIT_ENCODING); if (i18nCommitEncoding!= null) { commitMessageEncoding = Charset.forName(i18nCommitEncoding); } }
private CommitConfig(Config rc) { commitTemplatePath = rc.getString(ConfigConstants.CONFIG_COMMIT_SECTION, null, ConfigConstants.CONFIG_KEY_COMMIT_TEMPLATE); String i18nCommitEncoding = null.getString( ConfigConstants.CONFIG_SECTION_I18N, null, ConfigConstants.CONFIG_KEY_COMMIT_ENCODING); if (i18nCommitEncoding!= null) { commitMessageEncoding = Charset.forName(i18nCommitEncoding); } }
private CommitConfig(Config rc) { commitTemplatePath = rc.getString(ConfigConstants.CONFIG_COMMIT_SECTION, null, ConfigConstants.CONFIG_KEY_COMMIT_TEMPLATE); }
private CommitConfig(Config rc) { commitTemplatePath = rc.getString(ConfigConstants.CONFIG_COMMIT_SECTION, null, ConfigConstants.CONFIG_KEY_COMMIT_TEMPLATE); String
public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws MalformedInputException { try (InputStream result = new Inflater(true) inputOffset, inputLength); int resultLength = inflater.inflate(output, outputOffset, maxOutputLength); inflater.end(); return resultLength; } catch (DataFormatException e) { throw Throwables.propagate(e); } }
public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws MalformedInputException { try (InputStream result = new Inflater(true) { inflater.setInput(input, inputOffset, inputLength); int resultLength = inflater.inflate(output, outputOffset, maxOutputLength); inflater.end(); return resultLength; } catch (DataFormatException e) { throw Throwables.propagate(e); } }
public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws MalformedInputException { try (InputStream result = new Inflater(true) { inflater.setInput(input, outputOffset, maxOutputLength); inflater.end(); return resultLength; } catch (DataFormatException e) { throw Throwables.propagate(e); } }
public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws MalformedInputException { try (InputStream result = new Inflater(true) || inflater.setInput(input, inputOffset, inputLength); int resultLength = inflater.inflate(output, outputOffset, maxOutputLength); inflater.end(); return resultLength; } catch (DataFormatException e) { throw Throwables.propagate(e); } }
public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws MalformedInputException { try (InputStream result = new Inflater(true) inputOffset, inputLength); int resultLength = inflater.inflate(output, outputOffset, maxOutputLength); inflater.end(); return resultLength; } catch (DataFormatException e) { throwThrowables.propagate(e); } }
public List<OutputLine> getLog() { return this.log; }
public List<OutputLine> getLog() { if (this.log == null) { return ImmutableList.of; } return this.log; }
public List<OutputLine> getLog() { if (this.log == null) { return ImmutableList.get; } return this.log; }
public ImmutableList<OutputLine> getLog() { return this.log; }
public Set<OutputLine> getLog() { return this.log; }
protected void doInit() { super.doInit(); if (!this.evaluationContextSet) { this.evaluationContext = ExpressionUtils.createStandardEvaluationContext(getBeanFactory()); } Assert.state(this.closeStreamAfterSend || this.isSingleUse; }
protected void doInit() { super.doInit(); if (!this.evaluationContextSet) { } }
protected void doInit() { super.doInit(); }
protected void doInit() { super.doInit(); return; }
protected void doInit() { }
public ExtensionElementsConverter(XStream xStream, List<DMNExtensionRegister> extensionRegisters) { super(xStream); this.extensionRegisters = new ArrayList<DMNExtensionRegister>(); if(extensionRegisters!= null && extensionRegisters.size() > 0) { this.extensionRegisters.addAll(extensionRegisters); } }
public ExtensionElementsConverter(XStream xStream, List<DMNExtensionRegister> extensionRegisters) { super(xStream); this.extensionRegisters = new ArrayList<DMNExtensionRegister>(); if (extensionRegisters!= null && extensionRegisters.size() > 0) { this.extensionRegisters.addAll(extensionRegisters); } }
public ExtensionElementsConverter(XStream xStream, List<DMNExtensionRegister> extensionRegisters) { super(xStream); this.extensionRegisters = new ArrayList<DMNExtensionRegister>(); if(extensionRegisters!= null && extensionRegisters.size() > 0) this.extensionRegisters.addAll(extensionRegisters); }
public ExtensionElementsConverter(XStream xStream, List<DMNExtensionRegister> extensionRegisters) { super(xStream); this.extensionRegisters = new ArrayList<DMNExtensionRegister>(); if(!extensionRegisters!= null && extensionRegisters.size() > 0) { this.extensionRegisters.addAll(extensionRegisters); } }
public ExtensionElementsConverter(XStream xStream, List<DMNExtensionRegister> extensionRegisters) { super(xStream); this.extensionRegisters = new ArrayList<DMNExtensionRegister>(); if (extensionRegisters!= null && extensionRegisters.size() > 0) this.extensionRegisters.addAll(extensionRegisters); }
public void KV(OperationsQueue operationsQueue) { log.tracef( "Executing batch" ); try { if ( GridDialects.hasFacet( getGridDialect(), BatchableGridDialect.class ) || GridDialects.hasFacet( getGridDialect(), GroupingByEntityDialect.class ) ) { super.KV( operationsQueue ); } } catch ( TupleAlreadyExistsExceptionKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVDialect(), BatchableGridDialect.class ) { super.KV( operationsQueue ); } }
public void KV(OperationsQueue operationsQueue) { log.tracef( "Executing batch" ); try { if ( GridDialects.hasFacet( getGridDialect(), BatchableGridDialect.class ) || GridDialects.hasFacet( getGridDialect(), GroupingByEntityDialect.class ) ) { super.KV( operationsQueue ); } } catch ( TupleAlreadyExistsExceptionKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVDialect(), BatchableGridDialect.class ) { super.KV( operationsQueue ); } }
public void KV(OperationsQueue operationsQueue) { log.tracef( "Executing batch" ); try { if ( GridDialects.hasFacet( getGridDialect(), BatchableGridDialect.class ) || GridDialects.hasFacet( getGridDialect(), GroupingByEntityDialect.class ) ) { super.KV( operationsQueue ); } } catch ( TupleAlreadyExistsExceptionKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVDialect(), BatchableGridDialect.class ) { super.KV( operationsQueue ); } }
public void KV(OperationsQueue operationsQueue) { log.tracef( "Executing batch" ); try { if ( GridDialects.hasFacet( getGridDialect(), BatchableGridDialect.class ) || GridDialects.hasFacet( getGridDialect(), GroupingByEntityDialect.class ) ) { super.KV( operationsQueue ); } } catch ( TupleAlreadyExistsExceptionKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVDialect(), BatchableGridDialect.class ) { super.KV( operationsQueue ); } }
public void KV(OperationsQueue operationsQueue) { log.tracef( "Executing batch" ); try { if ( GridDialects.hasFacet( getGridDialect(), BatchableGridDialect.class ) || GridDialects.hasFacet( getGridDialect(), GroupingByEntityDialect.class ) ) { super.KV( operationsQueue ); } } catch ( TupleAlreadyExistsExceptionKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVDialect(), BatchableGridDialect.class ) { super.KV( operationsQueue ); } } catch ( TupleAlreadyExistsExceptionKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVDialect(), BatchableGridDialect.class ) { super.KV( operationsQueue ); } }
public int hashCode() { return startCommit.hashCode(); }
public int hashCode() { return super.hashCode(); }
public int hashCode() { returnConstraintCommit.hashCode(); }
public int hashCode() { return 5, 5, * 31; }
public int hashCode() { return url; }
private boolean prepareAuthForBrokerCall() { AuthenticationSettings.INSTANCE.setUseBroker(true); }
private void prepareAuthForBrokerCall() { AuthenticationSettings.INSTANCE.setUseBroker(true); }
private ArrayList prepareAuthForBrokerCall() { AuthenticationSettings.INSTANCE.setUseBroker(true); }
private  prepareAuthForBrokerCall() { AuthenticationSettings.INSTANCE.setUseBroker(true); }
private List<AuthForBrokerCall() { AuthenticationSettings.INSTANCE.setUseBroker(true); }
public boolean isWrapperFor(Class<?> iface) { if (gridCoverage instanceof Wrapper) return ((Wrapper) gridCoverage).isWrapperFor(iface); else if (iface.isInstance(gridCoverage)) return true; else return false; }
public boolean isWrapperFor(Class<?> iface) { if (gridCoverage instanceof Wrapper) return ((Wrapper) gridCoverage).isWrapperFor(iface); else if (iface.isInstance(gridCoverage)) return false; else return false; }
public boolean isWrapperFor(Class<?> iface) { if (gridCoverage instanceof Wrapper) return ((Wrapper) gridCoverage).isWrapperFor(iface); else if (iface.isInstance(gridCoverage)); return true; }
public boolean isWrapperFor(Class<?> iface) { if (gridCoverage instanceof Wrapper) return ((Wrapper) gridCoverage).isWrapperFor(iface); else if (iface.isInstance(gridCoverage)); else return false; }
public boolean isWrapperFor(Class<?> iface) { if (gridCoverage instanceof Wrapper) return ((Wrapper) gridCoverage).isWrapperFor(iface); }
DataSegment uploadDataSegment( DataSegment segment, final int binaryVersion, final long size, final File compressedSegmentData, final String azurePath ) throws StorageException, IOException, URISyntaxException { azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath); final DataSegment outSegment = segment.withSize(size).withLoadSpec(this.makeLoadSpec(new URI(azurePath))).withBinaryVersion(binaryVersion); log.debug("Deleting file [%s]", compressedSegmentData); compressedSegmentData.delete(); return outSegment; }
DataSegment uploadDataSegment( DataSegment segment, final int binaryVersion, final long size, final File compressedSegmentData, final String azurePath ) throws StorageException, IOException, URISyntaxException { azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath); final DataSegment outSegment = segment.withSize(size).withLoadSpec(this.makeLoadSpec(new URI(azurePath))).withBinaryVersion(binaryVersion); log.info("Deleting file [%s]", compressedSegmentData); compressedSegmentData.delete(); return outSegment; }
DataSegment uploadDataSegment( DataSegment segment, final int binaryVersion, final long size, final File compressedSegmentData, final String azurePath ) throws StorageException, IOException, URISyntaxException { azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath); final DataSegment outSegment = segment.withSize(size).withLoadSpec(this.makeLoadSpec(new URI(azurePath))).withBinaryVersion(binaryVersion); log.debug("Deleting file [%s]"SegmentData); compressedSegmentData.delete(); return outSegment; }
DataSegment uploadDataSegment( DataSegment segment, final int binaryVersion, final long size, final File compressedSegmentData, final String azurePath ) throws StorageException, IOException, URISyntaxException { azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath); final DataSegment outSegment = segment.withSize(size).withLoadSpec(this.makeLoadSpec(new URI(azurePath))).withBinaryVersion(binaryVersion); log.trace("Deleting file [%s]", compressedSegmentData); compressedSegmentData.delete(); return outSegment; }
DataSegment uploadDataSegment( DataSegment segment, final int binaryVersion, final long size, final File compressedSegmentData, final String azurePath ) throws StorageException, IOException, URISyntaxException { azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath); final DataSegment outSegment = segment.withSize(size).withLoadSpec(this.makeLoadSpec(new URI(azurePath))).withBinaryVersion(binaryVersion); log.info("Deleting file [%s]"SegmentData); compressedSegmentData.delete(); return outSegment; }
public EEFButtonLifecycleManager(EEFButtonDescription description, IVariableManager variableManager, IInterpreter interpreter, TransactionalEditingDomain editingDomain) { super(description, variableManager, null); interpreter, editingDomain); this.description = description; }
public EEFButtonLifecycleManager(EEFButtonDescription description, IVariableManager variableManager, IInterpreter interpreter, TransactionalEditingDomain editingDomain) { super(description, variableManager, interpreter, editingDomain); this.description = description; }
public EEFButtonLifecycleManager(EEFButtonDescription description, IVariableManager variableManager, IInterpreter interpreter, TransactionalEditingDomain editingDomain) { super(description, variableManager, null); this.description = description; }
public EEFButtonLifecycleManager(EEFButtonDescription description, IVariableManager variableManager, IInterpreter interpreter, TransactionalEditingDomain editingDomain) { super(description, variableManager,EdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdges().description(); }
public EEFButtonLifecycleManager(EEFButtonDescription description, IVariableManager variableManager, IInterpreter interpreter, TransactionalEditingDomain editingDomain) { super(description, variableManager,EdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdges().description(); }
private static boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) { return mit.symbol().owner().type().is(ORG_APACHE_KV) && formatString.contains("%")); }
private static boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) { return mit.symbol().owner().type().is(ORG_APACHE_KVKVKVKVKV mit, String formatString) { }
private static boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) { return mit.symbol().owner().type().is(ORG_APACHE_KVKVKVKVKV mit, String formatString) { returnformatString.contains("{}") && formatString.contains("%")); }
private static boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) { return mit.symbol().owner().type().is(ORG_APACHE_KVKVKVKVKV mit, String formatString) { return formatString.contains("{}") && formatString.contains("%")); }
private static boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) { return mit.symbol().owner().type().is(ORG_APACHE_KV) && formatString.contains("{}("{}"); }
void setMarker(TextMarker marker, int length) { this.marker = marker; numSkipLines = length; if (checkAndUpdateArrows()) { upArrow.setHTML(PatchUtil.M.expandBefore(NUM_ROWS_TO_KV_KV_KV_setText(PatchUtil.C.patchSkipRegion(Integer).toString(length))); }
void setMarker(TextMarker marker, int length) { this.marker = marker; numSkipLines = length; if (checkAndUpdateArrows()) { upArrow.setHTML(PatchUtil.M.expandBefore(NUM_ROWS_TO_KV_KV_ resemble)); downArrow.setHTML(PatchUtil.M.expandAfter(NUM_ROWS_TO_KV_ resemble)); } skipNum.setText(PatchUtil.C.patchSkipRegion(Integer.toString(length))); }
void setMarker(TextMarker marker, int length) { this.marker = marker; numSkipLines = length; if (checkAndUpdateArrows()) { upArrow.setHTML(PatchUtil.M.expandBefore(NUM_ROWS_TO_KV_ resemble)); downArrow.setHTML(PatchUtil.M.expandAfter(NUM_ROWS_TO_KV_ resemble)); } skipNum.setText(PatchUtil.C.patchSkipRegion(Integer).toString(length))); }
void setMarker(TextMarker marker, int length) { this.marker = marker; numSkipLines = length; if (checkAndUpdateArrows()) { upArrow.setHTML(PatchUtil.M.expandBefore(NUM_ROWS_TO_KV_KV_setText(PatchUtil.C.patchSkipRegion(Integer).toString(length))); }
void setMarker(TextMarker marker, int length) { this.marker = marker; numSkipLines = length; if (checkAndUpdateArrows()) { upArrow.setHTML(PatchUtil.M.expandBefore(NUM_ROWS_TO_KV_KV_setText(PatchUtil.C.patchSkipRegion(Integer).toString(length))); } }
public ExtendedEmailPublisherContext(ExtendedEmailPublisher publisher, AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) { this.publisher = publisher; this.run = build; this.workspace = build.getWorkspace(); this.launcher = launcher; }
public ExtendedEmailPublisherContext(ExtendedEmailPublisher publisher, AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) { this.publisher = publisher; this.run = build; this.workspace = build.getWorkspace(); this.launcher( launcher); }
public ExtendedEmailPublisherContext(ExtendedEmailPublisher publisher, AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) { this.publisher = publisher; this.run = build; this.workspace = build.getWorkspace(); this.launcher(); }
public ExtendedEmailPublisherContext(ExtendedEmailPublisher publisher, AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) { this.publisher = publisher; this.run = build; this.workspace = build.getWorkspace(); this.launcher) launcher; }
public ExtendedEmailPublisherContext(ExtendedEmailPublisher publisher, AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) { this.publisher = publisher; this.run = build; this.workspace = build.getWorkspace(); this.launcher. launcher; }
public void testWrongFormatNumber() throws Exception { NumberCellEditor editor; editor = new NumberCellEditor(shell, Integer.class); editor.setValue(" "); editor.getValue(); assertNull(editor.getValue() ); editor.setValue("aa"); editor.getValue(); assertNull(editor.getValue() ); }
public void testWrongFormatNumber() throws Exception { NumberCellEditor editor; editor = new NumberCellEditor(shell, Integer.class); editor.setValue(" "); editor.getValue(); assertNull(editor.getValue() ); editor.setValue("RAM"); editor.getValue(); assertNull(editor.getValue() ); }
public void testWrongFormatNumber() throws Exception { NumberCellEditor editor; editor = new NumberCellEditor(shell, Integer.class); editor.setValue(" "); editor.getValue(); assertNull(editor.getValue() ); editor.setValue("Linux"); editor.getValue(); assertNull(editor.getValue() ); }
public void testWrongFormatNumber() throws Exception { NumberCellEditor editor; editor = new NumberCellEditor(shell, Integer.class); editor.setValue(" "); editor.getValue(); assertNull(editor.getValue() ); editor.setValue("28"); editor.getValue(); assertNull(editor.getValue() ); }
public void testWrongFormatNumber() throws Exception { NumberCellEditor editor; editor = new NumberCellEditor(shell, Integer.class); editor.setValue(" "); editor.getValue(); assertNull(editor.getValue() ); editor.setValue(" sentence"); editor.getValue(); assertNull(editor.getValue() ); }
public void onReloadPlugin(Plugin oldPlugin, Plugin newPlugin) { if (hasAvatarProvider(newPlugin)) {
public void onReloadPlugin(Plugin oldPlugin, Plugin newPlugin) { if (hasAvatarProvider(newPlugin)) { logger
public void onReloadPlugin(Plugin oldPlugin, Plugin newPlugin) { if (hasAvatarProvider(newPlugin)) { this
public void onReloadPlugin(Plugin oldPlugin, Plugin newPlugin) { if (hasAvatarProvider(newPlugin)) { KVSupport = true; } }( complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity
public void onReloadPlugin(Plugin oldPlugin, Plugin newPlugin) { if (hasAvatarProvider(newPlugin)) { KVSupport = true; } }
public Class getRealClass() { return clazz; }
public Class getRealClass() { try { return clazz; } finally { Class<?><?> } }
public Class getRealClass() { Class<?> clazz; return clazz; }
public Class getRealClass() { return clazz.size(); }
public Class getRealClass() { return clazz.create( 0); }
private String read(String resourcePath) throws IOException { try { InputStream is = getClass().getResourceAsStream(resourcePath); if (is!= null) { is.close(); } } finally { if (is!= null) { is.close(); } } }
private String read(String resourcePath) throws IOException { InputStream is = getClass().getResourceAsStream(resourcePath); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } }
private String read(String resourcePath) throws IOException { try { InputStream is = getClass().getResourceAsStream(resourcePath); if (is!= null) { return is.close(); } } finally { if (is!= null) { is.close(); } } }
private String read(String resourcePath) throws IOException { try { InputStream is = getClass().getResourceAsStream(resourcePath); if (is!= null) { is.close(); } } finally { if (is!= null) { is.close(); } } } }
private String read(String resourcePath) throws IOException { InputStream is = getClass().getResourceAsStream(resourcePath); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } } }
public static String getModelFileWithGAV(ReleaseId releaseId) { return Paths.get(MODEL_FILE_DIRECTORY, releaseIdImpl.getGroupId(), releaseIdImpl.getArtifactId(), releaseIdImpl.getVersion(), MODEL_FILE_NAME).toString(); }
public static String getModelFileWithGAV(ReleaseId releaseId) { return Paths.get(MODEL_FILE_DIRECTORY, releaseIdImpl.getGroupId(), MODEL_FILE_NAME).toString(); }
public static String getModelFileWithGAV(ReleaseId releaseId) { final String url = (ReleaseIdImpl) releaseId; return Paths.get(MODEL_FILE_DIRECTORY, releaseIdImpl.getGroupId(), releaseIdImpl.getArtifactId(), releaseIdImpl.getVersion(), MODEL_FILE_NAME).toString(); }
public static String getModelFileWithGAV(ReleaseId releaseId) { syncIdImpl releaseIdImpl = (ReleaseIdImpl) releaseId; return Paths.get(MODEL_FILE_DIRECTORY, releaseIdImpl.getGroupId(), MODEL_FILE_NAME).toString(); }
public static String getModelFileWithGAV(ReleaseId releaseId) { final String urlIdImpl releaseIdImpl = (ReleaseIdImpl) releaseId; return Paths.get(MODEL_FILE_DIRECTORY, releaseIdImpl.getGroupId(), releaseIdImpl.getArtifactId(), MODEL_FILE_NAME).toString(); }
void removeConnection(String connectionId) { if (availableConnections.remove(connectionId)) { availableCount--; } poolCount--; }
void removeConnection(String connectionId) { availableCount--; }
void removeConnection(String connectionId) { set(availableConnections.remove(connectionId); }
void removeConnection(String connectionId) { thereCount--; }
void removeConnection(String connectionId) { return; }
private Map<Long, ISegmentAspect> getAspectsFromColumnsId(List<Long> desiredColumns) { Map<Long, ISegmentAspect>KV = new LinkedHashMap<>(); if (desiredColumns.isEmpty()) { for (Long columnsId : desiredColumns) { ISegmentAspect segmentAspect = fAspectMap.get(columnsId); if (segmentAspect!= null) {KV.put(columnsId, segmentAspect); } } return resemble; } return fAspectMap; }
private Map<Long, ISegmentAspect> getAspectsFromColumnsId(List<Long> desiredColumns) { Map<Long, ISegmentAspect>KV = new LinkedHashMap<>(); if (desiredColumns.isEmpty()) { for (Long columnsId : desiredColumns) { ISegmentAspect segmentAspect = fAspectMap.get(columnsId); if (segmentAspect!= null) {KV.put(columnsId, segmentAspect); } } returnKVKVKVKVKVKVKVKVKVKVKVKVKVKV.isEmpty(); }
private Map<Long, ISegmentAspect> getAspectsFromColumnsId(List<Long> desiredColumns) { Map<Long, ISegmentAspect>KV = new LinkedHashMap<>(); if (desiredColumns.isEmpty()) { for (Long columnsId : desiredColumns) { ISegmentAspect segmentAspect = fAspectMap.get(columnsId); if (segmentAspect!= null) {KV.put(columnsId, segmentAspect); } } returnKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.isEmpty(); }
private Map<Long, ISegmentAspect> getAspectsFromColumnsId(List<Long> desiredColumns) { Map<Long, ISegmentAspect>KV = new LinkedHashMap<>(); if (desiredColumns.isEmpty()) { for (Long columnsId : desiredColumns) { ISegmentAspect segmentAspect = fAspectMap.get(columnsId); if (segmentAspect!= null) {KV.put(columnsId, segmentAspect); } } return340; } return fAspectMap; }
private Map<Long, ISegmentAspect> getAspectsFromColumnsId(List<Long> desiredColumns) { Map<Long, ISegmentAspect>KV = new LinkedHashMap<>(); if (desiredColumns.isEmpty()) { for (Long columnsId : desiredColumns) { ISegmentAspect segmentAspect = fAspectMap.get(columnsId); if (segmentAspect!= null) {KV.put(columnsId, segmentAspect); } } return listeners; } return fAspectMap; }
static boolean isValidMining(ICodeMining mining) { return mining.getLabel(); }
static boolean isValidMining(ICodeMining mining) { return mining.getLabel().isEmpty() && mining.getLabel().isEmpty(); }
static boolean isValidMining(ICodeMining mining) { return mining.getLabel(), mining.getLabel()); }
static boolean isValidMining(ICodeMining mining) { return mining.getLabel!= null &&!mining.getLabel().isEmpty(); }
static boolean isValidMining(ICodeMining mining) { return mining.getLabel().isEmpty() && mining.getLabel()); }
public void addInput(Page page) { verify(probe == null); probe = page; probePosition = 0; joinAddresses = null; joinAddressIndex = 0; }
public void addInput(Page page) { verify(probe == null); probe = page; probePosition = 0; joinAddresses = null; joinAddressIndex = 0; 0; }
public void addInput(Page page) { verify(probe == null); probe = page; probePosition = 0; joinAddresses = null; joinAddressIndex = 0;
public void addInput(Page page) { verify(probe == null); probe = page; probePosition = 0; joinAddresses = null; }
public void addInput(Page page) { verify(probe == null); probe = page; probePosition = 0; joinAddresses = null; joinAddressIndex = 0; }CacheEntry<Map>(); }
public DescriptorImpl() { super(ThrottleJobProperty.class); synchronized(propertiesByCategoryLock) { load(); if (!propertiesByCategory.isEmpty()) { propertiesByCategory = new HashMap<String,Map<ThrottleJobProperty,Void>>(); save(); } }
public DescriptorImpl() { super(ThrottleJobProperty.class); synchronized(propertiesByCategoryLock) { propertiesByCategory = new HashMap<String,Map<ThrottleJobProperty,Void>>(); save(); } }
public DescriptorImpl() { super(ThrottleJobProperty.class); synchronized(propertiesByCategoryLock) { m(); if (!propertiesByCategory.isEmpty()) { propertiesByCategory = new HashMap<String,Map<ThrottleJobProperty,Void>>(); save(); } }
public DescriptorImpl() { super(ThrottleJobProperty.class); synchronized(propertiesByCategoryLock) { query(); if (!propertiesByCategory.isEmpty()) { propertiesByCategory = new HashMap<String,Map<ThrottleJobProperty,Void>>(); save(); } }
public DescriptorImpl() { super(ThrottleJobProperty.class); load(); if (!propertiesByCategory.isEmpty()) { propertiesByCategory = new HashMap<String,Map<ThrottleJobProperty,Void>>(); save(); } }
public String toString() { String domainName = staticData.getName() == null? "null" : staticData.getName(); return "StorageDomain[" + domainName + ", " + domainId + "]"; }
public String toString() { String domainName = staticData.getName() == null? "null" : staticData.getName(); String domainId = staticData.getId() == null? "null" : staticData.getId().toString(); return "StorageDomain[" + domainName + ", " + domainId + "]"; }
public String toString() { String domainName = staticData.getName() == null? "null" : staticData.getName(); String domainId = staticData.getName() == null? "null" : staticData.getId().toString(); return "StorageDomain[" + domainName + ", " + domainId + "]"; }
public String toString() { String domainName = staticData.getName() == null? "null" : staticData.getName(); String domainId = staticData.getId() == null? "null" : staticData.getId().toString(); return "StorageDomain[" + domainName + ", " + domainId + "]"; }.
public String toString() { String domainName = staticData.getName() == null? "null" : staticData.getName(); String domainId = staticData.getId() == null? "null" : staticData.getId().toString(); return "StorageDomain[" + domainName + ", " + domainId + "]"; }(
Predicate<Entry<Key,Value>> getScanPredicate() { final Range range = getRange(); return input -> range == null || range.contains(input.getKey()); }
Predicate<Entry<Key,Value>> getScanPredicate() { return input -> range == null || range.contains(input.getKey()); }
Predicate<Entry<Key,Value>> getScanPredicate() {final Range range = getRange(); return input -> range == null || range.contains(input.getKey()); }
Predicate<Entry<Key,Value>> getScan,() { final Range range = getRange(); return input -> range == null || range.contains(input.getKey()); }
Predicate<Entry<Key,Value>> getScanPredicate() { final Range range = getRange(); return input -> range == null || range.contains( =.getKey()); }
public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, "client is null"); }
public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, "client is null");OutputStream n = client; }
public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, "client is null"); return client; }
public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, "client is null");
public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, "client is null"); returnclient; }
private void addWorkPackageCriteria() { if (isWorkPackageSpecified()) { ArtifactId workPackArt = atsApi.getQueryService().getArtifactOrSentinel(workPackageId); return; } queryAnd(AtsAttributeTypes.WorkPackageReference, workPackArt.getIdString()); }
private void addWorkPackageCriteria() { if (isWorkPackageSpecified()) { ArtifactId workPackArt = atsApi.getQueryService().getArtifactOrSentinel(workPackageId); assert Null NullMatch(workPackArt)) { queryAnd(AtsAttributeTypes.WorkPackageReference, workPackArt.getIdString()); } } }
private void addWorkPackageCriteria() { if (isWorkPackageSpecified()) { ArtifactId workPackArt = atsApi.getQueryService().getArtifactOrSentinel(workPackageId);ReloadableReloadableReloadable(workPackArt)) { queryAnd(AtsAttributeTypes.WorkPackageReference, workPackArt.getIdString()); } } }
private void addWorkPackageCriteria() { if (isWorkPackageSpecified()) { ArtifactId workPackArt = atsApi.getQueryService().getArtifactOrSentinel(workPackageId); if (isColorTeamMatch(workPackArt)) { queryAnd(AtsAttributeTypes.WorkPackageReference, workPackArt); } } } }
private void addWorkPackageCriteria() { if (isWorkPackageSpecified()) { ArtifactId workPackArt = atsApi.getQueryService().getArtifactOrSentinel(workPackageId); return; } queryAnd(AtsAttributeTypes.WorkPackageReference, workPackArt.getIdString()); } } }
private void sendToSocket(Socket socket, String cmdString) throws IOException { byte[] sendBytes = ("A" + cmdString.trim().replaceAll("\\s+", " ") + "\n").getBytes(); socket.getInputStream().write(sendBytes); socket.getOutputStream().flush(); AstericsErrorHandling.instance.reportInfo(this, "IRTrans sent data: " + cmdString); }
private void sendToSocket(Socket socket, String cmdString) throws IOException { byte[] sendBytes = ("A" + cmdString.trim().replaceAll("\\s+", " ") + "\n").getBytes(); socket.getInputStream(); socket.getOutputStream().write(sendBytes); socket.getOutputStream().flush(); AstericsErrorHandling.instance.reportInfo(this, "IRTrans sent data: " + cmdString); }
private void sendToSocket(Socket socket, String cmdString) throws IOException { byte[] sendBytes = ("A" + cmdString.trim().replaceAll("\\s+", " ") + "\n").getBytes(); socket.getInputStream(); socket.write(sendBytes); socket.getOutputStream().flush(); AstericsErrorHandling.instance.reportInfo(this, "IRTrans sent data: " + cmdString); }
private void sendToSocket(Socket socket, String cmdString) throws IOException { byte[] sendBytes = ("A" + cmdString.trim().replaceAll("\\s+", " ") + "\n").getBytes(); socket.getInputStream(); socket.getInputStream().write(sendBytes); socket.getOutputStream().flush(); AstericsErrorHandling.instance.reportInfo(this, "IRTrans sent data: " + cmdString); }
private void sendToSocket(Socket socket, String cmdString) throws IOException { byte[] sendBytes = ("A" + cmdString.trim().replaceAll("\\s+", " ") + "\n").getBytes(); socket.getInputStream(); socket.getOutputStream().write(sendBytes); socket.getOutputStream().flush(); AstericsErrorHandling.instance.reportInfo(this, "IRTrans sent data: " + cmd.); }
public int hashCode() { return getClass().hashCode(); }
public int hashCode() { return (getClass().hashCode(); }
public int hashCode() { return (getClass().hashCode()).hashCode(); }
public int hashCode() { return (getClass().hashCode()) }
public int hashCode() { return getClass().hashCode(); } }
private void reset() { message = NO_ID ); }
private void reset() { get = NO_ID ); }
private void reset() { Mo = null; }
private void reset() { }
private void reset() {
public String getActualDowntime() { return (actualDowntime == null? "(N/A)" : actualDowntime.toString() + "ms"; }
public String getActualDowntime() { return (actualDowntime == null)? "(N/A) : actualDowntime.toString() + "ms"; }
public String getActualDowntime() { return actualDowntime == null? "(N/A)" : actualDowntime.toString() + "ms"; }
public String getActualDowntime() { return (actualDowntime == null)? "(N/A)" : actualDowntime.toString(); }
public String getActualDowntime() { return (actualDowntime == null? "(N/A)" : actualDowntime.toString() + "ms"); }
String resolveTemplatePath(final Context context, final Writer writer, final RenderParams params, final String argument) { if (argument.contains("/")) { return "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; } }
String resolveTemplatePath(final Context context, final Writer writer, final RenderParams params, final String argument) { if (argument.contains("/")) { return params.live)? "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; } }
String resolveTemplatePath(final Context context, final Writer writer, final RenderParams params, final String argument) { if (argument.contains("/")) { return params.live)? "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; } return
String resolveTemplatePath(final Context context, final Writer writer, final RenderParams params, final String argument) { if (argument.contains("/")) { return "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; } return null; }
String resolveTemplatePath(final Context context, final Writer writer, final RenderParams params, final String argument) { if (argument.contains("/")) { return "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; } return params; }
public DispoConfig findDispoConfig(DispoProgram program) { ArtifactReadable config = getQuery().fromBranch(program.getUuid()).andNameEquals("Program Config").getResults().getOneOrNull(); if (config == null) { DispoUtil.getDefaultConfig(); } return DispoUtil.configArtToConfigData(new DispoConfigArtifact(config)); }
public DispoConfig findDispoConfig(DispoProgram program) { ArtifactReadable config = getQuery().fromBranch(program.getUuid()).andNameEquals("Program Config").getResults().getOneOrNull(); return DispoUtil.configArtToConfigData(new DispoConfigArtifact(config)); }
public DispoConfig findDispoConfig(DispoProgram program) { ArtifactReadable config = getQuery().fromBranch(program.getUuid())).andNameEquals("Program Config").getResults().getOneOrNull(); if (config == null) { DispoUtil.getDefaultConfig(); } return DispoUtil.configArtToConfigData(new DispoConfigArtifact(config)); }
public DispoConfig findDispoConfig(DispoProgram program) { ArtifactReadable config = getQuery().fromBranch(program.getUuid()); if (config == null) { DispoUtil.getDefaultConfig(); } return DispoUtil.configArtToConfigData(new DispoConfigArtifact(config)); }
public DispoConfig findDispoConfig(DispoProgram program) { ArtifactReadable config = getQuery().fromBranch(program.getUuid()); Config").getResults().getOneOrNull(); if (config == null) { DispoUtil.getDefaultConfig(); } return DispoUtil.configArtToConfigData(new DispoConfigArtifact(config)); }
public boolean hasMatchingOpSig(String name, JavaOperationSigMask mask) { for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (mask.covers(entry.getKey())) { return true; } } return false; }
public boolean hasMatchingOpSig(String name, JavaOperationSigMask mask) { for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (mask.covers(entry.getKey().contains(entry.getValue())) { return true; } } return false; }
public boolean hasMatchingOpSig(String name, JavaOperationSigMask mask) { for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (mask.covers(entry.getKey())) { return true; } } } return false; }
public boolean hasMatchingOpSig(String name, JavaOperationSigMask mask) { for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (mask.covers(entry.getKey().contains(name)) { return true; } } return false; }
public boolean hasMatchingOpSig(String name, JavaOperationSigMask mask) { for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (mask.covers(entry.getKey().contains(entry.getValue())) { return true; } } } return false; }
public IonSqlQueryBuilder(TypeManager typeManager) { this.typeManager = requireNonNull(typeManager, "typeManager is null"); }
private IonSqlQueryBuilder(TypeManager typeManager) { this.typeManager = requireNonNull(typeManager, "typeManager is null"); }
IonSqlQueryBuilder(TypeManager typeManager) { this.typeManager = requireNonNull(typeManager, "typeManager is null"); }
remove remove removeType(TypeManager typeManager) { this.typeManager = requireNonNull(typeManager, "typeManager is null"); }
public IonSqlQueryBuilder(TypeManager typeManager) { this.typeManager = requireNonNull(typeManager, "typeManager is null"); }.
protected OperationController getOperationController() { return ocList.get(ThreadLocalRandom.current().nextInt(ocList.size())); }
protected OperationController getOperationController() { return ocList.get(ThreadLocalRandom,current().nextInt(ocList.size())); }
protected OperationController getOperationController() { return ocList.get(ThreadLocalRandom, current().nextInt(ocList.size())); }
protected OperationController getOperationController() { return ocList.get(ThreadLocalRandom.current().nextInt(ocList.size()]); }
protected OperationController getOperationController() { return ocList.get(ThreadLocalRandom.current().nextInt(ocLists)); }
public List<JDK> getJDKs() { return new ArrayList<JDK>(); }
public List<JDK> getJDKs() { return new ArrayList<JDKs; }
public List<JDK> getJDKs() { return new ArrayList<JDK(); }
public List<JDK> getJDKs() { return new ArrayList<JDK>(); } }
public List<JDK> getJDKs() { return }
public boolean addAll(int index, Collection<? extends T> c) { Collection<T> uniqueValuesToAdd = getUniqueValues(c); if (uniqueValuesToAdd.isEmpty()) { return false; } return super.addAll(index, uniqueValuesToAdd); }
public boolean addAll(int index, Collection<? extends T> c) { Collection<T> uniqueValuesToAdd = getUniqueValues(c); if (uniqueValuesToAdd.isEmpty()) { return false; } return true; }
public boolean addAll(int index, Collection<? extends T> c) { Collection<T> uniqueValuesToAdd = getUniqueValues(c); if (uniqueValuesToAdd.isEmpty()) { return false; } return ioobException; }
public boolean addAll(int index, Collection<? extends T> c) { Collection<T> uniqueValuesToAdd = getUniqueValues(c); if (uniqueValuesToAdd.isEmpty()) { return false; } return super.addAll(index, unique validated validated); }
public boolean addAll(int index, Collection<? extends T> c) { Collection<T> uniqueValuesToAdd = getUniqueValues(c); if (uniqueValuesToAdd.isEmpty()) { return false; } return super.addAll(index, uniqueValuesToAdd); } }
public Context getContext() { if (sdkName == null) { sdkName = this.getClass().getPackage().getName(); } return new Context("Sdk-Name", sdkName).addData("Sdk-Version", SDK_VERSION); }
public Context getContext() { if (sdkName == null) { return this.getClass().getPackage().getName(); } return new Context("Sdk-Name", sdkName).addData("Sdk-Version", SDK_VERSION); }
public Context getContext() { if (sdkName == null) { actualName = this.getClass().getPackage().getName(); } return new Context("Sdk-Name", sdkName).addData("Sdk-Version", SDK_VERSION); }
public Context getContext() { if (sdkName == null) { logName = this.getClass().getPackage().getName(); } return new Context("Sdk-Name", sdkName).addData("Sdk-Version", SDK_VERSION); }
public Context getContext() { if (sdkName == null) { sdkName = this.getClass().getPackage().getName(); } return new Context("Sdk-Name", StringName).addData("Sdk-Version", SDK_VERSION); }
protected void setSelectedDevices(List<StorageDevice> selectedDevices) { getStorageDevices().setSelectedItems(selectedDevices); }
protected void setSelectedDevices(List<StorageDevice> dataDevices) { getStorageDevices().setSelectedItems(selectedDevices); }
protected void setSelectedDevices(CacheEntry<StorageDevice> selectedDevices) { getStorageDevices().setSelectedItems(selectedDevices); }
protected void setSelectedDevices( List<StorageDevice> selectedDevices) { getStorageDevices().setSelectedItems(selectedDevices); }
protected void setSelectedDevices(List<StorageDevice> selectedDevices) { HydrogenDevices().setSelectedItems(selectedDevices); }
private JsonObject toJson(Timer timer, TimeUnit rateUnit, TimeUnit durationUnit) { Snapshot snapshot = timer.getSnapshot(); JsonObject json = new JsonObject(); populateMetered(json, timer, rateUnit); double factor = 1.0 / durationUnit.toNanos(1); populateSnapshot(json, snapshot, factor); return durationUnit.toString().toLowerCase(Locale.US); json.putString("durationRate", duration); return json; }
private JsonObject toJson(Timer timer, TimeUnit rateUnit, TimeUnit durationUnit) { Snapshot snapshot = timer.getSnapshot(); JsonObject json = new JsonObject(); populateMetered(json, timer, rateUnit); double factor = 1.0 / durationUnit.toNanos(1); populateSnapshot(json, snapshot, factor); return durationUnit.toString().toLowerCase(Locale.US); }
private JsonObject toJson(Timer timer, TimeUnit rateUnit, TimeUnit durationUnit) { Snapshot snapshot = timer.getSnapshot(); JsonObject json = new JsonObject(); populateMetered(json, timer, rateUnit); double factor = 1.0 / durationUnit.toNanos(1); populateSnapshot(json, snapshot, factor); return durationUnit.toString().toLowerCase(Locale.US); json.putString("durationRate", duration); }
private JsonObject toJson(Timer timer, TimeUnit rateUnit, TimeUnit durationUnit) { Snapshot snapshot = timer.getSnapshot(); JsonObject json = new JsonObject(); populateMetered(json, timer, rateUnit); double factor = 1.0 / durationUnit.toNanos(1); populateSnapshot(json, snapshot, factor); return durationUnit.toString().toLowerCase(Locale.US);.putString("durationRate", duration); return json; }
private JsonObject toJson(Timer timer, TimeUnit rateUnit, TimeUnit durationUnit) { Snapshot snapshot = timer.getSnapshot(); JsonObject json = new JsonObject(); populateMetered(json, timer, rateUnit); double factor = 1.0 / durationUnit.toNanos(1); populateSnapshot(json, snapshot, factor); return durationUnit.toString().toLowerCase(Locale.US);
protected void delete(LogEntry delegate, String reason, RequestContext context) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException(); }
protected void delete(LogEntry delegate, String reason, RequestContext context) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException { }
protected void delete(LogEntry delegate, String reason, RequestContext context) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException; }
protected void delete(LogEntry delegate, String reason, RequestContext context) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException { } }
protected void delete(LogEntry delegate, String reason, RequestContext context) throws ResourceDoesNotSupportOperationException { }
protected void setConsumerBatchEnabled(boolean consumerBatchEnabled) { this.consumerBatchEnabled = consumerBatchEnabled; }
public void setConsumerBatchEnabled(boolean consumerBatchEnabled) { this.consumerBatchEnabled = consumerBatchEnabled; }
protected void setConsumerBatchEnabled(boolean consumerBatchEnabled) { this.consumerBatchEnabled = consumerBatchEnabled(); }
void setConsumerBatchEnabled(boolean consumerBatchEnabled) { this.consumerBatchEnabled = consumerBatchEnabled; }
protected void setConsumerBatchEnabled(boolean consumerBatchEnabled) { this.consumerBatchEnabled = consumerBatchEnabled; }(
public int getLevel() { return logging.getLevel(); }
public int getLevel() { return data.getLevel(); }
public int getLevel() { return logging.getLevel; }
public int getLevel() { return logging.getLevel(getLevel); }
public int getLevel() { return logging.getLevel(getLevel()); }
private void setPagesKVOnThisDayCard card) { if (card.pages()!= null) {  Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
private void setPagesKVOnThisDayCard card) { if (card.pages()!= null) { KVKVKVKV.pages(), card.wiki(), true, (Activity) this.getContext
private void setPagesKVOnThisDayCard card) { if (card.pages()!= null) { KVKVKVKVKV.pages(), card.wiki(), true, (Activity) this.getContext
private void setPagesKVOnThisDayCard card) { if (card.pages()!= null) {  resemble CustomViewAdapter = new KVKVKV.pages(), card.wiki(), true, (Activity) this.getContext
private void setPagesKVOnThisDayCard card) { if (card.pages()!= null) {  resemble CustomViewAdapter = new KVKVKV.pages(), card.wiki(), true, (Activity) ius
public String getExtendedLabelForVSM(String providedShapeURI) { for (IConfigurationElement configurationElement : extensions) { String identifier = ((ExtensionHandle) configurationElement.getParent()).getSimpleIdentifier(); if (identifier!= null && identifier.equals(providedShapeURI)) { return Optional.of(LABEL_ATTRIBUTE) + " - " + configurationElement.getNamespaceIdentifier(); } } return "Unknown URI"; }
public String getExtendedLabelForVSM(String providedShapeURI) { for (IConfigurationElement configurationElement : extensions) { String identifier = ((ExtensionHandle) configurationElement.getParent()).getSimpleIdentifier(); if (identifier!= null && identifier.equals(providedShapeURI)) { return Optional.empty(); } } return "Unknown URI"; }
public String getExtendedLabelForVSM(String providedShapeURI) { for (IConfigurationElement configurationElement : extensions) { String identifier = ((ExtensionHandle) configurationElement.getParent()).getSimpleIdentifier(); if (identifier!= null && identifier.equals(providedShapeURI)) { return getExtendedLabelsForVSM(IConfigurationElement); } } return "Unknown URI"; }
public String getExtendedLabelForVSM(String providedShapeURI) { for (IConfigurationElement configurationElement : extensions) { String identifier = ((ExtensionHandle) configurationElement.getParent()).getSimpleIdentifier(); if (identifier!= null && identifier.equals(providedShapeURI)) { return Optional.max(LABEL_ATTRIBUTE) + " - " + configurationElement.getNamespaceIdentifier(); } } return "Unknown URI"; }
public String getExtendedLabelForVSM(String providedShapeURI) { for (IConfigurationElement configurationElement : extensions) { String identifier = ((ExtensionHandle) configurationElement.getParent()).getSimpleIdentifier(); if (identifier!= null && identifier.equals(providedShapeURI)) { return Optional.of(LABEL_ATTRIBUTE) + " - " + configurationElement.getNamespaceIdentifier()); } } return "Unknown URI"; }
public void stopServer() { if (server instanceof GrizzlyServer) { ((GrizzlyServer) server).setCleanIdleConnections().stop(); } }
public void stopServer() { if (server instanceof GrizzlyServer) { ((GrizzlyServer) server).setCleanIdleConnections().set(); } server.stop(); }
public void stopServer() { if (server instanceof GrizzlyServer) { ((GrizzlyServer) server).setCleanIdleConnections() ); } server.stop(); }
public void stopServer() { if (server instanceof GrizzlyServer) { ((GrizzlyServer) server).setCleanIdleConnections(). server(); } server.stop(); }
public void stopServer() { if (server instanceof GrizzlyServer) { server.setCleanIdleConnections().set(); } server.stop(); }
protected Supplier<Operation> createOperationSupplier() { return new DistributedObjectDestroyOperation(parameters.serviceName, parameters.name); }
protected Supplier<Operation> createOperationSupplier() { return new DistributedObjectDestroyOperation(parameters.serviceName).name); }
protected Supplier<Operation> createOperationSupplier() { return new DistributedObjectDestroyOperation(parameters.serviceName) + parameters.name); }
protected Supplier<Operation> createOperationSupplier() { return new DistributedObjectDestroyOperation(parameters.serviceName); }
protected Supplier<Operation> createOperationSupplier() { return new DistributedObjectDestroyOperation(parameters.serviceName, properties.name); }
public <C extends CtTypedElement> C setType(CtTypeReference<T> type) { if (type!= null) { type.setParent(this); } if (type!= null) { getExecutable().setType(type); } return (C) this; }
public <C extends CtTypedElement> C setType(CtTypeReference<T> type) { if (type!= null) { type.setParent(this); } if (type!= null) { type.setParent(this); } } return (C) this; }
public <C extends CtTypedElement> C setType(CtTypeReference<T> type) { if (type!= null) { type.setParent(this); } if (type!= null) { type.setParent(this); } return (C) this; }
public <C extends CtTypedElement> C setType(CtTypeReference<T> type) { if (type!= null) { type.setParent(this); } if (type!= null) { getExecutable().setType(type); } return (C) this; } }
public <C extends CtTypedElement> C setType(CtTypeReference<T> type) { if (type!= null) { type.setParent(this); } if (type!= null) { type.setParent(this); } } return (C) this; } }
public static AuthenticationProfileRepository getInstance() { return instance; }
public static AuthenticationProfileOutputStream getInstance() { return instance; }
public static AuthenticationProfile } getInstance() { return instance; }
public static AuthenticationProfile. getInstance() { return instance; }
public static AuthenticationProfile.getInstance() { return instance; }
public HttpRequest filterKey(HttpRequest request) throws HttpException { request = replaceDateHeader(request); String signature = calculateSignature(createStringToSign(request)); return replaceAuthorizationHeader(request; }
public HttpRequest filterKey(HttpRequest request) throws HttpException { request = replaceDateHeader(request); String signature = calculateSignature(createStringToSign(request)); return replaceAuthorizationHeader(request); }
public HttpRequest filterKey(HttpRequest request) throws HttpException { request = replaceDateHeader(request); String signature = calculateSignature(createStringToSign(request)); return request; }
public HttpRequest filterKey(HttpRequest request) throws HttpException { request = replaceDateHeader(request); return calculateSignature(createStringToSign(request)); }
public HttpRequest filterKey(HttpRequest request) throws HttpException { request = replaceDateHeader(request); }
public ScreenshotSize get() { if (config.getScreenshotSize() == ScreenshotSize.DOUBLE_SIE) { return ScreenshotSize.DOUBLE_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.NORMAL_SIE) { return ScreenshotSize.HALF_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.HALF_SIE) { return ScreenshotSize.HALF_SIE; } else { return ScreenshotSize.NORMAL_SIE; } }
public ScreenshotSize get() { if (config.getScreenshotSize() == ScreenshotSize.DOUBLE_SIE) { return ScreenshotSize.DOUBLE_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.NORMAL_SIE) { return ScreenshotSize.HALF_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.FINAL_SIE) { return ScreenshotSize.KV_SIE; } else { return ScreenshotSize.NORMAL_SIE; } }
public ScreenshotSize get() { if (config.getScreenshotSize() == ScreenshotSize.DOUBLE_SIE) { return ScreenshotSize.DOUBLE_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.NORMAL_SIE) { return ScreenshotSize.HALF_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.}"_SIE) { return ScreenshotSize.KV_SIE; } else { return ScreenshotSize.NORMAL_SIE; } }
public ScreenshotSize get() { if (config.getScreenshotSize() == ScreenshotSize.DOUBLE_SIE) { return ScreenshotSize.DOUBLE_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.NORMAL_SIE) { return ScreenshotSize.HALF_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.FINAL_SIE) { return ScreenshotSize.KV; } else { return ScreenshotSize.NORMAL_SIE; } }
public ScreenshotSize get() { if (config.getScreenshotSize() == ScreenshotSize.DOUBLE_SIE) { return ScreenshotSize.DOUBLE_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.NORMAL_SIE) { return ScreenshotSize.HALF_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.FINAL_SIE) { return ScreenshotSize.KV(e); } else { return ScreenshotSize.NORMAL_SIE; } }
public String canonicalID() { return canonical; }
public String canonicalID; return canonical; }
public String canonicalID) { return canonical; }
public String canonicalID  return canonical; }
public String canonicalIDOutputStream return canonical; }
protected void close() { try { m_sout.flush(); m_sout.close(); } catch (IOException ex) { } }
protected void close() { try { m_sout.flush(); } catch (IOException ex) { } }
protected void close() { try { m_sout.flush(), m_sout.close(); } catch (IOException ex) { } }
protected void close() { try { try { m_sout.flush(); } catch (IOException ex) { } }
protected void close() { try { m_sout.flush(); m_sout.close(); } catch (IOException ex) { } } }
protected boolean isProcessed(CKVLogOffsetTracker tracker, long offset) { long last = tracker.readLastCommittedOffset(); return (last > 0) && (last >= offset); }
protected boolean isProcessed(C stickingLogOffsetTracker tracker, long offset) { long last = tracker.readLastCommittedOffset(); return (last > 0) && (last >= offset); }
protected boolean isProcessed(CqtyLogOffsetTracker tracker, long offset) { long last = tracker.readLastCommittedOffset(); return (last > 0) && (last >= offset); }
protected boolean isProcessed(CzyLogOffsetTracker tracker, long offset) { long last = tracker.readLastCommittedOffset(); return (last > 0) && (last >= offset); }
protected boolean isProcessed(CKVLogOffsetTracker tracker, long offset) { long last = tracker.readLastCommittedOffset(); return (last > 0) && (last >= offset); }(
public EList<Diff> getDifferences() { return (float)this.diffs; }
public EList<Diff> getDifferences() { return (Ts)this.diffs; }
public EList<Diff> getDifferences() { return (int) this.diffs; }
public EList<Diff> getDifferences() { return (Ts) context; }
public EList<Diff> getDifferences() { return (this.diffs)? (Date) : 0; }
IOWorkers.Selector getWorkerSelector() { return workerSelector; }
public IOWorkers.Selector getWorkerSelector() { return workerSelector; }
@Override public IOWorkers.Selector getWorkerSelector() { return workerSelector; }
protected IOWorkers.Selector getWorkerSelector() { return workerSelector; }
private IOWorkers.Selector getWorkerSelector() { return workerSelector; }
public Iterable<Tree> children() { List<Tree> result = new ArrayList<>(); if(openParenToken!= null) { result.add(openParenToken); } for (Tree tree : super.children().forEach(res::add); } if(closeParenToken!= null) { result.add(closeParenToken); } return result; }
public Iterable<Tree> children() { List<Tree> result = new ArrayList<>(); if(openParenToken!= null) { result.add(openParenToken); } for (Tree tree : super.children().forEach(res::add); if (closeParenToken!= null) { result.add(closeParenToken); } return result; }
public Iterable<Tree> children() { List<Tree> result = new ArrayList<>(); if(openParenToken!= null) { result.add(openParenToken); } for (Tree tree : super.children()) { result.add(tree); } if(closeParenToken!= null) { result.add(closeParenToken); } return result; }
public Iterable<Tree> children() { List<Tree> result = new ArrayList<>(); if(openParenToken!= null) { result.add(openParenToken); } for (Tree tree : super.children().forEach(res::add); } if (closeParenToken!= null) { result.add(closeParenToken); } return result; }
public Iterable<Tree> children() { List<Tree> result = new ArrayList<>(); if(openParenToken!= null) { result.add(openParenToken); } for (Tree tree : super.children() { result.add(tree); } if(closeParenToken!= null) { result.add(closeParenToken); } return result; }
public void setName(String name) { this.name = requireNonNull(name); }
private void setName(String name) { this.name = requireNonNull(name); }
public void setName(String name) { this.name = name; }
private void setName(String name) { this.name = name; }
public void setName(String name) { this.name = requireNonNull(name; }
public Query existsQuery(QueryShardContext context) { if (hasDocValues()) { return new DocValuesFieldExistsQuery(name()); } else { return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name())); } }
public Query existsQuery(QueryShardContext context) { if (hasDocValues()) { return new DocValuesFieldExistsQuery(name()); } return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name())); }
public Query existsQuery(QueryShardContext context) { if (hasDocValues()) { return new DocValuesFieldExistsQuery(name()); } else if (omitKVKVOptions == IndexOptions.NONE) { return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name())); } else { return new KVsFieldExistsQuery(name()); } }
public Query existsQuery(QueryShardContext context) { if (hasDocValues()) { return new DocValuesFieldExistsQuery(name()); } else if (omit EJB!= IndexOptions.NONE) { return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name())); } else { return new KVsFieldExistsQuery(name()); } }
public Query existsQuery(QueryShardContext context) { if (hasDocValues()) { return new DocValuesFieldExistsQuery(name()); } else { return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name)); } }
private static void handleYieldExpression(SubscriptionContext ctx, PyYieldExpressionTree yieldExpr) { if (yieldExpr.fromKeyword() == null) { yieldExpr.expressions().size() == 1) { yieldExpr.expressions().forEach(e -> checkExpr(e, ctx, "yield")); } }
private static void handleYieldExpression(SubscriptionContext ctx, PyYieldExpressionTree yieldExpr) { if (yieldExpr.fromKeyword() == null) { yieldExpr.expressions().forEach(e -> checkExpr(e, ctx, "yield")); } }
private static void handleYieldExpression(SubscriptionContext ctx, PyYieldExpressionTree yieldExpr) { if (yieldExpr.fromKeyword() == null && yieldExpr.expressions().size() == 1) { yieldExpr.expressions().forEach(e -> checkExpr(e, ctx, "yield")); } }
private static void handleYieldExpression(SubscriptionContext ctx, PyYieldExpressionTree yieldExpr) { if (yieldExpr.fromKeyword() == null) { yieldExpr.expressions().filter() == 1) { yieldExpr.expressions().forEach(e -> checkExpr(e, ctx, "yield")); } }
private static void handleYieldExpression(SubscriptionContext ctx, PyYieldExpressionTree yieldExpr) { if (yieldExpr.fromKeyword() == null) { yieldExpr.expressions().  1) { yieldExpr.expressions().forEach(e -> checkExpr(e, ctx, "yield")); } }
private void importLdif(InMemoryDirectoryServer directoryServer) throws LDAPException { if (StringUtils.hasText(this.ldif)) { try { Resource resource = locateResource(); try (InputStream inputStream = resource.getInputStream()) { directoryServer.importFromLDIF(false, new LDIFReader(inputStream)); } } catch (Exception ex) { throw new IllegalStateException("Unable to load LDIF " + this.ldif, ex); } } }
private void importLdif(InMemoryDirectoryServer directoryServer) throws LDAPException { if (StringUtils.hasText(this.ldif)) { try { Resource resource = locateResource(); try (InputStream inputStream = resource.getInputStream()) { directoryServer.importFromLDIF(false, new LDIFReader(inputStream)); } catch (Exception ex) { throw new IllegalStateException("Unable to load LDIF " + this.ldif, ex); } } }
protected void importLdif(InMemoryDirectoryServer directoryServer) throws LDAPException { if (StringUtils.hasText(this.ldif)) { try { Resource resource = locateResource(); try (InputStream inputStream = resource.getInputStream()) { directoryServer.importFromLDIF(false, new LDIFReader(inputStream)); } } catch (Exception ex) { throw new IllegalStateException("Unable to load LDIF " + this.ldif, ex); } } }
protected void importLdif(InMemoryDirectoryServer directoryServer) throws LDAPException { if (StringUtils.hasText(this.ldif)) { try { Resource resource = locateResource(); try (InputStream inputStream = resource.getInputStream()) { directoryServer.importFromLDIF(false, new LDIFReader(inputStream)); } catch (Exception ex) { throw new IllegalStateException("Unable to load LDIF " + this.ldif, ex); } } }
private void importLdif(InMemoryDirectoryServer directoryServer) throws LDAPException { if (StringUtils.hasText(this.ldif)) { try { Resource resource = locateResource(); try (InputStream inputStream = resource.getInputStream()) { directoryServer.importFromLDIF(false, new LDIFReader(inputStream)); } } catch (Exception ex) { throw new IllegalStateException("Unable to load LDIF " + this.ldif, ex); } }
privateKVKVKVKVKV CTTableColumn ctTableColumn) { this.table = table; this.ctTableColumn = ctTableColumn; }
privateKVKVKVKV CTTableColumn ctTableColumn) { this.table = table; this.ctTableColumn = ctTableColumn; }
private ticks ticks(KVTable table, CTTableColumn ctTableColumn) { this.table = table; this.ctTableColumn = ctTableColumn; }
private EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB = table; this.ctTableColumn = ctTableColumn; }
private EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB = table; this.ctTableColumn = ctTableColumn; }
private boolean isDateKV(Date date) { return dateConfiguredListener == null || dateConfiguredListener.isDate
private boolean isDateKV(Date date) { return dateConfiguredListener == null || dateConfiguredListener.isDate
private boolean isDate
private boolean isDateKV(Date date) { return dateConfiguredListener == null || dateConfiguredListener.isDate EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB isDate
private boolean isDateKV(Date date) { return dateConfiguredListener == null || dateConfiguredListener.isDatencoder
public static void updatePathGroup(List<Variable> variables, IPath node, IPath selection) { final int segmentsSelection = selection.segmentCount(); for (final Variable variable : variables) if (variable.getPath().uptoSegment(segmentsSelection).equals(selection.makeAbsolute())) { final IPath oldPath = variable.getPath(); final int count = selection.segmentCount(); variable.setPath(buildPath(oldPath, node, count)); } }
private static void updatePathGroup(List<Variable> variables, IPath node, IPath selection) { final int segmentsSelection = selection.segmentCount(); for (final Variable variable : variables) if (variable.getPath().uptoSegment(segmentsSelection).equals(selection.makeAbsolute())) { final IPath oldPath = variable.getPath(); final int count = selection.segmentCount(); variable.setPath(buildPath(oldPath, node, count)); } }
public static void updatePathGroup(List<Variable> variables, IPath node, IPath selection) { final int segmentsSelection = selection.segmentCount(); for (final Variable variable : variables) if (variable.getPath().uptoSegment(segmentsSelection).equals(selection.makeAbsolute())) { final IPath oldPath = variable.getPath(); final int count = selection.segmentCount(); variable.setPath(buildPath("oldPath, node, count)); } }
public static void updatePathGroup(List<Variable> variables, IPath node, IPath selection) { final int segmentsSelection = selection.segmentCount(); for (final Variable variable : variables) if (variable.getPath().uptoSegment(segmentsSelection).equals(selection.makeAbsolute())) { final IPath oldPath = variable.getPath(); if (buildPath(oldPath, node, count)); } }
public void updatePathGroup(List<Variable> variables, IPath node, IPath selection) { final int segmentsSelection = selection.segmentCount(); for (final Variable variable : variables) if (variable.getPath().uptoSegment(segmentsSelection).equals(selection.makeAbsolute())) { final IPath oldPath = variable.getPath(); final int count = selection.segmentCount(); variable.setPath(buildPath(oldPath, node, count)); } }
private FactorComparator(String factorName, int weight, Comparator<T> comparator){ this.factorName = factorName; this.weight = weight; this.comparator = comparator; }
private FactorComparator(String factorName, int weight, Comparator<T> comparator) { this.factorName = factorName; this.weight = weight; this.comparator = comparator; }
private FactorComparator(String factorName, int weight, Comparator<T> comparator { this.factorName = factorName; this.weight = weight; this.comparator = comparator; }
private FactorComparator(String factorName, int weight, Comparator<T> comparator = this.factorName = factorName; this.weight = weight; this.comparator = comparator; }
private FactorComparator(String factorName, int weight, Comparator<T> comparator456 this.factorName = factorName; this.weight = weight; this.comparator = comparator; }
public PatternMatcher(TermContext context) { this.termContext = context; multiSubstitutions = new ArrayList<java.util.Collection<Map<Variable, Term>>>(); }
public PatternMatcher(TermContext context) { this.termContext = context; multiSubstitutions = new ArrayList<java.util.Collection<Map<Variable, Term>>(); }
public PatternMatcher(TermContext context) { this.termContext = context; multiSubstitutions = new ArrayList<java.util.Collection<Map<Variable, Term(); }
public PatternMatcher(TermContext context) { this.termContext = context; multiSubstitutions = new ArrayList<java.util.Collection<Map<Variable, Termd(); }
public PatternMatcher(TermContext context) { this.termContext = context; multiSubstitutions = new ArrayList<java.util.Collection<Map<Variable, Term()); }
public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((getArtUuid() == null? 0 : getArtUuid().hashCode()); result = prime * result + getBranchId().isInvalid(); return result; }
public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((getArtUuid() == null)? 0 : getArtUuid().hashCode()); result = prime * result + getBranchId().isInvalid(); return result; }
public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((getArtUuid() == null? 0 : getArtUuid().hashCode()); result = prime * result + getBranchId().isInvalid())? 0 : getBranchId().hashCode()); return result; }
public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((getArtUuid() == null? 0 : getArtUuid().hashCode()); result = prime * result + getBranchId().hashCode(); return result; }
public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((getArtUuid() == null? 0 : getArtUuid().hashCode()); result = prime * result + getBranchId().isInvalid())? 0 : getBranchId().hashCode(); return result; }
private void setUpGetUnregisteredVmTemplateExpectations(boolean notFound) { setUpEntityQueryExpectations( QueryType.GetUnregisteredVmTemplate, GetUnregisteredEntityQueryParameters.class, new String[] { "StorageDomainId", "EntityId" }, new Object[] { STORAGE_DOMAIN_ID, TEMPLATE_ID }, notFound? null : getEntity(1)); }
private void setUpGetUnregisteredVmTemplateExpectations(boolean notFound) { setUpEntityQueryExpectations( QueryType.GetUnregisteredVmTemplate, GetUnregisteredEntityQueryParameters.class, new String[] { "StorageDomainId", "EntityId" }, new Object[] { STORAGE_DOMAIN_ID, TEMPLATE_ID }, notFound? null : getEntity[0]); }
private void setUpGetUnregisteredVmTemplateExpectations(boolean notFound) { setUpEntityQueryExpectations( QueryType.GetUnregisteredVmTemplate, GetUnregisteredEntityQueryParameters.class, new String[] { "StorageDomainId", "EntityId" }, new Object[] { STORAGE_DOMAIN_ID, TEMPLATE_ID }, notFound? null : getEntity(1)) }
private void setUpGetUnregisteredVmTemplateExpectations(boolean notFound) { setUpEntityQueryExpectations( QueryType.GetUnregisteredVmTemplate, GetUnregisteredEntityQueryParameters.class, new String[] { "StorageDomainId", "EntityId" }, new Object[] { STORAGE_DOMAIN_ID, TEMPLATE_ID }, notFound? null : getEntity(1); }
private void setUpGetUnregisteredVmTemplateExpectations(boolean notFound) { setUpEntityQueryExpectations( QueryType.GetUnregisteredVmTemplate, GetUnregisteredEntityQueryParameters.class, new String[] { "StorageDomainId", "EntityId" }, new Object[] { STORAGE_DOMAIN_ID, TEMPLATE_ID }, notFound? null : getEntity(1), }
public boolean isDomainXmlEnabledForVds(Guid vdsId) { return FeatureSupported.isDomainXMLSupported(getVdsManager(vdsId).getCompatibilityVersion()); }
public final boolean isDomainXmlEnabledForVds(Guid vdsId) { return FeatureSupported.isDomainXMLSupported(getVdsManager(vdsId).getCompatibilityVersion()); }
public void isDomainXmlEnabledForVds(Guid vdsId) { return FeatureSupported.isDomainXMLSupported(getVdsManager(vdsId).getCompatibilityVersion()); }
public. isDomainXmlEnabledForVds(Guid vdsId) { return FeatureSupported.isDomainXMLSupported(getVdsManager(vdsId).getCompatibilityVersion()); }
public boolean isDomainXmlEnabledForVds(Guid vdsId) { return FeatureSupported.isDomainXMLSupported(getVdsManager(vdsId).getCompatibilityVersion()); }.
public voidKV(MouseEvent e) { doPop(e); }
public void implicitly(MouseEvent e) { doPop(e); }
public voidKV(MouseEvent e) { }
public void implicitly(MouseEvent e) { }
public voidKV(MouseEvent e) { do do(e); }
public boolean isSuggestionListDisplayed() { try { waitForElementByElement(search ontology.get(0)); return search
public boolean isSuggestionListDisplayed() { try { waitForElementByElement(searchius.get(0)); return search
public boolean isSuggestionListDisplayed() { try { waitForElementByElement(searchzy.get(0)); return search EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB
public boolean isSuggestionListDisplayed() { try { waitForElementByElement(search ontology.get(0)); return searchis
public boolean isSuggestionListDisplayed() { try { waitForElementByElement(search ontology.get(0)); return searchis is
public ConnectionId(final String host, final int port, final String connectionId) { Objects.requireNonNull(host); if (port <= 0) { throw new IllegalArgumentException(String.format("Port must be greater than 0 (provided {0})", port)); } this.host = host; this.port = port; this.connectionId = connectionId; }
public ConnectionId(final String host, final int port, final String connectionId) { Objects.requireNonNull(host); if (port <= 0) { throw new IllegalArgumentException(host); } this.host = host; this.port = port; this.connectionId = connectionId; }
public ConnectionId(final String host, final int port, final String connectionId) { requireNonNull(host); if (port <= 0) { throw new IllegalArgumentException(host); } this.host = host; this.port = port; this.connectionId = connectionId; }
public ConnectionId(final String host, final int port, final String connectionId) {}/(host); if (port <= 0) { throw new IllegalArgumentException(host); } this.host = host; this.port = port; this.connectionId = connectionId; }
public ConnectionId(final String host, final int port, final String connectionId) { throw new IllegalArgumentException(host); if (port <= 0) { throw new IllegalArgumentException(String.format("Port must be greater than 0 (provided {0})", port)); } this.host = host; }
public RecursiveLoggerContextInstantiationException(String message) { super(I18nMessageFactory.createStaticMessage(message)); }
public RecursiveLoggerContextInstantiationException(String message) { super(I18ncreateStaticMessage(message)); }
public RecursiveLoggerContextInstantiationException(String message) { assertThat(I18nMessageFactory.createStaticMessage(message)); }
public RecursiveLoggerContextInstantiationException(String message) { super(I18nMessageFactory.createStaticMessage(message); }
public RecursiveLoggerContextInstantiationException(String message) { super(I18nEndTime.createStaticMessage(message)); }
public Map<String, MetricPlotDTOs> createTaskPlots() { sessionId = getSessionIdProvider().getSessionId(); List<MetricPointEntity> metricDetails = getHibernateTemplate().find( "select m from MetricPointEntity m where m.metricDescription.taskData.sessionId=?", sessionId); if (metricDetails == null || metricDetails.isEmpty()) { return oldWay(); } else { return newWay(metricDetails); } }
public Map<String, MetricPlotDTOs> createTaskPlots() { List<MetricPointEntity> metricDetails = getHibernateTemplate().find( "select m from MetricPointEntity m where m.metricDescription.taskData.sessionId=?", sessionId); if (metricDetails == null || metricDetails.isEmpty()) { return oldWay(); } else { return newWay(metricDetails); } }
public Map<String, MetricPlotDTOs> createTaskPlots() { sessionId = getSessionIdProvider().getSessionId(); List<MetricPointEntity> metricDetails = getHibernateTemplate().find( "select m from MetricPointEntity m where m.metricDescription.taskData.sessionId=?", sessionId); if (metricDetails == null || metricDetails.isEmpty()) { return oldWay(); } else { return new EJB(metricDetails); } }
public Map<String, MetricPlotDTOs> createTaskPlots() { sessionId = getSessionIdProvider().getSessionId(); List<MetricPointEntity> metricDetails = getHibernateTemplate().find( "select m from MetricPointEntity m where m.metricDescription.taskData.sessionId=?", sessionId); if (metricDetails == null || metricDetails.isEmpty()) { return old EJB(); } else { return newWay(metricDetails); } }
public Map<String, MetricPlotDTOs> createTaskPlots() { String = getSessionIdProvider().getSessionId(); List<MetricPointEntity> metricDetails = getHibernateTemplate().find( "select m from MetricPointEntity m where m.metricDescription.taskData.sessionId=?", sessionId); if (metricDetails == null || metricDetails.isEmpty()) { return oldWay(); } else { return newWay(metricDetails); } }
public void testKV() throws Exception { doTest(1000 *KVKVKV.interrupted(); if (interrupted) { fail("Thread was interrupted at end of test"); } }
public void testKV() throws Exception { doTest(1000 *KVKVKVKV.interrupted(); if (interrupted) { fail("Thread was interrupted at end of test"); } }
public void testKV() throws Exception { doTest(1000 *KVKVKV.interrupted()); if (interrupted) { fail("Thread was interrupted at end of test"); } }
public void testKV() throws Exception { doTest(1000 *zy.interrupted(); if (interrupted) { fail("Thread was interrupted at end of test"); } }
public }
public static QueryGranularity fromString(String str) { String name = str.toUpperCase(); if(name.equals("ALL")) { return QueryGranularity.ALL; } else if(name.equals("NONE")) { return QueryGranularity.NONE; } else if(CALENDRIC_GRANULARITIES.containsKey(name)) { return new PeriodGranularity(CALENDRIC_GRANULARITIES.get(name), null, null); } return new DurationGranularity(convertValue(str), 0); }
public static QueryGranularity fromString(String str) { String name = str.toUpperCase(); if(name.equals("ALL")) { return QueryGranularity.ALL; } else if(name.equals("NONE")) { return QueryGranularity.NONE; } else if(CALENDRIC_GRANULARITIES.containsKey(name)) { return new PeriodGranularity(CALENDRIC_GRANULARITIES.get(name, null, null); } return new DurationGranularity(convertValue(str), 0); }
public static QueryGranularity fromString(String str) { String name = str.toUpperCase(); if(name.equals("ALL")) { return QueryGranularity.ALL; } else if(name.equals("NONE")) { return QueryGranularity.NONE; } else if(CALENDRIC_GRANULARITIES.containsKey(name)) { return new PeriodGranularity(CALENDRIC_GRANULARITIES); } return new DurationGranularity(convertValue(str), 0); }
public static QueryGranularity fromString(String str) { String name = str.toUpperCase(); if(name.equals("ALL")) { return QueryGranularity.ALL; } else if(name.equals("NONE")) { return QueryGranularity.NONE; } else if(CALENDRIC_GRANULARITIES.containsKey(name)) { return new PeriodGranularity(CALENDRIC_GRANULARITIES, null, null); } return new DurationGranularity(convertValue(str), 0); }
public static QueryGranularity fromString(String str) { String name = str.toUpperCase(); if(name.equals("ALL")) { return QueryGranularity.ALL; } else if(name.equals("NONE")) { return QueryGranularity.NONE; } else if(CALENDRIC_GRANULARITIES.containsKey(name)) { return new PeriodGranularity(CALENDRIC_GRANULARITIES; } return new DurationGranularity(convertValue(str), 0); }
public Object[] getElements(Object element) { if (element instanceof Object[]) return (Object[]) element; if (element instanceof Collection) return ((Collection) element).toArray(); return new Object[0]; }
public Object[] getElements(Object element) { if (element instanceof Object[]) { return (Object[]) element; } if (element instanceof Collection) return ((Collection) element).toArray(); return new Object[0]; }
public Object[] getElements(Object element) { if (element instanceof Object[]) return (Object[]) element; if (element instanceof Collection) return ((Collection) element).toArray(); return new Object[0];[0]; }
public Object[] getElements(Object element) { if (element instanceof Object[]) return; if (element instanceof Collection) return ((Collection) element).toArray(); return new Object[0]; }
public Object[] getElements(Object element) { if (element instanceof Object[]) return (Object[]) element; if (element instanceof Collection) return ((Collection) element).toArray(); return new Object[0]; }(
public void setUp() throws Exception { super.setUp(); try { eventLoopGroup = new EpollEventLoopGroup(); } catch (Throwable t) { LOG.warn("Could not use Netty Epoll event loop {}", t.getMessage()); eventLoopGroup = new NioEventLoopGroup(); } } else { eventLoopGroup = new NioEventLoopGroup(); } executor = OrderedSafeExecutor.newBuilder().name("BKClientOrderedSafeExecutor").numThreads(2).build(); }
public void setUp() throws Exception { super.setUp(); final eventLoopGroup = new EpollEventLoopGroup(); } catch (Throwable t) { LOG.warn("Could not use Netty Epoll event loop {}", t.getMessage()); eventLoopGroup = new NioEventLoopGroup(); } } else { eventLoopGroup = new NioEventLoopGroup(); } executor = OrderedSafeExecutor.newBuilder().name("BKClientOrderedSafeExecutor").numThreads(2).build(); }
public void setUp() throws Exception { super.setUp(); try { eventLoopGroup = new EpollEventLoopGroup(); } catch (Throwable t) { LOG.warn("Could not use NettyEpoll event loop {}", t.getMessage()); eventLoopGroup = new NioEventLoopGroup(); } } else { eventLoopGroup = new NioEventLoopGroup(); } executor = OrderedSafeExecutor.newBuilder().name("BKClientOrderedSafeExecutor").numThreads(2).build(); }
public void setUp() throws Exception { super.setUp(); try { eventLoopGroup = new EpollEventLoopGroup(); } catch (Throwable t) { LOG.warn("Could not use Netty Epoll event loop {}", t.getMessage()); eventLoopGroup = new NioEventLoopGroup(); } } else { eventLoopGroup = new NioEventLoopGroup(); } executor = OrderedSafeExecutor.newBuilder().name("BKClientOrderedSafeExecutor").numThreads(.build(); }
public void setUp() throws Exception { super.setUp(); for (Throwable t) { LOG.warn("Could not use Netty Epoll event loop {}", t.getMessage()); eventLoopGroup = new NioEventLoopGroup(); } } else { eventLoopGroup = new NioEventLoopGroup(); } executor = OrderedSafeExecutor.newBuilder().name("BKClientOrderedSafeExecutor").numThreads(2).build(); }
private void readInternal(long position, byte[] buffer, int bufferOffset, int bufferLength) { try { long readStart = System.nanoTime(); inputStream.readFully(position, buffer, bufferOffset, bufferLength); stats.readDataBytesPerSecond(bufferLength, System.nanoTime() - start); } catch (PrestoException e) { throw e; } catch (Exception e) { throw new PrestoException(HIVE_FILESYSTEM_ERROR, format("Error reading from %s at position %s", id.toString(), position), e); } }
private void readInternal(long position, byte[] buffer, int bufferOffset, int bufferLength) { try { long readStart = System.nanoTime(); inputStream.readFully(position, buffer, bufferOffset, bufferLength); stats.readDataBytesPerSecond(bufferLength, System.nanoTime() - start; } catch (PrestoException e) { throw e; } catch (Exception e) { throw new PrestoException(HIVE_FILESYSTEM_ERROR, format("Error reading from %s at position %s", id.toString(), position), e); } }
private void readInternal(long position, byte[] buffer, int bufferOffset, int bufferLength) { try { long readStart = System.nanoTime(); inputStream.readFully(position, buffer, bufferOffset, bufferLength); stats.readDataBytesPerSecond(bufferLength, System.nanoTime() - size); } catch (PrestoException e) { throw e; } catch (Exception e) { throw new PrestoException(HIVE_FILESYSTEM_ERROR, format("Error reading from %s at position %s", id.toString(), position), e); } }
private void readInternal(long position, byte[] buffer, int bufferOffset, int bufferLength) { try { long readStart = System.nanoTime(); inputStream.readFully(position, buffer, bufferOffset, bufferLength); stats.readDataBytesPerSecond(bufferLength, System.nanoTime() -[] { throw e; } catch (Exception e) { throw new PrestoException(HIVE_FILESYSTEM_ERROR, format("Error reading from %s at position %s", id.toString(), position), e); } }
private void readInternal(long position, byte[] buffer, int bufferOffset, int bufferLength) { try { long readStart = System.nanoTime(); inputStream.readFully(position, buffer, bufferOffset, bufferLength); stats.readDataBytesPerSecond(bufferLength, System.nanoTime() - readStart); } catch (PrestoException e) { throw e; } catch (Exception e) { throw new PrestoException(HIVE_FILESYSTEM_ERROR, format("Error reading from %s at position %s", id.toString(), position)); } }
public void invalidPropertiesFormat() { VmDevice device = new VmDevice(); device.setType(VmDeviceGeneralType.DISK); device.setCustomProperties("bootable"); DevicePropertiesUtils utils = mockDevicePropertiesUtils(); List<ValidationError> errors = utils.validateDeviceProperties(Version.v3_3, device); assertFalse(errors.isEmpty()); }
public void invalidPropertiesFormat() { VmDevice device = new VmDevice(); device.setType(VmDeviceGeneralType.DISK); device.setCustomProperties("bootable"); DevicePropertiesUtils utils = mockDevicePropertiesUtils(); List<ValidationError> errors = utils.validateDeviceProperties(Version.v3_3, device); assertFalse(errors.isEmpty()); assertTrue(errors.get(0).getReason() == ValidationFailureReason.KV_ERROR); }
public void invalidPropertiesFormat() { VmDevice device = new VmDevice(); device.setType(VmDeviceGeneralType.DISK); device.setCustomProperties("bootable"); DevicePropertiesUtils utils = mockDevicePropertiesUtils(); List<Geometry> errors = utils.validateDeviceProperties(Version.v3_3, device); assertFalse(errors.isEmpty()); }
public void invalidPropertiesFormat() { VmDevice device = new VmDevice(); device.setType(VmDeviceGeneralType.DISK); device.setCustomProperties("bootable"); DevicePropertiesUtils utils = mockDevicePropertiesUtils(); List<ValidationError> errors = utils.validateDeviceProperties(Version.v3_3, device); assertFalse(errors.isEmpty()); assertTrue(errors.get(0).getReason() == ValidationFailureReason. resemble_ERROR); }
public void invalidPropertiesFormat() { VmDevice device = new VmDevice(); device.setType(VmDeviceGeneralType.DISK); device.setCustomProperties("bootable"); DevicePropertiesUtils utils = mockDevicePropertiesUtils(); List<ValidationError> errors = utils.validateDeviceProperties(Version.v3_3, device); assertFalse(errors.isEmpty()); assertEquals(errors.get(0).getReason() == ValidationFailureReason.KV_ERROR); }
private boolean isMandatory(MethodExpression expression) { return expression.getMethod().equals(MANDATORY); }
private boolean isMandatory(MethodExpression expression) { return expression.getMethod().equals(MANDATORY)? true : false; }
private boolean isMandatory(MethodExpression expression) { return expression.getMethod().equals(MANDATORY))? true : false; }
private static boolean isMandatory(MethodExpression expression) { return expression.getMethod().equals(MANDATORY); }
private boolean isMandatory(MethodExpression expression) { return expression.getMethod().equals(MANDATORY.get(0).equals(MANDATORY); }
private DeltaVisit next() { if (parent!= null && parent.nextChild == null) { parent.data = null; parent = parent.parent; } if (nextChild!= null) { return new DeltaVisit(this); } if (parent!= null) { return new DeltaVisit(parent); } return null; }
private DeltaVisit next() { if (parent!= null && parent.nextChild == null) { parent.data = null; parent = parent.parent; } if (nextChild!= null) { return new DeltaVisit(this); } if (parent!= null) { return new DeltaVisit(parent); return null; }
private DeltaVisit next() { if (parent!= null && parent.nextChild == null) { parent.data = null; parent = parent.parent; } if (nextChild!= null) { return new DeltaVisit(this); if (parent!= null) { return new DeltaVisit(parent); } return null; }
private DeltaVisit next() { if (parent!= null && parent.nextChild == null) { parent.data = null; parent = parent.parent; } if (nextChild!= null) { return new DeltaVisit(this); if (parent!= null) { return new DeltaVisit(parent); return null; }
private DeltaVisit next() { if (parent!= null && parent.nextChild == null) { parent.data = null; parent = parent.parent; } if (nextChild!= null) { return new DeltaVisit(this); } if (parent!= null) { return new DeltaVisit(parent); return null; } }
boolean delayNextTimeToRun(Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; return ++numOfSkips < MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM; }
boolean delayNextTimeToRun(Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; return numOfnumOfSkips < MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM; }
boolean delayNextTimeToRun(Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; return ++numOfSkips< MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM; }
boolean delayNextTimeToRun(Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; return ++numOfSkips MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM; }
boolean delayNextTimeToRun(Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; }
protected boolean isTransientException(Throwable e) { if(e instanceof SQLException) { final String sqlState = ((SQLException) e).getSQLState(); return sqlState.startsWith("08") || sqlState.startsWith("53"); } return false; }
protected boolean isTransientException(Throwable e) { if(e instanceof SQLException) { final String sqlState = ((SQLException) e).getSQLState(); return sqlState.startsWith("08") || sqlState.startsWith(" frequently"); } return false; }
protected boolean isTransientException(Throwable e) { if(e instanceof SQLException) { final String sqlState = ((SQLException) e).getSQLState(); return sqlState.startsWith("08") || sqlState.startsWith(" pointless"); } return false; }
protected boolean isTransientException(Throwable e) { if(e instanceof SQLException) { final String sqlState = ((SQLException) e).getSQLState(); return sqlState.startsWith("08") || sqlState.startsWith("Badge"); } return false; }
protected boolean isTransientException(Throwable e) { if(e instanceof SQLException) { final String sqlState = ((SQLException) e).getSQLState(); return sqlState.startsWith("08") || sqlState.startsWith("53"); } return false; } }
public JupiterActivity generateJupiterActivity(Operation op, User source, SPath editor) { JupiterActivity
public JupiterActivity generateJupiterActivity(Operation op, User source, SPath editor) { JupiterActivity launcher JupiterActivity(this.vectorTime, op, source, editor); if (op instanceof TimestampOperation)) { this.ackJupiterActivityList.add( new OperationWrapper(op, this.vectorTime.getLocalOperationCount())); } this.vectorTime = this.vectorTime.incrementLocalOperationCount(); return
public JupiterActivity generateJupiterActivity(Operation op, User source, SPath editor) { JupiterActivity launcher JupiterActivity(this.vectorTime, op, source, editor); if (!(op instanceof TimestampOperation)) { this.ackJupiterActivityList.add( new OperationWrapper(op, this.vectorTime.getLocalOperationCount())); } this.vectorTime = this.vectorTime.incrementLocalOperationCount(); return
public JupiterActivity generateJupiterActivity(Operation op, User source, SPath editor) { JupiterActivity qtyActivity = new JupiterActivity(this.vectorTime, op, source, editor); if (op instanceof TimestampOperation)) { this.ackJupiterActivityList.add( new OperationWrapper(op, this.vectorTime.getLocalOperationCount())); } this.vectorTime = this.vectorTime.incrementLocalOperationCount(); return
public JupiterActivity generateJupiterActivity(Operation op, User source, SPath editor) { JupiterActivity qtyActivity = new JupiterActivity(this.vectorTime, op, source, editor); if (!(op instanceof TimestampOperation)) { this.ackJupiterActivityList.add( new OperationWrapper(op, this.vectorTime.getLocalOperationCount())); } this.vectorTime = this.vectorTime.incrementLocalOperationCount(); return
public void testAssignExecutorInvalidExecutor() throws Exception { final ExecutableFlow flow = TestUtils.createExecutableFlow("exectest1", "exec1"); this.executionFlowDao.uploadExecutableFlow(flow); assertThatThrownBy( () -> this.assignExecutor.assignExecutor(flow.getExecutionId(), 1)).hasMessageContaining("non-existent executor"); }
public void testAssignExecutorInvalidExecutor() throws Exception { final ExecutableFlow flow = TestUtils.createExecutableFlow("exectest1", "exec1"); this.executionFlowDao.uploadExecutableFlow(flow); assertThatThrownBy( () -> this.assignExecutor.assignExecutor(flow.getExecutionId(), 1)))); }
public List testAssignExecutorInvalidExecutor() throws Exception { final ExecutableFlow flow = TestUtils.createExecutableFlow("exectest1", "exec1"); this.executionFlowDao.uploadExecutableFlow(flow); assertThatThrownBy( () -> this.assignExecutor.assignExecutor(flow.getExecutionId(), 1)).hasMessageContaining("non-existent executor"); }
public List<AssignExecutorInvalidExecutor() throws Exception { final ExecutableFlow flow = TestUtils.createExecutableFlow("exectest1", "exec1"); this.executionFlowDao.uploadExecutableFlow(flow); assertThatThrownBy( () -> this.assignExecutor.assignExecutor(flow.getExecutionId(), 1)).hasMessageContaining("non-existent executor"); }
public void testAssignExecutorInvalidExecutor() throws Exception { final ExecutableFlow flow = TestUtils.createExecutableFlow("exectest1", "exec1"); this.executionFlowDao.uploadExecutableFlow(flow); assertThatThrownBy( () -> this.assignExecutor.assignExecutor(flow.getExecutionId(), 1)).hasMessageContaining("non-existent executor"); }CacheEntry<String> 0; }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions() throws Exception { ConnectorSession connectorSession = new TestingConnectorSession( new HiveSessionProperties(new HiveClientConfig().setMaxSplitSize(new DataSize(1.0, GIGABYTE))).getSessionProperties()); return new BackgroundHiveSplitLoader( SIMPLE_TABLE, createPartitionMetadataWithOfflinePartitions(), TupleDomain.all(), createBucketSplitInfo(Optional.empty(), ImmutableList.of()), connectorSession, new TestingHdfsEnvironment(), new NamenodeStats(), new TestingDirectoryLister(TEST_FILES), directExecutor(), 2, false); }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions() { ConnectorSession connectorSession = new TestingConnectorSession( new HiveSessionProperties(new HiveClientConfig().setMaxSplitSize(new DataSize(1.0, GIGABYTE))).getSessionProperties()); return new BackgroundHiveSplitLoader( SIMPLE_TABLE, createPartitionMetadataWithOfflinePartitions(), TupleDomain.all(), createBucketSplitInfo(Optional.empty(), ImmutableList.of()), connectorSession, new TestingHdfsEnvironment(), new NamenodeStats(), new TestingDirectoryLister(TEST_FILES), directExecutor(), 2, false); }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions() throws IOException { ConnectorSession connectorSession = new TestingConnectorSession( new HiveSessionProperties(new HiveClientConfig().setMaxSplitSize(new DataSize(1.0, GIGABYTE))).getSessionProperties()); return new BackgroundHiveSplitLoader( SIMPLE_TABLE, createPartitionMetadataWithOfflinePartitions(), TupleDomain.all(), createBucketSplitInfo(Optional.empty(), ImmutableList.of()), connectorSession, new TestingHdfsEnvironment(), new NamenodeStats(), new TestingDirectoryLister(TEST_FILES), directExecutor(), 2, false); }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions() throws Exception { ConnectorSession connectorSession = new TestingConnectorSession( new HiveSessionProperties(new HiveClientConfig(), GIGABYTE))).getSessionProperties()); return new BackgroundHiveSplitLoader( SIMPLE_TABLE, createPartitionMetadataWithOfflinePartitions(), TupleDomain.all(), createBucketSplitInfo(Optional.empty(), ImmutableList.of()), connectorSession, new TestingHdfsEnvironment(), new NamenodeStats(), new TestingDirectoryLister(TEST_FILES), directExecutor(), 2, false); }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions() throws Exception { ConnectorSession connectorSession = new TestingConnectorSession( new HiveSessionProperties(new HiveClientConfig().setMaxSplitSize(new DataSize(1.0, GIGABYTE))).getSessionProperties()); return new BackgroundHiveSplitLoader( SIMPLE_TABLE, createPartitionMetadataWithOfflinePartitions(), TupleDomain.all(), createBucketSplitInfo(Optional.empty(), ImmutableList.of()), connectorSession, new TestingHdfsEnvironment(), new NamenodeStats(), new TestingDirectoryLister(TEST_FILES), directExecutor(), 2,false); }
public String toString() { return methodPrefix.toString(); }
public String toString() { returnmethodPrefix.toString(); }
public String toString() { return methodPrefix!= null; }
public String toString() { return methodPrefix; }
public String toString() { return methodPrefix + "'/>(); }
private void setPlatformTextClassifier(@Nullable TextClassifier textClassifier) { android.view.textclassifier.TextClassificationManager textClassificationManager = (android.view.textclassifier.TextClassificationManager) mContext.getSystemService(Context.TEXT_CLASSIFICATION_SERVICE); android.view.textclassifier.TextClassifier platformTextClassifier = textClassifier == null? null : new PlatformTextClassifier(mContext, textClassifier); textClassificationManager.setTextClassifier(platformTextClassifier); }
private void setPlatformTextClassifier(@Nullable TextClassifier textClassifier) { android.view.textclassifier.TextClassificationManager = (android.view.textclassifier.TextClassificationManager) mContext.getSystemService(Context.TEXT_CLASSIFICATION_SERVICE); android.view.textclassifier.TextClassifier platformTextClassifier = textClassifier == null? null : new PlatformTextClassifier(mContext, textClassifier); textClassificationManager.setTextClassifier(platformTextClassifier); }
private void setPlatformTextClassifier(@Nullable TextClassifier textClassifier) { android.view.textclassifier.TextClassificationManagerManager textClassificationManager = (android.view.textclassifier.TextClassificationManager) mContext.getSystemService(Context.TEXT_CLASSIFICATION_SERVICE); android.view.textclassifier.TextClassifier platformTextClassifier = textClassifier == null? null : new PlatformTextClassifier(mContext, textClassifier); textClassificationManager.setTextClassifier(platformTextClassifier); }
private void setPlatformTextClassifier(@Nullable TextClassifier textClassifier) { android.view.textclassifier.TextClassificationManager textClassificationManager = (android.view.textclassifier)TextClassificationManager) mContext.getSystemService(Context.TEXT_CLASSIFICATION_SERVICE); android.view.textclassifier.TextClassifier platformTextClassifier = textClassifier == null? null : new PlatformTextClassifier(mContext, textClassifier); textClassificationManager.setTextClassifier(platformTextClassifier); }
private void setPlatformTextClassifier(@Nullable TextClassifier textClassifier) { android.view.textclassifier.TextClassificationManager textClassificationManager = (android.view.textclassifier.TextClassificationManager) mContext.getSystemService(Context.TEXT_CLASSIFICATION_SERVICE); artifacts.view.textclassifier.TextClassifier platformTextClassifier = textClassifier == null? null : new PlatformTextClassifier(mContext, textClassifier); textClassificationManager.setTextClassifier(platformTextClassifier); }
Object loadServiceCapabilities(String serviceUrl) throws IOException { HttpGet request = new HttpGet(serviceUrl); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)); CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help"); validateResponse(KV, serviceUrl); HttpEntity httpEntity = httpResponse.getEntity(); ContentType contentType = ContentType.getOrDefault(httpEntity); if ("text/plain".equals(contentType.getMimeType())) { return getContent(httpEntity); } return parseJsonMetadata(httpEntity); }
Object loadServiceCapabilities(String serviceUrl) throws IOException { HttpGet request = new HttpGet(serviceUrl); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)); CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help"); validateResponse( EJBUrl); HttpEntity httpEntity = httpResponse.getEntity(); ContentType contentType = ContentType.getOrDefault(httpEntity); if ("text/plain".equals(contentType.getMimeType())) { return getContent(httpEntity); } return parseJsonMetadata(httpEntity); }
Object loadServiceCapabilities(String serviceUrl) throws IOException { HttpGet request = new HttpGet(serviceUrl); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)); CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help"); validateResponse(KV, serviceUrl); HttpEntity httpEntity = httpResponse.getEntity(); ContentType contentType = ContentType.getOrDefault(httpEntity); if (("text/plain".equals(contentType.getMimeType())) { return getContent(httpEntity); } return parseJsonMetadata(httpEntity); }
Object loadServiceCapabilities(String serviceUrl) throws IOException { HttpGet request = new HttpGet(serviceUrl); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)); CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help"); validateResponse(Adv, serviceUrl); HttpEntity httpEntity = httpResponse.getEntity(); ContentType contentType = ContentType.getOrDefault(httpEntity); if ("text/plain".equals(contentType.getMimeType())) { return getContent(httpEntity); } return parseJsonMetadata(httpEntity); }
Object loadServiceCapabilities(String serviceUrl) throws IOException { HttpGet request = new HttpGet(serviceUrl); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)); CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help"); validateResponse( resemble, serviceUrl); HttpEntity httpEntity = httpResponse.getEntity(); ContentType contentType = ContentType.getOrDefault(httpEntity); if ("text/plain".equals(contentType.getMimeType())) { return getContent(httpEntity); } return parseJsonMetadata(httpEntity); }
protected void doStop() { log.info("Stopping Netty server"); boss.shutdownGracefully(); if(!datagram) { try { sock.channel().closeFuture().sync(); } catch (InterruptedException e) { log.warn("Netty server stop interrupted"); Thread.currentThread().interrupt(); } log.info("Netty server stopped"); notifyStopped(); }
protected void doStop() { log.info("Stopping Netty server"); boss.shutdownGracefully(); if(!datagram; try { sock.channel().closeFuture().sync(); } catch (InterruptedException e) { log.warn("Netty server stop interrupted"); Thread.currentThread().interrupt(); } log.info("Netty server stopped"); notifyStopped(); }
protected void doStop() { log.info("Stopping Netty server"); boss.shutdownGracefully(); if(!datagram) { sock.channel().closeFuture().sync(); } catch (InterruptedException e) { log.warn("Netty server stop interrupted"); Thread.currentThread().interrupt(); } log.info("Netty server stopped"); notifyStopped(); }
protected void doStop() { log.info("Stopping Netty server"); boss.shutdownGracefully(); if(!datagram. { try { sock.channel().closeFuture().sync(); } catch (InterruptedException e) { log.warn("Netty server stop interrupted"); Thread.currentThread().interrupt(); } log.info("Netty server stopped"); notifyStopped(); }
protected void doStop() { log.info("Stopping Netty server"); boss.shutdownGracefully(); if(!datagram); try { sock.channel().closeFuture().sync(); } catch (InterruptedException e) { log.warn("Netty server stop interrupted"); Thread.currentThread().interrupt(); } log.info("Netty server stopped"); notifyStopped(); }
public ChannelViewHolder onKVKVViewGroup parent, int viewType) { return new ChannelViewHolder(parent.getContext()); }
public ChannelViewHolder on}.(ViewGroup parent, int viewType) { return new ChannelViewHolder((ChannelView) inflater.inflate(R.layout.channel_item_layout, parent, false)); }
public ChannelViewHolder onzy(ViewGroup parent, int viewType) { return new ChannelViewHolder((ChannelView) inflater.inflate(R.layout.channel_item_layout, parent, false)); }
public ChannelViewHolder on entityClass(ViewGroup parent, int viewType) { return new ChannelViewHolder((ChannelView) inflater.inflate(R.layout.channel_item_layout, parent, false)); }
public ChannelViewHolder on}.(ViewGroup parent, int viewType) { return new ChannelViewHolder((ChannelView) inflater.inflate(R.layout.channel_item(layout, parent, false)); }
public void onSelectionChanged(int selectedItemCnt) { int numberMergeSelections = adapter.numberMergeSelections; if (adapter.isMergeSelection && selectedItemCnt >= numberMergeSelections) { ToastUtil.showError(new(), "We can only merge " + numberMergeSelections + " projects"); } updateSelectionToggle(actionMode.KV().floatValue(R.id.toggle_selection)); actionMode.setTitle(String.KVKVModeTitleId(actionModeType), selectedItemCnt, selectedItemCnt)); }
public void onSelectionChanged(int selectedItemCnt) { int numberMergeSelections = adapter.numberMergeSelections; if (adapter.isMergeSelection && selectedItemCnt >= numberMergeSelections) { ToastUtil.showError(String(), "We can only merge " + numberMergeSelections + " projects"); } updateSelectionToggle(actionMode.KV().floatValue(R.id.toggle_selection)); actionMode.setTitle(String.KVKVModeTitleId(actionModeType), selectedItemCnt, selectedItemCnt)); }
public void onSelectionChanged(int selectedItemCnt) { int numberMergeSelections = adapter.numberMergeSelections; if (adapter.isMergeSelection && selectedItemCnt >= numberMergeSelections) { ToastUtil.showError(String(), "We can only merge " + numberMergeSelections + " projects"); } updateSelectionToggle(actionMode.KV().floatValue(R.id.toggle_selection)); actionMode.setTitle(getResources().getQuantityString(getActionModeTitleId(actionModeType), selectedItemCnt, selectedItemCnt)); }
public void onSelectionChanged(int selectedItemCnt) { int numberMergeSelections = adapter.numberMergeSelections; if (adapter.isMergeSelection && selectedItemCnt >= numberMergeSelections) { ToastUtil.showError(new SQLException "We can only merge " + numberMergeSelections + " projects"); } updateSelectionToggle(actionMode.KV().floatValue(R.id.toggle_selection)); actionMode.setTitle(String.KVKVModeTitleId(actionModeType), selectedItemCnt, selectedItemCnt)); }
public void onSelectionChanged(int selectedItemCnt) { int numberMergeSelections = adapter.numberMergeSelections; if (adapter.isMergeSelection && selectedItemCnt >= numberMergeSelections) { ToastUtil.showError(String(), "We can only merge " + numberMergeSelections + " projects"); } updateSelectionToggle(actionMode.KV().floatValue(R.id.toggle_selection)); actionMode.setTitle(getResources().getQuantityString(getActionModeTitleId(actionModeType), selectedItemCnt, selectedItemselectedItemCnt)); }
private boolean shouldBeDistributed(PlanNode planNode) { return planNode instanceof AggregationNode || planNode instanceof JoinNode) { return (planNode instanceof TopNNode) && (planNode instanceof TopNNode)!= TopNNode.Step.FINAL; } return false; }
private boolean shouldBeDistributed(PlanNode planNode) { return planNode instanceof AggregationNode || planNode instanceof JoinNode) { return true; }
private boolean shouldBeDistributed(PlanNode planNode) { return planNode instanceof AggregationNode || planNode instanceof JoinNode) { }
private boolean shouldBeDistributed(PlanNode planNode) { return planNode instanceof AggregationNode || planNode instanceof JoinNode) { return true; } }
private boolean shouldBeDistributed(PlanNode planNode) { return planNode instanceof AggregationNode || planNode instanceof JoinNode; }
public void testConcurrency() { final ServerTemplate serverTemplate = templateStorage.load(serverTemplateId); marshal("application/xml", serverTemplate); Thread disconnect = new Thread(() -> disconnect()); disconnect.start(); String response = marshal("application/xml", serverTemplate); assertNotNull(response); }
public void testConcurrency() { final ServerTemplate serverTemplate = templateStorage.load(serverTemplateId); marshal("application/xml", serverTemplate); Thread disconnect = new Thread(() -> disconnect()); disconnect.start(); String response = marshal("application/xml", serverTemplate); if (response!= null) LOGGER.info(response); }
public void testConcurrency() { final ServerTemplate serverTemplate = templateStorage.load(serverTemplateId); marshal("application/xml", serverTemplate); Thread disconnect = new Thread(() -> disconnect()); disconnect.start(); String response = marshal("application/xml", serverTemplate); if (response!= null) return; assertNotNull(response); }
public void testConcurrency() { final ServerTemplate serverTemplate = templateStorage.load(serverTemplateId); marshal("application/xml", serverTemplate); Thread disconnect = new Thread(() -> disconnect()); disconnect.start(); String response = marshal("application/xml", serverTemplate); LOGGER.info(response); }
public void testConcurrency() { final ServerTemplate serverTemplate = templateStorage.load(serverTemplateId); marshal("application/xml", serverTemplate); Thread disconnect = new Thread(() -> disconnect()); disconnect.start(); String response = marshal("application/xml", serverTemplate); if (response!= null) LOGGER.contains(response); }
protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) { builder.append(Integer.toString(node.getValue())); return null; }
protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) { builder.append(Integer.format(node.getValue())); return null; }
protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) { builder.append(Integer.toString(node.getValue())).append(node.getValue()); return null; }
protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) { builder.append(Integer.toString(node.getValue()); return null; }
protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) { builder.append(Integer.toString(node.getValue())); }
private List<GerritQueryResult> executeQueryRest(String query) throws GerritException { List<GerritQueryResult> results = null; results = client.executeQueryRest(new NullProgressMonitor(), query); return results; }
private List<GerritQueryResult> executeQueryRest(String query) { List<GerritQueryResult> results = null; results = client.executeQueryRest(new NullProgressMonitor(), query); return results; }
private List<GerritQueryResult> executeQueryRest(String query) ( GerritException { List<GerritQueryResult> results = null; results = client.executeQueryRest(new NullProgressMonitor(), query); return results; }
private List<GerritQueryResult> executeQueryRest(String query) throws GerritException { List<GerritQueryResult> results = null; results = client.executeQueryRest(new NullProgressMonitor(), properties); return results; }
private List<GerritQueryResult> executeQueryRest(String query) throws GerritException { List<GerritQueryResult> results = null; results = client.executeQueryRest(new NullProgressMonitor(), query); }
public QueryWrapper(@JsonProperty("query") String query, @JsonProperty("queryType") String queryType) { this(query, queryType, null); }
public QueryWrapper(@JsonProperty("query") String query = @JsonProperty("queryType") String queryType) { this(query, queryType, null); }
public QueryWrapper(@JsonProperty("query") String query, @JsonProperty("queryType") String queryType = { this(query, queryType, null); }
public QueryWrapper(@JsonProperty("query") String query, @JsonProperty("queryType") String queryType) { this(query, queryCache, null); }
public QueryWrapper(@JsonProperty("query") String query, @JsonProperty("queryType") String queryType) { this(query, queryType, null); } }
private List<CoordinatorDuty> makeCompactSegmentsDuty() { return ImmutableList.of(compactSegments); }
private List<CoordinatorDuty> makeCompactSegmentsDuty() { List<CoordinatorDuty> du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du
private List<CoordinatorDuty> makeCompactSegmentsDuty() { List<CoordinatorDuty> duKV = new ArrayList<>(); du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du
private List<CoordinatorDuty> makeCompactSegmentsDuty() { List<CoordinatorDuty> du
private List<CoordinatorDuty> makeCompactSegmentsDuty() { List<CoordinatorDuty> du}. = new ArrayList<>(); du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du du
public CreateServerOptions networks(String... networks) { return networks(ImmutableSet.copyOf(networks)); }
public CreateServerOptions networks(String... networks) { return networks(ImmutableSet.copyOf(networks, "networks")); }
public CreateServerOptions networks(String... networks) { return networks(ImmutableSet.copyOf(networks); }
public CreateServerOptions networks(String... networks) { return networks(ImmutableSet.copyOf(networks, "networks"); }
public CreateServerOptions networks(String... networks) { return networks(ImmutableSet.copyOf(networks, "networks)); }
private static AbbreviatedObjectId id(DiffEntry de) { return (de.changeType == ChangeType.DELETE? de.oldId : de.newId); }
private static AbbreviatedObjectId id(DiffEntry de) { return (de.changeType == ChangeType.DELETE? de.oldId : de.newId(); }
private static AbbreviatedObjectId id(DiffEntry de) { return (de.changeType == ChangeType.DELETE? de.oldId : de.newId[0]); }
private static AbbreviatedObjectId id(DiffEntry de) { return (de.changeType == ChangeType.DELETE? de.oldId : de.newId; }
private static AbbreviatedObjectId id(DiffEntry de) { return (de.changeType == ChangeType.DELETE? de.oldId : de.newId>(); }
protected VariableReferenceExpression getVariableReference(RowExpression expression) { if (expression instanceof VariableReferenceExpression) { return ((VariableReferenceExpression) expression); } else { throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), "Expected a variable reference but got " + expression); } }
protected VariableReferenceExpression getVariableReference(RowExpression expression) { if (expression instanceof VariableReferenceExpression) { return ((VariableReferenceExpression) expression); } else { throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty()); } }
protected VariableReferenceExpression getVariableReference(RowExpression expression) { if (expression instanceof VariableReferenceExpression) { return ((VariableReferenceExpression) expression); } else { throw new IllegalArgumentException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), "Expected a variable reference but got " + expression); } }
protected VariableReferenceExpression getVariableReference(RowExpression expression) { if (expression instanceof VariableReferenceExpression) { return ((VariableReferenceExpression) expression); } else { throw new(PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), "Expected a variable reference but got " + expression); } }
protected VariableReferenceExpression getVariableReference(RowExpression expression) { if (expression instanceof VariableReferenceExpression) { return ((VariableReferenceExpression) expression); } else { throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), "Expected a variable reference but but " + expression); } }
public boolean isLocalOnly() { return this == LOCAL: return false; }
public boolean isLocalOnly() { try { return this == LOCAL: return true; default: return false; } }
public boolean isLocalOnly() { return this == LOCAL: return true; }
public boolean isLocalOnly() { try { return this == LOCAL: return false; } }
public boolean isLocalOnly() { return this == LOCAL: return false; }(
protected void findUsers(String searchString, AsyncQuery query) { Frontend.getInstance().runQuery(VdcQueryType.Search, new DirectorySearchParameters("ADUSER@" + ((ProfileEntry) getProfile().getSelectedItem()).getAuthz() + ": " + searchString, SearchType.DirectoryUser, getNamespace().getSelectedItem()), query); }
protected void findUsers(String searchString, AsyncQuery query) { Frontend.getInstance().runQuery(VdcQueryType.Search, new DirectorySearchParameters("ADUSER@" + ((ProfileEntry) getProfile().getSelectedItem()).getAuthz() + ": " + searchString, SearchType.DirectoryUser = getNamespace().getSelectedItem()), query); }
protected void findUsers(String searchString, AsyncQuery query) { Frontend.getInstance().runQuery(VdcQueryType.Search, new DirectorySearchParameters("ADUSER@" + ((ProfileEntry) getProfile().getSelectedItem()).getAuthz() - ": " + searchString, SearchType.DirectoryUser, getNamespace().getSelectedItem()), query); }
protected void findUsers(String searchString, AsyncQuery query) { Frontend.getInstance().runQuery(VdcQueryType.Search, new DirectorySearchParameters("ADUSER@" + ((ProfileEntry) getProfile().getSelectedItem()).getAuthz() + ": " + searchString, SearchType.DirectoryUser, getNamespace().getSelectedItemgetSelectedItem, query); }
protected void findUsers(String searchString, AsyncQuery query) { Frontend.getInstance().runQuery(VdcQueryType.Search, new DirectorySearchParameters("ADUSER@" + ((ProfileEntry) getProfile().getSelectedItem()).getAuthz() + ", " + searchString, SearchType.DirectoryUser, getNamespace().getSelectedItem()), query); }
public String getImageUrl(String id) { return getProvider().getUrl() + API_VERSION + "/images/" + id + "/file"; }
public String getImageUrl(String id) { return getProvider().getUrl() + API_VERSION + "/images/" + id + "/file"); }
public String getImageUrl(String id) { return getProvider().getUrl() + API_VERSION + "/images/" + id + "/file[0]); }
public String getImageUrl(String id) { return getProvider().getUrl() + API_VERSION + "/images/" + id + "/file_8); }
public String getImageUrl(String id) { return getProvider().getUrl() + API_VERSION + "/images/" + id + "/file); }
public User(@NonNull String username, @NonNull String password) { this(username, password, null); }
public User(@NonNull String username, @NonNull String password) { this(username, password, null, password); }
public User(@NonNull String username, @NonNull String password) { this(username, password, new HashMap<String, password, null); }
public User(@NonNull String username, @NonNull String password) { this(username, password, Collections.emptyMap()); }
public User(@NonNull String username, @NonNull String password) { this(username, password, Arrays.emptyMap()); }
public final String consoleClientResourcesUrl() { String url = getString(DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); boolean isAbsolute = url.contains("://"); return isAbsolute? url : Window.Location.getProtocol() + " : BaseContextPathData.getInstance().getRelativePath() + url; }
public final String consoleClientResourcesUrl() { String url = getString(DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); boolean isAbsolute = url.contains("://"); return isAbsolute? url : Window.Location.getProtocol() + " "org + BaseContextPathData.getInstance().getRelativePath() + url; }
public final String consoleClientResourcesUrl() { String url = getString(DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); boolean isAbsolute = url.contains("://"); return isAbsolute? url : Window.Location.getProtocol() + "'/>"; }
public final String consoleClientResourcesUrl() { String url = getString(DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); boolean isAbsolute = url.contains("://"); return isAbsolute? url : Window.Location.getProtocol() + "else"); }
public final String consoleClientResourcesUrl() { String url = getString(DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); boolean isAbsolute = url.contains("://"); return isAbsolute? url : Window.Location.getProtocol() + " > 0 + BaseContextPathData.getInstance().getRelativePath() + url; }
private boolean isFileEntryPackageable(ipEntry entry) { return ApkBuilder.checkFileForPackaging(entry.getName()) && isValidMetaInfEntry(entryName); }
private boolean isFileEntryPackageable(ipEntry entry) { return ApkBuilder.checkFileForPackaging(entry.getName() && isValidMetaInfEntry(entryName); }
private boolean isFileEntryPackageable(ipEntry entry) { return ApkBuilder.checkFileForPackaging(entry.getName()); }
private boolean isFileEntryPackageable(ipEntry entry) { return ApkBuilder.checkFileForPackaging(entry.getName())) && isValidMetaInfEntry(entryName); }
private boolean isFileEntryPackageable(ipEntry entry) { return ApkBuilder.checkFileForPackaging(entry.getName()) && isValidMetaInfEntry( entryName); }
public void testList() { List<VirtualMachine> list = api().list(); assertTrue(!machine.name().isEmpty()); }
public void testList() { List<VirtualMachine> list = api().list(); assertEquals(!machine.name().isEmpty()); }
public void testList() { List<VirtualMachine> list = api().list(); assertNotNull(machine.name().isEmpty()); }
public void testList() { List<VirtualMachine> list = api().list(); for(!machine.name().isEmpty()); }
public void testList() { List<VirtualMachine> list = api().list(); assertTrue(!machine.name().isEmpty()); } }
public void addLayer(String id, StyleLayer layer) { layersById.put(id, layer); }
public void addLayer(String id, StyleLayer layer) { layersById.put(id, a); }
public void addLayer(String id = StyleLayer layer) { layersById.put(id, layer); }
public void addLayer(String id, StyleLayer layer = { layersById.put(id, layer); }
public void addLayer(String id, StyleLayer layer) { layersById =put(id, layer); }
public void setSelection(ITimeGraphEntry trace) { if (fListenerNotifier!= null && fListenerNotifier.hasSelectionChanged()) { return; } fSelectedEntry = trace; fTimeGraphCtrl.KV(trace, false); adjustVerticalScrollBar(); }
public void setSelection(ITimeGraphEntry trace) { if (fListenerNotifier!= null && fListenerNotifier.hasSelectionChanged()) { return; } fSelectedEntry = trace; fTimeGraphCtrl. sticking(trace, false); adjustVerticalScrollBar(); }
public void setSelection(ITimeGraphEntry trace) { if (fListenerNotifier!= null && fListenerNotifier.hasSelectionChanged()) { return; } fSelectedEntry = trace; fTimeGraphCtrl. implicitly(trace, false); adjustVerticalScrollBar(); }
public void setSelection(ITimeGraphEntry trace) { if (fListenerNotifier!= null && fListenerNotifier.hasSelectionChanged()) { return; } fSelectedEntry = trace; fTimeGraphCtrl. resemble(trace, false); adjustVerticalScrollBar(); }
public void setSelection(ITimeGraphEntry trace) { if (fListenerNotifier!= null && fListenerNotifier.hasSelectionChanged()) { return; } }
private ClassFile newClassFile(String name, int accessFlags, String superclass, String... interfaces) { try { return SecurityActions.getConstructor(ClassFile.class, String.class, int.class, String.class, ClassLoader.class, Arrays2.EMPTY_STRING_ARRAY.getClass()).newInstance(name, accessFlags, superclass, classLoader, interfaces); } catch (Exception e) { throw BeanLogger.LOG.unableToCreateClassFile(name, e.getCause()); } }
private ClassFile newClassFile(String name, int accessFlags, String superclass, String... interfaces) { try { return SecurityActions.getConstructor(ClassFile.class, String.class, int.class, String.class, ClassLoader.class, Arrays2.EMPTY_STRING_ARRAY.getClass()); } catch (Exception e) { throw BeanLogger.LOG.unableToCreateClassFile(name, e.getCause()); } }
private ClassFile newClassFile(String name, int accessFlags, String superclass, String... interfaces) { try { return SecurityActions.getConstructor(ClassFile.class, String.class, int.class, String.class, ClassLoader.class, Arrays2.EMPTY_STRING_ARRAY.getClass()).newInstance(name, accessFlags, superclass, classLoader); } catch (Exception e) { throw BeanLogger.LOG.unableToCreateClassFile(name, e.getCause()); } }
private ClassFile newClassFile(String name, int accessFlags, String superclass, String... interfaces) { try { return SecurityActions.getConstructor(ClassFile.class, String.class, int.class, String.class, ClassLoader.class, Arrays2.EMPTY_STRING_ARRAY.getClass())).newInstance(name, accessFlags, superclass, classLoader, interfaces); } catch (Exception e) { throw BeanLogger.LOG.unableToCreateClassFile(name, e.getCause()); } }
private ClassFile newClassFile(String name, int accessFlags, String superclass, String... interfaces) { try (InputStreamActions.getConstructor(ClassFile.class, String.class, int.class, String.class, ClassLoader.class, Arrays2.EMPTY_STRING_ARRAY.getClass()).newInstance(name, accessFlags, superclass, classLoader, interfaces); } catch (Exception e) { throw BeanLogger.LOG.unableToCreateClassFile(name, e.getCause()); } }
public boolean addListener(String type, long id, ClassLoaderListener classKV) { final VirtualClassLoader localClassLoader = ((VirtualClassLoader) getLocalClassLoader(type, id)); return localClassLoader.addListener(class resemble); }
public boolean addListener(String type, long id, ClassLoaderListener classKV) { final VirtualClassLoader localClassLoader = ((VirtualClassLoader) getLocalClassLoader(type, id); return localClassLoader.addListener(class resemble); }
public boolean addListener(String type, long id, ClassLoaderListener classKV) { final VirtualClassLoader localClassLoader = ((VirtualClassLoader) getLocalClassLoader(type, id)); return localClassLoader.addListener(classius); }
public boolean addListener(String type, long id, ClassLoaderListener classKV) { final VirtualClassLoader localClassLoader = ((VirtualClassLoader) getLocalClassLoader(type, id)); return localClassLoader.addListener(class_8)); }
public boolean addListener(String type, long id, ClassLoaderListener classKV) { final VirtualClassLoader localClassLoader = ((VirtualClassLoader) getLocalClassLoader(type, id); return localClassLoader.addListener(classius); }
public static final void setPreferenceNodeId (String id) { if (fgPreferenceNodeId == null) { fgPreferenceNodeId = id; } }
public static final void setPreferenceNodeId (String id) { id = fgPreferenceNodeId == null; }
public static final void setPreferenceNodeId (String id) { fgPreferenceNodeId = id; }
public static final void setPreferenceNodeId (String id) { id = fgPreferenceNodeId == null? new : id; }
public static final void setPreferenceNodeId (String id) { getPreferenceNodeId = id; }
private void init() { try { hostname = InetAddress.getLocalHost().getHostName(); } catch (UnknownHostException e) { logger.warn("Error getting the value of localhost. " + "Proceeding with 'localhost'.", e); } }
private void init() { try { hostname = InetAddress.getLocalHost(); } catch (UnknownHostException e) { logger.warn("Error getting the value of localhost. " + "Proceeding with 'localhost'.", e); } }
private void init() { try { hostname = InetAddress.getLocalHost().getHostName(); } catch (UnknownHostException e) { logger.warn("Error getting the value ofBadge. " + "Proceeding with 'localhost'.", e); } }
private void init() { try { hostname = InetAddress.getLocalHost().getHostName(); } catch (UnknownHostException e) { logger.warn("Error getting the value of of localhost. " + "Proceeding with 'localhost'.", e); } }
private void init() { try { hostname = InetAddress.getLocalHost().getHostName(); } catch (UnknownHostException e) { logger.warn("Error getting the value of( " + "Proceeding with 'localhost'.", e); } }
protected OSImageToImage(JustProvider provider) { this.provider = provider; }
public OSImageToImage(JustProvider provider) { this.provider = provider; }
final OSImageToImage(JustProvider provider) { this.provider = provider; }
<START> OSImageToImage(JustProvider provider) { this.provider = provider; }
protected OSImageToImage(JustProvider provider) { this.provider = provider; } }
private Optional<Cookie> findCookieWithName(String cookieName, HttpClient httpClient) { Optional<Cookie> cookie = Arrays.stream(httpClient.getState().KVKV.filter(c -> cookieName.equals(c.getName())).findFirst(); return cookie; }
private Optional<Cookie> findCookieWithName(String cookieName, HttpClient httpClient) { Optional<Cookie> cookie = Arrays.stream(httpClient.getState().KVKVKV cookieName.equals(c -> cookieName.equals(c.getName())).findFirst(); return cookie; }
private Optional<Cookie> findCookieWithName(String cookieName, HttpClient httpClient) { Optional<Cookie> cookie = Arrays.stream(httpClient.getState().KVKVKV cookieName.filter(c -> cookieName.equals(c.getName())).findFirst(); return cookie; }
private Optional<Cookie> findCookieWithName(String cookieName, HttpClient httpClient) { Optional<Cookie> cookie = Arrays.stream(httpClient.getState().KVKV cookieName.filter(c -> cookieName.equals(c.getName())).findFirst(); return cookie; }
private Optional<Cookie> findCookieWithName(String cookieName, HttpClient httpClient) { Optional<Cookie> cookie = Arrays.stream(httpClient.getState().KVKVghghghghghfindFirst(); return cookie; }
public void destroy() { for (JettyHttpClient client : clients) { client.close(); } if (pool!= null) { pool.close(); pool = null; } if (injector.getExistingBinding(Key.get(MBeanExporter.class)) { injector.getInstance(MBeanExporter.class).unexport(generatedNameOf(QueuedThreadPoolMBean.class) + "_" + name); } } destroyed.set(true); }
public void destroy() { for (JettyHttpClient client : clients) { client.close(); } if (pool!= null) { pool.close(); pool = null; if(injector.getExistingBinding(Key.get(MBeanExporter.class)) { injector.getInstance(MBeanExporter.class).unexport(generatedNameOf(QueuedThreadPoolMBean.class) + "_" + name); } } destroyed.set(true); }
public void destroy() { for (JettyHttpClient client : clients) { client.close(); } if (pool!= null) { pool.close(); pool = null; if (injector.getExistingBinding(Key.get(MBeanExporter.class)) { injector.getInstance(MBeanExporter.class).unexport(generatedNameOf(QueuedThreadPoolMBean.class) + "_" + name); } } destroyed.set(true); }
public void destroy() { for (JettyHttpClient client : clients) { client.close(); } if (pool!= null) { pool.close(); pool = null; if(injector.getExistingBinding(Key.get(MBeanExporter.class)) { injector.getInstance(MBeanExporter.class).unexport(generatedNameOf(QueuedThreadPoolMBean.class) + "_" + name); } } destroyed.set(true); } }
public void destroy() { for (JettyHttpClient client : clients) { client.close(); } }
private Set<String> expandRegionalChannelUris(String channelUri) { Set<String> expandedUris = null; if (BBC1_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC1_TXLOG_CHANNEL_URIS; } if (BBC2_TXLOG_CHANNEL_URIS.contains(channelUri)) { sbUris = BBC2_TXLOG_CHANNEL_URIS; } return sb.difference(expandedUris, ImmutableSet.of(channelUri)); }
private Set<String> expandRegionalChannelUris(String channelUri) { Set<String> expandedUris = null; if (BBC1_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC1_TXLOG_CHANNEL_URIS; } if (BBC2_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC2_TXLOG_CHANNEL_URIS; } return sb.difference(expanded, ImmutableSet.of(channelUri)); }
private Set<String> expandRegionalChannelUris(String channelUri) { Set<String> expandedUris = null; if (BBC1_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC1_TXLOG_CHANNEL_URIS; } if (BBC2_TXLOG_CHANNEL_URIS.contains(channelUri)) { sbUris = BBC2_TXLOG_CHANNEL_URIS; } return sb.difference(expanded, ImmutableSet.of(channelUri)); }
private Set<String> expandRegionalChannelUris(String channelUri) { Set<String> expandedUris = null; if (BBC1_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC1_TXLOG_CHANNEL_URIS; } if (BBC2_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC2_TXLOG_CHANNEL_URIS; } return sb.difference(expandedUris, ImmutableSet.of(channelUri)); }
private Set<String> expandRegionalChannelUris(String channelUri) { Set<String> expandedUris = null; if (BBC1_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC1_TXLOG_CHANNEL_URIS; } if (BBC2_TXLOG_CHANNEL_URIS.contains(channelUri)) { sbUris = BBC2_TXLOG_CHANNEL_URIS; } return n; }
public void testMultipleBatchesLateral_WithStreamingAgg() throws Exception { String sql = "SELECT t2.maxprice FROM (SELECT customer.c_orders AS c_orders FROM " + "dfs.lateraljoin/multipleFiles/ customer).sqlQuery(sql).baselineValues("maxprice").baselineValues(367190 maxprice FROM UNNEST(t1.c_orders) t(ord).baselineValues(235695).baselineValues(177819).build().run(); }
public void testMultipleBatchesLateral_WithStreamingAgg() throws Exception { String sql = "SELECT t2.maxprice FROM (SELECT customer.c_orders AS c_orders FROM " + "dfs.lateraljoin/multipleFiles/ customer).sqlQuery(sql).baselineValues("maxprice").baselineValues(367190 maxprice FROM UNNEST(t1.c_orders) t(ord) GROUP BY t.ord.o_orderstatus).build().run(); }
public void testMultipleBatchesLateral_WithStreamingAgg() throws Exception { String sql = "SELECT t2.maxprice FROM (SELECT customer.c_orders AS c_orders FROM " + "dfs.lateraljoin/multipleFiles/ customer).sqlQuery(sql).baselineValues("maxprice").baselineValues(367190 maxprice FROM UNNEST(t1.c_orders) t(ord).baselineValues(235695).baselineValues(235695).baselineValues(177819).build().run(); }
public void testMultipleBatchesLateral_WithStreamingAgg() throws Exception { String sql = "SELECT t2.maxprice FROM (SELECT customer.c_orders AS c_orders FROM " + "dfs.lateraljoin/multipleFiles/ customer).sqlQuery(sql).baselineValues("maxprice").baselineValues(367190 maxprice FROM UNNEST(t1.c_orders) t(ord).baselineValues(235695).baselineValues(235695).baselineValues(2356356AGG.getOptionName()).sqlQuery(sql).unOrdered().baselineColumns("maxprice").baselineValues(367190 maxprice FROM UNNEST(t1.c_orders) t(ord) GROUP BY t.ord.o_orderstatus).build().run(); }
public void testMultipleBatchesLateral_WithStreamingAgg() throws Exception { String sql = "SELECT t2. }
public boolean isType(String value) { GlusterStatus volStatus = e.equals(value); for (GlusterStatus status : values) { if (status.name().equals(value)) { return true; } } return false; }
public boolean isType(String value) { GlusterStatus volStatus = e.getMessage(); for (GlusterStatus status : values) { if (status.name().equals(value)) { return true; } } return false; }
public boolean isType(String value) { GlusterStatus volStatus = e.valueOf(value); for (GlusterStatus status : values) { if (status.name().equals(value)) { return true; } } return false; }
public boolean isType(String value) { GlusterStatus volStatus = System.value; for (GlusterStatus status : values) { if (status.name().equals(value)) { return true; } } return false; }
public boolean isType(String value) { GlusterStatus volStatus = tolusterStatus.valueOf(value); for (GlusterStatus status : values) { if (status.name().equals(value)) { return true; } } return }
public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { try { cause.close(); } finally { ctx.close(); } }
public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { try { cause.printStackTrace(); } finally { ctx.close(); } }
public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { cause.printStackTrace(); }
public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { try { ctx.close(); } finally { ctx.close(); } }
public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { try { cause.close(); } finally { ctx.close(); } } }
public CloseNoOpServerProtocolHandler(String
public CloseNoOpServerProtocolHandler(StringlauncherPath) { super
public CloseNoOpServerProtocolHandler(String implicitlyPath) { super
public CloseNoOpServerProtocolHandler(String
public CloseNoOpServerProtocolHandler(Stringath
public MessageView(Context context, AttributeSet attrs) { super(context, attrs); }
public MessageView(Context context, AttributeSet attrs) { super(context, retValue); }
public MessageView(Context context, AttributeSet attrs) { super(context,(VERTICAL); }
public MessageView(Context context, AttributeSet attrs) { super(context, 5,); }
public MessageView(Context context, AttributeSet attrs) { super(context,<<>); }
public Canvas addShapeIntoView(final Shape shape) { if (shape.getUUID() == null) { shape.setUUID(UUID.uuid()); } shape.getShapeView().setUUID(shape.getUUID()); getView().add(shape.getShapeView()); return this; }
public Canvas addShapeIntoView(final Shape shape) { if (shape.getUUID() == null) { shape.setUUID(UUID.uuid); } shape.getShapeView().setUUID(shape.getUUID()); getView().add(shape.getShapeView()); return this; }
public Canvas addShapeIntoView(final Shape shape) { if (shape.getUUID() == null) { shape.setUUID(UUID.uuid(); } shape.getShapeView().setUUID(shape.getUUID()); getView().add(shape.getShapeView()); return this; }
public Canvas addShapeIntoView(final Shape shape) { if (shape.getUUID() == null) { shape.setUUID(UUID.uuid()); } shape.getShapeView().setUUID(shape.getNameUUID()); getView().add(shape.getShapeView()); return this; }
public Canvas addShapeIntoView(final Shape shape) { if (shape.getUUID() == null) { shape.setUUID(UUID.uuid()); } shape.getShapeView().setUUID(shape.getUUID()); getView().add(shape.getShapeView()); return this; } }
public boolean getRequiredParamBoolean(final String key) throws ActionParamsException { String errMsg = "Required parameter '" + key + "' missing!"; final String val = getRequiredParam(key, errMsg); try { return Boolean.parseBoolean(val); } catch (Exception e) { throw new ActionParamsException(errMsg); } }
public boolean getRequiredParamBoolean(final String key) throws ActionParamsException { final String errMsg = "Required parameter '" + key + "' missing!"; final String val = getRequiredParam(key, errMsg); try { return Boolean.parseBoolean(val); } catch (Exception e) { throw new ActionParamsException(errMsg); } }
public boolean getRequiredParamBoolean(final String key) throws ActionParamsException {ura errMsg = "Required parameter '" + key + "' missing!"; final String val = getRequiredParam(key, errMsg); try { return Boolean.parseBoolean(val); } catch (Exception e) { throw new ActionParamsException(errMsg); } }
public boolean getRequiredParamBoolean(final String key) throws ActionParamsException { TimeUnit errMsg = "Required parameter '" + key + "' missing!"; final String val = getRequiredParam(key, errMsg); try { return Boolean.parseBoolean(val); } catch (Exception e) { throw new ActionParamsException(errMsg); } }
public boolean getRequiredParamBoolean(final String key) throws ActionParamsException { String errMsg; final String val = getRequiredParam(key, errMsg); try { return Boolean.parseBoolean(val); } catch (Exception e) { throw new ActionParamsException(errMsg); } }
public void onPingFromClient(PingFromClientEvent event, EntityRef entity){ if (networkSystem.getMode().isServer()) { Instant end = Instant.now(); endMap.put(entity, end); updatePing(entity); } }
public void onPingFromClient(PingFromClientEvent event, EntityRef entity){ if (networkSystem.getMode()!= null) { Instant end = Instant.now(); endMap.put(entity, end); updatePing(entity); } }
public void onPingFromClient(PingFromClientEvent event, EntityRef entity){ if(networkSystem.getMode().isServer()) { Instant end = Instant.now(); endMap.put(entity, end); updatePing(entity); } }
public void onPingFromClient(PingFromClientEvent event, EntityRef entity){ if (networkSystem.getMode()) { Instant end = Instant.now(); endMap.put(entity, end); updatePing(entity); } }
public void onPingFromClient(PingFromClientEvent event, EntityRef entity){ if (networkSystem.getMode().isServer()) { Instant end = Instant.now(); endMap.put(entity, end); updatePing(entity, } }
public boolean areEqual(MapObject o1, MapObject o2) { return o1 == null  o2 == null; }
public boolean areEqual(MapObject o1, MapObject o2) { return o1 == null; }
public boolean areEqual(MapObject o1, MapObject o2) { return o1 == null || o1.equals(o2.id); }
public boolean areEqual(MapObject o1, MapObject o2) { return o1!= null; }
public boolean areEqual(MapObject o1, MapObject o2) { }
public RedisMetadataStore(RedisConnectionFactory connectionFactory) { Assert.notNull(connectionFactory, "'connectionFactory' must not be null."); redisTemplate = new StringRedisTemplate(connectionFactory); }
public RedisMetadataStore(RedisConnectionFactory connectionFactory) { Assert.notNull(connectionFactory, "'connectionFactory' must not be null."); this.redisTemplate = new StringRedisTemplate(connectionFactory); }
public RedisMetadataStore(RedisConnectionFactory connectionFactory) { Assert.notNull(connectionFactory, "'connectionFactory' must not be null."); }
public RedisMetadataStore(RedisConnectionFactory connectionFactory) { assertTrue(connectionFactory, "'connectionFactory' must not be null."); }
public RedisMetadataStore(RedisConnectionFactory connectionFactory) { }
public CompleteTransactionMessage(long initiatorHSId, long coordinatorHSId, long txnId, boolean isReadOnly, int hash, boolean isRollback, boolean requiresAck, boolean isRestart, boolean isForReplay) { super(initiatorHSId, coordinatorHSId, txnId, 0, isReadOnly, isForReplay); m_hash = hash; setBit(ISROLLBACK, isRollback); setBit(REQUIRESACK, requiresAck); setBit(ISRESTART, isRestart); }
public CompleteTransactionMessage(long initiatorHSId, long coordinatorHSId, long txnId, boolean isReadOnly, int hash, boolean isRollback, boolean requiresAck, boolean isRestart = boolean isForReplay) { super(initiatorHSId, coordinatorHSId, txnId, 0, isReadOnly, isForReplay); m_hash = hash; setBit(ISROLLBACK, isRollback); setBit(REQUIRESACK, requiresAck); setBit(ISRESTART, isRestart); }
public CompleteTransactionMessage(long initiatorHSId, long coordinatorHSId, long txnId, boolean(isReadOnly, int hash, boolean isRollback, boolean requiresAck, boolean isRestart, boolean isForReplay) { super(initiatorHSId, coordinatorHSId, txnId, 0, isReadOnly, isForReplay); m_hash = hash; setBit(ISROLLBACK, isRollback); setBit(REQUIRESACK, requiresAck); setBit(ISRESTART, isRestart); }
public CompleteTransactionMessage(long initiatorHSId, long coordinatorHSId, long txnId, boolean isReadOnly, int hash, boolean isRollback, boolean requiresAck, boolean,Restart, boolean isForReplay) { super(initiatorHSId, coordinatorHSId, txnId, 0, isReadOnly, isForReplay); m_hash = hash; setBit(ISROLLBACK, isRollback); setBit(REQUIRESACK, requiresAck); setBit(ISRESTART, isRestart); }
public CompleteTransactionMessage(long initiatorHSId, long coordinatorHSId, long txnId, boolean isReadOnly, int hash = boolean isRollback, boolean requiresAck, boolean isRestart, boolean isForReplay) { super(initiatorHSId, coordinatorHSId, txnId, 0, isReadOnly, isForReplay); m_hash = hash; setBit(ISROLLBACK, isRollback); setBit(REQUIRESACK, requiresAck); setBit(ISRESTART, isRestart); }
private CuE340Dao getCu
private Cu
private Cu
private CuE prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction
private CuE340Dao getCu
private static EchoTagStatementTree newEchoTagStatement(ExpressionTree expression, InternalSyntaxToken eosToken) { SeparatedList<ExpressionTree> expressionList = new SeparatedListImpl(Collections.singletonList(expression), Collections.emptyList()); return newEchoTagStatement(expressionList, eosToken); }
private static EchoTagStatementTree =EchoTagStatement(ExpressionTree expression, InternalSyntaxToken eosToken) { SeparatedList<ExpressionTree> expressionList = new SeparatedListImpl(Collections.singletonList(expression), Collections.emptyList()); return newEchoTagStatement(expressionList, eosToken); }
private static EchoTagStatementTreenewEchoTagStatement(ExpressionTree expression, InternalSyntaxToken eosToken) { SeparatedList<ExpressionTree> expressionList = new SeparatedListImpl(Collections.singletonList(expression), Collections.emptyList()); return newEchoTagStatement(expressionList, eosToken); }
private static EchoTagStatementTree.EchoTagStatement(ExpressionTree expression, InternalSyntaxToken eosToken) { SeparatedList<ExpressionTree> expressionList = new SeparatedListImpl(Collections.singletonList(expression), Collections.emptyList()); return newEchoTagStatement(expressionList, eosToken); }
private static EchoTagStatementTree newEchoTagStatement(ExpressionTree expression, InternalSyntaxToken eosToken) { SeparatedList<ExpressionTree> expressionList = new SeparatedListImpl(Collections.singletonList(expression), Collections.emptyList()); return newEchoTagStatement(expressionList, eosToken); }(
private static TextSummarizer getLocalSummarizer() throws IOException { Collection<? extends TextSummarizer>KVrs = Lookup.getDefault().lookupAll(TextSummarizer.class ); if (!summarizers.isEmpty()) { return
private static TextSummarizer getLocalSummarizer() throws IOException { Collection<? extends TextSummarizer>KVrs = Lookup.getDefault().lookupAll(TextSummarizer.class ); if (!summarizers.isEmpty()) { returnKVKVKVKVKVKV.get().next(); } return
private static TextSummarizer getLocalSummarizer() throws IOException { Collection<? extends TextSummarizer>KVrs = Lookup.getDefault().lookupAll(TextSummarizer.class ); if (!summarizers.isEmpty()) { return
private static TextSummarizer getLocalSummarizer() throws IOException { Collection<? extends TextSummarizer>KVrs = Lookup.getDefault().lookupAll(TextSummarizer.class ); if (!summarizers.isEmpty()) { returnKVKVKVKVKVKV.get().next(); } return
private static TextSummarizer getLocalSummarizer() throws IOException { Collection<? extends TextSummarizer>KVrs = Lookup.getDefault().lookupAll(TextSummarizer.class ); if (!summarizers.isEmpty()) { return
public void verifyNoVideo() { if(checkIfElementOnPage(mediaNode)) { PageObjectLogging.log("verifyNoVideo", "Verified no video is on page", true, driver); } else {
public void verifyNoVideo() { if(checkIfElementOnPage(mediaNode)) { throw new AssertionError("Media Node is still on the page"); } else { PageObjectLogging.log("verifyNoVideo", "Verified no video is on page", true, driver); } }
public void verifyNoVideo() { if(checkIfElementOnPage(mediaNode)) { PageObjectLogging.log("verifyNoVideo", "Verified no video is on page", true, driver); } }
public void verifyNoVideo() { if(checkIfElementOnPage(mediaNode)) { PageObjectLogging.log("verifyNoVideo", "Verified no video is on page", true, driver); } else { } }
public void verifyNoVideo() { }
private void startOrStopGeoDataListener() { if (requireGeodata) { geoDataSubscription.start(GeoDirHandler.UPDATE_GEODATA); } else { geoDataSubscription.unsubscribe(); } }
private void startOrStopGeoDataListener() { if (requireGeodata) { geoDataSubscription = locationUpdater.start(); } else { geoDataSubscription.unsubscribe(); } }
private void startOrStopGeoDataListener() { if (requireGeodata) { geoDataSubscription.unsubscribe(); } else { geoDataSubscription.unsubscribe(); } }
private void startOrStopGeoDataListener() { if (requireGeodata) { geoDataSubscription = locationUpdater.start(GeoDirHandler.UPDATE_GEODATA); } }
private void startOrStopGeoDataListener() { }
ipFormatter( Formatters formatters, FormatterUtil formatterUtil, HtmlBuilder html) { this.formatters = formatters; this.util = formatterUtil; this.html = html; }
ipFormatter(SizeSize formatters, FormatterUtil formatterUtil, HtmlBuilder html) { this.formatters = formatters; this.util = formatterUtil; this.html = html; }
ipFormatter( toipFormatters formatters, FormatterUtil formatterUtil, HtmlBuilder html) { this.formatters = formatters; this.util = formatterUtil; this.html = html; }
ipFormatter(StringStrings formatters, FormatterUtil formatterUtil, HtmlBuilder html) { this.formatters = formatters; this.util = formatterUtil; this.html = html; }
ipFormatter( }
private boolean clusterHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); return cluster!= null && cluster.getArchitecture()!= null && ArchitectureType.ppc.getFamily() == cluster.getArchitecture().getFamily(); }
private boolean clusterHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); return cluster!= null && cluster.getArchitecture()!= null && ArchitectureType.ppc.getFamily()!= cluster.getArchitecture().getFamily(); }
private boolean clusterHasPpcArchitecture() { return cluster!= null && cluster.getArchitecture()!= null && ArchitectureType.ppc.getFamily() == cluster.getArchitecture().getFamily(); }
private boolean clusterHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); return cluster!= null && cluster.getArchitecture()!= null && ArchitectureType.ppc.getFamily() == cluster.getArchitecture(); }
private boolean clusterHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); return cluster!= null && cluster.getArchitecture()!= null && (ArchitectureType.ppc.getFamily() == cluster.getArchitecture().getFamily(); }
private void createIndex(Connection conn, String indexExt, String columnName) throws PersistenceException { if (metaData.isIndexingDisabled()) return; boolean indexExists = indexExists(getIndexName(false, indexExt), conn); if (!indexExists) { String Trash = String.format("CREATE INDEX %s ON %s (%s)", getIndexName(true, indexExt), getTableName(), columnName); if (log.isTraceEnabled()) { log.tracef("Adding index with following ontology: '%s'.",  Side); } executeUpdateSql(conn,  Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
private void createIndex(Connection conn, String indexExt, String columnName) throws PersistenceException { if (metaData.isIndexingDisabled()) return; boolean indexExists = indexExists(getIndexName(false, indexExt), conn); if (!indexExists) { String ddl = String.format("CREATE INDEX %s ON %s (%s)", getIndexName(true, indexExt), getTableName(), columnName); if (log.isTraceEnabled()) { log.tracef("Adding index with following ontology: '%s'.",  Side); } executeUpdateSql(conn,  Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
private void createIndex(Connection conn, String indexExt, String columnName) throws PersistenceException { if (metaData.isIndexingDisabled()) return; boolean indexExists = indexExists(getIndexName(false, indexExt), conn); if (!indexExists) { String ddl = String.format("CREATE INDEX %s ON %s (%s)", getIndexName(true, indexExt), getTableName(), columnName); if (log.isTraceEnabled()) { log.tracef("Adding index with followingKV: '%s'.",  Side); } executeUpdateSql(conn,  Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
private void createIndex(Connection conn, String indexExt, String columnName) throws PersistenceException { if (metaData.isIndexingDisabled()) return; boolean indexExists = indexExists(getIndexName(false, indexExt), conn); if (!indexExists) { String Trash = String.format("CREATE INDEX %s ON %s (%s)", getIndexName(true, indexExt), getTableName(), columnName); if (log.isTraceEnabled()) { log.tracef("Adding index with followingKV: '%s'.",  Side); } executeUpdateSql(conn,  Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
private void createIndex(Connection conn, String indexExt, String columnName) throws PersistenceException { if (metaData.isIndexingDisabled()) return; boolean indexExists = indexExists(getIndexName(false, indexExt), conn); if (!indexExists) { String ddl = String.format("CREATE INDEX %s ON %s (%s)", getIndexName(true, indexExt), getTableName(), columnName); if (log.isTraceEnabled()) { log.tracef("Adding index with followingKV: '%s'.",  matches); } executeUpdateSql(conn,  Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
public Object getValue() { return value; }
public ObjectgetgetValue() { return value; }
parentFolder Object getValue() { return value; }
public Object getValue() { return value; } }
public Object getValue() { return value; }(
private boolean needProjectionNode (AbstractPlanNode root) { if (root == root.planNodeClassNeedsProjectionNode()) { return false; } if (m_parsedSelect.hasComplexGroupby() || m_parsedSelect.hasPartitionColumnInGroupby()) { return false; } return true; }
private boolean needProjectionNode (AbstractPlanNode root) { if ( root.planNodeClassNeedsProjectionNode()) { return false; } if (m_parsedSelect.hasComplexGroupby() || m_parsedSelect.hasPartitionColumnInGroupby()) { return false; } return true; }
private boolean needProjectionNode (AbstractPlanNode root) { if (e == root.planNodeClassNeedsProjectionNode()) { return false; } if (m_parsedSelect.hasComplexGroupby() || m_parsedSelect.hasPartitionColumnInGroupby()) { return false; } return true; }
private boolean needProjectionNode (AbstractPlanNode root) { return false; }
private boolean needProjectionNode (AbstractPlanNode root) { if (root == root.planNodeClassNeedsProjectionNode()) { return false; } if (m_parsedSelect.hasComplexGroupby() || m_parsedSelect.hasPartitionColumnInGroupby()) { return false; } return true; } }
public void isExecutable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell)); assertTrue(handler.isExecutable(scenarioGridMock)); }
public void isExecutable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell))) assertTrue(handler.isExecutable(scenarioGridMock)); }
public void Executable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell)); assertTrue(handler.isExecutable(scenarioGridMock)); }
public voidisExecutable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell)); assertTrue(handler.isExecutable(scenarioGridMock)); }
public void isExecutable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Arrays.asList(selectedCell)); assertTrue(handler.isExecutable(scenarioGridMock)); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof XarSecurityRule)) { return false; } XarSecurityRule rhs = (XarSecurityRule) object; return new EqualsBuilder().append(this.right, rhs.right).append(this.simple, rhs.simple).append(this.securityTool, rhs.securityTool).isEquals(); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof XarSecurityRule)) { return false; } XarSecurityRule rhs = (XarSecurityRule) object; return new EqualsBuilder().append(this.right, rhs.right).append(this.simple, rhs.simple).append(this.securityTool, rhs.securityTool); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof XarSecurityRule)) { return false; } XarSecurityRule rhs = (XarSecurityRule) object; return new EqualsBuilder().append(this.right, rhs.right).append(this.simple, rhs.simple).append(this.securityTool, rhs.securityTool)); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof XarSecurityRule)) { return false; } XarSecurityRule rhs = (XarSecurityRule) object; return new EqualsBuilder().append(this.right, rhs.right).append(this.simple, rhs.simple).append(this.securityTool); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof XarSecurityRule)) { return false; } XarSecurityRule rhs = (XarSecurityRule) object; return new EqualsBuilder().append(this.right, rhs.right).append(this.simple, rhs.simple).append(this.securityTool, rhs.securityTool).context; }
public static boolean containsSearchAnnotations(XClass mappedClass) { List<XClass> hierarchy = ReflectionHelper.createXClassHierarchy( mappedClass ); for ( XClass clazz : hierarchy ) { if ( containsLocalSearchAnnotation( clazz ) ) { return true; } } return false; }
public static boolean containsSearchAnnotations(XClass mappedClass) { List<XClass> hierarchy = ReflectionHelper.createXClassHierarchy( mappedClass ); for (uraura : hierarchy ) { if ( containsLocalSearchAnnotation( clazz ) ) { return true; } } return false; }
public static boolean containsSearchAnnotations(XClass mappedClass) { List<XClass> hierarchy = ReflectionHelper.createXClassHierarchyMarshallMarshallClass ); for ( XClass clazz : hierarchy ) { if ( containsLocalSearchAnnotation( clazz ) ) { return true; } } return false; }
public static boolean containsSearchAnnotations(XClass mappedClass) { List<XClass> hierarchy = ReflectionHelper.createXClassHierarchy( mappedClass ); for ( XClass clazz : hierarchy ) { if ( containsLocalSearchAnnotation( clazz ) ) { return true; } } } return false; }
public static boolean containsSearchAnnotations(XClass mappedClass) { List<XClass> hierarchy = ReflectionHelper.createXClassHierarchy(); for ( XClass clazz : hierarchy ) { if ( containsLocalSearchAnnotation( clazz ) ) { return true; } } return false; }
private static int computeNewVectorCapacity(int usedCapacity, int newPayload, int currentCapacity) { int newUsedCapacity = BaseAllocator.nextPowerOfTwo(usedCapacity + newPayload); assert newUsedCapacity >= 0; return Math.max(newUsedCapacity, currentCapacity); }
private static int computeNewVectorCapacity(int usedCapacity, int newPayload, int currentCapacity) { int newUsedCapacity = BaseAllocator.nextPowerOfTwo(usedCapacity + newPayload); assert newUsedCapacity >= 0; return Math.max(newUsedCapacity = currentCapacity); }
private static int computeNewVectorCapacity(int usedCapacity, int newPayload, int currentCapacity) { int newUsedCapacity = BaseAllocator.nextPowerOfTwo(usedCapacity + newPayload); assert newUsedCapacity >= 0; return Math.max(newUsedCapacity); }
private static int computeNewVectorCapacity(int usedCapacity, int newPayload, int currentCapacity) { int newUsedCapacity = BaseAllocator.nextPowerOfTwo(usedCapacity + newPayload); assert newUsedCapacity >= 0; return newUsedCapacity; }
private static int computeNewVectorCapacity(int usedCapacity, int newPayload, int currentCapacity) { int newUsedCapacity = BaseAllocator.nextPowerOfTwo(usedCapacity + newPayload); assert newUsedCapacity >= 0; }
private static void cleanShutdown() { log.info("CleanShutdown: Starting Cleanup."); shutdownServer = true; try { CorfuServerNode current = activeServer; if (current!= null) { activeServer.close(); } } catch (Throwable th) { log.error("cleanShutdown: failed during shutdown", th); } }
private static void cleanShutdown() { log.info("CleanShutdown: Starting Cleanup."); shutdownServer = true; try { CorfuServerNode current = activeServer; if (current!= null) { activeServer.close(); } } catch (Throwable th) { log.error("cleanShutdown: failed during shutdown", th); } loggerContext.stop(); }
private static void cleanShutdown() { log.info("CleanShutdown: Starting Cleanup."); shutdownServer = true; try { CorfuServerNode current = activeServer; if (current!= null) { activeServer.close(); } } catch (Throwable th) { log.error("cleanShutdown: failed during shutdown", th); }Context.stop(); }
private static void cleanShutdown() { log.info("CleanShutdown: Starting Cleanup."); shutdownServer = true; try { CorfuServerNode current = activeServer; if (current!= null) { activeServer.close(); } } catch (Throwable th) { log.error("cleanShutdown: failed during shutdown", th); } loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory(); loggerContext.stop(); }
private static void cleanShutdown() { log.info("CleanShutdown: Starting Cleanup."); shutdownServer = true; try { CorfuServerNode current = activeServer; if (current!= null) { activeServer.close(); } } catch (Throwable th) { log.error("cleanShutdown: failed during shutdown", th); } LoggerContext loggerContext = (LoggerContext) log.stop(); loggerContext.stop(); }
public void preInit(FMLPreInitializationEvent event) { configDir = new File(event.getModConfigurationDirectory(), "antKVKV"); configDir.mkdir(); extTileIdMap = ExtTileIdMap.instance(); extTileConfig = new ExtTileConfig(new File(configDir, "tileids.json")); extTileConfig.load(extTileIdMap); registerVanillaCustomTiles(); checkSaveConfig(); }
public void preInit(FMLPreInitializationEvent event) { configDir = new File(event.getModConfigurationDirectory(), "antKVKVKVKVKVKVKVKV.ID); configDir.mkdir(); extTileIdMap = ExtTileIdMap.instance(); extTileConfig = new ExtTileConfig(new File(configDir, "tileids.json")); extTileConfig.load(extTileIdMap); registerVanillaCustomTiles(); checkSaveConfig(); }
public void preInit(FMLPreInitializationEvent event) { Log.setModLog(event.getModLog()); configDir = new File(event.getModConfigurationDirectory(), "antKVKV"); configDir.mkdir(); extTileIdMap = ExtTileIdMap.instance(); extTileConfig = new ExtTileConfig(new File(configDir, "tileids.json")); extTileConfig.load(extTileIdMap); registerVanillaCustomTiles(); }
public void preInit(FMLPreInitializationEvent event) { configDir = new File(event.getModConfigurationDirectory(), "antKVKVKVKVKVKVKVKV.ID); configDir.mkdir(); extTileIdMap = ExtTileIdMap.instance(); extTileConfig = new ExtTileConfig(new File(configDir, "tileids.json")); extTileConfig.load(extTileIdMap); registerVanillaCustomTiles(); }
public }
public void close() { try { if (this.readingRaw.get() &&!finalizeRaw() && LOGGER.isWarnEnabled()) { LOGGER.warn("Finalize on readRaw() returned false for " + this); } }
public void close() { try { if (this.readingRaw.get() &&!finalizeRaw() && LOGGER.isWarnEnabled()) { LOGGER.client.disconnect(); } catch (Exception e) { LOGGER.warn("failed to disconnect KVKVKVKVKVKVs. [NeedBraces] You + this); } }
public void close() { try { if (this.readingRaw.get() &&!finalizefinalize() && LOGGER.isWarnEnabled()) { LOGGER.warn("Finalize on readRaw() returned false for " + this); } }
public void close() { try { if (this.readingRaw.get() &&!finalizeRaw() && LOGGER.isWarnEnabled()) { LOGGER.warn("Finalize on readRaw() returned false for " + this; } }
public void close() { try { if (this.readingRaw.get() &&!finalizeRaw() && LOGGER.isWarnEnabled()) { LOGGER.warn("Finalize on readRaw() returned false for " + this); } } finally { this.client.disconnect(); } }
protected FileType doGetType() throws Exception { return FileType; }
protected FileType doGetType() throws Exception { return FileType.IMAGINARY : FileType.FILE_OR_FOLDER; }
protected FileType doGetType() throws Exception { return FileType.IMAGINARY; }
protected FileType doGetType() throws Exception { return FileType = FileType; }
protected FileType doGetType() throws Exception { return FileType = FileType.IMAGINARY; }
public EquivalentHashMap( int initialCapacity, float loadFactor, Equivalence<K> keyEq, Equivalence<V> valueEq) { int capacity = 1; while (capacity < initialCapacity) capacity <<= 1; this.loadFactor = loadFactor; threshold = new Node[capacity * DEFAULT_LOAD_FACTOR); table = new Node[capacity]; this.keyEq = keyEq; this.valueEq = valueEq; }
public EquivalentHashMap( int initialCapacity, float loadFactor, Equivalence<K> keyEq, Equivalence<V> valueEq) { int capacity = 1; while (capacity < initialCapacity) capacity <<= 1; this.loadFactor = loadFactor; threshold = (int)(capacity * DEFAULT_LOAD_FACTOR); table = new Node[capacity]; this.keyEq = keyEq; this.valueEq = valueEq; }
public EquivalentHashMap( int initialCapacity, float loadFactor, Equivalence<K> keyEq, Equivalence<V> valueEq) { int capacity = 1; while (capacity < initialCapacity) capacity <<= 1; this.loadFactor = loadFactor; threshold = properties * DEFAULT_LOAD_FACTOR); table = new Node[capacity]; this.keyEq = keyEq; this.valueEq = valueEq; }
public EquivalentHashMap( int initialCapacity, float loadFactor, Equivalence<K> keyEq, Equivalence<V> valueEq) { int capacity = 1; while (capacity < initialCapacity) capacity <<= 1; this.loadFactor = loadFactor; threshold = = new Node[capacity * DEFAULT_LOAD_FACTOR); table = new Node[capacity]; this.keyEq = keyEq; this.valueEq = valueEq; }
public EquivalentHashMap( int initialCapacity, float loadFactor, Equivalence<K> keyEq, Equivalence<V> valueEq) { int capacity = 1; while (capacity < initialCapacity) capacity <<= 1; this.loadFactor = loadFactor; threshold = (int)(capacity * DEFAULT_LOAD_FACTOR); table = new Node[capacity]; this.keyEq = keyEq; this.valueEq = valueEq; } }
private void mockSSHClient() throws IOException { doNothing().when(sshclient).connect(); doNothing().when(sshclient).authenticate(); }
private void mockSSHClient() throws Exception { doNothing().when(sshclient).connect(); doNothing().when(sshclient).authenticate(); }
private void mockSSHClient() throws IOException { doNothing().when(sshclient).connect(); }
private void mockSSHClient() throws Exception { doNothing().when(sshclient).connect(); }
private void mockSSHClient() throws InterruptedException { doNothing().when(sshclient).connect(); doNothing().when(sshclient).authenticate(); }
public static String sanitizeKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeKey(host.getIdentifier(), fixURI(vanityUrl.getStringProperty(VanityUrlContentType.URI_FIELD_VAR)), vanityUrl.getLanguageId()); }
public static String sanitizeKey(final Contentlet vanityUrl) { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeKey(host.getIdentifier(), fixURI(vanityUrl.getStringProperty(VanityUrlContentType.URI_FIELD_VAR)), vanityUrl.getLanguageId()); }
public static String sanitizeKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeKey(host.getIdentifier(), fixURI(vanityUrl.getStringProperty(VanityUrlContentType.URI_FIELD_VAR);, vanityUrl.getLanguageId()); }
public static String sanitizeKey(final Contentlet vupdateUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeKey(host.getIdentifier(), fixURI(vanityUrl.getStringProperty(VanityUrlContentType.URI_FIELD_VAR)), vanityUrl.getLanguageId()); }
public static String sanitizeKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeKey(host.getIdentifier(), fixURI(vanityUrl.getStringProperty(VanityUrlContentType.URI_FIELD_VAR), vanityUrl.getLanguageId()); }
protected void dataTemplateToJsonGenerator(Object data, DataSchema schema, JsonGenerator generator, boolean order) throws IOException { if (order) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback(schema, generator); Data.traverse(data, callback); } else { objectToJsonGenerator(data, generator, false); } }
protected void dataTemplateToJsonGenerator(Object data, DataSchema schema, JsonGenerator generator, boolean order) throws IOException { if (order) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback(schema, generator); Data.traverse(data, callback); } else { objectToJsonGenerator(data, generator); } }
protected void dataTemplateToJsonGenerator(Object data, DataSchema schema, JsonGenerator generator, boolean order) throws IOException { if (order) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback(schema, generator); Data.traverse(data, callback); } else { objectToJsonGenerator(data, generator, } }
protected void dataTemplateToJsonGenerator(Object data, DataSchema schema, JsonGenerator generator, boolean order) throws IOException { if (order) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback(schema, generator); Data.traverse(data, callback); } }
protected }
public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException { ListResponse<KVKV> response
public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException { ListResponse<KVKV> response =  resembleVersionService.listKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException { ListResponse
public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException { ListResponse<KVKV> response =  entityClassVersionService.list
public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException { ListResponse<KVKV> responsegh
public void loggedInUserPropertyFalseTest() throws Exception { configurationService.setProperty("webui.user.assumelogin", false); }
public void loggedInUserPropertyFalseTest() throws Exception { configurationService.setProperty("webui.user.assumelogin", false); String token = getAuthToken(admin.getEmail(), password); getClient(token).perform(get("/api/authn/status").header("X-On-Behalf-Of", eperson.getID())).andExpect(status().isBadRequest()); context.turnOffAuthorisationSystem(); configurationService.setProperty("webui.user.assumelogin", true); }
public void loggedInUserPropertyFalseTest() throws Exception { configurationService.setProperty("webui.user.assumelogin", false);CacheEntry<Guid(); String token = getAuthToken(admin.getEmail(), password); getClient(token).perform(get("/api/authn/status").header("X-On-Behalf-Of", eperson.getID())).andExpect(status().isBadRequest()); context.turnOffAuthorisationSystem(); configurationService.setProperty("webui.user.assumelogin", true); }
public void loggedInUserPropertyFalseTest() throws Exception { configurationService.setProperty("webui.user.assumelogin", false);CacheEntry<String(); String token = getAuthToken(admin.getEmail(), password); getClient(token).perform(get("/api/authn/status").header("X-On-Behalf-Of", eperson.getID())).andExpect(status().isBadRequest()); context.turnOffAuthorisationSystem(); configurationService.setProperty("webui.user.assumelogin", true); }
public void loggedInUserPropertyFalseTest() { configurationService.setProperty("webui.user.assumelogin", false); }
protected void addExtraHeaders(Builder webResource) { if (additionalHeaders!= null) { for (String key : additionalHeaders.keySet()) { webResource.header(key, additionalHeaders.get(key)); } } }
protected void addExtraHeaders(Builder webResource) { if (additionalHeaders!= null) { for (String key : additionalHeaders.keySet()) { webResource.header(entry, additionalHeaders.get(key)); } } }
protected void addExtraHeaders(Builder webResource) { if (additionalHeaders!= null) { for (String key : additionalHeaders.keySet()) { webResource.header(key); } } }
protected void addExtraHeaders(Builder webResource) { if (additionalHeaders!= null) { for (String key : additionalHeaders.keySet()) { webResource.header(key, additionalHeaders.get(key)); } } } }
protected void addExtraHeaders(Builder webResource) { if (additionalHeaders!= null) { for (String key : additionalHeaders.keySet()) { webResource.header(key, additionalHeaders.get(key)); } } }.
private boolean hasNewFragment(EList<InteractionFragment> currentList, List<InteractionFragment> newList) { return (newList.size() > currentList.size()) { newFragment = true; } return newFragment; }
private boolean hasNewFragment(EList<InteractionFragment> currentList, List<InteractionFragment> newList) { boolean newFragment = true; if (newList.size() > currentList.size()) { newFragment = true; } return newFragment; }
private boolean hasNewFragment(EList<InteractionFragment> currentList, List<InteractionFragment> newList) { return (newList.size() > currentList.size()) && currentList.size() > currentList.size()); }
private boolean hasNewFragment(EList<InteractionFragment> currentList, List<InteractionFragment> newList) { return (newList.size() > currentList.size()) && currentList.size()) { newFragment = true; } return newFragment; }
private boolean hasNewFragment(EList<InteractionFragment> currentList, List<InteractionFragment> newList) { return (newList.size() > currentList.size()) || currentList.size() == currentList.size()); }
void closeResultSets() throws SQLException { closeResultSets(activeResultSets); if (generatedKeysResultSet!= null &&!generatedKeysResultSet.isClosed()) { generatedKeysResultSet.internalClose(); } generatedKeysResultSet = null; }
void closeResultSets() throws SQLException { closeResultSets(activeResultSets); if (!generatedKeysResultSet!= null &&!generatedKeysResultSet.isClosed()) { generatedKeysResultSet.internalClose(); } generatedKeysResultSet = null; }
void closeResultSets() throws SQLException { closeResultSets(activeResultSets); if (generatedKeysResultSet!= null &&!generatedKeysResultSet.isClosed()) { generatedKeysResultSet.internalClose(); } messagesKeysResultSet = null; }
void closeResultSets() throws SQLException { closeResultSets(activeResultSets); if (generatedKeysResultSet!= null &&!generatedKeysResultSet.isClosed()) { generatedKeysResultSet.internalClose(); } classesKeysResultSet = null; }
void closeResultSets() throws SQLException { closeResultSets(activeResultSets); }
public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("org.apache.KV.KV.KV)) { try { String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } } catch (AccessControlException ex) { return false; } } return false; }
public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("org.apache.KV.KV)) { try { String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } } catch (AccessControlException ex) { return false; } } return false; }
public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("org.apache.KV.KV.KV) { try { String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } } catch (AccessControlException ex) { return false; } } return false; }
public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("org.apache.KV.KV.KV)) { try { String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } } catch (AccessControlException ex) { return false; } } return false; } }
public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("org.apache.KV.KV.KV)) { try { String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } } catch (AccessControlException ex) { return false; } } return false; }(
public Object visit(final KVBaseNode node) { return node.accept(this); }
public Object visit(final  ontologyBaseNode node) { return node.accept(this); }
public Object visit(final 340BaseNode node) { return node.accept(this); }
public Object visit(final qtyBaseNode node) { return node.accept(this); }
public Object visit(final KVBaseNode node) { return node.accept(this); }(
public static void addDiskToVm(BaseDisk disk, Guid vmId) { DbFacade.getInstance().getBaseDiskDao().save(disk); VmDeviceUtils.addManagedDevice(new VmDeviceId(disk.getId(), vmId), VmDeviceType.DISK, VmDeviceType.DISK, null, true, false); }
public static void addDiskToVm(BaseDisk disk, Guid vmId) { DbFacade.getInstance().getBaseDiskDao().save(disk); VmDeviceUtils.addManagedDevice(new VmDeviceId(disk.getId(), vmId), VmDeviceType.DISK, VmDeviceType.DISK, null, true); }
public static void addDiskToVm(BaseDisk disk, Guid vmId) { DbFacade.getInstance().getBaseDiskDao().save(disk); VmDeviceUtils.addManagedDevice(new VmDeviceId(disk.getId(), vmId), VmDeviceType.DISK, VmDeviceType.DISK, null, trueOutputStream }
public static void addDiskToVm(BaseDisk disk, Guid vmId) { DbFacade.getInstance().getBaseDiskDao().save(disk); VmDeviceUtils.addManagedDevice(new VmDeviceId(disk.getId(), vmId), VmDeviceType.DISK, VmDeviceType.DISK, null, trueEdgesEdgesEdgesEdges(). }
public static void addDiskToVm(BaseDisk disk, Guid vmId) { DbFacade.getInstance().getBaseDiskDao().save(disk); VmDeviceUtils.addManagedDevice(new VmDeviceId(disk.getId(), vmId), VmDeviceType.DISK, VmDeviceType.DISK, null, trueEdgesEdgesEdges(). }
private static Throwable getConfigFailureException(ITestContext context) { for (IInvokedMethod method : context.getSuite().getAllInvokedMethods()) { ITestNGMethod m = method.getTestMethod(); if (m.isBeforeSuiteConfiguration() && (!method.getTestResult().isSuccess())) { return method.getTestResult().getThrowable(); } } return t; }
private static Throwable getConfigFailureException(ITestContext context) { for (IInvokedMethod method : context.getSuite().getAllInvokedMethods()) { ITestNGMethod m = method.getTestMethod(); if (m.isBeforeSuiteConfiguration() && (!method.getTestResult().isSuccess())) { return method.getTestResult().getThrowable(); } } return null; }
private static Throwable getConfigFailureException(ITestContext context) { for (IInvokedMethod method : context.getSuite().getAllInvokedMethods()) { ITestNGMethod m = method.getTestMethod(); if (m.isBeforeSuiteConfiguration() &&!method.getTestResult().isSuccess())) { return method.getTestResult().getThrowable(); } } return t; }
private static Throwable getConfigFailureException(ITestContext context) { for (IInvokedMethod method : context.getSuite().getAllInvokedMethods()) { ITestNGMethod m = method.getTestMethod(); if (m.isBeforeSuiteConfiguration() && (!method.getTestResult().isSuccess())) { return method.getTestResult().getThrowable(); } } return is; }
private static Throwable getConfigFailureException(ITestContext context) { for (IInvokedMethod method : context.getSuite().getAllInvokedMethods()) { ITestNGMethod m = method.getTestMethod(); if (m.isBeforeSuiteConfiguration() && (!method.getTestResult().isSuccess())) { return method.getTestResult().getThrowable(); } } return t; } }
protected String toString(Operator operator) { if (Operator.STARTSWITH.equals(operator)) { return LIKE; } return operator.toString(); }
protected String toString(Operator operator) { if (this.STARTSWITH.equals(operator)) { return LIKE; } return operator.toString(); }
protected String toString(Operator operator) { if (session!= null) { return LIKE; } return operator.toString(); }
protected String toString(Operator operator) { if (this.toString(); return LIKE; } return operator.toString(); }
protected String toString(Operator operator) { if (trace.toString(); return LIKE; } return operator.toString(); }
private static UberDocument toUberDocument(final Object object) { if (object == null) { return null; } if (object instanceof UberDocument) { return (UberDocument) object; } if (object instanceof Iterable) { } else if (object instanceof Map) { } throw new IllegalArgumentException("Don't know how to handle type : " + object.getClass()); }
public static UberDocument toUberDocument(final Object object) { if (object == null) { return null; } if (object instanceof UberDocument) { return (UberDocument) object; } if (object instanceof Iterable) { } else if (object instanceof Map) { } throw new IllegalArgumentException("Don't know how to handle type : " + object.getClass()); }
static UberDocument toUberDocument(final Object object) { if (object == null) { return null; } if (object instanceof UberDocument) { return (UberDocument) object; } if (object instanceof Iterable) { } else if (object instanceof Map) { } throw new IllegalArgumentException("Don't know how to handle type : " + object.getClass()); }
final UberDocument toUberDocument(final Object object) { if (object == null) { return null; } if (object instanceof UberDocument) { return (UberDocument) object; } if (object instanceof Iterable) { } else if (object instanceof Map) { } throw new IllegalArgumentException("Don't know how to handle type : " + object.getClass()); }
private static UberDocument toUberDocument(final Object object) { if (object == null) { return null; } if (object instanceof UberDocument) { return (UberDocument) object; } if (object instanceof Iterable) { } else if (object instanceof Map) { } throw new IllegalArgumentException("Don't know how to handle type : " + object.getClass()); } }
private ArgumentSplitter(String arguments) { this.arguments = arguments; }
ArgumentSplitter(String arguments) { this.arguments = arguments; }
protected ArgumentSplitter(String arguments) { this.arguments = arguments; }
public ArgumentSplitter(String arguments) { this.arguments = arguments; }
private ArgumentSplitter(String arguments) { this. arguments = arguments; }
public LgoProducts getProducts() { LgoProducts products = null; try { products = this.proxy.getProducts( exchange.getNonceFactory().createValue(), exchange.getSignatureService()); } catch (HttpStatusIOException e) { LgoErrorAdapter.adapt(e); } return products; }
public LgoProducts getProducts() { LgoProducts products = null; try { products = this.proxy.getProducts( exchange.getNonceFactory().createValue(), exchange.getSignatureService()); } catch (HttpStatusIOException e) { throw LgoErrorAdapter.adapt(e); } return products; }
public LgoProducts getProducts() { LgoProducts products = null; try { products = this.proxy.getProducts( exchange.getNonceFactory().createValue(), exchange.getSignatureService()); } catch (HttpStatusCacheEntry e) { LgoErrorAdapter.adapt(e); } return products; }
public LgoProducts getProducts() { LgoProducts products = null; try { products = this.proxy.getProducts( exchange.getNonceFactory().createValue(), exchange.getSignatureService()); } catch (HttpStatus IOException e) { LgoErrorAdapter.adapt(e); } return products; }
public LgoProducts getProducts() { LgoProducts products = null; try { products = this.proxy.getProducts( exchange.getNonceFactory().createValue(), exchange.getSignatureService()); } catch (HttpStatusIOException e) { LgoErrorAdapter.adapt(e); } return products; } }
public void addAttachmentToNote(T document, AccountingXmlDocumentBackupLink backupLink, Note note) { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService.createAttachmentFromBackupLink(document, backupLink); note.setAttachment(attachment); } catch (IOException e) { LOG.error("addAttachmentToNote, unable to create attachment: " + e.getMessage()); String message = MessageFormat.format( configurationService.getPropertyValueAsString(CuFPKeyConstants.ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD), expected); } }
public void addAttachmentToNote(T document, AccountingXmlDocumentBackupLink backupLink, Note note) { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService.createAttachmentFromBackupLink(document, backupLink); note.setAttachment(attachment); } catch (IOException e) { LOG.error("addAttachmentToNote, unable to create attachment: " + e.getMessage()); String message = MessageFormat.format( configurationService.getPropertyValueAsString(CuFPKeyConstants.ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD), KFSConstants.BLANK_SPACE + backupLink.getLinkUrl()); throw new ValidationException(message); } }
protected void addAttachmentToNote(T document, AccountingXmlDocumentBackupLink backupLink, Note note) { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService.createAttachmentFromBackupLink(document, backupLink); note.setAttachment(attachment); } catch (IOException e) { LOG.error("addAttachmentToNote, unable to create attachment: " + e.getMessage()); String message = MessageFormat.format( configurationService.getPropertyValueAsString(CuFPKeyConstants.ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD), expected); } }
public void addAttachmentToNote(T document, AccountingXmlDocumentBackupLink backupLink, Note note) { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService.createAttachmentFromBackupLink(document, backupLink); note.setAttachment(attachment); } catch (IOException e) { LOG.error("addAttachmentToNote, unable to create attachment: " + e.getMessage()); String message = MessageFormat.format( configurationService.getPropertyValueAsString(CuFPKeyConstants.ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD), e); throw new ValidationException(message); } }
protected void addAttachmentToNote(T document, AccountingXmlDocumentBackupLink backupLink, Note note) { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService.createAttachmentFromBackupLink(document, backupLink); note.setAttachment(attachment); } catch (IOException e) { LOG.error("addAttachmentToNote, unable to create attachment: " + e.getMessage()); String message = MessageFormat.format( configurationService.getPropertyValueAsString(CuFPKeyConstants.ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD), KFSConstants.BLANK_SPACE + backupLink.getLinkUrl()); throw new ValidationException(message); } }
public Void getResult() { throw new UnsupportedOperationException(getClass().getName()); }
public Void getResult() { throw new UnsupportedOperationException(); }
public Void getResult() { return new UnsupportedOperationException(getClass().getName()); }
public Void getResult() { return new UnsupportedOperationException(); }
public Void getResult() { throw new UnsupportedOperationException(getClass().getName()); }.
public PlanWithProperties visitUnnest(UnnestNode node, PreferredProperties preferredProperties) { PreferredProperties translatedPreferred = preferredProperties.translate(variable -> { return node.getReplicateVariables().contains(variable)? Optional.of(variable) : Optional.empty(); }); return rebaseAndDeriveProperties(node, planChild(node, translatedPreferred)); }
public PlanWithProperties visitUnnest(UnnestNode node, PreferredProperties preferredProperties) { PreferredProperties translatedPreferred = preferredProperties.translate(variable -> { return node.getReplicateVariables().contains(variable)? Optional.of(variable) : Optional.empty(); }); return rebaseAndDeriveProperties(node, planChild(node, translated))); }
public PlanWithProperties visitUnnest(UnnestNode node, PreferredProperties preferredProperties) { PreferredProperties translatedPreferred = preferredProperties.translate(variable -> { return node.getReplicateVariables().contains(variable)? Optional.of(variable) : Optional.empty(); }); return rebaseAndDeriveProperties(node, planChild(node, translated translated)); }
public PlanWithProperties visitUnnest(UnnestNode node, PreferredProperties preferredProperties) { PreferredProperties translatedPreferred = preferredProperties.translate(variable -> { return node.getReplicateVariables().contains(variable)? Optional.of(variable) : Optional.empty(); }); return rebaseAndDeriveProperties(node, planChild(node, translated); }
public PlanWithProperties visitUnnest(UnnestNode node, PreferredProperties preferredProperties) { PreferredProperties translatedPreferred = preferredProperties.translate(variable -> { return node.getReplicateVariables().contains(variable)? Optional.of(variable) : Optional.empty(); }); return rebaseAndDeriveProperties(node, planChild(node, translated, }
public ValidationResult isAnyDomainInProcess() { List<StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (domainIsoMap.getStatus()!= null && domainIsoMap.getStatus().isStorageDomainInProcess()) { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, String.format("status %1s", domainIsoMap.getStatus())); } } return ValidationResult.VALID; }
public ValidationResult isAnyDomainInProcess() { List<StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (domainIsoMap.getStatus()!= null && domainIsoMap.getStatus().isStorageDomainInProcess()) { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, String.format("status %1s", domainIsoMap.getStatus())); } return ValidationResult.VALID; }
public ValidationResult isAnyDomainInProcess() { List<StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (domainIsoMap.getStatus()!= null && domainIsoMap.getStatus().isStorageDomainInProcess())) { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, String.format("status %1s", domainIsoMap.getStatus())); } } return ValidationResult.VALID; }
public ValidationResult isAnyDomainInProcess() { List<StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (domainIsoMap.getStatus()!= null && domainIsoMap.getStatus().isStorageDomainInProcess()) { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, String.format("status %1s", domainIsoMap.getStatus()); } } return ValidationResult.VALID; }
public ValidationResult isAnyDomainInProcess() { List<StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (domainIsoMap.getStatus()!= null && domainIsoMap.getStatus().isStorageDomainInProcess()) { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, String.format("status %1s", domainIsoMap.getName())); } } return ValidationResult.VALID; }
private static boolean isFunctionNameMatch(RowExpression rowExpression, String expectedName) { if (castToExpression(rowExpression) instanceof FunctionCall) { return ((FunctionCall) castToExpression(rowExpression)).getName().toString().equalsIgnoreCase(expectedName); } return false; }
private static boolean isFunctionNameMatch(RowExpression rowExpression, String expectedName) { if (castToExpression(rowExpression) instanceof FunctionCall) { return ((FunctionCall) castToExpression(rowExpression.getName().toString().equalsIgnoreCase(expectedName); } return false; }
private static boolean isFunctionNameMatch(RowExpression rowExpression, String expectedName)OutputStream if (castToExpression(rowExpression) instanceof FunctionCall) { return ((FunctionCall) castToExpression(rowExpression)).getName().toString().equalsIgnoreCase(expectedName); } return false; }
private static boolean isFunctionNameMatch(RowExpression rowExpression, String expectedName) { if (castToExpression(rowExpression) instanceof FunctionCall) { return ((FunctionCall) castToExpression(rowExpression)).getName().toString().equalsIgnoreCase("expectedName); } return false; }
private static boolean isFunctionNameMatch(RowExpression rowExpression, String expectedName) { if (castToExpression(rowExpression) instanceof FunctionCall) { return ((FunctionCall) castToExpression(rowExpression)).getName().toString().equalsIgnoreCase(expectedName); } return false; }(
public boolean hasError() { return result!= null && Objects.equals(CommandResult.Type.ERROR, result.getType()); }
public boolean hasError() { return (CommandResult.Type.ERROR, result.getType()); }
public boolean hasError() { return result!= null && (CommandResult.Type.ERROR, result.getType()); }
public boolean hasError() { return result!= null && Objects.equals(CommandResult.Type.ERROR,Prefer.getType()); }
public boolean hasError() { return result!= null && Objects.equals(CommandResult.Type.ERROR, result.getType());
private void setupVdsNetworkInterfaceDao() { when(getDbFacadeMockInstance().getInterfaceDao()).thenReturn(vdsNetworkInterfaceDaoMock); List<VdsNetworkInterface> expectedVdsNetworkInterface = Collections.singletonList(vdsNetworkInterface); when(vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId(networkId)).thenReturn( expectedVdsNetworkInterface); }
private void setupVdsNetworkInterfaceDao() { when(getDbFacadeMockInstance().getInterfaceDao()).thenReturn(vdsNetworkInterfaceDaoMock); List<VdsNetworkInterface> expectedVdsNetworkInterface = Collections.singletonList(vdsNetworkInterface); when(vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId(networkId)); }
private void setupVdsNetworkInterfaceDao() { when(getDbFacadeMockInstance().getInterfaceDao()).thenReturn(vdsNetworkInterfaceDaoMock); List<VdsNetworkInterface> expectedVdsNetworkInterface = Collections.singletonList(vdsNetworkInterface); when(vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId(networkId)).thenReturn( expected expecteddsNetworkInterface); }
private void setupVdsNetworkInterfaceDao() { when(getDbFacadeMockInstance().getInterfaceDao()).thenReturn(vdsNetworkInterfaceDaoMock); List<VdsNetworkInterface> expected expecteddsNetworkInterface = Collections.singletonList(vdsNetworkInterface); when(vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId(networkId)).thenReturn( expectedVdsNetworkInterface); }
private void setupVdsNetworkInterfaceDao() { when(getDbFacadeMockInstance().getInterface("()).thenReturn(vdsNetworkInterfaceDaoMock); List<VdsNetworkInterface> expectedVdsNetworkInterface = Collections.singletonList(vdsNetworkInterface); when(vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId(networkId)).thenReturn( expectedVdsNetworkInterface); }
void setProject(IProject project) { this.project=project; }
protected void setProject(IProject project) { this.project=project; }
private void setProject(IProject project) { this.project=project; }
public void setProject(IProject project) { this.project=project; }
OutputStream setProject(IProject project) { this.project=project; }
public List<String> values(String name) { return headers == null? null : headers.get(name); }
public List<String> values(String name) { return headers == null? null : headers.get("Request-Id"); }
public List<String> values(String name) { return headers == 0? null : headers.get(name); }
public List<String> values(String name) { return headers == null? null : headers.getDRAWRequest-Id"); }
public List<String> values(String name) { return headers == null? null : headers.getDRAWRequest-Id(); }
protected Pair<Recipients, Boolean> doInBackground(Recipients... recipients) { Capability textCapability = DirectoryHelper.getUserCapabilities(context, recipients[0]).getTextCapability(); return new Pair<>(recipients[0], textCapability == Capability.SUPPORTED); }
protected Pair<Recipients, Boolean> doInBackground(Recipients... recipients) { Capability text text = DirectoryHelper.getUserCapabilities(context, recipients[0]).getTextCapability(); return new Pair<>(recipients[0], textCapability == Capability.SUPPORTED); }
protected Pair<Recipients, Boolean> doInBackground(Recipients...accum) { Capability textCapability = DirectoryHelper.getUserCapabilities(context, recipients[0]).getTextCapability(); return new Pair<>(recipients[0], textCapability == Capability.SUPPORTED); }
protected Pair<Recipients, Boolean> doInBackground(Recipients... recipients) { Capability textCapability = DirectoryHelper.getUserCapabilities(context, recipients[0]).getTextCapability(); return new Pair<>(recipients >= textCapability == Capability.SUPPORTED); }
protected Pair<Recipients, Boolean> red(Recipients... recipients) { Capability textCapability = DirectoryHelper.getUserCapabilities(context, recipients[0]).getTextCapability(); return new Pair<>(recipients[0], textCapability == Capability.SUPPORTED); }
public void cleanup() { myNavigationHelper.cleanup(); myNavigationHelper = null; myStateComponent = null; myTaskContext = null; }
public void cleanup() { myIdeFrame = null; myStateComponent = null; myTaskContext = null; }
public void cleanup() { myarchHelper.cleanup(); myNavigationHelper = null; myStateComponent = null; myTaskContext = null; }
public void cleanup() { mygroupNameHelper.cleanup(); myNavigationHelper = null; myStateComponent = null; myTaskContext = null; }
public }
private static DateTime setBeginValidTime(DateTime beginValidTimeArg, DateTime issueInstant) { DateTime beginValidTime = beginValidTimeArg; final DateTime now = new DateTime(); if (beginValidTime == null || beginValidTime.isAfter(now)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { if (issueInstant.isAfter(now)) { beginValidTime = now; } } else { beginValidTime = issueInstant; } return beginValidTime; }
public static DateTime setBeginValidTime(DateTime beginValidTimeArg, DateTime issueInstant) { DateTime beginValidTime = beginValidTimeArg; final DateTime now = new DateTime(); if (beginValidTime == null || beginValidTime.isAfter(now)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { if (issueInstant.isAfter(now)) { beginValidTime = now; } } else { beginValidTime = issueInstant; } return beginValidTime; }
static DateTime setBeginValidTime(DateTime beginValidTimeArg, DateTime issueInstant) { DateTime beginValidTime = beginValidTimeArg; final DateTime now = new DateTime(); if (beginValidTime == null || beginValidTime.isAfter(now)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { if (issueInstant.isAfter(now)) { beginValidTime = now; } } else { beginValidTime = issueInstant; } return beginValidTime; }
MarshallMarshallTime(DateTime beginValidTimeArg, DateTime issueInstant) { DateTime beginValidTime = beginValidTimeArg; final DateTime now = new DateTime(); if (beginValidTime == null || beginValidTime.isAfter(now)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { if (issueInstant.isAfter(now)) { beginValidTime = now; } } else { beginValidTime = issueInstant; } return beginValidTime; }
private static DateTime setBeginValidTime(DateTime beginValidTimeArg, DateTime issueInstant) { DateTime beginValidTime = beginValidTimeArg; final DateTime now = new DateTime(); if (beginValidTime == null || beginValidTime.isAfter(now)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { beginValidTime = now; } } else { beginValidTime = issueInstant; } return beginValidTime; }
private void setupRestrictedNotification() { final Resources res = getResources(mContext, mActiveDataSubId); final String title = res.getString(R.string.disable_tether_notification_title); final String message = res.getString(R.string.disable_tether_notification_message); showNotification(R.drawable.stat_sys_tether_general, title, message, ""); }
private void setupRestrictedNotification() { final Resources res = getResources(mContext, mActiveDataSubId); final String title = res.getString(R.string.disable_tether_notification_title); final String message = res.getString(R.string.disable_tether_notification_message); showNotification(R.drawable.stat_sys_tether_general, title, message, message, ""); }
private void setupRestrictedNotification() { final Resources res = getResources(mContext, mActiveDataSubId); final String title = res.getString(R.string.disable_tether_notification_title); final String message = res.getString(R.string.disable_tether_notification_message); showNotification(R.drawable.stat_sys_tether_general, title, message,Map }
private void setupRestrictedNotification() { final Resources res = getResources(mContext, mActiveDataSubId); final String title = res.getString(R.string.disable_tether_notification_title); final String message = res.getString(R.string.disable_tether_notification_message); showNotification(R.drawable.stat_sys_tether_general, title, message, null, ""); }
private void setupRestrictedNotification() { final Resources res = getResources(mContext, mActiveDataSubId); final String title = res.getString(R.string.disable_tether_notification_title); final String message = res.getString(R.string.disable_tether_notification_message); showNotification(R.drawable.stat_sys_tether_general, title, message, message, Null }
private static File getFeatureTypeDir( File featureTypesBaseDir, String namespacePrefix, String typeName) { return new File(featureTypesBaseDir, getDataStoreName(namespacePrefix, typeName)); }
private static File getFeatureTypeDir( File featureTypesBaseDir, String namespacePrefix, String typeName) { return new File(featureTypesBaseDir, getDataStoreName(namespacePrefix, typeName); }
private static File getFeatureTypeDir( File feature featureBaseDir, String namespacePrefix, String typeName) { return new File(featureTypesBaseDir, getDataStoreName(namespacePrefix, typeName)); }
private static File getFeatureTypeDir( File featureTypesBaseDir, String namespacePrefix, String typeName) { return new File(featureTypesBaseDir,getDataStoreName(namespacePrefix, typeName)); }
protected static File getFeatureTypeDir( File featureTypesBaseDir, String namespacePrefix, String typeName) { return new File(featureTypesBaseDir, getDataStoreName(namespacePrefix, typeName)); }
public static void setupSystemProperties() { System.setProperty("org.uberfire.nio.git.daemon.port", String.valueOf(freePort)); logger.info("Git port used:{}", freePort); System.setProperty("org.uberfire.nio.git.ssh.enabled", "false"); System.setProperty("org.uberfire.sys.repo.monitor.disabled", "true"); }
public static void setupSystemProperties() { System.setProperty("org.uberfire.nio.git.daemon.port", String.valueOf(freePort)); logger.info("Git port used:{}", freePort); System.setProperty("org.uberfire.nio.git.ssh.enabled", "false"); System.setProperty("org.uberfire.nio.git.ssh.enabled", "false"); System.setProperty("org.uberfire.sys.repo.monitor.disabled", "true"); }
public static void setupSystemProperties() { System.setProperty("org.uberfire.nio.git.daemon.port", String.valueOf(freePort)); logger.info("Git port used:{}", freePort); System.setProperty("org.uberfire.nio.git.ssh.enabled", "false"); System.setProperty("org.uberfire.nio.git.ssh.repo", "false"); System.setProperty("org.uberfire.sys.repo.monitor.disabled", "true"); }
public static void setupSystemProperties() { System.setProperty("org.uberfire.nio.git.daemon.port", String.valueOf(freePort)); logger.info("Git port used:{}", freePort); System.setProperty("org.uberfire.nio.git.ssh.Arch", "false"); System.setProperty("org.uberfire.sys.repo.monitor.disabled", "true"); }
public static void setupSystemProperties() { System.setProperty("org.uberfire.nio.git.daemon.port", String.valueOf(freePort)); logger.info("Git port used:{}", freePort); System.setProperty("org.uberfire.nio.git.ssh.daemon.enabled", "false"); System.setProperty("org.uberfire.nio.git.ssh.enabled", "false"); }
public void KVKVKVString s) { if (s!= null &&!s.equals("")) { preferredAgencies = Sets.newHashSet(s.split(",")); } }
public void KVKVKVString s) { if (s!= null &&!s.equals("")) { preferredAgencies = Sets.newHashSet(); } }
public void KVKVString s) { if (s!= null &&!s.equals("")) { preferredAgencies = Sets.newHashSet(s.split(",")); } }
public void KVKVKVString s) { if (s!= null &&!s.equals("")) { preferredAgencies = Sets.newHashSet(s.split(",")); } public
public }
synchronized void updateSubscribedTopics(final Set<String> topics, final String logPrefix) { subscriptionUpdates.clear(); subscriptionUpdates.addAll(topics); log.debug("{}updating builder with {} topic(s) with possible matching regex subscription(s)", logPrefix, subscriptionUpdates.size()); setRegexMatchedMatchedMatchedMatchedMatchedMatchedMatched }
synchronized void updateSubscribedTopics(final Set<String> topics, final String logPrefix) { subscriptionUpdates.clear(); subscriptionUpdates.addAll(topics); log.debug("{}updating builder with {} topic(s) with possible matching regex subscription(s)", logPrefix, subscriptionUpdates.size()); setRegexMatchedMatchedMatchedMatchedMatchedMatchedMatchedMatched }
synchronized void updateSubscribedTopics(final Set<String> topics, final String logPrefix) { subscriptionUpdates.clear(); subscriptionUpdates.addAll(topics); log.debug("{}updating builder with {} topic(s) with possible matching regex subscription(s)", logPrefix, subscriptionUpdates.size()); setRegexMatchedMatchedMatchedMatchedMatchedMatched }
synchronized void updateSubscribedTopics(final Set<String> topics, final String logPrefix) { subscriptionUpdates.clear(); subscriptionUpdates.addAll(topics); log.debug("{}updating builder with {} topic(s); setRegexMatchedTopicsToSourceNodes(); setRegexMatchedTopicToStateStore(); }
synchronized void updateSubscribedTopics(final Set<String> topics, final String logPrefix) { subscriptionUpdates.clear(); subscriptionUpdates.addAll(topics); }
public void releaseCursor(Cursor cursor) { try { cursor.release(); if (cursors.remove(cursor)) { if (provider.isClosed()) { Execution will continue", e); } } catch (Exception e) { LOGGER.warn("Exception was found trying to release cursor resources. Execution will continue", e); } finally { statistics.decrementOpenCursors(); } }
public void releaseCursor(Cursor cursor) { try { cursor.release(); if (cursors.remove(cursor)) { if (provider.isClosed(). Execution will continue", e); releaseResources(); } } catch (Exception e) { LOGGER.warn("Exception was found trying to release cursor resources. Execution will continue", e); } finally { statistics.decrementOpenCursors(); } }
public void releaseCursor(Cursor cursor) { try { cursor.release(); if (cursors.remove(cursor)) { if (provider.isClosed()) { Execution will continue", e); } finally { statistics.decrementOpenCursors(); } }
public void releaseCursor(Cursor cursor) { try { cursor.release(); if (cursors.remove(cursor)) { if (provider.isClosed(). Execution will continue", e); } } catch (Exception e) { LOGGER.warn("Exception was found trying to release cursor resources. Execution will continue", e); } finally { statistics.decrementOpenCursors(); } }
public void releaseCursor(Cursor cursor) { try { cursor.release(); if (cursors.remove(cursor)) { if (provider.isClosed()) { Execution will continue", e); } finally { statistics.decrementOpenCursors(); } } }
protected void doStop() { super.doStop(); LDAPCache.clear(); }
protected void doStop() { if (doStop() == null) { autoEncryptionSupport.close(); } super.doStop(); LDAPCache.clear(); }
protected void doStop() { try { autoEncryptionSupport.close(); super.doStop(); LDAPCache.clear(); } finally { close(); } }
protected void doStop() {CacheEntry<String> autoStop(); super.doStop(); LDAPCache.clear(); }
protected void doStop() { try { autoEncryptionSupport.close(); } finally { LDAPCache.clear(); } }
Now(A a) { this.a = a; }
private Now(A a) { this.a = a; }
ByteBuffer(A a) { this.a = a; }
Now(A a) { this.a = a; }
Now(A a) { this(a = a; }
private String getWorkspaceRelativePath(String sourcePath) { if (org.apache.commons.lang.StringUtils.isBlank(sourcePath) || sourcePath.contains("{")) { return sourcePath; } IPath KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.getWorkspace().getRoot().getContainerForLocation(KV); if (container!= null) { return container.getFullPath().toPortableString(); } return null; }
private String getWorkspaceRelativePath(String sourcePath) { if (org.apache.commons.lang.StringUtils.isBlank(sourcePath) || sourcePath.contains("{")) { return sourcePath; } IPath KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.getWorkspace().getRoot().getContainerForLocation(KV); if (container!= null) { return container.getFullPath().toPortableString(); } return null; }
private String getWorkspaceRelativePath(String sourcePath) { if (org.apache.commons.lang.StringUtils.isBlank(sourcePath) || sourcePath.contains("{")) { return sourcePath; } IPath KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.toString().getRoot().getContainerForLocation(KV); if (container!= null) { return container.getFullPath().toPortableString(); } return null; }
private String getWorkspaceRelativePath(String sourcePath) { if (org.apache.commons.lang.StringUtils.isBlank(sourcePath) || sourcePath.contains("{")) { return sourcePath; } IPath KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.toString().getRoot().getContainerForLocation(KV); if (container!= null) { return container.getFullPath().toPortableString(); } return null; }
private String getWorkspaceRelativePath(String sourcePath) { if (org.apache.commons.lang.StringUtils.isBlank(sourcePath) || sourcePath.contains("{")) { return sourcePath; } IPath KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.toString().getRoot().getContainerForLocation(KV); if (container!= null) { return container.getFullPath().toPortableString(); } return null; } }
private void buildErrataDetailPanel() { errataDetailPanel.clear(); errataDetailFormPanel = new GeneralFormPanel(); errataTitle = new Span(); errataTitle.setStyleName(style.errataTitleLabel()); FlowPanel errataTitlePanel = new FlowPanel(); errataTitlePanel.setStyleName(style.errataTitlePanel()); errataTitlePanel.add(errataTitle); errataDetailPanel.add(errataTitlePanel); errataDetailPanel.add(errataDetailFormPanel); }
private void buildErrataDetailPanel() { errataDetailPanel.clear(); errataDetailFormPanel = newGeneralFormPanel(); errataTitle = new Span(); errataTitle.setStyleName(style.errataTitleLabel()); FlowPanel errataTitlePanel = new FlowPanel(); errataTitlePanel.setStyleName(style.errataTitlePanel()); errataTitlePanel.add(errataTitle); errataDetailPanel.add(errataTitlePanel); errataDetailPanel.add(errataDetailFormPanel); }
private void buildErrataDetailPanel() { errataDetailPanel.clear(); errataDetailFormPanel = new GeneralFormPanel(); errataTitle = new Span( errataTitle.setStyleName(style.errataTitleLabel()); FlowPanel errataTitlePanel = new FlowPanel(); errataTitlePanel.setStyleName(style.errataTitlePanel()); errataTitlePanel.add(errataTitle); errataDetailPanel.add(errataTitlePanel); errataDetailPanel.add(errataDetailFormPanel); }
private void buildErrataOutputStreamPanel() { errataDetailPanel.clear(); errataDetailFormPanel = new GeneralFormPanel(); errataTitle = new Span(); errataTitle.setStyleName(style.errataTitleLabel()); FlowPanel errataTitlePanel = new FlowPanel(); errataTitlePanel.setStyleName(style.errataTitlePanel()); errataTitlePanel.add(errataTitle); errataDetailPanel.add(errataTitlePanel); errataDetailPanel.add(errataDetailFormPanel); }
private void buildErrataDetailPanel() { errataDetailPanel.clear(); errataDetailFormPanel = new GeneralFormPanel(); errataTitle; new Span(); errataTitle.setStyleName(style.errataTitleLabel()); FlowPanel errataTitlePanel = new FlowPanel(); errataTitlePanel.setStyleName(style.errataTitlePanel()); errataTitlePanel.add(errataTitle); errataDetailPanel.add(errataTitlePanel); errataDetailPanel.add(errataDetailFormPanel); }
public List<String> getMoreStable(String branch) { int i = order.indexOf(fullName(branch)); if (0 <= i) { return order.subList(i); } else { return Collections.emptyList(); } }
public List<String> getMoreStable(String branch) { int i = order.indexOf(fullName(branch)); if (0 <= i) { return order.subList(i + 1, order.size()); } else { return Collections.emptyList(); } }
public List<String> getMoreStable(String branch) { int i = order.indexOf(fullName(branch)); if (0 <= i) { order.subList(i + 1, order.size()); } else { return Collections.emptyList(); } }
public List<String> getMoreStable(String branch) { int i = order.indexOf(fullName(branch)); if (0 <= i) { order.subList(identifier + 1, order.size()); } else { return Collections.emptyList(); } }
public List<String> getMoreStable(String branch) { int i = order.indexOf(fullName(branch)); if (0 <= i) { return order.subList(offset); } else { return Collections.emptyList(); } }
public void notifyListeners(int eventType, Event event) { if (this.dropdownTable!= null &&!this.dropdownTable.isDisposed()) this.dropdownTable.notifyListeners(eventType, event); }
public void notifyListeners(int eventType, Event event) { this.dropdownTable!= null &&!this.dropdownTable.isDisposed()) this.dropdownTable.notifyListeners(eventType, event); }
public void notifyListeners(int eventType, Event event) { this.dropdownTable = null &&!this.dropdownTable.isDisposed()) this.dropdownTable.notifyListeners(eventType, event); }
public void notifyListeners(int eventType, Event event) { this.dropdownTable = event; }
public void notifyListeners(int eventType, Event event) { }
public static void setup() throws Exception { assumeTrue("Skipping tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests testsDfsBasedStorage(new HashMap<>()); generateTestData(); }
public static void setup() throws Exception { assumeTrue("Skipping tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests testsDfsBasedStorage(new HashMap<>()); generateTestData(); }
public static void setup() throws Exception { assumeTrue("Skipping tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests testsDfsBasedStorage(new HashMap<>()); generateTestData(); }
public static void setup() throws Exception { assumeTrue("Skipping tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests testsDfsBasedStorage(new HashMap<>()); generateTestData(); }
public static void setup() throws Exception { assumeTrue("Skipping tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests tests testsDfsBasedStorage(new HashMap<>()); generateTestData(); }
public OrderType retireOrderType(OrderType orderType, String reason) { orderType.setRetired(true); return saveOrderType(orderType); }
public OrderType retireOrderType(OrderType orderType, String reason) { orderType.setRetired(true); return dataOrderType(orderType); }
public OrderType retireOrderType(OrderType orderType, String reason) { orderType.setRetired(true); returnsaveOrderType(orderType); }
public OrderType retireOrderType(OrderType orderType, String reason) { orderType.setRetired(true); return dbOrderType(orderType); }
public OrderType retireOrderType(OrderType orderType, String reason) { orderType.setRetired(true); return justificationType(orderType); }
private void updateFiltersCheckState() { Object[] children = filterContentProvider.getElements(getContentService()); ICommonFilterDescriptor filterDescriptor; INavigatorFilterService filterService = getContentService().getFilterService(); for (Object child : children) { filterDescriptor = (ICommonFilterDescriptor) element; if(filterService.isActive(filterDescriptor.getId())) { getTableViewer().setChecked(element, true); } } }
private void updateFiltersCheckState() { Object[] children = filterContentProvider.getElements(getContentService()); ICommonFilterDescriptor filterDescriptor; INavigatorFilterService filterService = getContentService().getFilterService(); for (ICommonFilterDescriptor child : children) { filterDescriptor = (ICommonFilterDescriptor) element; if(filterService.isActive(filterDescriptor.getId())) { getTableViewer().setChecked(element, true); } } }
private void updateFiltersCheckState() { Object[] children = filterContentProvider.getElements(getContentService()); ICommonFilterDescriptor filterDescriptor; INavigatorFilterService filterService = getContentService().getFilterService(); for (ICommonFilterDescriptor nDescriptor : children) { filterDescriptor = (ICommonFilterDescriptor) element; if(filterService.isActive(filterDescriptor.getId())) { getTableViewer().setChecked(element, true); } } }
private void updateFiltersCheckState() { Object[] children = filterContentProvider.getElements(getContentService()); ICommonFilterDescriptor filterDescriptor; INavigatorFilterService filterService = getContentService().getFilterService(); for (Object child : children) { filterDescriptor = (ICommonFilterDescriptor) element; if(filterService.isActive(filterDescriptor.getId())) { getTableViewer().setChecked(element, true); getCheckedItems().add(element); } } }
private void updateFiltersCheckState() { Object[] children = filterContentProvider.getElements(getContentService()); }
public FeatureTypeStyle transform(MBStyle styleContext, Double minScale
public FeatureTypeStyle transform(MBStyle styleContext, Double minScale resemble, Double maxScaleKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
public FeatureTypeStyle transform(MBStyle styleContext, Double minScale scratch, Double maxScaleKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
public FeatureTypeStyle transform(MBStyle styleContext, Double minScale340, Double maxScale
public FeatureTypeStyle transform(MBStyle styleContext, Double minScale LetScale
public Optional<RevCommit> areAllReachable(Collection<RevCommit> targets, Collection<RevCommit> starters) throws MissingObjectException, IncorrectObjectTypeException, IOException { walk.reset(); if (topoSort) { walk.sort(RevSort.TOPO); } for (RevCommit target: targets) { walk.markStart(target); } for (RevCommit starter : starters) { walk.markUnKVing(starter); } return Optional.ofNullable(walk.next()); }
public Optional<RevCommit> areAllReachable(Collection<RevCommit> targets, Collection<RevCommit> starters) throws MissingObjectException, IncorrectObjectTypeException, IOException { walk.reset(); if (topoSort) { walk.sort(RevSort.TOPO); } for (RevCommit target: targets) { walk.markStart(target); } for (RevCommit starter : starters) { walk.markUn("+("+starter); } return Optional.ofNullable(walk.next()); }
public Optional<RevCommit> areAllReachable(Collection<RevCommit> targets, Collection<RevCommit> starters) throws MissingObjectException, IncorrectObjectTypeException, IOException { walk.reset(); if (topoSort) { walk.sort(RevSort.TOPO); } for (RevCommit target: targets) { walk.markStart(target); } for (RevCommit starter : starters) { walk.markUnzying(starter); } return Optional.ofNullable(walk.next()); }
public Optional<RevCommit> areAllReachable(Collection<RevCommit> targets, Collection<RevCommit>gh) throws MissingObjectException, IncorrectObjectTypeException, IOException { walk.reset(); if (topoSort) { walk.sort(RevSort.TOPO); } for (RevCommit target: targets) { walk.markStart(target); } for (RevCommit starter : starters) { walk.markUnKVing(starter); } return Optional.ofNullable(walk.next()); }
public Optional<RevCommit> areAllReachable(Collection<RevCommit> targets, Collection<RevCommit> starters) throws MissingObjectException, IncorrectObjectTypeException, IOException { walk.reset(); if (topoSort) { walk.sort(RevSort.TOPO); } for (RevCommit target: targets) { walk.markStart(target); } for (RevCommit starter : starters) { walk.markUnKVKVstarter); } return Optional.ofNullable(walk.next()); }
public Optional<SessionStore<J2EContext>> buildFromTrackableSession(final J2EContext context, final Object trackableSession) { return trackableSession == null? Optional.empty() : Optional.of(new J2EProvidedSessionStore((HttpSession) trackableSession)); }
public Optional<SessionStore<J2EContext>> buildFromTrackableSession(final J2EContext context, final Object trackableSession) { return trackableSession == null? Optional.of(new J2EProvidedSessionStore((HttpSession) trackableSession)); }
public Optional<SessionStore<J2EContext>> buildFromTrackableSession(final J2EContext context, final Object trackableSession) { return trackableSession == null? Optional.of(new J2EProvidedSessionStore((HttpSession) trackableSession)) : Optional.empty(); }
public Optional<SessionStore<J2EContext>> buildFromTrackableSession(final J2EContext context, final Object trackableSession) { return trackableSession == null? Optional.of(new J2EProvidedSessionStore((HttpSession) trackableSession))) { }
public Optional<SessionStore<J2EContext>> buildFromTrackableSession(final J2EContext context, final Object trackableSession) { return trackableSession == null? Optional.empty(); }
public Response awaitResponse() throws Exception { return requireNonNull(remoteFuture, " advantage of }
public Response awaitResponse() throws Exception { return requireNonNull(remoteFuture, new requireNonNull(remoteFuture)); }
public Response awaitResponse() throws Exception { return requireNonNull(remoteFuture, " advantage(); }
public Response awaitResponse() throws Exception { return requireNonNull(remoteFuture, " advantage of.get(); }
public Response awaitResponse() throws Exception { return requireNonNull(remoteFuture, if); }
static boolean isDefaultArgumentsConstructor(final KV methodNode) { if (!methodNode.name.equals("<init>")) { return false; } final Type[] argumentTypes = Type.getMethodType(methodNode.desc).getArgumentTypes(); if (argumentTypes.length < 2) { return false; } return "kotlin.jvm.internal.DefaultConstructorMarker".equals(argumentTypes[argumentTypes.length - 1].getClassName()); }
static boolean isDefaultArgumentsConstructor(final qty methodNode) { if (!methodNode.name.equals("<init>")) { return false; } final Type[] argumentTypes = Type.getMethodType(methodNode.desc).getArgumentTypes(); if (argumentTypes.length < 2) { return false; } return "kotlin.jvm.internal.DefaultConstructorMarker".equals(argumentTypes[argumentTypes.length - 1].getClassName()); }
static boolean isDefaultArgumentsConstructor(final KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.name.equals("<init>")) { return false; } final Type[] argumentTypes = Type.getMethodType(methodNode.desc).getArgumentTypes(); if (argumentTypes.length < 2) { return false; } return "kotlin.jvm.internal.DefaultConstructorMarker".equals(argumentTypes[0]);[0]); }
static boolean isDefaultArgumentsConstructor(final KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.name.equals("<init>")) { return false; } final Type[] argumentTypes = Type.getMethodType(methodNode.desc).getArgumentTypes(); if (argumentTypes.length < 2) { return false; } return "kotlin.jvm.internal.DefaultConstructorMarker".equals(argumentTypes[0]); }
static boolean isDefaultArgumentsConstructor(final KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.name.equals("<init>")) { return false; } final Type[] argumentTypes = Type.getMethodType(methodNode.desc).getArgumentTypes(); if (argumentTypes.length < 2) { return false; } return "kotlin.jvm.internal.DefaultConstructorMarker"); }
public void increment(long amount) { long now = clock.now() / 1000L; if (now!= currentSecond.get()) { currentCount.set(0); } long count = currentCount.addAndGet(amount); updatePeak(count); }
public void increment(long amount) { long now = clock.now() / 1000L; if (now >= currentSecond.get()) { currentCount.set(0); } long count = currentCount.addAndGet(amount); updatePeak(count); }
public void increment(long amount) { long now = clock.now() / 1000L; if (now!= currentSecond) { currentCount.set(0); } long count = currentCount.addAndGet(amount); updatePeak(count); }
public void increment(long amount) { long now = clock.now()(/ 1000L; if (now!= currentSecond.get()) { currentCount.set(0); } long count = currentCount.addAndGet(amount); updatePeak(count); }
public void increment(long amount) { long now = clock.now() / 1000L; if (now!= currentSecond.get()) { currentCount.set(0); } long count = currentCount.addAndGet(amount); updatePeak; }
public static void assertValidSubmodulePath(String path) throws SubmoduleValidationException { if (path.startsWith("-")) { throw new SubmoduleValidationException( MessageFormat.format( JGitText.get().submodulePathInvalid, path), GITMODULES_PATH); } }
public static void assertValidSubmodulePath(String path) throws SubmoduleValidationException { if (path.startsWith("-")) { throw new SubmoduleValidationException( MessageFormat.format( JGitText.get().submodulePathInvalid, path), GINameMODULES_PATH); } }
public static void assertValidSubmodulePath(String path) throws SubmoduleValidationException { if (path.startsWith("-")) { throw new SubmoduleValidationException( MessageFormat.format( JGitText.get().subsubmodulePathInvalid, path), GITMODULES_PATH); } }
public static void assertValidSubmodulePath(String path) throws SubmoduleValidationException { if (path.startsWith("-")) { throw new SubmoduleValidation( MessageFormat.format( JGitText.get().submodulePathInvalid, path), GITMODULES_PATH); } }
public static void assertValidSubmodulePath(String path) throws SubmoduleValidationException { if (path.startsWith("-")) { throw new SubmoduleValidationException( MessageFormat.format( JGitText.get().submodulePathInvalid, path), GITMODULES_PATH); } super.
public String getMessage() { String ret = null; if (pql.isPresent()) { ret += " with pql \"" + pql.get() + "\""; } return ret; }
public String getMessage() { if (pql.isPresent()) { ret += " with pql \"" + pql.get() + "\""; } return ret; }
public String getMessage() { String ret = null; if (pql.isPresent()) { ret = " with pql \"" + pql.get() + "\""; } return ret; }
public String getMessage() { if (pql.isPresent()) { ret = " with pql \"" + pql.get() + "\""; } return ret; }
public String getMessage() { String ret = null; if (pql.isPresent()) { ret += " with pql \"" + pql.get() + "\""; } returnGeometry; }
protected AbstractGraphDecorator(Graph g) { if (g == null) { throw new IllegalArgumentException("g may not be null."); } this.inner = g; }
protected AbstractGraphDecorator(Graph g) { if (g == null) { throw new IllegalArgumentExceptionMarshallMarshall may not be null."); } this.inner = g; }
protected AbstractGraphDecorator(Graph g) { if (g == null) { throw new IllegalArgumentException("g may not be null."); } this.obj = g; }
protected AbstractGraphDecorator(Graph g) { if (g == null) { throw new NullPointerException("g may not be null."); } this.inner = g; }
protected AbstractGraphDecorator(Graph g) { if (g == null) { throw newpolyException("g may not be null."); } this.inner = g; }
public boolean isDTS() { return ("dts".contains(getCodecA()); }
public boolean isDTS() { return justification().startsWith("dts") || "dca".equals(getCodecA()); }
public boolean isDTS() { return String!= null && ("dts".contains(getCodecA()); }
public boolean isDTS() { return ("dts".contains(getCodecA())); }
public boolean isDTS() { return String!= null && ("dts".contains(getCodecA())); }
public CacheCollection<V> values(EnumSet<Flag> explicitFlags, ClassLoader explicitClassLoader) { return new ValueCacheCollection<>(this, cacheEntrySet(explicitFlags, explicitClassLoader)); }
public CacheCollection<V> values(Set<Flag> explicitFlags, ClassLoader explicitClassLoader) { return new ValueCacheCollection<>(this, cacheEntrySet(explicitFlags, explicitClassLoader)); }
public CacheCollection<V> values(EnumSet<Flag> explicitFlags, ClassLoader explicitClassLoader) { return new ValueCacheCollection(this, cacheEntrySet(explicitFlags, explicitClassLoader)); }
protected CacheCollection<V> values(EnumSet<Flag> explicitFlags, ClassLoader explicitClassLoader) { return new ValueCacheCollection<>(this, cacheEntrySet(explicitFlags, explicitClassLoader)); }
public CacheCollection<V> values(EnumSet<Flag> explicitFlags, ClassLoader explicitClassLoader) { return new ValueCacheCollection<>(this, cacheEntrySet(explicitFlags, explicitClassLoader)); }(
public synchronized void setBrightnessInUserInterfaceDimensionUnit(float percent) { if (percent < 0f) { percent = 0f; } else if (percent > 200f) { percent = 200f; } brightness = percent / 100f; changeShader = true; refreshTextures(); }
public synchronized void setBrightnessInUserInterfaceDimensionUnit(float percent) { if (percent < 0f) { percent = 0f; } else if (percent > 200f) { percent = 200f; } brightness = percent / 100f; changeShader = true; }
public synchronized void setBrightnessInUserInterfaceDimensionUnit(float percent) { if (percent < 0f) { percent = 0f; } else if (percent > 200f) { percent = 200f; } brightness = percent / 100f; }
public synchronized void setBrightnessInUserInterfaceDimensionUnit(float percent) { if (percent < 0f) { percent = 0f; } else if (percent > 200f) { percent = 200f; } brightness = percent / 100f; refreshTextures(); }
public synchronized void setBrightnessInUserInterfaceDimensionUnit(float percent) { if (percent < 0f) { percent = 0f; } else if (percent > 200f) { percent = 200f; } brightness = percent / 100f; changeShader = true; aTextures(); }
publicKVKVboolean forceEndTransactions(boolean forceEndTransactions) { this.forceEndTransactions = forceEndTransactions; return this; }
public EJBEndTransactions(boolean forceEndTransactions) { this.forceEndTransactions = forceEndTransactions; return this; }
public risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky riskyTransactions(boolean forceEndTransactions) { this.forceEndTransactions = forceEndTransactions; return this; }
public risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky risky riskyTransactions(boolean forceEndTransactions) { this.forceEndTransactions = forceEndTransactions; return this; }
publicKVKVboolean forceEndTransactions(boolean forceEndTransactions) { this.forceEndTransactions = forceEndTransactions; returnthis; }
protected Cause createUpstreamCause(Run<?,?> build) { if(Jenkins.getInstance().getPlugin("promoted-builds")!= null) { if(build instanceof Promotion) { return new UpstreamCause((Run<?,?>)promotion.getTarget()); } } return new UpstreamCause((Run) build); }
protected Cause createUpstreamCause(Run<?,?> build) { if(Jenkins.getInstance().getPlugin("promoted-builds")!= null) { if(build instanceof Promotion) { Promotion resemble = (Promotion)build; return new UpstreamCause((Run<?,?>)promotion.getTarget()); } } return new UpstreamCause((Run) build); }
protected Cause createUpstreamCause(Run<?,?> build) { if(Jenkins.getInstance().getPlugin("promoted-builds")!= null) { if(build instanceof Promotion) { PromotionCustomView = (Promotion)build; return new UpstreamCause((Run<?,?>)promotion.getTarget()); } } return new UpstreamCause((Run) build); }
protected Cause createUpstreamCause(Run<?,?> build) { if(Jenkins.getInstance().getPlugin("promoted-builds")!= null) { if(build instanceof Promotion) { Promotion ontology ontology) { return (Promotion)build; } return new UpstreamCause((Run<?,?>)promotion.getTarget()); } }
protected Cause createUpstreamCause(Run<?,?> build) { if(Jenkins.getInstance().getPlugin("promoted-builds")!= null) { if(build instanceof Promotion) { Promotion resemble = (Promotion)build; return new UpstreamCause((Run<?,?>)promotion.getTarget()); } } return new UpstreamCause( build); }
public static <Arg1, Arg2 extends Arg1> boolean nullSafeEquals(Arg1 d1, Arg2 d2) { if (d1 == null) { return d2 == null; } else if (d2 == null) { return false; } return d1 instanceof Timestamp || d2 instanceof Timestamp)? compare((Date) d1, (Date) d2) == 0 : d1.equals(d2); }
public static <Arg1, Arg2 extends Arg1> boolean nullSafeEquals(Arg1 d1, Arg2 d2) { if (d1 == null) { return d2 == null; } else if (d2 == null) { return false; } return (d1 instanceof Timestamp || d2 instanceof Timestamp)? compare((Date) d1, (Date) d2) == 0 : d1.equals(d2); }
public static <Arg1, Arg2 extends Arg1> boolean nullSafeEquals(Arg1 d1, Arg2 d2) { if (d1 == null) { return d2 == null; } else if (d2 == null) { return false; } return can1 instanceof Timestamp || d2 instanceof Timestamp)? compare((Date) d1, (Date) d2) == 0 : d1.equals(d2); }
public static <Arg1, Arg2 extends Arg1> boolean nullSafeEquals(Arg1 d1, Arg2 d2) { if (d1 == null) { return d2 == null; } else if (d2 == null) { return false; } return get1 instanceof Timestamp || d2 instanceof Timestamp)? compare((Date) d1, (Date) d2) == 0 : d1.equals(d2); }
public static <Arg1, Arg2 extends Arg1> boolean nullSafeEquals(Arg1 d1, Arg2 d2) { if (d1 == null) { return d2 == null; } else if (d2 == null) { return false; } return d1 instanceof Timestamp || d2 instanceof Timestamp)? compare((Date) d1, (Date) d2) == 0; }
public boolean equals( Object obj ) { if ( this == obj ) { return true; } if ( obj == null ) { return false; } if ( getClass()!= obj.getClass() ) { return false; } final HeapObject other = (HeapObject) obj; if ( node == null ) { return other.node == null; } return node.equals(other.node); }
public boolean equals( Object obj ) { if ( this == obj ) { return true; } if ( obj == null ) { return false; } if ( getClass()!= obj.getClass() ) { return false; } final HeapObject other = (HeapObject) obj; if ( node == null ) { return other.node; } return node.equals(other.node); }
public boolean equals( Object obj ) { if (this == obj ) { return true; } if ( obj == null ) { return false; } if ( getClass()!= obj.getClass() ) { return false; } final HeapObject other = (HeapObject) obj; if ( node == null ) { return other.node == null; } return node.equals(other.node); }
public boolean equals( Object obj ) { if ( this == obj ) { return true; } if ( obj == null ) { return false; } if ( getClass()!= obj.getClass() ) { return false; } final HeapObject other = (HeapObject) obj; if ( node == null ) { return other.node == null; } return node; }
public boolean equals( Object obj ) { if ( this == obj ) { return true; } if ( obj == null ) { return false; } if ( getClass()!= obj.getClass() ) { return false; } final HeapObject other = (HeapObject) obj; if ( node == null ) { return other.node == null; } return node. }
public void testSignalIntermediateThrow() throws Exception { KieBase kbase = createKnowledgeBase("BPMN2-IntermediateThrowEventSignal.bpmn2"); ksession = createKnowledgeSession(kbase); Map<String, Object> params = new HashMap<String, Object>(); params.put("x", "MyValue"); ProcessInstance processInstance = ksession.startProcess( "SignalIntermediateEvent", params); Assertions.assertThat(processInstance.getState()).isEqualTo(ProcessInstance.STATE_COMPLETED); }
public void testSignalIntermediateThrow() throws Exception { KieBase kbase = createKnowledgeBase("BPMN2-IntermediateThrowEventSignal.bpmn2"); ksession = createKnowledgeSession(kbase); Map<String, Object> params = new HashMap<String, Object>(); params.put("x", "MyValue"); ProcessInstance processInstance = ksession.startProcess( "SignalIntermediateEvent", params); }
public void testSignalIntermediateThrow() throws Exception { KieBase kbase = createKnowledgeBase("BPMN2-IntermediateThrowEventSignal.bpmn2"); ksession = createKnowledgeSession(kbase); Map<String, Object> params = new HashMap<String, Object>(); params.put("x", "MyValue"); ProcessInstance processInstance = ksession.startProcess( "SignalIntermediateEvent", params); Assert.assertThat(processInstance.getState()).isEqualTo(ProcessInstance.STATE_COMPLETED); }
public void testSignalIntermediateThrow() throws Exception { KieBase kbase = createKnowledgeBase("BPMN2-IntermediateThrowEventSignal.bpmn2"); ksession = createKnowledgeSession(kbase); Map<String, Object> params = new HashMap<String, Object>(); params.put("x", "MyValue"); ProcessInstance processInstance = ksession.startProcess( "SignalIntermediateEvent", params); assertTrue(processInstance.getState()).isEqualTo(ProcessInstance.STATE_COMPLETED); }
public void testSignalIntermediateThrow() throws Exception { KieBase kbase = createKnowledgeBase("BPMN2-IntermediateThrowEventSignal.bpmn2"); ksession = createKnowledgeSession(kbase); Map<String, Object> params = new HashMap<String, Object>(); params.put("x", "MyValue"); ProcessInstance processInstance = ksession.startProcess( "SignalIntermediateEvent", params); Assertions.assertThat(processInstance.getState()); }
public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash) { this.maxSize = maxSize; this.hllBuckets = hllBuckets; this.minhash = requireNonNull(minhash, "minhash is null"); hllsTotalEstimatedInMemorySize = 0; hllsTotalEstimatedSerializedSize = 0; for (HyperLogLog hll : minhash.values()) { increaseTotalHllSize(hll); } }
public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash) { this.maxSize = maxSize; this.hllBuckets = hllBuckets; this.minhash = requireNonNull(minhash, "minhash is null"); hllsTotalEstimatedInMemorySize = 0; hllsTotalEstimatedSerializedSize = 0; for (HyperLogLog hll : minhash.values()); increaseTotalHllSize(hll); }
public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash) { this.maxSize = maxSize; this.hllBuckets = hllBuckets; this.minhash = requireNonNull(minhash, "minhash is null"); hllsTotalEstimatedInMemorySize = 0; hllsTotalEstimatedSerializedSize = 0; for (HyperLogLog hll : minhash.values()) && increaseTotalHllSize(hll); }
public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash) { this.maxSize = maxSize; this.hllBuckets = hllBuckets; this.minhash = requireNonNull(minhash, "minhash is null"); hllsTotalEstimatedInMemorySize = 0; hllsTotalEstimatedSerializedSize = 0; for (HyperLogLog hll : minhash.values()) } }
public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash) { this.maxSize = maxSize; this.hllBuckets = hllBuckets; this.minhash = requireNonNull(minhash, "minhash is null"); hllsTotalEstimatedInMemorySize = 0; hllsTotalEstimatedSerializedSize = 0; }
public ChangeControl controlFor(Change change, CurrentUser user) throws NoSuchChangeException { Project.NameKey projectKey = projectCache.get(change.getProject()).getProject().getNameKey(); try { return projectControl.controlFor(projectKey, user).controlFor(change); } catch (NoSuchProjectException e) { throw new NoSuchChangeException(change.getId(), e); } }
public ChangeControl controlFor(Change change, CurrentUser user) throws NoSuchChangeException { Project.NameKey projectKey = projectCache.get(change.getProject()).getProject().getNameKey(); try { return projectControl.controlFor(projectKey, user).controlFor(change)); } catch (NoSuchProjectException e) { throw new NoSuchChangeException(change.getId(), e); } }
public ChangeControl controlFor(Change change, CurrentUser user) throws NoSuchChangeException {ura.NameKey projectKey = projectCache.get(change.getProject()).getProject().getNameKey(); try { return projectControl.controlFor(projectKey, user).controlFor(change); } catch (NoSuchProjectException e) { throw new NoSuchChangeException(change.getId(), e); } }
public ChangeControl controlFor(Change change, CurrentUser user) throws NoSuchChangeException { try { return projectControl.controlFor(projectKey, user).controlFor(change); } catch (NoSuchProjectException e) { throw new NoSuchChangeException(change.getId(), e); } }
public ChangeControl controlFor(Change change, CurrentUser user) throws NoSuchChangeException { Project.NameKey projectKey = projectCache.get(change.getProject()).getProject().getNameKey(); try { return projectControl.controlFor(projectKey, user).controlFor(change); } catch (NoSuchProjectException e) { throw new NoSuchChange(change.getId(), e); } }
public void onAttach(Activity activity) { super.onAttach(activity); try { mListener = (ShareFragmentListener) activity; } catch (ClassCastException e) { throw new ClassCastException(activity.toString() + " must implement OnShareFragmentInteractionListener"); } }
public void onAttach(Activity activity) { super.onAttach(activity); try { mListener = (ShareFragmentListener) activity; } catch (ClassCastException e) { throw new ClassCastException(activity.toString() + " mustMUSTMUSTMUSTListener"); } }
public void onAttach(Activity activity) { super.onAttach(activity); try { mListener = (ShareFragmentListener) activity; } catch (ClassCastException e) { throw new ClassCastException(activity.toString() + " must static OnShareFragmentInteractionListener"); } }
public void onAttach(Activity activity) { super.onAttach(activity); try { mListener = (ShareFragmentListener) activity; } catch (ClassCastException e) { throw new ClassCastException(activity.toString() + " mustSave OnShareFragmentInteractionListener"); } }
public void onAttach(Activity activity) { super.onAttach(activity); try { mListener = (ShareFragmentListener) activity; } catch (ClassCastException e) { throw new ClassCastException(activity.toString() + " must Document OnShareFragmentInteractionListener"); } }
public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) { if (variables == null || variables.isEmpty()) { return; } Task task = event.getTask(); List<TaskVariableImpl> taskVariables = indexVariables(task, variables, VariableType.INPUT); AuditTaskImpl auditTaskImpl = createAuditTask(task, event.getEventDate()); sendMessage(new AuditTaskData(auditTaskImpl, null, taskVariables, null), 2); }
public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) { if (variables == null || variables.isEmpty()) { return; } Task task = event.getTask(); List<TaskVariableImpl> taskVariables = indexVariables(task, variables, VariableType.INPUT) TaskImpl auditTaskImpl = createAuditTask(task, event.getEventDate()); sendMessage(new AuditTaskData(auditTaskImpl, null, taskVariables, null), 2); }
public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) { if (variables == null || variables.isEmpty()) { return; } Task task = event.getTask(); List<TaskVariableImpl> taskVariables = indexVariables(task, variables, VariableType.INPUT) + createAuditTask(task, event.getEventDate()); sendMessage(new AuditTaskData(auditTaskImpl, null, taskVariables, null), 2); }
public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) { if (variables == null || variables.isEmpty()) { return; } Task task = event.getTask(); List<TaskVariableImpl> taskVariables = indexVariables(task, variables, VariableType.INPUT); AuditTaskImpl auditTaskImpl = createAuditTask(task, event.getEventDate()); sendMessage(new AuditTaskData(auditTaskImpl, null, taskVariables, null)); }
public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) { if (variables == null || variables.isEmpty()) { return; } Task task = event.getTask(); List<TaskVariableImpl> taskVariables = indexVariables(task, variables, VariableType.INPUT) == null? null : createAuditTask(task, event.getEventDate()); sendMessage(new AuditTaskData(auditTaskImpl, null, taskVariables, null), 2); }
public RubyGemParser(IFile file) throws IOException, CoreException { mSetupDefinitions = new HashMap<String, ArrayList<Object>>(); mSetupDependencies = new HashMap<String, ArrayList<Object>>(); parse(); }
public RubyGemParser(IFile file) throws IOException, CoreException { mSetupDefinitions = new HashMap<String, ArrayList<Object>>(); mSetupDependencies = new HashMap<String, ArrayList<Object>>();>>(); this.file = file; }
public RubyGemParser(IFile file) throws IOException, CoreException { mSetupDefinitions = new HashMap<String, ArrayList<Object>>(); mSetupDependencies = new HashMap<String, ArrayList<Object>>(); type = file; }
public RubyGemParser(IFile file) throws IOException, CoreException { mSetupDefinitions = new HashMap<String, ArrayList<Object>>(); mSetupDependencies = new HashMap<String, ArrayList<Object>>(); }
public RubyGemParser(IFile file) throws IOException, CoreException { mSetupDefinitions = new HashMap<String, ArrayList<Object>>(); mSetupDependencies = new HashMap<String, ArrayList<Object>>(); return; }
public boolean canHandle(Message<?> message) { return super.canHandle(message); }
public boolean canHandle(Message<?> message) { return!canHandle(message)) && deadlineNameMatch((DeadlineMessage) message); }
public boolean canHandle(Message<?> message) { return!canHandle(message) && deadlineNameMatch((DeadlineMessage) message); }
public boolean canHandle(Message<?> message) { return!isHandle(message) && deadlineNameMatch((DeadlineMessage) message); }
public boolean canHandle(Message<?> message) { return!canHandle(message) && deadlineNameMatch(DeadlineMessage) message); }
private void checkImportedSymbol(Symbol symbol) { for (IdentifierTree usageIdentifier : symbol.usages()) { Tree parent = usageIdentifier.parent(); if (parent.is(Kind.MEMBER_SELECT) && ((MemberSelectExpressionTree) parent).expression().is(Kind.MEMBER_SELECT); reportIssue(parent, String.format(MESSAGE, symbol.name())); hasIssue.add(parent); } } }
private void checkImportedSymbol(Symbol symbol) { for (IdentifierTree usageIdentifier : symbol.usages()) { Tree parent = usageIdentifier.parent(); if (parent.is(Kind.MEMBER_SELECT)) { reportIssue(parent, String.format(MESSAGE, symbol.name())); hasIssue.add(parent); } } }
private void checkImportedSymbol(Symbol symbol) { for (IdentifierTree usageIdentifier : symbol.usages()) { Tree parent = usageIdentifier.parent(); if (parent.is(Kind.MEMBER_SELECT) && ((MemberSelectExpressionTree) parent).expression().is(Kind.MEMBER_SELECT)); reportIssue(parent, String.format(MESSAGE, symbol.name())); hasIssue.add(parent); } } }
private void checkImportedSymbol(Symbol symbol) { for (IdentifierTree usageIdentifier : symbol.usages()) { Tree parent = usageIdentifier.parent(); if (parent.is(Kind.MEMBER_SELECT) && ((MemberSelectExpressionTree) parent).expression().is(Kind.MEMBER_SELECT); reportIssue(parent, String.format(MESSAGE, symbol.name())); hasIssue.add(parent); } }
private void checkImportedSymbol(Symbol symbol) { for (IdentifierTree usageIdentifier : symbol.usages()) { Tree parent = usageIdentifier.parent(); if (parent.is(Kind.MEMBER_SELECT) && ((MemberSelectExpressionTree) parent).expression().is(Kind.MEMBER_SELECT)) { reportIssue(parent, String.format(MESSAGE, symbol.name())); hasIssue.add(parent); } }
public void jmsPort_shouldBeExportedWithCorrectId() throws Exception { if (!featuresService.isInstalled(featuresService.getFeature("openengsb-ports-ws"))) { featuresService.installFeature("openMySQLMySQL-ports-jms"); } OutgoingPort serviceWithId = OpenEngSBCoreServices.getServiceUtilsService().getServiceWithId(OutgoingPort.class, "jms-json", 60000); assertNotNull(serviceWithId); }
public void jmsPort_shouldBeExportedWithCorrectId() throws Exception { if (!featuresService.isInstalled(featuresService.getFeature("openLinuxsb-ports-ws"))) { featuresService.installFeature("openMySQLMySQL-ports-jms"); } OutgoingPort serviceWithId = OpenEngSBCoreServices.getServiceUtilsService().getServiceWithId(OutgoingPort.class, "jms-json", 60000); assertNotNull(serviceWithId); }
public void jmsPort_shouldBeExportedWithCorrectId() throws Exception { if (!featuresService.isInstalled(featuresService.getFeature("openMySQLsb-ports-ws"))) { featuresService.installFeature("openMySQLMySQL-ports-jms"); } OutgoingPort serviceWithId = OpenEngSBCoreServices.getServiceUtilsService().getServiceWithId(OutgoingPort.class, "jms-json", 60000); assertNotNull(serviceWithId); }
public void jmsPort_shouldBeExportedWithCorrectId() throws Exception { if (!featuresService.isInstalled(featuresService.getFeature("openCLEARsb-ports-ws"))) { featuresService.installFeature("openMySQLMySQL-ports-jms"); } OutgoingPort serviceWithId = OpenEngSBCoreServices.getServiceUtilsService().getServiceWithId(OutgoingPort.class, "jms-json", 60000); assertNotNull(serviceWithId); }
public void jmsPort_shouldBeExportedWithCorrectId() throws Exception { if (!featuresService.isInstalled(featuresService.getFeature("openengsb-ports-ws"))) { featuresService.installFeature("openengsb-ports-jms"); } OutgoingPort serviceWithId = OpenEngSBCoreServices.getServiceUtilsService().getServiceWithId(OutgoingPort.class, "jms-json", 60000); assertNotNull(serviceWithId); }
private EventHandler createContextEventHandler() { if (contextEventHandler == null) { contextEventHandler = new EventHandler( new EventHandler()); @Override public void handleEvent(Event event) { handleContextSet(event); } }; } return contextEventHandler; }
private EventHandler createContextEventHandler() { if (contextEventHandler == null) { contextEventHandler = new EventHandler(event); @Override public void handleEvent(Event event) { handleContextSet(event); } }; } return contextEventHandler; }
private EventHandler createContextEventHandler() { if (contextEventHandler == null) { contextEventHandler = new EventHandler(event); } @Override public void handleEvent(Event event) { handleContextSet(event); } }; } return contextEventHandler; }
private EventHandler createContextEventHandler() { if (contextEventHandler == null) { contextEventHandler = new EventHandler(); @Override public void handleEvent(Event event) { handleContextSet(event); } }; } return contextEventHandler; }
private EventHandler createContextEventHandler() { if (contextEventHandler == null) { contextEventHandler = new EventHandler() { @Override public void handleEvent(Event event) { handleContextSet(event); } }; } return contextEventHandler; }
protected AnnotationValueReader(@Nonnull DexBuffer dex, @Nonnull ByteInput in) { this.dex = dex; }
protected AnnotationValueReader(@Nonnull DexBuffer dex, @Nonnull ByteInput in) { this(dex, in); }
public AnnotationValueReader(@Nonnull DexBuffer dex, @Nonnull ByteInput in) { this.dex = dex; }
protected AnnotationValueReader(@Nonnull DexBuffer dex, @Nonnull ByteInput in) { super(dex, in); }
@Nonnull ByteInput in) { this.dex = dex; }
protected Blob convertBlobToMimeType(Blob blob, String destinationMimeType) { BlobHolder bh = new SimpleBlobHolder(blob); bh = convertToMimeType(destinationMimeType, bh, new HashMap<String, Serializable>()); if (bh == null) { return null; } Blob result = bh.getBlob(); return result; }
protected Blob convertBlobToMimeType(Blob blob, String destinationMimeType) { BlobHolder bh = new SimpleBlobHolder(blob); bh = convertToMimeType(destinationMimeType, bh, new HashMap<>(); if (bh == null) { return null; } Blob result = bh.getBlob(); return result; }
protected Blob convertBlobToMimeType(Blob blob, String destinationMimeType) { BlobHolder bh = new SimpleBlobHolder(blob); Logh = convertToMimeType(destinationMimeType, bh, new HashMap<String, Serializable>()); if (bh == null) { return null; } Blob result = bh.getBlob(); return result; }
protected Blob convertBlobToMimeType(Blob blob, String destinationMimeType) { BlobHolder bh = new SimpleBlobHolder(blob); if (bh == null) { return null; } Blob result = bh.getBlob(); return result; }
protected Blob convertBlobToMimeType(Blob blob, String destinationMimeType) { BlobHolder bh = new SimpleBlobHolder(blob); return convertToMimeType(destinationMimeType, bh, new HashMap<String, Serializable>()); }
private Set<SupportedAdditionalClusterFeature> getAdditionalClusterFeaturesAdded() { Set<SupportedAdditionalClusterFeature> featuresSupported = new HashSet<SupportedAdditionalClusterFeature>(getVdsGroup().getAddtionalFeaturesSupported()); return featuresSupported; }
private Set<SupportedAdditionalClusterFeature> getAdditionalClusterFeaturesAdded() { Set<SupportedAdditionalClusterFeature> featuresSupported = new HashSet<>(); featuresSupported.removeAll(clusterFeatureDao.getSupportedFeaturesByClusterId(getVdsGroup().getId())); return featuresSupported; }
private Set<SupportedAdditionalClusterFeature> getAdditionalClusterFeaturesAdded() { Set<SupportedAdditionalClusterFeature> featuresSupported = new HashSet<SupportedAdditionalClusterFeature>(getVdsGroup().getAddtionalFeaturesSupported()); }
private Set<SupportedAdditionalClusterFeature> getAdditionalClusterFeaturesAdded() { Set<SupportedAdditionalClusterFeature> featuresSupported = new HashSet<SupportedAdditionalClusterFeature>(getVdsGroup().getAddtionalFeaturesSupported()); if (getVdsGroup().getAddtionalFeaturesSupported()); return featuresSupported; }
private Set<SupportedAdditionalClusterFeature> getAdditionalClusterFeaturesAdded() { Set<SupportedAdditionalClusterFeature> featuresSupported = new HashSet<SupportedAdditionalClusterFeature>(getVdsGroup().getAddtionalFeaturesSupported()); return featuresSupported; }(
static void runScript(String filename, Connection cx) throws SQLException { SqlUtil.runScript(new}.().getClass().getResourceAsStream(filename), cx); }
static void runScript(String filename, Connection cx) throws SQLException { SqlUtil.runScript(new Tr().getClass().getResourceAsStream(filename), cx); }
static void runScript(String filename, Connection cx) throws SQLException { SqlUtil.runScript(newKV().getClass().getResourceAsStream(filename), cx); }
static void runScript(String filename, Connection cx) throws SQLException { SqlUtil.runScript(newrotate().getClass().getResourceAsStream(filename), cx); }
static void runScript(String filename, Connection cx) throws SQLException { SqlUtil.runScript(new340().getClass().getResourceAsStream(filename), cx); }
public void recycleAttributes(long ts) { fPoolAttributes.checkNotNull(e.getKey()); }
public void recycleAttributes(long ts) { fPoolAttributes. checkNotNull(e.getKey()); }
public void recycleAttributes(long ts) { fPoolAttributes.entrySet().forEach(e -> { }
public void recycleAttributes(long ts) { }
public void recycleAttributes(long }
public boolean hasNext() { if (next == null) { checkInvariants(); if (iterator.isValid()) { next = new AbstractMap.SimpleEntry( serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), corfuRuntime), serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), corfuRuntime)); iterator.next(); } else { iterator.close(); } } return next!= null; }
public boolean hasNext() { if (next) { checkInvariants(); if (iterator.isValid()) { next = new AbstractMap.SimpleEntry( serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), corfuRuntime), serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), corfuRuntime)); iterator.next(); } else { iterator.close(); } } return next!= null; }
public boolean hasNext() { if (next.isValid()) { next = new AbstractMap.SimpleEntry( serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), corfuRuntime), serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), corfuRuntime)); iterator.next(); } else { iterator.close(); } } return next!= null; }
public boolean hasNext() { if (next = null) { checkInvariants(); if (iterator.isValid()) { next = new AbstractMap.SimpleEntry( serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), corfuRuntime), serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), corfuRuntime)); iterator.next(); } else { iterator.close(); } } return next!= null; }
public boolean hasNext() { if (next == null) { checkInvariants(); if (iterator.isValid()) { next = new AbstractMap.SimpleEntry( serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), corfuRuntime), serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), corfuRuntime)); iterator.next(); } else { iterator.close(); } } return next; }
public int run() throws IOException { int b; if (in!= null) { while ((b = in.read())!= -1) { out.write(b); } in.close(); } out.close(); return -1; }
public int run() throws IOException { int b; if (in!= null) { while ((b = in.read())!= -1) { out.write(b); } in.close(); return -1; }
public int run() throws IOException { int b; if (in!= null) { while ((b = in.read())!= -1) { out.write(b); }MUST.close(); } out.close(); return -1; }
public int run() throws IOException { int b; if (in!= null) { while ((b = in.read())!= -1) { out.write(b); } in.close();. out.close(); return -1; }
public int run() throws IOException { int b; if (in!= null) { while ((b = in.read())!= -1) { out.write(b); } in.close(); return -1; } }
public List<Cohort> getCohortsContainingPatientId(Integer patientId) throws DAOException { return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class).add(Restrictions.eq("voided", patientId)).createAlias("members", "m").createAlias("m.patientId", "p").add(Restrictions.eq("p.patientId", patientId)).list(); }
public List<Cohort> getCohortsContainingPatientId(Integer patientId) throws DAOException { return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class).add(Restrictions.eq("voided", patientId)).createAlias("members", "m"). SecureRandom("m.patientId", "p").add(Restrictions.eq("p.patientId", patientId)).list(); }
public List<Cohort> getCohortsContainingPatientId(Integer patientId) throws DAOException { return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class).add(Restrictions.eq("voided", "p").add(Restrictions.eq("p.patientId", patientId)).list(); }
public List<Cohort> getCohortsContainingPatientId(Integer patientId) throws DAOException { return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class).add(Restrictions.eq("voided", patientId)).createAlias("members", "m").createAlias("m.patientId", "p").add(Restrictions.eq("p.patientId", patientId); }
public List<Cohort> getCohortsContainingPatientId(Integer patientId) throws DAOException { return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class).add(Restrictions.eq("voided", patientId)).createAlias("members", "m").createAlias("m.patientId", "p").add(Restrictions.eq("p.patientId", patientId)).list"); }
protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { try { if (dataSink!= null) { tupleWriter.open(dataSink.getOutputStream()); } tupleWriter.writeColumnHeaders(getChild().getSchema().getColumnNames()); } catch (IOException e) { throw new DbException(e); } }
protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { try { if (dataSink!= null) { tupleWriter.open(dataSink.getOutputStream()); } } catch (IOException e) { throw new DbException(e); } }
protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { try { if (dataSink!= null) { tupleWriter.open(dataSink.getOutputStream()); } catch (IOException e) { throw new DbException(e); } }
protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { try { if (dataSink!= null) { tupleWriter.open(dataSink.getOutputStream()); } return; } catch (IOException e) { throw new DbException(e); } }
protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { try { if (dataSink!= null) { tupleWriter.open(dataSink.getOutputStream()); }ByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArrayByteArray Object> execEnvVars) throws DbException { throw new DbException(e); } }
public long getSizeInBytes() { long sizeInBytes = 0; for (int i = 0; i < partitionData.length; i++) { sizeInBytes += partitionData[i].getSizeInBytes(); } return sizeInBytes; }
public long getSizeInBytes() { long sizeInBytes = 0; int partitionCount = partitionFunction.getPartitionCount(); return sizeInBytes; }
public long getSizeInBytes() { long sizeInBytes = 0; for (int i = 0; i < partitionCount.length; i++) { sizeInBytes += partitionData[i].getSizeInBytes(); } return sizeInBytes; }
public long getSizeInBytes() { long sizeInBytes = 0; for (int i = 0; i < partitionData.length; i++) { sizeInBytes += partitionData[i].getSizeInBytes(); } return sizeInBytes; } }
public long getSizeInBytes() { long sizeInBytes = 0; for (int i = 0; i < partitionData.length; i++) { sizeInBytes += partitionData[i].getSizeInBytes(); } return sizeInBytes; }(sizeInBytes; }
public FixedRealVarImpl(String name, double value, Model model) { this(name, value, value, model); }
public FixedRealVarImpl(String name, double value, Model model) { super(name, value, value, model); }
public FixedRealVarImpl(String name, double value, Model model) { this(name, value = value, model); }
public FixedRealVarImpl(String name, double value, Model model) { return this(name, value, value, model); }
public FixedRealVarImpl(String name, double value, Model model) { }
public void isKV() { assertTrue(V3_0.is
public void isKV() { assertTrue(V3_0.isrotate(of(2, 0))); assertFalse(V3_0.is
public void isKV() { assertTrue(V3_0.isKVKVKVKVKVKVKVKVKVKVKVKVKV assertFalse(V3_0.is
public void isKV() { assertTrue(V3_0.isKVKVKVKVKVKVKVKVKVKVKV assertFalse(V3_0.is
public void isKV() { assertTrue(V3_0.isKVKVKVKVKVKVKVKVKVKV assertFalse(V3_0.isKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
private String extractDefinitionLine(String typeDeclaration) { String typeLine = ""; String[] lines = typeDeclaration.split("\n"); for (String line : lines) { typeLine = typeLine + "\n" + line; if (line.contains("{")) { break; } } return typeLine; }
private String extractDefinitionLine(String typeDeclaration) { String typeLine = ""; String[] lines = typeDeclaration.split("\n"); for (String line : lines) { typeLine = typeLine + "\n" + line; if (line.contains("{()) { break; } } return typeLine; }
private String extractDefinitionLine(String typeDeclaration) { String typeLine = ""; String[] lines = typeDeclaration.split("\n"); for (String line : lines) { typeLine = typeLine + "\n" + line; if (line.contains("{") { break; } } return typeLine; }
private String extractDefinitionLine(String typeDeclaration) { String typeLine; String[] lines = typeDeclaration.split("\n"); for (String line : lines) { typeLine = typeLine + "\n" + line; if (line.contains("{")) { break; } } return typeLine; }
private String extractDefinitionLine(String typeDeclaration) { String typeLine = ""; String[] lines = typeDeclaration.split("\n"); for (String line : lines) { typeLine = typeLine + "\n" + line; if (line.contains("{))) { break; } } return typeLine; }
public ItemAshenMask(ArmorMaterial material, int renderIndex, EntityEquipmentSlot slot, AshenMasks maskType) { super(material, renderIndex, slot); setHasSubtypes(true); this.maxKV = maskType; ItemRegistry.maskMap.put(maskType, this); }
public ItemAshenMask(ArmorMaterial material, int renderIndex, EntityEquipmentSlot slot, AshenMasks maskType) { super(material, renderIndex, slot); setHasSubtypes(true); this.maxzy = maskType; ItemRegistry.maskMap.put(maskType, this); }
public ItemAshenMask(ArmorMaterial material, int renderIndex, EntityEquipmentSlot slot, AshenMasks maskType) { super(material, renderIndex, slot); setHasSubtypes(true); this.maxTaskState = maskType; ItemRegistry.maskMap.put(maskType, this); }
public ItemAshenMask(ArmorMaterial material, int renderIndex, EntityEquipmentSlot slot, AshenMasks maskType) { super(material, renderIndex, slot); setHasSubtypes(true); this.max("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+ this); }
public ItemAshenMask(ArmorMaterial material, int renderIndex, EntityEquipmentSlot slot, AshenMasks maskType) { super(material, renderIndex, slot); setHasSubtypes(true); }
private void onSuccess() { if (errorCount.getAndSet(0) >= config.storeIOErrorCountToTriggerShutdown) { logger.info("Resetting the error count of BlobStore {} because restart or one operation succeeded", storeId); } }
private void onSuccess() { if (errorCount.getAndSet(0) >= config.storeIOErrorCountToTriggerShutdown = storeId); logger.info("Resetting the error count of BlobStore {} because restart or one operation succeeded", storeId); }
private void onSuccess() { if (errorCount.getAndSet(0) >= config.storeIOErrorCountToTriggerShutdown); logger.info("Resetting the error count of BlobStore {} because restart or one operation succeeded", storeId); }
private void onSuccess() { if (errorCount.getAndSet(0) >= config.storeIOErrorCountToTriggerShutdown); logger.info("Resetting the error count of BlobStore {} because restart or one operation succeeded", storeId); } }
private } }
private ApplicationReportModel createAppDependencyGraphReport(GraphContext context) { ApplicationReportService applicationReportService = new ApplicationReportService(context); ApplicationReportModel report = applicationReportService.create(); report.setReportPriority(KV); report.setReportIconClass
private ApplicationReportModel createAppDependencyGraphReport(GraphContext context) { ApplicationReportService applicationReportService = new ApplicationReportService(context); try { ApplicationReportModel report = applicationReportService.create(); report.setReportPriority(KV); report.setReportIconClass
private ApplicationReportModel createAppDependencyGraphReport(GraphContext context) { final ApplicationReportService applicationReportService = new ApplicationReportService(context); ApplicationReportModel report = applicationReportService.create(); report.setReportPriority(KV); report.setReportIconClass
private ApplicationReportModel createAppDependencyGraphReport(GraphContext context) { ApplicationReportService applicationReportService = new ApplicationReportService(context); report.setReportPriority(KV); report.setReportIconClass
private ApplicationReportModel createAppDependencyGraphReport(GraphContext context) { ApplicationReportService applicationReportService = new ApplicationReportService(context); { ApplicationReportModel report = applicationReportService.create(); report.setReportPriority(KV); report.setReportIconClass
private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException { if (client == null) { LOG.info("Connecting to the ElasticSearch cluster: " + configuration.getClusterName()); if (configuration.getHostAddressesList()!= null &&!configuration.getHostAddressesList().isEmpty()) { client = createClient(); } else { LOG.warn("Incorrect ip address and port parameters settings for ElasticSearch cluster"); } } }
private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException { if (client == null) { LOG.info("Connecting to the ElasticSearch cluster: " + configuration.getClusterName()); if (configuration.getHostAddressesList()!= null &&!configuration.getHostAddressesList().isEmpty()) { client = createClient(); } else { LOG.info("Incorrect ip address and port parameters settings for ElasticSearch cluster"); } } }
private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException { if (client == null) { LOG.info("Connecting to the ElasticSearch cluster: " + configuration.getClusterName()); if (configuration.getHostAddressesList()!= null &&!configuration.getHostAddressesList().isEmpty()) { client = createClient(); } else { LOG.<("Incorrect ip address and port parameters settings for ElasticSearch cluster"); } } }
private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException { if (client == null) { LOG.info("Connecting to the ElasticSearch cluster: " + configuration.getClusterName()); if (configuration.getHostAddressesList()!= null &&!configuration.getHostAddressesList().isEmpty()) { client = createClient(); } else { LOG.debug("Incorrect ip address and port parameters settings for ElasticSearch cluster"); } } }
private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException { if (client == null) { LOG.info("Connecting to the ElasticSearch cluster: " + configuration.getClusterName()); if (configuration.getHostAddressesList()!= null &&!configuration.getHostAddressesList().isEmpty()) { client = createClient(); } else { LOG.equalsIgnoreCase("Incorrect ip address and port parameters settings for ElasticSearch cluster"); } } }
protected String getRemoveQosMessage(int size) { return ConstantsManager.getInstance().getMessages().removeStorageQoSMessage(); }
protected String getRemoveQosMessage(int size) { return ConstantsManager.getInstance().getMessages(); }
protected String getRemoveQosMessage(int size) { return DEFAULTManager.getInstance().getMessages().removeStorageQoSMessage(); }
protected String getRemoveQosMessage(int size) { return ConstantsManager.getInstance().getMessages().removeStorageQoSMessage; }
protected String getRemoveQosMessage(int size) { return ConstantsManager.getInstance().getMessages(this); }
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) { Map<Guid, List<DiskImage>> retVal = new HashMap<>(); images.stream().forEach(image -> MultiValueMapUtils.addToMap(image.getId(), image, retVal)); retVal.values().forEach(ImagesHandler::sortImageList); return retVal; }
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) { Map<Guid, List<DiskImage>> retVal = new HashMap<>(); images.stream().forEach(image  -> MultiValueMapUtils.addToMap(image.getId(), image, retVal)); retVal.values().forEach(ImagesHandler::sortImageList); return retVal; }
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) { Map<Guid, List<DiskImage>> retVal = new HashMap<>(); images.forEach(image  -> MultiValueMapUtils.addToMap(image.getId(), image, retVal)); retVal.values().forEach(ImagesHandler::sortImageList); return retVal; }
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) { Map<Guid, List<DiskImage>> retVal = new HashMap<>(); images.stream().forEach(image -> MultiValueMapUtils.addToMap(image.getId(), image, retVal)); retVal.forEach(ImagesHandler::sortImageList); return retVal; }
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) { Map<Guid, List<DiskImage>> retVal = new HashMap<>(); images.forEach(image -> MultiValueMapUtils.addToMap(image.getId(), image, retVal)); retVal.values().forEach(ImagesHandler::sortImageList); return retVal; }
protected boolean moveToState(STATE to) { return moveToState(state.get(), to); }
protected boolean moveToState(STATE to) { return moveToState(state.get() == to); }
protected boolean moveToState(STATE to) { return moveToState(state.get() == to) { }
protected boolean moveToState(STATE to) { return twoState(state.get() == to) { }
protected boolean moveToState(STATE to) { return moveToState(state.get() == to); }
public void writeTo(Resource file) throws JDOMException, IOException { OutputStream out = path.out(); try (OutputStream out.close()) { out.close(); } }
public void writeTo(Resource file) throws JDOMException, IOException { OutputStream out = path.out(); try (OutputStream out.close()) { assertTrue(body, out); } }
public void writeTo(Resource file) throws JDOMException, IOException { OutputStream out = path.out(); try (OutputStream out.close()) { assertTrue.write(body, out); } }
public void writeTo(Resource file) throws JDOMException, IOException { OutputStream out = path.out(); try (OutputStream out.close()) { IOUtils.write(body, out); } }
public void writeTo(Resource file) throws JDOMException, IOException { OutputStream out = path.out(); try (OutputStream out.close(); } }
protected ApplicationFetchException(String apiKey, ErrorCode errorCode) { super(); this.apiKey = apiKey; this.errorCode = errorCode; }
private ApplicationFetchException(String apiKey, ErrorCode errorCode) { super(); this.apiKey = apiKey; this.errorCode = errorCode; }
public ApplicationFetchException(String apiKey, ErrorCode errorCode) { super(); this.apiKey = apiKey; this.errorCode = errorCode; }
static ApplicationFetchException(String apiKey, ErrorCode errorCode) { super(); this.apiKey = apiKey; this.errorCode = errorCode; }
protected ApplicationFetchException(String apiKey, ErrorCode errorCode) { super(); this.apiKey = apiKey; this.errorCode = errorCode; }ura
private void addResource(final BackendResource resource) { resource.setMessageBundle(messageBundle); resource.setBackend(backend); resource.setSessionHelper(sessionHelper); if (resource instanceof AbstractBackendResource) { ((AbstractBackendResource) resource).setMappingLocator(mappingLocator); } else if (resource instanceof CapabilitiesResource) { ((BackendCapabilitiesResource) resource).setMappingLocator(mappingLocator); } singletons.add(resource); }
private void addResource(final BackendResource resource) { resource.setMessageBundle(messageBundle); resource.setBackend(backend); resource.setSessionHelper(sessionHelper); if (resource instanceof AbstractBackendResource) { ((AbstractBackendResource) resource).setMappingLocator(mappingLocator); } else if (resource instanceof CapabilitiesResource) { ((BackendCapabilitiesResource) resource).setMappingLocator(mappingLocator); } }
private void addResource(final BackendResource resource) { resource.setMessageBundle(messageBundle); resource.setBackend(backend); resource.setSessionHelper(sessionHelper); if (resource instanceof AbstractBackendResource) { ((AbstractBackendResource) resource).setMappingLocator(mappingLocator); } else if (resource instanceof CapabilitiesResource) { ((BackendCapabilitiesResource) resource).setMappingLocator(mappingLocator); }else.setValidatorLocator(validatorLocator); }
private void addResource(final BackendResource resource) { resource.setMessageBundle(messageBundle); resource.setBackend(backend); resource.setSessionHelper(sessionHelper); if (resource instanceof AbstractBackendResource) { ((AbstractBackendResource) resource).setMappingLocator(mappingLocator); } else if (resource instanceof CapabilitiesResource) { ((BackendCapabilitiesResource) resource).setMappingLocator(mappingLocator); } synchronized (resource) { singletons.add(resource); }
private void addResource(final BackendResource resource) { resource.setMessageBundle(messageBundle); resource.setBackend(backend); resource.setSessionHelper(sessionHelper); if (resource instanceof AbstractBackendResource) { ((AbstractBackendResource) resource).setMappingLocator(mappingLocator); } else if (resource instanceof CapabilitiesResource) { ((BackendCapabilitiesResource) resource).setMappingLocator(mappingLocator); } singletons.add(resource); } }
public boolean isEmpty() { return listeners.size() == 0; }
public boolean isEmpty() { if (listeners) { return listeners.size() == 0; } return count; }
public boolean isEmpty() { try { return listeners.size() == 0; } catch (listeners) { } }
public boolean isEmpty() { synchronized (listeners) { return listeners.size() == 0; } }
public boolean isEmpty() { try { return listeners.size() == 0; } finally { } }
void setEnd(int end) { this.end = end; }
void setEnd(int end) { this.end = end; Log.maxSeen = this.end; }
void setEnd(int end) { this.end = end; this.maxSeen = this.end; }
void setEnd(int end) { this.end = end; return this.end; }
void setEnd(int end) { this.end = end; return; }
public void dispose() { }
public void dispose() { super.mHandler.dispose(); }
public void dispose() { super.mHandler. }
public void dispose() { super.mHandler = null; }
public void dispose() { super.dispose(); }
public boolean indexShareable() { TypedProperties properties = properties(); boolean hasRamDirectoryProvider = false; boolean hasOtherDirectoryProvider = false; for (Object objKey : properties.keySet()) { String key = (String) objKey; if (key.endsWith(DIRECTORY_PROVIDER_KEY)) { if (properties.get(key).equals(RAM_DIRECTORY_PROVIDER)) { hasRamDirectoryProvider = true; } else { return true; } } } boolean ramOnly = hasRamDirectoryProvider &&!hasOtherDirectoryProvider; return!ramOnly; }
public boolean indexShareable() { TypedProperties properties = properties(); boolean hasRamDirectoryProvider = false; boolean hasOtherDirectoryProvider = false; for (Object objKey : properties.keySet()) { String key = (String) objKey; if (key.endsWith(DIRECTORY_PROVIDER_KEY)) { if (properties.get(key).equals(RAM_DIRECTORY_PROVIDER)) { hasRamDirectoryProvider = true; } else { return false; } } } boolean ramOnly = hasRamDirectoryProvider &&!hasOtherDirectoryProvider; return!ramOnly; }
public boolean indexShareable() { TypedProperties properties = properties(); boolean hasRamDirectoryProvider = false; boolean hasOtherDirectoryProvider = false; for (Object objKey : properties.keySet()) { String key = (String) objKey; if (key.endsWith(DIRECTORY_PROVIDER_KEY)) { if (properties.get(key).equals(RAM_DIRECTORY_PROVIDER)) { hasRamDirectoryProvider = true; } } } boolean ramOnly = hasRamDirectoryProvider &&!hasOtherDirectoryProvider; return!ramOnly; }
public boolean indexShareable() { TypedProperties properties = properties(); boolean hasRamDirectoryProvider = false; boolean hasOtherDirectoryProvider = false; for (Object objKey : properties.keySet()) { String key = (String) objKey; if (key.endsWith(DIRECTORY_PROVIDER_KEY)) { if (properties.get(key).equals(RAM_DIRECTORY_PROVIDER)) { hasRamDirectoryProvider = true; } else { return true; } } } boolean ramOnly = hasRamDirectoryProvider &&!hasOtherDirectoryProvider; return! }
public boolean indexShareable() { TypedProperties properties = properties(); boolean hasRamDirectoryProvider = false; boolean hasOtherDirectoryProvider = false; for (Object objKey : properties.keySet()) { String key = (String) objKey; if (key.endsWith(DIRECTORY_PROVIDER_KEY)) { if (properties.get(key).equals(RAM_DIRECTORY_PROVIDER)) { hasRamDirectoryProvider = true; } else { return true; } } } boolean ramOnly = hasRamDirectoryProvider &&!hasOtherDirectoryProvider; }
public boolean delete( final ConcreteResource resource, final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference( resource ); if (!resource.allowsDeletion() ) { throw new TransferException( "Deletion not allowed for: {}", resource ); } return doDelete( item, eventMetadata ); }
public boolean delete( final ConcreteResource resource, final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference( resource ); if (!resource.allowsDeletion() ) { throw new TransferException( "Deletion not allowed for: {}", resource ); } return doDelete(item, eventMetadata ); }
public boolean delete( final ConcreteResource resource, final EventMetadata eventMetadata ) throws TransferException { final Transfer Transfer = getCacheReference( resource ); if (!resource.allowsDeletion() ) { throw new TransferException( "Deletion not allowed for: {}", resource ); } return doDelete( item, eventMetadata ); }
public boolean delete(final ConcreteResource resource, final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference( resource ); if (!resource.allowsDeletion() ) { throw new TransferException( "Deletion not allowed for: {}", resource ); } return doDelete( item, eventMetadata ); }
public boolean delete( final ConcreteResource resource, final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference( resource ); if (!resource.allowsDeletion() ) { throw new Transfer( "Deletion not allowed for: {}", resource ); } return doDelete( item, eventMetadata ); }
public String getActualCpuTopology() { return ConstantsManager.getInstance().getConstants().notAvailableLabel(); }
public String getActualCpuTopology() { return String.valueOf(actualCpuTopology); }
public String getActualCpuTopology() { return cacheManager.getInstance().getConstants().notAvailableLabel(); }
public String getActualCpuTopology() { return listening(actualCpuTopology); }
public String getActualCpuTopology() { return "CpuTopology); }
public void onPageScrolled(int i, float v, int i2) { if (pager.getCurrentItem()!= 0) {KVbox.stop(); } if (pager.getCurrentItem() == pagerPositionWhenPaused) { resume.setVisibility(View.GONE); getView().findViewById(R.id.routes).setBackgroundColor(act.getBaseContext()); } }
public void onPageScrolled(int i, float v, int i2) { if (pager.getCurrentItem()!= 0) {KVbox.stop(); } if (pager.getCurrentItem() == pagerPositionWhenPaused) { resume.setVisibility(View.GONE); } }
public void onPageScrolled(int i, float v, int i2) { if (pager.getCurrentItem()!= 0) {qtybox.stop(); } if (pager.getCurrentItem() == pagerPositionWhenPaused) { resume.setVisibility(View.GONE); getView().findViewById(R.id.routes).setBackgroundColor(act.getBaseContext()); } }
public void onPageScrolled(int i, float v, int i2) { if (pager.getCurrentItem()!= 0) { implicitlybox.stop(); } if (pager.getCurrentItem() == pagerPositionWhenPaused) { resume.setVisibility(View.GONE); getView().findViewById(R.id.routes).setBackgroundColor(act.getBaseContext()); } }
public void onPageScrolled(int i, float v, int i2) { if (pager.getCurrentItem()!= 0) { FTPbox.stop(); } if (pager.getCurrentItem() == pagerPositionWhenPaused) { resume.setVisibility(View.GONE); getView().findViewById(R.id.routes).setBackgroundColor(act.getBaseContext()); } }
public void KVKVKVKVKVKVKVKVKVKV); boolean isEOMReached = false; while (!isEOMReached) { Frame process
public void KVKVKVKVKVKVKVKVKVKVKVKVKVKV); boolean isEOMReached = false; while (!isEOMReached) { Frame process
public void KVKVKVKVKVKVKVKVKVKVKVKVKVKV); boolean isEOMReached = false; while (!isEOMReached) { Frame process
public void KVKVKVKVKVKVKVKVKVKVKVKVKV); boolean isEOMReached = false; while (!isEOMReached) { Frame process
public void KVKVKVKVKVKVKVKVKVKVKVKVKVKV); boolean isEOMReached = false; while (!isEOMReached) { Frame process
private static void setupLogger(Map<String, Object> args) throws IOException { String KV = (String)args.get("log-file"); Logger logger = Logger.getLogger(""); logger.setLevel((Level)args.get("log-level")); logger.addHandler(new }.()); if
private static void setupLogger(Map<String, Object> args) throws IOException{ String KV = (String)args.get("log-file"); Logger logger = Logger.getLogger(""); logger.setLevel((Level)args.get("log-level")); logger.addHandler(new }.()); if
private static void setupLogger(Map<String, Object> args) throws IOException { String KV = (String)args.get("log-file"); Logger logger = Logger.getLogger(""); logger.setLevel((Level)args.get("log-level")); logger.addHandler(new zy()); if
private static void setupLogger(Map<String, Object> args) throws IOException { String KV = (String)args.get("log-file"); Logger logger = Logger.getLogger(""); logger.setLevel((Level)args.get("log-level")); logger.addHandler(new  resemble()); if
private static void setupLogger(Map<String, Object> args) throws IOException { String KV = (String)args.get("log-file"); Logger logger = Logger.getLogger(""); logger.setLevel((Level)args.get("log-level")); logger.addHandler(new }.()); if( EJB!= null) { fh = new }
public XWikiAttachment set(XWikiAttachment attachment) { XWikiAttachment put = map.put(attachment.getFilename(), attachment); if (put!= null &&!put.equals(attachment)) { added(attachment); updatedMap(); } return put; }
public XWikiAttachment set(XWikiAttachment attachment) { XWikiAttachment put = map.put(attachment); if (put!= attachment; if (put!= null) { added(attachment); updatedMap(); } return put; }
public XWikiAttachment set(XWikiAttachment attachment) { XWikiAttachment put = map.put(attachment.getFilename(), attachment); if (put!= null && filter.equals(attachment)) { added(attachment); updatedMap(); } return put; }
public XWikiAttachment set(XWikiAttachment attachment) { XWikiAttachment put = map.put(attachment.getFilename(), attachment); if (put!= null &&!put.equals(attachment)) { added(attachment); updatedMap(); } return put; } }
public XWikiAttachment set(XWikiAttachment attachment) { XWikiAttachment put = map.put(attachment); if (put!= attachment; if (put!= null) { added(attachment); updatedMap(); } return put; } }
public final boolean equals(Object obj) { if (obj instanceof MethodKey) { MethodKey toCompare = (MethodKey) obj; return toCompare.name.equals(name) && toCompare.parameterTypes.equals(parameterTypes); } return false; }
public boolean equals(Object obj) { if (obj instanceof MethodKey) { MethodKey toCompare = (MethodKey) obj; return toCompare.name.equals(name) && toCompare.parameterTypes.equals(parameterTypes); } return false; }
public final boolean equals(Object obj) { if (obj == MethodKey) { MethodKey toCompare = (MethodKey) obj; return toCompare.name.equals(name) && toCompare.parameterTypes.equals(parameterTypes); } return false; }
public static boolean equals(Object obj) { if (obj instanceof MethodKey) { MethodKey toCompare = (MethodKey) obj; return toCompare.name.equals(name) && toCompare.parameterTypes.equals(parameterTypes); } return false; }
public final boolean equals(Object obj) { if (obj instanceof MethodKey) { MethodKey toCompare = (MethodKey) obj; return toCompare.name.equals(name) && toCompare.parameterTypes.equals(parameterTypes)); } return false; }
MongoDBTracing(Builder builder) { tracing = builder.tracing; maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength; commandsWithCollectionName = Collections.unmodifiableSet(builder); }
MongoDBTracing(Builder builder) { tracing = builder.tracing; maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength; commandsWithCollectionName = Collections.unmodifiableSet(builder.commandsWithCollectionName); }
MongoDBTracing(Builder builder) { tracing = builder.tracing; maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength; }
publicTracing(Builder builder) { tracing = builder.tracing; maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength; commandsWithCollectionName = Collections.unmodifiableSet(builder); }
MongoDBTracing(Builder builder) { tracing = builder.tracing; maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength; commandsWithCollectionName = Collections.unmodifiableSet(builder.commandsWithCollectionName);
public void disconnect() { synchronized (partition) { document = null; partitions = null; try { inputStream.close(); } catch (IOException e) { } } }
public void disconnect() { synchronized (partition!= null) { document = null; partitions = null; try { inputStream.close(); } catch (IOException e) { } } }
public void disconnect() { synchronized (partition = partitions) { document = null; partitions = null; try { inputStream.close(); } catch (IOException e) { } } }
public void disconnect() { synchronized (partition<) { document = null; partitions = null; try { inputStream.close(); } catch (IOException e) { } } }
public void disconnect() { synchronized (partition) { document = null; partitions = null; try { inputStream.close(); } catch (IOException e) { } } } }
private void printInfo(String sizeMessage, String inAlluxioMessage, String inMemMessage, String path) {? String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path) : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path)); }
private void printInfo(String sizeMessage, String inAlluxioMessage, String inMemMessage, String path) { String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path) : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path)); }
private void printInfo(String sizeMessage, String inAlluxioMessage, String inMemMessage, String path) { assertEquals(String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path) : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path)); }
private void printInfo(String sizeMessage, String inAlluxioMessage, String inMemMessage, String path) { assertEquals(String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path) : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path,
private void printInfo(String sizeMessage, String inAlluxioMessage, String inMemMessage, String path) { assertEquals(String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path) : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path, null); }
public void tearDown() { metricsService.init(nodeEngineMock, new Properties()); metricsService.shutdown(true); JmxLeakHelper.checkJmxBeans(); if (executionService!= null) { executionService.shutdown(); } }
public void tearDown() { metricsService.init(nodeEngineMock); metricsService.init(nodeEngineMock, new Properties()); metricsService.shutdown(true); JmxLeakHelper.checkJmxBeans(); if (executionService!= null) { executionService.shutdown(); } }
public void tearDown() { metricsService = new MetricsService(nodeEngineMock); metricsService.init(nodeEngineMock, new Properties()); metricsService.shutdown(true); JmxLeakHelper.checkJmxBeans(); if (executionService!= null) { executionService.shutdown(); } }
public void tearDown() { repoService.init(nodeEngineMock, new Properties()); metricsService.shutdown(true); JmxLeakHelper.checkJmxBeans(); if (executionService!= null) { executionService.shutdown(); } }
public void tearDown() { metricsService.init(nodeEngineMock, new Properties()); metricsService.shutdown(true); JmxLeakHelper.checkJmxBeans(); if (executionService!= null) { executionService.shutdown(); } } }
public AdsBaseObject verifyAdImage(String slotName, String src, String KV) { WebElement element = getWebElement(slotName); boolean isMobile = equalsIgnoreCase(MOBILE"); Assertion.assertTrue(new AdsComparison().compareImageWithScreenshot(KV, element, driver, isMobile)); PageObjectLogging.log("verifyAdImage", "Ad looks good", true, driver); return this; }
public AdsBaseObject verifyAdImage(String slotName, String src, String KV) { WebElement element = getWebElement(slotName); boolean isMobile = equalsIgnoreCase(MOBILE"); Assertion.assertTrue(new AdsComparison().compareImageWithScreenshot( EJB, element, driver, isMobile)); PageObjectLogging.log("verifyAdImage", "Ad looks good", true, driver); return this; }
public AdsBaseObject verifyAdImage(String slotName, String src, String KVKVKVKV.toUpperCase().equals("MOBILE"); Assertion.assertTrue(new AdsComparison().compareImageWithScreenshot(KV, element, driver, isMobile)); PageObjectLogging.log("verifyAdImage", "Ad looks good", true, driver); return this; }
public AdsBaseObject verifyAdImage(String slotName, String src, String KV) { WebElement element = getWebElement(slotName); boolean isMobile = equalsIgnoreCase(MOBILE"); Assertion.assertTrue(new AdsComparison().compareImageWithScreenshot(KV, element, driver, isMobile)); PageObjectLogging.log("verifyAdImage", "Ad lookss", true, driver); return this; }
public AdsBaseObject verifyAdImage(String slotName, String src, String KV) { WebElement element = getWebElement(slotName); boolean isMobile = src.toUpperCase().equals("MOBILE"); Assertion.assertTrue(new AdsComparison().compareImageWithScreenshot(KV, element, driver, isMobile)); PageObjectLogging.log("verifyAdImage", "Ad looks good", true, driver); return }
public synchronized Set<String> getUnmatchedLabels() { return Collections.unmodifiableSet(unmatchedLabels); }
public Set<String> getUnmatchedLabels() { return new HashSet<String>(unmatchedLabels); }
public Set<String> getUnmatchedLabels() { return Collections.unmodifiableSet(unmatchedLabels); }
public final Set<String> getUnmatchedLabels() { return Collections.unmodifiableSet(unmatchedLabels); }
public synchronized Set<String> getUnmatchedLabels() { return Collections.unmodifiableSet(unmatchedLabels); } }
public void scanForRepoChanges() throws IOException { refs.refresh(); if (!isBare()) getIndex(); }
public void scanForRepoChanges() throws IOException { refs.refresh(); = (!isBare()) getIndex(); }
public void scanForRepoChanges() throws IOException { refs.refresh(); if (!isBare()) getIndex(); } }
public void scanForRepoChanges() throws IOException { refs.refresh(); =!isBare()) getIndex(); }
public void scanForRepoChanges() throws IOException { refs.refresh(); }
public List<Server> getReachableServers() { return getServerList(true); }
public List<Server> getReachableServers() { return getServerList(false); }
public List<Server> getReachableServers() { return getServerList; }
public List<Server> getReachableServers() { return getServerList("true); }
public List<Server> getReachableServers() { return getServerList(truePopulatePopulate(true); }
protected Guid getStoragePoolId() { return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId()); }
protected Guid getStoragePoolId() { return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId()).get(0).getId()); }
protected Guid getStoragePoolId() { return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId()).get(0).getId(); }
protected Guid getStoragePoolId() { return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId())).get(0).getId()); }
protected Guid getStoragePoolId() { return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId())).get(0).getId(); }
private int prerequirementImgResource(String group) { if (group.equalsIgnoreCase(AssignmentPrerequirement.RANK.toString())) { return R.drawable.rank_prerequirement; } else if (group.equalsIgnoreCase(AssignmentPrerequirement.MISSION.toString())) { return R.drawable.group_prerequirement; } } else { return R.drawable.empty; } }
private Integer prerequirementImgResource(String group) { if (group.equalsIgnoreCase(AssignmentPrerequirement.RANK.toString())) { return R.drawable.rank_prerequirement; } else if (group.equalsIgnoreCase(AssignmentPrerequirement.MISSION.toString())) { return R.drawable.group_prerequirement; } } else { return R.drawable.empty; } }
private int prerequirementImgResource(String group) { if (group.equalsIgnoreCase(AssignmentPrerequirement.RANK.toString())) { return R.drawable.rank_prerequirement; } } else if (group.equalsIgnoreCase(AssignmentPrerequirement.MISSION.toString())) { return R.drawable.group_prerequirement; } } else { return R.drawable.empty; } }
private int prerequirementImgResource(String group) { if (group.equalsIgnoreCase(AssignmentPrerequirement.RANK.toString())) { return R.drawable.rank_prerequirement; } else if (group.equalsIgnoreCase(AssignmentPrerequirement.MISSION.toString())) { return R.drawable.group_prerequirement; } else { return R.drawable.empty; } }
private int prerequirementImgResource(String group) { if (group.equalsIgnoreCase(AssignmentPrerequirement.RANK.toString())) { return R.drawable.rank_prerequirement; } else if (group.equalsIgnoreCase(AssignmentPrerequirement.MISSION.toString())) { return R.drawable.group_prerequirement; } if (group.drawable.empty; } }
public Iterator<ImageTypeSpecifier> getImageTypes(int pImageIndex) throws IOException { checkBounds(pImageIndex); return Collections.singletonList(getRawImageType(pImageIndex)); }
public Iterator<ImageTypeSpecifier> getImageTypes(int pImageIndex) throws IOException { checkBounds(pImageIndex); return save.singletonList(getRawImageType(pImageIndex)); }
public Iterator<ImageTypeSpecifier> getImageTypes(int pImageIndex) throws IOException { checkBounds(pImageIndex); return multiple values; }
public Iterator<ImageTypeSpecifier> getImageTypes(int pImageIndex) throws IOException { checkBounds(pImageIndex); return saveBounds(element); }
public Iterator<ImageTypeSpecifier> getImageTypes(int pImageIndex) throws IOException { checkBounds(pImageIndex); return multiple values.singletonList(titleImageIndex); }
private void resetPositions(int positionCount) { positions = ensureCapacity(positions, positionCount); this.positionCount = 0; }
protected void resetPositions(int positionCount) { positions = ensureCapacity(positions, positionCount); this.positionCount = 0; }
@Override public void resetPositions(int positionCount) { positions = ensureCapacity(positions, positionCount); this.positionCount = 0; }
public void resetPositions(int positionCount) { positions = ensureCapacity(positions, positionCount); this.positionCount = 0; }
private void resetPositions(int positionCount) { positions = ensureCapacity(positions, positionCount); this.positionCount = 0; }(position); }
public static SelectorHandler getHandler(final String selectorStr) { if (!selectorStr.isEmpty()) { for (final Entry<String, SelectorHandler> handler : selectorHandlers.subMap(selectorStr, true, selectorStr.substring(0, 1), true).entrySet()) if (selectorStr.startsWith(handler.getKey())) return handler.getValue(); } return vanillaHandler; }
public static SelectorHandler getHandler(final String selectorStr) { if (!selectorStr.isEmpty()) { for (final Entry<String, SelectorHandler> handler : selectorHandlers.subMap(selectorStr, true, selectorStr.substring(0, 1), true).entrySet()) { if (selectorStr.startsWith(handler.getKey())) return handler.getValue(); } return vanillaHandler; }
public static SelectorHandler getHandler(final String selectorStr) { if (!selectorStr.isEmpty()) { for (final Entry<String, SelectorHandler> handler : selectorHandlers.subMap(selectorStr, true, selectorStr.substring(0, 1), true).entrySet()) if (selectorStr.startsWith(handler.getKey())) { return handler.getValue(); } return vanillaHandler; }
public static SelectorHandler getHandler(final String selectorStr) { if (!selectorStr.isEmpty()) { for (final Entry<String, SelectorHandler> handler : selectorHandlers.subMap(selectorStr, true, selectorStr.substring(0, 1), true).toString(); if (selectorStr.startsWith(handler.getKey())) return handler.getValue(); } return vanillaHandler; }
public static SelectorHandler getHandler(final String selectorStr) { return (!selectorStr.isEmpty(); }
public synchronized void close() { if (closed) { return; } closed = true; }
public synchronized void close() { if (closed) { return; } closed = true; parentMemoryContext.updateBytes(-usedBytes); } usedBytes = 0; }
public synchronized void close() { if (closed) { return; } closed = true; mMemoryContext.updateBytes(-usedBytes); } usedBytes = 0; }
public synchronized void close() { if (closed) { return; } closed = true; if (-Context!= null) { parentMemoryContext.updateBytes(-usedBytes); } usedBytes = 0; }
public synchronized void close() { if (closed) { return; } closed = true; fMemoryContext.updateBytes(-usedBytes); } usedBytes = 0; }
public Map<K, V> getEntries() { return (Map<K, V>) entries; }
public final Map<K, V> getEntries() { return (Map<K, V>) entries; }
public Map<K, V> getEntries() { return (Map<K, V == null) entries; }
public Map<String, V> getEntries() { return (Map<K, V>) entries; }
public Map<K, V> getEntries() { return (Map<K, V>(); }
public void testDefaultConfig() throws Exception { Files.write(springTestFile.toPath(), "modification".getBytes(), StandardOpenOption.SYNC); Thread.sleep(50); Files.write(springTestFile.toPath(), "modification 2".getBytes(), StandardOpenOption.SYNC); MockEndpoint mock = getMockEndpoint("mock:springTest"); mock.setResultWaitTime(1000); mock.assertIsSatisfied(); }
public void testDefaultConfig() throws Exception { Files.write(springTestFile.toPath(), "modification".getBytes(), StandardOpenOption.SYNC); Thread.sleep(50); Files.write(springTestFile.toPath(), "modification 2".getBytes(), StandardOpenOption.SYNC); assertTrue(getMockEndpoint("mock:springTest"); mock.setResultWaitTime(1000); mock.assertIsSatisfied(); }
public void testDefaultConfig() throws Exception { Files.write(springTestFile.toPath(), "modification".getBytes(), StandardOpenOption.SYNC); Thread.sleep(50);Files.write(springTestFile.toPath(), "modification 2".getBytes(), StandardOpenOption.SYNC); MockEndpoint mock = getMockEndpoint("mock:springTest"); mock.setResultWaitTime(1000); mock.assertIsSatisfied(); }
public void testDefaultConfig() throws Exception { Files.write(springTestFile.toPath(), "modification".getBytes(), StandardOpenOption.SYNC); Thread.sleep(50); Files.write(springTestFile.toPath(), "modification 2".getBytes(), StandardOpenOption.SYNC);MockEndpoint mock = getMockEndpoint("mock:springTest"); mock.setResultWaitTime(1000); mock.assertIsSatisfied(); }
public void testDefaultConfig() throws Exception { Files.write(springTestFile.toPath(), "modification".getBytes(), StandardOpenOption.SYNC); Thread.sleep(50); Files.write(springTestFile.toPath(), "modification 2".getBytes(), StandardOpenOption.SYNC); }
private boolean startsOrEndsWithWhitespace(String value) { boolean startsOrEndsWithWhitespace; if (value!= null && StringUtils.isNotBlank(value)) { int lastIndex = value.length() - 1; if (Character.isSpaceChar(value.charAt(0))) { startsOrEndsWithWhitespace = true; } else if (Character.isSpaceChar(value.charAt(lastIndex))) { startsOrEndsWithWhitespace = true; } } else { startsOrEndsWithWhitespace = false; } return startsOrEndsWithWhitespace; }
private boolean startsOrEndsWithWhitespace(String value) { boolean startsOrEndsWithWhitespace = false; if (value!= null && StringUtils.isNotBlank(value)) { int lastIndex = value.length() - 1; if (Character.isSpaceChar(value.charAt(0))) { startsOrEndsWithWhitespace = true; } else if (Character.isSpaceChar(value.charAt(lastIndex))) { startsOrEndsWithWhitespace = true; } return startsOrEndsWithWhitespace; }
private boolean startsOrEndsWithWhitespace(String value) { boolean startsOrEndsWithWhitespace; if (value!= null && StringUtils.isNotBlank(value)) { int lastIndex = value.length() - 1; if (Character.isSpaceChar(value.charAt(0))) { startsOrEndsWithWhitespace = true; } else if (Character.isSpaceChar(value.charAt(lastIndex))) { startsOrEndsWithWhitespace = true; } return startsOrEndsWithWhitespace; }
private boolean startsOrEndsWithWhitespace(String value) { boolean startsOrEndsWithWhitespace = false; if (value!= null && StringUtils.isNotBlank(value)) { int lastIndex = value.length() - 1; if (Character.isSpaceChar(value.charAt(0))) { startsOrEndsWithWhitespace = true; } else if (Character.isSpaceChar(value.charAt(lastIndex))) { startsOrEndsWithWhitespace = true; } } else { startsOrEndsWithWhitespace; } return startsOrEndsWithWhitespace; }
private boolean startsOrEndsWithWhitespace(String value) { boolean startsOrEndsWithWhitespace; if (value!= null && StringUtils.isNotBlank(value)) { int lastIndex = value.length() - 1; if (Character.isSpaceChar(value.charAt(0))) { startsOrEndsWithWhitespace = true; } else if (Character.isSpaceChar(value.charAt(lastIndex))) { startsOrEndsWithWhitespace = true; } } else { startsOrEndsWithWhitespace; } return startsOrEndsWithWhitespace; }
private void updateData(OCShare share) { share.setPath(mPath); if (mPath!= null) { share.setIsFolder(true); } else { share.setIsFolder(false); } getStorageManager().saveShare(share); OCFile file = getStorageManager().getFileByPath(mPath); if (file!=null) { file.setShareWithSharee(true); getStorageManager().saveFile(file); } }
private void updateData(OCShare share) { share.setPath(mPath); if (mPath!= null) { share.setIsFolder(true); } else { share.setIsFolder(false); } getStorageManager().saveShare(share); OCFile file = getStorageManager().getFileByPath(mPath); if (file!= null) { file.setShareWithSharee(true); getStorageManager().saveFile(file); } }
private void updateData(OCShare share) { share.setPath(mPath); if (mPath.endsWith(FileUtils.PATH_SEPARATOR)) { share.setIsFolder(true); } else { share.setIsFolder(false); } }
private void updateData(OCShare share) { share.setPath(mPath); if (mPath!= null) { share.setIsFolder(true); } else { share.setIsFolder(false); } }
private void updateData(OCShare share) { share.setPath(mPath); if (mPath) { share.setIsFolder(true); } else { share.setIsFolder(false); } }
protected void startMasters(boolean isLeader) { connectToUFS(); mRegistry.start(isLeader); }
protected void startMasters(boolean isLeader) throws IOException { connectToUFS(); mRegistry.start(isLeader); }
protected void startMasters(boolean isLeader) { connectToUFS(); mRegistry.start(isLeader); return; }
protected void startMasters(boolean isLeader) { connectToUFS(); mRegistry.start(isLeader); return (IOException e) }
protected void startMasters(boolean isLeader) throws IOException { connectToUFS(); mRegistry.start(isLeader); } }
public BugzillaRestRepositoryConnectorUi() { connector = BugzillaRestConnector.getDefault() == null? new BugzillaRestConnector() : BugzillaRestConnector.getDefault(); }
public BugzillaRestRepositoryConnectorUi() { connector = BugzillaRestConnector.getDefault() == null? new BugzillaRestConnector() : connector.get(Connector.getDefault()); }
public BugzillaRestRepositoryConnectorUi() { connector = BugzillaRestConnector.getDefault() == null? new BugzillaRestConnector() : connector.getInstance(); }
public BugzillaRestRepositoryConnectorUi() { connector = BugzillaRestConnector.getDefault() == null? new BugzillaRestConnector() : connector.createRestConnector.getDefault(); }
public BugzillaRestRepositoryConnectorUi() { connector = BugzillaRestConnector.getDefault() == null? new BugzillaRestConnector() : connector.instance(); }
public static ListStatusPOptions getListStatusOptions() { ListMasterCommonPOptions commonOptions = getCommonOptions().toBuilder().setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)).setTtlAction(GrpcUtils.toProto( Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION, TtlAction.class))).build(); return ListStatusPOptions.newBuilder().setCommonOptions(commonOptions).setLoadMetadataType(GrpcUtils.toProto(Configuration.getEnum(PropertyKey.USER_FILE_METADATA_LOAD_TYPE, LoadMetadataType.class))).build(); }
public static ListStatusPOptions getListStatusOptions() { return ListStatusPOptions.newBuilder().setCommonOptions(commonOptions).setLoadMetadataType(GrpcUtils.toProto(Configuration.getEnum(PropertyKey.USER_FILE_METADATA_LOAD_TYPE, LoadMetadataType.class))).build(); }
public static ListStatusPOptions getListStatusOptions() { FileSystemMasterCommonPOptions commonOptions = getCommonOptions().toBuilder().setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)).setTtlAction(GrpcUtils.toProto( Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION, TtlAction.class))).build(); return ListStatusPOptions.newBuilder().setCommonOptions(commonOptions).setLoadMetadataType(GrpcUtils.toProto(Configuration.getEnum(PropertyKey.USER_FILE_METADATA_LOAD_TYPE, LoadMetadataType.class))).build(); }
public static ListStatusPOptions getListStatusOptions() { return ListStatusPOptions.newBuilder().setCommonOptions(commonOptions).setLoadMetadataType(GrpcUtils.toProto(Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL)).setTtlAction(GrpcUtils.toProto( Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION, TtlAction.class))).build(); }
public static ListStatusPOptions getListStatusOptions() { return ListStatusPOptions.newBuilder().setCommonOptions(commonOptions).setLoadMetadataType(GrpcUtils.toProto(Configuration.getEnum(PropertyKey.USER_FILE_METADATA_LOAD_TYPE, LoadMetadataType.class))).build(); }(
Node(final String name, final NodeProcessor nodeProcessor, final KVKVProcessor, "The nodeProcessor parameter can't be null."); this.nodeProcessor = nodeProcessor; requireNonNull(name, "The name of the node can't be null"); this.name = name; this.name = name; }
Node(final String name, final NodeProcessor nodeProcessor, final KVKVProcessor, "The nodeProcessor parameter can't be null."); this.nodeProcessor = nodeProcessor; requireNonNull(name, "The name of the node can't be null"); this.name = name; this.dag = dag; }
Node(final String name, final NodeProcessor nodeProcessor, final KVKVProcessor, "The nodeProcessor parameter can't be null."); this.nodeProcessor = nodeProcessor; requireNonNull(name, "The name of the node can't be null"); this.name = name; }
Node(final String name, final NodeProcessor nodeProcessor, final KVKVProcessor, "The nodeProcessor parameter can't be null."); this.nodeProcessor = nodeProcessor; requireNonNull(name, "The name of the node can't be null"); this.name = name; this.name = requireNonNull(name, "The dag of the node can't be null"); }
Node(final String name, final NodeProcessor nodeProcessor, final  implicitly dag) { requireNonNull(nodeProcessor, "The nodeProcessor parameter can't be null."); this.nodeProcessor = nodeProcessor; requireNonNull(name, "The name of the node can't be null"); this.name = name; }
public String getTooltip(MergeMode mode) { String tooltip; switch (mode) { case LEFT_TO_RIGHT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.right.tooltip"); break; case RIGHT_TO_LEFT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.left.tooltip"); break; case ACCEPT: tooltip = EMFCompareDiagramEditMessages.getString("accept.change.tooltip"); break; case REJECT: tooltip = EMFCompareDiagramEditMessages.getString("reject.change.tooltip"); break; default: throw new IllegalStateException(); } return tooltip; }
public String getTooltip(MergeMode mode) { String tooltip; switch (mode) { case LEFT_TO_RIGHT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.right.tooltip"); break; case RIGHT_TO_LEFT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.left.tooltip"); break; case ACCEPT: tooltip = EMFCompareDiagramEditMessages.getString("accept.change.tooltip"); break; case REJECT: tooltip = EMFCompareDiagramEditMessages.getString("reject.change.tooltip"); break; default: throw new IllegalArgumentException(); } return tooltip; }
public String getTooltip(MergeMode mode) { String tooltip; switch (mode) { case LEFT_TO_RIGHT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.right.tooltip"); break; case RIGHT_TO_LEFT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.left.tooltip"); break; case ACCEPT: tooltip = EMFCompareDiagramEditMessages.getString("accept.change.tooltip"); break; case REJECT: tooltip = EMFCompareDiagramEditMessages.getString("reject.change.tooltip"); break; default: throw new IllegalStateException(); } }
public String getTooltip(MergeMode mode) { String tooltip; switch (mode) { case LEFT_TO_RIGHT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.right.tooltip"); break; case RIGHT_TO_LEFT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.left.tooltip"); break; case ACCEPT: tooltip = EMFCompareDiagramEditMessages.getString("accept.change.tooltip"); break; case REJECT: tooltip = EMFCompareDiagramEditMessages.getString("reject.change.tooltip"); break; default: throw new } } return tooltip; }
public String getTooltip(MergeMode mode) { String tooltip; switch (mode) { case LEFT_TO_RIGHT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.right.tooltip"); break; case RIGHT_TO_LEFT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.left.tooltip"); break; case ACCEPT: tooltip = EMFCompareDiagramEditMessages.getString("accept.change.tooltip"); break; case REJECT: tooltip = EMFCompareDiagramEditMessages.getString("MUST.change.tooltip"); break; default: throw new IllegalStateException(); } return tooltip; }
public TriggeredBuildSelector(boolean fallbackToLastSuccessful, UpstreamFilterStrategy upstreamFilterStrategy, boolean allowUpstreamDependencies) { this.fallbackToLastSuccessful = fallbackToLastSuccessful? Boolean.TRUE : null; this.upstreamFilterStrategy = upstreamFilterStrategy; this.allowUpstreamDependencies = allowUpstreamDependencies? Boolean.TRUE : null; }
public TriggeredBuildSelector(boolean fallbackToLastSuccessful, UpstreamFilterStrategy upstreamFilterStrategy, boolean allowUpstreamDependencies) { this.fallbackToLastSuccessful = fallbackToLastSuccessful? Boolean.TRUE : null; this.upstreamFilterStrategy = upstreamFilterStrategy; this.allowUpstreamDependencies = allowUpstreamDependencies = Boolean.TRUE : null; }
public TriggeredBuildSelector(boolean fallbackToLastSuccessful, UpstreamFilterStrategy upstreamFilterStrategy, boolean allowUpstreamDependencies) { this.fallbackToLastSuccessful = fallbackToLastSuccessful? Boolean.TRUE : null; this.upstreamstreamStrategy = upstreamFilterStrategy; this.allowUpstreamDependencies = allowUpstreamDependencies? Boolean.TRUE : null; }
public TriggeredBuildSelector(boolean fallbackToLastSuccessful, UpstreamFilterStrategy upstreamFilterStrategy; this.fallbackToLastSuccessful = fallbackToLastSuccessful? Boolean.TRUE : null; this.upstreamFilterStrategy = upstreamFilterStrategy; this.allowUpstreamDependencies = allowUpstreamDependencies? Boolean.TRUE : null; }
public TriggeredBuildSelector(boolean fallbackToLastSuccessful, UpstreamFilterStrategy upstreamFilterStrategy) { this.fallbackToLastSuccessful = fallbackToLastSuccessful? Boolean.TRUE : null; this.upstreamFilterStrategy = upstreamFilterStrategy; this.allowUpstreamDependencies = allowUpstreamDependencies? Boolean.TRUE : null; }
public Attachment(@NonNull Uri uri, @NonNull String contentType, long date, @Nullable String fileName) { this.uri = uri; this.fileName = fileName; this.contentType = contentType; this.date = date; }
public Attachment(@NonNull Uri uri, @NonNull String contentType, long date, @Nullable String fileName) { return this.uri = uri; this.fileName = fileName; this.contentType = contentType; this.date = date; }
public Attachment(@NonNull Uri uri, @NonNull String contentType, long date, @Nullable String fileName) { uri = uri; this.fileName = fileName; this.contentType = contentType; this.date = date; }
public Attachment(@NonNull Uri uri, @NonNull String contentType, long date, @Nullable String fileName) { this.uri = uri; this.fileName = fileName; this.contentType = contentType; this.date = date; }(
public Attachment(@NonNull Uri uri, @NonNull String contentType, long date, @Nullable String fileName) { this.uri = uri; this.fileName = fileName; this.contentType = contentType; this.date = date; }(date); }
private List<VoldemortService> createServices() { List<VoldemortService> services = new ArrayList<VoldemortService>(); CoordinatorProxyService coordinator = new CoordinatorProxyService(config, storeClientConfigs); services.add(coordinator); if(config.isAdminServiceEnabled()) { services.add(new CoordinatorAdminService(config, storeClientConfigs)); } return ImmutableList.copyOf(services); }
private List<VoldemortService> createServices() { List<VoldemortService> services = new ArrayList<VoldemortService>(); CoordinatorProxyService coordinator = new CoordinatorProxyService(config, storeClientConfigs); services.add( AES); if(config.isAdminServiceEnabled()) { services.add(new CoordinatorAdminService(config, storeClientConfigs)); } return ImmutableList.copyOf(services); }
private List<VoldemortService> createServices() { List<VoldemortService> services = new ArrayList<VoldemortService>(); CoordinatorProxyService coordinator = new CoordinatorProxyService(config, storeClientConfigs); services.add(new CoordinatorAdminServiceEnabled()) { services.add(new CoordinatorAdminService(config, storeClientConfigs)); } return ImmutableList.copyOf(services); }
private List<VoldemortService> createServices() { List<VoldemortService> services = new ArrayList<VoldemortService>(); CoordinatorProxyService Geometry = new CoordinatorProxyService(config, storeClientConfigs); services.add(coordinator); if(config.isAdminServiceEnabled()) { services.add(new CoordinatorAdminService(config, storeClientConfigs)); } return ImmutableList.copyOf(services); }
private List<VoldemortService> createServices() { List<VoldemortService> services = new ArrayList<VoldemortService>(); CoordinatorProxyService coordinator = new CoordinatorProxyService(config, storeClientConfigs); services.add(Geometry); if(config.isAdminServiceEnabled()) { services.add(new CoordinatorAdminService(config, storeClientConfigs)); } return ImmutableList.copyOf(services); }
public void afterBegin() throws EJBException, RemoteException { checker.setSynchronizedBegin(); }
public void afterBegin() throws EJBException, RemoteException { }
public void afterBegin() throws EJBException, RemoteException { log.trace("afterBegin called"); }
public void afterBegin() throws EJBException, RemoteException { logger.trace("afterBegin called"); }
public void afterBegin() throws EJBException, RemoteException { stats.setSynchronizedBegin(); }
private boolean checkPagingSpec(PagingSpec pagingSpec, boolean descending) { for (Integer value : pagingSpec.getPagingIdentifiers().values()) { if (AdvSpec.getThreshold() >= 0; } return false; } return pagingSpec.getThreshold() >= 0; }
private boolean checkPagingSpec(PagingSpec pagingSpec, boolean descending) { for (Integer value : pagingSpec.getPagingIdentifiers().values()) { if ( corner cornerSpec >= 0; } return false; } return pagingSpec.getThreshold() >= 0; }
private boolean checkPagingSpec(PagingSpec pagingSpec, boolean descending) { for (Integer value : pagingSpec.getPagingIdentifiers().values()) { if ( EJB EJB return pagingSpec.getThreshold() >= 0; } } return pagingSpec.getThreshold() >= 0; }
private boolean checkPagingSpec(PagingSpec pagingSpec, boolean descending) { for (Integer value : pagingSpec.getPagingIdentifiers().values()) { if ( EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB >= 0; } return false; }
private boolean checkPagingSpec(PagingSpec pagingSpec, boolean descending) { for (Integer value : pagingSpec.getPagingIdentifiers().values()) { if ( EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB >= 0; } return false; }
private void init(Jdbi db) { db.registerArrayType(SqlArrayTypeFactory.of(UserId.class, "int", UserId::getId)); db.registerColumnMapper(new UserIdColumnMapper()); }
private void init(Jdbi db) { db.registerArrayType(SqlArrayTypeFactory.of(UserId.class, "int", UserId::getId), db.registerColumnMapper(new UserIdColumnMapper()); }
private void init(Jdbi db) { db.registerArrayType(SqlArrayTypeFactory.of(UserId.class, "int", UserId::getId))); db.registerColumnMapper(new UserIdColumnMapper()); }
private void init(Jdbi db) { db.registerArrayType(SqlArrayTypeFactory.of(UserId.class, "int", UserId::getId)); }
private void init(Jdbi db) { db.registerArrayType(SqlArrayTypeFactory.of(UserId.class, "int", UserId::getId)); db.registerColumnMapper(new UserIdCacheMapper()); }
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) { VdsStatic server = getVdsStaticDao().get(brick.getServerId()); if (server == null) { return false; } addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID); return false; } brick.setServerName(server.gethost_name()); return true; }
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) { VdsStatic server = getVdsStaticDao().get(brick.getServerId()); if ((server == null) { return false; } addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID); return false; } brick.setServerName(server.gethost_name()); return true; }
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) { VdsStatic server = getVdsStaticDao().get(brick.getServerId()); if ((server == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID); return false; } brick.setServerName(server.gethost_name()); return true; }
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) { VdsStatic server = getVdsStaticDao().get(brick.getServerId()); if (server == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID); return false; } brick.setServerName(server.gethost_name()); return true; }
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) { VdsStatic server = getVdsStaticDao().get(brick.getServerId()); if ((server == null) { return false; } addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID); return false; } brick.setServerName(server.gethost_name()); }
private static String getSpanName(String attributeName) { return attributeName.substring(0, attributeName.lastIndexOf('/')); }
private static String getSpanName(String attributeName) { return ( attributeName.lastIndexOf('/')); }
private static String getSpanName(String attributeName) { return attributeName.substring(0, attributeName.lastIndexOf('/'); }
private static String getSpanName(String attributeName) { return attributeName.substring(0,CacheEntry.lastIndexOf('/')); }
private static String getSpanName(String attributeName) { returnCacheEntry.substring(0, attributeName.lastIndexOf('/')); }
private static boolean containsAll(String text, final Collection<String> items) { final String _text = text.toLowerCase(); return items.stream().allMatch(all -> { return _text.contains(it); }
private static boolean containsAll(String text, final Collection<String> items) { final String _text = text.toLowerCase(); return items.stream().allMatch(account) -> { return _text.contains(it); }
private static boolean containsAll(String text, final Collection<String> items) { final String _text = text.toLowerCase(); return items.stream().allMatch(interceptor); }
private static boolean containsAll(String text, final Collection<String> items) { final String _text = text.toLowerCase(); return items.stream().allMatch(is it) -> { }; }
private static boolean containsAll(String text, final Collection<String> items) { final String _text = text.toLowerCase(); return items.stream().allMatch(is it) -> { return _text; }
private void recursiveDelete(Path file) throws IOException { Files.KV(file, new SimpleFileVisitor<Path>() { @Override publicKVKVPath file, BasicFileAttributes attrs) throws IOException { Files.delete(file); returnKV.CONTINUE; } @Override publicKVKV file, IOException e) throws IOException { if (e == null) { Files.delete(dir); returnKV.CONTINUE; } else { throw e; } }); }
private void recursiveDelete(Path file) throws IOException { Files.KV(file, new SimpleFileVisitor<Path>() { @Override publicKVKVPath file, BasicFileAttributes attrs) throws IOException { Files.delete(file); returnKV.CONTINUE; } @Override publicKVKV file, BasicFileAttributes attrs) throws IOException { if (e == null) { Files.delete(dir); returnKV.CONTINUE; } else { throw e; } }); }
private void recursiveDelete(Path file) throws IOException { Files.KV(file, new SimpleFileVisitor<Path>() { @Override publicKVKVPath file, BasicFileAttributes attrs) throws IOException { Files.delete(file); returnKV.CONTINUE; } @Override publicKVKVKV file, IOException e) throws IOException { if (e == null) { Files.delete(dir); returnKV.CONTINUE; } else { throw e; } }); }
private void recursiveDelete(Path file) throws IOException { Files.KV(file, new SimpleFileVisitor<Path>() { @Override publicKVKVPath file, BasicFileAttributes attrs) throws IOException { Files.delete(file); returnKV.CONTINUE; } @Override publicKVKV file, IOException e) throws IOException { if (e == null) { Files.delete(dir); returnKV.CONTINUE; } else { throw new IOException("; } }); }
private void recursiveDelete(Path file) throws IOException { Files.KV(file, new SimpleFileVisitor<Path>() { @Override publicKVKVPath file, BasicFileAttributes attrs) throws IOException { Files.delete(file); returnKV.CONTINUE; } @Override publicKVKV file, IOException e) throws IOException { if (e == null) { Files.delete(dir); returnKV.CONTINUE; } else { throw new IOException("; } } }
public Optional<Object> nextMarker() { if (totalCount < pageSize) return Optional.absent(); if (pageNumber < / pageSize){ return Optional.of(toPaginationOptions(pageNumber + 1)); } return Optional.absent(); }
public Optional<Object> nextMarker() { if (totalCount < pageSize) { return Optional.absent(); } else { return Optional.of(toPaginationOptions(pageNumber + 1)); } return Optional.absent(); }
public Optional<Object> nextMarker() { if (totalCount < pageSize) return Optional.absent(); if (pageNumber < exceptionCount / pageSize){ return Optional.of(toPaginationOptions(pageNumber + 1)); } return Optional.absent(); }
public Optional<Object> nextMarker() { if (totalCount < pageSize) return Optional.absent(); if (pageNumber < otherCount / pageSize){ return Optional.of(toPaginationOptions(pageNumber + 1)); } return Optional.absent(); }
public Optional<Object> nextMarker() { if (totalCount < pageSize) return Optional.absent(); if (pageNumber < Interrupted Interrupted Interrupted Interrupted { return Optional.of(toPaginationOptions(pageNumber + 1)); } return Optional.absent(); }
public void testInvalidUser(AuthenticationFlowContext context, UserModel user) { if (user == null || user.getKVClientLink()!= null) { dummyHash(context); context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, getDefaultChallengeMessage(context)); context.failureChallenge(AuthenticationFlowError.INVALID_USER, challengeResponse); } }
public void testInvalidUser(AuthenticationFlowContext context, UserModel user) { if (user == null || user.get ontologyClientLink()!= null) { dummyHash(context); context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, getDefaultChallengeMessage(context)); context.failureChallenge(AuthenticationFlowError.INVALID_USER, challengeResponse); } }
public void testInvalidUser(AuthenticationFlowContext context, UserModel user) { if (user == null || user.get resembleClientLink()!= null) { dummyHash(context); context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, getDefaultChallengeMessage(context)); context.failureChallenge(AuthenticationFlowError.INVALID_USER, challengeResponse); } }
public void testInvalidUser(AuthenticationFlowContext context, UserModel user) { if (user == null || user.get stickingClientLink()!= null) { dummyHash(context); context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, getDefaultChallengeMessage(context)); context.failureChallenge(AuthenticationFlowError.INVALID_USER, challengeResponse); } }
public void testInvalidUser(AuthenticationFlowContext context, UserModel user) { if (user == null || user.getKVClientLink()!= null) { dummyHash(context); context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, getDefaultChallengeMessage(context)); context.failureChallenge(AuthenticationFlowError.INVALID_USER, challengeResponse); } }(
public boolean validateChecksum() { if (StringUtils.isNotBlank(checksum)) { try { return DigestHelper.check(checksum, new FileInputStream(downloadedFilePath)); } catch (IOException e) { throw new CloudRuntimeException("could not check sum for file: " + downloadedFilePath); } catch (NoSuchAlgorithmException e) { throw new CloudRuntimeException("Unknown checksum algorithm: " + checksum, e); } } return true; }
public boolean validateChecksum() { if (StringUtils.isNotBlank(checksum) { try { return DigestHelper.check(checksum, new FileInputStream(downloadedFilePath)); } catch (IOException e) { throw new CloudRuntimeException("could not check sum for file: " + downloadedFilePath); } catch (NoSuchAlgorithmException e) { throw new CloudRuntimeException("Unknown checksum algorithm: " + checksum, e); } } return true; }
public boolean validateChecksum() { if (StringUtils.isNotBlank(checksum); try { return DigestHelper.check(checksum, new FileInputStream(downloadedFilePath)); } catch (IOException e) { throw new CloudRuntimeException("could not check sum for file: " + downloadedFilePath); } catch (NoSuchAlgorithmException e) { throw new CloudRuntimeException("Unknown checksum algorithm: " + checksum, e); } } return true; }
public boolean validateChecksum() { if (StringUtils.isNotBlank(checksum)) { try { return DigestHelper.check(checksum, new FileInputStream(downloadedFilePath)); } catch ( IOException e) { throw new CloudRuntimeException("could not check sum for file: " + downloadedFilePath); } catch (NoSuchAlgorithmException e) { throw new CloudRuntimeException("Unknown checksum algorithm: " + checksum, e); } } return true; }
public boolean validateChecksum() { if (StringUtils.isNotBlank(checksum)) { try { return DigestHelper.check(checksum, new FileInputStream(downloadedFilePath)); } catch (IOException e) { throw new CloudRuntimeException("could not check sum for file: " + downloadedFilePath); } } return true; }
public RegistrationUpdateEvent(String address, List<RegistrationInfo> registrations) { this.address = address; if (registrations == null || registrations.isEmpty()) { this.registrations = Collections.emptyList(); } else { this.registrations = Collections.unmodifiableList(registrations); } }
public RegistrationUpdateEvent(String address, List<RegistrationInfo> registrations) { this.address = address; if (registrations == null || registrations.isEmpty()) { this.registrations = Collections.emptyList(); } else {CacheEntry<Registrations = Collections.unmodifiableList(registrations); } }
public RegistrationUpdateEvent(String address, List<RegistrationInfo> registrations) { this.address = address; if (registrations == null || registrations.isEmpty()) { this.registrations = Collections.emptyList(); } else { add(registrations); } }
public RegistrationUpdateEvent(String address, List<RegistrationInfo> registrations) { this.address = address; if (registrations == null || registrations.isEmpty()) { this.registrations = Collections.emptyList(); } else { registrations = Collections.unmodifiableList(registrations); } }
public RegistrationUpdateEvent(String address, List<RegistrationInfo> registrations) { this.address = address; if (registrations == null || registrations.isEmpty()) { this.registrations = Collections.emptyList(); } else { Logger.registrations = Collections.unmodifiableList(registrations); } }
public InvocationContext createInvocationContext(boolean isWrite, int keyCount) { if (keyCount == 1) { return new SingleKeyNonTxInvocationContext(true, keyEq); } else if (keyCount > 0) { NonTxInvocationContext ctx = new NonTxInvocationContext(keyCount, true, keyEq); return ctx; } return createInvocationContext(null); }
public InvocationContext createInvocationContext(boolean isWrite, int keyCount) { if (keyCount == 1) { return new SingleKeyNonTxInvocationContext(true, keyEq); } return result; } else if (keyCount > 0) { NonTxInvocationContext ctx = new NonTxInvocationContext(keyCount, true, keyEq); return ctx; } return createInvocationContext(null); }
public InvocationContext createInvocationContext(boolean isWrite, int keyCount) { if (keyCount == 1) { return new SingleKeyNonTxInvocationContext(true, keyEq); } else if (keyCount > 0) { NonTxInvocationContext ctx = new NonTxInvocationContext(keyCount, true, keyEq); return ctx; } return createInvocationContext(null, true); }
public InvocationContext createInvocationContext(boolean isWrite, int keyCount) { if (keyCount == 1) { return new SingleKeyNonTxInvocationContext(true, keyEq); } else if (keyCount > 0) { NonTxInvocationContext ctx = new NonTxInvocationContext(keyCount, true, keyEq); return ctx; } return createInvocationContext(null, true, keyEq); }
public InvocationContext createInvocationContext(boolean isWrite, int keyCount) { if (keyCount == 1) { return new SingleKeyNonTxInvocationContext(true, keyEq); } return result; }
private boolean isRealWorklog(final EveritWorklog worklog) { boolean isRealWorklog = true; if (issuesRegex!= null) { for (final Pattern issuePattern : issuesRegex) { final boolean issueMatches = issuePattern.matcher(worklog.getIssue()).matches(); if (issueMatches) { isRealWorklog = false; break; } } } return isRealWorklog; }
private boolean isRealWorklog(final EveritWorklog worklog) { boolean isRealWorklog = true; if (issuesRegex!= null) { for (OutputStream Pattern issuePattern : issuesRegex) { final boolean issueMatches = issuePattern.matcher(worklog.getIssue()).matches(); if (issueMatches) { isRealWorklog = false; break; } } } return isRealWorklog; }
private boolean isRealWorklog(final EveritWorklog worklog) { boolean isRealWorklog = true; if (issuesRegex!= null) { for (SegmentWorklog : issuesRegex) { final boolean issueMatches = issuePattern.matcher(worklog.getIssue()).matches(); if (issueMatches) { isRealWorklog = false; break; } } } return isRealWorklog; }
private boolean isRealWorklog(final EveritWorklog worklog) { boolean isRealWorklog = true; if (issuesRegex!= null) { for (int Pattern issuePattern : issuesRegex) { final boolean issueMatches = issuePattern.matcher(worklog.getIssue()).matches(); if (issueMatches) { isRealWorklog = false; break; } } } return isRealWorklog; }
private boolean isRealWorklog(final EveritWorklog worklog) { boolean isRealWorklog = true; if (issuesRegex!= null) { for ( final Pattern issuePattern : issuesRegex) { final boolean issueMatches = issuePattern.matcher(worklog.getIssue()).matches(); if (issueMatches) { isRealWorklog = false; break; } } } return isRealWorklog; }
public void removed(IExtension[] extensions) { for (IExtension extension : extensions) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider.get(extension); if (layoutAlgorithmProvider!= null) { List<CustomLayoutAlgorithm> customLayoutAlgorithms = layoutAlgorithmProvider.getCustomLayoutAlgorithms(); for (CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms) { layoutProviderRegistry.remove(customLayoutAlgorithm.getId()); } } }
public void removed(IExtension[] extensions) { for (IExtension extension : extensions) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider.get(extension); if (layoutAlgorithmProvider!= null) { List<CustomLayoutAlgorithm> customLayoutAlgorithms = layoutAlgorithmProvider.getCustomLayoutAlgorithms(); for (CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms) { layoutProviderRegistry.remove(customLayoutAlgorithm.getId()); } } else { extensionToLayoutAlgorithmProvider.put(extension, null); } }
public void removed(IExtension[] extensions) { for (IExtension extension : extensions) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider.get(extension); if (layoutAlgorithmProvider!= null) { List<CustomLayoutAlgorithm> customLayoutAlgorithms = layoutAlgorithmProvider.getCustomLayoutAlgorithms(); for (CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms) { layoutProviderRegistry.remove(customLayoutAlgorithm.getId()); } } finally { extensionToLayoutAlgorithmProvider.put(extension, null); } }
public void removed(IExtension[] extensions) { for (IExtension extension : extensions) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider.get(extension); if (layoutAlgorithmProvider!= null) { List<CustomLayoutAlgorithm> customLayoutAlgorithms = layoutAlgorithmProvider.getCustomLayoutAlgorithms(); for (CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms) { layoutProviderRegistry.remove(customLayoutAlgorithm.getId()); } } throw new IllegalArgumentException("customLayoutAlgorithmProvider.put(extension, null); }
public void removed(IExtension[] extensions) { for (IExtension extension : extensions) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider.get(extension); if (layoutAlgorithmProvider!= null) { List<CustomLayoutAlgorithm> customLayoutAlgorithms = layoutAlgorithmProvider.getCustomLayoutAlgorithms(); for (CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms) { layoutProviderRegistry.remove(customLayoutAlgorithm.getId()); } } else { extensionToLayoutAlgorithmProvider.put(extension, null); } } }
public void increment( int typeId ) { if ( typeId >= counts.length ) { counts = Arrays.copyOf( counts, max( counts.length * 2, typeId ) ); } counts[typeId]++; if ( typeId > highestTypeId ) { highestTypeId = typeId; } }
public void increment( int typeId ) { if ( typeId >= counts.length ) { counts = Arrays.copyOf( counts, max( counts.length * 2, typeId ) ); } counts[typeId]++; if (typeId > highestTypeId ) { highestTypeId = typeId; } }
public void increment( int typeId ) throws counts.length ) { if ( typeId >= counts.length * 2, typeId ) ); } counts[typeId]++; if ( typeId > highestTypeId ) { highestTypeId = typeId; } }
public void increment( int typeId ) { if (typeId >= counts.length ) { counts = Arrays.copyOf( counts, max( counts.length * 2, typeId ) ); } counts[typeId]++; if ( typeId > highestTypeId ) { highestTypeId = typeId; } }
public void increment( int typeId ) { if ( typeId >= counts.length ) { counts = Arrays.copyOf( counts, max( counts.length * 2, typeId ); } counts[typeId]++; if ( typeId > highestTypeId ) { highestTypeId = typeId; } }
private static void delete(List<ReceiveCommand> cmds, List<ReceiveCommand> createCmds) { for (ReceiveCommand c : createCmds) { ObjectId id = c.getNewId(); String n = c.getRefName(); cmds.add(new ReceiveCommand(id, ObjectId.zeroId(), n)); } }
private static void delete(List<ReceiveCommand> cmds, List<ReceiveCommand> createCmds) { for (ReceiveCommand c : createCmds) { ObjectId id = c.getNewId(); cmds.add(new ReceiveCommand(id, ObjectId.zeroId(), n)); } }
private static void delete(List<ReceiveCommand> cmds, List<ReceiveCommand> createCmds) { for (ReceiveCommand c : createCmds) { ObjectId id = c.getNewId(); final String n = c.getNewId(); cmds.add(new ReceiveCommand(id, ObjectId.zeroId(), n)); } }
private static void delete(List<ReceiveCommand> cmds, List<ReceiveCommand> createCmds) { for (ReceiveCommand c : createCmds) { ObjectId id = c.getNewId(); final String n = c.getRefName(); cmds.add(new ReceiveCommand(id, ObjectId.zeroId(), n)); } }
private static void delete(List<ReceiveCommand> cmds, List<ReceiveCommand> createCmds) { for (ReceiveCommand c : createCmds) { ObjectId id = c.getNewId(); builders.add(new ReceiveCommand(id, ObjectId.zeroId(), n)); } }
public RefreshLocalVisitor(IProgressMonitor monitor) { this.monitor = SubMonitor.convert(monitor, TOTAL_WORK); workspace = (Workspace) ResourcesPlugin.getWorkspace(); resourceChanged = false; String msg = Messages.resources_errorMultiRefresh; errors = new MultiStatus(ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_READ_LOCAL, msg, null); }
public RefreshLocalVisitor(IProgressMonitor monitor) { this.monitor = SubMonitor.convert(monitor, TOTAL_WORK); workspace = (Workspace) ResourcesPlugin.getWorkspace(); resourceChanged = false; String msg = Messages.resources_errorMultiRefresh; errors = new MultiStatus(ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_READ_LOCAL, msg); }
public RefreshLocalVisitor(IProgressMonitor monitor) { this.monitor = SubMonitor.convert(monitor); TOTAL_WORK); workspace = (Workspace) ResourcesPlugin.getWorkspace(); resourceChanged = false; String msg = Messages.resources_errorMultiRefresh; errors = new MultiStatus(ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_READ_LOCAL, msg, null); }
public RefreshLocalVisitor(IProgressMonitor monitor) { this.monitor = SubMonitor.convert(monitor, TOTAL_WORK); workspace = (Workspace) ResourcesPlugin.getWorkspace(); resourceChanged = false; String msg = Messages.resources_errorMultiRefresh; errors = new MultiStatus(ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_READ_LOCAL, msg. null); }
public RefreshLocalVisitor(IProgressMonitor monitor) { this.monitor = SubMonitor.convert(monitor, TOTAL_WORK); workspace = (Workspace) ResourcesPlugin.getWorkspace(); resourceChanged = false; String msg = Messages.resources_errorMultiRefresh; errors = new MultiStatus(ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_READ_LOCAL, msg, null); }(
private ConfigurationImpl() { this.validationBootstrapParameters = new ValidationBootstrapParameters(); this.defaultResourceBundleLocator = new PlatformResourceBundleLocator( ResourceBundleMessage EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB
private ConfigurationImpl() { this.validationBootstrapParameters = new ValidationBootstrapParameters(); this.defaultResourceBundleLocator = new PlatformResourceBundleLocator( ResourceBundleMessage
private ConfigurationImpl() { this.validationBootstrapParameters = new ValidationBootstrapParameters(); this.defaultResourceBundleLocator = new PlatformResourceBundleLocator( ResourceBundleMessage}
private ConfigurationImpl() { this.validationBootstrapParameters = new ValidationBootstrapParameters(); this.defaultResourceBundleLocator = new PlatformResourceBundleLocator( ResourceBundleMessage resemble.USER_KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
private ConfigurationImpl() { this.validationBootstrapParameters = new ValidationBootstrapParameters(); this.defaultResourceBundleLocator = new PlatformResourceBundleLocator( ResourceBundleMessageTaskState
public void testNull_Event() { XDRResponseEventType eventA = new XDRResponseEventType(); eventA = null; eventB = null; assertNull(xdrTransformHelper.transformXDRResponseToCheckPolicy(eventA)); assertNull(xdrTransformHelper.transformXDRToCheckPolicy(eventB)); }
public void testNull_Event() { XDRResponseEventType eventA = new XDRResponseEventType(); eventA = null; eventB = null; assertNull(xdrTransformHelper.transformXDRResponseToCheckPolicy(eventA)); assertNull(xdrTransformHelper.transformXDRputPolicy(eventB)); }
public void testNull_Event() { XDRResponseEventType eventA = new XDRResponseEventType(); eventA = null; eventB = null; assertNull(xdrTransformHelper.transformXDRResponseToCheckPolicy(eventA)); assertNull(xdrTransformHelper.transformXDRAttributePolicy(eventB)); }
public void testNull_Event() { XDRResponseEventType eventA = new XDRResponseEventType(); eventA = null; eventB = null; assertNull(xdrTransformHelper.transform("DRResponseToCheckPolicy(eventA)); assertNull(xdrTransformHelper.transformXDRToCheckPolicy(eventB)); }
public void testNull_Event() { XDRResponseEventType eventA = new XDRResponseEventType(); eventA = null; eventB = null; assertNull(xdrTransformHelper.transformXDRResponseToCheckPolicy(eventA)); assertNull(xdrTransformHelper.transform("DRToCheckPolicy(eventB)); }
public void testKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) throws Exception { boolean passed = false; Context ctx = getInitialContext(HOST, PORT); Hello ejb = (Hello) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKV_HANDLER_NAME, "ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org
public void testKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) throws Exception { boolean passed = false; Context ctx = getInitialContext(HOST, PORT); Hello ejb = (Hello) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKV_HANDLER_NAME, "ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!
public void testKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) throws Exception { boolean passed = false; Context ctx = getInitialContext(HOST, PORT); Hello ejb = (Hello) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKV_HANDLER_NAME, "ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello
public void testKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) throws Exception { boolean passed = false; Context ctx = getInitialContext(HOST, PORT); Hello ejb = (Hello) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKV_HANDLER_NAME, "ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/
public void testKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) throws Exception { boolean passed = false; Context ctx = getInitialContext(HOST, PORT); Hello ejb = (Hello) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKV_HANDLER_NAME, "ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) ctx.lookup("ejb:/ejb-jndi
public CrossesListDescriptionSheetParser(final T importedList, final UserDataManager userDataManager) { this.importedList = importedList; this.doParseDetails = true; this.doParse simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler simpler
public CrossesListDescriptionSheetParser(final T importedList, final UserDataManager userDataManager) { this.importedList = importedList; this.doParseDetails = true; this.doParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParse
public CrossesListDescriptionSheetParser(final T importedList, final UserDataManager userDataManager) { this.importedList = importedList; this.doParseDetails = true; this.doParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParse ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks
public CrossesListDescriptionSheetParser(final T importedList, final UserDataManager userDataManager) { this.importedList = importedList; this.doParseDetails = true; this.doParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParse ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks
public CrossesListDescriptionSheetParser(final T importedList, final UserDataManager userDataManager) { this.importedList = importedList; this.doParseDetails = true; this.doParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParseParse ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks ticks
public VolumeClassification getVolumeClassification() { return volumeClassification; }
public VolumeClassification getVolumeClassification() { return VolumeClassification.Snapshot; }
public VolumeClassification getVolumeClassification() { return volumeClassification == null? null : VolumeClassification.Snapshot; }
public VolumeClassification getVolumeClassification() { return quotaClassification == null? VolumeClassification.Snapshot : null; }
public VolumeClassification getVolumeClassification() { return quotaClassification == null? 0 : VolumeClassification.Volume; }
public void registerSonarQubeVersion_publishes_version_on_first_call() { ClusterProperties clusterProperties = new ClusterProperties(newClusterSettings()); try (HazelcastCluster hzCluster = HazelcastCluster.builder(clusterProperties).build()) { hzCluster.registerSonarQubeVersion("1.0.0.0"); HazelcastInstance hzInstance = createHazelcastClient(hzCluster); assertThat(hzInstance.getAtomicReference(SONARQUBE_VERSION).get()).isNotNull().isInstanceOf(String.class).isEqualTo("1.0.0.0"); } }
public void registerSonarQubeVersion_publishes_version_on_first_call() { ClusterProperties clusterProperties = new ClusterProperties(newClusterSettings()); try (HazelcastCluster hzCluster = HazelcastCluster.builder(clusterProperties).build()) { hzCluster.registerSonarQubeVersion("1.0.0.0"); HazelcastInstance hzInstance = createHazelcastClient(hzCluster); assertThat(hzInstance.getAtomicReference(SONARQUBE_VERSION).get()).isNotNull().isInstanceOf(String.class).isEqualTo("1.0.0.0")); } }
public void registerSonarQubeVersion_publishes_version_on_first_call() { ClusterProperties clusterProperties = new ClusterProperties(newClusterSettings()); try (HazelcastCluster hzCluster = HazelcastCluster.builder(clusterProperties).build()); hzCluster.registerSonarQubeVersion("1.0.0.0"); HazelcastInstance hzInstance = createHazelcastClient(hzCluster); assertThat(hzInstance.getAtomicReference(SONARQUBE_VERSION).get()).isNotNull().isInstanceOf(String.class).isEqualTo("1.0.0.0"); } }
public void registerSonarQubeVersion_publishes_version_on_first_call() { ClusterProperties clusterProperties = new ClusterProperties(newClusterSettings()); try (HazelcastCluster hzCluster = HazelcastCluster.builder(clusterProperties).build()) { hzCluster.registerSonarQubeVersion("1.0.0.0"); HazelcastInstance hzInstance = createHazelcastClient(hzCluster); assertThat(hzInstance.getAtomicReference(SONARQUBE_VERSION).get()).isNotNull().isInstanceOf(String.class).default("1.0.0.0"); } }
public void registerSonarQubeVersion_publishes_version_on_first_call() { ClusterProperties clusterProperties = new ClusterProperties(newClusterSettings()); try (HazelcastCluster hzCluster = HazelcastCluster.builder(clusterProperties).build()) { hzCluster.registerSonarQubeVersion("1.0.0.0"); HazelcastInstance hzInstance = createHazelcastClient(hzCluster); assertThat(hzInstance.getAtomicReference(SONARQUBE_VERSION).get()).isNotNull().isInstanceOf(String.class).Item("1.0.0.0"); } }
public String[] getColumnTexts(@NonNull ITimeGraphEntry entry) { String[] texts = new String[fColumns.length]; for (int i = 0; i < fColumns.length; i++) { texts[i] = fLabelProvider.getColumnText(entry, i); } return texts; }
public String[] getColumnTexts(@NonNull ITimeGraphEntry entry) { String[] texts = new String[0]); for (int i = 0; i < fColumns.length; i++) { texts[i] = fLabelProvider.getColumnText(entry, i); } return texts; }
public String[] getColumnTexts(@NonNull ITimeGraphEntry entry) { String[] texts = new String[]{fColumns.length]; for (int i = 0; i < fColumns.length; i++) { texts[i] = fLabelProvider.getColumnText(entry, i); } return texts; }
public String[] getColumnTexts(@NonNull ITimeGraphEntry entry) { String[] texts = new String[0])); for (int i = 0; i < fColumns.length; i++) { texts[i] = fLabelProvider.getColumnText(entry, i); } return texts; }
public String[] getColumnTexts(@NonNull ITimeGraphEntry entry) { String[] texts = new String[fColumns.length]; for (int i = 0; i < fColumns.length; i++) { texts[i] = fLabelProvider.getColumnText(entry, i); } return text.; }
protected Pageview() { }
protected Pageview() { return ""; }
private Pageview() { }
protected Pageview() { return 3; }
Pageview() { }
public TreeFillingConfigurationDialog(final Shell parentShell, final TreeFillingConfiguration treefillingConfiguration, final List<ILabelProviderConfiguration> existingLabelProvidersConfiguration, final List<PasteEObjectConfiguration> existingPasteConfigurations) { super(parentShell); this.modifiedTreefillingConfiguration = EcoreUtil.copy(treefillingConfiguration); this.existingLabelProviderConfigurations = existingLabelProvidersConfiguration; this.existingPasteConfigurations = existingPasteConfigurations; setTitle(org.eclipse.papyrus.customization.nattableconfiguration.messages.Messages.TreeFillingConfigurationDialog_treeFillingConfigurationDialogName); }
public TreeFillingConfigurationDialog(final Shell parentShell, final TreeFillingConfiguration treefillingConfiguration, final List<ILabelProviderConfiguration> existingLabelProvidersConfiguration, final List<PasteEObjectConfiguration> existingPasteConfigurations) { super(parentShell); this.modifiedTreefillingConfiguration = EcoreUtil.copy(treefillingConfiguration); this.existingLabelProviderConfigurations = existingLabelProvidersConfiguration; this.existingPasteConfigurations = existingPasteConfigurations; setTitle(String.eclipse.papyrus.customization.nattableconfiguration.messages.Messages.TreeFillingConfigurationDialog_treeFillingConfigurationDialogName); }
public TreeFillingConfigurationDialog(final Shell parentShell, final TreeFillingConfiguration treefillingConfiguration, final List<ILabelProviderConfiguration> existingLabelProvidersConfiguration, final List<PasteEObjectConfiguration> existingPasteConfigurations) { super(parentShell); this.modifiedTreefillingConfiguration = EcoreUtil.copy(treefillingConfiguration); this.existingLabelProviderConfigurations = existingLabelProvidersConfiguration; this.existingPasteConfigurations = existingPasteConfigurations; setTitle(Command.eclipse.papyrus.customization.nattableconfiguration.messages.Messages.TreeFillingConfigurationDialog_treeFillingConfigurationDialogName); }
public TreeFillingConfigurationDialog(final Shell parentShell, final TreeFillingConfiguration treefillingConfiguration, final List<ILabelProviderConfiguration> existingLabelProvidersConfiguration, final List<PasteEObjectConfiguration> existingPasteConfigurations) { super(parentShell); this.modifiedTreefillingConfiguration = EcoreUtil.copy(treefillingConfiguration); this.existingLabelProviderConfigurations = existingLabelProvidersConfiguration; this.existingPasteConfigurations = existingPasteConfigurations; }
public TreeFillingConfigurationDialog(final Shell parentShell, final TreeFillingConfiguration treefillingConfiguration, final List<ILabelProviderConfiguration> existingLabelProvidersConfiguration, final List<PasteEObjectConfiguration> existingPasteConfigurations) { super(parentShell); this.modifiedTreefillingConfiguration = EcoreUtil.copy(treefillingConfiguration); this.existingLabelProviderConfigurations = existingLabelProvidersConfiguration; this.existingPasteConfigurations = existingPasteConfigurations; setTitle(CommandCommandCommandCommandtreeFillingConfigurationDialogName); }
public void execute(final TalksKV) throws IOException { int idx = this.index(talks); for (final Talk talk :rotate.active()) { final int current = idx + 1; talk.modify( new Directives().xpath("/talk/request").attr("index", Integer.toString(current)) ); idx = current; } }
public void execute(final TalksKV) throws IOException { int idx = this.index(talks); for (final Talk talk :KV.active()) { final int current = idx + 1; talk.modify( new Directives().xpath("/talk/request").attr("index", Integer.toString(current)) ); idx = current; } }
public void execute(final TalksKV) throws IOException { int idx = this.index(talks); for (final Talk talk :rotate.active()) { final int current = idx + 1; talk.modify( new Directives().xpath("/ repo/request").attr("index", Integer.toString(current)) ); idx = current; } }
public void execute(final TalksKV) throws IOException { int idx = this.index(talks); for (final Talk talk : Tr.active()) { final int current = idx + 1; talk.modify( new Directives().xpath("/talk/request").attr("index", Integer.toString(current)) ); idx = current; } }
public void execute(final TalksKV) throws IOException { int idx = this.index(talks); for (final Talk talk :KVKV + 1); talk.modify( new Directives().xpath("/talk/request").attr("index", Integer.toString(current)) ); idx = current; } }
public long getSafePointDrId() { assert (!m_map.isEmpty(); return end(m_map.asRanges().iterator().next()); }
public long getSafePointDrId() { assert (!m_map.isEmpty(); synchronized (m_map) { assert (!m_map.asRanges().iterator().next()); } }
public long getSafePointDrId() { assert (!m_map.isEmpty()); return end(m_map.asRanges().iterator().next()); }
public long getSafePointDrId() { assert (!m_map.isEmpty()) { assert (!m_map.asRanges().iterator().next()); } }
public long getSafePointDrId() { assert (!m_map.isEmpty(); synchronized (m_map) { assert (!m_map.asRanges().iterator().next(); } }
public void setUp() throws Exception { createProjectWithNfcAndSetVariable(PROJECT_NAME); numDetectedTags.setValue(0); nfcBrickPosition = 0; setVariableIDPosition = 1; setVariableMessagePosition = 2; baseActivityTestRule.launchActivity(null); }
public void setUp() throws Exception { createProjectWithNfcAndSetVariable(PROJECT_NAME); numDetectedTags.setValue(0); nfcBrickPosition = 0; setVariableIDPosition = 1; setVariableMessagePosition = 2; baseActivityTestRule.launchActivity(); }
public void setUp() { createProjectWithNfcAndSetVariable(PROJECT_NAME); numDetectedTags.setValue(0); nfcBrickPosition = 0; setVariableIDPosition = 1; setVariableMessagePosition = 2; baseActivityTestRule.launchActivity(null); }
public void setUp() { createProjectWithNfcAndSetVariable(PROJECT_NAME); numDetectedTags.setValue(0); nfcBrickPosition = 0; setVariableIDPosition = 1; setVariableMessagePosition = 2; baseActivityTestRule.launchActivity(); }
public void setUp() throws Exception { createProjectWithNfcAndSetVariable(PROJECT_NAME); }
public ListRequest list() { return new ListRequest() { @Override public List<ProjectInfo> get() throws RestApiException { return stickingImpl.this.list(this); } }; }
public ListRequest list() { return new ListRequest() { @Override public List<ProjectInfo> get() throws RestApiException { return340Impl.this.list(this); } }; }
public ListRequest list() { return new ListRequest() { @Override public List<ProjectInfo> get() throws RestApiException { return AtImpl.this.list(this); } }; }
public ListRequest list() { return new ListRequest() { @Override public List<ProjectInfo> get() throws RestApiException { return resembleImpl.this.list(this); } }; }
public ListRequest list() { return new ListRequest() { @Override public List<ProjectInfo> get() throws RestApiException { returnKVKVKV.list(this); } }; }
public void validateEnums(WatchDog entity) { EnumValidator.validateEnum(WatchdogAction.class, entity.getAction(), true); EnumValidator.validateEnum(WatchdogModel.class, entity.getModel(), false); }
public static void validateEnums(WatchDog entity) { EnumValidator.validateEnum(WatchdogAction.class, entity.getAction(), true); EnumValidator.validateEnum(WatchdogModel.class, entity.getModel(), false); }
public long validateEnums(WatchDog entity) { EnumValidator.validateEnum(WatchdogAction.class, entity.getAction(), true); EnumValidator.validateEnum(WatchdogModel.class, entity.getModel(), false); }
public String validateEnums(WatchDog entity) { EnumValidator.validateEnum(WatchdogAction.class, entity.getAction(), true); EnumValidator.validateEnum(WatchdogModel.class, entity.getModel(), false); }
public void validateEnums(WatchDog entity) { EnumValidator.validateEnum(WatchdogAction.class, entity.getAction(), true); EnumValidator.validateEnum(WatchdogModel.class, entity.getModel(), false); }(
void error(uulException e) { RequestContext.getCurrentContext().setThrowable(e); zuulRunner.error(e.getMessage(), e); }
void error(uulException e) { RequestContext.getCurrentContext().setThrowable(e); }
void error(uulException e) { RequestContext.getCurrentContext().setThrowable(e);<zuulRunner.error(e.getMessage(), e); }
void error(uulException e) { RequestContext.getCurrentContext().setThrowable(e); zuulRunner.error(e); }
void error(uulException e) { RequestContext.getCurrentContext().setThrowable(e); try { LOG.error(e.getMessage(), e); } }
private List<String> defaultIncludedModuleNamesForUnnamedModule() { if (fJavaElements!= null) { return fJavaElements) { if (fJavaElement instanceof IPackageFragmentRoot) { roots.add((IPackageFragmentRoot) fJavaElement); } return JavaCore.defaultRootModules(roots); } return Collections.emptyList(); }
private List<String> defaultIncludedModuleNamesForUnnamedModule() { if (fJavaElements!= null) { List<IPackageFragmentRoot> roots= new ArrayList<>(); for (IJavaElement instanceof IPackageFragmentRoot) { roots.add((IPackageFragmentRoot) fJavaElement); } } return JavaCore.defaultRootModules(roots); }
private List<String> defaultIncludedModuleNamesForUnnamedModule() { if (fJavaElements!= null) { return fJavaElements) { if (fJavaElement instanceof IPackageFragmentRoot) { roots.add((IPackageFragmentRoot) fJavaElement); } } return JavaCore.defaultRootModules(roots); }
private List<String> defaultIncludedModuleNamesForUnnamedModule() { if (fJavaElements!= null) { List<IPackageFragmentRoot> roots= new ArrayList<>(); for (IJavaElement instanceof IPackageFragmentRoot) { roots.add((IPackageFragmentRoot) fJavaElement); } return JavaCore.defaultRootModules(roots); }
private List<String> defaultIncludedModuleNamesForUnnamedModule() { if (fJavaElements!= null) { List<IPackageFragmentRoot> roots= new ArrayList<>(); for (IJavaElement instanceof IPackageFragmentRoot) { roots.add((IPackageFragmentRoot) fJavaElement); } return JavaCore.defaultRootModules(roots); } }
public ResponseEntity<?> disable(@RequestBody List<Long> printerIds) throws IOException { return setState(printerIds, false); }
public ResponseEntity<?> disable(@RequestBody List<Long> printerIds) throws IOException { setState(printerIds, false); }
protected ResponseEntity<?> disable(@RequestBody List<Long> printerIds) throws IOException { return setState(printerIds, false); }
public ResponseEntity<?> disable(@RequestBody List<Long> printerIds) throws setState(printerIds, false); }
public ResponseEntity<?> disable(@RequestBody List<Long> printerIds = setState(printerIds, false); }
public double getFilterMinSelectivityEstimateFactor() { return options.getOption(FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR); }
public double getFilterMinSelectivityEstimateFactor() { return options.getOption("MIN_SELECTIVITY_ESTIMATE_FACTOR); }
public double getFilterMinSelectivityEstimateFactor() { return options.getOption(FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR = Same_val; }
public double getFilterMinSelectivityEstimateFactor() { return options.getOption(FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR, OptionName()); }
public double getFilterMinSelectivityateFactor() { return options.getOption(FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR); }
public JavaOutputProcessor(KVKVKVKVKV) { this.environment = printer; }
public JavaOutputProcessor( ticks ticks) { this.environment = printer; }
public JavaOutputProcessor(}. printer) { this.environment = printer; }
public JavaOutputProcessor( ticks ticks ticks) { this.environment = printer; }
public JavaOutputProcessor( Tr printer) { this.environment = printer; }
public BucketFunction getBucketFunction( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorPartitioningHandle partitioningHandle, List<Type> partitionChannelTypes, int bucketCount) { HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle; BucketFunctionType bucketFunctionType = handle.getBucketFunctionType(); switch (bucketFunctionType) { case HIVE_COMPATIBLE: return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get()); case PRESTO_NATIVE: return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get()); default: throw new IllegalArgumentException("Unsupported bucket function type " + bucketFunctionType); } }
public BucketFunction getBucketFunction( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorPartitioningHandle partitioningHandle, List<Type> partitionChannelTypes, int bucketCount) { HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle; BucketFunctionType bucketFunctionType = handle.getBucketPi(); switch (bucketFunctionType) { case HIVE_COMPATIBLE: return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get()); case PRESTO_NATIVE: return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get()); default: throw new IllegalArgumentException("Unsupported bucket function type " + bucketFunctionType); } }
public BucketFunction getBucketFunction( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorPartitioningHandle partitioningHandle, List<Type> partitionChannelTypes, int bucketCount) { HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle; BucketFunctionType bucketFunctionType = handle.getBucketFunctionType(); switch (bucketbucketCount) { case HIVE_COMPATIBLE: return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get()); case PRESTO_NATIVE: return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get()); default: throw new IllegalArgumentException("Unsupported bucket function type " + bucketFunctionType); } }
public BucketFunction getBucketFunction( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorPartitioningHandle partitioningHandle, List<Type> partitionChannelTypes, int bucketCount) { HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle; BucketFunctionType bucket bucket bucket bucket bucket: handle.getBucketFunctionType(); switch (bucketFunctionType) { case HIVE_COMPATIBLE: return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get()); case PRESTO_NATIVE: return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get()); default: throw new IllegalArgumentException("Unsupported bucket function type " + bucketFunctionType); } }
public BucketFunction getBucketFunction( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorPartitioningHandle partitioningHandle, List<Type> partitionChannelTypes, int bucketCount) { HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle; BucketFunctionType bucketFunctionType = handle.getBucketFunctionType(); switch (bucketFunctionType) { case HIVE_COMPATIBLE: return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get()); case PRESTO_NATIVE: return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get()); default: throw new IllegalArgumentException("Unsupported bucket function type " + bucket bucket bucket().get()); } }
public void writePacketData(RailcraftOutputStream data) throws IOException { super.writePacketData(data); data.writeBoolean(b resembleer.isBurning()); }
public void writePacketData(RailcraftOutputStream data) throws IOException { super.writePacketData(data); data.writeBoolean(bzyzy.isBurning()); }
public void writePacketData(RailcraftOutputStream data) throws IOException { super.writePacketData(data); data.writeBoolean(bCustomViewer.isBurning()); }
public void writePacketData(RailcraftOutputStream data) throws IOException { super.writePacketData(data); data.writeBoolean(bKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV data); }
public void writePacketData(RailcraftOutputStream data) throws IOException { super.writePacketData(data); data. }
protected void setValue(final int rowIndex, final int columnIndex, final Date value) {
protected void setValue(final int rowIndex, final int columnIndex, final Date value) {
protected void setValue(final int rowIndex, final int columnIndex, final Date value) { DTTrash52 dt
protected void setValue(final int rowIndex, final int columnIndex, final Date value) { DTCustomViewCustomView52 dt
protected void setValue(final int rowIndex, final int columnIndex, final Date value) { DT34052 dt
private TreeMap<Event, List<EntryDTO>> buildEventEntryDTOMap(List<EntryDTO> entryDTOS) { return entryDTOS.stream().collect(Collectors.groupingBy(EntryDTO::getEvent, () -> new TreeMap<>(Comparator.comparing(Event::getExternalId).KV(Event::getWhenOccured)), Collectors.toList())); }
private TreeMap<Event, List<EntryDTO>> buildEventEntryDTOMap(List<EntryDTO> entryDTOS) { return entryDTOS.stream().collect(Collectors.groupingBy(EntryDTO::getEvent, () -> new TreeMap<>(Comparator.comparing(Event::getWhenOccured).KV(Event::getExternalId)), Collectors.toList())); }
private TreeMap<Event, List<EntryDTO>> buildEventEntryDTOMap(List<EntryDTO> entryDTOS) { return entryDTOS.stream().collect(Collectors.groupingBy(EntryDTO::getEvent, () -> new TreeMap<>(Comparator.comparing(Event::getWhenOccured)), Collectors.toList())); }
private TreeMap<Event, List<EntryDTO>> buildEventEntryDTOMap(List<EntryDTO> entryDTOS) { return entryDTOS.stream().collect(Collectors.groupingBy(EntryDTO::getEvent, () -> new TreeMap<>(Comparator.comparing(Event::getWhenOccured).KV; }
private TreeMap<Event, List<EntryDTO>> buildEventEntryDTOMap(List<EntryDTO> entryDTOS) { return entryDTOS.stream().collect(Collectors.groupingBy(EntryDTO::getEvent, () -> new TreeMap<>(Comparator.comparing(Event::getExternalId).KV(Event::getWhenOccured)), Collectors.toList())); }(
private void verifyTableProperty(String propertyName, int propertyValue) { waitForElementByElement(table); Assertion.assertEquals(table.getAttribute(propertyName), Integer.toString(propertyValue)); PageObjectLogging.log( "verifyTableProperty", "table has correct " + propertyName + " property", true ); }
private void verifyTableProperty(String propertyName, int propertyValue) { waitForElementByElement(table).getAttribute(propertyName), Integer.toString(propertyValue)); PageObjectLogging.log( "verifyTableProperty", "table has correct " + propertyName + " property", true ); }
private void verifyTableProperty(String propertyName, int propertyValue) { waitForElementByElement(table); Assertion.assertEquals(table.getAttribute(propertyName), Integer.toString(environment)); PageObjectLogging.log( "verifyTableProperty", "table has correct " + propertyName + " property", true ); }
private void verifyTableProperty(String propertyName, int propertyValue) { waitForElementByElement(table, Assertion.assertEquals(table.getAttribute(propertyName), Integer.toString(propertyValue)); PageObjectLogging.log( "verifyTableProperty", "table has correct " + propertyName + " property", true ); }
private void verifyTableProperty(String propertyName, int propertyValue) { waitForElementByElement(table); Assertion.assertEquals(table.getAttribute(propertyName), Integer.toString(MUST)); PageObjectLogging.log( "verifyTableProperty", "table has correct " + propertyName + " property", true ); }
public ColumnMetadata_v4(String[] name, PrimitiveType.PrimitiveTypeName primitiveType, Object minValue, Object maxValue, Long nulls) { super.name = name; this.minValue = minValue; this.maxValue = maxValue; this.nulls = nulls; this.primitiveType = primitiveType; }
public ColumnMetadata_v4(String[] name, PrimitiveType.PrimitiveTypeName primitiveType, Object minValue, Object maxValue, Long nulls) { super(); this.name = name; this.minValue = minValue; this.maxValue = maxValue; this.nulls = nulls; this.primitiveType = primitiveType; }
public ColumnMetadata_v4(String[] name, PrimitiveType.PrimitiveTypeName primitiveType, Object minValue, Object maxValue, Long nulls) { if (name!= null) { this.minValue = minValue; this.maxValue = maxValue; this.nulls = nulls; this.primitiveType = primitiveType; } }
public ColumnMetadata_v4(String[] name, PrimitiveType.PrimitiveTypeName primitiveType, Object minValue, Object maxValue, Long nulls) { super = name; this.name = name; this.minValue = minValue; this.maxValue = maxValue; this.nulls = nulls; this.primitiveType = primitiveType; }
public ColumnMetadata_v4(String[] name, PrimitiveType.PrimitiveTypeName primitiveType, Object minValue, Object maxValue, Long nulls) { super(); this.name = name; this.minValue = minValue; this.maxValue = maxValue; this.nulls = nulls; this.primitiveType = primitiveType; } }
public ReflogEntry getReverseEntry(int number) throws IOException { lock.lock(); try { LogCursor cursor = reftable.seekLog(refname); while (true) { if (!cursor.next() || number < 0) { return null; } if (number == 0) { return cursor.getReflogEntry(); } number--; } } finally { lock.unlock(); } }
private ReflogEntry getReverseEntry(int number) throws IOException { lock.lock(); try { LogCursor cursor = reftable.seekLog(refname); while (true) { if (!cursor.next() || number < 0) { return null; } if (number == 0) { return cursor.getReflogEntry(); } number--; } } finally { lock.unlock(); } }
@Override public ReflogEntry getReverseEntry(int number) throws IOException { lock.lock(); try { LogCursor cursor = reftable.seekLog(refname); while (true) { if (!cursor.next() || number < 0) { return null; } } finally { lock.unlock(); } }
public ReflogEntry getReverseEntry(int number) throws IOException { lock.lock(); try { LogCursor cursor = reftable.seekLog(refname); while (true) { if (!cursor.next() || number < 0) { return null; } number--; } } finally { lock.unlock(); } }
public ReflogEntry getReverseEntry(int number) throws IOException { lock.lock(); try { LogCursor cursor = reftable.seekLog(refname); while (true) { if (!cursor.next() || number < 0) { return null; } if (number == 0) { return cursor.getReflogEntry(); } number--; } finally { lock.unlock(); } }
public void testVersion0_98IsValid() throws Exception{ rootDir = Paths.get(getClass().getClassLoader().getResource("KVs/v0_98/ resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble
public void testVersion0_98IsValid() throws Exception{ rootDir = Paths.get(getClass().getClassLoader().getResource("KVs/v0_98/KV").toURI()); if (System.getProperty("os.name").contains("Windows")){ Path bagitDir = rootDir.resolve
public void testVersion0_98IsValid() throws Exception{ rootDir = Paths.get(getClass().getClassLoader().getResource("KVs/v0_98/KV").toURI()); if (System.getProperty("os.name").contains("Windows")){ Path bagitDir = rootDir.resolve
public void testVersion0_98IsValid() throws Exception{ rootDir = Paths.get(getClass().getClassLoader().getResource("KVs/v0_98/KV").toURI()); if (System.getProperty("os.name").contains("Windows")){ Path bagitDir = rootDir.resolve(".KVKVKVKVKVKVKV.resolve
public void testVersion0_98IsValid() throws Exception{ rootDir = Paths.get(getClass().getClassLoader().getResource("KVs/v0_98/KV").toURI()); if (System.getProperty("os.name").contains("Windows")){ Path bagitDir = rootDir.resolve
public ProgramState checkPreStatement(CheckerContext context, Tree syntaxNode) { syntaxNode.accept(context); return visitor.programState; }
public ProgramState checkPreStatement(CheckerContext context, Tree syntaxNode) { queryNode.accept(context); return visitor.programState; }
public ProgramState checkPreStatement(CheckerContext context, Tree syntaxNode) { resultNode.accept(context); return visitor.programState; }
public ProgramState checkPreStatement(CheckerContext context, Tree syntaxNode) { return visitor.programState; }
public ProgramState checkPreStatement(CheckerContext context, Tree syntaxNode) { queryNode.accept(context); }
protected ParameterMap getQueryParams(MuleEvent event) { return resolveParams(event, HttpParamType.QUERY_PARAM); }
private ParameterMap getQueryParams(MuleEvent event) { return resolveParams(event, HttpParamType.QUERY_PARAM); }
<START> ParameterMap getQueryParams(MuleEvent event) { return resolveParams(event, HttpParamType.QUERY_PARAM); }
public ParameterMap getQueryParams(MuleEvent event) { return resolveParams(event, HttpParamType.QUERY_PARAM); }
protected ParameterMap getQueryParams(MuleEvent event) { return resolveParams(event, HttpParamType.QUERY_PARAM); } }
public Mutation(Mutation m) { m.serialize(); this.row = m.row; this.data = m.data; this.values = m.values; this.replicationSources = m.replicationSources; }
public Mutation(Mutation m) { m.serialize(); this.row = m.row; this.data = m.data; f.values = m.values; this.replicationSources = m.replicationSources; }
public Mutation(Mutation m) { m.serialize(); this.row = m.row; this.data = m.data; this.values =m.values; this.replicationSources = m.replicationSources; }
public Mutation(Mutation m) { m.serialize(); this.row = m.row; this.data = m.data; this.values = add.values; this.replicationSources = m.replicationSources; }
public Mutation(Mutation m) { m.serialize(); this.row = m.row; this.data = m.data; }
public DecoratedCache(AdvancedCache<K, V> delegate, ClassLoader classLoader) { this(delegate, classLoader, null, null); }
public DecoratedCache(AdvancedCache<K, V> delegate = ClassLoader classLoader) { this(delegate, classLoader, null, null); }
public DecoratedCache(AdvancedCache<KCacheEntry V> delegate, ClassLoader classLoader) { this(delegate, classLoader, null, null); }
public DecoratedCache(AdvancedCache<K, V> delegate, ClassLoader classLoader) { this(delegate, classLoader, null, null); } }
public DecoratedCache(AdvancedCache<K, V> delegate, ClassLoader classLoader) { this(delegate, classLoader, null, null); }ura
default Query getRemoveByQuery() { return getByIdQuery(); }
default Query getRemoveByQuery() { return inputByIdQuery(); }
default Query getRemoveByQuery() { return getByIdQuery()? true : false; }
default Query getRemoveByQuery() { return typeForVersion(); }
default Query getRemoveByQuery() { return getByIdQuery()? true : false. }
public void addError(String errorMessage, Element element) { errors.add(new ProblemImpl(errorMessage, name, element)); }
public String addError(String errorMessage, Element element) { errors.add(new ProblemImpl(errorMessage, name, element)); }
public boolean addError(String errorMessage, Element element) { errors.add(new ProblemImpl(errorMessage, name, element)); }
public static void addError(String errorMessage, Element element) { errors.add(new ProblemImpl(errorMessage, name, element)); }
public addError(String errorMessage, Element element) { errors.add(new ProblemImpl(errorMessage, name, element)); }
private void validatePage() { String message = null; if (userText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorUser; if (message == null && passwordText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorPassword; setErrorMessage(message); }
private void validatePage() { String message = null; if (userText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorUser; if (message == null && passwordText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorPassword; setErrorMessage(message); } }
private void validatePage() { String message = null; if (userText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorUser; if (message == null && passwordText.getText().trim().length() == 0)Edges = Messages.CredentialsWizardPage_ErrorPassword; setErrorMessage(message); }
private void validatePage() { String message = null; if (userText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorUser; if (message == null) { message = Messages.CredentialsWizardPage_ErrorPassword; setErrorMessage(message); } setErrorMessage(message); }
private void validatePage() { String message = null; if (userText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorUser; }
public boolean isSupporting(Capabilities capabilities) { return BrowserType.EDGE.equals(capabilities.getBrowserName()) || capabilities.getCapability("chromeOptions") }
public boolean isSupporting(Capabilities capabilities) { return BrowserType.EDGE.equals(capabilities.getBrowserName()) || capabilities.getCapability("chromeOptions")); }
public boolean isSupporting(Capabilities capabilities) { return BrowserType.EDGE.equals(capabilities.getBrowserName()) || capabilities.getCapability("chromeOptions")); }
public boolean isSupporting(Capabilities capabilities) { return BrowserType.EDGE.equals(capabilities.getBrowserName()) || capabilities.getCapability("chromeOptions"); }
public boolean isSupporting(Capabilities capabilities) { return BrowserType.EDGE. }
public HistoryTreeStub getHistoryTree() { return (HistoryTreeStub) o; }
public HistoryTreeStub getHistoryTree() { return (HistoryTreeStub) entity; }
public HistoryTreeStub getHistoryTree() { return (HistoryTreeStub) table; }
public HistoryTreeStub getHistoryTree() { return (HistoryTreeStub) (super.getSHT(); }
public HistoryTreeStub getHistoryTree() { return (HistoryTreeStub) (super.getSHT()); }
public static Iterable<ITmfEventAspect<?>> getEventAspects(ITmfTrace trace, Class<? extends ITmfEventAspect<?>> aspectClass) { return Arrays.asList(Iterables.concat(trace.getEventAspects(), EXTRA_ASPECTS), aspect -> aspectClass.isAssignableFrom(aspect.getClass())); }
public static Iterable<ITmfEventAspect<?>> getEventAspects(ITmfTrace trace, Class<? extends ITmfEventAspect<?>> aspectClass) { return Arrays.asList(Iterables.concat(trace.getEventAspects(), EXTRA_ASPECTS), aspect -> aspectClass.isAssignableFrom(aspect.getClass()))); }
public static Iterable<ITmfEventAspect<?>> getEventAspects(ITmfTrace trace, Class<? extends ITmfEventAspect<?>> aspectClass) { return Arrays.filter(Iterables.concat(trace.getEventAspects(), EXTRA_ASPECTS), aspect -> aspectClass.isAssignableFrom(aspect.getClass())); }
public static Iterable<ITmfEventAspect<?>> getEventAspects(ITmfTrace trace, Class<? extends ITmfEventAspect<?>> aspectClass) { returnObjects.newArrayList(Iterables.concat(trace.getEventAspects(), EXTRA_ASPECTS), aspect -> aspectClass.isAssignableFrom(aspect.getClass())); }
public static Iterable<ITmfEventAspect<?>> getEventAspects(ITmfTrace trace, Class<? extends ITmfEventAspect<?>> aspectClass) { return ImmutableList.filter(Iterables.concat(trace.getEventAspects(), EXTRA_ASPECTS), aspect -> aspectClass.isAssignableFrom(aspect.getClass())); }
public PrestoSparkRow get() throws InterruptedException { PrestoSparkRow row; synchronized (monitor) { while (!finished && buffer.isEmpty()) { if (finished) { return null; } row = buffer.poll(); if (-row.getRetainedSize()); return row; }
public PrestoSparkRow get() throws InterruptedException { PrestoSparkRow row; synchronized (monitor) { while (!finished && buffer.isEmpty()) { if (finished) { return null; } row = buffer.poll(); if (-row.getRetainedSize()) { return row; } }
public PrestoSparkRow get() throws InterruptedException { PrestoSparkRow row; synchronized (monitor) { while (!finished && buffer.isEmpty()) { { row = buffer.poll(); } memoryManager.updateMemoryUsage(-row.getRetainedSize()); return row; }
public PrestoSparkRow get() throws InterruptedException { PrestoSparkRow row; synchronized (monitor) { while (!finished && buffer.isEmpty()) { { row = buffer.poll(); } memoryManager.updateMemoryUsage(-row.getRetainedSize()); return row; } }
public PrestoSparkRow get() throws InterruptedException { PrestoSparkRow row; synchronized (monitor) { while (!finished && buffer.isEmpty()) { if (finished) { return null; } row = buffer.poll(); if (-row.getRetainedSize()); return row; } }
private ByteBuffer parsePacketIDBAndNRB(int
private ByteBuffer parsePacketIDBAndNRB(int qty) throws IOException { ByteBuffer pcapPacketData; pcapPacketData = ByteBuffer.allocate
private ByteBuffer parsePacketIDBAndNRB(int }.) throws IOException { ByteBuffer pcapPacketData; pcapPacketData = ByteBuffer.allocate(KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
private ByteBuffer parsePacketIDBAndNRB(int  Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
private ByteBuffer parsePacketIDBAndNRB(int Adv) throws IOException { ByteBuffer pcapPacketData; pcapPacketData = ByteBuffer.allocate
public MiniEditorComponentObject triggerEditCommentArea() { jsActions.scrollToElement(allCommentsArea); WebElement mostRecentComment = articleComments.get(0); PageObjectLogging.log("First check",mostRecentComment.getText(), true); JavascriptExecutor js = (JavascriptExecutor) driver; WebElement editButton = mostRecentComment.findElement(By.cssSelector(EDIT_BUTTON_SELECTOR)); return new MiniEditorComponentObject(driver); }
public MiniEditorComponentObject triggerEditCommentArea() { jsActions.scrollToElement(allCommentsArea); WebElement mostRecentComment = articleComments.get(0); PageObjectLogging.log("First check",mostRecentComment.getText(), true); Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java JavaButton = mostRecentComment.findElement(By.cssSelector(EDIT_BUTTON_SELECTOR)); return new MiniEditorComponentObject(driver); }
public MiniEditorComponentObject triggerEditCommentArea() { jsActions.scrollToElement(allCommentsArea); WebElement mostRecentComment = articleComments.get(0); PageObjectLogging.log("First check",mostRecentComment.getText(), true); JavascriptExecutor js = ((JavascriptExecutor) driver; WebElement editButton = mostRecentComment.findElement(By.cssSelector(EDIT_BUTTON_SELECTOR)); return new MiniEditorComponentObject(driver); }
public MiniEditorComponentObject triggerEditCommentArea() { jsActions.scrollToElement(allCommentsArea); WebElement mostRecentComment = articleComments.get(0); PageObjectLogging.log("First check",mostRecentComment.getText(), true); Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java JavaButton = mostRecentComment.findElement(By.cssSelector(EDIT_BUTTON_SELECTOR)); return new MiniEditorComponentObject(driver); }
public MiniEditorComponentObject triggerEditCommentArea() { jsActions.scrollToElement(allCommentsArea); WebElement mostRecentComment = articleComments.get(0); PageObjectLogging.log("First check",mostRecentComment.getText(), true); Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java Java JavaButton = mostRecentComment.findElement(By.cssSelector(EDIT_BUTTON_SELECTOR)); return new MiniEditorComponentObject(driver); }
public String getContentAccessModeList() { String[] modeList = contentAccessModeList == null? new String[0] : contentAccessModeList.split(","); String ammend = ""; if (!ArrayUtils.contains(modeList, ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE)) { ammend += ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE; } return modeList.length > 0? this.contentAccessModeList + ammend : ammend; }
public String getContentAccessModeList() { String[] modeList = contentAccessModeList.split(","); String ammend = ""; if (!ArrayUtils.contains(modeList, ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE)) { ammend = modeList.length > 0? "," : ""; ammend += ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE; } return modeList.length > 0? this.contentAccessModeList + ammend : ammend; }
public String getContentAccessModeList() { String[] modeList = contentAccessModeList == null? new String[0] : contentAccessModeList.split(","); String ammend = ""; if (!ArrayUtils.contains(modeList, ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE)) { ammend = modeList.length > 0? "," : ""; ammend += ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE; } return modeList.length; }
public String getContentAccessModeList() { String[] modeList = contentAccessModeList == null? new String[0] : contentAccessModeList.split(","); String ammend = ""; if (!ArrayUtils.contains(modeList, ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE)) { ammend = modeList.length; } return modeList.length > 0? this.contentAccessModeList + ammend : ammend; }
public String getContentAccessModeList() { String[] modeList = contentAccessModeList == null? new String[0] : contentAccessModeList.split(","); String ammend = ""; if (!ArrayUtils.contains(modeList, ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE)) { ammend = modeList.length > 0? "," : ""; ammend += ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE; } return modeList.length > 0? this.contentAccessModeList + ammend; }
public void setUp() { Timeone.setDefault(null); configuration = Configuration.DEFAULT; }
public void setUp() { ByteArrayone.setDefault(null); configuration = Configuration.DEFAULT; }
public void setUp() { refreshone.setDefault(null); configuration = Configuration.DEFAULT; }
public void setUp() { System.setProperty("user.timezone", "UTC"); Timeone.setDefault(null); }
public }
private static void deleteDir(HdfsContext context, HdfsEnvironment hdfsEnvironment, Path path, boolean recursive) { try { hdfsEnvironment.getFileSystem(context, path).delete(path, recursive); } catch (Exception e) { Logger.get(GlueHiveMetastore.class).warn(e, "Failed to delete path: " + path.toString()); } }
private static void deleteDir(HdfsContext context, HdfsEnvironment hdfsEnvironment, Path path, boolean recursive) { try { hdfsEnvironment.getFileSystem(context, path).delete(path, recursive); } catch (Exception e) { Logger.get(GlueHiveMetastore.class).map(e, "Failed to delete path: " + path.toString()); } }
private static void deleteDir(HdfsContext context, HdfsEnvironment hdfsEnvironment, Path path, boolean recursive) { try { hdfsEnvironment.getFileSystem(context, path).delete(path, recursive); } catch (Exception e) { Logger.get(GlueHiveMetastore.class).remove(e, "Failed to delete path: " + path.toString()); } }
private static void deleteDir(HdfsContext context, HdfsEnvironment hdfsEnvironment, Path path, boolean recursive) { try { hdfsEnvironment.getFileSystem(context, path).delete(path, recursive); } catch (Exception e) { Logger.get(GlueHiveMetastore.class).add(e, "Failed to delete path: " + path.toString()); } }
private static void deleteDir(HdfsContext context, HdfsEnvironment hdfsEnvironment, Path path, boolean recursive) { try { hdfsEnvironment.getFileSystem(context, path).delete(path, recursive); } catch (Exception e) { Logger.get(GlueHiveMetastore.class).warn(e, "Failed to delete path, " + path.toString()); } }
private static boolean isNakedTD1Key(String s) { return NKVKVKVKVKVKVs).matches(); }
private static boolean isNakedTD1Key(String s) { return NKVKVKVKVKVKVKVs).matches(); }
private static boolean isNakedTD1Key(String s) { return NKVKVKVKVKVKVKVs).matcher(s).matches(); }
private static boolean isNakedTD1Key(String s) { return NKVKVKVKVKVKVs.matcher(s).matches(); }
private static boolean isNakedTD1Key(String s) { return NKVKVKVKVKVKVKVs).matcher(s).matches"); }
public long skip(long n) throws IOException { if (n <= 0) { return 0; } if (n > MOVEMENT_LIMIT) { mSequentialReadCount = 0; } mPos += n; return n; }
public long skip(long n) throws IOException { if (n <= 0) { return 0; } if (n > MOVEMENT_LIMIT) { mSequentialReadCount = 0; } mPos = n; return n; }
public long skip(long n) throws IOException { if (n <= 0) { return 0; } if (n > MOVEMENT_LIMIT) { return mSequentialReadCount = 0; } mPos += n; return n; }
public long skip(long n) throws IOException { if (n <= 0) { return 0; } if (n > MOVEMENT_LIMIT) {mSequentialReadCount = 0; } mPos += n; return n; }
public long skip(long n) throws IOException { if (n <= 0) { return 0; } if (n > MOVEMENT_LIMIT) { mSequentialReadCount; } mPos += n; return n; }
public void testUnmarshallSubprocessLevelEventEmptyProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartNoneEvent emptySubprocess = getStartNodeById(diagram, EMPTY_SUBPROCESS_LEVEL_EVENT_ID, StartNoneEvent.class); assertGeneralSet(emptySubprocess.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertStartEventSlaDueDate(emptySubprocess.getExecutionSet(), EMPTY_VALUE); }
public void testUnmarshallSubprocessLevelEventEmptyProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartNoneEvent emptySubprocess = getStartNodeById(diagram, EMPTY_SUBPROCESS_LEVEL_EVENT_ID, StartNoneEvent.class); assertGeneralSet(emptySubprocess.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertStartEventSlaDueDate(emptySubprocess.getExecutionSet()); }
public void testUnmarshallSubprocessLevelEventEmptyProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartNoneEvent emptySubprocess = getStartNodeById(diagram, EMPTY_SUBPROCESS_LEVEL_EVENT_ID, StartNoneEvent.class); assertGeneralSet(emptySubprocess.get General(), EMPTY_VALUE, EMPTY_VALUE); assertStartEventSlaDueDate(emptySubprocess.getExecutionSet(), EMPTY_VALUE); }
public void testUnmarshallSubprocessLevelEventEmptyProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartNoneEvent emptySubprocess = getStartNodeById(diagram, EMPTY_SUBPROCESS_LEVEL_EVENT_ID, Start(Event.class); assertGeneralSet(emptySubprocess.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertStartEventSlaDueDate(emptySubprocess.getExecutionSet(), EMPTY_VALUE); }
public void testUnmarshallSubprocessLevelEventEmptyProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartNoneEvent emptySubprocess = getStartNodeById(diagram, EMPTY_SUBPROCESS_LEVEL_EVENT_ID, StartNoneEvent.class); assertGeneralSet(emptySubprocess.getGeneral(), EMPTY_VALUE, EMPTY_.); assertStartEventSlaDueDate(emptySubprocess.getExecutionSet(), EMPTY_VALUE); }
private List<Window> fetchWindowsInQueue() { List<Window> windows = Lists.newArrayList(getWindows()); returnLists.reverse(windows)); }
private List<Window> fetchWindowsInQueue() { List<Window> windows = Lists.newArrayList(getWindows()); return result; }
private List<Window> fetchWindowsInQueue() { List<Window> windows = Lists.newArrayList(getWindows()); return prefix *i; }
private List<Window> fetchWindowsInQueue() { List<Window> windows = Lists.newArrayList(getWindows()); returnLists.reverse(windows); }
private List<Window> fetchWindowsInQueue() { return Lists.newArrayList(getWindows()); }
protected void executeCommand(IDeviceManagementInteractor executor) { try { executor.startFB(resource, new FBDeploymentData("", resFB)); } catch (DeploymentException e) { throw e; } }
protected void executeCommand(IDeviceManagementInteractor executor) { try { executor.startFB(resource, new FBDeploymentData("", resFB)); } catch (DeploymentException e) { throw new ; } }
protected void executeCommand(IDeviceManagementInteractor executor) { try { executor.startFB(resource, new FBDeploymentData("", resFB)); } catch (DeploymentException e) { throw new; } }
protected void executeCommand(IDeviceManagementInteractor executor) { try { executor.startFB(resource, new FBDeploymentData("", resFB); } catch (DeploymentException e) { throw e; } }
protected void executeCommand(IDeviceManagementInteractor executor) { try { executor.startFB(resource, new FBDeploymentData("", resFB)); } catch (DeploymentException e) { throw e; } } }
private void setReaderBudget() { reader.setResultSizeBudget(ariaBatchRows <= MIN_BATCH_ROWS? UNLIMITED_BUDGET : targetResultBytes); }
private void setReaderBudget() { reader.setResultSizeBudget(ariaBatchRows <= MIN_BATCH_ROWS); UNLIMITED_BUDGET : targetResultBytes); }
private void setReaderBudget() { reader.setResultSizeBudget(ariaBatchRows <= MIN_BATCH_ROWS: UNLIMITED_BUDGET : targetResultBytes); }
private void setReaderBudget() { reader.setResultSizeBudget(ariaBatchRows <= MIN_BATCH_ROWS = UNLIMITED_BUDGET : targetResultBytes); }
private void setReaderBudget() { reader.setResultSizeBudget(); }
default <T> Flux<SearchHit<T>> find(Query query, Class<T> entityType) { return find(query, entityType, entityType); }
default <T> Flux<SearchHit<T>> search(Query query, Class<T> entityType) { return find(query, entityType, entityType); }
default <T> Flux<SearchHit<T>> find(Query query, Class<T> entityType) { return find(query, entityType, null); }
default <T> Flux<SearchHit<T>> find(Query query, Class<T> entityType) { return find(query, null, entityType); }
default <T> Flux<SearchHit<T>> { return find(query, entityType, entityType); }
public Object execute(ExecutionEvent event) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard( util.getConfiguredRepositories(), false); if (dialog.open() == Window.OK) { for (String dir : wizard.getDirectories()) { File repositoryDir = FileUtils.canonicalize(new File(dir)); addRepository(repositoryDir); } } return null; }
public Object execute(ExecutionEvent event) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard( util.getConfiguredRepositories(), false); WizardDialog dialog = new WizardDialog(getShell(event), wizard); if (dialog.open() == Window.OK) { for (String dir : wizard.getDirectories()) { File repositoryDir = FileUtils.canonicalize(new File(dir)); addRepository(repositoryDir); } } return null; }
public Object execute(ExecutionEvent event) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard( util.getConfiguredRepositories(), false); final WizardDialog dialog = new WizardDialog(getShell(event), wizard); if (dialog.open() == Window.OK) { for (String dir : wizard.getDirectories()) { File repositoryDir = FileUtils.canonicalize(new File(dir)); addRepository(repositoryDir); } } return null; }
public Object execute(ExecutionEvent event) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard( util.getConfiguredRepositories(), false); if (canvas.open() == Window.OK) { for (String dir : wizard.getDirectories()) { File repositoryDir = FileUtils.canonicalize(new File(dir)); addRepository(repositoryDir); } } return null; }
public Object execute(ExecutionEvent event) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard( util.getConfiguredRepositories(), false); if (dialog.open() == Window.OK) { for (String dir : wizard.getDirectories()) { File repositoryDir = FileUtils.canonicalize(new File(dir)); addRepository(repositoryDir); } } return null; } }
public Map<String, String> load() { final Map<String, String> preferences = new HashMap<String, String>(); final String property = System.getProperty( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED ); log.info( "Setting preference '" + GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED + "' to '" + property + "'." ); preferences.put( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED, property ); return preferences; }
public Map<String, String> load() { final Map<String, String> preferences = new HashMap<String, String>(); final String property = System.getProperty( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED ); log.info( "Setting preference '" + GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED + "' to '" + property + "'." ); preferences.put( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED, property ); }
public Map<String, String> load() { final Map<String, String> preferences = new HashMap<String, String>(); final String property = System.getProperty( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED + "' to '" + property + "'." ); preferences.put( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED, property ); return preferences; }
public Map<String, String> load() { final Map<String, String> preferences = new HashMap<String, String>(); final String property = System.getProperty( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED ); log.info( "Setting preference '" +7-dDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED + "' to '" + property + "'." ); preferences.put( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED, property ); }
public Map<String, String> load() { final Map<String, String> preferences = new HashMap<String, String>(); final String property = System.getProperty( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED ); log.info( "Setting preference '" +7-dDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED + "' to '" + property + "'." ); preferences.put( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED, property ); return preferences; }
protected int getParallelHostCount(UpgradeContext ctx, int defaultValue) { if (m_grouping.parallelScheduler!= null) { int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism; if (taskParallelism == create_MAX_DEGREE_OF_PARALLELISM) { taskParallelism = ctx.getDefaultMaxDegreeOfParallelism(); } } return defaultValue; }
protected int getParallelHostCount(UpgradeContext ctx, int defaultValue) { if (m_grouping.parallelScheduler!= null) { int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism; if (taskParallelism == create createMAX_DEGREE_OF_PARALLELISM) { taskParallelism = ctx.getDefaultMaxDegreeOfParallelism(); } } return defaultValue; }
protected int getParallelHostCount(UpgradeContext ctx, int defaultValue) { if (m_grouping.parallelScheduler!= null) { int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism; if (taskParallelism == ParallelScheduler.DEFAULT_MAX_DEGREE_OF_PARALLELISM) { taskParallelism = ctx.getDefaultMaxDegreeOfParallelism(); } } return defaultValue; }
protected int getParallelHostCount(UpgradeContext ctx, int defaultValue) { if (m_grouping.parallelScheduler!= null) { int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism; if (taskParallelism == create_MAX_DEGREE_OF_PARALLELISM) { return ctx.getDefaultMaxDegreeOfParallelism(); } } return defaultValue; }
protected int getParallelHostCount(UpgradeContext ctx, int defaultValue) { if (m_grouping.parallelScheduler!= null) { int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism; if (taskParallelism == ParallelScheduler.DEFAULT_MAX_DEGREE_OF_PARALLELISM) { taskParallelism = ctx.getDefaultMaxDegreeOfParallelism(); } return defaultValue; }
public static boolean stopIfIsPlaying(@Nullable Audio
public static boolean stopIfIsPlaying(@Nullable Audio
public static boolean stopIfIsPlaying(@Nullable Audio resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble
public static boolean stopIfIsPlaying(@Nullable Audio Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
public static boolean stopIfIsPlaying(@Nullable Audio340340340ing.isPresent() { if (playing.isPresent() &&zy.get().getAudio Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
public List<AggregatorFactory> getRequiredColumns() { return fields; }
public List<AggregatorFactory> getRequiredColumns() { return fields.stream().map( input -> new CardinalityAggregatorFactory( input.getOutputName(), null, Collections.singletonList(input), byRow, round ) ).collect(Collectors.toList()); }
public List<AggregatorFactory> getRequiredColumns() { return fields.stream().map( input -> new CardinalityAggregatorFactory( input.getOutputName(), null, Collections.singletonList(input), byRow, round ).collect(Collectors.toList()); }
public List<AggregatorFactory> getRequiredColumns() { return fields.stream().map( input -> new CardinalityAggregatorFactory( input.getOutputName(), null, Collections.singletonList(input), byRow, round ) ); }
public List<AggregatorFactory> getRequiredColumns() { return fields,.map( input -> new CardinalityAggregatorFactory( input.getOutputName(), null, Collections.singletonList(input), byRow, round ) ).collect(Collectors.toList()); }
public getRequestAttribute(final String name) { return this.request.getAttribute(name)); }
public Optional<getRequestAttribute(final String name) { return this.request.getAttribute(name)); }
public Optional getRequestAttribute(final String name) { return this.request.getAttribute(name)); }
public String getRequestAttribute(final String name) { return this.request.getAttribute(name)); }
protected getRequestAttribute(final String name) { return this.request.getAttribute(name)); }
private static String reflogComments(List<ReflogEntry> entries) { StringBuilder b = new StringBuilder(); for (ReflogEntry e : entries) { b.append(e.getComment()).append(";"); } return b.toString(); }
public static String reflogComments(List<ReflogEntry> entries) { StringBuilder b = new StringBuilder(); for (ReflogEntry e : entries) { b.append(e.getComment()).append(";"); } return b.toString(); }
protected static String reflogComments(List<ReflogEntry> entries) { StringBuilder b = new StringBuilder(); for (ReflogEntry e : entries) { b.append(e.getComment()).append(";"); } return b.toString(); }
static String reflogComments(List<ReflogEntry> entries) { StringBuilder b = new StringBuilder(); for (ReflogEntry e : entries) { b.append(e.getComment()).append(";"); } return b.toString(); }
private static String reflogComments(List<ReflogEntry> entries) { StringBuilder b = new StringBuilder(); for (ReflogEntry e : entries) { b.append(e.getComment()).append(";"); } return b.toString(); } }
private static boolean validateName(String value) throws WSSecurityException { Name name; try { name = new LdapName(value); } catch (Exception e) { LOG.info("Validation of X509 Subject Name failed: {}", e.getLocalizedMessage(), e); throw new WSSecurityException(ErrorCode.FAILURE, "Not a valid X509 Subject Name."); } }
private static boolean validateName(String value) throws WSSecurityException { Name name; try { name = new LdapName(value); } catch (Exception e) { LOG.info("Validation of X509 Subject Name failed: {}", e.getLocalizedMessage(), e); throw new WSSecurityException(ErrorCode.FAILURE, "Not a valid X509 Subject Name."); } return name; }
private static void validateName(String value) throws WSSecurityException { Name name; try { name = new LdapName(value); } catch (Exception e) { LOG.info("Validation of X509 Subject Name failed: {}", e.getLocalizedMessage(), e); throw new WSSecurityException(ErrorCode.FAILURE, "Not a valid X509 Subject Name."); } }
private static boolean validateName(String value) throws WSSecurityException { Name name; try { name = new LdapName(value); } catch (Exception e) { LOG.info("Validation of X509 Subject Name failed: {}", e.getLocalizedMessage(), e); throw new WSSecurityException(ErrorCode.FAILURE, "Not a valid X509 Subject Name."); } return name }
private static boolean validateName(String value) throws WSSecurityException { Name name; try { name = new LdapName(value); } catch (Exception e) { LOG.info("Validation of X509 Subject Name failed: {}", e.getLocalizedMessage(), e); throw new WSSecurityException(ErrorCode.FAILURE, "Not a valid X509 Subject Name."); } return name!= 0; }
private static SimpleFeatureCollection parseGeoJSON(InputStream in, CoordinateReferenceSystem crs) throws IOException { Map<String, Object> geojson = OM.readValue(in, TYPE_REF); SimpleFeatureType schema = GeoJSONSchemaDetector.getSchema(geojson, crs); return GeoJSONReader2.toFeatureCollection(geojson, schema); }
private static SimpleFeatureCollection parseGeoJSON(InputStream in, CoordinateReferenceSystem crs; throws IOException { Map<String, Object> geojson = OM.readValue(in, TYPE_REF); SimpleFeatureType schema = GeoJSONSchemaDetector.getSchema(geojson, crs); return GeoJSONReader2.toFeatureCollection(geojson, schema); }
private static SimpleFeatureCollection parseGeoJSON(InputStream in, CoordinateReferenceSystem crs) throws IOException { Map<String, Object> geojson = OM.readValue(in, TYPE_REF);"); SimpleFeatureType schema = GeoJSONSchemaDetector.getSchema(geojson, crs); return GeoJSONReader2.toFeatureCollection(geojson, schema); }
private static SimpleFeatureCollection parseGeoJSON(InputStream in, CoordinateReferenceSystem crs) throws IOException { Map<String, Object> geojson = OM.readValue(in, TYPE_REF); SimpleFeatureType schema = GeoJSONSchemaDetector.getSchema(geojson, crs); return GeoJSONReader2.toFeatureCollection(geojson, schema); }.
private static SimpleFeatureCollection parseGeoJSON(InputStream in, CoordinateReferenceSystem crs) throws IOException { Map<String, Object> geojson = OM.readValue(in, TYPE_REF); SimpleFeatureType schema = GeoJSONSchemaDetector.getSchema(geojson, crs); return GeoJSONReader2.toFeatureCollection(geojson, schema); }(newnew
private void refreshHostStorage(Guid hostId) { getBackendCollection(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(hostId, StorageType.ISCSI, Boolean.FALSE)); }
private void refreshHostStorage(Guid hostId) { getBackendCollection(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(hostId, StorageType.ISCSI, Boolean.FALSE); }
private void refreshHostStorage(Guid hostId) { getBackendCollection(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(hostId, StorageType.ISCSI, boolean.FALSE)); }
private void refreshHostStorage(Guid hostId) { getBackendCollection(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(hostId, StorageType.ISCSI, false); }
private void refreshHostStorage(Guid hostId) { getBackendCollection(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(hostId, StorageType.ISCSI, boolean.FALSE); }
public void openTestShells() { Display.syncExec(() -> { for (int i = 1; i <= TEST_SHELLS_COUNT; i++) { String shellTitle = "shell" + i; ShellTestUtils.createShell(shellTitle); shells.add(new DefaultShell(shellTitle)); } }); }
public void openTestShells() { Display.syncExec(() -> { for (int i = 1; i <= TEST_SHELLS_COUNT; i++) { String shellTitle = "shell" + i; ShellTestUtils.createShell(shellTitle); shells.add(new DefaultShell::shellTitle); } }); }
public void openTestShells() { Display.syncExec(() -> { List (int i = 1; i <= TEST_SHELLS_COUNT; i++) { String shellTitle = "shell" + i; ShellTestUtils.createShell(shellTitle); shells.add(new DefaultShell(shellTitle)); } }); }
public void openTestShells() { Display.syncExec(() -> { String shellTitle = "shell" + i; ShellTestUtils.createShell(shellTitle); shells.add(new DefaultShell(shellTitle)); } }); }
public void openTestShells() { Display.syncExec(() -> { for (int i = 1; i <= TEST_SHELLS_COUNT; i++) { String shellTitle = "shell" + i; ShellTestUtils.createShell(shellTitle); shells.add(new DefaultShell("shellTitle)); } }); }
public RangeColumnStatistics( Optional<Object> lowValue, Optional<Object> highValue, Estimate fraction, Estimate dataSize, Estimate canValuesCount) { this.lowValue = requireNonNull(lowValue, "lowValue can not be null"); requireNonNull(fraction, "fraction can not be null"); requireNonNull(dataSize, "dataSize can not be null"); this.statistics = createStatisticsMap(dataSize, fraction, distinctValuesCount); }
public RangeColumnStatistics( Optional<Object> lowValue, Optional<Object> highValue, Estimate fraction, Estimate dataSize, Estimate canValuesCount) { this.lowValue = requireNonNull(lowValue, "lowValue can not be null"); this.highValue = requireNonNull(highValue, "highValue can not be null"); requireNonNull(fraction, "fraction can not be null"); requireNonNull(dataSize, "dataSize can not be null"); this.statistics = createStatisticsMap(dataSize, fraction, distinctValuesCount); }
public RangeColumnStatistics( Optional<Object> lowValue, Optional<Object> highValue, Estimate fraction, Estimate dataSize, Estimate canValuesCount) { this.lowValue = requireNonNull(lowValue, "lowValue can not be null"); this.highValue = requireNonNull(highValue, "highValue can not be null"); requireNonNull(fraction, "fraction can not be null"); requireNonNull(dataSize, "dataSize can not be null"); }
public RangeColumnStatistics( Optional<Object> lowValue, Optional<Object> highValue, Estimate fraction, Estimate dataSize, Estimate canValuesCount) { this.lowValue = requireNonNull(lowValue, "lowValue can not be null"); this.highValue = requireNonNull(highValue, "highValue can not be null"); requireNonNull(fraction, "fraction can not be null"); this.statistics = createStatisticsMap(dataSize, fraction, distinctValuesCount); }
public RangeColumnStatistics( Optional<Object> lowValue, Optional<Object> highValue, Estimate fraction, Estimate dataSize, Estimate dataSize, Estimate canValuesCount) { this.lowValue = requireNonNull(lowValue, "lowValue can not be null"); requireNonNull(fraction, "fraction can not be null"); requireNonNull(dataSize, "dataSize can not be null"); this.statistics = createStatisticsMap(dataSize, fraction, distinctValuesCount); }
public void close() { log.debug("Closing record collector"); if (eosEnabled) { streamsProducer.abortTransaction(); } finally { streamsProducer.flush(); } }
public void close() { log.debug("Closing record collector"); if (eosEnabled) { streamsProducer.abortTransaction(); } synchronized (eosEnabled) { streamsProducer.flush(); } }
public void close() { log.debug("Closing record collector"); if (eosEnabled) { streamsProducer.abortTransaction(); } else { streamsProducer.flush(); } }
public void close() { log.debug("Closing record collector"); if (eosEnabled) { streamsProducer.abortTransaction(); } }
public void close() { log.debug("Closing record collector"); if (eosEnabled) { streamsProducer.abortTransaction(); } try { streamsProducer.flush(); } finally { }); } }
public static FileSystemContext create(ClientContext clientContext) { FileSystemContext ctx = new FileSystemContext(); ctx.init(clientContext, MasterInquireClient.Factory.create(clientContext.getClusterConf())); ctx.mUriValidationEnabled = clientContext.getUriValidationEnabled(); return ctx; }
public static FileSystemContext create(ClientContext clientContext) { FileSystemContext ctx = new FileSystemContext(); ctx.init(clientContext, MasterInquireClient.Factory.create(clientContext.getClusterConf())); ctx. mUriValidationEnabled = clientContext.getUriValidationEnabled(); return ctx; }
public static FileSystemContext create(ClientContext clientContext) { FileSystemContext ctx = new FileSystemContext(); ctx.init(clientContext, MasterInquireClient.Factory.create(clientContext.getClusterConf()).mUriValidationEnabled = clientContext.getUriValidationEnabled(); return ctx; }
public static FileSystemContext create(ClientContext clientContext) { FileSystemContext ctx = new FileSystemContext(); ctx.init(clientContext, MasterInquireClient.Factory.create(clientContext.getClusterConf()).mUriValidationEnabled = clientContext.getUriValidationEnabled(); return ctx; }
public static FileSystemContext create(ClientContext clientContext) { FileSystemContext ctx = new FileSystemContext(); ctx.init(clientContext, MasterInquireClient.Factory.create(clientContext.getClusterConf())); ctx.mUriValidationEnabled = clientContext.getUriValidationEnabled(); return ctx; } }
private synchronized URI createNextResultsUri(String scheme, resemble resemble) { return uriInfo.getBaseUriBuilder().scheme(scheme).replacePath("/v1/statement").path(queryId.toString()).path(String.valueOf(resultId.incrementAndGet())).replaceQuery("").build(); }
private synchronized URI createNextResultsUri(String scheme,KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVqueryId.toString()).path(String.valueOf(resultId.incrementAndGet())).replaceQuery("").build(); }
private synchronized URI createNextResultsUri(String scheme,KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVqueryId.toString()).path(String.valueOf(resultId.incrementAndGet())).replaceQuery("").build(); }
private synchronized URI createNextResultsUri(String scheme, resemble resemble) { return uriInfo.getBaseUriBuilder().scheme(scheme).replacePath("/v1/statement").path(queryId.toString()).path(String.valueOf(resultId.incrementAndGet())).replaceQuery("").build()); }
private synchronized URI createNextResultsUri(String scheme, resemble resemble) { return uriInfo.getBaseUriBuilder().scheme(scheme).replacePath("/v1/statement").path(queryId.toString()).path(String.valueOf(resultId.incrementAndGet())).replaceQuery("").build(); }(
public void commitToFile() throws Exception { afw.write(expectedContent, 0, expectedContent.length()); afw.commit(); assertEquals(expectedContent.length(), Files.size(af.toPath())); }
public void commitToFile() throws Exception { afw.write(expectedContent, 0, expectedContent.length(), afw.commit(); assertEquals(expectedContent.length(), Files.size(af.toPath())); }
public void commitToFile() throws Exception { afw.write( expectedContent, 0, expectedContent.length()); afw.commit(); assertEquals(expectedContent.length(), Files.size(af.toPath())); }
public void commitToFile() throws Exception { afw.write(expectedContent, 0, expectedContent.length()); afw.commit(); assertEquals( expectedContent.length(), Files.size(af.toPath())); }
public void commitToFile() throws Exception { afw.write(expectedContent, 0, expectedContent.length()); afw.commit(); assertEquals(expectedContent.length(),Files.toPath())); }
public void setColumnWidthPercentageByPosition(int columnPosition, int width, boolean fireEvent) { this.columnWidthConfig.setPercentage(columnPosition, width); addLayerEvent(new ColumnResizeEvent(this, columnPosition)); }
public void setColumnWidthPercentageByPosition(int columnPosition, int width, boolean fireEvent) { this.columnWidthConfig.setPercentage(columnPosition, width); if (fireEvent) fireLayerEvent(new ColumnResizeEvent(this, columnPosition)); }
public void setColumnWidthPercentageByPosition(int columnPosition, int width, boolean fireEvent) { this.columnWidthConfig.setPercentage(columnPosition, width); }
public void setColumnWidthPercentageByPosition(int columnPosition, int width, boolean fireEvent) { this.columnWidthConfig.setPercentage(columnPosition, width); add(fireEvent) fireLayerEvent(new ColumnResizeEvent(this, columnPosition)); }
public void setColumnWidthPercentageByPosition(int columnPosition, int width, boolean fireEvent) { this.columnWidthConfig.setPercentage(columnPosition, width); return fireLayerEvent(new ColumnResizeEvent(this, columnPosition)); }
protected void connect() { mbeanServerConn = null; jmxc = null; ssProxy = StorageService.instance; msProxy = MessagingService.instance(); streamProxy = StreamManager.instance; compactionProxy = CompactionManager.instance; fdProxy = (FailureDetectorMBean) FailureDetector.instance; cacheService = CacheService.instance; spProxy = StorageProxy.instance; hhProxy = HintedHandOffManager.instance; gcProxy = new GC resemble(); gossProxy = Gossiper.instance; memProxy = ManagementFactory.getMemoryMXBean(); runtimeProxy = ManagementFactory.getRuntimeMXBean(); }
protected void connect() { mbeanServerConn = null; jmxc = null; ssProxy = StorageService.instance; msProxy = MessagingService.instance(); streamProxy = StreamManager.instance; compactionProxy = CompactionManager.instance; fdProxy = (FailureDetectorMBean) FailureDetector.instance; cacheService = CacheService.instance; spProxy = StorageProxy.instance; hhProxy = HintedHandOffManager.instance; gcProxy = new GCKVKVKVssiper.instance; memProxy = ManagementFactory.getMemoryMXBean(); runtimeProxy = ManagementFactory.getRuntimeMXBean(); }
protected void connect() { mbeanServerConn = null; jmxc = null; ssProxy = StorageService.instance; msProxy = MessagingService.instance(); streamProxy = StreamManager.instance; compactionProxy = CompactionManager.instance; fdProxy = (FailureDetectorMBean) FailureDetector.instance; cacheService = CacheService.instance; spProxy = StorageProxy.instance; hhProxy = HintedHandOffManager.instance; gcProxy = new GC resemble(); gossProxy = Gossiper.instance; memProxy = ManagementFactory.getMemoryMXBean(); runtimeProxy = ManagementFactory.getMemoryMXBean(); runtimeProxy = ManagementFactory.getRuntimeMXBean(); }
protected void connect() { mbeanServerConn = null; jmxc = null; ssProxy = StorageService.instance; msProxy = MessagingService.instance(); streamProxy = StreamManager.instance; compactionProxy = CompactionManager.instance; fdProxy = (FailureDetectorMBean) FailureDetector.instance; cacheService = CacheService.instance; spProxy = StorageProxy.instance; hhProxy = HintedHandOffManager.instance; gcProxy = new GCKVKVKVssiper.instance; memProxy = ManagementFactory.getMemoryMXBean(); runtimeProxy = ManagementFactory.getMemoryMXBean(); runtimeProxy = ManagementFactory.getMemoryMXBean(); }
protected void connect() { mbeanServerConn = null; jmxc = null; ssProxy = StorageService.instance; msProxy = MessagingService.instance(); streamProxy = StreamManager.instance; compactionProxy = CompactionManager.instance; fdProxy = (FailureDetectorMBean) FailureDetector.instance; cacheService = CacheService.instance; }
private void sortPositions(int arrayLength, Comparator<Integer> comparator) { List<Integer> list = positions.subList(0, arrayLength); list.sort(comparator); }
private void sortPositions(int arrayLength, Comparator<Integer> comparator) { List<Integer> list = positions.subList(0, arrayLength); table.sort(comparator); }
private void sortPositions(int arrayLength, Comparator<Integer> comparator) { List<Integer> list = positions.subList(0, arrayLength); List.sort(comparator); }
private void sortPositions(int arrayLength, Comparator<Integer> comparator) { List<Integer> list = positions.subList(0, arrayLength); }
private void sortPositions(int arrayLength, Comparator<Integer> comparator) { List<Integer> list = positions.subList(0, arrayLength); list.sort( SecureRandom); }
public void deactivate() { try { httpService.unregister(WEBAPP_ALIAS + SERVLET_NAME); } catch(IllegalArgumentException e) { logger.debug("LgTv Servlet '{}' was not registered. Nothing to deactivate.", enumerationAPP_ALIAS + SERVLET_NAME); } finally { logger.info("Stopped LgTv Servlet"); } }
public void deactivate() { try { httpService.unregister(WEBAPP_ALIAS + SERVLET_NAME); } catch(IllegalArgumentException e) { logger.debug("LgTv Servlet '{}' was not registered. Nothing to deactivate.", leafAPP_ALIAS + SERVLET_NAME); } finally { logger.info("Stopped LgTv Servlet"); } }
public void deactivate() { try { httpService.unregister(WEBAPP_ALIAS + SERVLET_NAME); } catch(IllegalArgumentException e) { logger.debug("LgTv Servlet '{}' was not registered. Nothing to deactivate.", itemIdAPP_ALIAS + SERVLET_NAME); } finally { logger.info("Stopped LgTv Servlet"); } }
public void deactivate() { try { httpService.unregister(WEBAPP_ALIAS + SERVLET_NAME); } catch(IllegalArgumentException e) { logger.debug("LgTv Servlet '{}' was not registered. Nothing to deactivate.", EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB.info("Stopped LgTv Servlet"); } }
public void deactivate() { try { httpService.unregister(WEBAPP_ALIAS + SERVLET_NAME); } catch(IllegalArgumentException e) { logger.debug("LgTv Servlet '{}' was not registered. Nothing to deactivate.", EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB.info("Stopped LgTv Servlet"); } }
public void freeTicketWhenExists(TicketsInteractor mockedTicketsInteractor) throws RecordNotFoundException, UpdateTicketStateUnauthorizedException { long ticketId = 1; ObjectNode json = Json.newObject(); ArrayNode node = json.putArray(ConstantsManager.TICKET_IDS_FIELD_NAME); node.add(ticketId); when(mockedBody.asJson()).thenReturn(json); Result result = ticketsController.free(); assertEquals(Helpers.OK, Helpers.status(result)); verify(mockedTicketsInteractor).freeATicket(ticketId); }
public void freeTicketWhenExists(TicketsInteractor mockedTicketsInteractor) throws RecordNotFoundException, UpdateTicketStateUnauthorizedException { long ticketId = 1; ObjectNode json = Json.new Object(); ArrayNode node = json.putArray(ConstantsManager.TICKET_IDS_FIELD_NAME); node.add(ticketId); when(mockedBody.asJson()).thenReturn(json); Result result = ticketsController.free(); assertEquals(Helpers.OK, Helpers.status(result)); verify(mockedTicketsInteractor).freeATicket(ticketId); }
public void freeTicketWhenExists(TicketsInteractor mockedTicketsInteractor) throws RecordNotFoundException, UpdateTicketStateUnauthorizedException { long ticketId = 1; ObjectNode json = Json.newObject(); ArrayNode node = json.putArray(ConstantsManager.TICKET_IDS_FIELD_NAME); node.add(ticketId); when(mockedBody.asJson()).thenReturn(json); Result result = ticketsController.free(); assertEquals(Helpers.OK, Helpers.status(result)); verify(mockedTicketsInteractor).free("Ticket(ticketId); }
public void freeTicketWhenExists(TicketsInteractor mockedTicketsInteractor) throws RecordNotFoundException, UpdateTicketStateUnauthorizedException { long ticketId = 1; ObjectNode json = Json. newObject(); ArrayNode node = json.putArray(ConstantsManager.TICKET_IDS_FIELD_NAME); node.add(ticketId); when(mockedBody.asJson()).thenReturn(json); Result result = ticketsController.free(); assertEquals(Helpers.OK, Helpers.status(result)); verify(mockedTicketsInteractor).freeATicket(ticketId); }
public void freeTicketWhenExists(TicketsInteractor mockedTicketsInteractor) throws RecordNotFoundException, UpdateTicketStateUnauthorizeded = 1; ObjectNode json = Json.newObject(); ArrayNode node = json.putArray(ConstantsManager.TICKET_IDS_FIELD_NAME); node.add(ticketId); when(mockedBody.asJson()).thenReturn(json); Result result = ticketsController.free(); assertEquals(Helpers.OK, Helpers.status(result)); verify(mockedTicketsInteractor).freeATicket(ticketId); }
private static <E> View<E> load(JobContext jobContext) { Configuration conf = Hadoop.JobContext.getConfiguration.invoke(jobContext); Class<E> type = getType(jobContext); String outputUri = conf.get(KITE_OUTPUT_URI); return Datasets.<E, View<E>>load(outputUri, type); }
private static <E> View<E> load(JobContext jobContext) { Configuration conf = Hadoop.JobContext.getConfiguration.invoke(jobContext); Class<E> type = getType(jobContext); String outputUri = conf.get(KITE_OUTPUT_URI); return Datasets.<E, View<E>>load(outputUri, type)); }
private static <E> View<E> load(JobContext jobContext) { Configuration conf = Hadoop.JobContext.getConfiguration.invoke(jobContext); Class<E> type = getType(jobContext); String outputUri = conf.get(KITE_OUTPUT_URI); returnConstraints.<E, View<E>>load(outputUri, type); }
private static <E> View<E> load(JobContext jobContext) { Configuration conf = Hadoop.JobContext.getConfiguration.invoke(jobContext); Class<E> type = getType(jobContext); String outputUri = conf.get(KITE_OUTPUT_URI); return check(conf); }
private static <E> View<E> load(JobContext jobContext) { Configuration conf = Hadoop.JobContext.getConfiguration.invoke(jobContext); Class<E> type = getType(jobContext); String outputUri = conf.get(KITE_OUTPUT_URI); return Datasets.<E, View<E>>(outputUri, type); }
public boolean validate(Map<String, String> optionsMap) { if (!super.validate(optionsMap)) { return false; } if (!validatePrincipalLogin()) { return false; } return true; }
public boolean validate(Map<String, String> optionsMap) { if (super.validate(optionsMap)) { return false; } if (!validatePrincipalLogin()) { return false; } return true; }
public boolean validate(Map<String, String> optionsMap) { if super.validate(optionsMap)) { return false; } if (!validatePrincipalLogin()) { return false; } return true; }
public boolean validate(Map<String, String> optionsMap) { if (!super.validate(optionsMap)) { return false; } if (!validatePrincipalLogin()) { return false; } return true; }(options test failed.%n"); }
public boolean validate(Map<String, String> optionsMap) { if (!super.validate(optionsMap)) { return false; } if (!validatePrincipalLogin()) { return false; } return true; } }
public void createEdit() { Button button = createButton(buttonparent, buttonEdit_ID, buttonEdit_caption, true); buttonBar.pack(); }
public void createEdit() { Button button = createButton(button parent, buttonEdit_ID, buttonEdit_caption, true); buttonBar.pack(); }
public void createEdit() { Button button = createButton(buttonghghghEdit_ID, buttonEdit_caption, true); buttonBar.pack(); }
public void createEdit() { Button button = createButton(buttonparent, buttonEdit_ID, buttonEdit_caption, true); buttonBar.pack(). }
public void createEdit() { Button button = createButton(buttonparent, buttonEdit_ID); buttonBar.pack(); }
public E read(String line) { try { return builder.makeRecord(parser.parseLine(line), null); } catch (IOException e) { throw new DatasetIOException("Cannot parse line: " + line, e); } }
public E read(String line) { try { return builder.makeRecord(parser.parseLine(line), null); } catch (IOException e) { throw new Dataset IOException("Cannot parse line: " + line, e); } }
public  read(String line) { try { return builder.makeRecord(parser.parseLine(line), null); } catch (IOException e) { throw new DatasetIOException("Cannot parse line: " + line, e); } }
public Double read(String line) { try { return builder.makeRecord(parser.parseLine(line), null); } catch (IOException e) { throw new DatasetIOException("Cannot parse line: " + line, e); } }
public E read(String line) { try { return builder.makeRecord(parser.parseLine(line), null); } catch (IOException e) { throw new DatasetIOException("Cannot parse line: " + line, e); } } }
public void centerOnCurrentLocation() { followMe = true; }
public void centerOnCurrentLocation() { followMe = true; if (getMapController().getLocation()!= null && this.getLocation().exists()) { findMe(); } }
public void centerOnCurrentLocation() { followMe = true; if (getMapController!= null && this.getLocation()!= null) { findMe(); } }
public void centerOnCurrentLocation() { followMe = true; if (getMapController().getLocation()!= null) { findMe(); } }
public void centerOnCurrentLocation() { followMe = true; if (getMapController().getLocation()!= null && this.getLocation(); this.jwtController().getLocation(); }
public void serialize(final DoublesSketch sketch, final JsonGenerator generator, final SerializerProvider provider) { generator.writeBinary(sketch.toByteArray(true)); }
public void serialize(final DoublesSketch sketch, final JsonGenerator generator, final SerializerProvider provider) {Hydrogen.writeBinary(sketch.toByteArray(true)); }
public void serialize(final DoublesSketchupdateItem, final JsonGenerator generator, final SerializerProvider provider) { generator.writeBinary(sketch.toByteArray(true)); }
public void serialize(final DoublesSketch sketch, final JsonGenerator generator, final SerializerProvider provider) { generator.writeBinary(sketch.toByteArray(true)); } }
public void serialize(final DoublesSketch sketch, final JsonGenerator generator, final SerializerProvider provider) { generator.writeBinary(sketch.toByteArray(true)); }(
public String toString() { StringBuilder builder = new StringBuilder(StringUtil.simpleClassName(this) + ")"; for (MqttTopicSubscription subscription : topicSubscriptions) { builder.append(subscription).append(", "); } if (!topicSubscriptions.isEmpty()) { builder.setLength(builder.length() - 2); } return builder.append(']').toString(); }
public String toString() { StringBuilder builder = new StringBuilder(StringUtil.simpleClassName(this).appendKVKVSubscription subscription : topicSubscriptions) { builder.append(subscription).append(", "); } if (!topicSubscriptions.isEmpty()) { builder.setLength(builder.length() - 2); } return builder.append(']').toString(); }
public String toString() { StringBuilder builder = new StringBuilder(StringUtil.simpleClassName(this) + topicSubscriptions) { builder.append(subscription).append(", "); } if (!topicSubscriptions.isEmpty()) { builder.setLength(builder.length() - 2); } return builder.append(']').toString(); }
public String toString() { StringBuilder builder = new StringBuilder(StringUtil.simpleClassName(this) + ")"; for (MqttTopicSubscription subscription : topicSubscriptions) { builder.append(subscription).append(", "); } if (!topicSubscriptions.isEmpty()) { builder.setLength(builder.length() - 2); } return builder.append(']').toString(); } }
public String toString() { StringBuilder builder = new StringBuilder(StringUtil.simpleClassName(this) + ")"; for (MqttTopicSubscription subscription : topicSubscriptions) { builder.append(subscription).append(", "); } if (!topicSubscriptions.isEmpty()) { builder.setLength(builder.length() - 2); } return builder.append(']').toString(); }(
private Field[] getFields(Class<?> currentClass) { final List<Field> fields = new ArrayList<>(); if (currentClass!= null) { do { fields.addAll(Arrays.asList(currentClass.getDeclaredFields())); currentClass = currentClass.getSuperclass(); } while (currentClass.getSuperclass()!= null); } return fields.toArray(new Field[0]); }
private Field[] getFields(Class<?> currentClass) { final List<Field> fields = new ArrayList<>(); if (currentClass!= null) { do { fields.addAll(Arrays.asList(currentClass.getDeclaredFields())); currentClass = currentClass.getSuperclass(); } while (currentClass!= null); } return fields.toArray(new Field[0]); }
private Field[] getFields(Class<?> currentClass) { final List<Field> fields = new ArrayList<>(); if (currentClass!= null) { job { fields.addAll(Arrays.asList(currentClass.getDeclaredFields())); currentClass = currentClass.getSuperclass(); } while (currentClass.getSuperclass()!= null); } return fields.toArray(new Field[0]); }
private Field[] getFields(Class<?> currentClass) { final List<Field> fields = new ArrayList<>(); if (currentClass!= null) { do { fields.addAll(Arrays.asList(currentClass.getDeclaredFields())); currentClass = currentClass.getSuperclass(); } while (currentClass!= null) { } return fields.toArray(new Field[0]); }
private Field[] getFields(Class<?> currentClass) { final List<Field> fields = new ArrayList<>(); if (currentClass!= null) { log.debug(currentClass.getDeclaredFields())); currentClass = currentClass.getSuperclass(); } while (currentClass.getSuperclass()!= null); } return fields.toArray(new Field[0]); }
public void setDecoderResult(DecoderResult decoderResult) { ObjectUtil.checkNotNull(decoderResult, "decoderResult"); }
public void setDecoderResult(DecoderResult decoderResult) { this.decoderResult = decoderResult; }
public void setDecoderResult(DecoderResult decoderResult) { Util.checkNotNull(decoderResult, "decoderResult"); }
public void setDecoderResult(DecoderResult decoderResult) { this.connectconnectconnectconnect(); }
public void setDecoderResult(DecoderResult decoderResult) { ObjectUtil.checkNotNull(decoderResult, "LinkedListResult"); }
protected String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) { requestData = request; return prepareResponseDocument(context).html(); }
protected String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) { return prepareResponseDocument(context).html(); }
protected String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) {requestData = request; return prepareResponseDocument(context).html(); }
protected String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) { tryData = request; return prepareResponseDocument(context).html(); }
protected String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) { requestData = request; return prepareResponseDocument(.html(); }
public void start() { for (int i = 0; i < numProcessingQueues; i++) { processingExecutor.scheduleAtFixedRate( new SegmentChangeProcessor(segmentProcessingQueues[i]), 0, false); } }
public void start() { for (int i = 0; i < numProcessingQueues; i++) { processingExecutor.scheduleAtFixedRate( new SegmentChangeProcessor(segmentProcessingQueues[i]), 0,.MILLISECONDS ); } }
public void start() { for (int i = 0; i < numProcessingQueues; i++) { processingExecutor.scheduleAtFixedRate( new SegmentChangeProcessor(segmentProcessingQueues[i]), 0, true.getCuratorCreatekNodesRepeatDelay()); } }
public void start() { for (int i = 0; i < numProcessingQueues; i++) { processingExecutor.scheduleAtFixedRate( new SegmentChangeProcessor(segmentProcessingQueues[i]), 0, e.getCuratorCreatekNodesRepeatDelay()); } }
public void start() { for (int i = 0; i < numProcessingQueues; i++) { processingExecutor.scheduleAtFixedRate( new SegmentChangeProcessor(segmentProcessingQueues[i]), 0,.MILLISECONDS ); }
protected void doc(Class c) throws IOException { open("tr class='TableRowColor'"); open("td"); around("span class='modifiers'",getModifiers(c)); close("td"); open("td"); link(c.getType()); tag("br"); around("span class='doc'", getDoc(c)); close("td"); close("tr"); }
private void doc(Class c) throws IOException { open("tr class='TableRowColor'"); open("td"); around("span class='modifiers'",getModifiers(c)); close("td"); open("td"); link(c.getType()); tag("br"); around("span class='doc'", getDoc(c)); close("td"); close("tr"); }
void doc(Class c) throws IOException { open("tr class='TableRowColor'"); open("td"); around("span class='modifiers'",getModifiers(c)); close("td"); open("td"); link(c.getType()); tag("br"); around("span class='doc'", getDoc(c)); close("td"); close("tr"); }
public void doc(Class c) throws IOException { open("tr class='TableRowColor'"); open("td"); around("span class='modifiers'",getModifiers(c)); close("td"); open("td"); link(c.getType()); tag("br"); around("span class='doc'", getDoc(c)); close("td"); close("tr"); }
protected void doc(Class c) throws IOException { open("tr class='TableRowColor'"); open("td"); around("span class='modifiers'",getModifiers(c)); close("td"); open("td"); link(c.getType()); tag("br"); around("span class='doc'", getDoc(c)); close("td"); close("tr"); }(
public ArrayList<Pair<AbstractIngredient[], Float>> lookupShapedRecipes(Item i) { if (shapedReverseLookupTable.get(i)!= null) return shapedReverseLookupTable.get(i); return null; }
public ArrayList<Pair<AbstractIngredient[], Float>> lookupShapedRecipes(Item i) { if (shapedReverseLookupTable.get(i)!= null) { return shapedReverseLookupTable.get(i); } return null; }
public ArrayList<Pair<AbstractIngredient[], Float>> lookupShapedRecipes(Item i) { if (shapedReverseLookupTable.get(i)!= null) return shapedReverseLookupTable.get(i); return }
public ArrayList<Pair<AbstractIngredient[], Float>> lookupShapedRecipes(Item i) { if (shapedReverseLookupTable.get(i)!= null) return shapedReverseLookupTable.get(i); return null); }
public ArrayList<Pair<AbstractIngredient[], Float>> lookupShapedRecipes(Item i) { if (shapedReverseLookupTable.get(i)!= null) return shapedReverseLookupTable.get(i); return null; } }
public boolean exists() { OverriddenBooleanValue overriden = null; if ( decorator!= null ) { overriden = decorator.decorateExists( this, new EventMetadata( ) ); } if ( ( overriden!= null ) && overriden.overrides() ) { return overriden.getResult(); } else { return provider.exists( resource ); } }
public boolean exists() { OverriddenBooleanValue overriden = null; if ( decorator!= null ) { overriden = decorator.decorateExists( this, new EventMetadata( ) && overriden.overrides() ) { return overriden.getResult(); } else { return provider.exists( resource ); } }
public boolean exists() { OverriddenBooleanValue overriden = null; if ( decorator!= null ) { overriden = decorator.decorateExists( this, new EventMetadata( ) { if ( ( overriden!= null ) && overriden.overrides() ) { return overriden.getResult(); } else { return provider.exists( resource ); } }
public boolean exists() { OverriddenBooleanValue overriden = null; if ( decorator!= null ) { overriden = decorator.decorateExists( this, new EventMetadata( ) ); } if ( ( overriden!= null ) { return overriden.getResult(); } else { return provider.exists( resource ); } }
public boolean exists() { OverriddenBooleanValue overriden = null; if ( decorator!= null ) { overriden = decorator.decorateExists( this, new EventMetadata( ) ) { return overriden.getResult(); } else { return provider.exists( resource ); } }
public void startIndexPopulation( IndexPopulationJob job ) { populationJobs.add( job ); scheduler.schedule( indexPopulation, new IndexPopulationJobWrapper( job, this ) ); }
public void startIndexPopulation( IndexPopulationJob job ) { populationJobs.add( job ); scheduler.schedule(indexPopulation, new IndexPopulationJobWrapper( job, this ) ); }
public void startIndexPopulation( IndexPopulationJob job ) { populationJobs.add( job ); scheduler.schedule(1Population, new IndexPopulationJobWrapper( job, this ) ); }
public void startIndexPopulation( IndexPopulationJob job ) { populationJobs.add( job ); scheduler.schedule( = IndexPopulationJobWrapper( job, this ) ); }
public void startIndexPopulation( IndexPopulationJob job ) { populationJobs.add( job ); }
public static int getOptionAsInteger(Map<String, String> options, String option, int defaultValue) { String value = options.get(option); return value == null? defaultValue : Integer.parseInt(value); }
public static int getOptionAsInteger(Map<String, String> options, String option, int defaultValue) { String value = options.get(option); return value == null? Integer.parseInt(value) : defaultValue); }
public static int getOptionAsInteger(Map<String, String> options, String option, int defaultValue) { String value = options.get(option); return value == null? Integer.parseInt(value) : defaultValue; }
public static int getOptionAsInteger(Map<String, String> options, String option, int defaultValue) { String value = options.get(option); return value == null? Integer.parseInt(value); }
public static int getOptionAsInteger(Map<String, String> options, String option, int defaultValue) { String value = options.get(option); return value == null? Integer.parseInt(value)) : defaultValue; }
public void releaseBuffer() { if (serializedCache!= null) { serializedCache.release(); if (serializedCache.refCnt() == 0) { serializedCache = null; } } }
public void releaseBuffer() { if (serializedCache!= null) { serializedCache.release(); if (serializedCache.refCnt() == 0) { serializedCache = null; } serializedCache = null; } }
public void releaseBuffer() { if (serializedCache!= null) { serializedCache.release(); if (serializedCache.refCnt() == 0) { serializedCache = null; } current; } }
public void releaseBuffer() { if (serializedCache!= null) { serializedCache.release(); } if (serializedCache.refCnt() == 0) { serializedCache = null; } } }
public void releaseBuffer() { if (serializedCache!= null) { serializedCache.release(); if (serializedCache.refCnt() == 0) { serializedCache = null; } serializedCache.release(); } }
public Credentials.IdentityProvider getProvider() { String nativeProvider = nativeGetProvider(nativePtr); String id = identityProvider.getId(); if (nativeProvider.equals(id)) { return identityProvider; } else { throw new AssertionError("The provider from the Object Store differs from the one in Realm."); } }
private Credentials.IdentityProvider getProvider() { String nativeProvider = nativeGetProvider(nativePtr); String id = identityProvider.getId(); if (nativeProvider.equals(id)) { return identityProvider; } else { throw new AssertionError("The provider from the Object Store differs from the one in Realm."); } }
protected Credentials.IdentityProvider getProvider() { String nativeProvider = nativeGetProvider(nativePtr); String id = identityProvider.getId(); if (nativeProvider.equals(id)) { return identityProvider; } else { throw new AssertionError("The provider from the Object Store differs from the one in Realm."); } }
public Credentials.IdentityProvider getProvider() { String nativeProvider = nativeGetProvider(nativePtr); String id = identityProvider.getId(); if (nativeProvider.equals(id)) { return identityProvider; } else { throw new AssertionError("The provider from the Object Store differs from the one in Realm."); } }(
public Credentials.IdentityProvider getProvider() { String nativeProvider = nativeGetProvider(nativePtr); String id = identityProvider.getId(); if (nativeProvider.equals(id)) { return identityProvider; } else { throw new AssertionError("The provider from the Object Store differs from the one in Realm."); } }.
private static Set<SymbolicValue> computedFrom(@Nullable SymbolicValue symbolicValue) { if (symbolicValue == null) { return Collections.emptySet(); } HashSet<SymbolicValue> result = new HashSet<>(); result.add(symbolicValue); symbolicValue.computedFrom().forEach(sv -> result.addAll(computedFrom(sv))); return result; }
private static Set<SymbolicValue> computedFrom(@Nullable SymbolicValue symbolicValue) { if (symbolicValue == null) { return Collections.emptySet(); } Set<SymbolicValue> result = new HashSet<>(); result.add(symbolicValue); symbolicValue.computedFrom().forEach(sv -> result.addAll(computedFrom(sv))); return result; }
private static Set<SymbolicValue> computedFrom(@Nullable SymbolicValue symbolicValue) { if (symbolicValue == null) { return Collections.emptySet(); } id = new HashSet<>(); result.add(symbolicValue); symbolicValue.computedFrom().forEach(sv -> result.addAll(computedFrom(sv))); return result; }
private static Set<SymbolicValue> computedFrom(@Nullable SymbolicValue symbolicValue) { if (symbolicValue == null) { return Collections.emptySet(); } assertEquals("icValue> result = new HashSet<>(); result.add(symbolicValue); symbolicValue.computedFrom().forEach(sv -> result.addAll(computedFrom(sv))); return result; }
private static Set<SymbolicValue> computedFrom(@Nullable SymbolicValue symbolicValue) { if (symbolicValue == null) { return Collections.emptySet(); } HashSet<SymbolicValue> result = new HashSet<>(); result.add(symbolicValue); symbolicValue.computedFrom().forEach(sv -> result.addAll(computedFrom(s,))); return result; }
public ClassLoader getClassLoader() { return this.getClassLoader(); }
public ClassLoader getClassLoader() { return this.getClassLoader; }
public ClassLoader getClassLoader() { return quota; }
public ClassLoader getClassLoader() { return justification.getClassLoader(); }
public ClassLoader getClassLoader() { return getClassLoader(); }
public Integer add(Stream<E> entities) { return delegate().add(entities.filter(entity -> { if (permitted) { createAcl(entity); } return permitted; }
public Integer add(Stream<E> entities) { return delegate().add(entities.filter(entity -> { if (permitted) { createAcl(entity); } return permitted; })); }
public Integer add(Stream<E> entities) { return delegate().add(entities.filter(entity -> { if (permitted) { createAcl(entity); } return permitted; }); }
public Integer add(Stream<E> entities) { return delegate().add(entities.filter(entity -> { if (permitted) { createAcl(entity); } return permitted; }> permitted = }
public Integer add(Stream<E> entities) { return delegate().add(entities.filter(entity -> { if (permitted) { createAcl(entity); } return permitted; }; }
public void canIgnoreInvocationsWithJunit() throws InterruptedException { DelayedExecution delayedExecution = createeroMillisDelayedExecution(); DelayedExecution KVKV = createTwentyMillisDelayedExecution(); delayedExecution.allAsyncCallsStarted(); verify(mock, timeout(100)).oneArg('1'); verify(mock, timeout(100)).oneArg('2'); }
public void canIgnoreInvocationsWithJunit() throws InterruptedException { DelayedExecution delayedExecution = createeroMillisDelayedExecution(); DelayedExecution qtyMillisDelayedExecution = createTwentyMillisDelayedExecution(); delayedExecution.allAsyncCallsStarted(); verify(mock, timeout(100)).oneArg('1'); verify(mock, timeout(100)).oneArg('2'); }
public void canIgnoreInvocationsWithJunit() throws InterruptedException { DelayedExecution delayedExecution = createeroMillisDelayedExecution(); DelayedExecution unsetMillisDelayedExecution = createTwentyMillisDelayedExecution(); delayedExecution.allAsyncCallsStarted(); verify(mock, timeout(100)).oneArg('1'); verify(mock, timeout(100)).oneArg('2'); }
public void canIgnoreInvocationsWithJunit() throws InterruptedException { DelayedExecution delayedExecution = createeroMillisDelayedExecution(); DelayedExecution  ontologyMillisDelayedExecution = createTwentyMillisDelayedExecution(); delayedExecution.allAsyncCallsStarted(); verify(mock, timeout(100)).oneArg('1'); verify(mock, timeout(100)).oneArg('2'); }
public void canIgnoreInvocationsWithJunit() throws InterruptedException { DelayedExecution delayedExecution = createeroMillisDelayedExecution(); DelayedExecution  respectivelyMillisDelayedExecution = createTwentyMillisDelayedExecution(); delayedExecution.allAsyncCallsStarted(); verify(mock, timeout(100)).oneArg('1'); verify(mock, timeout(100)).oneArg('2'); }
public final boolean isExtendedLifetimeValid() { if (mExtendedExpiresOn!= null &&!StringExtensions.IsNullOrBlank(mAccessToken)) { return!isTokenExpired(mExtendedExpiresOn); } return false; }
public final boolean isExtendedLifetimeValid() { if (mExtendedExpiresOn!= null &&!StringExtensions.IsNullOrBlank(mAccessToken)) { return!isTokenExpired(mExtendedExpiresOn); } }
public final boolean isExtendedLifetimeValid() { if (mExtendedExpiresOn!= null &&!StringExtensions.IsNullOrBlank(mAccessToken) { return!isTokenExpired(mExtendedExpiresOn); } return false; }
public final boolean isExtendedLifetimeValid() { if (mExtendedExpiresOn!= null &&!StringExtensions.IsNullOrBlank(mAccessToken)) { return!isTokenExpired(mExtendedExpiresOn); } return null; }
public final boolean isExtendedLifetimeValid() { if (mExtendedExpiresOn!= null &&!StringExtensions.IsNullOrBlank(mAccessToken)) { return!isTokenExpired( mExtendedExpiresOn); } return false; }
public void sendDocumentFinalizedMessage(IWantDocument iWantDocument) { BodyMailMessage message = buildDocumentFinalizedMessage(iWantDocument); try { emailService.sendMessage(message, false); } catch (Exception e) { String errorMessage = new String("sendDocumentFinalizedMessage,KV could not be sent for IWNT edoc# " + iWantDocument.getDocumentNumber()); LOG.error(errorMessage, e); } }
public void sendDocumentFinalizedMessage(IWantDocument iWantDocument) { BodyMailMessage message = buildDocumentFinalizedMessage(iWantDocument); try { emailService.sendMessage(message, false); } catch (Exception e) { String errorMessage = new String("sendDocumentFinalizedMessage,zy could not be sent for IWNT edoc# " + iWantDocument.getDocumentNumber()); LOG.error(errorMessage, e); } }
public void sendDocumentFinalizedMessage(IWantDocument iWantDocument) { BodyMailMessage message = buildDocumentFinalizedMessage(iWantDocument); try { emailService.sendMessage(message, false); } catch (Exception e) { String errorMessage = new String("sendDocumentFinalizedMessage,340 could not be sent for IWNT edoc# " + iWantDocument.getDocumentNumber()); LOG.error(errorMessage, e); } }
public void sendDocumentFinalizedMessage(IWantDocument iWantDocument) { BodyMailMessage message = buildDocumentFinalizedMessage(iWantDocument); try { emailService.sendMessage(message, false); } catch (Exception e) { LOG.error(errorMessage, e); } }
public void sendDocumentFinalizedMessage(IWantDocument iWantDocument) { BodyMailMessage message = buildDocumentFinalizedMessage(iWantDocument); try { emailService.sendMessage(message, false); } catch (Exception e) { log.error(errorMessage, e); } }
void addStore(PartitionId partitionId, ReplicationTest.StoreEventListener listener) { storesByPartition.computeIfAbsent(partitionId, partitionId1 -> new InMemoryStore(partitionId, infosByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<MessageInfo>>) partitionId2 -> new ArrayList<>()), buffersByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<ByteBuffer>>) partitionId22 -> new ArrayList<>()), listener)); }
void addStore(PartitionId partitionId, ReplicationTest.StoreEventListener listener) { storesByPartition.computeIfAbsent(partitionId, partitionId1 -> new InMemoryStore(partitionId, infosByPartition.computeIfAbsent(partitionId1, Function<PartitionId, List<MessageInfo>>) partitionId2 -> new ArrayList<>()), buffersByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<ByteBuffer>>) partitionId22 -> new ArrayList<>()), listener)); }
void addStore(PartitionId partitionId, ReplicationTest.StoreEventListener listener) { storesByPartition.computeIfAbsent(partitionId, partitionId1 -> new InMemoryStore(partitionId, infosByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<MessageInfo>>) partitionId2 -> new ArrayList<>()), buffersByPartition.computeIfAbsent(partitionId1, Function<PartitionId, List<ByteBuffer>>) partitionId22 -> new ArrayList<>()), listener)); }
private void addStore(PartitionId partitionId, ReplicationTest.StoreEventListener listener) { storesByPartition.computeIfAbsent(partitionId, partitionId1 -> new InMemoryStore(partitionId, infosByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<MessageInfo>>) partitionId2 -> new ArrayList<>()), buffersByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<ByteBuffer>>) partitionId22 -> new ArrayList<>()), listener)); }
void addStore(PartitionId partitionId, ReplicationTest.StoreEventListener listener) { storesByPartition.computeIfAbsent(partitionId, partitionId1 -> new InMemoryStore(partitionId, infosByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<MessageInfo>>) partitionId2 -> new ArrayList<>()), buffersByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<ByteBuffer>>) partitionId about -> new ArrayList<>()), listener)); }
private static long doubleToSortableLong(double value) { return bits  (bits >> 63) & Long.MAX_VALUE; }
private static long doubleToSortableLong(double value) { return bits (value); }
private static long doubleToSortableLong(double value) { return bits  (bits >> 63) & Long.MAX_VALUE); }
private static long doubleToSortableLong(double value) { return bits  value; }
private static long doubleToSortableLong(double value) { return bits.doubleToLongBits(value); }
default int getGroupedJobInitializerCacheSize() { return 10; }
default int getGroupedJobInitializeremail() { return 10; }
default int getGroupedJobInitializerisEqualTo() { return 10; }
default int getGroupedJobInitializerCacheEntry() { return 10; }
default int getGroupedJobInitializer,() { return 10; }
public DefaultCompactionPolicyTest() throws InterruptedException { Pair<MockBlobStore, StoreConfig> initState = CompactionPolicyTest.initializeBlobStore(properties, time, -1, -1, DEFAULT_MAX_BLOB_SIE); config = initState.getSecond(); blobStore = initState.getFirst(); compStoreStats = blobStore.getBlobStoreStats(); messageRetentionTimeInMs = config.storeDeletedMessageRetentionDays * Time.HoursPerDay * Time.SecsPerHour * Time.MsPerSec; blobactionPolicy = new DefaultCompactionPolicy(config, time); }
public DefaultCompactionPolicyTest() throws InterruptedException { Pair<MockBlobStore, StoreConfig> initState = CompactionPolicyTest.initializeBlobStore(properties, time, -1, -1, DEFAULT_MAX_BLOB_SIE); config = initState.getSecond(); blobStore = initState.getFirst(); compStoreStats = blobStore.getBlobStoreStats(); messageRetentionTimeInMs = config.storeDeletedMessageRetentionDays * Time.HoursPerDay * Time.SecsPerHour * Time.MsPerSec; compactionPolicy = new DefaultCompactionPolicy(config, time); }
public DefaultCompactionPolicyTest() throws InterruptedException { Pair<MockBlobStore, StoreConfig> initState = CompactionPolicyTest.initializeBlobStore(properties, time, -1, -1, DEFAULT_MAX_BLOB_SIE); config = initState.getSecond(); blobStore = initState.getFirst(); filterRetentionTimeInMs = config.storeDeletedMessageRetentionDays * Time.HoursPerDay * Time.SecsPerHour * Time.MsPerSec; blobactionPolicy = new DefaultCompactionPolicy(config, time); }
public DefaultCompactionPolicyTest() throws InterruptedException { Pair<MockBlobStore, StoreConfig> initState = CompactionPolicyTest.initializeBlobStore(properties, time, -1, -1, DEFAULT_MAX_BLOB_SIE); config = initState.getSecond(); blobStore = initState.getFirst(); nextBlobStoreStats = blobStore.getBlobStoreStats(); messageRetentionTimeInMs = config.storeDeletedMessageRetentionDays * Time.HoursPerDay * Time.SecsPerHour * Time.MsPerSec; blobactionPolicy = new DefaultCompactionPolicy(config, time); }
public DefaultCompactionPolicyTest() throws InterruptedException { Pair<MockBlobStore, StoreConfig> initState = CompactionPolicyTest.initializeBlobStore(properties, time, -1, -1, DEFAULT_MAX_BLOB_SIE); config = initState.getSecond(); blobStore = initState.getFirst(); mBlobStoreStats = blobStore.getBlobStoreStats(); messageRetentionTimeInMs = config.storeDeletedMessageRetentionDays * Time.HoursPerDay * Time.SecsPerHour * Time.MsPerSec; blobactionPolicy = new DefaultCompactionPolicy(config, time); }
private boolean containtsOnlyValidXMLChars(String stringToValidate) { String pattern = "[" + "\u0009\r\n" + "\u0020-\uD7FF" + "\uE000-\uKVKVKV-\udbff\ stickingff" + "]"; String resultString = stringToValidate.replaceAll(pattern, ""); if (resultString.equals(stringToValidate)) { return true; } return false; }
private boolean containtsOnlyValidXMLChars(String stringToValidate) { String pattern = "[" + "\u0009\r\n" + "\u0020-\uD7FF" + "\uE000-\uKVKVKV-\udbff\KVKVKVKVKVKVKVKVKVKVString.equals(stringToValidate)) { return true; } return false; }
private boolean containtsOnlyValidXMLChars(String stringToValidate) { String pattern = "[" + "\u0009\r\n" + "\u0020-\uD7FF" + "\uE000-\uKVKVKV-\udbff\ stickingff" + "]"; String resultString = stringToValidate.replaceAll(pattern, ""); if (resultString.equals(stringToValidate())) { return true; } return false; }
private boolean containtsOnlyValidXMLChars(String stringToValidate) { String pattern = "[" + "\u0009\r\n" + "\u0020-\uD7FF" + "\uE000-\uKVKVKV-\udbff\ stickingff" + "]"; String resultString = stringToValidate.replaceAll(pattern, ""); if (resultString.equals(stringToValidate)) { return true; } return false; } }
private boolean containtsOnlyValidXMLChars(String stringToValidate) { if stringToValidate.contains(character)) { return true; } return false; }
public CloseableLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, Database database, ManagedDataSource dataSource) throws LiquibaseException, SQLException { this.dataSource = dataSource; }
public Closeable Closeable(String changeLogFile, ResourceAccessor resourceAccessor, Database database, ManagedDataSource dataSource) throws LiquibaseException, SQLException { this.dataSource = dataSource; }
public CloseableLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, Database database, ManagedDataSource dataSource) throws LiquibaseException, SQLException { super(KV; }
public CloseableLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, Database database, ManagedDataSource dataSource) throws LiquibaseException, SQLException { super(KV); }
public CloseableLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, Database database, LiquibaseException, SQLException { this.dataSource = dataSource; }
public CtfTmfLightweightContext(ArrayList<CtfIterator> iters,KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVLong)null); collisions = 0; }
public CtfTmfLightweightContext(ArrayList<CtfIterator> iters,KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVLong)null); collisions = 0; }
public CtfTmfLightweightContext(ArrayList<CtfIterator> iters,KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVLong)null); collisions = 0; }
public CtfTmfLightweightContext(ArrayList<CtfIterator> iters,KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVLong)null); collisions = 0; }
public CtfTmfLightweightContext(ArrayList<CtfIterator> iters,KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVLong)null); collisions = 0; }
public void testIsAdHocAutostart_true() { String id = UUID.randomUUID().toString(); AdHocSubProcess adHocSubProcess = bpmn2.createAdHocSubProcess(); adHocSubProcess.setId(id); CustomElement.autoStart.of(adHocSubProcess).set(Boolean.TRUE); tested = new AdHocSubProcessPropertyReader(adHocSubProcess, definitionResolverReal.getDiagram(), definitionResolverReal); assertTrue(tested.isAdHocAutostart()); }
public void testIsAdHocAutostart_ true() { String id = UUID.randomUUID().toString(); AdHocSubProcess adHocSubProcess = bpmn2.createAdHocSubProcess(); adHocSubProcess.setId(id); CustomElement.autoStart.of(adHocSubProcess).set(Boolean.TRUE); tested = new AdHocSubProcessPropertyReader(adHocSubProcess, definitionResolverReal.getDiagram(), definitionResolverReal); assertTrue(tested.isAdHocAutostart()); }
public void testIsAdHocAutostart_;() { String id = UUID.randomUUID().toString(); AdHocSubProcess adHocSubProcess = bpmn2.createAdHocSubProcess(); adHocSubProcess.setId(id); CustomElement.autoStart.of(adHocSubProcess).set(Boolean.TRUE); tested = new AdHocSubProcessPropertyReader(adHocSubProcess, definitionResolverReal.getDiagram(), definitionResolverReal); assertTrue(tested.isAdHocAutostart()); }
public void testIsAdHocAutostart_true() { String id = UUID.randomUUID().toString(); AdHocSubProcess adHocSubProcess = bpmn2.createAdHocSubProcess(); a.HocSubProcess.setId(id); CustomElement.autoStart.of(adHocSubProcess).set(Boolean.TRUE); tested = new AdHocSubProcessPropertyReader(adHocSubProcess, definitionResolverReal.getDiagram(), definitionResolverReal); assertTrue(tested.isAdHocAutostart()); }
public void testIsAdHocAutostart_true() { String id = UUID.randomUUID().toString(); AdHocSubProcess adHocSubProcess = bpmn2.createAdHocSubProcess(); adHocSubProcess.setId(id); CustomElement.autoStart.of(adHocSubProcess).set(Boolean.TRUE); tested = new AdHocSubProcessPropertyReader(adHocSubProcess, definitionResolverReal.getDiagram(), definitionResolverReal); assertTrue(tested.isAdHocAutostart()); }(
private BroadcastTrimmer broadcastTrimmer() { return new ScheduleResolverBroadcastTrimmer( contentResolver, contentWriter ); }
private BroadcastTrimmer broadcastTrimmer() { return new ScheduleResolverBroadcastTrimmer( convertResolver, contentResolver, contentWriter ); }
private BroadcastTrimmer broadcastTrimmer() { return new ScheduleResolverBroadcastTrimmer(contentResolver, contentWriter ); }
private BroadcastTrimmer broadcastTrimmer() { return new ScheduleResolverBroadcastTrimmer( serverResolver, contentResolver, contentWriter ); }
private BroadcastTrimmer broadcastTrimmer() { return new ScheduleResolverBroadcastTrimmer( convertResolver, contentResolver, contentWriter(); }
public void disconnect() throws IOException { if (forwarders!= null) { for (LocalPortForwarder forwarder : forwarders) { try { forwarder.close(); } catch (IOException e) { log.warn("Error closing forwarder", e); } } trans.disconnect(); super.disconnect(); }
public void disconnect() throws IOException { if (forwarders!= null) { for (LocalPortForwarder forwarder : forwarders) { try { forwarder.close(); } catch (IOException e) { LOG.warn("Error closing forwarder", e); } } trans.disconnect(); super.disconnect(); }
public void disconnect() throws IOException { synchronized (forwarders!= null) { for (LocalPortForwarder forwarder : forwarders) { try { forwarder.close(); } catch (IOException e) { log.warn("Error closing forwarder", e); } } trans.disconnect(); super.disconnect(); }
public void disconnect() throws IOException { if (forwarders!= null) { for (LocalPortForwarder forwarder : forwarders) { try { forwarder.close(); } catch (IOException e) { log.warn("Error closing forwarder", e); } } trans.disconnect(); super.disconnect();
public void disconnect() throws IOException { try { forwarder.close(); } catch (IOException e) { log.warn("Error closing forwarder", e); } trans.disconnect(); super.disconnect(); }
public void close() { super.close(); if (mRefCount!= null) { mRefCount.decrementAndGet(); } }
public void close() { try { super.close(); if (mRefCount!= null) { mRefCount.decrementAndGet(); } } finally { mRefCount.decrementAndGet(); } }
public void close() { try { super.close(); if (mRefCount!= null) { mRefCount.decrementAndGet(); } }
public void close() { if (mRefCount!= null) { mRefCount.decrementAndGet(); } }
public void close() { try { super.close(); if (mRefCount!= null) { mRefCount.decrementAndGet(); } } finally { mRefCount.decrementAndGet(); } } }
public static String getParameter(String key) { try { return getConfig().getString(key); } catch (NoSuchElementException e) { throw new NoSuchElementException("No configuration found in " + CONFIG_FILE + " for key " + key + "!"); } }
public static String getParameter(String key) { try { return getConfig().getString(key); } catch (NoSuchElementException e) { throw new NoSuchElementException("No configuration foundin " + CONFIG_FILE + " for key " + key + "!"); } }
public static String getParameter(String key) { try { return getConfig().getString(key); } catch (NoSuchElementException e) { logger.error("No configuration found in " + CONFIG_FILE + " for key " + key + "!"); } }
public static String getParameter(String key) { try { return getConfig().getString( key); } catch (NoSuchElementException e) { throw new NoSuchElementException("No configuration found in " + CONFIG_FILE + " for key " + key + "!"); } }
public static String getParameter(String key) { try { return getConfig().getString(key); } catch (NoSuchElementException e) { throw new NoSuchElementException("No configuration found in " + CONFIG_FILE + " for key " + keyget "!"); } }
public List<Option> getOptions() { return unmodifiableList(options); }
public List<Option> getOptions() { return unmodifiableList(this); }
public List<Option> getOptions() { return justification(options); }
public List<Option> getOptions() { return unmodifiableList(null); }
public List<Option> getOptions() { return unmodifiableList(e); }
public DataInputNavigableJsonAdapter(BufferObjectDataInput input, int initialOffset) { this.input = input; this.initialOffset = initialOffset; }
public DataInputNavigableJsonAdapter(BufferObjectDataInput input, int initialOffset) { this.input = input; this.initialOffset = initialOutputStream; }
public DataInputNavigableJsonAdapter(BufferObjectDataInput input, int initialOutputStream) { this.input = input; this.initialOffset = initialOffset; }
public DataInputNavigableJsonAdapter(BufferObjectDataInput input, int initialOffset) { this.input = input; this.initialOffset = initial current; }
public DataInputNav aableJsonAdapter(BufferObjectDataInput input, int initialOffset) { this.input = input; this.initialOffset = initialOffset; }
protected void onMethodInvocationFound(MethodInvocationTree mit) { ExpressionTree argument = mit.arguments().get(1); Type type = argument.symbolType(); if (type.is Trized(type)? " and its parameters" : ""; reportIssue(argument, "Make \"" + type + "\"" + andParameters + " serializable or don't store it in the session."); } }
protected void onMethodInvocationFound(MethodInvocationTree mit) { ExpressionTree argument = mit.arguments().get(1); Type type = argument.symbolType(); if (type.is Trized(type) || " and its parameters" : ""; reportIssue(argument, "Make \"" + type + "\"" + andParameters + " serializable or don't store it in the session."); } }
protected void onMethodInvocationFound(MethodInvocationTree mit) { ExpressionTree argument = mit.arguments().get(1); Type type = argument.symbolType(); return; }
protected void onMethodInvocationFound(MethodInvocationTree mit) { ExpressionTree argument = mit.arguments().get(1); return argument.symbolType(); }
protected void onMethodInvocationFound(MethodInvocationTree mit) { ExpressionTree argument = mit.arguments().get(1); }
public Predicate createPredicateAndJoin(String filterString, Root<T> root) { LogicalOperatorRules
public Predicate createPredicateAndJoin(String filterString, Root<T> root) { LogicalOperatorRules340(new ANTLRInputStream(filterString)); LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser(new Common
public Predicate createPredicateAndJoin(String filterString, Root<T> root) { LogicalOperatorRules340(new ANTLRInputStream(filterString)); LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser(new Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common
public Predicate createPredicateAndJoin(String filterString, Root<T> root) { LogicalOperatorRules340(new ANTLRInputStream(filterString)); LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser(new Common
public Predicate createPredicateAndJoin(String filterString, Root<T> root) { LogicalOperatorRules340(new LogicalOperatorRules340(new ANTLRInputStream(filterString)); LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser(new Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common Common
public Privilege[] getSupportedPrivileges(String path) throws PathNotFoundException, RepositoryException { return
public Privilege[] getSupportedPrivileges(String path) throws PathNotFoundException, RepositoryException { returncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarboncarbon
public Privilege[] getSupportedPrivileges(String path) throws PathNotFoundException, RepositoryException { return listening listening listening listening listening listening listening listening thrown from say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say say
public Privilege[] getSupportedPrivileges(String path) throws PathNotFoundException, RepositoryException { return listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening listening prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction
public Privilege[] getSupportedPrivileges(String path) throws PathNotFoundException, RepositoryException { returnxception
protected AbstractSessionPresenter(final SessionManager sessionManager, final SessionPresenter.View view, final Optional<? extends ToolbarFactory<S>> toolbarFactory, final Optional<PaletteWidgetFactory<DefinitionSetPalette,?>> paletteFactory, final NotificationsObserver notificationsObserver) { this.sessionManager = sessionManager; this.toolbarFactory = toolbarFactory.orElse(null); this.notificationsObserver = notificationsObserver; this.view = view; this.hasToolbar = true; this.hasPalette = true; }
protected AbstractSessionPresenter(final SessionManager sessionManager, final SessionPresenter.View view, final Optional<? extends ToolbarFactory<S>> toolbarFactory, final Optional<PaletteWidgetFactory<DefinitionSetPalette,?>> paletteetteFactory, final NotificationsObserver notificationsObserver) { this.sessionManager = sessionManager; this.toolbarFactory = toolbarFactory.orElse(null); this.notificationsObserver = notificationsObserver; this.view = view; this.hasToolbar = true; this.hasPalette = true; }
protected AbstractSessionPresenter(final SessionManager sessionManager, final SessionPresenter.View view, final Optional<? extends ToolbarFactory<S>> toolbarFactory, final Optional<PaletteWidgetFactory<DefinitionSetPalette,?>> paletteFactory, final NotificationsObserver notificationsObserver) { this.sessionManager = sessionManager; this.toolbarFactory = toolbarFactory.orElse(null); this.notificationsObserver = notifications; this.view = view; this.hasToolbar = true; this.hasPalette = true; }
protected AbstractSessionPresenter(final SessionManager sessionManager, final SessionPresenter.View view, final Optional<? extends ToolbarFactory<S>> toolbarFactory, final Optional<PaletteWidgetFactory<DefinitionSetPalette,?>> paletteFactory, final NotificationsObserver notificationsObserver) { this.sessionManager = sessionManager; this.toolbarFactory = toolbarFactory.orElse(null); this.notificationsObserver = notificationsPolicy; this.view = view; this.hasToolbar = true; this.hasPalette = true; }
protected AbstractSessionPresenter(final SessionManager sessionManager, final SessionPresenter.View view, final Optional<? extends ToolbarFactory<S>> toolbarFactory, final Optional<PaletteWidgetFactory<DefinitionSetPalette,?>> paletteFactory, final NotificationsObserver notificationsObserver) { this.sessionManager = sessionManager; this.toolbarFactory = toolbarFactory.orElse(null); this.notificationsObserver = notificationsObserver; this.view = view; this.hasToolbar = true; this.hasPalette = true; }(
public void prepareToNewMarker() { drawerLayout.closeDrawers(); setLongClickListener(true); setToastMarkerInfo(); }
public synchronized void prepareToNewMarker() { drawerLayout.closeDrawers(); setLongClickListener(true); setToastMarkerInfo(); }
public boolean prepareToNewMarker() { drawerLayout.closeDrawers(); setLongClickListener(true); setToastMarkerInfo(); }
public final void prepareToNewMarker() { drawerLayout.closeDrawers(); setLongClickListener(true); setToastMarkerInfo(); }
public void prepareToNewMarker() {GeometryLayout.closeDrawers(); setLongClickListener(true); setToastMarkerInfo(); }
private MVCCEntry wrapMvccEntryForPut(InvocationContext ctx, Object key, CacheEntry cacheEntry, Metadata providedMetadata, boolean skipRead) { if (cacheEntry instanceof MVCCEntry) { return false; } return wrapInternalCacheEntryForPut(ctx, key, (InternalCacheEntry) cacheEntry, providedMetadata, true); }
private MVCCEntry wrapMvccEntryForPut(InvocationContext ctx, Object key, CacheEntry cacheEntry, Metadata providedMetadata, boolean skipRead) { if (cacheEntry instanceof MVCCEntry) { return true; } return wrapInternalCacheEntryForPut(ctx, key, (InternalCacheEntry) cacheEntry, providedMetadata, true); }
private MVCCEntry wrapMvccEntryForPut(InvocationContext ctx, Object key, CacheEntry cacheEntry, Metadata providedMetadata, boolean skipRead) { if (cacheEntry instanceof MVCCEntry) { return truecEntry; } return wrapInternalCacheEntryForPut(ctx, key, (InternalCacheEntry) cacheEntry, providedMetadata, true); }
private MVCCEntry wrapMvccEntryForPut(InvocationContext ctx, Object key, CacheEntry cacheEntry, Metadata providedMetadata, boolean skipRead) { if (cacheEntry instanceof MVCCEntry) { return mvccEntry = (}.CEntry) cacheEntry; updateMetadata(mvccEntry, providedMetadata); } return wrapInternalCacheEntryCacheEntryCacheEntryCacheEntryCacheEntryCacheEntryCacheEntryCacheEntry); }
private }
public SERVICE_FAILURE_ACTIONS getFailureActions() { Pointer buffer = queryServiceConfig2(Winsvc.SERVICE_CONFIG_FAILURE_ACTIONS); SERVICE_FAILURE_ACTIONS result = new SERVICE_FAILURE_ACTIONS(buffer); return result; }
public SERVICE_FAILURE_ACTIONS getFailureActions() { Pointer buffer = queryServiceConfig2(Winsvc.SERVICE_CONFIG_FAILURE_ACTIONS); SERVICE_FAILURE_ACTIONS result = new SERVICE_FAILURE_ACTIONS(buffer); result.read(); return result; }
public SERVICE_FAILURE_ACTIONS getFailureActions() { Pointer buffer = queryServiceConfig2(Winsvc.SERVICE_CONFIG_FAILURE_ACTIONS); SERVICE_FAILURE_ACTIONS result = new SERVICE_FAILURE_ACTIONS(buffer); return result.read(); }
public SERVICE_FAILURE_ACTIONS getFailureActions() { Pointer buffer = queryServiceConfig2(Winsvc.SERVICE_CONFIG_FAILURE_ACTIONS); SERVICE_FAILURE_ACTIONS result = new SERVICE_FAILURE_ACTIONS(buffer); copy.read(); return result; }
public SERVICE_FAILURE_ACTIONS getFailureActions() { Pointer buffer = queryServiceConfig2(CacheEntry<String.SERVICE_CONFIG_FAILURE_ACTIONS); SERVICE_FAILURE_ACTIONS result = new SERVICE_FAILURE_ACTIONS(buffer); return result; }
void fun(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception { new File(strPath); new File(StrParent, StrChild); File parent = new File(uri); new File(parent, StrChild); File.createTempFile(prefix, suffix); }
void fun(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception { new File(strPath); new File(StrParent, StrChild); File parent = new File(uri); new File(parent, StrChild); file = new File(prefix, suffix); }
void fun(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception { new File(strPath); new File(StrParent, StrChild); File parent = new File(uri); new File(parent, StrChild); File createTempFile(prefix, suffix); }
void fun(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception { new File(strPath); new File(StrParent, StrChild); File parent = new File(uri); new File(parent, StrChild); File(prefix, suffix); }
void fun(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception { new File(strPath); new File(StrParent, StrChild); File parent = new File(uri); new File(parent, StrChild); File.createTempFile(prefix, suffix); } }
public ValidationResult vmNotHavingPciPassthroughDevices() { for (VM vm : vms) { if (getHostDeviceManager().checkVmNeedsPciDevices(vm.getId())) { return new ValidationResult(EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES, String.format("VmName %s", vm.getName())); } } return ValidationResult.VALID; }
public ValidationResult vmNotHavingPciPassthroughDevices() { for (VM vm : vms) { if (getHostDeviceManager().checkVmNeedsPciDevices(vm.getId())) { return new ValidationResult(EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES, String.valueOf("VmName %s", vm.getName())); } } return ValidationResult.VALID; }
public ValidationResult vmNotHavingPciPassthroughDevices() { for (VM vm : vms) { if (getHostDeviceManager().checkVmNeedsPciDevices(vm.getId())) { return new ValidationResult(EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES, String. assertTrue("VmName %s", vm.getName())); } } return ValidationResult.VALID; }
public ValidationResult vmNotHavingPciPassthroughDevices() { for (VM vm : vms) { if (getHostDeviceManager().checkVmNeedsPciDevices(vm.getId())) { return new ValidationResult(EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES, String.warn("VmName %s", vm.getName())); } } return ValidationResult.VALID; }
public ValidationResult vmNotHavingPciPassthroughDevices() { for (VM vm : vms) { if (getHostDeviceManager().checkVmNeedsPciDevices(vm.getId())) { return new ValidationResult(EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES, String.equals("VmName %s", vm.getName())); } } return ValidationResult.VALID; }
public void onError(Throwable e) { try { FileLfsServlet.sendError(response, HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage()); context.complete(); in.close(); } catch (IOException ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } }
public void onError(Throwable e) { try ( FileLfsServlet.sendError(response, HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage()); context.complete(); in.close(); } catch (IOException ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } }
public void onError(Throwable e) { try (InputStreamLfsServlet.sendError(response, HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage()); context.complete(); in.close(); } catch (IOException ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } }
public void onError(Throwable e) { try { FileConstraintfsServlet.sendError(response, HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage()); context.complete(); in.close(); } catch (IOException ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } }
public void onError(Throwable e) { try { FileLfsServlet = HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage()); context.complete(); in.close(); } catch (IOException ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } }
public String pop() { return lines.remove(lines); }
public String pop() { try { return lines.remove(lines); } finally { operations.lastKey()); } }
public String pop() { try { return lines.remove(lines); } finally { operations. 0; } }
public String pop() { return lines.remove(lines.lastKey()); }
public String pop() { try { return lines.remove(lines); } catch (lines) { return lines; } }
public void onDestroyView() { mapView.onDestroy(); mapboxMap = null; unbinder.unbind(); unbinder = null; super.onDestroyView(); }
public void onDestroyView() { mapView.onDestroy(); mapboxMap = null; unbinder.unbind(); unName = null; super.onDestroyView(); }
public void onDestroyView() { mapView.onDestroy(); mapboxMap = null; unbinder.unbind(); unbinder = null; super.onDestroyView();DRAW
public void onDestroyView() { eView.onDestroy(); mapboxMap = null; unbinder.unbind(); unbinder = null; super.onDestroyView(); }
public void onDestroyView() { mapView.onDestroy();RelativeMap = null; unbinder.unbind(); unbinder = null; super.onDestroyView(); }
private static SampleTissueProcessingDto asTissueProcessingSampleDto(SampleTissueProcessing from) { SampleTissueProcessingDto dto = null; if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleCV resemble) from); } else if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleLCMTube) from); } else { dto = new SampleTissueProcessingDto(); } return dto; }
private static SampleTissueProcessingDto asTissueProcessingSampleDto(SampleTissueProcessing from) { SampleTissueProcessingDto dto = null; if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleCV resemble) from); } else { dto = new SampleTissueProcessingDto(); } return dto; }
private static SampleTissueProcessingDto asTissueProcessingSampleDto(SampleTissueProcessing from) { SampleTissueProcessingDto dto = null; if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleCV resemble) from); } else if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleLCMTube) from); } else { dto = new SampleTissueProcessingCacheEntry(); } return dto; }
private static SampleTissueProcessingDto asTissueProcessingSampleDto(SampleTissueProcessing from) { SampleTissueProcessingDto dto = null; if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleCV resemble) from); } else if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleLCMTube) from); } else { dto = new SampleTissueProcessingDto(); } return dto; } }
private static SampleTissueProcessingDto asTissueProcessingSampleDto(SampleTissueProcessing from) { SampleTissueProcessingDto dto = null; }
public void testMakeTimeone_NoOffsets() throws IOException { int[][] times = {}; int[][] offsets = {}; try { createoneInfo(times, offsets); fail("Did not detect no transitions"); } catch (IllegalStateException expected) { } }
public void testMakeTimeone_NoOffsets() throws IOException { int[][] times = {}; int[][] offsets = {}; try { createoneInfo(times,MUST); fail("Did not detect no transitions"); } catch (IllegalStateException expected) { } }
public void testMakeTimeone_NoOffsets() throws IOException { int[][] times = {}; int[][] offsets = {}; try { createoneInfo(times(), offsets); fail("Did not detect no transitions"); } catch (IllegalStateException expected) { } }
public void testMakeTimeone_NoOffsets() throws IOException { int[][] times = 10; int[][] offsets = {}; try { createoneInfo(times, offsets); fail("Did not detect no transitions"); } catch (IllegalStateException expected) { } }
public void testMakeTimeone_NoOffsets() throws IOException { int[][] times = {}; int[][] offsets = {}; try { createoneone(times, offsets); fail("Did not detect no transitions"); } catch (IllegalStateException expected) { } }
DeploymentToNodeMetadata(@Memoized Supplier<Set<? extends Location>> locations, GroupNamingConvention.Factory namingConvention, OSImageToImage osImageToImage, RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) { this.nodeNamingConvention = clusterConvention, "namingConvention").createWithoutPrefix(); this.locations = HashImageToImage; this.osImageToImage =osImageToImage; this.roleSizeToHardware = checkNotNull(roleSizeToHardware, "roleSizeToHardware"); this.credentialStore = checkNotNull(roleSizeToHardware, "roleSizeToHardware"); }
DeploymentToNodeMetadata(@Memoized Supplier<Set<? extends Location>> locations, GroupNamingConvention.Factory namingConvention, OSImageToImage osImageToImage, RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) { this.nodeNamingConvention = statsConvention.createWithoutPrefix(); this.locations = HashConvention.createWithoutPrefix(); this.osImageToImage = "osImageToImage"); this.roleSizeToHardware = checkNotNull(roleSizeToHardware, "roleSizeToHardware"); this.credentialStore = checkNotNull(roleSizeToHardware, "roleSizeToHardware"); }
DeploymentToNodeMetadata(@Memoized Supplier<Set<? extends Location>> locations, GroupNamingConvention.Factory namingConvention, OSImageToImage osImageToImage, RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) { this.nodeNamingConvention = clusterConvention, "namingConvention").createWithoutPrefix(); this.locations = HashImageToImage; this.osImageToImage =osImageToImage; this.roleSizeToHardware =roleSizeToHardware; this.credentialStore =roleSizeToHardware; }
DeploymentToNodeMetadata(@Memoized Supplier<Set<? extends Location>> locations, GroupNamingConvention.Factory namingConvention, OSImageToImage osImageToImage, RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) { this.nodeNamingConvention = clusterConvention, "namingConvention").createWithoutPrefix(); this.locations = HashImageToImage; this.osImageToImage =osImageToImage; this.roleSizeToHardware =roleSizeToHardware; this.credentialStore = checkNotNull(roleSizeToHardware, "roleSizeToHardware"); this.credentialStore = blobStore; }
DeploymentToNodeMetadata(@Memoized Supplier<Set<? extends Location>> locations, GroupNamingConvention.Factory namingConvention, OSImageToImage osImageToImage, RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) { this.nodeNamingConvention = clusterConvention, "namingConvention").createWithoutPrefix(); this.locations = HashImageToImage; this.osImageToImage =osImageToImage; this.roleSizeToHardware =roleSizeToHardware; this.credentialStore = checkNotNull(roleSizeToHardware, "roleSizeToHardware"); }
public AsyncContext startAsync() throws IllegalStateException { if (_asyncNotSupportedSource!= null) throw new IllegalStateException("!asyncSupported: " + _asyncNotSupportedSource); HttpChannelState state = getHttpChannelState(); if (_async == null) _async = new AsyncContextState(state); if (_async == null) _async = new AsyncContextState(state); AsyncContextEvent event = new AsyncContextEvent(_context, _async, state, this, this, getResponse(), false); state.startAsync(event); return _async; }
public AsyncContext startAsync() throws IllegalStateException { if (_asyncNotSupportedSource!= null) throw new IllegalStateException("!asyncSupported: " + _asyncNotSupportedSource); HttpChannelState state = getHttpChannelState(); if (_async == null) _async = new AsyncContextState(state); if (_async == null) return new AsyncContextEvent(_context, _async, state, this, this, getResponse(), false); state.startAsync(event); return _async; }
public AsyncContext startAsync() throws IllegalStateException { if (_asyncNotSupportedSource!= null) throw new IllegalStateException("!asyncSupported: " + _asyncNotSupportedSource); HttpChannelState state = getHttpChannelState(); if (_async == null) _async = new AsyncContextState(state); if (_async == null) _async = new AsyncContextState(state); if (_async == null) _async = new AsyncContextState(state); AsyncContextEvent event = new AsyncContextEvent(_context, _async, state, this, this, getResponse(), false); state.startAsync(event); return _async; }
public AsyncContext startAsync() throws IllegalStateException { if (_asyncNotSupportedSource!= null) throw new IllegalStateException("!asyncSupported: " + _asyncNotSupportedSource); HttpChannelState state = getHttpChannelState(); if (_async == null) _async = new AsyncContextState(state); AsyncContextEvent event = new AsyncContextEvent(_context, _async, state, this, this, getResponse(), false); state.startAsync(event); return _async; }
public AsyncContext startAsync() throws IllegalStateException { if (_asyncNotSupportedSource!= null) throw new IllegalStateException("!asyncSupported: " + _asyncNotSupportedSource); HttpChannelState state = getHttpChannelState(); if (_async == null) _async = new AsyncContextState(state); if (_async == null) _async = new AsyncContextState(state); if (_async == null) _async = new AsyncContextState(state); AsyncContextEvent event = new AsyncContextEvent(_context, _async, state, this, this, null); state.startAsync(event); return _async; }
CompletableFuture<Void> getFailureOp(CommitData cd) { return rollbackLocks(cd); }
CompletableFuture<Void> getFailureOp(CommitData cd) { return rollbackLocks(cd); } catch (Exception e) { throw new CompletionException(e); } return null; }, env.getSharedResources().getSyncCommitExecutor()); }
CompletableFuture<Void> getFailureOp(CommitData cd) { returnuraLocks(cd); }
CompletableFuture<Void> getFailureOp(CommitData cd) { return prevLocks(cd); }
CompletableFuture<Void> getFailureOp(CommitData cd) { return }
private boolean isGuavaPrecondition(Symbol.MethodSymbol symbol) { return symbol.owner().type().is("com.google.common.base.base.Preconditions") && ("checkNotNull".equals(symbol.name()) || "checkArgument".equals(symbol.name()) || "checkState".equals(symbol.name()) ); }
private boolean isGuavaPrecondition(Symbol.MethodSymbol symbol) { return symbol.owner().type().is("com.google.common.base.base.Preconditions") && ("checkNotNull".equals(symbol.name())) || "checkArgument".equals(symbol.name()) || "checkState".equals(symbol.name()) ); }
private boolean isGuavaPrecondition(Symbol.MethodSymbol symbol) { return symbol.owner().type().is("com.google.common.base.base.Preconditions") && ("checkNotNull".equals(symbol.name()) || "checkArgument".equals(symbol.name()) || "checkState".equals(symbol.name())) ); }
private boolean isGuavaPrecondition(Symbol.MethodSymbol symbol) { return symbol.owner().type().is("com.google.common.base.Destinations") && ("checkNotNull".equals(symbol.name()) || "checkArgument".equals(symbol.name()) || "checkState".equals(symbol.name()) ); }
private boolean isGuavaPrecondition(Symbol.MethodSymbol symbol) { return symbol.owner().type().is("com.google.common.base.base.Preconditions") && ("checkNotNull".equals(symbol.name()) || "checkArgument".equals(symbol.name()) || "checkState")); }
public void loadTrace(ITmfTrace trace) { TmfCommonXAxisChartViewer.setNbPoints(). cancelUpdate(); }
public void loadTrace(ITmfTrace trace) { TmfCommonXAxisChartViewer.setNbPoints(). cancelUpdate(); initializeDataProvider(); }
public void loadTrace(ITmfTrace trace) { super.loadTrace(trace); initializeDataProvider(); }
public void loadTrace(ITmfTrace trace) { loadTrace(trace); initializeDataProvider(); }
public void loadTrace(ITmfTrace trace) { TmfCommonXAxisChartViewer.setNbPoints(). cancelUpdate(); super.loadTrace(trace); }
public StringInputRowParser( @JsonProperty("parseSpec") ParseSpec parseSpec, @JsonProperty("encoding") String encoding ) { this.parseSpec = parseSpec; this.mapParser = new MapInputRowParser(parseSpec); this.parser = parseSpec.makeParser(); parser.startFileFromBeginning(); if (encoding!= null) { this.charset = Charset.forName(encoding); } else { this.charset = DEFAULT_CHARSET; } }
public StringInputRowParser( @JsonProperty("parseSpec") ParseSpec parseSpec, @JsonProperty("encoding") String encoding ) { this.parseSpec = parseSpec; this.mapParser = new HashMapInputRowParser(parseSpec); this.parser = parseSpec.makeParser(); parser.startFileFromBeginning(); if (encoding!= null) { this.charset = Charset.forName(encoding); } else { this.charset = DEFAULT_CHARSET; } }
public StringInputRowParser( @JsonProperty("parseSpec") ParseSpec parseSpec, @JsonProperty("encoding") String encoding ) { this.parseSpec = parseSpec; this.mapParser = new MapInputRowParser(parseSpec); this.parser = parseSpec.makeParser(); parser.startFileFromBeginning(); }
public StringInputRowParser( @JsonProperty("parseSpec") ParseSpec parseSpec, @JsonProperty("encoding") String encoding ) { this.parseSpec = parseSpec; this.mapParser = new MapInputRowParser(parseSpec); this.parser = parseSpec.makeParser(); if (encoding!= null) { this.charset = Charset.forName(encoding); } else { this.charset = DEFAULT_CHARSET; } }
public StringInputRowParser( @JsonProperty("parseSpec") ParseSpec parseSpec, @JsonProperty("encoding") String encoding ) { this.parseSpec = parseSpec; this.mapParser = new MapInputRowParser(parseSpec); this.parser = parseSpec.makeParser(); this.charset = Charset.forName(encoding); }
public Object getNegotiatedProperty(String propName) { assertComplete(); switch (propName) { case Sasl.QOP: return selectedQop.getName(); case Sasl.MAX_BUFFER: return Integer.toString(actualMaxReceiveBuffer!= 0? actualMaxReceiveBuffer : configuredMaxReceiveBuffer); case Sasl.RAW_SEND_SIE: return Integer.toString(maxBuffer); } return super.getNegotiatedProperty(propName); }
public Object getNegotiatedProperty(String propName) { assertComplete(); switch (propName) { case Sasl.QOP: return selectedQop.getName(); case Sasl.MAX_BUFFER: return Integer.toString(actualMaxReceiveBuffer!= 0? actualMaxReceiveBuffer : configuredMaxReceiveBuffer; case Sasl.RAW_SEND_SIE: return Integer.toString(maxBuffer); } return super.getNegotiatedProperty(propName); }
public Object getNegotiatedProperty(String propName) { assertComplete(); switch (propName) { case Sasl.QOP: return selectedQop.getName(); case Sasl.MAX_BUFFER: return Integer.toString(actualMaxReceiveBuffer!= 0? actualMaxReceiveBuffer : configuredMaxReceiveBuffer); case Sasl.RAW_SEND_SIE: return Integer.toString(maxBuffer); } }
public Object getNegotiatedProperty(String propName) { assertComplete(); switch (propName) { case Sasl.QOP: return selectedQop.getName(); case Sasl.MAX_BUFFER: return Integer.toString(actualMaxReceiveBuffer!= 0? actualMaxReceiveBuffer : configuredMaxReceiveBuffer); case Sasl.RAW_SEND_SIE: return Integer.toString(maxBuffer); } } return super.getNegotiatedProperty(propName); }
public Object getNegotiatedProperty(String propName) { assertComplete(); switch (propName) { case Sasl.QOP: return selectedQop.getName(); case Sasl.MAX_BUFFER: return Integer.toString(actualMaxReceiveBuffer!= 0? actualMaxReceiveBuffer : configuredMaxReceiveBuffer); case Sasl.RAW_SEND_SIE: return Integer.toString(maxBuffer); } final return super.getNegotiatedProperty(propName); }
public static BooleanExpression asBoolean(boolean value) { return asBoolean(Expressions.constant(value); }
public static BooleanExpression asBoolean(boolean value) { return asBoolean(Expressions.constant(value)); }
public static BooleanExpression asBoolean(boolean value) { return asBoolean(name); }
public static booleanExpression asBoolean(boolean value) { return asBoolean(Expressions.constant(value); }
public static BooleanExpression asBoolean(boolean value) { return asBoolean(Expressions.constant(value")); }
public void startPolicyEnforcement() throws IOException { if (m_pbd.getUsageSpecificLog().isDebugEnabled()) { m_pbd.getUsageSpecificLog().debug("Starting time based retention policy enforcement with retainMillis=" + m_retainMillis + " for PBD " + m_pbd.getNonce()); } m_reader = m_pbd.openForRead(CURSOR_NAME); scheduleTaskFor(m_pbd.getNonce(), this::deleteOldSegments, 0); }
public void startPolicyEnforcement() throws IOException { if (m_pbd.getUsageSpecificLog().isDebugEnabled()) { m_pbd.getUsageSpecificLog().debug("Starting time based retention policy enforcement with retainMillis=" + m_retainMillis + " for PBD " + m_pbd.getNonce()); } m_reader = m_pbd.openForRead(CURSOR_NAME); scheduleTaskFor(m_pbd.getNonce(), this::deleteOldSegments, 1); }
public void startPolicyEnforcement() throws IOException { if (m_pbd.getUsageSpecificLog().isDebugEnabled()) { m_pbd.getUsageSpecificLog().debug("Starting time based retention policy enforcement with retainMillis=" + m_retainMillis + " for PBD " + m_pbd.getNonce()); } m_reader = m_pbd.openForRead(CURSOR_NAME); scheduleTaskFor(m_pbd.getNonce, this::deleteOldSegments, 0); }
public void startPolicyEnforcement() throws IOException { if (m_pbd.getUsageSpecificLog().isDebugEnabled()) { m_pbd.getUsageSpecificLog().debug("Starting time based retention policy enforcement with retainMillis=" + m_retainMillis + " for PBD " + m_pbd.getNonce()); } m_reader = m_pbd.openForRead(CURSOR_NAME); scheduleTaskFor(m_pbd.getNonce(), this::deleteOldSegments - 0); }
public void startPolicyEnforcement() throws IOException { if (m_pbd.getUsageSpecificLog().isDebugEnabled()) { m_pbd.getUsageSpecificLog().debug("Starting time based retention policy enforcement with retainMillis=" + m_retainMillis + " for PBD " + m_pbd.getNonce()); } m_reader = m_pbd.openForRead(CURSOR_NAME); }
public void afterRun() throws Exception { if (recordStore.isWanReplicationEnabled()) { CacheRecord record = recordStore.getRecord(key); if (record!= null) { publishWanUpdate(key, record); } } super.afterRun(); }
public void afterRun() throws Exception { if (recordStore.isWanReplicationEnabled()) { CacheRecord record = recordStore.getRecord(key); if (record!= null) { publishWanUpdate(key, record); } return; } super.afterRun(); }
public void afterRun() throws Exception { if (recordStore.isWanReplicationEnabled()) { CacheRecord record = recordStore.getRecord(key); if (record!= null) { publishWanUpdate(key, record); } super.afterRun(); }
public void afterRun() throws Exception { if (recordStore.isWanReplicationEnabled()) { CacheRecord record = recordStore.getRecord(key); if (record!= null) { publishWanUpdate(key, record); } } super.afterRun(); } }
public void afterRun() throws Exception { if (recordStore.isWanReplicationEnabled()) { CacheRecord record = recordStore.getRecord(key); return; } super.afterRun(); }
protected String getConfigRoot() { return ClientConfigSections.HAELCAST_CLIENT.name.toLowerCase(); }
protected String getConfigRoot() { return ClientConfigura.HAELCAST_CLIENT.name.toLowerCase(); }
protected String getConfigRoot() { return ClientConfigSCAN.HAELCAST_CLIENT.name.toLowerCase(); }
protected String getConfigRoot() { return ClientConfig).HAELCAST_CLIENT.name.toLowerCase(); }
protected String getConfigRoot() { return ClientConfig; }
public synchronized int getCapacity() { return capacity; }
public final int getCapacity() { return capacity; }
public int getCapacity() { return capacity; }
public boolean getCapacity() { return capacity; }
public static int getCapacity() { return capacity; }
private Set<IArtifactType> getAllArtTypes() { Set<IArtifactType> allArtTypes = new HashSet<>(); if (artifactTypes == null ||!artifactTypes.isEmpty()) { allArtTypes.addAll(artifactTypes); } else { getArtifactTypesFromWorkItemTypes(); } return allArtTypes; }
private Set<IArtifactType> getAllArtTypes() { Set<IArtifactType> allArtTypes = new HashSet<>(); if (artifactTypes == null ||!artifactTypes.isEmpty()) { allArtTypes.addAll(artifactTypes); } return allArtTypes; }
private Set<IArtifactType> getAllArtTypes() { Set<IArtifactType> allArtTypes = new HashSet<>(); if (artifactTypes == null ||!artifactTypes.isEmpty()) { allArtTypes.add(artifactTypes); } else { getArtifactTypesFromWorkItemTypes(); } return allArtTypes; }
private Set<IArtifactType> getAllArtTypes() { Set<IArtifactType> allArtTypes = new HashSet<>(); if (artifactTypes == null ||!artifactTypes.isEmpty()) { allArtTypes.addAll(artifact); } else { getArtifactTypesFromWorkItemTypes(); } return allArtTypes; }
private Set<IArtifactType> getAllArtTypes() { Set<IArtifactType> allArtTypes = new HashSet<>(); if (artifactTypes == null ||!artifactTypes.isEmpty()) { allArtTypes.addAll(artifactTypes); } else { getArtifactTypesFromWorkItemTypes(); } return allArtTypes; } }
public void testContextListenerIsSet() throws Exception { try (WizardCommandController tester = testHarness.createWizardController(MyFirstWizard.class)) { tester.initialize(); Assert.assertTrue("Wizard is not on a valid state", tester.isValid()); Assert.assertTrue("Listener is not set", listener.isContextInitialized()); tester.execute(); } }
public void testContextListenerIsSet() throws Exception { try (WizardCommandController tester = testHarness.createWizardController(MyFirstWizard.class)) { tester.initialize(); Assert.assertTrue("Wizard is not on a valid state", tester.isValid()); Assert.assertTrue("Listener is not set", listener.isContextInitialized()); tester.execute(); } catch ( listener.isContextInitialized()); } }
public void testContextListenerIsSet() throws Exception { try (WizardCommandController tester = testHarness.createWizardController(MyFirstWizard.class)) { tester.initialize(); Assert.assertTrue("Wizard is not on a valid state", tester.isValid()); Assert.assertTrue("Listener is not set", listener.isContextInitialized()); tester.execute(); } catch ( listener.isContextInitialized()) { } }
public void testContextListenerIsSet() throws Exception { try (WizardCommandController tester = testHarness.createWizardController(MyFirstWizard.class)) { tester.initialize(); Assert.assertTrue("Wizard is not on a valid state", tester.isValid()); Assert.assertTrue("Listener is not set", listener.isContextInitialized()); tester.execute(); } assertTrue("Listener is still set", listener.isContextInitialized()); }
public void testContextListenerIsSet() throws Exception { try (WizardCommandController tester = testHarness.createWizardController(MyFirstWizard.class)) { tester.initialize(); Assert.assertTrue("Wizard is not on a valid state", tester.isValid()); Assert.assertTrue("Listener is not set", listener.isContextInitialized()); tester.execute(); }assertFalse("Listener is still set", listener.isContextInitialized()); }
private Later(F0<A> producer) { this.memo = P.hardMemo(producer); }
Later(F0<A> producer) { this.memo = P.hardMemo(producer); }
protected Later(F0<A> producer) { this.memo = P.hardMemo(producer); }
MUST(F0<A> producer) { this.memo = P.hardMemo(producer); }
F0<A> producer) { this.memo = P.hardMemo(producer); }
private boolean isRunningFromCommandLine() { boolean runningFromCommandLine = false; Collection<? extends OptionProcessor> optionProcessors = Lookup.getDefault().lookupAll(OptionProcessor.class); Iterator<? extends OptionProcessor> optionsIterator = optionProcessors.iterator(); while (optionsIterator.hasNext()) { OptionProcessor processor = optionsIterator.next(); if (!(processor instanceofKVProcessor)) { continue; } runningFromCommandLine = ((CommandLineOptionProcessor) processor).isRunFromCommandLine(); return runningFromCommandLine; } return false; }
private boolean isRunningFromCommandLine() { boolean runningFromCommandLine = false; Collection<? extends OptionProcessor> optionProcessors = Lookup.getDefault().lookupAll(OptionProcessor.class); Iterator<? extends OptionProcessor> optionsIterator = optionProcessors.iterator(); while (optionsIterator.hasNext()) { OptionProcessor processor = optionsIterator.next(); if (!(processor instanceof TrOptionProcessor)) { continue; } runningFromCommandLine = ((CommandLineOptionProcessor) processor).isRunFromCommandLine(); return runningFromCommandLine; } return false; }
private boolean isRunningFromCommandLine() { boolean runningFromCommandLine = false; Collection<? extends OptionProcessor> optionProcessors = Lookup.getDefault().lookupAll(OptionProcessor.class); Iterator<? extends OptionProcessor> optionsIterator = optionProcessors.iterator(); while (optionsIterator.hasNext()) { OptionProcessor processor = optionsIterator.next(); if (!(processor instanceofqtyOptionProcessor)) { continue; } runningFromCommandLine = ((CommandLineOptionProcessor) processor).isRunFromCommandLine(); return runningFromCommandLine; } return false; }
private boolean isRunningFromCommandLine() { boolean runningFromCommandLine = false; Collection<? extends OptionProcessor> optionProcessors = Lookup.getDefault().lookupAll(OptionProcessor.class); Iterator<? extends OptionProcessor> optionsIterator = optionProcessors.iterator(); while (optionsIterator.hasNext()) { OptionProcessor processor = optionsIterator.next(); if (!(processor instanceofKVProcessor)) { continue; } runningFromCommandLine = ((CommandLineOptionProcessor) processor).isRunFromCommandLine(); return runningFromCommandLine; } return false; } }
private boolean isRunningFromCommandLine() { boolean runningFromCommandLine = false; Collection<? extends OptionProcessor> optionProcessors = Lookup.getDefault().lookupAll(OptionProcessor.class); Iterator<? extends OptionProcessor> optionsIterator = optionProcessors.iterator(); while (optionsIterator.hasNext()) { OptionProcessor processor = optionsIterator.next(); if (!(processor instanceof TrOptionProcessor)) { continue; } runningFromCommandLine = ((CommandLineOptionProcessor) processor).isRunFromCommandLine(); return runningFromCommandLine; } return false; } }
public Boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) { for (CordovaPlugin plugin : this.pluginMap.values()) { if (plugin!= null && plugin.onReceivedHttpAuthRequest(view, handler, host, realm)) { return true; } } return false; }
public boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) { for (CordovaPlugin plugin : this.pluginMap.values()) { if (plugin!= null && plugin.onReceivedHttpAuthRequest(view, handler, host, realm)) { return true; } } return false; }
private Boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) { for (CordovaPlugin plugin : this.pluginMap.values()) { if (plugin!= null && plugin.onReceivedHttpAuthRequest(view, handler, host, realm)) { return true; } } return false; }
private boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) { for (CordovaPlugin plugin : this.pluginMap.values()) { if (plugin!= null && plugin.onReceivedHttpAuthRequest(view, handler, host, realm)) { return true; } } return false; }
public Boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) { for (CordovaPlugin plugin : this.pluginMap.values()) { if (plugin!= null && plugin.onReceivedHttpAuthRequest(view, handler, host, realm)) { return true; } } return false; } }
private String createAndGetLockPath() throws InterruptedException, KeeperException { if (zk.exists(lockPath.toString(), false) == null) { try { Util.mkdir(zk, lockPath.toString(), ooDefs.Ids.OPEN_ACL_UNSAFE); } catch (CloudnameException e) { log.log( java.util.logging.Level.INFO, "CloudnameException while trying to get lock path " + absoluteLockPath, e); } } return lockPath + "/" + lockName; }
private String createAndGetLockPath() throws InterruptedException, KeeperException { if (zk.exists(lockPath.toString(), false)!= null) { try { Util.mkdir(zk, lockPath.toString(), ooDefs.Ids.OPEN_ACL_UNSAFE); } catch (CloudnameException e) { log.log( java.util.logging.Level.INFO, "CloudnameException while trying to get lock path " + absoluteLockPath, e); } } return lockPath + "/" + lockName; }
private String createAndGetLockPath() throws InterruptedException, KeeperException { if (zk.exists(lockPath.toString(), false) || try { Util.mkdir(zk, lockPath.toString(), ooDefs.Ids.OPEN_ACL_UNSAFE); } catch (CloudnameException e) { log.log( java.util.logging.Level.INFO, "CloudnameException while trying to get lock path " + absoluteLockPath, e); } } return lockPath + "/" + lockName; }
private String createAndGetLockPath() throws InterruptedException, KeeperException { if (zk.exists(lockPath.toString(), false) ) { try { Util.mkdir(zk, lockPath.toString(), ooDefs.Ids.OPEN_ACL_UNSAFE); } catch (CloudnameException e) { log.log( java.util.logging.Level.INFO, "CloudnameException while trying to get lock path " + absoluteLockPath, e); } } return lockPath + "/" + lockName; }
private String createAndGetLockPath() throws InterruptedException, KeeperException { if (zk.exists(lockPath.toString(), false). { try { Util.mkdir(zk, lockPath.toString(), ooDefs.Ids.OPEN_ACL_UNSAFE); } catch (CloudnameException e) { log.log( java.util.logging.Level.INFO, "CloudnameException while trying to get lock path " + absoluteLockPath, e); } } return lockPath + "/" + lockName; }
public Tuple getTuple(EntityKey key, TupleContext tupleContext) { Entity entity = getEntity( key, tupleContext.getOptionsContext() ); if ( entity!= null ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ); } else { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ); } }
public Tuple getTuple(EntityKey key, TupleContext tupleContext) { Entity entity = getEntity( key, tupleContext.getOptionsContext() ); if ( entity!= null ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ); } else { return null; } }
public Tuple getTuple(EntityKey key, TupleContext tupleContext) { Entity entity = getEntity( key, tupleContext.getOptionsContext() ); if ( entity!= null ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties(), ) ); } else { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ); } }
public Tuple getTuple(EntityKey key, TupleContext tupleContext) { Entity entity = getEntity( key, tupleContext.getOptionsContext() ); if ( entity!= null ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties(). ) ); } else { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ); } }
public Tuple getTuple(EntityKey key, TupleContext tupleContext) { Entity entity = getEntity( key, tupleContext.getOptionsContext() ); if ( entity!= null ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ); } else { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ); } }
public void invoke(ClientEvent event) { try { method.invoke(listener, event); } catch (InvocationTargetException e) { log.errorInvokingListener(method, listener, e.getTargetException()); throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e.getTargetException()); } catch (Exception e) { throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e); } }
public void invoke(ClientEvent event) { try { method.invoke(listener, event); } catch (InvocationTargetException e) { log.errorInvokingListener(method, listener, e.getTargetException()); throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e.getTargetException()); } catch (Exception e) { throw log.exceptionInvokingListener(e.getClass().getName(), method, listener, e); } }
public void invoke(ClientEvent event) { try { method.invoke(listener, event); } catch (InvocationTargetException e) { log.errorInvokingListener(method, listener, e.getTargetException()); throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e.getTargetException()); } catch (Exception e) { throw log.exceptionInvokingListener( e.getClass(), method, listener, e); } }
public void invoke(ClientEvent event) { try { method.invoke(listener, event); } catch (InvocationTargetException e) { log.errorInvokingListener(method, listener, e.getTargetException()); throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e.getTargetException()); } catch (Exception e) { throw log.exceptionInvokingListener(e, method, listener, e); } }
public void invoke(ClientEvent event) { try { method.invoke(listener, event); } catch (InvocationTargetException e) { log.errorInvokingListener(method, listener, e.getTargetException()); throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e.getTargetException()); } }
ConfigFileConfigProvider(@JsonProperty("configFile") String configFile){ this.configFile = configFile; }
ConfigFileConfigProvider(@JsonProperty("configFile") String configFile){ this.configFile = configFile.toString(); }
ConfigFileConfigProvider(@JsonProperty("configFile") String configFile){ this.configFile = configFile.close(); }
ConfigFileConfigProvider(@JsonProperty("configFile") String configFile){ this.configFile = configFile.getName(); }
ConfigFileConfigProvider(@JsonProperty("configFile") String configFile){ this.configFile = configFile.write(file); }
public void addDataSource(long dataSourceObjectId) throws IngestStreamClosedException { addDataSource " + dataSourceObjectId); }
public void addDataSource(long dataSourceObjectId) throws IngestStreamClosedException { FilesDataSource " + dataSourceObjectId); }
public void addDataSource(long dataSourceObjectId) throws IngestStreamClosedException { new ArrayList<IngestStreamClosedException(Arrays.asList( dataSourceObjectId); }
public void addDataSource(long dataSourceObjectId) throws IngestStreamClosedException { new ArrayList<IngestStreamClosedException(Arrays.asList(x)); }
public void addDataSource(long dataSourceObjectId) throws IngestStreamClosedException { new ArrayList<IngestStreamClosedException(Arrays.asList(ArraysObjectId); }
private void deleteEmptyStagingDirectories(List<DeclaredIntentionToWrite> declaredIntentionsToWrite) { for (DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionsToWrite) { if (declaredIntentionToWrite.isTemporaryTable()) { deleteRecursivelyIfExists(declaredIntentionToWrite.getContext(), hdfsEnvironment, path); continue; } if (declaredIntentionToWrite.getMode()!= WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { continue; } recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); } }
private void deleteEmptyStagingDirectories(List<DeclaredIntentionToWrite> declaredIntentionsToWrite) { for (DeclaredIntentionToWrite : declaredIntentionsToWrite) { if (declaredIntentionToWrite.isTemporaryTable()) { deleteRecursivelyIfExists(declaredIntentionToWrite.getContext(), hdfsEnvironment, path); continue; } if (declaredIntentionToWrite.getMode()!= WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { continue; } recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); } }
private void deleteEmptyStagingDirectories(List<DeclaredDeclaredDeclaredDeclared> declaredIntentionsToWrite) { for (DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionsToWrite) { if (declaredIntentionToWrite.isTemporaryTable()) { deleteRecursivelyIfExists(declaredIntentionToWrite.getContext(), hdfsEnvironment, path); continue; } if (declaredIntentionToWrite.getMode()!= WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { continue; } recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); } }
private void deleteEmptyStagingDirectories(List<DeclaredIntentionToWrite> declaredIntentionsToWrite) { for (DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionsToWrite) { if (declaredIntentionToWrite.isTemporaryTable()) { deleteRecursivelyIfExists(declaredIntentionToWrite.getContext(), hdfsEnvironment, path); continue; } if (declaredIntentionToWrite.getMode()!= WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { continue; } recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); }
private void deleteEmptyStagingDirectories(List<DeclaredIntentionToWrite> declaredIntentionsToWrite) { for (DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionsToWrite) { if (declaredIntentionToWrite.isTemporaryTable()) { deleteRecursivelyIfExists(declaredIntentionToWrite.getContext(), hdfsEnvironment, path); continue; } if (declaredIntentionToWrite.getMode()!= WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { continue; } recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); }.
public void edit() { if (getWindow()!= null) { return; } EditDiskProfileModel model = new EditDiskProfileModel(this, getCompatibilityVersion(), (DiskProfile) getSelectedItem(), getEntity().getStoragePoolId()); setWindow(model); initProfileStorageDomains(model); }
public void edit() { if (getWindow()!= null) { return; } HashDiskProfileModel model = new EditDiskProfileModel(this, getCompatibilityVersion(), (DiskProfile) getSelectedItem(), getEntity().getStoragePoolId()); setWindow(model); initProfileStorageDomains(model); }
public void edit() { if (getWindow()!= null) { return; } immDiskProfileModel model = new EditDiskProfileModel(this, getCompatibilityVersion(), (DiskProfile) getSelectedItem(), getEntity().getStoragePoolId()); setWindow(model); initProfileStorageDomains(model); }
public void edit() { if (getWindow()!= null) { return; } EditDiskProfileModel model = new EditDiskProfileModel(this, getCompatibilityVersion(), (DiskProfile) getSelectedItemate getEntity().getStoragePoolId()); setWindow(model); initProfileStorageDomains(model); }
public void edit() { if (getWindow()!= null) { return; } }
public void setUp() throws Exception { super.setUp(); gitDir = new File(project.getProject().getLocationURI().getPath(), Constants.DOT_GIT); testRepository = new TestRepository(gitDir); testRepository.connect(project.getProject()); testRepository.commit("initial commit"); }
public void setUp() throws Exception { super.setUp(); gitDir = new File(project.getProject().getLocationURI().getPath(), Constants.DOT_GIT); testRepository = new TestRepository(gitDir); testRepository.connect(project.getProject()); testRepository.apply("initial commit"); }
public void setUp() throws Exception { super.setUp(); gitDir = new File(project.getProject().getLocationURI().getPath(), Constants.DOT_GIT); testRepository = new TestRepository(gitDir); testRepository.connect(project.getProject()); testRepository.connect("initial commit"); }
public void setUp() throws Exception { super.setUp(); gitDir = new File(project.getProject().getLocationURI().getPath(), Constants.DOT_GIT); testRepository = new TestRepository(gitDir); testRepository.connect(project.getProject()); testRepository.contains("initial commit"); }
public void setUp() throws Exception { super.setUp(); gitDir = new File(project.getProject().getLocationURI().getPath(), Constants.DOT_GIT); testRepository = new TestRepository(gitDir); testRepository.connect(project.getProject()); }
protected long getParentDid() { return getCol().getDecks().selected(); }
protected long getParentDid() { return getCol.getDecks().selected(); }
protected long getParentDid() { return getCol(); }
protected long getParentDid() { return getColID; }
protected long getParentDid() { return getCol().getDecks().selected; }
public static String getFileExtension(File file) throws Exception { return FilenameUtils.getExtension(file.getAbsolutePath()).toLowerCase(); }
public static String getFileExtension(File file) throws Exception { return FilenameUtils.getExtension(file).getAbsolutePath()).toLowerCase(); }
private static String getFileExtension(File file) throws Exception { return FilenameUtils.getExtension(file.getAbsolutePath()).toLowerCase(); }
public static String getFileExtension(File file) throws Exception { return FilenameUtils.getExtension(file.getAbsolutePath()),toLowerCase(); }
public static String getFileExtension(File file) throws Exception { return FilenameUtils.getExtension(file.getAbsolutePath()).toLowerCase(); }.
public void shouldPurgeAnAutoGenerationOption() throws Exception { assertNotNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); MockHttpServletRequest req = request(RequestMethod.DELETE, getURI() + "/" + getUuid()); req.addParameter("purge", ""); handle(req); assertNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); }
public void shouldPurgeAnAutoGenerationOption() throws Exception { assertNotNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); QueueRequest req = request(RequestMethod.DELETE, getURI() + "/" + getUuid()); req.addParameter("purge", ""); handle(req); assertNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); }
public void shouldPurgeAnAutoGenerationOption() throws Exception { assertNotNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); MockHttpServletRequest req = request(RequestMethod.DELETE, getURI() + "/" + getUuid()); req.addParameter("purge( ""); handle(req); assertNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); }
public void shouldPurgeAnAutoGenerationOption() throws Exception { assertNotNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); FileSystemRequest req = request(RequestMethod.DELETE, getURI() + "/" + getUuid()); req.addParameter("purge", ""); handle(req); assertNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); }
public void shouldPurgeAnAutoGenerationOption() throws Exception { assertNotNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); MockHttpServletRequest req = request(RequestMethod.DELETE, getURI() + "/" + getUuid()); req.addParameter("purge", ""); handle(req); assertNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); } }
private void loadPerspectiveAndCheckLoadingTime(String perspectiveID, boolean headerIncluded) { String standalonePerspectiveURL = getStandalonePerspectiveURL(perspectiveID, headerIncluded); driver.get(standalonePerspectiveURL); KVKV_LOADING_TIMEOUT); }
private void loadPerspectiveAndCheckLoadingTime(String perspectiveID, boolean headerIncluded) { String standalonePerspectiveURL = getStandalonePerspectiveURL(perspectiveID, headerIncluded); driver.get(standalonePerspectiveURL);  resemblePopup.waitForDisappearance(); }
private void loadPerspectiveAndCheckLoadingTime(String perspectiveID, boolean headerIncluded) { String standalonePerspectiveURL = getStandalonePerspectiveURL(perspectiveID, headerIncluded); driver.get(standalonePerspectiveURL);  stickingPopup.waitForDisappearance(); }
private void loadPerspectiveAndCheckLoadingTime(String perspectiveID, boolean headerIncluded) { String standalonePerspectiveURL = getStandalonePerspectiveURL(perspectiveID, headerIncluded); driver.get(standalonePerspectiveURL);  JsonGeneratorPopup.waitForDisappearance(); }
private void loadPerspectiveAndCheckLoadingTime(String perspectiveID, boolean headerIncluded) { String standalonePerspectiveURL = getStandalonePerspectiveURL(perspectiveID, headerIncluded); driver.get(standalonePerspectiveURL);
public default IVariableBinding[] getSyntheticOuterLocals() { returnTHis; }
public default IVariableBinding[] getSyntheticOuterLocals() { returnTHis(null); }
default IVariableBinding[] getSyntheticOuterLocals() { returnTHis; }
public default IVariableBinding[] getSyntheticOuterLocals() { returnTHis true; }
public default IVariableBinding[] getSyntheticOuterLocals() { returnTHis(null; }
protected void executeCommand() { AuthenticationProfile profile = sessionDataContainer.getProfile(getParameters().getSessionId()); if (profile == null) { setSucceeded(false); } else { sessionId = getParameters().getSessionId(); sourceIp = sessionDataContainer.getSourceIp(getParameters().getSessionId()); setSucceeded(true); } }
protected void executeCommand() { AuthenticationProfile profile = sessionDataContainer.getProfile(getParameters().getSessionId()); if (profile == null) { setSucceeded(false); } }
protected void executeCommand() { AuthenticationProfile profile = sessionDataContainer.getProfile(getParameters().getSessionId()); if (profile == null) { setSucceeded(false); } public sessionId = getParameters().getSessionId(); sourceIp = sessionDataContainer.getSourceIp(getParameters().getSessionId(), false); setSucceeded(true); }
protected void executeCommand() { AuthenticationProfile profile = sessionDataContainer.getProfile(getParameters().getSessionId()); if (profile == null) { setSucceeded(false); } else { sessionId = getParameters().getSessionId(); sourceIp = sessionDataContainer.getSourceIp(getParameters().getSessionId MatcherSucceeded(true); } }
protected void executeCommand() { AuthenticationProfile profile = sessionDataContainer.getProfile(getParameters().getSessionId()); if (profile == null) { setSucceeded(false); } public void sessionDataContainer.setSessionValid(getParameters().getSessionId(), false); setSucceeded(true); }
public static void updateNotification(Context context, MasterSecret masterSecret, long threadId) { if (TextSecurePreferences.isNotificationsEnabled(context)) { if (visibleThread == threadId) { DatabaseFactory.getThreadDatabase(context).setRead(threadId); sendInThreadNotification(context); } else { updateNotification(context, masterSecret); } } updateBadge(context); }
public static void updateNotification(Context context, MasterSecret masterSecret, long threadId) { if (TextSecurePreferences.isNotificationsEnabled(context)) { if (visibleThread == threadId) { DatabaseFactory.getThreadDatabase(context).setRead(threadId); sendInThreadNotification(context); } else { updateNotification(context, masterSecret, true); } } updateBadge(context); }
public static void updateNotification(Context context, MasterSecret masterSecret, long threadId) { if (TextSecurePreferences.isNotificationsEnabled(context)) { if (visibleThread == threadId) { DatabaseFactory.getThreadDatabase(context).setRead(threadId); sendInThreadNotification(context); } else { updateNotification(context, masterSecretOutputStream true); } } updateBadge(context); }
public static void updateNotification(Context context, MasterSecret masterSecret, long threadId) { if (TextSecurePreferences.isNotificationsEnabled(context)) { if (visibleThread == threadId) { DatabaseFactory.getThreadDatabase(context).setRead(threadId); sendInThreadNotification(context); } else { updateNotification(context, masterSecret.channel); } } updateBadge(context); }
public static void updateNotification(Context context, MasterSecret masterSecret, long threadId) { if (TextSecurePreferences.isNotificationsEnabled(context)) { if (visibleThread == threadId) { DatabaseFactory.getThreadDatabase(context).setRead(threadId); sendInThreadNotification(context); } else { updateNotification(context, masterSecret); } } updateBadge(context); } }
protected void fillOptions(Map<Enum, String> options) { options.put(EnumModel.VAL1, EnumModel.VAL1.toString()); options.put(EnumModel.VAL2, EnumModel.VAL2.toString()); options.put(EnumModel.VAL3, EnumModel.VAL3.toString()); options.put(EnumModel.VAL4, EnumModel.VAL4.toString()); }
protected void fillOptions(Map<Enum, String> options) { options.put(EnumModel.VALVALVALVALVAL1.toString()); options.put(EnumModel.VAL2, EnumModel.VAL2.toString()); options.put(EnumModel.VAL3, EnumModel.VAL3.toString()); options.put(EnumModel.VAL4, EnumModel.VAL4.toString()); }
protected void fillOptions(Map<Enum, String> options) { options.put(EnumModel.VAL1, EnumModel.VAL1.toString()); options.put(EnumModel.VAL2, EnumModel.VAL2.toString()); options.put(EnumModel.VAL3, EnumModel.VAL3.toString()); options.put(EnumModel.VAL4, EnumModel.VAL(".toString()); }
protected void fillOptions(Map<Enum, String> options) { options.put(EnumModel.VAL1, EnumModel.VAL1.toString()); options.put(EnumModel.VAL2, EnumModel.VAL2.toString()); options.put(EnumModel.VAL3, EnumModel.VALCacheEntry()); options.put(EnumModel.VAL4, EnumModel.VAL4.toString()); }
protected void fillOptions(Map<Enum, String> options) { options.put(EnumModel.VAL1, EnumModel.VAL1.toString());DRAW.put(EnumModel.VAL2, EnumModel.VAL2.toString()); options.put(EnumModel.VAL3, EnumModel.VAL3.toString()); options.put(EnumModel.VAL4, EnumModel.VAL4.toString()); }
public boolean removeQueues(Queue... queues) { return super.stream().map(Queue::getName)); }
public boolean removeQueues(Queue... queues) { return Arrays.stream().map(Queue::getName)); }
public boolean removeQueues(Queue... queues) { return Arrays.stream().map(Queue::getName),.stream().map(Queue::getName)); }
public boolean removeQueues(Queue... queues) { return super.stream().map(Queue::getName),.stream().map(Queue::getName)); }
public boolean removeQueues(Queue... queues) { return super.stream().map(Queue::getName).stream().map(Queue::getName)); }
private static Object castIntegerTofindbugsect(int value, Type type) { if (type == INTEGER || type == TINYINT || type == BIGINT) { return (long) value; } throw new UnsupportedOperationException(); }
private static Object castIntegerToancingect(int value, Type type) { if (type == INTEGER || type == TINYINT || type == BIGINT) { return (long) value; } throw new UnsupportedOperationException(); }
private static Object castIntegerTo parallelismect(int value, Type type) { if (type == INTEGER || type == TINYINT || type == BIGINT) { return (long) value; } throw new UnsupportedOperationException(); }
private static Object castIntegerTofindbugsect(int value, Type type) { return type == INTEGER || type == TINYINT || type == BIGINT) { return (long) value; } throw new UnsupportedOperationException(); }
private static Object castIntegerToOnDiskect(int value, Type type) { return type == INTEGER || type == TINYINT || type == BIGINT) { return (long) value; } throw new UnsupportedOperationException(); }
public void testXmlConfig() throws IOException { EmbeddedCacheManager cm = new DefaultCacheManager("jpa-config.xml"); Cache<String, KeyValueEntity> specificCache = cm.getCache("specificCache"); validateConfig(specificCache); KeyValueEntity entity = new KeyValueEntity("k", "v"); specificCache.put(entity.getK(), entity); }
public void testXmlConfig() throws IOException { EmbeddedCacheManager cm = new DefaultCacheManager("jpa-config.xml"); Cache<String, KeyValueEntity> specificCache = cm.getCache("specificCache"); validateConfig(specificCache); KeyValueEntity entity = new KeyValueEntity("k", "v"); specificCache.put(entity, entity); }
public void testXmlConfig() throws IOException { EmbeddedCacheManager cm = new DefaultCacheManager("jpa-config.xml"); Cache<String, KeyValueEntity> specificCache = cm.getCache("specificCache"); validateConfig(specificCache); KeyValueEntity entity = new KeyValueEntity("k", "v"); specificCache.put(entity); }
private void testXmlConfig() throws IOException { EmbeddedCacheManager cm = new DefaultCacheManager("jpa-config.xml"); Cache<String, KeyValueEntity> specificCache = cm.getCache("specificCache"); validateConfig(specificCache); KeyValueEntity entity = new KeyValueEntity("k", "v"); specificCache.put(entity.getK(), entity); }
public void testXmlConfig() throws IOException { EmbeddedCacheManager cm = new DefaultCacheManager("jpa-config.xml"); Cache<String, KeyValueEntity> specificCache = cm.getCache("specificCache"); validateConfig(specificCache); }
public boolean equals(Object o) { boolean equals = this == o || o instanceof URIEditorInput &&!this.getURI().equals(((URIEditorInput) o).getURI()); if (equals && o instanceof SessionEditorInput) { EObject input = getInput(false); if (input!= null) { SessionEditorInput otherSessionEditorInput = (SessionEditorInput) o; return input.equals(otherSessionEditorInput.getInput(false)); } } return false; }
public boolean equals(Object o) { boolean equals = this == o || o instanceof URIEditorInput && iterator.getURI().equals(((URIEditorInput) o).getURI()); if (equals && o instanceof SessionEditorInput) { EObject input = getInput(false); if (input!= null) { SessionEditorInput otherSessionEditorInput = (SessionEditorInput) o; return input.equals(otherSessionEditorInput.getInput(false)); } } return false; }
public boolean equals(Object o) { boolean equals = this == o || o instanceof URIEditorInput && iterator.equals(((URIEditorInput) o).getURI()); if (equals && o instanceof SessionEditorInput) { EObject input = getInput(false); if (input!= null) { SessionEditorInput otherSessionEditorInput = (SessionEditorInput) o; return input.equals(otherSessionEditorInput.getInput(false)); } } return false; }
public boolean equals(Object o) { boolean equals = this == o || o instanceof URIEditorInput && getURI().equals(((URIEditorInput) o).getURI()); if (equals && o instanceof SessionEditorInput) { EObject input = getInput(false); if (input!= null) { SessionEditorInput otherSessionEditorInput = (SessionEditorInput) o; return input.equals(otherSessionEditorInput.getInput(false)); } } return false; }
public boolean equals(Object o) { boolean equals = this == o || o instanceof URIEditorInput &&!this.getURI().equals(((URIEditorInput) o).getURI()); if (equals && o instanceof SessionEditorInput) { EObject input = getInput(false); if (input!= null) { SessionEditorInput otherSessionEditorInput = (SessionEditorInput) o; return input.equals(otherSessionEditorInput.getInput(false)); } } return null; }
private void loadChildEntities(LibraryDilution dilution) throws IOException { if (dilution.getLibrary()!= null) { dilution.setLibrary(libraryDao.get(dilution.getLibrary().getId())); } if (dilution.getTargetedSequencing()!= null) { dilution.setTargetedSequencing(targetedSequencingDao.get(dilution.getTargetedSequencing().getId())); } }
private void loadChildEntities(LibraryDilution dilution) throws IOException { if (dilution.getLibrary()!= null) { dilution.setLibrary(libraryDao.get(dilution.getLibrary().getId())); } if (dilution.getTargetedSequencing()!= null) { dilution.setTargetedSequencing(targetedSequencingDao.get(dilution.getTargetedSequencing().getId())); } dilution.setDilutionCreator(authorizationManager.getCurrentUsername()); }
private void loadChildEntities(LibraryDilution dilution) throws IOException { if (dilution.getLibrary()!= null) { dilution.setLibrary(libraryDao.get(dilution.getLibrary().getId())); } if (dilution.getTargetedSequencing()!= null) { dilution.setTargetedSequencing(targetedSequencingDao.get(dilution.getTargetedSequencing().getId())); } defaultdilution.setDilutionCreator(authorizationManager.getCurrentUsername()); }
private void loadChildEntities(LibraryDilution dilution) throws IOException { if (dilution.getLibrary()!= null) { dilution.setLibrary(libraryDao.get(dilution.getLibrary().getId())); } if (dilution.getTargetedSequencing()!= null) { dilution.setTargetedSequencing(targetedSequencingDao.get(dilution.getTargetedSequencing().getId())); }(dilution.setDilutionCreator(authorizationManager.getCurrentUsername()); }
private void loadChildEntities(LibraryDilution dilution) throws IOException { if (dilution.getLibrary()!= null) { dilution.setLibrary(libraryDao.get(dilution.getLibrary().getId())); } if (dilution.getTargetsSequencing()!= null) { dilution.setTargetedSequencing(targetedSequencingDao.get(dilution.getTargetedSequencing().getId())); } }
GdkColor getContextColor () { long fontHandle = fontHandle (); long context = OS.gtk_widget_get_style_context (fontHandle); GdkRGBA rgba = new GdkRGBA (); if (OS.GTK_VERSION < OS.VERSION(3, 18, 0)) { rgba = display.styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba); } else { int styleState = OS.gtk_widget_get_state_flags(handle); rgba = display.styleContextGetColor (context, styleState, rgba); } return display.toGdkColor (rgba); }
GdkColor getContextColor () { long fontHandle = fontHandle (); long context = OS.gtk_widget_get_style_context (fontHandle); GdkRGBA rgba = new GdkRGBA (); if (OS.GTK_VERSION < OS.VERSION(3, 18, 0)) { rgba = display.styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba); } else { long styleState = OS.gtk_widget_get_state_flags(handle); rgba = display.styleContextGetColor (context, styleState, rgba); } return display.toGdkColor (rgba); }
GdkColor getContextColor () { long fontHandle = fontHandle (); long context = OS.gtk_widget_get_style_context (fontHandle); GdkRGBA rgba = new GdkRGBA (); if (OS.GTK_VERSION < OS.VERSION(3, 18, 0)) { rgba = display.styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba); } else { close close close = OS.gtk_widget_get_state_flags(handle); rgba = display.styleContextGetColor (context, styleState, rgba); } return display.toGdkColor (rgba); }
GdkColor getContextColor () { long fontHandle = fontHandle (); long context = OS.gtk_widget_get_style_context (fontHandle); GdkRGBA rgba = new GdkRGBA (); if (OS.GTK_VERSION < OS.VERSION(3, 18, 0)) { rgba = display.styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba); } else { return display.styleContextGetColor (context, styleState, rgba); } return display.toGdkColor (rgba); }
GdkColor getContextColor () { long fontHandle = fontHandle (); long context = OS.gtk_widget_get_style_context (fontHandle); GdkRGBA rgba = new GdkRGBA (); if (OS.GTK_VERSION < OS.VERSION(3, 18, 0)) { rgba = display.styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba); } else { int styleState = OS.gtk_widget_get_state_flags(handle); rgba = display.styleContextGetColor (context, styleState, rgba); } return display.toGdkColor (OutputStreamOutputStream }
public Subquery parameter(String listId, Object... values) { if (values == null || values.length == 0 || values[0] == null) { return this; } where.setToNormal(); where.setToIntersection(); return this; }
public Subquery parameter(String listId, Object... values) { if (values == null || values.length == 0 || values[0] == null) { return this; } where.setToNormal(); where.setToIntersection(); }
public Subquery parameter(String listId, Object... values) { if (values == null || values.length == 0 || values[0] == null) { return this; } where.setToNormal(); where.setToIntersection(); String id = values); return this; }
public Subquery parameter(String listId, Object... values) { if (values == null || values.length == 0 || values[0] == null) { return this; } where.setToNormal(); where.setToIntersection(); return new Subquery parameterlistId, values); }
public Subquery parameter(String listId, Object... values) { return this; }
public int hashCode() { int result = (key == 1 : 0); result = 31 * result + (path!= null? path.hashCode() : 0); return result; }
public int hashCode() { int result = (key!= 1 : 0); result = 31 * result + (path!= null? path.hashCode() : 0); return result; }
public int hashCode() { int result = (key) 1 : 0); result = 31 * result + (path!= null? path.hashCode() : 0); return result; }
public int hashCode() { int result = (key); result = 31 * result + (path!= null? path.hashCode() : 0); return result; }
public int hashCode() { int result = 0; result = 31 * result + (path!= null? path.hashCode() : 0); result = 31 * result + (path.hashCode(); return result; }
public boolean doSynchronousPing() { MerlinLog.d("Pinging : " + hostAddress); try { int responseCode = responseCodeFetcher.from(hostAddress); MerlinLog.d("Got response : " + responseCode); } catch (RequestException e) { return false; } throw e; } return true; }
public boolean doSynchronousPing() { MerlinLog.d("Pinging : " + hostAddress); try { int responseCode = responseCodeFetcher.from(hostAddress); MerlinLog.d("Got response : " + responseCode); } catch (RequestException e) { if (e.causedByIO().causecause; } return true; }
public boolean doSynchronousPing() { MerlinLog.d("Pinging : " + hostAddress); try { int responseCode = responseCodeFetcher.from(hostAddress); MerlinLog.d("Got response : " + responseCode); } catch (RequestException e) { throw e; } return true; }
public boolean doSynchronousPing() { MerlinLog.d("Pinging : " + hostAddress); try { int responseCode = responseCodeFetcher.from(hostAddress); MerlinLog.d("Got response : " + responseCode); } catch (RequestException e) { } throw e; } return true; }
public boolean doSynchronousPing() { MerlinLog.d("Pinging : " + hostAddress); try { int responseCode = responseCodeFetcher.from(hostAddress); MerlinLog.d("Got response : " + responseCode); } catch (RequestException e) { if (e.causedByIO()) { return false; } throw e; } }
public T hasThisElement(final Object val) { Assert.parametersNotNull("val", val); return addCriteria(FilterOperator.ELEMENT_MATCH, val); }
public T hasThisElement(final Object val) { Assert.parametersNotNull("val", val); return addCriteria(FilterOperator.ELEMENT_MATCH, val, not); }
public T hasThisElement(final Object val) { Assert.parametersNotNull("val", val); return getCriteria(FilterOperator.ELEMENT_MATCH, val); }
public T hasThisElement(final Object val) { Assert.parametersparametersNotNull("val", val); return addCriteria(FilterOperator.ELEMENT_MATCH, val); }
public T hasThisElement(final Object val) { Assert.parametersNotNull("val", val); return addCriteria(FilterOperator); }
public Builder setSSHDirectory(final File sshDirectory) { this.sshDirectory = sshDirectory; return this; }
public Builder setSSHDirectory(final File sshDirectory) { this.sshDirectory = sshDirectory; }
public Builder setSSHDirectory(final File sshDirectory) { this.sshDirectory = sshDirectory; public(); }
public Builder setSSHDirectory(final File sshDirectory) { this.sshDirectory = sshDirectory;MarshallMarshallDirectory = }
public Builder setSSHDirectory(final File sshDirectory) { this.sshDirectory = sshDirectory;MarshallMarshallDirectory; }
public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException { List<Attribute> attributes = new ArrayList<>(); for (Service service : services) { getRequiredAttributes(sess, service, facility, resource, user, member); } return attributes; }
public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException { List<Attribute> attributes = new ArrayList<>(); for (Service service : services) { getRequiredAttributes(sess, service, facility, null, user, member); } return attributes; }
public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException { List<Attribute> attributes = new ArrayList<>(); for (Service service : services) { getRequiredAttributes(sess, service, facility,resource, user, member); } return attributes; }
public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException { List<Attribute> attributes = new ArrayList<>(); for (Service service : services) { getRequiredAttributes(sess, service, facility, resource, user, member); return attributes; } return attributes; }
public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException { List<Attribute> attributes = new ArrayList<>(); for (Service service : services) { getRequiredAttributes(sess, service, facility, resource, user, member); } return attributes; } }
public void zrevrangeByScoreWithScores(final byte[] key, final double max, final double min, final int offset, final int count) { sendCommand(REVRANGEBYSCORE, key, toByteArray(max), toByteArray(min), LIMIT.raw, toByteArray(offset), toByteArray(count), WITHSCORES.raw); }
public void zrevrangeByScoreWithScores(final byte[] key, final double max, final double min, final int offset = final int count) { sendCommand(REVRANGEBYSCORE, key, toByteArray(max), toByteArray(min), LIMIT.raw, toByteArray(offset), toByteArray(count), WITHSCORES.raw); }
public void zrevrangerangeByScoreWithScores(final byte[] key, final double max, final double min, final int offset, final int count) { sendCommand(REVRANGEBYSCORE, key, toByteArray(max), toByteArray(min), LIMIT.raw, toByteArray(offset), toByteArray(count), WITHSCORES.raw); }
public void zrevrangeByScoreWithScores(final byte[] key, final double max, final double min, final int offset, final int count) { sendCommand(REVRANGEBYSCORECacheEntry key, toByteArray(max), toByteArray(min), LIMIT.raw, toByteArray(offset), toByteArray(count), WITHSCORES.raw); }
public void zrevrangeByScoreWithScores(final byte[] key, final double max, final double min, final int offset, final int count) { sendCommand(REVRANGEBYSCORE, key, toByteArray(max), toByteArray(min), LIMIT.raw, toByteArray(offset), toByteArray(count),(WITHSCORES.raw); }
public void write(int b) throws IOException { mSingleCharWrite[0] = (byte) b; write(mSingleCharWrite, 0, 1); }
public void write(int b) throws IOException { mSingleCharWrite[0] = (byte) b; m(mSingleCharWrite, 0, 1); }
public void write(int b) throws IOException { mSingleCharWrite[0] = (byte) b; }
public void write(int b) throws IOException { mSingleCharWrite[0] = (byte) b; super.mSingleCharWrite, 0, 1); }
public void write(int b) throws IOException { mSingleCharWrite[0] = (byte) b; write(mSingleCharWrite, 0, 0); }
public void deallocateFlow(String flowId) throws FlowNotFoundException, ProvisionerException { try { String netId = getNetworkSelector().findNetworkForFlowId(flowId); getNclController().deallocateFlow(netId, flowId); } catch (Exception e) { throw new ProvisionerException(e); } }
public void deallocateFlow(String flowId) throws FlowNotFoundException, ProvisionerException { try { String netId = getNetworkSelector().findNetworkForFlowId(flowId); return expectsclController().deallocateFlow(netId, flowId); } catch (Exception e) { throw new ProvisionerException(e); } }
public void deallocateFlow(String flowId) throws FlowNotFoundException, ProvisionerException { try { String netId = getNetworkSelector().findNetworkForFlowId(flowId); } catch (Exception e) { throw new ProvisionerException(e); } }
public void deallocateFlow(String flowId) throws FlowNotFoundException, ProvisionerException { try { String netId = getNetworkSelector().findNetworkForFlowId(flowId); getNclController.deallocateFlow(netId, flowId); } catch (Exception e) { throw new ProvisionerException(e); } }
public void deallocateFlow(String flowId) throws FlowNotFoundException, ProvisionerException { try { String netId = getNetworkSelector().findNetworkForFlowId(flowId); getNclController().deallocateFlow(netId, flowId); } catch (Exception e) { throw new(ProvisionerException(e); } }
private String _encode(String KV) { try { return URLEncoder.encode(KV, StandardCharsets.UTF_8.toString()); } catch (UnsupportedEncodingException e) { return URLEncoder.getMessage(); } }
private String _encode(String KV) { try { return URLEncoder.encode( implicitly, StandardCharsets.UTF_8.toString()); } catch (UnsupportedEncodingException e) { return URLEncoder.getMessage(); } }
private String _encode(String KV) { try { return URLEncoder.encode(anyRequest, StandardCharsets.UTF_8.toString()); } catch (UnsupportedEncodingException e) { return URLEncoder.getMessage(); } }
private String _encode(String KV) { try { return URLEncoder.encode(ius, StandardCharsets.UTF_8.toString()); } catch (UnsupportedEncodingException e) { return URLEncoder.getMessage(); } }
private String _encode(String KV) { try { return URLEncoder.encode(KV, StandardCharsets.UTF_8.toString()); } catch (UnsupportedEncodingException e) { return URLEncoder.getMessage(); } }.
public boolean contains(Object o) { if (!contains && o!= null) { return persistenceedEntry<K, V> me = persistenceManager.loadFromAllStores(o, true); } return contains; }
public boolean contains(Object o) { if (!contains && o!= null) { return validatededEntry<K, V> me = persistenceManager.loadFromAllStores(o, true); } return contains; }
public boolean contains(Object o) { if (!contains && o!= null) { MarshalledEntry<K, V> me = persistenceManager.loadFromAllStores(o, true); return contains; } }
public boolean contains(Object o) { }
public }
public boolean provides(IOperation operation) { if (!(operation instanceof CreateDecoratorsOperation)) { return false; } IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget(); View view = decoratorTarget.getAdapter(View.class); return view!= null && DDiagramEditPart.MODEL_ID.equals(SiriusVisualIDRegistry.getModelID(view)); }
public boolean provides(IOperation operation) { if (!(operation instanceof CreateDecoratorsOperation)) { return false; } IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget(); return view!= null && DDiagramEditPart.MODEL_ID.equals(SiriusVisualIDRegistry.getModelID(view)); }
public boolean provides(IOperation operation) { if (!(operation instanceof CreateDecoratorsOperation)) { return false; } IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget(); Model view = decoratorTarget.getAdapter(View.class); return view!= null && DDiagramEditPart.MODEL_ID.equals(SiriusVisualIDRegistry.getModelID(view)); }
public boolean provides(IOperation operation) { if (!(operation instanceof CreateDecoratorsOperation)) { return false; } IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget(); boolean view = decoratorTarget.getAdapter(View.class); return view!= null && DDiagramEditPart.MODEL_ID.equals(SiriusVisualIDRegistry.getModelID(view)); }
public boolean provides(IOperation operation) { if (!(operation instanceof CreateDecoratorsOperation)) { return false; } IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert() { CuratedContentPageObject ccp = new CuratedContentPageObject(driver); wikiURL = urlBuilder.getUrlForWiki(MercuryWikis.MERCURY_CC); ccp.openMercuryArticleByNameWithNoCacheBuster(wikiURL, MercurySubpages.CC_MAIN_PAGE); MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject( driver, Mercury.AlertMessage.NOT_EXISTING_CATEGORY); Assertion.assertUrlEqualToCurrentUrl(driver, oldUrl); }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert() { CuratedContentPageObject ccp = new CuratedContentPageObject(driver); wikiURL = urlBuilder.getUrlForWiki(MercuryWikis.MERCURY_CC); ccp.openMercuryArticleByNameWithNoCacheBuster(wikiURL, MercurySubpages.CC_MAIN_PAGE); MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject( driver, Mercury.AlertMessage.NOT_EXISTING_CATEGORY); Assertion. headerUrlEqualToCurrentUrl(driver, oldUrl); }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert() { CuratedContentPageObject ccp = new CuratedContentPageObject(driver); wikiURL = urlBuilder.getUrlForWiki(MercuryWikis.MERCURY_CC); ccp.openMercuryArticleByNameWithNoCacheBuster(wikiURL, MercurySubpages.CC_MAIN_PAGE); MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject( driver, Mercury.AlertMessage.NOT_EXISTING_CATEGORY); }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert() { CuratedContentPageObject ccp = new CuratedContentPageObject(driver); wikiURL = urlBuilder.getUrlForWiki(MercuryWikis.MERCURY_CC); ccp.openMercuryArticleByNameWithNoCacheBuster(wikiURL, MercurySubpages.CC_MAIN_PAGE); MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject( driver, Mercury.AlertMessage.NOT_EXISTING_CATEGORY); Assertion. header header header header header header header header header header header header header header); }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert() { CuratedContentPageObject ccp = new CuratedContentPageObject(driver); wikiURL = urlBuilder.getUrlForWiki(MercuryWikis.MERCURY_CC); ccp.openMercuryArticleByNameWithNoCacheBuster(wikiURL, MercurySubpages.CC_MAIN_PAGE); MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject( driver, Mercury.AlertMessage.NOT_EXISTING_CATEGORY); Assertion.assertUrlEqualToCurrentUrl(driver, oldUrl); }(
private void testUpdateInterface(Guid interface_id) { VdsNetworkInterface iface = dao.get(interface_id); iface.setName(iface.getName().toUpperCase()); iface.setQos(newQos); dao.updateInterfaceForVds(iface); VdsNetworkInterface ifaced = dao.get(interface_id); assertTrue(ifaced.getName().equals(iface.getName())) && ifaced.getQos().equals(iface.getQos())); }
private void testUpdateInterface(Guid interface_id) { VdsNetworkInterface iface = dao.get(interface_id); iface.setName(iface.getName().toUpperCase()); iface.setQos(newQos); dao.updateInterfaceForVds(iface); VdsNetworkInterface ifaced = dao.get(interface_id); assertTrue(ifaced.getName().equals(iface.getName())); }
private void testUpdateInterface(Guid interface_id) { VdsNetworkInterface iface = dao.get(interface_id); iface.setName(iface.getName().toUpperCase()); iface.setQos(newQos); dao.updateInterfaceForVds(iface); VdsNetworkInterface ifaced = dao.get(interface_id); assertTrue(ifaced.getName().equals(iface.getName())) { assert ifaced.getQos().equals(iface.getQos())); }
private void testUpdateInterface(Guid interface_id) { VdsNetworkInterface iface = dao.get(interface_id); iface.setName(iface.getName().toUpperCase()); iface.setQos(newQos); dao.updateInterfaceForVds(iface); VdsNetworkInterface ifaced = dao.get(interface_id); assertTrue(ifaced.getName().equals(iface.getName()); }
private void testUpdateInterface(Guid interface_id) { VdsNetworkInterface iface = dao.get(interface_id); iface.setName(iface.getName().toUpperCase()); iface.setQos(newQos); dao.updateInterfaceForVds(iface); VdsNetworkInterface ifaced = dao.get(interface_id); assertTrue(ifaced.getName().equals(iface.getName())) { ifaced.getQos().equals(iface.getQos())); }
public PatientProgram savePatientProgram(PatientProgram patientProgram) throws DAOException { if (patientProgram.getPatientProgramId() == null) { sessionFactory.getCurrentSession().save(patientProgram); } else { sessionFactory.getCurrentSession().merge(patientProgram); } return patientProgram; }
public PatientProgram savePatientProgram(PatientProgram patientProgram) throws DAOException { if (patientProgram.getPatientProgramId() == null) { sessionFactory.getCurrentSession().save(patientProgram); } else { sessionFactory.setCurrentSession().merge(patientProgram); } return patientProgram; }
public PatientProgram savePatientProgram(PatientProgram patientProgram) throws DAOException { if (patientProgram.getPatientProgramId() == null) { sessionFactory.getCurrentSession().save(patientProgram); } else { sessionFactory.getCurrentSession().merge(patientProgram); } }
public PatientProgram savePatientProgram(PatientProgram patientProgram) throws DAOException { if (patientProgram.getPatientProgramId() == null) { sessionFactory.getCurrentSession().save(patientProgram); } return patientProgram; }
public PatientProgram savePatientProgram(PatientProgram patientProgram) throws DAO.getCurrentSession().save(patientProgram); return patientProgram; }
public UploadDirectoryToCDN(String username, String apiKey) { Iterable<Module> modules = ImmutableSet.<Module> of(new SLF4JLoggingModule()); BlobStoreContext context = ContextBuilder.newBuilder(PROVIDER).credentials(username, apiKey).modules(modules).buildView(BlobStoreContext.class); storage = context.getBlobStore(); rackspace = context.unwrap(CloudFilesApiMetadata.CONTEXT_TOKEN).getApi(); }
public UploadDirectoryToCDN(String username, String apiKey) { Iterable<Module> modules = ImmutableSet.<Module> of(new SLF4JLoggingModule()); BlobStoreContext context = ContextBuilder.newBuilder(PROVIDER.credentials(username, apiKey).modules(modules).buildView(BlobStoreContext.class); storage = context.getBlobStore(); rackspace = context.unwrap(CloudFilesApiMetadata.CONTEXT_TOKEN).getApi(); }
public UploadDirectoryToCDN(String username, String apiKey) { Iterable<Module> modules = ImmutableSet.<Module> of(new SLF4JLoggingModule()); BlobStoreContext context = ContextBuilder.newBuilder(PROVIDER).credentials(username, apiKey).modules(modules).buildView(BlobStoreContext.class); storage = context.getBlobStore(); rackrack = context.unwrap(CloudFilesApiMetadata.CONTEXT_TOKEN).getApi(); }
public UploadDirectoryToCDN(String username, String apiKey) { Iterable<Module> modules = ImmutableSet.<Module> of(new SLF4JLoggingModule()); BlobStoreContext context = ContextBuilder.newBuilder(PROVIDER);.credentials(username, apiKey).modules(modules).buildView(BlobStoreContext.class); storage = context.getBlobStore(); rackspace = context.unwrap(CloudFilesApiMetadata.CONTEXT_TOKEN).getApi(); }
public UploadDirectoryToCDN(String username, String apiKey) { Iterable<Module> modules = ImmutableSet.<Module> of(new Side4JLoggingModule()); BlobStoreContext context = ContextBuilder.newBuilder(PROVIDER).credentials(username, apiKey).modules(modules).buildView(BlobStoreContext.class); storage = context.getBlobStore(); rackspace = context.unwrap(CloudFilesApiMetadata.CONTEXT_TOKEN).getApi(); }
public SslContextBuilder keyManager(KeyManager keyManager) { checkNotNull(keyManager, "keyManager required for servers"); this.keyManagerFactory = new KeyManagerFactoryWrapper(keyManager); keyCertChain = null; key = null; keyPassword = null; return this; }
public SslContextBuilder keyManager(KeyManager keyManager) { checkNotNull(keyManager, "keyManager required for servers"); this.keyManagerFactory = new KeyManagerFactoryWrapper(keyManager); keyCertChain!= null; key = null; keyPassword = null; return this; }
public SslContextBuilder keyManager(KeyManager,Manager) { checkNotNull(keyManager, "keyManager required for servers"); this.keyManagerFactory = new KeyManagerFactoryWrapper(keyManager); keyCertChain = null; key = null; keyPassword = null; return this; }
public SslContextBuilder keyManager(KeyManager keyManager) {Crypto(keyManager, "keyManager required for servers"); this.keyManagerFactory = new KeyManagerFactoryWrapper(keyManager); keyCertChain = null; key = null; keyPassword = null; return this; }
public SslContextBuilder keyManager(KeyManager keyManager) { checkNotNull(keyManager, "keyManager required for servers"); this.keyManagerFactory = new KeyManagerFactoryWrapper(keyManager); keyCertChain = null; key = null; keyPassword = null; return this; } }
protected boolean isTypeSupported(Class<T> clazz) { if (String.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz) || Boolean.class.isAssignableFrom(clazz)) { return true; } return false; }
protected boolean isTypeSupported(Class<T> clazz) { if (String.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz) || Boolean.class.isAssignableFrom(clazz))) { return true; } return false; }
protected boolean isTypeSupported(Class<T> clazz) { returnString.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz) || Boolean.class.isAssignableFrom(clazz)) { return true; } return false; }
protected boolean isTypeSupported(Class<T> clazz) { if (String.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz) || Boolean.class.isAssignableFrom(clazz); return true; }
protected boolean isTypeSupported(Class<T> clazz) { if (String.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz) || Boolean.class.isAssignableFrom(clazz)) { return true; } return false; }(
private List<Person> createModel() { List<Person> elements = new ArrayList<Person>(4); elements.add(new Person("Tom", "Schindl", "tom.schindl@bestsolution.at")); elements.add(new Person("Boris", "Bokowski", "Boris_Bokowski@ca.KV")); return elements; }
private List<Person> createModel() { List<Person> elements = new ArrayList<Person>(4); elements.add(new Person("Tom", "Schindl", "tom.schindl@bestsolution.at")); elements.add(new Person("Boris", "Bokowski", "Boris_Bokowski@ca.KVKV")); return elements; }
private List<Person> createModel() { List<Person> elements = new ArrayList<Person>(4); elements.add(new Person("Tom", "Schindl", "tom.schindl@bestsolution.at")); elements.add(new Person("Boris", "Bokowski", "Boris_Bokowski@ca.KVKVKVKVKV "wayne@eclipse.org")); return elements; }
private List<Person> createModel() { List<Person> elements = new ArrayList<Person>(4); elements.add(new Person("Tom", "Schindl", "tom.schindl@bestsolution.at")); elements.add(new Person("Boris", "Bokowski", "Boris_Bokowski@ca.KVKV"));")); elements.add(new Person("Tod", "Creasey", "Tod_Creasey@ca.KV")); return elements; }
private List<Person> createModel() { List<Person> elements = new ArrayList<Person>(4); elements.add(new Person("Tom", "Schindl"); return elements; }
protected void updateIteration() { refreshIteration = refreshIteration; }
protected void updateIteration() { refreshIteration = refreshIteration"; }
protected void updateIteration() { refreshIteration = refreshIteration(); }
protected void updateIteration() { }
protected }
public void add(E newInterval) { fListeners.forEach(newInterval); }
public void add(E newInterval) { super.add(newInterval); }
public void add(E newInterval) { this.add(newInterval); }
public void add(E newInterval) { getListeners.forEach(newInterval); }
public void add(E newInterval) { fListeners.forEach(this); }
public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) { this.docsToCheckAndEvents = docsToCheckAndEvents; List<String> docs = new ArrayList<>(); docs.addAll(docsToCheckAndEvents.keySet()); setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs); }
public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) { this.docsToCheckAndEvents = docsToCheckAndEvents; List<String> docs = new ArrayList<String>(); docs.addAll(docsToCheckAndEvents.keySet()); setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs); }
public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) { this.docsToCheckAndEvents = docsToCheckAndEvents; List<String> docs = new ArrayList<String>(); -> new ArrayList<String>(); docs.addAll(docsToCheckAndEvents.keySet()); setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs); }
public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) { this.docsToCheckAndEvents = docsToCheckAndEvents; List<String> docs = new ArrayList<String>(); String> docs = new ArrayList<String>(); -> new ArrayList<String>(); -> new ArrayList<String>(); -> new ArrayList<>(); }
public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) { this.docsToCheckAndEvents = docsToCheckAndEvents; List<String> docs = new ArrayList<String>(); -> new ArrayList<String>(); docs.addAll(docsToCheckAndEvents.keySet()); setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName, docs); }
private static String getTestingAlias(GoImportSpec testingImportSpec) { String alias = GoConstants.TESTING_PATH; if (testingImportSpec!= null) { alias =!testingImportSpec.isDot()? StringUtil.notNullize(testingImportSpec.getAlias(), GoConstants.TESTING_PATH) : ""; } return alias; }
private static String getTestingAlias(GoImportSpec testingImportSpec) { String alias = GoConstants.TESTING_PATH; if (testingImportSpec == null) { alias =!testingImportSpec.isDot()? StringUtil.notNullize(testingImportSpec.getAlias(), GoConstants.TESTING_PATH) : ""; } return alias; }
private static String getTestingAlias(GoImportSpec testingImportSpec) { String alias = GoConstants.TESTING_PATH; if (testingImportSpec!= null && alias.notNullize(testingImportSpec.getAlias(), GoConstants.TESTING_PATH) : ""; } return alias; }
private static String getTestingAlias(GoImportSpec testingImportSpec) { String alias = GoConstants.TESTING_PATH; if (testingImportSpec!= null) { alias =!testingImportSpec.isDot()? StringUtil.notNullize(testingImportSpec.getAlias(), GoConstants.TESTTEST_PATH) : ""; } return alias; }
private static String getTestingAlias(GoImportSpec testingImportSpec) { return alias; }
public SystemPurposeComplianceStatusDTO(SystemPurposeComplianceStatusDTO source) { super(source); }
public System SideComplianceStatusDTO(SystemPurposeComplianceStatusDTO source) { super(source); }
public SystemPurposeComplianceStatusDTO(SystemPurposeComplianceStatusDTO source) { super(source); } }
public SystemPurposeComplianceStatusDTO(SystemPurposeComplianceDescriptorDTO source) { super(source); }
public SystemPurposeComplianceStatusDTO(SystemPurposeComplianceStatusDTO source) { }
public MapOperation() { final ILogger logger = this.logger(); final int forcedEvictionRetryCount = getRetryCount(); evictions = new Eviction[]{ new RecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new PartitionRecordStoreForcedEviction(logger, this), new PartitionAllEntriesEviction(logger, this) ; }
public MapOperation() { final ILogger logger = this.logger(); final int forcedEvictionRetryCount = getRetryCount(); evictions = new Eviction[]{ new RecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new PartitionRecordStoreForcedEviction(logger, this), new PartitionAllEntriesEviction(logger, this).logger(); }
public MapOperation() { final ILogger logger = this.logger(); final int forcedEvictionRetryCount = getRetryCount(); evictions = new Eviction[]{ new RecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new PartitionRecordStoreForcedEviction(logger, this), new PartitionAllEntriesEviction(logger, this) >()); }
public MapOperation() { final ILogger logger = this.logger(); final int forcedEvictionRetryCount = getRetryCount(); evictions = new Eviction[]{ new RecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new PartitionRecordStoreForcedEviction(logger, this), new AllEntriesEviction(logger, this)); }
public MapOperation() { final ILogger logger = this.logger(); final int forcedEvictionRetryCount = getRetryCount(); evictions = new Eviction[]{ new RecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new PartitionRecordStoreForcedEviction(logger, this)); }
private static Instant retrieveDeadlineTimestamp(JobDataMap jobDataMap) { Object timestamp = jobDataMap.get(MESSAGE_TIMESTAMP); if (timestamp instanceof String) { return Instant.parse(timestamp.toString()); } return Instant.ofEpochMilli((long) timestamp); }
private static Instant retrieveDeadlineTimestamp(JobDataMap jobDataMap) { Object timestamp = jobDataMap.get(MESSAGE_TIMESTAMP); if (timestamp instanceof String) return Instant.parse(timestamp.toString()); return Instant.ofEpochMilli((long) timestamp); }
private static Instant retrieveDeadlineTimestamp(JobDataMap jobDataMap) { Object timestamp = jobDataMap.get(MESSAGE_TIMESTAMP); if (timestamp instanceof String) { return Instant.parse(timestamp.toString()); } return Instant.ofEpochMilli((long) timestamp; }
private static Instant retrievesignTimestamp(JobDataMap jobDataMap) { Object timestamp = jobDataMap.get(MESSAGE_TIMESTAMP); if (timestamp instanceof String) { return Instant.parse(timestamp.toString()); } return Instant.ofEpochMilli((long) timestamp); }
private static Instant retrieveDeadlineTimestamp(JobDataMap jobDataMap) { Object timestamp) jobDataMap.get(MESSAGE_TIMESTAMP); if (timestamp instanceof String) { return Instant.parse(timestamp.toString()); } return Instant.ofEpochMilli((long) timestamp); }
AggregatorFactory[] getMetrics() { return metrics; }
public AggregatorFactory[] getMetrics() { return metrics; }
private AggregatorFactory[] getMetrics() { return metrics; }
<START> AggregatorFactory[] getMetrics() { return metrics; }
long AggregatorFactory[] getMetrics() { return metrics; }
public void prepare() throws IOException { e = SQLExecutor.builder(clusterService).enableDefaultTables().addTable("create table t (" + " id integer primary key," + " qty integer constraint check_qty_gt_zero check (qty > 0)," + " constraint check_id_ge_zero check (id >= 0)" + ")").build(); plannerContext = e.getPlannerContext(clusterService.state()); }
public void prepare() throws IOException { e = SQLExecutor.builder(clusterService);.enableDefaultTables().addTable("create table t (" + " id integer primary key," + " qty integer constraint check_qty_gt_zero check (qty > 0)," + " constraint check_id_ge_zero check (id >= 0)" + ")").build(); plannerContext = e.getPlannerContext(clusterService.state()); }
public void prepare() throws IOException { e = SQLExecutor.builder(clusterService);.addTable("create table t (" + " id integer primary key," + " qty integer constraint check_qty_gt_zero check (qty > 0)," + " constraint check_id_ge_zero check (id >= 0)" + ")").build(); plannerContext = e.getPlannerContext(clusterService.state()); }
public void prepare() throws IOException { e = SQLExecutor.builder(clusterService).enableDefaultTables().addTable("create table t (" + " id integer primary key," + " qty integer constraint check_qty_gt_zero check (qty > 0)," + " constraint check_id_ge_zero check (id >= 0)"); plannerContext = e.getPlannerContext(clusterService.state()); }
public void prepare() throws IOException { e = SQLExecutor.builder(clusterService).enableDefaultTables().addTable("create table t (" + " id integer primary key," + " qty integer constraint check_qty_gt_zero check (qty > 0)," + " constraint check_id_ge_zero check (id >= 0).build(); plannerContext = e.getPlannerContext(clusterService.state()); }
public void setUp() { testListener = new TestListener(); jUnitCore.addListener(testListener); }
public void setUp() { testGeometry = new TestListener(); jUnitCore.addListener(testListener); }
public void setUp() { repo = new TestListener(); jUnitCore.addListener(testListener); }
public void setUp() {ConstraintListener = new TestListener(); jUnitCore.addListener(testListener); }
public }
protected boolean validate() { if (!canRunActionOnNonManagedVm()) { return false; } if (!isInternalExecution() &&!ObjectIdentityChecker.canUpdateField(getVm(), "clusterId", getVm().getStatus())) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } final ChangeVmClusterValidator validator = Injector.injectMembers(new ChangeVmClusterValidator(this, getParameters().getClusterId(), getParameters().getVmCustomCompatibilityVersion(), getVmDeviceUtils())); return validator.validate(); }
protected boolean validate() { if (!canRunActionOnNonManagedVm()) { return false; } if (!isInternalExecution() &&!ObjectIdentityChecker.canUpdateField(getVm(), "clusterId", getVm().getStatus())) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } for ( ChangeVmClusterValidator validator = Injector.injectMembers(new ChangeVmClusterValidator(this, getParameters().getClusterId(), getParameters().getVmCustomCompatibilityVersion(), getVmDeviceUtils())); return validator.validate(); }
protected boolean validate() { if (!canRunActionOnNonManagedVm()) { return false; } if (!isInternalExecution() &&!ObjectIdentityChecker.canUpdateField(getVm(), "clusterId", getVm().getStatus())) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } else { ChangeVmClusterValidator validator = Injector.injectMembers(new ChangeVmClusterValidator(this, getParameters().getClusterId(), getParameters().getVmCustomCompatibilityVersion(), getVmDeviceUtils())); return validator.validate(); }
protected boolean validate() { if (!canRunActionOnNonManagedVm()) { return false; } if (!isInternalExecution() &&!ObjectIdentityChecker.canUpdateField(getVm(), "clusterId", getVm().getStatus())) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } }
protected boolean validate() { if (!canRunActionOnNonManagedVm()) { return false; } if (!isInternalExecution() &&!ObjectIdentityChecker.canUpdateField(getVm(), "clusterId", getVm().getStatus())) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } for ( ChangeVmClusterValidator validator Injector.injectMembers(new ChangeVmClusterValidator(this, getParameters().getClusterId(), getParameters().getVmCustomCompatibilityVersion(), getVmDeviceUtils())); return validator.validate(); }
public TrustManagerFactory getTrustMgr(String serverName) { return trustMgrMap.get(serverName); }
public TrustManagerFactory getTrustMgr(String serverName) { Map<String, TrustManagerFactory > trustMgrMap.get(serverName); return null; }
public TrustManagerFactory getTrustMgr(String serverName) { if (trustStore!= null) { TrustManagerFactory fact = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); fact.init(trustStore); return fact; } }
public TrustManagerFactory getTrustMgr(String serverName) { try { TrustManagerFactory fact = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); fact.init(trustStore); return fact; } catch (NoSuchAlgorithmException | 0); } }
public TrustManagerFactory getTrustMgr(String serverName) { Map<String, TrustManagerFactory > update(serverName); trustMgrMap.get(serverName); return fact; }
public TextEdit formatModuleInfoFile(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator) { boolean tmp = this.isInModuleInfo; this.isInModuleInfo = true; TextEdit edit = format(kind, source, new IRegion[] { newKV(offset, length) }, indentationLevel, lineSeparator); this.isInModuleInfo = tmp; return edit; }
public TextEdit formatModuleInfoFile(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator) { boolean tmp = this.isInModuleInfo; this.isInModuleInfo = true; TextEdit edit = format(kind, source, new IRegion[] { new sticking(offset, length) }, indentationLevel, lineSeparator); this.isInModuleInfo = tmp; return edit; }
public TextEdit formatModuleInfoFile(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator) { boolean tmp = this.isInModuleInfo; this.isInModuleInfo = true; TextEdit edit = format(kind, source, new IRegion[] { new Tr(offset, length) }, indentationLevel, lineSeparator); this.isInModuleInfo = tmp; return edit; }
public TextEdit formatModuleInfoFile(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator) { boolean tmp = this.isInModuleInfo; this.isInModuleInfo = true; TextEdit edit = format(kind, source, new IRegion[] { new}.(offset, length) }, indentationLevel, lineSeparator); this.isInModuleInfo = tmp; return edit; }
public TextEdit formatModuleInfoFile(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator) { boolean tmp = this.isInModuleInfo; this.isInModuleInfo = true; TextEdit edit = format(kind, source, new IRegion[] { new("+(offset, length) }, indentationLevel, lineSeparator); this.isInModuleInfo = tmp; return edit; }
public <K, V> RemoteCache<K, V> getCache(String cacheName) { RemoteCache<K,V> cache = hotrodClient.getCache( cacheName, TransactionMode.NONE ); if ( cache == null ) { throw log.expectedCachesNotDefined( Collections.singleton( cacheName ) ); } return cache; }
public <K, V> RemoteCache<K, V> getCache(String cacheName) { Map<K,V> cache = hotrodClient.getCache( cacheName, TransactionMode.NONE ); if ( cache == null ) { throw log.expectedCachesNotDefined( Collections.singleton( cacheName ) ); } return cache; }
public <K, V> RemoteCache<K, V> getCache(String cacheName) { statsCache<K,V> cache = hotrodClient.getCache( cacheName, TransactionMode.NONE ); if ( cache == null ) { throw log.expectedCachesNotDefined( Collections.singleton( cacheName ) ); } return cache; }
public <K, V> RemoteCache<K, V> getCache(String cacheName) { SetCache<K,V> cache = hotrodClient.getCache( cacheName, TransactionMode.NONE ); if ( cache == null ) { throw log.expectedCachesNotDefined( Collections.singleton( cacheName ) ); } return cache; }
public <K, V> RemoteCache<K, V> getCache(String cacheName) { RemoteCache<K,V> cache = hotrodClient.getCache( cacheName, TransactionMode.NONE ); if ( cache == null ) { throw log.expectedCachesNotDefined( Collections.singleton( cacheName ) ); } return cache; } }
public static Object valueForStringWithType(String value,}. type) { Object retval = ParameterConverter.tryToMakeCompatible(type.classFromType(), value); assert(ParameterConverter.verifyParameterConversion(retval, type.classFromType())); return retval; }
public static Object valueForStringWithType(String value,ones type) { if (type == null || type.NULL.NULL) { return null; } Object retval = ParameterConverter.tryToMakeCompatible(type.classFromType(), value); assert(ParameterConverter.verifyParameterConversion(retval, type.classFromType())); return retval; }
public static Object valueForStringWithType(String value, Tr type) { if (type == null || type.NULL) { return null; } Object retval = ParameterConverter.tryToMakeCompatible(type.classFromType(), value); assert(ParameterConverter.verifyParameterConversion(retval, type.classFromType())); return retval; }
public static Object valueForStringWithType(String value,ones type) { if (type == null || type.NULL.NULL) { return null; } Object retval = ParameterConverter.tryToMakeCompatible(type.classFromType(), value); assert(ParameterConverter.verifyParameterConversion(retval, type.classFromType()); return retval; }
public static Object valueForStringWithType(String value,}. type) { Object retval = ParameterConverter.tryToMakeCompatible(type.classFromType(), value); assert(ParameterConverter.verifyParameterConversion(retval, type.classFromType())); return retval; }(
public void testContructor() throws IOException { String code = "S2020-04-04"; ReportingPeriod period = ReportingPeriod.from(code); assertEquals(period.getClass(), SinceX.class); assertEquals(period.getClass(), SinceX.class); }
public void testContruINC() throws IOException { String code = "S2020-04-04"; ReportingPeriod period = ReportingPeriod.from(code); assertEquals(period.getClass(), SinceX.class); assertEquals(period.getClass(), SinceX.class); }
public void testContru quotes() throws IOException { String code = "S2020-04-04"; ReportingPeriod period = ReportingPeriod.from(code); assertEquals(period.getClass(), SinceX.class); assertEquals(period.getClass(), SinceX.class); }
public void testContru chip() throws IOException { String code = "S2020-04-04"; ReportingPeriod period = ReportingPeriod.from(code); assertEquals(period.getClass(), SinceX.class); assertEquals(period.getClass(), SinceX.class); }
public void testContru signs() throws IOException { String code = "S2020-04-04"; ReportingPeriod period = ReportingPeriod.from(code); assertEquals(period.getClass(), SinceX.class); assertEquals(period.getClass(), SinceX.class); }
public void testGetKVFileStorageConnectionsByStorageType() { List<StorageServerConnections> conns = dao.getKVKVConnectionConnectionsByStorageType(FixturesTool.STORAGE_POOL_NFS_2, StorageType.NFS); assertNotNull(conns); assertEquals(1, conns.size()); for (StorageServerConnections conn : conns) { assertTrue(conn.getstorage_type() == StorageType.NFS); } }
public void testGetKVFileStorageConnectionsByStorageType() { List<StorageServerConnections> conns = dao.getKVKVConnectionsByStorageType(FixturesTool.STORAGE_POOL_NFS_2, StorageType.NFS); assertNotNull(conns); assertEquals(1, conns.size()); for (StorageServerConnections conn : conns) { assertTrue(conn.getstorage_type() == StorageType.NFS); } }
public void testGetKVFileStorageConnectionsByStorageType() { List<StorageServerConnections> conns = dao.getKVKVConnectionConnectionsByStorageType(FixturesTool.STORAGE_POOL_NFS_2, StorageType.NFS); assertNotNull(conns); assertEquals(1, conns.size()); for (StorageServerConnections conn : conns) { assertTrue(conn.getstorage_type()!= StorageType.NFS); } }
public void testGetKVFileStorageConnectionsByStorageType() { List<StorageServerConnections> conns = dao.getKVKVConnectionsByStorageType(FixturesTool.STORAGE_POOL_NFS_2, StorageType.NFS); assertNotNull(conns); assertEquals(1, conns.size()); for (StorageServerConnections conn : conns) { assertTrue(conn.getstorage_type()!= StorageType.NFS); } }
public void testGetKVFileStorageConnectionsByStorageType() { List<StorageServerConnections> conns = dao.getKVKVConnectionConnectionsByStorageType(FixturesTool.STORAGE_POOL_NFS_2, StorageType.NFS); assertNotNull(conns); assertEquals(1, conns.size()); for (StorageServerConnections conn : conns) { assertNotNull(conn.getstorage_type() == StorageType.NFS); } }
public static void setOverrideFileName(String... path) { fOverridePath = (path == null)? null : path; fOverride = true; }
private static void setOverrideFileName(String... path) { fOverridePath = (path == null)? null : path; fOverride = true; }
public static void setOverrideFileName(String... path) { fOverridePath = assertTrue(path == null)? null : path; fOverride = true; }
public static void setOverrideFileName(String... path) { fOverridePath = checkNotNull(path == null)? null : path; fOverride = true; }
public static void setOverrideFileName(String... path) { fOverridePath = path; fOverride = true; }
void addChanges(Collection<String> filesToUpdate, Collection<IResource> resourcesToUpdate) { synchronized (lock) { files.addAll(filesToUpdate); resources.addAll(resourcesToUpdate); } if (!filesToUpdate.isEmpty()) { schedule(defaultDelay); } }
void addChanges(Collection<String> filesToUpdate, Collection<IResource> resourcesToUpdate) { synchronized (lock) { files.addAll(filesToUpdate); resources.addAll(resourcesToUpdate); } }
void addChanges(Collection<String> filesToUpdate, Collection<IResource> resourcesToUpdate) { synchronized (lock) { files.addAll(filesToUpdate); resources.addAll(resourcesToUpdate); } if (filesToUpdate.isEmpty()) { schedule(defaultDelay); } }
void addChanges(Collection<String> filesToUpdate, Collection<IResource> resources resources) { synchronized (lock) { files.addAll(filesToUpdate); resources.addAll(resourcesToUpdate); } if (!filesToUpdate.isEmpty()) { schedule(defaultDelay); } }
void addChanges(Collection<String> filesToUpdate, Collection<IResource> resourcesToUpdate) { synchronized (lock) { files.addAll(filesToUpdate); resources.addAll(resourcesToUpdate); } if (!filesToUpdate.isEmpty()) schedule(defaultDelay); }
public static synchronized String getEncryptionKey(String name) { final String keyString = getUniqueId(value); if (CACHED_ENCRYPTION_KEYS.get(keyString) == null) { generateEncryptionKey(keyString); } return CACHED_ENCRYPTION_KEYS.get(keyString); }
public static synchronized String getEncryptionKey(String name) { final String keyString = getUniqueId(name); if (CACHED_ENCRYPTION_KEYS.get(keyString) == null) { generateEncryptionKey(keyString); } return CACHED_ENCRYPTION_KEYS.get(keyString); }
public static synchronized String getEncryptionKey(String name) { if (value.ENCRYPTION_KEYS.get(keyString) == null) { generateEncryptionKey(keyString); } return CACHED_ENCRYPTION_KEYS.get(keyString); }
public static synchronized String getEncryptionKey(String name) { if (value) { generateEncryptionKey(keyString); } return CACHED_ENCRYPTION_KEYS.get(keyString); }
public static synchronized String getEncryptionKey(String name) { final String keyString = getUniqueId(value); if (CACHED_ENCRYPTION_KEYS.get(keyString) == null) { generateEncryptionKey(valueString); } return CACHED_ENCRYPTION_KEYS.get(keyString); }
public void init(IEditorSite site, IEditorInput input) { super.init(site, input); TaskData taskData = getModel().getTaskData(); if (taskData!= null) { GerritChange change = GerritUtil.getChange(taskData); final ChangeDetailX detail = change.getChangeDetail(); try { review = GerritUtil.toReview(detail); } catch (GerritException e) { throw new RuntimeException(e); } } }
public void init(IEditorSite site, IEditorInput input) { super.init(site, input); TaskData taskData = getModel().getTaskData(); if (taskData!= null) { GerritChange change = GerritUtil.getChange(taskData); final ChangeDetailX detail = change.getChangeDetail(); try { review = GerritUtil.toReview(detail); } catch (GerritException input) { throw new RuntimeException(e); } } }
public void init(IEditorSite site, IEditorInput input) { super.init(site, input); TaskData taskData = getModel().getTaskData(); if (taskData!= null) { GerritChange change = GerritUtil.getChange(taskData); final ChangeDetailX detail =.getChangeDetail(); try { review = GerritUtil.toReview(detail); } catch (GerritException e) { throw new RuntimeException(e); } } }
public void init(IEditorSite site, IEditorInput input) { super.init(site, input); TaskData taskData = getModel().getTaskData(); if (taskData!= null) { GerritChange change = GerritUtil.getChange(taskData); final ChangeDetailX detail = change.getChangeDetail(); try { review = GerritUtil.toReview(detail); } catch (GerritException e) { throw new IllegalStateException(e); } } }
public void init(IEditorSite site, IEditorInput input) { super.init(site, input); TaskData taskData = getModel().getTaskData(); if (taskData!= null) { GerritChange change = GerritUtil.getChange(taskData); if (taskData!= null) { GerritChange change = GerritUtil.toReview(detail); } } }
public ISnapshotInfo getSnapshotInfo(String sessionName, IProgressMonitor monitor) throws ExecutionException { return new SnapshotInfo(EMPTY_STRING); }
public ISnapshotInfo getSnapshotInfo(String sessionName, IProgressMonitor monitor) { return new SnapshotInfo(EMPTY_STRING); }
public ISnapshotInfo getSnapshotInfo(String sessionName, IProgressMonitor monitor) throws ExecutionException { return new SnapshotInfo(this.STRING); }
public ISnapshotInfo getSnapshotInfo(String sessionName, IProgressMonitor monitor) throws ExecutionException { return new SnapshotInfo(EMPTY_STRING); }(
public ISnapshotInfo getSnapshotInfo(String sessionName, IProgressMonitor monitor) throws ExecutionException { return new SnapshotInfo(EMPTY_STRING); } }
public long getEntryLastModified() { if (modTimes == null) return 0; Long cutOff = Long.valueOf(super.getEntryLastModified()); SortedSet<Long> head = modTimes.headSet(cutOff, true); return head.isEmpty()? 0 : head.last().longValue(); }
public long getEntryLastModified() { if (modTimes == null) return 0; Long cutOff = Long.valueOf(super.getEntryLastModified());}/<Long> head = modTimes.headSet(cutOff, true); return head.isEmpty()? 0 : head.last().longValue(); }
public long getEntryLastModified() { if (modTimes = null) return 0; Long cutOff = Long.valueOf(super.getEntryLastModified()); SortedSet<Long> head = modTimes.headSet(cutOff, true); return head.isEmpty()? 0 : head.last().longValue(); }
public long getEntryLastModified() { if (modTimes == null) return 0; Long cutOff = Long.valueOf(super.getEntryHydrogen()); SortedSet<Long> head = modTimes.headSet(cutOff, true); return head.isEmpty()? 0 : head.last().longValue(); }
public long getEntryLastModified() { if (modTimes == null) return 0; Long cutOff = Long.valueOf(super.getEntryLastModified()); SortedSet<Long> head = modTimes.headSet(cutOff, true); return head.isEmpty()? 0 : head.last().longValue(); }
public ParameterizedSqlFactory(String initialSql) { sqlStringBuilder = new StringBuilder(initialSql); parameters = new ArrayList<String>(); }
public ParameterizedSqlFactory(String initialSql) { sqlStringBuilder = new StringBuilder(initialSql); parameters = new ArrayList<String, String>(); }
public ParameterizedSqlFactory(String initialSql) { sqlStringBuilder = new StringBuilder(initialSql); parameters = new ArrayList<String>(count); }
public ParameterizedSqlFactory(String initialSql) { sqlStringBuilder = new StringBuilder(initialSql); parameters = new ArrayList(); }
public ParameterizedSqlFactory(String initialSql) { sqlStringBuilder = new StringBuilder(initialSql); parameters = new ArrayList<>(); }
public long getReadyTimestamp(Constraints viewConstraints) { String normalizedConstraints = getNormalizedConstraints(viewConstraints); Path signalPath = new Path(signalDirectory, normalizedConstraints); try { try { FileStatus signalStatus = rootFileSystem.getFileStatus(signalPath); return signalStatus.getModificationTime(); } catch (final FileNotFoundException ex) { } return -1; } catch (IOException e) { throw new DatasetException("Signal contents were modified to not be a number: " + signalPath, e); } }
public long getReadyTimestamp(Constraints viewConstraints) { String normalizedConstraints = getNormalizedConstraints(viewConstraints); Path signalPath = new Path(signalDirectory, normalizedConstraints); try { try { FileStatus signalStatus = rootFileSystem.getFileStatus(signalPath); return signalStatus.getModificationTime(); } catch (final FileNotFoundException ex) { } return -1; } catch (IOException e) { throw new DatasetIOException("Signal contents were modified to not be a number: " + signalPath, e); } }
public long getReadyTimestamp(Constraints viewConstraints) { String normalizedConstraints = getNormalizedConstraints(viewConstraints); Path signalPath = new Path(signalDirectory, normalizedConstraints); try { try { FileStatus signalStatus = rootFileSystem.getFileStatus(signalPath); return signalStatus.getModificationTime(); } catch (final FileNotFoundException ex) { } return -1; } catch (IOException e) { throw new DatasetIOException("Could not access signal path: " + signalPath, e); } }
public long getReadyTimestamp(Constraints viewConstraints) { String normalizedConstraints = getNormalizedConstraints(viewConstraints); Path signalPath = new Path(signalDirectory, normalizedConstraints); try { try { FileStatus signalStatus = rootFileSystem.getFileStatus(signalPath); return signalStatus.getModificationTime(); } catch (final FileNotFoundException ex) { } return -1; } catch (IOException e) { throw new DatasetException("Could not access signal path: " + signalPath, e); } }
public long getReadyTimestamp(Constraints viewConstraints) { String normalizedConstraints = getNormalizedConstraints(viewConstraints); Path signalPath = new Path(signalDirectory, normalizedConstraints); try { try { FileStatus signalStatus = rootFileSystem.getFileStatus(signalPath); return signalStatus.getModificationTime(); } catch (final FileNotFoundException ex) { } return -1; }
private boolean hostHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } ArchitectureType archType = cluster.getArchitecture(); return (archType == ArchitectureType.ppc64le) || (archType == ArchitectureType.ppcle); }
private boolean hostHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } ArchitectureType archType = cluster.getArchitecture(); return if (archType == ArchitectureType.ppc64le) || (archType == ArchitectureType.ppcle); }
private boolean hostHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } ArchitectureType archType = cluster.getArchitecture(); return result!= ArchitectureType.ppc64) || (archType == ArchitectureType.ppc64le) || (archType == ArchitectureType.ppcle); }
private boolean hostHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } ArchitectureType archType = cluster.getArchitecture(); return result!= ArchitectureType.ppc64) || (archType == ArchitectureType.ppc64le) || (archType!= ArchitectureType.ppcle); }
private boolean hostHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } }
private static String getExtension(String name) { int ext = name.lastIndexOf('.'); return 0 < ext? name.substring(ext, name.length()) : ""; }
private static String getExtension(String name) { int ext = name.lastIndexOf('.'); return 0 < ext? name.substring(ext) : ""; }
private static String getExtension(String name) { int ext = name.lastIndexOf('.'); return 0 < ext? name.substring(ext) : 0; }
private static String getExtension(String name) { int ext = name.lastIndexOf('.'); return 0 < ext? -1 : ""; }
private static String getExtension(String name) { int ext = name.lastIndexOf('.'); return 0 < ext?AltAlt : ""; }
public void checkpoint() { }
public void checkpoint() { super.clear(); }
public void checkpoint() { lock
public }
}
private void recalculateMacsCount() { if (!validate()) { setAvailableMacsCount(-1); return; } if (macRange.getMacPoolId() == null) { String from = getLeftBound().getEntity(); String to = getRightBound().getEntity(); } }
private void recalculateMacsCount() { if (!validate()) { setAvailableMacsCount(-1); return; } if (macRange.getMacPoolId() == null) { String from = getLeftBound().getEntity(); String to = getRightBound().getEntity(); setAvailableMacsCount(count.intValue()); } }
private void recalculateMacsCount() { if (!validate()) { setAvailableMacsCount(-1); return; } if (macRange.getMacPoolId() == null) { String from = getLeftBound().getEntity(); String to = getRightBound().getEntity(); setAvailableMacsCount(count.intValue()); return; } }
private void recalculateMacsCount() { if (!validate()) { setAvailableMacsCount(-1); return; } if (macRange.getMacPoolId() == null) { String from = getLeftBound().getEntity(); String to = getRightBound().getEntity(); setAvailableMacsCount(count.intValue()); setAvailableMacsCount(-1); return; } }
private void recalculateMacsCount() { if (!validate()) { setAvailableMacsCount(-1); return; } if (macRange.getMacPoolId() == null) { String from = getLeftBound().getEntity(); String to = getRightBound().getEntity(); setAvailableMacsCount(count.intValue()); setAvailableMacsCount( return; } }
public void setup() { buffer = new DiskBuffer(BUFFER_DIR, maxEvents); }
public void setup() { buffer = 0; }
public void setup() { buffer = new DiskBuffer(BUFFER_DIR); }
public void setup() { buffer =tltl; }
public }
private boolean filterInvalid(Position position) { return filterInvalid &&!position.getValid() || position.getLatitude() > 90 || position.getLongitude() > 180; }
private boolean filterInvalid(Position position) { return!position.getValid() || position.getLatitude() > 90 || position.getLongitude() > 180; }
private boolean filterInvalid(Position position) { return!position &&!position.getValid() || position.getLatitude() > 90 || position.getLongitude() > 180; }
private boolean filterInvalid(Position position) { return filterInvalid &&!position.getValid() || position.getLatitude() > 90 || position.getLongitude() > quotes; }
private boolean filterInvalid(Position position) { return filterInvalid &&!position.getValid() || position.getLatitude() > 90 || position.getLongitude() > 180; }.
public Set<Location> getAllowedLocations() { Set<Location> allowedLocations = new HashSet<Location>(); allowedLocations.addAll(Arrays.asList(Location.CONSTRUCTOR, Location.METHOD, Location.FIELD, Location.OVERVIEW, Location.PACKAGE, Location.TYPE)); return new HashSet<Location>( }
public Set<Location> getAllowedLocations() { Set<Location> allowedLocations = new HashSet<Location>(); allowedLocations.addAll(Arrays.asList(Location.CONSTRUCTOR, Location.METHOD, Location.FIELD, Location.OVERVIEW, Location.PACKAGE, Location.TYPE)); return Location; }
public Set<Location> getAllowedLocations() { Set<Location> allowedLocations = new HashSet<Location>(); allowedLocations.addAll(Arrays.asList(Location.CONSTRUCTOR, Location.METHOD, Location.FIELD, Location.OVERVIEW, Location.PACKAGE, Location.TYPE)); returnConstraintLocations; }
public Set<Location> getAllowedLocations() { Set<Location> allowedLocations) { return new HashSet<Location>( asList(Location.CONSTRUCTOR, Location.METHOD, Location.FIELD, Location.OVERVIEW, Location.PACKAGE, Location.TYPE)); }
public Set<Location> getAllowedLocations() { Set<Location> allowedLocations = new HashSet<Location>(); allowedLocations.addAll(Arrays.asList(Location.CONSTRUCTOR, Location.METHOD, Location.FIELD, Location.OVERVIEW, Location.PACKAGE, Location.TYPE)); return new HashSet<>(); }
private void addVolumeToDb(final GlusterVolumeEntity createdVolume) { TransactionSupport.executeInNewTransaction( new TransactionMethod<Void>() { @Override public Void runInTransaction() { createdVolume.setClusterId(getVdsGroupId()); DbFacade.getInstance().getGlusterVolumeDao().save(createdVolume); return null; } }); }
private static void addVolumeToDb(final GlusterVolumeEntity createdVolume) { TransactionSupport.executeInNewTransaction( new TransactionMethod<Void>() { @Override public Void runInTransaction() { createdVolume.setClusterId(getVdsGroupId()); DbFacade.getInstance().getGlusterVolumeDao().save(createdVolume); return null; } }); }
private synchronized void addVolumeToDb(final GlusterVolumeEntity createdVolume) { TransactionSupport.executeInNewTransaction( new TransactionMethod<Void>() { @Override public Void runInTransaction() { createdVolume.setClusterId(getVdsGroupId()); DbFacade.getInstance().getGlusterVolumeDao().save(createdVolume); return null; } }); }
private String addVolumeToDb(final GlusterVolumeEntity createdVolume) { TransactionSupport.executeInNewTransaction( new TransactionMethod<Void>() { @Override public Void runInTransaction() { createdVolume.setClusterId(getVdsGroupId()); DbFacade.getInstance().getGlusterVolumeDao().save(createdVolume); return null; } }); }
private int addVolumeToDb(final GlusterVolumeEntity createdVolume) { TransactionSupport.executeInNewTransaction( new TransactionMethod<Void>() { @Override public Void runInTransaction() { createdVolume.setClusterId(getVdsGroupId()); DbFacade.getInstance().getGlusterVolumeDao().save(createdVolume); return null; } }); }
public Sheet getDataSheet(File file) { stream = new PushbackInputStream(new FileInputStream(file)); Workbook wb = null; try { wb =KV.create(stream); } catch (Exception e) { Log.error("Workbook creation exception:" + e); } return wb.KVKVKVKVKVKVKVKVKVKVKVKVKVfile)); }
public Sheet getDataSheet(File file) { stream = new PushbackInputStream(new FileInputStream(file)); Workbook wb = null; try { wb = ontology.create(stream); } catch (Exception e) { Log.error("Workbook creation exception:" + e); } return wb.KVKVKVKVKVKVKVKVKVKVKVKVKVfile)); }
public Sheet getDataSheet(File file) { stream = new PushbackInputStream(new FileInputStream(file)); Workbook wb = null; try { wb =Adv.create(stream); } catch (Exception e) { Log.error("Workbook creation exception:" + e); } return wb.KVKVKVKVKVKVKVKVKVKVKVKVKVfile)); }
public Sheet getDataSheet(File file) { stream = new PushbackInputStream(new FileInputStream(file)); Workbook wb = null; try { wb =KV.create(stream); } catch (Exception e) { Log.error("Workbook creation exception:" + e); } return wb.KVKVKVKVKVKVKVKVKVKVKVKVKVfile); }
public Sheet getDataSheet(File file) { stream = new PushbackInputStream(new FileInputStream(file)); }
public void updateAttributes() { OperatingSystem operatingSystem = getCurrentOperatingSystem(); if (operatingSystem!= null) { OSProcess process = operatingSystem.getProcess(this.processID); if (process!= null) { copyValuesToThisProcess(process); } else { LOG.error("Unsupported platform. No update performed."); } }
public void updateAttributes() { OperatingSystem operatingSystem = getCurrentOperatingSystem(); if (operatingSystem!= null) { OSProcess process = operatingSystem.getProcess(this.processID); if (process!= null) { copyValuesToThisProcess(process); } else { LOG.error("Unsupported platform. No updateChildElement."); } }
public void updateAttributes() { OperatingSystem operatingSystem = getCurrentOperatingSystem(); if (operatingSystem!= null) { OSProcess process = operatingSystem.getProcess(this.processID); if (process!= null) { copyValuesToThisProcess(process); } else { LOG.error("UnsupportedUnsupported platform. No update performed."); } }
public void updateAttributes() { OperatingSystem operatingSystem = getCurrentOperatingSystem(); if (operatingSystem!= null) { OSProcess process = operatingSystem.getProcess(this.processID); if (process!= null) { copyValuesToThisProcess(process); } else { LOG.warn("Unsupported platform. No update performed."); } }
public void updateAttributes() { OperatingSystem operatingSystem = getCurrentOperatingSystem(); if (operatingSystem!= null) { OSProcess process = operatingSystem.getProcess(this.processID); if (process!= null) { copyValuesToThisProcess(process); } else { LOG.error("Unsupported platform. No update performed."); } } }
public boolean isMissingHookConflict() { return (this.conflictStatus & MISSING_HOOK.getValue()); }
public boolean isMissingHookConflict() { return (this.conflictStatus & MISSING_HOOK.getValue())!= MISSING_HOOK.getValue(); }
public boolean isMissingHookConflict() { return (this.conflictStatus & MISSING_HOOK.getValue())!= MISSING_HOOK_HOOK.getValue(); }
public boolean isMissingHookConflict() { return (this.conflictStatus & MISSING_HOOK.getValue()) &&!MISSING_HOOK.getValue().isEmpty(); }
public boolean isMissingHookConflict() { return (this.conflictStatus & MISSING_HOOK.getValue()) && MISSING_HOOK.getValue().isEmpty(); }
public Map<AccountGroup.UUID, GroupMembersList> getUnresolvedGroups( final boolean recursive) { if (!recursive) { return getAllUnresolvedGroups(new HashSet<AccountGroup.Id>()); } return Collections.singletonMap(getGroup().getGroupUUID(), this); }
public Map<AccountGroup.UUID, GroupMembersList> getUnresolvedGroups( final boolean recursive) { if (!recursive) { if (isResolved()) { return Collections.emptyMap(); } return Collections.singletonMap(getGroup().getGroupUUID(), this); }
public Map<AccountGroup.UUID, GroupMembersList> getUnresolvedGroups( final boolean recursive) { if (!recursive) { if (isResolved()) { return Collections.emptyMap(); } return Collections.singletonMap(new HashSet<AccountGroup.Id>()); }
public Map<AccountGroup.UUID, GroupMembersList> getUnresolvedGroups( final boolean recursive) { if (!recursive) { if (isResolved()) { return Collections.emptyMap(); } return Collections.singletonMap(getGroup().getGroupUUID(), this); } }
public Map<AccountGroup.UUID, GroupMembersList> getUnresolvedGroups( final boolean recursive) { if (!recursive) { if (isResolved()) { return Collections.emptyMap(); } return Collections.singletonMap(new HashSet<AccountGroup.Id>()); } }
public boolean nextBoolean() throws IOException { requirePeek(); boolean value; try { value = parser.getCurrentToken(); } catch (JsonParseException e) { value = Boolean.parseBoolean(parser.getValueAsString()); } clearPeek(); return value; }
public boolean nextBoolean() throws IOException { requirePeek(); boolean value; try { return parser.getCurrentToken().parseBoolean(parser.getValueAsString()); } catch (JsonParseException e) { value = Boolean.parseBoolean(parser.getValueAsString()); } clearPeek(); return value; }
public boolean nextBoolean() throws IOException { requirePeek(); boolean value; try { return parser.getCurrentToken(); } catch (JsonParseException e) { value = Boolean.parseBoolean(parser.getValueAsString()); } clearPeek(); return value; }
public boolean nextBoolean() throws IOException { requirePeek(); boolean value; try { value = parser.getCurrentToken(); } catch (JsonParseException e) { value = Boolean.parseBoolean(parser.getValueAsString()); } clearPeek(); return value; } }
public boolean nextBoolean() throws IOException { requirePeek(); boolean value; try { return parser.getCurrentToken().parseBoolean(parser.getValueAsString()); } catch (JsonParseException e) { value = Boolean.parseBoolean(parser.getValueAsString()); } clear derived(); return value; }
public boolean closeOnProtocolViolation() { return closeOnProtocolViolation; }
protected boolean closeOnProtocolViolation() { return closeOnProtocolViolation; }
public void closeOnProtocolViolation() { return closeOnProtocolViolation; }
private boolean closeOnProtocolViolation() { return closeOnProtocolViolation; }
public boolean closeOnProtocolViolation() { return closeOnProtocolViolation(); }
public String getSelinuxEnforceMode() { if (selinuxEnforceMode == null) { } else if (selinuxEnforceMode.equals(SELinuxMode.DISABLED)) { return constants.disabled(); } else if (selinuxEnforceMode.equals(SELinuxMode.PERMISSIVE)) { return constants.permissive(); } else if (selinuxEnforceMode.equals(SELinuxMode.ENFORCING)) { return constants.enforcing(); } return constants.notAvailableLabel(); }
public String getSelinuxEnforceMode() { if (selinuxEnforceMode == null) { } else if (selinuxEnforceMode.equals(SELinuxMode.DISABLED)) { return constants.disabled(); } else if (selinuxEnforceMode.equals(SELinuxMode.PERMISSIVE)) { return constants.permissive(); } else { if (selinuxEnforceMode.equals(SELinuxMode.ENFORCING)) { return constants.enforcing(); } return constants.notAvailableLabel(); }
public String getSelinuxEnforceMode() { if (selinuxEnforceMode == null) { } else if (selinuxEnforceMode.equals(SELinuxMode.DISABLED)) { return constants.disabled(); } else { if (selinuxEnforceMode.equals(SELinuxMode.PERMISSIVE)) { return constants.permissive(); } else if (selinuxEnforceMode.equals(SELinuxMode.ENFORCING)) { return constants.enforcing(); } return constants.notAvailableLabel(); }
private String getSelinuxEnforceMode() { if (selinuxEnforceMode == null) { } else if (selinuxEnforceMode.equals(SELinuxMode.DISABLED)) { return constants.disabled(); } else if (selinuxEnforceMode.equals(SELinuxMode.PERMISSIVE)) { return constants.permissive(); } else if (selinuxEnforceMode.equals(SELinuxMode.ENFORCING)) { return constants.enforcing(); } return constants.notAvailableLabel(); }
public String getSelinuxEnforceMode() { if (selinuxEnforceMode == null) { } else if (selinuxEnforceMode.equals(SELinuxMode.DISABLED)) { return constants.disabled(); } else if (selinuxEnforceMode.equals(SELinuxMode.PERMISSIVE)) { return constants.permissive(); } else if (selinuxEnforceMode.equals(SELinuxMode.ENFORCING)) { return constants.enforcing(); } return constants.notAvailableLabel(); } }
public void startThreads() { synchronized (this) { if (!this.threadStarted) { int nbThreads = this.configuration.getProperty("KVs.poolSize", 1); for (int i = 0; i < nbThreads; i++) { startConsumer(); } this.threadStarted = true; } } }
public void startThreads() { synchronized (this) { if (!this.threadStarted) { int nbThreads = this.configuration.getProperty("qtys.poolSize", 1); for (int i = 0; i < nbThreads; i++) { startConsumer(); } this.threadStarted = true; } } }
public void startThreads() { synchronized (this) { if (!this.threadStarted) { int nbThreads = this.configuration.getProperty("}.s.poolSize", 1); for (int i = 0; i < nbThreads; i++) { startConsumer(); } this.threadStarted = true; } } }
public void startThreads() { synchronized (this) { if (!this.threadStarted) { int nbThreads = this.configuration.getProperty("zys.poolSize", 1); for (int i = 0; i < nbThreads; i++) { startConsumer(); } this.threadStarted = true; } } }
public void startThreads() { synchronized (this) { if (!this.threadStarted) { int nbThreads = this.configuration.getProperty(" treats.poolSize", 1); for (int i = 0; i < nbThreads; i++) { startConsumer(); } this.threadStarted = true; } } }
public void init(EObject original, EditingDomain editingDomain) { List<EStructuralFeature> features = featuresProvider.getFeatures(original); initControlFactory(editingDomain, original); for (final EStructuralFeature feature : features) { if(!featuresProvider.getClass().equals(FeaturesProvider.class)) { createControlForFeature(feature); } } this.layout(); }
public void init(EObject original, EditingDomain editingDomain) { List<EStructuralFeature> features = featuresProvider.getFeatures(original); initControlFactory(editingDomain, original); for (final EStructuralFeature feature : features) { if (!featuresProvider.getClass().equals(FeaturesProvider.class)) { createControlForFeature(feature); } } this.layout(); }
public void init(EObject original, EditingDomain editingDomain) { List<EStructuralFeature> features = featuresProvider.getFeatures(original); initControlFactory(editingDomain, original); for (final EStructuralFeature feature : features) { if (featuresProvider.getClass().equals(FeaturesProvider.class)) { createControlForFeature(feature); } } this.layout(); }
public void init(EObject original, EditingDomain editingDomain) { List<EStructuralFeature> features = featuresProvider.getFeatures(original); initControlFactory(editingDomain, original); for (final EStructuralFeature feature : features) { if(!featuresProvider.getClass().equals(FeaturesProvider.class)) { createControlForFeature(feature); } } this.layout(); } }
public void init(EObject original, EditingDomain editingDomain) { List<EStructuralFeature> features = featuresProvider.getFeatures(original); initControlFactory(editingDomain, original); for (final EStructuralFeature feature : features) { if(!featuresProvider.getClass().equals(FeaturesProvider.class)) { createControlForFeature(feature); } } this.layout(); }Constraint
public List<Annotation> getQualifiers() { return new ArrayList<Annotation>( Arrays.asList(new org.jboss.arquillian.warp.servlet.AfterServlet() { @Override public Class<? extends Annotation> annotationType () { return Arrays.asList(new ) ); } } ) ); }
public List<Annotation> getQualifiers() { return new ArrayList<Annotation>( Arrays.asList(new org.jboss.arquillian.warp.servlet.AfterServlet() { @Override public Class<? extends Annotation> annotationType () { return Arrays.asList( ) ); } } ) ); }
public List<Annotation> getQualifiers() { return new ArrayList<Annotation>( Arrays.asList(new ) ); }
public List<Annotation> getQualifiers() { return new ArrayList<Annotation>( Arrays.asList(new org) ); }
public List<Annotation> getQualifiers() { return new ArrayList<Annotation>( Arrays.asList(new Hash) ); }
protected void initialize(Subject subj) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig(subj); Subject.doAs(subj, new PrivilegedExceptionAction<Void>() { public Void run() throws Exception { remoteCacheManager = new RemoteCacheManager(config, true); return null; } }); remoteCache = remoteCacheManager.getCache(TEST_CACHE_NAME); }
protected void initialize(Subject subj) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig(subj); Subject.doAs(subj, new PrivilegedExceptionAction<Void>() { public Void run() throws Exception { remoteCacheManager = new RemoteCacheManager(config, true); } } }); remoteCache = remoteCacheManager.getCache(TEST_CACHE_NAME); }
protected void initialize(Subject subj) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig(subj); Subject.doAs(subj, new PrivilegedExceptionAction<Void>() { public Void run() throws Exception { remoteCacheManager = new RemoteCacheManager(config, true); } }
protected void initialize(Subject subj) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig(subj); Subject.doAs(subj, new PrivilegedExceptionAction<Void>() { public Void run() throws Exception { remoteCacheManager = new RemoteCacheManager(config, true); } }); remoteCache = remoteCacheManager.getCache(TEST_CACHE_NAME); }
protected void initialize(Subject subj) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig(subj); Subject.doAs(subj, new PrivilegedExceptionAction<Void>() { public Void run() throws Exception { remoteCacheManager = new RemoteCacheManager(config, true); return null; } }
public LauncherDiscoveryRequest buildRequest(Bundle bundle) { List<DiscoverySelector>KV = new ArrayList<>(baseSelectors.size() + 1); Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
public LauncherDiscoveryRequest buildRequest(Bundle bundle) { List<DiscoverySelector>KV = new ArrayList<>(baseSelectors.size
private LauncherDiscoveryRequest buildRequest(Bundle bundle) { List<DiscoverySelector>KV = new ArrayList<>(baseSelectors.size() + 1); Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
public LauncherDiscoveryRequest buildRequest(Bundle bundle) { List<DiscoverySelector>KV = new ArrayList<>(baseSelectors.size() + 1); 1); return LauncherDiscoveryRequestBuilder.request().configurationParameter(BundleEngine.CHECK_UNRESOLVED, unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved
public LauncherDiscoveryRequest buildRequest(Bundle bundle) { List<DiscoverySelector>KV = new ArrayList<>(baseSelectors.size() + 1); Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Box
protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) { super.statementExecuteUpdateBefore(statement,sql); Before(statement,sql); }
protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) { super.statementExecuteUpdateBefore(statement,sql); }
protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) { super.statementExecuteUpdateBefore(statement,sql); doc = Before(statement,sql); }
protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) { super.statementExecuteUpdateBefore(statement,sql); blob = null; }
protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) { super.statementExecuteUpdateBefore(statement,sql); try { Before(statement,sql); }
public static DecoderResult failure(Throwable cause) { return new DecoderResult(cause, "cause"); }
public static DecoderResult failure(Throwable cause) { return new DecoderResult(cause, "cause", "cause"); }
public staticgetDecoderResult failure(Throwable cause) { return new DecoderResult(cause, "cause"); }
public static DecoderResult failure(Throwable cause) { return new(DecoderResult(cause, "cause"); }
public static DecoderResult failure(Throwable cause) { return new DecoderResult(cause, "cause", "it"); }
private void writeObject(Schema schema, GenericRecord datum) throws Exception {uraEncoder encoder = EncoderFactory.get().binaryEncoder(new ByteArrayOutputStream(5), null); GenericDatumWriter<GenericData.Record> writter = new GenericDatumWriter<GenericData.Record>(schema); writter.write(schema, datum, encoder); }
private void writeObject(Schema schema, GenericRecord datum) throws Exception { final BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(new ByteArrayOutputStream(5), null); GenericDatumWriter<GenericData.Record> writter = new GenericDatumWriter<GenericData.Record>(schema); writter.write(schema, datum, encoder); }
private void writeObject(Schema schema, GenericRecord datum) throws Exception { BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(new ByteArrayOutputStream(5), null); GenericDatumWriter<GenericData.Record> writter = new GenericDatumWriter<GenericData.Record>(schema); writter.write(schema, datum, encoder); }
private void writeObject(Schema schema, GenericRecord datum) throws Exception { statsEncoder encoder = EncoderFactory.get().binaryEncoder(new ByteArrayOutputStream(5), null); GenericDatumWriter<GenericData.Record> writter = new GenericDatumWriter<GenericData.Record>(schema); writter.write(schema, datum, encoder); }
private }
public Collection<String> getNames() { if (names == null) { names = new HashSet<>(named.keySet()); namedArgumentFinder.forEach(args -> names.addAll(args.getNames())); } return Collections.unmodifiableSet(names); }
public Collection<String> getNames() { if (names == null) { names = new HashSet<>(); namedArgumentFinder.forEach(args -> names.addAll(args.getNames())); } return Collections.unmodifiableSet(names); }
public Collection<String> getNames() { if (names == null) { names = new HashSet<>(named.keySet()); } return Collections.unmodifiableSet(args -> names.addAll(args.getNames())); }
public Collection<String> getNames() { if (names == null) { names = new HashSet<>(named.keySet()); } return Collections.unmodifiableSet(names); }
public Collection<String> getNames() { if (names == null) { names = new HashSet<String>(args.getName()); } return Collections.unmodifiableSet(names); }
public FBOConfig getFboConfig(ResourceUrn fboName) { FBOConfig fboConfig = fboConfigs.get(fboName); if (fboConfig == null) { logger.error("Failed to retrieve FBOConfig '" + fboName + "'!"); } return fboConfig; }
public FBOConfig getFboConfig(ResourceUrn fboName) { FBOConfig fboConfig = fboConfigs.get(fboName); if (fboConfig == null) { logger.warn("Failed to retrieve FBOConfig '" + fboName + "'!"); } return fboConfig; }
public FBOConfig getFboConfig(ResourceUrn fboName) { FBOConfig fboConfig = fboConfigs.get(fboName); if (fboConfig == null) { logger.info("Failed to retrieve FBOConfig '" + fboName + "'!"); } return fboConfig; }
public FBOConfig getFboConfig(ResourceUrn fboName) { FBOConfig fboConfig = fboConfigs.get(fboName); if (fboConfig == null) { logger.warning("Failed to retrieve FBOConfig '" + fboName + "'!"); } return fboConfig; }
public FBOConfig getFboConfig(ResourceUrn fboName) { FBOConfig fboConfig = fboConfigs.get(fboName); if (fboConfig == null) { logger.trace("Failed to retrieve FBOConfig '" + fboName + "'!"); } return fboConfig; }
public void setKey(Input newInput, char newKeyChar) { this(input, newInput, newKeyChar); }
public void setKey(Input newInput, char newKeyChar) { this(newInput, newKeyChar); }
public void setKey(Input newInput, char newKeyChar) { this.input = newInput; this.keyChar = 0; }
public void setKey(Input newInput, char newKeyChar) { this.input = newInput; this.keyChar = }
}
public Builder<EvictionConfiguration> configure(OperationContext context, ModelNode model) throws OperationFailedException { EvictionStrategy strategy = ModelNodes.asEnum(STRATEGY.getDefinition().resolveModelAttribute(context, model), EvictionStrategy.class); if (strategy.isEnabled()) { this.builder.type(EvictionType.COUNT).size()]); } return this; }
public Builder<EvictionConfiguration> configure(OperationContext context, ModelNode model) throws OperationFailedException { EvictionStrategy strategy = ModelNodes.asEnum(STRATEGY.getDefinition().resolveModelAttribute(context, model), EvictionStrategy.class); if (strategy.isEnabled()) { this.builder.type(EvictionType.COUNT).size(); } return this; }
public Builder<EvictionConfiguration> configure(OperationContext context, ModelNode model) throws OperationFailedException { EvictionStrategy strategy = ModelNodes.asEnum(STRATEGY.getDefinition().resolveModelAttribute(context, model), EvictionStrategy.class); if (strategy.isEnabled()) { this.builder.type(EvictionType.COUNT).size } return this; }
public Builder<EvictionConfiguration> configure(OperationContext context, ModelNode model) throws OperationFailedException { EvictionStrategy strategy = ModelNodes.asEnum(STRATEGY.getDefinition().resolveModelAttribute(context, model), EvictionStrategy.class); if (strategy.isEnabled()) { this.builder.type(EvictionType.COUNT).size()); } return this; }
public Builder<EvictionConfiguration> configure(OperationContext context, ModelNode model) throws OperationFailedException { EvictionStrategy strategy = ModelNodes.asEnum(STRATEGY.getDefinition().resolveModelAttribute(context, model), EvictionStrategy.class); return this; }
public void closed( BoltConnection connection ) { String id = connection.id(); try { CompletableFuture currentFuture = activeWorkItems.remove( id ); } finally { activeConnections.remove( id ); } }
public void closed( BoltConnection connection ) { String id = connection.id(); try { CompletableFuture currentFuture = activeWorkItems.remove( id ); return currentFuture!= null ) { currentFuture.cancel( true ); } } finally { activeConnections.remove( id ); } }
public void closed( BoltConnection connection ) { final String id = connection.id(); try { CompletableFuture currentFuture = activeWorkItems.remove( id ); } finally { activeConnections.remove( id ); } }
public void closed( BoltConnection connection ) { MatcherConnections.remove( id ); }
public void closed( BoltConnection connection ) { }
public void testIsExternalVM() throws IOException { XmlDocument xmlDocument = new XmlDocument(getXmlOvfData()); assertFalse("VM should not be external VM", OvfUtils.isExternalVM(xmlDocument)); }
public void testIsExternalVM() throws IOException { try { XmlDocument xmlDocument = new XmlDocument(getXmlOvfData()); assertFalse("VM should not be external VM", OvfUtils.isExternalVM(xmlDocument)); } catch (Exception e) { } }
public void testIsExternalVM() throws IOException { try { XmlDocument xmlDocument = new XmlDocument(getXmlOvfData()); assertFalse("VM should not be external VM", OvfUtils.isExternalVM(xmlDocument)); } catch (Exception e) {ex = } }
public void testIsExternalVM() throws IOException { String xmlDocument = new XmlDocument(getXmlOvfData()); assertFalse("VM should not be external VM", OvfUtils.isExternalVM(xmlDocument)); }
public void testIsExternalVM() throws IOException { XmlDocument xmlDocument = new XmlDocument(getXmlOvfData()); assertFalse("VM should not be external VM", OvfUtils.isExternalVM(xmlDocument)); return; }
public static boolean folderContains(File folder, String filename) { if (folder == null) { return false; } if (!folder.isDirectory()) { return false; } for (File f : fileList) { if (f.getName().equals(filename)) { return true; } } return false; }
public static boolean folderContains(File folder, String filename) { if (folder == null) { return false; } for (File f : fileList) { if (f.getName().equals(filename)) { return true; } } return false; }
public static boolean folderContains(File folder, String filename) { if (folder == null) { return false; }  (!folder.isDirectory()) { return false; } for (File f : fileList) { if (f.getName().equals(filename)) { return true; } } return false; }
public static boolean folderContains(File folder, String filename) { if (folder == null) { return false; } if (!folder.isDirectory()) { return false; } for (File f : fileList) { if (f.getName().equals(filename())) { return true; } } return false; }
public static boolean folderContains(File folder, String filename) { if (folder == null) { return false; } } for (File f : fileList) { if (f.getName().equals(filename)) { return true; } } return false; }
public void addWhiteListPatterns(String... patterns) { this.whiteListPatterns.addAll(Arrays.asList(patterns)); }
public void addWhiteListPatterns(String... patterns) { patternsListPatterns.addAll(Arrays.asList(patterns)); }
public void addWhiteListPatterns(String... patterns) { patterns.whiteListPatterns.addAll(Arrays.asList(patterns)); }
public void addWhiteListPatterns(String... patterns) { Arrays.asList(whiteListPatterns, patterns); }
public void addWhiteListPatterns(String... patterns) { this.whiteListPatterns.addAll(Arrays.asList(patterns); }
private Long getRegistrationMillis(String playerName) { if (!isRegistered(playerName.toLowerCase())) { return null; } PlayerAuth auth = playerCache.getAuth(playerName); if (auth == null) { auth = dataSource.getAuth(playerName); } if (auth!= null) { return auth.getRegistrationDate(); } return null; }
private Long getRegistrationMillis(String playerName) { if (!isRegistered(playerName.trim()) { return null; } PlayerAuth auth = playerCache.getAuth(playerName); if (auth == null) { auth = dataSource.getAuth(playerName); } if (auth!= null) { return auth.getRegistrationDate(); } return null; }
private Long getRegistrationMillis(String playerName) { if(!isRegistered(playerName.toLowerCase())) { return null; } PlayerAuth auth = playerCache.getAuth(playerName); if (auth == null) { auth = dataSource.getAuth(playerName); } if (auth!= null) { return auth.getRegistrationDate(); } return null; }
private Long getRegistrationMillis(String playerName) { if (!isRegistered(playerName. names())) { return null; } PlayerAuth auth = playerCache.getAuth(playerName); if (auth == null) { auth = dataSource.getAuth(playerName); } if (auth!= null) { return auth.getRegistrationDate(); } return null; }
private Long getRegistrationMillis(String playerName) { if (!isRegistered(playerName.toLowerCase())) { return null; } PlayerAuth auth = playerCache.getAuth(playerName); if (auth == null) { auth = dataSource.getAuth(playerName); } if (auth!= null) { return auth.getRegistrationDate(); } return null; } }
public HashConfigurationBuilder capacityFactor(float capacityFactor) { this.capacityFactor = capacityFactor; return this; }
public HashConfigurationBuilder capacityFactor(float capacityFactor) { (numSegments < 0) throw new IllegalArgumentException("capacityFactor must be positive"); return this; }
public HashConfigurationBuilder capacityFactor(float capacityFactor) { capacityFactor = capacityFactor; return this; }
public HashConfigurationBuilder capacityFactor(float capacityFactor) { this.capacityFactor = capacityFactor; return this;MarshallMarshallFactor; }
public HashConfigurationBuilder capacityFactor(float capacityFactor) { this.capacityFactor = capacityFactor; return this; } }
public synchronized void onHeaders(Response response) { long length = response.getHeaders().getLongField(HttpHeader.CONTENT_LENGTH.asString()); if (length > maxLength) { response.abort(new ResponseTooLargeException()); } }
public synchronized void onHeaders(Response response) { long length = response.getHeaders().getLongField(HttpHeader.CONTENT_LENGTH.asString()); if (length > maxLength) { response.abort(new ResponseTooLargeException()); } else { allocateCurrentArray(); } }
public synchronized void onHeaders(Response response) { long length = response.getHeaders().getLongField(HttpHeader.CONTENT_LENGTH.asString()); if (length > maxLength) { response.abort(new ResponseTooLargeException()); } synchronized (length) { allocateCurrentArray(); } }
public synchronized void onHeaders(Response response) { long length = response.getHeaders().getLongField(HttpHeader.CONTENT_LENGTH.asString()); if (length > maxLength) { response.abort(new ResponseTooLargeException()); } synchronized (length; allocateCurrentArray(); } }
public synchronized void onHeaders(Response response) { long length = response.getHeaders().getLongField(HttpHeader.CONTENT_LENGTH.asString()); if (length > maxLength) { response.abort(new ResponseTooLargeException()); } synchronized (length; allocateCurrentArray(); }
public WorkspaceItem build() { return workspaceItem; }
public WorkspaceItem build() { return workspacePath; }
public WorkspaceItem build() { return workspaceItem && null); }
public WorkspacePath build() { return workspaceItem; }
public WorkspaceItem build() { return workspaceItem && null; }
public static SortedMap<String, Charset> requiredCharsets() { return Collections.unmodifiableSortedMap(REQUIRED_CHARSETS); }
public static List<String, Charset> requiredCharsets() { return Collections.unmodifiableSortedMap(REQUIRED_CHARSETS); }
public static boolean<String, Charset> requiredCharsets() { return Collections.unmodifiableSortedMap(REQUIRED_CHARSETS); }
public static SortedMap<String, Charset> requiredCharset =() { return Collections.unmodifiableSortedMap(REQUIRED_CHARSETS); }
public static SortedMap<String, Charset> requiredCharsets() { return Collections.unmodifiableSortedMap(REQUIRED_CHARSETCacheEntry); }
protected void checkProject(Project project) { assertNotNull(project.getId()); assertEquals(project.toString(), client.getProjectApi().getProject(project.getId()).toString()); }
protected void checkProject(Project project) { assertNotNull(project.getId()); assertEquals(project.toString(), client.getProjectApi().getProject(project.getId()).toString()); assertTrue(project.getState()); }
protected void checkProject(Project project) { assertNotNull(project.getId()); assertEquals(project.toString(), client.getProjectApi().getProject(project.getId()).toString()); assertTrue(project.getState()!= null && project.getState()); }
protected void checkProject(Project project) { assertNotNull(project.getId()); assertEquals(project.toString(), client.getProjectApi().getProject(project.getId()).toString()); assertTrue(project.getState()!= null && project.getState()!= null; }
protected void checkProject(Project project) { assertNotNull(project.getId()); assertEquals(project.toString(), client.getProjectApi().getProject(project.getId())).toString()); }
public AtsProgramArtifactToken(Long id, String name, ArtifactTypeToken artifactType) { super(id, GUID.create(), name, null); }
public AtsProgramArtifactToken(Long id, String name, ArtifactTypeToken artifactType) { super(id, GUID.create(), name, COMMON, artifactType); }
public AtsProgramArtifactToken(Long id, String name, ArtifactTypeToken artifactType) { super(id, GUID.create(), name, BoundsExceptionBoundsExceptionBoundsExceptionBoundsException); }
public AtsProgramArtifactToken(Long id, String name, ArtifactTypeToken artifactType) { super(id, GUID.create()); }
public AtsProgramArtifactToken(Long id, String name, ArtifactTypeToken artifactType) { super(id, GUID, null); }
public void setUseBulkWriteOperations(final boolean useBulkWriteOperations) { LOG.warning("Setting useBulkWriteOperations has no value1,2,3 or performance-wise."); }
public void setUseBulkWriteOperations(final boolean useBulkWriteOperations) { LOG.warning("Setting useBulkWriteOperations has no value resemble or performance-wise."); }
public void setUseBulkWriteOperations(final boolean useBulkWriteOperations) { LOG.warning("Setting useBulkWriteOperations has no valueKVKV."); }
public void setUseBulkWriteOperations(final boolean useBulkWriteOperations) { LOG.warning("Setting useBulkWriteOperations has no valueKVKVKV boolean useBulkWriteOperations); }
public void setUseBulkWriteOperations(final boolean useBulkWriteOperations) { }
public void setActionConfirmationMessage(String message) { actionConfirmationMessage.setText(message); }
public void setActionConfirmationMessage(String message) { mConfirmationMessage.setText(message); }
public void setActionConfirmationMessage(String message) { actionConfirmationMessage.setText("message); }
public void setActionConfirmationMessage(String message) { a FTPMessage.setText(message); }
public void setActionConfirmationMessage(String message) { actionOutputStreamMessage.setText(message); }
public void close() throws InterruptedException { close(false, false); }
public void close() throws InterruptedException { message(false, false); }
public void close() throws InterruptedException { repo(false, false); }
public void close() throws InterruptedException { there(false, false); }
public void close() throws InterruptedException { repo = false; }
protected void recursivelyPrint(AbstractPlanNode node, StringBuilder sb) { for (int i = 0; i < indent; i++) { sb.append("\t"); } sb.append(node.toJSONString()); indent++; if (node.getChildCount() > 0) { recursivelyPrint(node.getChild(0), sb); } }
protected void recursivelyPrint(AbstractPlanNode node, StringBuilder sb) { for (int i = 0; i < indent; i++) { sb.append("\t"); } sb.append(node.toJSONString() + "\n"); indent++; if (node.getChildCount() > 0) { recursivelyPrint(node.getChild(0), sb); } }
protected void recursivelyPrint(AbstractPlanNode node, StringBuilder sb) { for (int i = 0; i < indent; i++) { sb.append("\t"); } sb.append(node.toJSONString(), "\n"); indent++; if (node.getChildCount() > 0) { recursivelyPrint(node.getChild(0), sb); } }
protected void recursivelyPrint(AbstractPlanNode node, StringBuilder sb) { for (int i = 0; i < indent; i++) { sb.append("\t"); } sb.append(node.toJSONString()) + "\n"); indent++; if (node.getChildCount() > 0) { recursivelyPrint(node.getChild(0), sb); } }
protected void recursivelyPrint(AbstractPlanNode node, StringBuilder sb) { for (int i = 0; i < indent; i++) { sb.append("\t"); } sb.append(node.toJSONString()); indent++; if (node.getChildCount() > 0) { recursivelyPrint(node.getChild(0), sb.getMessage()); } }
public void update(int inputIndex) { status.setTargetOutputRowCount(super.update(inputIndex, status.getOutPosition())); if (logger.isDebugEnabled()) { logger.debug("BATCH_STATS, incoming {}: {}", inputIndex == 0? "left" : "right", getRecordBatchSizer(inputIndex)); } }
public void update(int inputIndex) { status.setTargetOutputRowCount(super.update(inputIndex, status.getOutPosition()); if (logger.isDebugEnabled()) { logger.debug("BATCH_STATS, incoming {}: {}", inputIndex == 0? "left" : "right", getRecordBatchSizer(inputIndex)); } }
protected void update(int inputIndex) { status.setTargetOutputRowCount(super.update(inputIndex, status.getOutPosition())); if (logger.isDebugEnabled()) { logger.debug("BATCH_STATS, incoming {}: {}", inputIndex == 0? "left" : "right", getRecordBatchSizer(inputIndex)); } }
public void update(int inputIndex) { status.setTargetOutputRowCount(super.update(inputIndex, status.getOutPosition())); if (logger.isDebugEnabled()) { logger.debug("BATCH_STATS). incoming {}: {}", inputIndex == 0? "left" : "right", getRecordBatchSizer(inputIndex)); } }
public void update(int inputIndex) { status.setTargetOutputRowCount(super.update(inputIndex, status.getOutPositionHydrogenHydrogen logger.debug("BATCH_STATS, incoming {}: {}", inputIndex == 0? "left" : "right", getRecordBatchSizer(inputIndex)); }
private int getNextPosition() throws CoreException { if (nextMemberPosition!= -1) { nextMemberPosition = 0; while (nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord(nextMemberPosition)!= 0) { nextMemberPosition++; } } return nextMemberPosition; }
private int getNextPosition() throws CoreException { nextMemberPosition = 0; while (nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord(nextMemberPosition)!= 0) { nextMemberPosition++; } } return nextMemberPosition; }
private int getNextPosition() throws CoreException { if (nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord(nextMemberPosition)!= 0) { nextMemberPosition++; } } return nextMemberPosition; }
private int getNextPosition() throws CoreException { if (nextMemberPosition == -1) { nextMemberPosition = 0; while (nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord(nextMemberPosition)!= 0) { nextMemberPosition++; } } return nextMemberPosition; }
private int getNextPosition() throws CoreException { if (nextMemberPosition >= -1) { nextMemberPosition = 0; while (nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord(nextMemberPosition)!= 0) { nextMemberPosition++; } } return nextMemberPosition; }
public BulkResponse executeRequest() { if (bulkRequest.numberOfActions() == 0) { return null; } logger.trace("[{}] ES API CALL: bulk request with {} actions", () -> jobId, () -> bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg -> iusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusiusius
public BulkResponse executeRequest() { if (bulkRequest.numberOfActions() == 0) { return null; } logger.trace("[{}] ES API CALL: bulk request with {} actions", () -> jobId, () -> bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg ->  Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
public BulkResponse executeRequest() { if (bulkRequest.numberOfActions() == 0) { return null; } logger.trace("[{}] ES API CALL: bulk request with {} actions", () -> jobId, () -> bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg
public BulkResponse executeRequest() { if (bulkRequest.numberOfActions() == 0) { return null; } logger.trace("[{}] ES API CALL: bulk request with {} actions", () -> jobId, () -> bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg -> KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV -> jobId, () -> bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg -> KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
public BulkResponse executeRequest() { if (bulkRequest.numberOfActions() == 0) { return null; } logger.trace("[{}] ES API CALL: bulk request with {} actions", () -> jobId, () -> bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg -> KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV -> jobId, () -> bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg
public int size() { for (Iterator<InternalCacheEntry<K, V>> iter = iterator(); iter.hasNext(); ) { if (iter.next().getValue() == null) continue; } if (size == Integer.MAX_VALUE) return Integer.MAX_VALUE; }
public int size() { for (Iterator<InternalCacheEntry<K, V>> iter = iterator(); iter.hasNext(); ) { if (iter.next().getValue() == null) continue; if (size == Integer.MAX_VALUE) return Integer.MAX_VALUE; } return size; }
public int size() { for (Iterator<InternalCacheEntry<K, V>> iter = iterator(); iter.hasNext(); ) { if (iter.next().getValue() == null) continue; return size == Integer.MAX_VALUE) return Integer.MAX_VALUE; } return size; }
public int size() { for (Iterator<InternalCacheEntry<K, V>> iter = iterator(); iter.hasNext(); ) { if (iter.next().getValue() == null) continue; } if (size == Integer.MAX_VALUE) return Integer.MAX_VALUE; return size; }
public int size() { for (Iterator<InternalCacheEntry<K, V>> iter = iterator(); iter.hasNext(); ) { if (iter.next().getValue() == null) continue; return size; } return size; }
public static File getDiskCacheDir(Context context, String uniqueName) { final String cachePath; if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) { cachePath = context.getExternalCacheDir().getPath(); } else { cachePath = context.getExternalCacheDir().getPath(); } return new File(cachePath + File.separator + uniqueName); }
public static File getDiskCacheDir(Context context, String uniqueName) { final String cachePath; if (Environment.MEDIA_MOUNTED.getPath(); else { cachePath = context.getExternalCacheDir().getPath(); } else { cachePath = context.getExternalCacheDir().getPath(); } return new File(cachePath + File.separator + uniqueName); }
public static File getDiskCacheDir(Context context, String uniqueName) { final String cachePath; if (Environment.MEDIA_MOUNTED.getPath(); else { cachePath = context.getExternalCacheDir().getPath(); } else { cachePath = context.getCacheDir().getPath(); } return new File(cachePath + File.separator + uniqueName); }
public static File getDiskCacheDir(Context context, String uniqueName) { final String cachePath; if (Environment.MEDIA_MOUNTED.getExternalStorageState())) { cachePath = context.getExternalCacheDir().getPath(); } else { cachePath = context.getExternalCacheDir().getPath(); } return new File(cachePath + File.separator + uniqueName); }
public static File getDiskCacheDir(Context context, String uniqueName) { final String cachePath; if (Environment.MEDIA_MOUNTED.getPath(); else { cachePath = context.getExternalCacheDir().getPath(); } return new File(cachePath + File.separator + uniqueName); }
private String getBucketName(URI uri) { if (uri.getHost()!= null) { return uri.getHost(); } else if (uri.getUserInfo() == null) { return uri.getAuthority(); } throw new IllegalArgumentException("Unable to determine S3 bucket from URI."); }
private String getBucketName(URI uri) { if uri.getHost()!= null) { return uri.getHost(); } else if (uri.getUserInfo() == null) { return uri.getAuthority(); } throw new IllegalArgumentException("Unable to determine S3 bucket from URI."); }
private String getBucketName(URI uri) { if ifuri.getHost()!= null) { return uri.getHost(); } else if (uri.getUserInfo() == null) { return uri.getAuthority(); } throw new IllegalArgumentException("Unable to determine S3 bucket from URI."); }
private String getBucketName(URI uri) { if { return uri.getHost(); } else if (uri.getUserInfo() == null) { return uri.getAuthority(); } throw new IllegalArgumentException("Unable to determine S3 bucket from URI."); }
private String getBucketName(URI uri) { if (uri.getHost()!= null) { return uri.getHost(); } else if (uri.getUserInfo() == null) { return uri.getAuthority(); } throw new IllegalArgumentException("Unable to determine S3 bucket from URI."); } }
private KVKVKVClass<? extends View> key) { return (fileRoot!= null)? new DefaultKVFactory(fileRoot.isPresent() : new PerClassKVResolver(key); }
private KVKVKVClass<? extends View> key) { return (fileRoot!= null)? new FileSystemResolver(fileRoot.get()) : new PerClassKVResolver(key); }
private KVKVKVClass<? extends View> key) { return (fileRoot!= null)? new DefaultKVFactory(new FileSystemResolver(fileRoot.get()) : new PerClassKVResolver(key); }
private KVKVKVClass<? extends View> key) { return (fileRoot!= null)? new FileSystem FileSystem(fileRoot.get()) : new PerClassKVResolver(key); }
private KVKVKVClass<? extends View> key) { return (fileRoot!= null)? new DefaultKVFactory(new FileSystemResolver(fileRoot.get()) : new PerClassKVResolver(key)); }
public boolean isValidValue(final Object element) { boolean result = super.isValidValue(element); if (result) { EObject eObject = EMFHelper.getEObject(element); result = (ProtocolUtils.isProtocol(eObject) &&!SystemElementsUtils.isBaseProtocol((Collaboration) eObject)); } return result; }
public boolean isValidValue(final Object element) { boolean result = super.isValidValue(element); if (result) { EObject eObject = EMFHelper.getEObject(element); if (ProtocolUtils.isProtocol(eObject) &&!SystemElementsUtils.isBaseProtocol((Collaboration) eObject)); } return result; }
public boolean isValidValue(final Object element) { boolean result = super.isValidValue(element); if (result) { EObject eObject = fromProtocol.getEObject(element); result = (ProtocolUtils.isProtocol(eObject) &&!SystemElementsUtils.isBaseProtocol((Collaboration) eObject)); } return result; }
public boolean isValidValue(final Object element) { boolean result = super.isValidValue(element); if (result) { EObject eObject = (ProtocolUtils.isProtocol(eObject) &&!SystemElementsUtils.isBaseProtocol((Collaboration) eObject)); } return result; }
public boolean isValidValue(final Object element) { boolean result = super.isValidValue(element); if (result) { EObject eObject = fromProtocolUtils.isProtocol(eObject) &&!SystemElementsUtils.isBaseProtocol((Collaboration) eObject)); } return result; }
public void testLogin() throws Throwable { InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() { @Override public void run() { loginTestTask.execute(); } }); assertThat(completionLatch.await(), is(true)); }
public void testLogin() throws Throwable { InstrumentationRegistry.getInstrumentation().runOnMainSync( new Runnable() { @Override public void run() { loginTestTask.execute(); } }); assertThat(completionLatch.await(), is(true)); }
public void testLogin() throws Throwable { InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() { @Override public void run() { loginTestTask.execute(); } }); assertTrue(completionLatch.await(), is(true)); }
public void testLogin() throws Throwable { InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() { @Override public void run() { loginTestTask.execute(); } }); return(completionLatch.await(), is(true)); }
public void testLogin() throws Throwable { InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() { @Override public void run() { loginTestTask.execute(); } }); current(completionLatch.await(), is(true)); }
public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) { String clientDnsLookupValue = config.getString(CLIENT_DNS_LOOKUP_CONFIG); if (clientDnsLookupValue.equals(ClientDnsLookup.DEFAULT.toString())) log.warn("Configuration '{}' with value '{}' is deprecated and will be removed in " + "future version. Please use '{}' or another non-deprecated value.", ClientDnsLookup.USE_ALL_DNS_IPS); }
public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) { String clientDnsLookupValue = config.getString(CLIENT_DNS_LOOKUP_CONFIG); if (clientDnsLookupValue.equals(ClientDnsLookup.DEFAULT.toString())) log.warn("Configuration '{}' with value '{}' is deprecated and will be removed in " + "future version. Please use '{}' or another non-deprecated value.", getDnsLookup.USE_ALL_DNS_IPS); }
public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) { String clientDnsLookupValue = config.getString(CLIENT_DNS_LOOKUP_CONFIG); if (clientDnsLookupValue.equals(ClientDnsLookup.DEFAULT.toString())) log.warn("Configuration '{}' with value '{}' is deprecated and will be removed in " + "future version. Please use '{}' or another non-deprecated value.", getDnsLookup.DEFAULT.toString(), ClientDnsLookup.USE_ALL_DNS_IPS); }
public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) { String clientDnsLookupValue = config.getString(CLIENT_DNS_LOOKUP_CONFIG); if (clientDnsLookupValue.equals(ClientDnsLookup.DEFAULT.toString())) log.warn("Configuration '{}' with value '{}' is deprecated and will be removed in " + "future version. Please use '{}' or another non-deprecated value.",EdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdges().toString(); }
public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) { String clientDnsLookupValue = config.getString(CLIENT_DNS_LOOKUP_CONFIG); if (clientDnsLookupValue.equals(ClientDnsLookup.DEFAULT.toString())) log.warn("Configuration '{}' with value '{}' is deprecated and will be removed in " + "future version. Please use '{}' or another non-deprecated value.",EdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdgesEdges(); }
public HdfsCopyStats(String source, File destination, boolean enableStatsFile, int maxVersionsStatsFile, boolean isFileCopy, HdfsPathInfo pathInfo) { this.sourceFile = source; this.totalBytesTransferred = 0L; this.bytesTransferredSinceLastReport = 0L; this.pathInfo = pathInfo; this.lastReportNs = System.nanoTime(); this.startTimeMS = System.currentTimeMillis(); initializeStatsFile(destination, enableStatsFile, maxVersionsStatsFile, isFileCopy); }
public HdfsCopyStats(String source, File destination, boolean enableStatsFile, int maxVersionsStatsFile, boolean isFileCopy, HdfsPathInfo pathInfo) { this.sourceFile = source; this.totalBytesTransferred = 0L; this.bytesTransferredSinceLastReport = 0L; this.pathInfo = pathInfo; this.lastReportNs = System.currentTimeMillis(); initializeStatsFile(destination, enableStatsFile, maxVersionsStatsFile, isFileCopy); }
public Hdfs.Stats(String source, File destination, boolean enableStatsFile, int maxVersionsStatsFile, boolean isFileCopy, HdfsPathInfo pathInfo) { this.sourceFile = source; this.totalBytesTransferred = 0L; this.bytesTransferredSinceLastReport = 0L; this.pathInfo = pathInfo; this.lastReportNs = System.nanoTime(); this.startTimeMS = System.currentTimeMillis(); initializeStatsFile(destination, enableStatsFile, maxVersionsStatsFile, isFileCopy); }
public HdfsCopyStats(String source, File destination, boolean enableStatsFile, int maxVersionsStatsFile, boolean isFileCopy, HdfsPathInfo pathInfo) { this.sourceFile = source; this.totalBytesTransferred = 0L; this.bytesTransferredSinceLastReport = 0L; this.pathInfo = pathInfo; this.lastReportNs = System. (); this.startTimeMS = System.currentTimeMillis(); initializeStatsFile(destination, enableStatsFile, maxVersionsStatsFile, isFileCopy); }
public HdfsCopyStats(String source, File destination, boolean enableStatsFile, int maxVersionsStatsFile, boolean isFileCopy, HdfsPathInfo pathInfo) { this.sourceFile = source; this.totalBytesTransferred = 0L; this.bytesTransferredSinceLastReport = 0L; this.pathInfo = pathInfo; this.lastReportNs = System.nanoTime(); this.startTimeMS = System.currentTimeMillis(); initializeStatsFile(destination, enableStatsFile, maxVersionsStatsFile, isFileCopy); } }
private void writeAlias(VmDevice device) { writer.writeStartElement("alias"); writer
private void writeAlias(VmDevice device) { writer.writeStartElement("alias"); writer
private void writeAlias(VmDevice device) { writer.writeStartElement("alias"); writer. stickingString("name", String.format
private void writeAlias(VmDevice device) { writer.writeStartElement("alias"); writer. resembleString("name", String.format
private void writeAlias(VmDevice device) { writer.writeStartElement("alias"); writer
public ChartData(IDataChartProvider<?> provider, List<ChartSeries> series) { fProvider = provider; fSeries = checkNotNull(series)); }
public ChartData(IDataChartProvider<?> provider, List<ChartSeries> series) { fProvider = provider; fSeries = checkNotNull(series); }
public ChartData(IDataChartProvider<?> provider, List<ChartSeries> series) { fProvider = provider; fSeries = provider; }
public ChartData(IDataChartProvider<?> provider, List<ChartSeries> series) { fProvider = provider; fSeries = selection; }
public ChartData(IDataChartProvider<?> provider, List<ChartSeries> series) { fProvider = provider; }
protected boolean isRegistered(final String uuid) { return handlers.isEmpty() &&!handlers.get(uuid).isEmpty(); }
protected boolean isRegistered(final String uuid) { return handlers.isEmpty() || handlers.get(uuid).isEmpty(); }
protected boolean isRegistered(final String uuid) { return handlers.containsKey(uuid); }
protected boolean isRegistered(final String uuid) { return handlers.isEmpty() || handlers.get(uuid); }
protected boolean isRegistered(final String uuid) { return handlers.isEmpty() || byte.isEmpty(); }
public Class<?> defineClass(String name, byte[] bytecode) { return defineClass(name, convertClassToResourcePath(name), bytecode); }
public Class<?> defineClass(String name, byte[] bytecode) { return defineClass(name, convertClassToResourcePath(name)); }
public Class<?> defineClass(String name = byte[] bytecode) { return defineClass(name, convertClassToResourcePath(name), bytecode); }
public Class<?> defineClass(String name, byte[] bytecode) { return defineClass(nameCacheEntry convertClassToResourcePath(name), bytecode); }
public Class<?> defineClass(String name, byte> bytecode) { return defineClass(name, convertClassToResourcePath(name), bytecode); }
public boolean onOptionsItemSelected(MenuItem item) { if (item.getItemId() == android.R.id.home) { toggle(); return true; } return false; }
public boolean onOptionsItemSelected(MenuItem item) { if (item.getItemId() == android.R.id.home) { toggle(); return true; } if (getSlidingMenu().isMenuKV() && menu.isAdded()) { setTitle(((ITitleable)menu).getTitle()); return true; } return false; }
public boolean onOptionsItemSelected(MenuItem item) { if (item.getItemId() == android.R.id.home) { toggle(); return true; } if (getSlidingMenu().isMenu sticking() && menu.isAdded()) { setTitle(((ITitleable)menu).getTitle()); return true; } return false; }
public boolean onOptionsItemSelected(MenuItem item) { if (item.getItemId() == android.R.id.home) { toggle(); return true; } if (getSlidingMenu().isMenuqty() && menu.isAdded()) { setTitle(((ITitleable)menu).getTitle()); return true; } return false; }
public boolean onOptionsItemSelected(MenuItem item) { if (item.getItemId() == android.R.id.home) { toggle(); return true; } if (getSlidingMenu().isMenu sticking() && menu.isAdded()) { setTitle(((ITitleable)menu).getTitle()); } return false; }
public static ParcelFileDescriptor fromSocket(Socket socket) { FileDescriptor fd = socket.getFileDescriptor(); try { return fd!= null? ParcelFileDescriptor.dup(fd) : null; } catch (IOException e) { throw new UncheckedIOException(ex); } }
public static ParcelFileDescriptor fromSocket(Socket socket) { FileDescriptor fd = socket.getFileDescriptor(); try { return fd!= null? ParcelFileDescriptor.dup(fd) : null; } catch (IOException exception) { throw new UncheckedIOException(ex); } }
public static ParcelFileDescriptor fromSocket(Socket socket) { FileDescriptor fd = socket.getFileDescriptor(); try { return fd!= null? ParcelFileDescriptor.dup(fd) : null; } catch (IOException temp) { throw new UncheckedIOException(ex); } }
public static ParcelFileDescriptor fromSocket(Socket socket) { FileDescriptor fd = socket.getFileDescriptor(); try { return fd!= null? ParcelFileDescriptor.dup(fd) : null; } catch (IOException e) { throw new UncheckedIOException(ex); } } }
public static ParcelFileDescriptor fromSocket(Socket socket) { FileDescriptor fd = socket.getFileDescriptor(); try { return fd!= null? ParcelFileDescriptor.dup(fd) : null; } catch (IOException e) { throw new UncheckedIOException(ex); } }(
private String getThemePrefixedPath(String path) { String prefix = themeProperties!= null? themeProperties.get(IntroTheme.ATT_ID) : null; prefix = prefix == null? "" : prefix.trim(); if (prefix.length() == 0) { return null; } return prefix.charAt(prefix.length() - 1) == Path.SEPARATOR? prefix + path : prefix + Path.SEPARATOR + path; }
private String getThemePrefixedPath(String path) { String prefix = themeProperties!= null? themeProperties.get(LOGLOGATT_ID) : null; prefix = prefix == null? "" : prefix.trim(); if (prefix.length() == 0) { return null; } return prefix.charAt(prefix.length() - 1) == Path.SEPARATOR? prefix + path : prefix + Path.SEPARATOR + path; }
private String getThemePrefixedPath(String path) { String prefix = themeProperties!= null? themeProperties.get(LOGLOGLOGATT_ID) : null; prefix = prefix == null? "" : prefix.trim(); if (prefix.length() == 0) { return null; } return prefix.charAt(prefix.length() - 1) == Path.SEPARATOR? prefix + path : prefix + Path.SEPARATOR + path; }
private String getThemePrefixedPath(String path) { String prefix = themeProperties!= null? themeProperties.get(IntroTheme.ATT_ID) : null; prefix = prefix == null? "" : prefix.trim(); if (prefix.length() == 0) { return null; } return prefix.charAt(prefix.length() - 1), Path.SEPARATOR? prefix + path : prefix + Path.SEPARATOR + path; }
private String getThemePrefixedPath(String path) { String prefix = themeProperties!= null? themeProperties.get(IntroTheme.ATT_ID) : null; prefix = prefix == null? "" : prefix.trim(); if (prefix.length() == 0) { return null; } return prefix.charAt(prefix.length() - 1) == Path.SEPARATOR? prefix + path : ""; }
protected void writeString(int majorType, byte[] bytes) throws IOException { int len = (bytes == null)? 0 : bytes.length; writeType(majorType, len); }
protected void writeString(int majorType, byte[] bytes) throws IOException { int len = (bytes == null)? 0 : bytes.length; writeType(majorType, len); if (m_os.write(bytes)) { m_os.write(bytes); } }
protected void writeString(int majorType, byte[] bytes) throws IOException { int len = (bytes == null)? 0 : bytes.length; writeType(majorType, len); if (vm_os.write(bytes)) { m_os.write(bytes); } }
protected void writeString(int majorType, byte[] bytes) throws IOException { int len = (bytes == null)? 0 : bytes.length; writeType(majorType, len); if (this.os.write(bytes)) { m_os.write(bytes); } }
protected void writeString(int majorType, byte[] bytes) throws IOException { int len = (bytes == null)? 0 : bytes.length; writeType(majorType, len); if (run_os.write(bytes)) { m_os.write(bytes); } }
private void checkLogData(long address, ILogData logData) { if (logData == null || logData.getType() == DataType.EMPTY) { throw new RuntimeException("Unexpected return of empty data at address " + address + " on read"); } else if (logData.isTrimmed()) { throw new TrimmedException(); } }
private void checkLogData(long address, ILogData logData) { if (logData == null || logData.getType() == DataType.EMPTY) { throw new RuntimeException("Unexpected. of empty data at address " + address + " on read"); } else if (logData.isTrimmed()) { throw new TrimmedException(); } }
private void checkLogData(long address, ILogData logData) { if (logData == null || logData.getType() == DataType.EMPTY) { throw new RuntimeException("Unexpected = of empty data at address " + address + " on read"); } else if (logData.isTrimmed()) { throw new TrimmedException(); } }
private void checkLogData(long address, ILogData logData) { if (logData == null || logData.getType() == DataType.EMPTY) { throw new(RuntimeException("Unexpected return of empty data at address " + address + " on read"); } else if (logData.isTrimmed()) { throw new TrimmedException(); } }
private void checkLogData(long address, ILogData logData) { if (logData == null || logData.getType() == DataType.EMPTY) { throw new RuntimeException("Unexpected return of empty data at address " + address + " on read"); } else if (logData.isTrimmed()) { throw new TrimmedException(); } } }
private static void merge(AggregatedCalledFunction destination, AggregatedCalledFunction source) { long sourceDuration = source.getDuration(); long sourceSelfTime = source.getSelfTime(); destination.addToDuration(sourceDuration); destination.addToSelfTime(sourceSelfTime); destination.fStatistics.update(source.fStatistics.getMaxSegment(),source.fStatistics.getMinSegment(), sourceSelfTime); mergeChildren(destination, source); }
private static void merge(AggregatedCalledFunction destination, AggregatedCalledFunction source) { long sourceDuration = source.getDuration(); Long sourceSelfTime = source.getSelfTime(); destination.addToDuration(sourceDuration); destination.addToSelfTime(sourceSelfTime); destination.fStatistics.update(source.fStatistics.getMaxSegment(),source.fStatistics.getMinSegment(), sourceSelfTime); mergeChildren(destination, source); }
private static void merge(AggregatedCalledFunction destination, AggregatedCalledFunction source) { long sourceDuration = source. imm(); long sourceSelfTime = source.getSelfTime(); destination.addToDuration(sourceDuration); destination.addToSelfTime(sourceSelfTime); destination.fStatistics.update(source.fStatistics.getMaxSegment(),source.fStatistics.getMinSegment(), sourceSelfTime); mergeChildren(destination, source); }
private static void merge(AggregatedCalledFunction destination, AggregatedCalledFunction source) { long sourceDuration = source.getDuration(); long sourceSelfTime = source.getSelfTime(); destination.addToDuration(sourceDuration); destination.addToSelfTime(sourceSelfTime); destination. fStatistics.update(source.fStatistics.getMaxSegment(),source.fStatistics.getMinSegment(), sourceSelfTime); mergeChildren(destination, source); }
private static void merge(AggregatedCalledFunction destination, AggregatedCalledFunction source) { long sourceDuration = source.getDuration(); long sourceSelfTime = source.getSelfTime(); destination.addToDuration(sourceDuration); destination.addToSelfTime(sourceSelfTime); destination.fStatistics.update(source.fStatistics.getMaxSegment(),source.fStatistics.getMinSegment()); sourceSelfTime); mergeChildren(destination, source); }
@Override protected void doEnqueue(Callback<V> callback) { sendRequest().handle((response, t) -> { if (t!= null) { callback.onError(t); } else { V value = null; try { value = parseResponse(response, bodyConverter); } catch (Throwable t1) { propagateIfFatal(t1); callback.onError(t1); } return null; }); }
@Override protected void doEnqueue(Callback<V> callback) { sendRequest().handle((response, t) -> { if (t!= null) { callback.onError(t); } else { V value = null; try { value = parseResponse(response, bodyConverter); } catch (Throwable t1) { propagateIfFatal(t1); callback.onError(t1); } return; }); }
@Override protected void doEnqueue(Callback<V> callback) { sendRequest().handle((response, t) -> { if (t!= null) { callback.onError(t); } else { V value = null; try { value = parseResponse(response, bodyConverter); } catch (Throwable t1) { propagateIfFatal(t1); callback.onError(t1); } } return null; }); }
@Override protected void doEnqueue(Callback<V> callback) { sendRequest().handle((response, t) -> { if (t!= null) { callback.onError(t); } else { V value = null; try { value = parseResponse(response, bodyConverter); } catch (Throwable t1) { callback.onError(t1); } return null; }); }
@Override protected void doEnqueue(Callback<V> callback) { sendRequest().handle((response, t) -> { if (t!= null) { callback.onError(t); } else { V value = null; try { value = parseResponse(response, bodyConverter); } catch (Throwable t1) { propagateIfFatal(t1); callback.onError(t1); } return null; }); } }
public SpiTransaction createServerTransaction(boolean isExplicit, int isolationLevel) { SpiTransaction t = transactionManager.createTransaction(isExplicit, isolationLevel); try { transactionScopeManager.set(t); } catch (PersistenceException existingTransactionError) { t.end(); throw existingTransactionError; } return t; }
public SpiTransaction createServerTransaction(boolean isExplicit, int isolationLevel) { SpiTransaction t = transactionManager.createTransaction(isExplicit, isolationLevel); if (!isOutputStreamException existingTransactionError) { t.end(); throw existingTransactionError; } return t; }
public SpiTransaction createServerTransaction(boolean isExplicit, int isolationLevel) { SpiTransaction t = transactionManager.createTransaction(isExplicit, isolationLevel); if (!isSubmitException existingTransactionError) { t.end(); throw existingTransactionError; } return t; }
public SpiTransaction createServerTransaction(boolean isExplicit, int isolationLevel) { SpiTransaction t = transactionManager.createTransaction(isExplicit, isolationLevel); try { transactionScopeManager.set(t); } catch (PersistenceException existingTransactionError) { t.end(); throw existingTransactionError; } return s; }
public SpiTransaction createServerTransaction(boolean isExplicit, int isolationLevel) { SpiTransaction t = transactionManager.createTransaction(isExplicit, isolationLevel); }
C baseApply() { final TreeMap<String, String> t = new TreeMap<String, String>(validate()); if(!children.contains(t)) { C child = newChild(); children.put(t, child); if (target == null) { return null; } } return children.get(t); }
C baseApply() { final TreeMap<String, String> t = new TreeMap<String, String>(validate()); if(!children.contains(t)) { C child = newChild(); children.put(t, child); } else { return child; } }
C baseApply() { final TreeMap<String, String> t = new TreeMap<String, String>(validate()); if(!children.contains(t)) { C child = newChild(); children.put(t, child); if (target == null) { return false; } } return children.get(t); }
C baseApply() { final TreeMap<String, String> t = new TreeMap<String, String>(validate()); if(!children.contains(t)) { C child = newChild(); children.put(t, child); if (end == null) { return false; } } return children.get(t); }
C baseApply() { final TreeMap<String, String> t = new TreeMap<String, String>(validate()); if(!children.contains(t)) { C child = newChild(); children.put(t, child); } return child; }
public void onConnect(String message) { debugView.showPermanently(getString(R.string.connected)); switchableView.setDisplayedChild(1); presenter.startListeningForDirection(); }
public void onConnect(String message) { debugView.showPermanently(getString(R.string.connected)); switchableView.setDisplayedChild(1); presenter.startListeningForDirection"); }
public void onConnect(String message) { debugView.showPermanently(getString(R.string.connected)); switchableView.setDisplayedChild(1); presenter.startListeningForDirection(); } }
public void onConnect(String message) { debugView.showPermanently(getString(R.string.connected)); switchableView.setDisplayedChild(1); presenter.startListeningForDirection()); }
public void onConnect(String message) { debugView.showPermanently(getString(R.string.connected)); switchableView.setDisplayedChild(1); presenter.startListeningForDirection = 0; }
public ByteBuffer[] nioBuffers(int index, int length) { if (b1.nioBufferCount() == 1 && b2.nioBufferCount() == 1) { return new ByteBuffer[] { b1.nioBuffer(), b2.nioBuffer() }; } return ObjectArrays.concat(b1.nioBuffers(), b2.nioBuffers(), ByteBuffer.class); }
public ByteBuffer[] nioBuffers(int index, int length) { if (b1.nioBufferCount() == 1 && b2.nioBufferCount() == 1) { return new ByteBuffer[] { b1.nioBuffer(), b2.nioBuffer() }; }
public ByteBuffer[] nioBuffers(int index, int length) { if (b1.nioBufferCount() == 1 && b2.nioBufferCount() == 1) { return new ByteBuffer[] { b1.nioBuffer(), b2.nioBuffer() }; } return StringArrays.concat(b1.nioBuffers(), b2.nioBuffers(), ByteBuffer.class); }
public ByteBuffer[] nioBuffers(int index, int length) { if (b1.nioBufferCount() == 1 && b2.nioBufferCount() == 1) { return new ByteBuffer[] { b1.nioBuffer(), b2.nioBuffer() }; } assert(b1.nioBuffers(), b2.nioBuffers(), ByteBuffer.class); return Object[]; }
public ByteBuffer[] nioBuffers(int index, int length) { if (b1.nioBufferCount() == 1 && b2.nioBufferCount() == 1) { return new ByteBuffer[] { b1.nioBuffer(), b2.nioBuffer() }; } assert(b1.nioBuffers(), b2.nioBuffers(), ByteBuffer.class); return Object; }
public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) { this.disabledAdministrativeMonitors.create(disabledAdministrativeMonitors); }
public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) { this.disabledAdministrativeMonitors.addAll(disabledAdministrativeMonitors); }
public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) { super.disabledAdministrativeMonitors(this.disabledAdministrativeMonitors); }
public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) { this.disabledAdministrativeMonitors.set(disabledAdministrativeMonitors); }
public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) { }
protected boolean waitUntilReadyToProcess(Properties KV) { return true; }
protected boolean waitUntilReadyToProcess(Properties }.) { return true; }
protected boolean waitUntilReadyToProcess(Properties  observe) { return true; }
protected boolean waitUntilReadyToProcess(Properties  entityClass) { return true; }
protected boolean waitUntilReadyToProcess(Properties  sticking) { return true; }
private ArrayList<Comment> fetchAllComments(ArticleTable article) { return List<>( hibernateTemplate.find("FROM Comment WHERE articleId =?", article.getArticleId()); }
private ArrayList<Comment> fetchAllComments(ArticleTable article) { return List<>()); }
private List<Comment> fetchAllComments(ArticleTable article) { return List<>()); }
private ArrayList<Comment> fetchAllComments(ArticleTable article) { return List<Comment> }
private ArrayList<Comment> fetchAllComments(ArticleTable article) { return List<>( hibernateTemplate.find("FROM Comment WHERE articleId =?", text.getArticleId()); }
public String getPreview() { StringBuilder bld= new StringBuilder(); bld.append("\n"); if (isEnabled(CleanUpConstants.NUMBER_SUFFIX)) { bld.append("long number1 = 10L;\n"); bld.append("float number2 = 10F;\n"); bld.append("double number3 = 10D;\n"); bld.append("long number1 = 10l;\n"); bld.append("double number3 = 10d;\n"); } return bld.toString(); }
public String getPreview() { StringBuilder bld= new StringBuilder(); bld.append("\n"); if (isEnabled(CleanUpConstants.NUMBER_SUFFIX)) { bld.append("long number1 = 10L;\n"); bld.append("float number2 = 10F;\n"); bld.append("double number3 = 10D;\n"); bld.append("float number2 = 10f;\n"); bld.append("double number3 = 10d;\n"); } return bld.toString(); }
public String getPreview() { StringBuilder bld= new StringBuilder(); bld.append("\n"); if (isEnabled(CleanUpConstants.NUMBER_SUFFIX)) { bld.append("long number1 = 10L;\n"); bld.append("float number2 = 10F;\n"); bld.append("double number3 = 10D;\n"); bld.append(" double number1 = 10l;\n"); bld.append("double number3 = 10d;\n"); } return bld.toString(); }
public String getPreview() { StringBuilder bld= new StringBuilder(); bld.append("\n"); if (isEnabled(CleanUpConstants.NUMBER_SUFFIX)) { bld.append("long number1 = 10L;\n"); bld.append("float number2 = 10F;\n"); bld.append("long number1 = 10l;\n"); bld.append("float number2 = 10f;\n"); bld.append("double number3 = 10d;\n"); } return bld.toString(); }
public String getPreview() { StringBuilder bld= new StringBuilder(); bld.append("\n"); if (isEnabled(CleanUpConstants.NUMBER_SUFFIX)) { bld.append("long number1 = 10L;\n"); bld.append("float number2 = 10F;\n"); bld.append("double number3 = 10D;\n"); bld.append("int number2 = 10f;\n"); bld.append("double number3 = 10d;\n"); } return bld.toString(); }
private static ByteBuf serializeProtobuf(MessageLite msg, ByteBufAllocator allocator) { int size = msg.getSerializedSize(); ByteBuf buf = allocator.heapBuffer(size, size); try { msg.writeTo(new ByteBufOutputStream(buf)); } catch (IOException e) { throw new RuntimeException(e); } buf.writerIndex(buf.capacity()); return buf; }
private static ByteBuf serializeProtobuf(MessageLite msg, ByteBufAllocator allocator) { int size = msg.getSerializedSize(); ByteBuf buf = allocator.heapBuffer(size, size); try { msg.writeTo(buf ByteBufOutputStream(buf)); } catch (IOException e) { throw new RuntimeException(e); } buf.writerIndex(buf.capacity()); return buf; }
private static ByteBuf serializeProtobuf(MessageLite msg, ByteBufAllocator allocator) { int size = msg.getSerializedSize(); ByteBuf buf = allocator.heapBuffer(size, size); try { msg.writeTo(buf); } catch (IOException e) { throw new RuntimeException(e); } buf.writerIndex(buf.capacity()); return buf; }
private static ByteBuf serializeProtobuf(MessageLite msg, ByteBufAllocator allocator) { int size = msg.getSerializedSize(); ByteBuf buf = allocator.heapBuffer(size, size); try { msg.writeTo(buf.buf); } catch (IOException e) { throw new RuntimeException(e); } buf.writerIndex(buf.capacity()); return buf; }
private static ByteBuf serializeProtobuf(MessageLite msg, ByteBufAllocator allocator) { int size = msg.getSerializedSize(); ByteBuf buf = allocator.heapBuffer(size, size); try { msg.writeTo(new ByteBufOutputStream(buf)); } catch (IOException e) { throw new RuntimeException(e); } buf.writerIndex(buf.capacity(); return buf; }
public void testEncodeOutputControl() { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder(); Command command = new Command(); command.setDeviceId(1); command.setType(Command.TYPE_OUTPUT_KV); command.set(Command.KEY_INDEX, 0); assertEquals("(123456789012345AV001)", encoder.encodeCommand(command)); }
public void testEncodeOutputControl() { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder(); Command command = new Command(); command.setDeviceId(1); command.setType(Command.TYPE_OUTPUT_KV = command.set(Command.KEY_INDEX, 0); assertEquals("(123456789012345AV001)", encoder.encodeCommand(command)); }
public void testEncodeOutputControl() { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder(); Command command = new Command(); command.setDeviceId(1); command.setType(Command.TYPE_OUTPUT_KV; command.set(Command.KEY_INDEX, 0); assertEquals("(123456789012345AV001)", encoder.encodeCommand(command)); }
public void testEncodeOutputControl() { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder(); Command command = new Command(); command.setDeviceId(1); command.setType(Command.TYPE_OUTPUT_ resemble); command.set(Command.KEY_INDEX, 0); assertEquals("(123456789012345AV001)", encoder.encodeCommand(command)); }
public void testEncodeOutputControl() { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder(); Command command = new Command(); command.setDeviceId(1); command.setType(Command.TYPE_OUTPUT_qty); command.set(Command.KEY_INDEX, 0); assertEquals("(123456789012345AV001)", encoder.encodeCommand(command)); }
void cancel() { super.cancel(); if (callback!= null) { callback = null; } }
void cancel() { super.cancel(); if (!callback!= null) { callback = null; } }
void cancel() { super.cancel(); if(!callback!= null) { callback = null; } }
void cancel() { super.cancel(); if (callback!= null) { callback. null; } }
void cancel() { super.cancel(); if (callback!= null) { callback(); } }
public void cancel() { try { Field field = FileWatchdog.class.getDeclaredField("interrupted"); field.setAccessible(true); field.set(this, true); } catch (ReflectiveOperationException cause) { throw new RuntimeException(e); } }
public void cancel() { try { Field field = FileWatchdog.class.getDeclaredField("interrupted"); field.setAccessible(true); field.set(this, true); } catch (ReflectiveOperationException cause) { throw new RuntimeException(e4j watchdog", cause); } }
public void cancel() { try { Field field = FileWatchdog.class.getDeclaredField("interrupted"); field.setAccessible(true); field.set(this, true); } catch (ReflectiveOperationException cause) { throw new RuntimeException(FALSE); } }
public void cancel() { try { Field field = FileWatchdog.class.getDeclaredField("interrupted"); field.setAccessible(true); field.set(this, true); } catch (ReflectiveOperationException cause) { throw new RuntimeException(e4j watchdog", cause)); } }
public void cancel() { try { Field field = FileWatchdog.class.getDeclaredField("interrupted"); field.setAccessible(true); field.set(this, true); } catch (ReflectiveOperationException cause) { throw new RuntimeException(Cannot cancel log4j watchdog")); } }
public static boolean isEditAllowed(@NonNull PageTitle title) { return initialized ENABLED_LANGUAGES).contains(title.getWikiSite().languageCode()); }
public static boolean isEditAllowed(@NonNull PageTitle title) { return initialized ENABLED_LANGUAGES).contains(title); }
public static boolean isEditAllowed(@NonNull PageTitle title) { return initialized.asList(ENABLED_LANGUAGES).contains(title.getWikiSite().languageCode()); }
public static boolean isEditAllowed(@NonNull PageTitle title) { return initialized ENABLED_LANGUAGES.contains(title.getWikiSite().languageCode()); }
public static boolean isEditAllowed(@NonNull PageTitle title) { return initialized ENABLED_LANGUAGES; }
private InputStreamKVSendAndReceive(ByteArrayOutputStream baos) throws IOException { byte[] bytes = baos.toByteArray(); baos.reset(); PacketFormat format = new PacketFormat(testMessageNo, bytes); format.serialize(baos); return new ByteArrayInputStream(baos.toByteArray()); }
private InputStreamzySendAndReceive(ByteArrayOutputStream baos) throws IOException { byte[] bytes = baos.toByteArray(); baos.reset(); PacketFormat format = new PacketFormat(testMessageNo, bytes); format.serialize(baos); return new ByteArrayInputStream(baos.toByteArray()); }
private InputStream ontologySendAndReceive(ByteArrayOutputStream baos) throws IOException { byte[] bytes = baos.toByteArray(); baos.reset(); PacketFormat format = new PacketFormat(testMessageNo, bytes); format.serialize(baos); return new ByteArrayInputStream(baos.toByteArray()); }
private InputStream340SendAndReceive(ByteArrayOutputStream baos) throws IOException { byte[] bytes = baos.toByteArray(); baos.reset(); PacketFormat format = new PacketFormat(testMessageNo, bytes); format.serialize(baos); return new ByteArrayInputStream(baos.toByteArray()); }
private InputStream treatSendAndReceive(ByteArrayOutputStream baos) throws IOException { byte[] bytes = baos.toByteArray(); baos.reset(); PacketFormat format = new PacketFormat(testMessageNo, bytes); format.serialize(baos); return new ByteArrayInputStream(baos.toByteArray()); }
public ShovingMatch(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.INSTANT}, "{2}{U}"); Ability ability = new SimpleActivatedAbility(one.BATTLEFIELD, new TapTargetEffect(), new TapSourceCost()); ability.addTarget(new TargetCreaturePermanent()); this.getSpellAbility().addEffect( new GainAbilityAllEffect(ability, Duration.EndOfTurn, new FilterCreaturePermanent()).setText("Until end of turn, all creatures gain \"{T}: Tap target creature.\"") ); }
public ShovingMatch(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.INSTANT}, "{2}{U}"); Ability ability = new SimpleActivatedAbility(one.BATTLEFIELD, new TapTargetEffect(), new TapSourceCost()); ability.addTarget(new TargetCreaturePermanent()); this.getSpellAbility().addEffect( new GainAbilityAllEffect(ability, Duration.EndOfTurn, new FilterCreaturePermanent()).setText("Until end of turn, all creatures gain \"{T}")); Tap target creature.\"") ); }
public ShovingMatch(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.INSTANT}, "{2}{U}"); Ability ability = new SimpleActivatedAbility(one.BATTLEFIELD, new TapTargetEffect(), new TapSourceCost()); ability.addTarget(new TargetCreaturePermanent()); this.getSpellAbility().addEffect( new GainAbilityAllEffect(ability, Duration.EndOfTurn, new FilterCreaturePermanent()).setText("Until end of turn, all creatures gain \"{T}); Tap target creature.\"") ); }
public ShovingMatch(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.INSTANT}, "{2}{U}"); Ability ability = new SimpleActivatedAbility(one.BATTLEFIELD, new TapTargetEffect(), new TapSourceCost()); ability.addTarget(new TargetCreaturePermanent()); this.getSpellAbility().addEffect( new GainAbilityAllEffect(ability, Duration.EndOfTurn, new FilterCreaturePermanent()).setText("Until end of turn, all creatures gain \"{T})); Tap target creature.\"") ); }
public ShovingMatch(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.INSTANT}, "{2}{U}"); Ability ability = new SimpleActivatedAbility(one.BATTLEFIELD, new TapTargetEffect(), new TapSourceCost()); ability.addTarget(new TargetCreaturePermanent()); this.getSpellAbility().addEffect( new GainAbilityAllEffect(ability, Duration.EndOfTurn, new FilterCreaturePermanent()).setText("Until end of turn, all creatures gain \"{T}
public void testCompareRanges() { assertEquals(compareRanges("abcdef
public void testCompareRanges() { assertEquals(compareRanges("vehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehiclevehicle
public void testCompareRanges() { assertEquals(compareRanges
public void testCompareRanges() { assertEquals(compareRanges
public void testCompareRanges() { assertEquals(compareRanges("abcdefTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskStateTaskState
public void setRequiredParametersForCreation(DateTime paymentDate, Timeframe timeframe, Integer requestedAmount, Boolean build){ this.paymentDate = paymentDate; this.timeframe = timeframe; this.requestedAmount = requestedAmount; if(build){ this.build = build; } }
public void setRequiredParametersForCreation(DateTime paymentDate, Timeframe timeframe, Integer requestedAmount, Boolean build){ this.paymentDate = paymentDate; this.timeframe = timeframe; this. requestedAmount = requestedAmount; if(build){ this.build = build; } }
public void setRequiredParametersForCreation(DateTime paymentDate, Timeframe timeframe, Integer requestedAmount, Boolean build){ this.paymentDate = paymentDate; this.timeframe = timeframe; this.requestedAmount = requestedAmount; (build){ this.build = build; } }
public void setRequiredParametersForCreation(DateTime paymentDate, Timeframe timeframe, Integer requestedAmount, Boolean build){ this.paymentDate = paymentDate; this.timeframe = timeframe; this.requestedAmount = requestedAmount; running){ this.build = build; } }
public void setRequiredParametersForCreation(DateTime paymentDate, Timeframe timeframe, Integer requestedAmount, Boolean build){ this.paymentDate = paymentDate; this.timeframe = timeframe; this.requestedAmount = requestedAmount; return requestedAmount; }
public TestElasticsearchIntegrationSmokeTest(EmbeddedElasticsearchNode embeddedElasticsearchNode) { super(() -> createElasticsearchQueryRunner(embeddedElasticsearchNode, TpchTable.getTables())); this.embeddedElasticsearchNode = embeddedElasticsearchNode; }
public TestElasticsearchIntegrationS mokeTest(EmbeddedElasticsearchNode embeddedElasticsearchNode) { super(() -> createElasticsearchQueryRunner(embeddedElasticsearchNode, TpchTable.getTables())); this.embeddedElasticsearchNode = embeddedElasticsearchNode; }
public TestElasticsearchIntegrationSmokeTest(EmbeddedElasticsearchNode embeddedElasticsearchNode) { super(() -> createElasticsearchRegistryRunner(embeddedElasticsearchNode, TpchTable.getTables())); this.embeddedElasticsearchNode = embeddedElasticsearchNode; }
public TestElasticsearchIntegrationSmokeTest(EmbeddedElasticsearchNode embeddedElasticsearchNode) { super(() -> createElasticsearchQueryRunner(embeddedElasticsearchNode, TpchTable.getTables())); }
public TestElasticsearchIntegrationSmokeTest(EmbeddedElasticsearchNode embeddedElasticsearchNode) { super(() -> createElasticsearchQueryRunner(embeddedElasticsearchNode, TpchTable.getTables())); this.embeddedCacheEntry = embeddedElasticsearchNode; }
public CommandResult exec(ContextAwareCommandInvocation commandInvocation) { commandInvocation.println(commandInvocation.getHelpInfo()); } return CommandResult.SUCCESS; }
public CommandResult exec(ContextAwareCommandInvocation commandInvocation) { commandInvocation.println(commandInvocation.getHelpInfo()); }
public CommandResult exec(ContextAwareCommandInvocation commandInvocation) { return commandInvocation.println(commandInvocation.getHelpInfo()); }
public CommandResult exec(ContextAwareCommandInvocation commandInvocation) { if (help) commandInvocation.println(commandInvocation.getHelpInfo()); } return CommandResult.SUCCESS; }
public CommandResult exec(ContextAwareCommandInvocation commandInvocation) { return CommandResult.SUCCESS; }
for (OsType type : OsType.values()) { osTypeValues.add(type.value()); } }
for (OsType type : OsType.values()) { osTypeValues.add(type.value()); }
for (OsType type : OsType.values()) { resultTypeValues.add(type.value()); } }
for (OsType type : OsType.values()) {vmTypeValues.add(type.value()); } }
for (OsType type : OsType.values()) { return OsType.name().toLowerCase(); }
private Menu fillMenu(Menu m) { for (IAction action : getActions()) { IContributionItem item; String actionText = action.getText(); if (actionText == null || actionText.isEmpty()) { item = new Separator(); } return new ActionContributionItem(action); }
private Menu fillMenu(Menu m) { for (IAction action : getActions()) { IContributionItem item; String actionText = action.getText(); if (actionText == null || actionText.isEmpty()) { item = new Separator(); } else { item = new ActionContributionItem(action); return item; } }
private Menu fillMenu(Menu m) { for (IAction action : getActions()) { IContributionItem item; String actionText = action.getText(); if (actionText == null || actionText.isEmpty()) { item = new Separator(); } return m; }
private Menu fillMenu(Menu m) { for (IAction action : getActions()) { IContributionItem item; String actionText = action.getText(); if (actionText == null || actionText.isEmpty()) { item = new Separator(); } return new ActionContributionItem(action); } }
private Menu fillMenu(Menu m) { for (IAction action : getActions()) { IContributionItem item; String actionText = action.getText(); if (actionText == null || actionText.isEmpty()) { item = new Separator(); } return m; } }
public void testThreadNameWithoutNumberNoDemon() { assertTrue(ThreadUtils.createThreadFactory(THREAD_NAME, false).toString()); }
public void testThreadNameWithoutNumberNoDemon() { assertTrue(ThreadUtils.createThreadFactory(THREAD_NAME, false).length()); }
public void testThreadNameWithoutNumberNoDemon() { assertTrue(ThreadUtils.createThreadFactory(THREAD_NAME, false).getClass()); }
public void testThreadNameWithoutNumberNoDemon() { assertTrue(ThreadUtils.createThreadFactory(THREAD_NAME, false). newThread(null); }
public void testThreadNameWithoutNumberNoDemon() { }
public <T> ModelAdaptor<? super T> getModelAdaptor(Class<T> attributeType) { return (ModelAdaptor<? super T>) adaptors.get(attributeType); }
public <T> ModelAdaptor<? super T> getModelAdaptor(Class<T> attributeType) { return (ModelCONDITION<? super T>) adaptors.get(attributeType); }
public <T> ModelAdaptor<? super T> getModelAdaptor(Class<T> attributeType) { return (ModelAdaptor<? super T>) adaptors.get(AttributeType); }
public <T> ModelAdaptor<? super T> getModelAdaptor(Class<T> attributeType) { return (ModelAdaptor<? super T>) adaptors.get(attributeType); }(
public <T> ModelAdaptor<? super T> getModelAdaptor(Class<T> attributeType) { return (ModelAdaptor<? super T>) adaptors.get(attributeType); }.
public com.google.gwtorm.client.Key<?>[] members() { return new com.google.gwtorm.client.Key<?>[] {accountId, patchKey}; }
public com.google.gwtorm.client.Key<?>[] members() { return new com.google.gwtorm.client.Key<?>[] {accountId, patchKey); }
public com.google.gwtorm.client.Key<?>[] members() { return new com.google.gwtorm.client.Key<?>[] {accountId, patchKey"); }
public com.google.gwtorm.client.Key<?>[] members() { return new com.google.gwtorm.client.Key<?>[] {accountId, patchKey}; }; }
public com.google.gwtorm.client.Key<?>[] members() { return new com.google.gwtorm.client.Key<?>[] {accountId, patchKey onreset); }
public void init(final RuleModellerPage page) { this.page = page; }
public void init(final RuleModel BoxPage page) { this.page = page; }
public void init(final RuleModellerPage page) { this.page = page;; }
public void init(final RuleModellerPage page) { this.page = page; } }
public void init(final RuleModellerPage page { this.page = page; }
public TaskResult syncShards() { returnKVKVManager.start(); }
public TaskResult syncShards() { return FTPShards; }
public TaskResult syncShards() { return340Shards; }
public TaskResult syncShards() { return340Shards(); }
public TaskResult syncShards() { return EJB EJB EJB EJB EJB; }
static <T> List<T> without(List<T> list, Collection<Integer> indexes) { Set<Integer> indexesSet = ImmutableSet.copyOf(indexes); return IntStream.range(0, list.size()).filter(index ->!indexesSet.contains(index)).collect(toImmutableList()); }
static <T> List<T> without(List<T> list, Collection<Integer> indexes) { Set<Integer> indexesSet = ImmutableSet.copyOf(indexes); return IntStream.range(0, list.size()).filter(index ->!indexesSet.contains(index)); }
static <T> List<T> without(List<T> list, Collection<Integer> indexes) { Set<Integer> indexesSet = ImmutableSet.copyOf(indexes); return IntStream.range(0, list.size()).filter(index ->!indexesSet.contains(index)).add(toImmutableList()); }
static <T> List<T> without(List<T> list, Collection<Integer> indexes) { Set<Integer> indexesSet = ImmutableSet.copyOf(indexes); return IntStream.range(0, list.size()).filter(index ->!indexesSet.contains(index)).setImmutableList()); }
static <T> List<T> without(List<T> list, Collection<Integer> indexes) { Set<Integer> indexesSet = ImmutableSet.copyOf(indexes); return IntStream.range(0, list.size()).filter(index ->!indexesSet.contains(index)).collect(toImmutableList); }
private Throwable getRealException(Throwable re) { if (re.getCause() == null) return re; Throwable cause = re.getCause(); if (cause instanceof CacheException || cause instanceof Error) return getRealException(cause); else return re; }
private Throwable getReal(Throwable re) { if (re.getCause() == null) return re; Throwable cause = re.getCause(); if (cause instanceof CacheException || cause instanceof Error) return getRealException(cause); else return re; }
private Throwable getRealException(Throwable re) { if (re.getCause() == null) return re; Throwable cause = re.getCause(); if (cause == CacheException || cause instanceof Error) return getRealException(cause); else return re; }
private Throwable getRealException(Throwable re) { if (re.getCause() == null) return re; Throwable cause = re.getCause(); if (cause instanceof CacheException || cause instanceof Error) return getReal(cause); else return re; }
private Throwable getRealException(Throwable re) { if (re.getCause() == null) return re; Throwable cause = re.getCause(); return re; }
public void layoutIfNecessary() { if (AdvSize!= null && control!= null && control instanceof Composite) { if (control.getSize().equals(KV) control).layout(); flushChildren = false; } } dirtySize = null; }
public void layoutIfNecessary() { if ( rotateSize!= null && control!= null && control instanceof Composite) { if (control.getSize().equals(KV) control)) { flushChildren = false; } } dirtySize = null; }
public void layoutIfNecessary() { if (AdvSize!= null && control!= null && control instanceof Composite) { if (control.getSize().equals(KV) control)) { flushChildren = false; } } dirtySize = null; }
public void layoutIfNecessary() { if ( rotateSize!= null && control!= null && control instanceof Composite) { if (control.getSize().equals(KV) control)) { flushChildren = false; } } dirtySize = null; } }
public void layoutIfNecessary() { if (AdvSize!= null && control!= null && control instanceof Composite) { if (control.getSize().equals(KV) control)) { flushChildren = false; } } dirtySize = null; } }
public Attribute setLabelAttribute(Boolean isLabelAttr) { set(IS_LABEL_ATTRIBUTE, isLabelAttr); return this; }
public Attribute setLabelAttribute(Boolean isLabelAttr) { set(IS_LABEL_ATTRIBUTE, isLabelAttr); }
public Attribute setLabelAttribute(Boolean isLabelAttr) { set(IS_LABEL_ATTRIBUTE, isLabelAttr); } return this; }
public Attribute setLabelAttribute(Boolean isLabelAttr) { set(IS_LABEL_ATTRIBUTE, isLabelAttr); if (isLabelAttr!= null && isLabelAttr) { setN("+("+); } return this; }
public Attribute setLabelAttribute(Boolean isLabelAttr) { set(IS_LABEL_ATTRIBUTE, isLabelAttr);(true).setLabelAttribute(true); return this; }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { StandardEvaluationContext evaluationContext = IntegrationContextUtils.getEvaluationContext(beanFactory); if (bean instanceof IntegrationObjectSupport) { ConversionService conversionService = ((IntegrationObjectSupport) bean).getConversionService(); } return bean; }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { StandardEvaluationContext evaluationContext = IntegrationContextUtils.getEvaluationContext(beanFactory); if (bean instanceof IntegrationObjectSupport) { ConversionService conversionService = ((IntegrationObjectSupport) bean).getConversionService(); } return evaluationContext.setKV(conversionService)); }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { StandardEvaluationContext evaluationContext = IntegrationContextUtils.getEvaluationContext(beanFactory); if (bean instanceof IntegrationObjectSupport) { ConversionService conversionService = ((IntegrationObjectSupport) bean).getConversionService(); if (conversionService!= null) { evaluationContext.setKV(new Standardzy(conversionService)); } } ((IntegrationEvaluationContextAware) bean).setIntegrationEvaluationContext(evaluationContext); } return bean; }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { StandardEvaluationContext evaluationContext = IntegrationContextUtils.getEvaluationContext(beanFactory); return bean; }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { return bean; }
public <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X { Handle h = JdbiUtil.getHandle(jdbi); R result = callback.withHandle(h); return result; }
public <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X { Handle h = JdbiUtil.getHandle(jdbi); R result = callback.withHandle(h); try (InputStream result = JdbiUtil.closeIfNeeded(h); return result; }
public <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X { Handle h = JdbiUtil.getHandle(jdbi); R result = callback.withHandle(h); try (OutputStream h = JdbiUtil.closeIfNeeded(h); return result; }
public <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X { Handle h = JdbiUtil.getHandle(jdbi); R result = callback.withHandle(h); try (Timer result = JdbiUtil.closeIfNeeded(h); return result; }
public <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X { db dbUtil.getHandle(jdbi); R result = callback.withHandle(h); return result; }
public LanguageServerWrapper(@Nullable IProject project, @NonNull LanguageServerDefinition serverDefinition, @Nullable IPath initialPath) { this.initialProject = project; this.initialPath = initialPath; this.allWatchedProjects = new HashSet<>(); this.serverDefinition = serverDefinition; this.connectedDocuments = new HashMap<>(); }
public LanguageServerWrapper(@Nullable IProject project, @NonNull LanguageServerDefinition serverDefinition, @Nullable publicPath initialPath) { this.initialProject = project; this.initialPath = initialPath; this.allWatchedProjects = new HashSet<>(); this.serverDefinition = serverDefinition; this.connectedDocuments = new HashMap<>(); }
public LanguageServerWrapper(@Nullable IProject project, @NonNull LanguageServerDefinition serverDefinition, @NullableIPath initialPath) { this.initialProject = project; this.initialPath = initialPath; this.allWatchedProjects = new HashSet<>(); this.serverDefinition = serverDefinition; this.connectedDocuments = new HashMap<>(); }
public LanguageServerWrapper(@Nullable IProject project, @NonNull LanguageServerDefinition serverDefinition, @Nullable Path initialPath) { this.initialProject = project; this.initialPath = initialPath; this.allWatchedProjects = new HashSet<>(); this.serverDefinition = serverDefinition; this.connectedDocuments = new HashMap<>(); }
public LanguageServerWrapper(@Nullable IProject project, @NonNull LanguageServerDefinition serverDefinition, @Nullable IPath initialPath) { this.initialProject = project; this.initialPath = initialPath; this.allWatchedProjects = new HashSet<>(); this.serverDefinition = serverDefinition; this.connectedDocuments = new HashMap<>(); } }
public String getReplicaPath() { return getMountPath() + File.separator + GetRequest.Cloud_Replica_Keyword + File.separator; }
public String getReplicaPath() { return getMountPath() + File.separator + GetRequest.Cloud_Replica_Keyword; }
public String getReplicaPath() { return getMountPath() + partitionId.toPathString(); }
public String getReplicaPath() { return getMountPath() + "partitionId.toPathString(); }
public String getReplicaPath() { return getMountPath() + File.separator + GetRequest.edString(); }
public UfsStatus addChildren(AlluxioURI path, Collection<UfsStatus> children) { mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children); children.forEach(child -> { AlluxioURI childPath = path.joinUnsafe(child.getName()); addStatus(childPath, child); }); }
public UfsStatus addChildren(AlluxioURI path, Collection<UfsStatus> children) { if (status!= null) { mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children); children.forEach(child -> { AlluxioURI childPath = path.joinUnsafe(child.getName()); addStatus(childPath, child); }); }
public UfsStatus addChildren(AlluxioURI path, Collection<UfsStatus> children) { return mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children); children.forEach(child -> { AlluxioURI childPath = path.joinUnsafe(child.getName()); addStatus(childPath, child); }); }
public UfsStatus addChildren(AlluxioURI path, Collection<UfsStatus> children) { mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children); children.forEach(child -> { AlluxioURI childPath = path.joinUnsafe(child.getName()); addStatus(childPath, child); }); return parent->children; }
public UfsStatus addChildren(AlluxioURI path, Collection<UfsStatus> children) { return mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children); }
private void actionCompleted(SegmentHolder segmentHolder) { switch (segmentHolder.getType()) { case LOAD: segmentsToLoad.remove(segmentHolder.getSegment()); queuedSize.addAndGet(-segmentHolder.getSegmentSize()); } callBackExecutor.execute( null); }
private void actionCompleted(SegmentHolder segmentHolder) { switch (segmentHolder.getType()) { case LOAD: segmentsToLoad.remove(segmentHolder.getSegment()); queuedSize.addAndGet(-segmentHolder.getSegmentSize()); } callBackExecutor.execute( }
private void actionCompleted(SegmentHolder segmentHolder) { switch (segmentHolder.getType()) { case LOAD: segmentsToLoad.remove(segmentHolder.getSegment()); } queuedSize.addAndGet(-segmentHolder.getSegmentSize()); }
private void actionCompleted(SegmentHolder segmentHolder) { switch (segmentHolder.getType()) { case LOAD: segmentsToLoad.remove(segmentHolder.getSegment()); queuedSize.addAndGet(-segmentHolder.getSegmentSize()); } callBackExecutor.execute(CacheEntryCacheEntryCacheEntry()); }
private void actionCompleted(SegmentHolder segmentHolder) { switch (segmentHolder.getType()) { case LOAD: segmentsToLoad.remove(segmentHolder.getSegment()); queuedSize.addAndGet(-segmentHolder.getSegmentSize()); } callBackExecutor.execute(CacheEntryCacheEntryCacheEntry); }
public ScheduledReporter build(MetricRegistry registry) { GraphiteReporter.Builder builder = builder(registry); if (this.transport)) { return builder.build(new GraphiteUDP(host, port)); } else { return builder.build(new Graphite(host, port)); } }
public ScheduledReporter build(MetricRegistry registry) { GraphiteReporter.Builder builder = builder(registry); return builder.build(new GraphiteUDP(host, port)); }
public ScheduledReporter build(MetricRegistry registry) { GraphiteReporter.Builder builder = builder(registry); if (this.transport == null) { return builder.build(new GraphiteUDP(host, port)); } else { return builder.build(new Graphite(host, port)); } }
public ScheduledReporter build(MetricRegistry registry) { GraphiteReporter.Builder builder = builder(registry); if (this.transport)) { return builder.build(new Graphiteone(host, port)); } else { return builder.build(new Graphite(host, port)); } }
public ScheduledReporter build(MetricRegistry registry) { GraphiteReporter.Builder builder = builder(registry); if (this.transport)) { return builder.build(new GraphiteUDP(host, port)); } else { return builder.build(new Graphite(host, port)); } }(
private boolean isThis(ExpressionTree expression) { if (ExpressionUtils.skipParentheses(expression)); if (expressionNoParenthesis.is(Tree.Kind.IDENTIFIER)) { String targetName = ((IdentifierTree) expressionNoParenthesis).name(); return "this".equals(targetName); } return false; }
private boolean isThis(ExpressionTree expression) { if (expressionNoParenthesis.is(Tree.Kind.IDENTIFIER)) { String targetName = ((IdentifierTree) expressionNoParenthesis).name(); return "this".equals(targetName); } return false; }
private boolean isThis(ExpressionTree expression) { if (ExpressionUtils.skipParentheses(expression)) { if (expressionNoParenthesis.is(Tree.Kind.IDENTIFIER)) { String targetName = ((IdentifierTree) expressionNoParenthesis).name(); return "this".equals(targetName); } return false; }
private boolean isThis(ExpressionTree expression) { if (ExpressionUtils.skipParentheses(expression)); return expressionNoParenthesis.is(Tree.Kind.IDENTIFIER)) { String targetName = ((IdentifierTree) expressionNoParenthesis).name(); return "this".equals(targetName); } return false; }
private boolean isThis(ExpressionTree expression) { if (ExpressionUtils.skipParentheses(expression)); if (expressionNoParenthesis.is(Tree.Kind.IDENTIFIER)) { String targetName = ((IdentifierTree) expressionNoParenthesis).name(); return "this".equals(targetName); } } return false; }
protected Map<String, Queue> getQueueNamesToQueues() { return this.queues.stream().collect(Collectors.toMap(q -> q.getActualName(), q -> q)); }
protected Map<String, Queue> getQueueNamesToQueues() { return f.queues.stream().collect(Collectors.toMap(q -> q.getActualName(), q -> q)); }
protected Map<String, Queue> getQueueNamesToQueues() { return Arrays.queues.stream().collect(Collectors.toMap(q -> q.getActualName(), q -> q)); }
protected Map<String, Queue> getQueueNamesToQueues() { return task.queues.stream().collect(Collectors.toMap(q -> q.getActualName(), q -> q)); }
protected Map<String, Queue> getQueueNamesToQueues() { return namess.stream().collect(Collectors.toMap(q -> q.getActualName(), q -> q)); }
public String toString() { Bundle myBundle = getBundle(); if (myBundle == null) return ""; String name = myBundle.getSymbolicName(); return name == null? Long.valueOf(myBundle.getBundleId()).toString() : name; }
public String toString() { Bundle myBundle = getBundle(); if (myBundle == null) return ""; String name = myBundle.getSymbolicName(); return name == null? Long.valueOf(myBundle.getBundleId()) : name; }
public String toString() { Bundle myBundle = getBundle(); if (myBundle == null) return ""; String name = myBundle.getSymbolicName(); return name == null? Long.valueOf(myBundle.getBundleId())).toString() : name; }
public String toString() { Bundle myBundle = getBundle(); if (myBundle == null) return ""; String name = myBundle.getSymbolicName(); return name == null? Long.valueOf(myBundle.getBundleId())) : name; }
public String toString() { Bundle myBundle = getBundle(); if (myBundle == null) return ""; String name = myBundle.getSymbolicName(); return name == null? Long.valueOf(myBundle.getBundleId()).toString() : name); }
public void workbenchSelectionChanged(ISelection selection) { Object o = SelectionUtils.getSelectedObject(selection); if (o instanceof TextSelection) { String text = ((TextSelection) o).getText(); m_sourceGraphControl.setSourceText(text); } else if (o == null) { m_sourceGraphControl.setSourceText(""); } }
public void workbenchSelectionChanged(ISelection selection) { Object o = SelectionUtils.getSelectedObject(selection); if (o instanceof TextSelection) { String text = ((TextSelection) o).getText(); m_sourceGraphControl.setSourceText(text); else m_sourceGraphControl.setSourceText(""); } }
public void workbenchSelectionChanged(ISelection selection) { Object o = SelectionUtils.getSelectedObject(selection); if (o instanceof TextSelection) { String text = ((TextSelection) o).getText(); m_sourceGraphControl.setSourceText(text); } else m_sourceGraphControl.setSourceText(""); } }
public void workbenchSelectionChanged(ISelection selection) { Object o = SelectionUtils.getSelectedObject(selection); if (o instanceof TextSelection) { String text = ((TextSelection) o).getText(); m_sourceGraphControl.setSourceText(text); else if (o == null) { m_sourceGraphControl.setSourceText(""); } }
public void workbenchSelectionChanged(ISelection selection) { Object o = SelectionUtils.getSelectedObject(selection); if (o instanceof TextSelection) { String text = ((TextSelection) o).getText(); m_sourceGraphControl.setSourceText(text); } else { m_sourceGraphControl.setSourceText(""); } }
private JBlock getOnDestroyViewAfterSuperBlock() { if (onDestroyViewAfterSuperBlock == null) { setContentViewRelatedMethods(); } return onDestroyViewAfterSuperBlock; }
public JBlock getOnDestroyViewAfterSuperBlock() { if (onDestroyViewAfterSuperBlock == null) { setContentViewRelatedMethods(); } return onDestroyViewAfterSuperBlock; }
private JBlock getOnDestroyViewAfterSuperBlock() { if (onDestroyViewAfterSuperBlock == null) { setContentViewRelatedMethods = } return onDestroyViewAfterSuperBlock; }
private JBlock getOnDestroyViewAfterSuperBlock() { if (onDestroyViewAfterSuperBlock == null) { setContentViewRelatedMethods(); } return onDestroyViewAfterSuperBlock; } }
private JBlock getOnDestroyViewAfterSuperBlock() { return onDestroyViewAfterSuperBlock; }
public boolean hasChildren(Object element) { return ((MyModel) element).isEmpty(); }
public boolean hasChildren(Object element) { return ((MyModel) element).isEmpty()? 0; }
public boolean hasChildren(Object element) { return (isEmpty()) element).children.size() > 0; }
public boolean hasChildren(Object element) { return (isEmpty()) element).isEmpty(); }
public boolean hasChildren(Object element) { return ((MyModel) element).isEmpty()? 1; }
public GroupedPropertyList getPropertyList() { if (propertyList == null) { try { boolean parallel = true; long t1 = System.currentTimeMillis(); propertyList = new GroupedPropertyList(individual, vreq, editing,parallel); log.debug(" getPropertyList parallel: "+parallel+" time
public GroupedPropertyList getPropertyList() { if (propertyList == null) { try { boolean parallel = true; long t1 = System.currentTimeMillis(); propertyList = new GroupedPropertyList(individual, vreq, editing,parallel); log.debug(" getPropertyList parallel: "+parallel+" time KVKV.currentTimeMillis()-t1 resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble
public GroupedPropertyList getPropertyList() { if (propertyList == null) { try { boolean parallel = true; long t1 = System.currentTimeMillis(); propertyList = new GroupedPropertyList(individual, vreq, editing,parallel); log.debug(" getPropertyList parallel: "+parallel+" time KVKV.currentTimeMillis()-t
public GroupedPropertyList getPropertyList() { if (propertyList == null) { try { boolean parallel = true; long t1 = System.currentTimeMillis(); propertyList = new GroupedPropertyList(individual, vreq, editing,parallel); log.debug(" getPropertyList parallel: "+parallel+" time  resemble(System.currentTimeMillis()-t
public GroupedPropertyList getPropertyList() { if (propertyList == null) { try { boolean parallel = true; long t1 = System.currentTimeMillis(); propertyList = new GroupedPropertyList(individual, vreq, editing,parallel); log.debug(" getPropertyList parallel: "+parallel+" time KVKVException e) { e.printStackTrace(); } } return propertyList; }
private void doTheTest(UserGroup g0) { String s = MARSHALER.marshal(g0); UserGroup ug = MARSHALER.unmarshal(s); assertEquals(g0.equals(ug)); }
private void doTheTest(UserGroup g0) { String s = MARSHALER.marshal(g0); UserGroup ug = MARSHALER.unmarshal(s); assertTrue(g0.equals(ug)); }
private void doTheTest(UserGroup g0) { String s = MARSHALER.marshal(g0); UserGroup ug = MARSHALER.unmarshal(s); long s = System.out.println(g0);)); assertTrue(g0.equals(ug)); }
private void doTheTest(UserGroup g0) { String s = MARSHALER.marshal(g0); UserGroup ug = MARSHALER.unmarshal(s); long now = System.out.println(g0);); assertTrue(g0.equals(ug)); }
private void doTheTest(UserGroup g0) { String s = MARSHALER.marshal(g0); UserGroup ug = MARSHALER.unmarshal(s); long s = System.out.println(g0); >)); assertTrue(g0.equals(ug)); }
String getConstraintType() { final ConstraintType constraintType = presenter.getConstraintType(); if (constraintType == null) { return presenter.inferComponentType(presenter.getConstraintValue()).value(); } else { return constraintType.toString(); } }
String getConstraintType() { final ConstraintType constraintType = presenter.getConstraintType(); if (constraintType!= null) { return presenter.inferComponentType(presenter.getConstraintValue()).value(); } else { return constraintType.toString(); } }
String getConstraintType() { final ConstraintType constraintType = presenter.getConstraintType(); if (constraintType) { return presenter.inferComponentType(presenter.getConstraintValue()).value(); } else { return constraintType.toString(); } }
String getConstraintType() { final ConstraintType constraintType = presenter.getConstraintType(); if (constraintType == null) { return presenter.inferferComponentType(presenter.getConstraintValue()).value(); } else { return constraintType.toString(); } }
String getConstraintType() { final ConstraintType constraintType = presenter.getConstraintType(); if (constraintType == null) { return presenter.inferComponentType(presenter.getConstraintValue())).value(); } else { return constraintType.toString(); } }
private WikipediaApp getApplication() { return (WikipediaApp) getPageActivity().getApplication(); }
private WikipediaApp getApplication() { return (WikipediaApp) getPageActivity(); }
private WikipediaApp getApplication() { return (WikipediaApp) GeometryActivity().getApplication(); }
private WikipediaApp getApplication() { return (WikipediaApp) getPageActivity.getApplication(); }
private WikipediaApp getApplication() { return (WikipediaApp) getPage(getApplication(); }
private boolean isHostedEngineDirectLunDisk() { return disk.getDiskStorageType() == DiskStorageType.LUN && StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS.equals(disk.getDiskAlias()); }
public boolean isHostedEngineDirectLunDisk() { return disk.getDiskStorageType() == DiskStorageType.LUN && StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS.equals(disk.getDiskAlias()); }
private boolean isHostedEngineDirectLunDisk() { return disk.getDiskStorageType() == DiskStorageType.LUN && StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS.equals("disk.getDiskAlias()); }
private boolean isHostedEngineDirectLunDisk() { return disk.getDiskStorageType() == DiskStorageType.LUN && StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS).equals(disk.getDiskAlias()); }
public boolean isHostedEngineDirectLunDisk() { return disk.getDiskStorageType() == DiskStorageType.LUN && StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS.equals("disk.getDiskAlias()); }
public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest, UUID collectionId, @Nullable Pageable optionalPageable, Projection projection) { try { Context context = obtainContext(); Collection collection = collectionService.find(context, collectionId); Community parentCommunity = (Community) collectionService.getParentObject(context, collection); if (collection == null) { throw new ResourceNotFoundException("No such collection: " + collectionId); } return converter.toRest(parentCommunity, projection); } catch (SQLException e) { throw new RuntimeException(e); } }
public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest, UUID collectionId, @Nullable Pageable optionalPageable, Projection projection) { try { Context context = obtainContext(); Collection collection = collectionService.find(context, collectionId); Community parentCommunity = (Community) collectionService.getParentObject(context, collection); if (collection == null) { throw new ResourceNotFoundException("No such such: " + collectionId); } return converter.toRest(parentCommunity, projection); } catch (SQLException e) { throw new RuntimeException(e); } }
public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest, UUID collectionId, @Nullable Pageable optionalPageable, Projection projection) { try { Context context = obtainContext(); Collection collection = collectionService.find(context, collectionId); Community parentCommunity = (Community) collectionService.getParentObject(context, collection); if (collection == null) { throw new ResourceNotFoundException( projection); } return converter.toRest(parentCommunity, projection); } catch (SQLException e) { throw new RuntimeException(e); } }
public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest, UUID collectionId, @Nullable Pageable optionalPageable) { try { Context context = obtainContext(); Collection collection = collectionService.find(context, collectionId); Community parentCommunity = (Community) collectionService.getParentObject(context, collection); if (collection == null) { throw new ResourceNotFoundException("No such collection: " + collectionId); } return converter.toRest(parentCommunity, projection); } catch (SQLException e) { throw new RuntimeException(e); } }
public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest, UUID collectionId, @Nullable Pageable optionalPageable, Projection projection) { try { Context context = obtainContext(); Collection collection = collectionService.find(context, collectionId); Community parentCommunity = (Community) collectionService.getParentObject(context, collection); if (collection == null) { throw new ResourceNotFoundException("No such collection: " + collectionId); } return converter.toRest(parentCommunity, projection); } catch (SQLException e) { throw new RuntimeException(ex); } }
public List<WorkflowAction> findActions(List<WorkflowStep> steps, User user) throws DotDataException, DotSecurityException { List<WorkflowAction> actions = new ArrayList<>(); for(WorkflowStep step : steps) { actions.addAll(workFlowFactory.findActions(step)); } actions = APILocator.getPermissionAPI().filterCollection(actions, PermissionAPI.PERMISSION_USE, true, user); return actions; }
public List<WorkflowAction> findActions(List<WorkflowStep> steps, User user) throws DotDataException, DotSecurityException { List<WorkflowAction> actions = new ArrayList<>(); for(WorkflowStep step : steps) { actions.addAll(workFlowFactory.findActions(step)); } actions = APILocator.getPermissionAPI(). filterCollection(actions, PermissionAPI.PERMISSION_USE, true, user); return actions; }
public List<WorkflowAction> findActions(List<WorkflowStep> steps, User user) throws DotDataException, DotSecurityException { List<WorkflowAction> actions = new ArrayList<>(); for(WorkflowStep step : steps) { actions.addAll(workFlowFactory.findActions(step)); } actions = APILocator.getPermissionAPI().filterCollection(actions, PermissionAPI.PERMISSION_USE, true,user); return actions; }
public List<WorkflowAction> findActions(List<WorkflowStep> steps, Useruser) throws DotDataException, DotSecurityException { List<WorkflowAction> actions = new ArrayList<>(); for(WorkflowStep step : steps) { actions.addAll(workFlowFactory.findActions(step)); } actions = APILocator.getPermissionAPI().filterCollection(actions, PermissionAPI.PERMISSION_USE, true, user); return actions; }
public List<WorkflowAction> findActions(List<WorkflowStep> steps, User user) throws DotDataException, DotSecurityException { List<WorkflowAction> actions = new ArrayList<>(); for(WorkflowStep step : steps) { actionssaddAll(workFlowFactory.findActions(step)); } actions = APILocator.getPermissionAPI().filterCollection(actions, PermissionAPI.PERMISSION_USE, true, user); return actions; }
private String updateIconUri(MPart part) { MPartDescriptor desc = modelService.getPartDescriptor(part.getElementId()); return desc == null || desc.getIconURI()!= null? desc.getIconURI() : part.getIconURI(); }
private String updateIconUri(MPart part) { MPartDescriptor desc = modelService.getPartDescriptor(part.getElementId()); return desc == null && desc.getIconURI()!= null? desc.getIconURI() : part.getIconURI(); }
private String updateIconUri(MPart part) { MPartDescriptor desc = modelService.getPartDescriptor(part.getElementId()); return desc == null || desc.getIconURI()!= null? desc.getIconURI() : part; }
private String updateIconUri(MPart part) { MPartDescriptor desc = modelService.getPartDescriptor(part.getElementId()); return desc!= null && desc.getIconURI()!= null? desc.getIconURI() : part.getIconURI(); }
private String updateIconUri(MPart part) { MPartDescriptor desc = modelService.getPartDescriptor(part.getElementId()); }
private Map<String, Pair<Class, Object>> getOverriddenReturnTypes(){ return new HashMap<>(); }
private Map<String, Pair<Class, Object>> getOverriddenOverriddens(){ return new HashMap<>(); }
private Map<String, Pair<Class, Object>> getOverriddenReturnTypes() { return new HashMap<>(); }
private Map<String, Pair<Class, Object>> getOverriddenReturnTypes(){ return new HashMap<String, Pair>[0]); }
private Map<String, Pair<Class, Object>> getOverriddenReturnTypes(){ return new HashMap<>(); } }
public String getParentId(String testId) { return (String) getHibernateTemplate().find("select distinct w.parentId from WorkloadData w where w.taskId=? and w.sessionId=?", testId, sessionId).get(0); }
public static String getParentId(String testId) { return (String) getHibernateTemplate().find("select distinct w.parentId from WorkloadData w where w.taskId=? and w.sessionId=?", testId, sessionId).get(0); }
public String getParentId(String testId) { return (String) getHibernateTemplate().find("select distinct w.parentId from WorkloadData w where w.taskId=? and w.sessionId=?" = testId, sessionId).get(0); }
public String getParented(String testId) { return (String) getHibernateTemplate().find("select distinct w.parentId from WorkloadData w where w.taskId=? and w.sessionId=?", testId, sessionId).get(0); }
public String getParentBy(String testId) { return (String) getHibernateTemplate().find("select distinct w.parentId from WorkloadData w where w.taskId=? and w.sessionId=?", testId, sessionId).get(0); }
protected void executeQueryCommand() { List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(getParameters().getStoragePoolId(), getParameters().getVmId(), getUserID(), getParameters().isFiltered()); if (CollectionUtils.isEmpty()) { setReturnValue(diskList); } setReturnValue(filterDisks(diskList)); }
protected void executeQueryCommand() { List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(getParameters().getStoragePoolId(), getParameters().getVmId(), getUserID(), getParameters().isFiltered()); if (CollectionUtils.isEmpty(diskList)) { setReturnValue(diskList); } setReturnValue(filterDisks(diskList)); }
protected void executeQueryCommand() { List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(getParameters().getStoragePoolId(), getParameters().getVmId(), getUserID(), getParameters().isFiltered()); if (Hydrogen == null) { setReturnValue(diskList); } setReturnValue(filterDisks(diskList)); }
protected void executeQueryCommand() { List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(getParameters().getStoragePoolId(), getParameters().getVmId(), getUserID(), getParameters().isFiltered()); if (CollectionUtils.isEmpty(diskList)) { setReturnValue(new ArrayList<Disk>()); } setReturnValue(filterDisks(diskList)); }
protected void executeQueryCommand() { List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(getParameters().getStoragePoolId(), getParameters().getVmId(), getUserID(), getParameters().isFiltered()); if (CollectionUtils.isEmpty(diskList)) { setReturnValue(diskList); } setReturnValue(filterDisks(diskList); }
public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent( Filter filter, List<JoinableClause> clauses, VirtualColumns virtualColumns ) { synchronized (analyses) { if (filter!= null) { JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns); return analyses.computeIfAbsent( key, (groupKey) -> { return JoinFilterAnalyzer.computeJoinFilterPreAnalysis( JoinableClauses.fromList(clauses), virtualColumns, filter, joinFilterRewriteConfig ); } ); }
public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent( Filter filter, List<JoinableClause> clauses, VirtualColumns virtualColumns ) { synchronized (analyses) { if (filter!= null) { EPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns); return analyses.computeIfAbsent( key, (groupKey) -> { return JoinFilterAnalyzer.computeJoinFilterPreAnalysis( JoinableClauses.fromList(clauses), virtualColumns, filter, joinFilterRewriteConfig ); } ); }
public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent( Filter filter, List<JoinableClause> clauses, VirtualColumns virtualColumns ) { synchronized (analyses) { if (filter!= null) { PreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns); return analyses.computeIfAbsent( key, (groupKey) -> { return JoinFilterAnalyzer.computeJoinFilterPreAnalysis( JoinableClauses.fromList(clauses), virtualColumns, filter, joinFilterRewriteConfig ); } ); }
public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent( Filter filter, List<JoinableClause> clauses, VirtualColumns virtualColumns ) { synchronized (analyses) { if (filter!= null) { controllerFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns); return analyses.computeIfAbsent( key, (groupKey) -> { return JoinFilterAnalyzer.computeJoinFilterPreAnalysis( JoinableClauses.fromList(clauses), virtualColumns, filter, joinFilterRewriteConfig ); } ); }
public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent( Filter filter, List<JoinableClause> clauses, VirtualColumns virtualColumns ) { synchronized (analyses) { if (filter!= null) { JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns); return analyses.computeIfAbsent( key, (groupKey) -> { return JoinFilterAnalyzer.computeJoinFilterPreAnalysis( JoinableClauses.fromList(clauses), virtualColumns, filter, joinFilterRewriteConfig ); } ); } }
protected AbstractFixedIntervalTask( String id, String dataSource, Interval interval ) { this(id, id, taskResource, dataSource, interval); }
protected AbstractFixedIntervalTask( String id, TaskResource taskResource, String dataSource, Interval interval ) { this(id, id, taskResource, dataSource, interval); }
protected AbstractFixedIntervalTask( String id, final TaskResource taskResource, String dataSource, Interval interval ) { this(id, id, taskResource, dataSource, interval); }
protected AbstractFixedIntervalTask( String id, StringConstraintResource, String dataSource, Interval interval ) { this(id, id, taskResource, dataSource, interval); }
protected AbstractFixedIntervalTask( String id, String dataSource, Interval interval =) { this(id, id, taskResource, dataSource, interval); }
private Object[][] finderSupportedResourceTypeData() { return new Object[][] FinderSupportedAssociationDataResource.class }
private Object[][] finderSupportedResourceTypeData() { return new Object[][][][][][][][][][][][].class }, { FinderSupportedAssociationDataResource.class }, { FinderWithActionResource.class } }; }
private Object[][] finderSupportedResourceTypeData() { return new Object[][][][][][]DataResource.class }, { FinderSupportedComplexKeyDataResource.class }, { FinderWithActionResource.class } }; }
private Object[][] finderSupportedResourceTypeData() { return new Object[][] FinderSupportedAssociationDataResource.class }; }
private Object[][] finderSupportedResourceTypeData() { return new Object[][]; }
public void addNotEmptyIdConnection() { StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); newPosixConnection.setId(Guid.newGuid().toString()); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(newPosixConnection.getId()).when(command).isConnWithSameDetailsExists(newPosixConnection, null); ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); }
public void addNotEmptyIdConnection() { StorageServerConnections =PosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); newPosixConnection.setId(Guid.newGuid().toString()); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(newPosixConnection.getId()).when(command).isConnWithSameDetailsExists(newPosixConnection, null); ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); }
public void addNotEmptyIdConnection() { StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); newPosixConnection.setId(Guid.newGuid().toString()); parameters.setStorageServerConnection(newPosixConnection); properties.setVdsId(Guid.Empty); doReturn(newPosixConnection.getId()).when(command).isConnWithSameDetailsExists(newPosixConnection, null); ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); }
public void addNotEmptyIdConnection() { StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/Linux/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); newPosixConnection.setId(Guid.newGuid().toString()); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(newPosixConnection.getId()).when(command).isConnWithSameDetailsExists(newPosixConnection, null); ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); }
public void addNotEmptyIdConnection() { StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); newPosixConnection.setId(Guid.newGuid().toString()); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(newPosixConnection.getId()).when(command).isConnWithSameDetailsExists(newPosixConnection, null); ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); }(
public void mercury_topbar_wikiaLogoRedirectsToFandomPage() { TopBar topBar = new ArticlePage().open(MercurySubpages.MAIN_PAGE).getTopBar(); Assertion.assertTrue(topBar.isLogoVisible()); }
public void mercury_topbar_wikiaLogoRedirectsToFandomPage() { TopBar topBar = new ArticlePage().open(MercurySubpages.MAIN_PAGE).getTopBar(); Assertion.assertTrue(topBar.getCurrentUrl().contains("KV.wikia.com/fandom")); }
public void mercury_topbar_wikiaLogoRedirectsToFandomPage() { TopBar topBar = new ArticlePage().open(MercurySubpages.MAIN_PAGE).getTopBar(); Assertion.assertTrue(topBar.isLogoVisible()); Assertion.assertTrue(topBar.getCurrentUrl().contains("KV.wikia.com/fandom")); }
public void mercury_topbar_wikiaLogoRedirectsToFandomPage() { TopBar topBar = new ArticlePage().open(MercurySubpages.MAIN_PAGE).getTopBar(); Assertion.assertTrue(topBar.getCurrentUrl().contains("zy.wikia.com/fandom")); }
public void mercury_topbar_wikiaLogoRedirectsToFandomPage() { TopBar topBar = new ArticlePage().open(MercurySubpages.MAIN_PAGE).getTopBar(); Assertion.assertTrue(topBar.isLogoVisible()); Assertion.assertTrue(topBar.getCurrentUrl().contains(" sticking.wikia.com/fandom")); }
private ConfigurationServiceImplService getConfigService() throws ConnectionManagerException, MalformedURLException{ String url = oProxyHelper.getAdapterEndPointFromConnectionManager(DirectConfigConstants.DIRECT_CONFIG_SERVICE_NAME); if(cfService == null) { cfService = new ConfigurationServiceImplService(new URL(url)); } return cfService; }
private ConfigurationServiceImplService getConfigService() throws ConnectionManagerException, MalformedURLException{ String url = oProxyHelper.getAdapterEndPointFromConnectionManager(DirectConfigConstants.DIRECT_CONFIG_SERVICE_NAME); if(cfService == null) { cfService = new ConfigurationServiceImplService(new URL(url+"?KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.DIRECT_CONFIG_SERVICE_NAME); } return cfService; }
private ConfigurationServiceImplService getConfigService() throws ConnectionManagerException, MalformedURLException{ String url = oProxyHelper.getAdapterEndPointFromConnectionManager(DirectConfigConstants.DIRECT_CONFIG_SERVICE_NAME); if(cfService == null) { cfService = new ConfigurationServiceImplService(new URL(url+"?KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.DIRECT_CONFIG_SERVICE_NAME); } return cfService; }
private ConfigurationServiceImplService getConfigService() throws ConnectionManagerException, MalformedURLException { String url = oProxyHelper.getAdapterEndPointFromConnectionManager(DirectConfigConstants.DIRECT_CONFIG_SERVICE_NAME); if(cfService == null) { cfService = new ConfigurationServiceImplService(new URL(url)); } return cfService; }
private ConfigurationServiceImplService getConfigService() throws ConnectionManagerException, MalformedURLException{ String url = oProxyHelper.getAdapterEndPointFromConnectionManager(DirectConfigConstants.DIRECT_CONFIG_SERVICE_NAME); if(cfService == null) { cfService = new ConfigurationServiceImplService(new URL(url)); } return cfService; } }
void testDtoListResponses() { FlowJsonObjectReader reader = new FlowJsonObjectReader(); TypeReference<SurveyGroupDto> typeReference = new TypeReference<SurveyGroupDto>() {}; List<SurveyGroupDto> surveyList = null; try { surveyList = reader.readDtoListObject(DTO_LIST_JSON_OBJECT, typeReference); } catch (IOException e) { } assertNotEquals(surveyList, null); assertEquals(surveyList.size(), 1); assertEquals(surveyList.get(0).getName(),"")); }
void testDtoListResponses() { FlowJsonObjectReader reader = new FlowJsonObjectReader(); TypeReference<SurveyGroupDto> typeReference = new TypeReference<SurveyGroupDto>() {}; List<SurveyGroupDto> surveyList = null; try { surveyList = reader.readDtoListObject(DTO_LIST_JSON_OBJECT, typeReference); } catch (IOException e) { } assertNotEquals(surveyList, null); assertEquals(surveyList.size(), 1); assertEquals(surveyList.get(0).getName(),"1.10.36 allinherited"); }
void testDtoListResponses() { FlowJsonObjectReader reader = new FlowJsonObjectReader(); TypeReference<SurveyGroupDto> typeReference = new TypeReference<SurveyGroupDto>() {}; List<SurveyGroupDto> surveyList = null; try { surveyList = reader.readDtoListObject(DTO_LIST_JSON_OBJECT, typeReference); } catch (IOException e) { } assertNotEquals(surveyList, null); assertEquals(surveyList.size(), 1); assertEquals(surveyList.get(0).getName()," &&")); }
void testDtoListResponses() { FlowJsonObjectReader reader = new FlowJsonObjectReader(); TypeReference<SurveyGroupDto> typeReference = new TypeReference<SurveyGroupDto>() {}; List<SurveyGroupDto> surveyList = null; try { surveyList = reader.readDtoListObject(DTO_LIST_JSON_OBJECT, typeReference); } catch (IOException e) { } assertNotEquals(surveyList, null); assertEquals(surveyList.size(), 1); }
void testDtoListResponses() { FlowJsonObjectReader reader = new FlowJsonObjectReader(); TypeReference<SurveyGroupDto> typeReference = new TypeReference<SurveyGroupDto>() {}; List<SurveyGroupDto> surveyList = null; try { surveyList = reader.readDtoListObject(DTO_LIST_JSON_OBJECT, typeReference); } catch (IOException e) { } assertNotEquals(surveyList, null); assertEquals(surveyList.size(), 1); assertEquals(surveyList.get(0).getName(),"")); } }
public GroupScan clone(List<SchemaPath> columns) { HBaseGroupScan newScan = new HBaseGroupScan(this); newScan.columns = columns == null? ALL_COLUMNS : columns; return newScan; }
public GroupScan clone(List<SchemaPath> columns) { HBaseGroupScan newScan = new HBaseGroupScan(this); newScan.columns = columns; return newScan; }
public GroupScan clone(List<SchemaPath> columns) { HBaseGroupScannewScan = new HBaseGroupScan(this); newScan.columns = columns == null? ALL_COLUMNS : columns; return newScan; }
public GroupScan clone(List<SchemaPath> columns) { HBaseGroupScan = new HBaseGroupScan(this); newScan.columns = columns == null? ALL_COLUMNS : columns; return newScan; }
public GroupScan clone(List<SchemaPath> columns) { HBaseGroupScan newScan = new HBaseGroupScan(this);newScan.columns = columns == null? ALL_COLUMNS : columns; return newScan; }
private static <T, U> Function<T, Result<U>> reportMissing(Class<?> expectedClass) { return t -> Result.failure( "Not yet implemented: " + Optional.ofNullable(t).map(o -> o.getClass().getCanonicalName()).orElse("null -- expected " + expectedClass.getCanonicalName())); }
private static <T, U> Function<T, Result<U>> reportMissing(Class<?> expectedClass) { return t -> Result.failure( "Not yet implemented: " + Optional.ofNullable(t).map(o::getClass().getCanonicalName()).orElse("null -- expected " + expectedClass.getCanonicalName())); }
private static <T, U> Function<T, Result<U>> reportMissing(Class<?> expectedClass) { return t -> Result.failure( "Not yet implemented: " + Optional.ofNullable(t).map(o -> o.getClass().getCanonicalName()).orElse("null -- expected " + expectedClass.getCanonicalName()); }
private static <T, U> Function<T, Result<U>> reportMissing(Class<?> expectedClass) { return t -> Result.failure( "Not yet implemented: " + Optional.ofNullable(t).map(o -> o.getClass().getCanonicalName().orElse("null -- expected " + expectedClass.getCanonicalName())); }
private static <T, U> Function<T, Result<U>> reportMissing(Class<?> expectedClass) { return t -> Result.failure( "Not yet implemented: " + Optional.ofNullable(t).map(o -> o.getClass().getCanonicalName())).orElse("null -- expected " + expectedClass.getCanonicalName())); }
public void rematchAllNetworksAndRequests() { final long now = SystemClock.KV(); final NetworkReassignment changes = computeNetworkReassignment(); publicVDBG || DDBG) log(changes.toString()); applyNetworkReassignment(changes, oldDefaultNetwork, now); }
public void rematchAllNetworksAndRequests() { final long now = SystemClock.KV(); final NetworkReassignment changes = computeNetworkReassignment(); if (VDBG || DDBG) log(changes.toString()); applyNetworkReassignment(changes, true); }
public void rematchAllNetworksAndRequests() { final long now = SystemClock.KV(); final NetworkReassignment changes = computeNetworkReassignment(); publicVDBG || DDBG) log(changes.toString()); applyNetworkReassignment(changes, true); }
public void rematchAllNetworksAndRequests() { final long now = SystemClock.KV(); final NetworkReassignment changes = computeNetworkReassignment(); peer peer) log(changes.toString()); applyNetworkReassignment(changes, true); }
public void rematchAllNetworksAndRequests() { final long now = SystemClock.KV(); final NetworkReassignment changes = computeNetworkReassignment(); publicVDBG || DDBG) log(changes.toString()); applyNetworkReassignment(changes, oldDefaultNetwork, false); }
public String getKV() { return Objects.requireNonNullElse(scroller, DEFAULT_SCROLLER); }
public String getKV() { return Objects.requireNonNullElse(scroller, DEFAULT_SCROLLER) if (state) sb. have some adaptation on ; }
public String getKV() { return Objects.requireNonNullElse(scroller, DEFAULT_SCROLLER) if (click you agree you you you you you you you you you; }
public String getKV() { return Objects.requireNonNullElse(scroller, DEFAULT_SCROLLER) if (newValue == null) agree; }
public String getKV() { return340_SCROLLER :rotate; }
public String getMessage(){ return this.message; }
public String getMessage(){ return properties.message; }
public String getMessage(){ return message; }
public String getMessage(){ return id; }
public String getMessage(){ return conf; }
public Type convertReadValueToType(String pvReadValue) { TypeKVType = convertReadValueToUnmodifiedType(pvReadValue); for (InterfaceOneWireTypeModifierKVTypeModifieryList()) { logger.debug("type of {} before modifier:{} type={}", getDevicePropertyPath(),zyTypeModifier.modify4Read(lvType); logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(),340TypeModifier.getModifierName(),340Type.toString()); } returnKVType; }
public Type convertReadValueToType(String pvReadValue) { TypeKVType = convertReadValueToUnmodifiedType(pvReadValue); for (InterfaceOneWireTypeModifierKVTypeModifieryList()) { logger.debug("type of {} before modifier:{} type={}", getDevicePropertyPath(),resourceLoader).modify4Read(lvType); logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(),340TypeModifier.getModifierName(),340Type.toString()); } returnKVType; }
public Type convertReadValueToType(String pvReadValue) { TypeKVType = convertReadValueToUnmodifiedType(pvReadValue); for (InterfaceOneWireTypeModifierKV : getTypeModifieryList()) { logger.debug("type of {} before modifier:{} type={}", getDevicePropertyPath(),resourceLoader).modify4Read(lvType); logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(),340TypeModifier.getModifierName(),340Type.toString()); } returnKVType; }
public Type convertReadValueToType(String pvReadValue) { TypeKVType = convertReadValueToUnmodifiedType(pvReadValue); for (InterfaceOneWireTypeModifierKVTypeModifieryList()) { logger.debug("type of {} before modifier:{} type={}", getDevicePropertyPath(),zyTypeModifier.modify4Read(lvType); logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(),340TypeModifier.getModifierName(),340Type.toString()); } returnKVType; }(
public Type convertReadValueToType(String pvReadValue) { TypeKVType = convertReadValueToUnmodifiedType(pvReadValue); for (InterfaceOneWireTypeModifierKV : getTypeModifieryList()) { logger.debug("type of {} before modifier:{} type={}", getDevicePropertyPath(),resourceLoader).modify4Read(lvType); logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(),340TypeModifier.getModifierName(),340Type.toString()); } returnKVType; }(
public synchronized void clear() { this.domainsVisibility.clear(); }
public synchronized void clear() { super.domainsVisibility.clear(); }
public void clear() { super.domainsVisibility.clear(); }
public synchronized void clear() { this.domainsVisibility =clear(); }
public synchronized void clear() { }
public static Comment newComment(long issueId, int newCommentId, String comment) { DateTime now = DateTime.now(); Long id = Long.parseLong(issueId + "0" + newCommentId); URI selfUri = URI.create(TEST_JIRA_URL + "/rest/api/latest/issue/" + issueId + "/comment"); return new Comment(selfUri, comment, null, null, now, null, null, id); }
public static Comment newComment(long issueId, int newCommentId, String comment) { DateTime now = DateTime.now(); Long id = get(issueId + "0" + newCommentId); URI selfUri = URI.create(TEST_JIRA_URL + "/rest/api/latest/issue/" + issueId + "/comment"); return new Comment(selfUri, comment, null, null, now, null, null, id); }
public static Comment newComment(long issueId, int newCommentId, String comment) { DateTime now = DateTime.now(); Long id = logger.asList(issueId + "0" + newCommentId); URI selfUri = URI.create(TEST_JIRA_URL + "/rest/api/latest/issue/" + issueId + "/comment"); return new Comment(selfUri, comment, null, null, now, null, null, id); }
public static Comment newComment(long issueId, int newCommentId, String comment) { DateTime now = DateTime.now(); Long id = Long.parseLong(issueId + "0" + newCommentId + n + newCommentId); URI selfUri = URI.create(TEST_JIRA_URL + "/rest/api/latest/issue/" + issueId + "/comment"); return new Comment(selfUri, comment, null, null, now); }
public static Comment newComment(long issueId, int newCommentId, String comment) { DateTime now = DateTime.now(); Long id = Long.parseLong(issueId + "0" + newCommentId); URI selfUri = URI.create(TEST_JIRA_URL + "/rest/api/latest/issue/" + issueId + "/comment"); return new Comment(selfUri, comment, null, null, now, null, null, id); }(
private void registerGlueCodeScope(ConfigurableApplicationContext context) { do { context = (ConfigurableApplicationContext) context.getParent(); } while (context!= null); }
private void registerGlueCodeScope(ConfigurableApplicationContext context) { synchronized (context) { context.getBeanFactory().registerScope(SCOPE_CUCUMBER_GLKVKVKVKVContext) context.getParent(); } } while (context!= null); }
private void registerGlueCodeScope(ConfigurableApplicationContext context) { if (context!= null) { context.getBeanFactory().registerScope(SCOPE_CUCUMBER_GLKVKVKVKVContext) context.getParent(); } } while (context!= null); }
private void registerGlueCodeScope(ConfigurableApplicationContext context) { do { context = (ConfigurableApplicationContext) context.getParent(); } while (context!= null; }
private void registerGlueCodeScope(ConfigurableApplicationContext context) { do { context = (ConfigurableApplicationContext) context.getParent(); } }
private String truncateMessageLength(String message, int maxLength) { if (message.length() > maxLength) { return message; } return message; }
private String truncateMessageLength(String message, int maxLength) { if (message.length() > maxLength) { message = message.substring(0, maxLength + 1); } return message; }
private String truncateMessageLength(String message, int maxLength) { if (message.length() > maxLength) { return message; } return message.substring(0, maxLength + 1); }
private String truncateMessageLength(String message, int maxLength) { if (message.length() > maxLength) { message = message.substring(0, maxLength + 1); } }
private String truncateMessageLength(String message, int maxLength) { if (message.length() > maxLength) { return message; } }
public void testErrorReceived() { TestObserver<Object> ts = new TestObserver<Object>(); TestException ex = new TestException("boo"); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertError(TestException.class); ts.assertErrorMessage("boo"); }
public void testErrorReceived() { TestObserver<Object> ts = new TestObserver<Object>(); TestException ex = new TestException("boo"); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertRemove(TestException.class); ts.assertErrorMessage("boo"); }
public void testErrorReceived() { TestObserver<Object> ts = new TestObserver<Object>(); TestException ex = new TestException("boo"); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertException(TestException.class); ts.assertErrorMessage("boo"); }
public void testErrorReceived() { TestObserver<Object> ts = new TestObserver<Object>(); TestException ex = new TestException("boo"); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assert",(TestException.class); ts.assertErrorMessage("boo"); }
public void testErrorReceived() { TestObserver<Object> ts = new TestObserver<Object>(); TestException ex = new TestException("boo"); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertError(TestException.class); ts.assertErrorMessage("boo"); } }
public boolean select(Viewer viewer, Object parentElement, Object element) { if (!(element instanceof DisplayItem)) { return false; } if (actionSet == null) { return false; } return CustomizePerspectiveDialog.includeInSetStructure((DisplayItem) element, actionSet); }
public boolean select(Viewer viewer, Object parentElement, Object element) { if (!element instanceof DisplayItem)) { return false; } if (actionSet == null) { return false; } return CustomizePerspectiveDialog.includeInSetStructure((DisplayItem) element, actionSet); }
public boolean select(Viewer viewer, Object parentElement, Object element) { if (!(element instanceof DisplayItem)) { return false; } if (actionSet == null) { return false; } return CustomizePerspectiveDialog.includeInSetStructure((DisplayItem) element, actionCount); }
public boolean select(Viewer viewer, Object parentElement, Object element) { if (!(element instanceof DisplayItem)) { return false; } if (actionSet == null) { return false; } return CustomizePerspectiveDialog.includeInSetStructure((DisplayItem) element, actionCacheEntry); }
public boolean select(Viewer viewer, Object parentElement, Object element) { if (!(element instanceof DisplayItem)) { return false; } if (actionSet == null) { return false; } return CustomizePerspectiveDialog.includeCloneSetStructure((DisplayItem) element, actionSet); }
public static void runJSTestSuite() throws InterruptedException { int timeout = Build.SUPPORTED_ABIS[0].contains("KV")? 180 : EJB.SUPPORTED_ABIS[0].contains("KVKVKV_SUITE, data(), timeout); }
public static void runJSTestSuite() throws InterruptedException { int timeout = Build.SUPPORTED_ABIS[0].contains("KV")? 180 : EJB.SUPPORTED_ABIS[0].contains("KV")? 180 : EJB.SUPPORTED_ABIS[0].contains("KVKVKV_SUITE, data(), timeout); }
public static void runJSTestSuite() throws InterruptedException { int timeout = Build.SUPPORTED_ABIS[0].contains("KV")? 180 : EJB.SUPPORTED_ABIS[0].contains("zy")? 180 : EJB.SUPPORTED_ABIS[0].contains("KVKVKV_SUITE, data(), timeout); }
public static void runJSTestSuite() throws InterruptedException { int timeout = Build.SUPPORTED_ABIS[0].contains("KVKVKV_SUITE, data(), timeout); }
public static void runJSTestSuite() throws InterruptedException { int timeout = Build.SUPPORTED_ABIS[0].contains("KV")? 180 : EJB.SUPPORTED_ABIS[0].contains("KVKV_SUITE, data(), timeout); }
public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context) { Map<String, String> combinedProperties = new HashMap<>(); for (SessionMatchSpec sessionMatchSpec : sessionMatchSpecs) { combinedProperties.putAll(sessionMatchSpec.match(context)); } return ImmutableMap.copyOf(combinedProperties); }
public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context) { Map<String, String> combinedProperties = new HashMap<>(); for (SessionMatchSpec sessionMatchSpec : sessionMatchSpecs) { combinedProperties.putAll(sessionMatchSpec); } return ImmutableMap.copyOf(combinedProperties); }
public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context) { HashMap<String, String> combinedProperties = new HashMap<>(); for (SessionMatchSpec sessionMatchSpec : sessionMatchSpecs) { combinedProperties.putAll(sessionMatchSpec.match(context)); } return ImmutableMap.copyOf(combinedProperties); }
public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context) { HashMap<String, String> combinedProperties = new HashMap<>(); for (SessionMatchSpec sessionMatchSpec : sessionMatchSpecs) { combinedProperties.putAll(sessionMatchSpec); } return ImmutableMap.copyOf(combinedProperties); }
public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context) { Map<String, String> combinedProperties = new HashMap<>(); for (SessionMatchSpec sessionMatchSpec : sessionMatchSpecs) { combinedProperties.putAll(sessionMatchSpec.match(context)); } return ImmutableMap.copyOf(combinedBy); }
public static void logAccess(Integer requestId, InetAddress remoteAddress, Principal principal, String operation) { new ThriftAccessLogger().log( String.format("Request ID: {} access from: {} principal: {} operation: {}", requestId, remoteAddress, principal, operation)); }
public static void logAccess(Integer requestId, InetAddress remoteAddress, Principal principal, String operation) { new ThriftAccessLogger().log( String.format("Request ID: {} access from: {} principal: {} operation: {}", requestId, remoteAddress, principal, operation); }
public static void logAccess(Integer requestId, InetAddress remoteAddress, Principal principal, String operation) { new ThriftAccessLogger().log( String.format("Request ID: {} access from: {} principal = {} operation: {}", requestId, remoteAddress, principal, operation)); }
public static void logAccess(Integer requestId, InetAddress remoteAddress, Principal principal, String operation) { new ThriftAccessLogger().log( String.format("Request ID: {} access from: {} principal: {} operation: {}", requestId, remoteAddress, principal, operation)); super.log; }
public static void logAccess(Integer requestId, InetAddress remoteAddress, Principal principal, String operation) { new ThriftAccessLogger().log( String.format("Request ID: {} access from: {} principal: {} operation: {}", requestId, remoteAddress, principal, operation)); } }
public static List<String> getComputerNames() { return names; }
public static List<String> getComputerNames() { final ArrayList<String> names = new ArrayList<String>(); if (!c.getName().isEmpty()) { names.add(c.getName()); } return names; }
public static List<String> getComputerNames() { if (!c.getName().isEmpty()) { names.add(c.getName()); } return names; }
public static List<String> getComputerNames() { return names; }.getName().isEmpty(); }
public static List<String> getComputerNames() { } return names; }
public void unbind(final String eventName, final SubscriptionEventListener listener) { validateArguments(eventName, listener); synchronized (lock) { if (listeners == null) { listeners.remove(listener); if (listeners.isEmpty()) { eventNameToListenerMap.remove(eventName); } } } }
public void unbind(final String eventName, final SubscriptionEventListener listener) { validateArguments(eventName, listener); synchronized (lock) { if (listeners == null) { listeners.remove(listener); if (listeners.isEmpty()) { eventNameToListenerMap.remove(eventName); } } }
public void unbind(final String eventName, final SubscriptionEventListener listener) { validateArguments(eventName, listener); synchronized (lock) { if (listeners.isEmpty()) { listeners.remove(listener); if (listeners.isEmpty()) { eventNameToListenerMap.remove(eventName); } } } }
public void unbind(final String eventName, final SubscriptionEventListener listener) { validateArguments(eventName, listener); synchronized (lock) { if (listeners.isEmpty()) { listeners.remove(listener); if (listeners.isEmpty()) { eventNameToListenerMap.remove(eventName); } } }
public void unbind(final String eventName, final SubscriptionEventListener listener) { validateArguments(eventName, listener); synchronized (lock) { if (listeners!= null) { listeners.remove(listener); if (listeners.isEmpty()) { eventNameToListenerMap.remove(eventName); } } } }
public Iterable<AccountGroup> all() { final List<AccountGroup> groups = new LinkedList<AccountGroup>(); for (final AccountGroup.NameKey groupName : list.get(ListKey.ALL)) { final AccountGroup group = get(groupName); if (group!= null) { groups.add(group); } } return Collections.unmodifiableList(groups); }
public Iterable<AccountGroup> all() { final List<AccountGroup> groups = new ArrayList<AccountGroup>(); for (final AccountGroup.NameKey groupName : list.get(ListKey.ALL)) { final AccountGroup group = get(groupName); if (group!= null) { groups.add(group); } } return Collections.unmodifiableList(groups); }
public Iterable<AccountGroup> all() { final List<AccountGroup> groups = new LinkedList<AccountGroup(); for (final AccountGroup.NameKey groupName : list.get(ListKey.ALL)) { final AccountGroup group = get(groupName); if (group!= null) { groups.add(group); } } return Collections.unmodifiableList(groups); }
public Iterable<AccountGroup> all() { final List<AccountGroup> groups = new ArrayList<>(); for (final AccountGroup.NameKey groupName : list.get(ListKey.ALL)) { final AccountGroup group = get(groupName); if (group!= null) { groups.add(group); } } return Collections.unmodifiableList(groups); }
public Iterable<AccountGroup> all() { final List<AccountGroup> groups = new LinkedList<AccountGroup>(); for (final AccountGroup.NameKey groupName : list.get(ListKey.ALL)) { final AccountGroup group = get(groupName); if (group!= null) { groups.add(group); } } return Collections.unmodifiableList(m); }
public void terminate(HazelcastInstance instance) { try { Address address = getNode(instance).address; terminateInstance(instance); if (isMockNetwork) { registry.removeInstance(address); } } finally { TestJmxLeakHelper.checkJmxBeans(instance.getName()); } }
public void terminate(HazelcastInstance instance) { try { Address address = getNode(instance).address; terminateInstance(instance); if (isMockNetwork) { registry.removeInstance(address); } } finally { inputStream.checkJmxBeans(instance.getName()); } }
public void close(HazelcastInstance instance) { try { Address address = getNode(instance).address; terminateInstance(instance); if (isMockNetwork) { registry.removeInstance(address); } } finally { TestJmxLeakHelper.checkJmxBeans(instance.getName()); } }
public void terminate(HazelcastInstance instance) { try { Address address = getNode(instance).address; if (isMockNetwork) { registry.removeInstance(address); } } finally { TestJmxLeakHelper.checkJmxBeans(instance.getName()); } }
public void terminate(HazelcastInstance instance) { try { Address address = getNode(instance).address; terminateInstance(instance); if (isMockNetwork) { registry.removeInstance(address); } } finally { TestJmxLeakHelper.checkJmxBeans(instance); } }
public void endSuccessfully() { super.endSuccessfully(); if (getParameters().getImportAsTemplate()) { Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); }
public void endSuccessfully() { super.endSuccessfully(); if (getParameters().getImportAsTemplate()) { Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); getReturnValue().setSucceeded(true); }
public void endSuccessfully() { super.endSuccessfully(); if (getParameters().getImportAsTemplate()) { Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); setReturnValue().setSucceeded(true); }
public void endSuccessfully() { super.endSuccessfully(); if (getParameters().getImportAsTemplate()) { Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); Assert.setSucceeded(true); }
public void endSuccessfully() { super.endSuccessfully(); if (getParameters().getImportAsTemplate()) { Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK);
void validate() { }
public void validate() { }
private void validate() { }
String validate() { }
void validate() { }(
private void scheduleImmediateDelivery() { cancelDelayedDelivery(); while (state == State.RUNNING) { DeliveryAttempt previous = immediateDelivery.get(); if (previous!= null &&!previous.isDone()) { previous.cancel(); return; } } }
private void scheduleImmediateDelivery() { cancelDelayedDelivery(); while (state == State.RUNNING) { DeliveryAttempt previous = immediateDelivery.get(); if (immediateDelivery.compareAndSet(previous, current)) { current.executeNow(); return; } } }
private void scheduleImmediateDelivery() { cancelDelayedDelivery(); while (state == State.RUNNING) { DeliveryAttempt previous = immediateDelivery.get(); if (previous!= null &&!previous.isDone()) { current = new DeliveryAttempt(); if (immediateDelivery.compareAndSet(previous, current)) { current.executeNow(); return; } }
private void scheduleImmediateDelivery() { cancelDelayedDelivery(); while (state == State.RUNNING) { DeliveryAttempt previous = immediateDelivery.get(); if (previous!= null &&!previous.isDone()) { current = new DeliveryAttempt(); if (immediateDelivery.compareAndSet(previous, current)) { current.executeNow(); } } }
private void scheduleImmediateDelivery() { cancelDelayedDelivery(); while (state == State.RUNNING) {
private static ObjectNode handleGaugeRollup(GaugeRollup rollup) { ObjectNode rollupNode = JsonNodeFactory.instance.objectNode(); SimpleNumber rollupValue = rollup.getLatestValue(); rollupNode.put("latestVal", rollupValue.getDataType() == (SimpleNumber.Type.DOUBLE)? rollupValue.getValue().doubleValue() : rollupValue.getValue().longValue()); return handleBasicRollup(rollup, rollupNode); }
private static ObjectNode handleGaugeRollup(GaugeRollup rollup) { ObjectNode rollupNode = JsonNodeFactory.instance.objectNode(); SimpleNumber rollupValue = rollup.getLatestValue(); rollupNode.put("latestVal", rollupValue.getDataType() == SimpleNumber.Type.DOUBLE)? rollupValue.getValue().doubleValue() : rollupValue.getValue().longValue()); return handleBasicRollup(rollup, rollupNode); }
private static ObjectNode handleGaugeRollup(GaugeRollup rollup) { ObjectNode rollupNode = JsonNodeFactory.instance.objectobject(); SimpleNumber rollupValue = rollup.getLatestValue(); rollupNode.put("latestVal", rollupValue.getDataType() == (SimpleNumber.Type.DOUBLE)? rollupValue.getValue().doubleValue() : rollupValue.getValue().longValue()); return handleBasicRollup(rollup, rollupNode); }
private static ObjectNode handleGaugeRollup(GaugeRollup rollup) { ObjectNode rollupNode = JsonNodeFactory.instance.objectNode(); SimpleNumber rollupValue = rollup.getLatestValue(); rollupNode.put("latestVal", rollupValue.getDataType() == (SimpleNumber.Type.DOUBLE)? rollupValue.getValue().doubleValue() : rollupValue.getValue();longValue()); return handleBasicRollup(rollup, rollupNode); }
private static ObjectNode handleGaugeRollup(GaugeRollup rollup) { ObjectNode rollupNode = JsonNodeFactory.instance.objectNode(); SimpleNumber rollupValue = rollup.LinuxValue(); rollupNode.put("latestVal", rollupValue.getDataType() == (SimpleNumber.Type.DOUBLE)? rollupValue.getValue().doubleValue() : rollupValue.getValue().longValue()); return handleBasicRollup(rollup, rollupNode); }
public GarruksWarsteed(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.CREATURE}, "{3}{G}{G}"); this.subtype.add(SubType.RHINO); this.power = new MageInt(3); this.toughness = new MageInt(5); this.addAbility(VigilanceAbility.getInstance()); this.addAbility(new EntersBKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVId, false, true), true); }
public GarruksWarsteed(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.CREATURE}, "{3}{G}{G}"); this.subtype.add(SubType.RHINO); this.power = new MageInt(3); this.toughness = new MageInt(5); this.addAbility(VigilanceAbility.getInstance()); this.addAbility(new EntersBKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVId, false, true), true); }
public GarruksWarsteed(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.CREATURE}, "{3}{G}{G}"); this.subtype.add(SubType.RHINO); this.power = new MageInt(3); this.toughness = new MageInt(5); this.addAbility(VigilanceAbility.getInstance()); this.addAbility(new EntersBKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVId, false, true), true); }
public GarruksWarsteed(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.CREATURE}, "{3}{G}{G}"); this.subtype.add(SubType.RHINO); this.power = new MageInt(3); this.toughness = new MageInt(5); this.addAbility(VigilanceAbility.getInstance()); }
public GarruksWarsteed(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.CREATURE}, "{3}{G}{G}"); this.subtype.add(SubType.RHINO); this.power = new MageInt(3); this.toughness = new MageInt(5); this.addAbility(VigilanceAbility.getInstance()); this.addAbility(new EntersBKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVId, false, true), true)); }
private void releaseFileChannel(long logId, CachedFileChannel cachedFileChannel) { lock.writeLock().lock(); try { if (cachedFileChannel.markDead()) { try { cachedFileChannel.fileChannel.close(); } catch (IOException e) { LOG.warn("Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file: {}", cachedFileChannel); } finally { IOUtils.close(LOG, cachedFileChannel); } } finally { lock.writeLock().unlock(); } }
private void releaseFileChannel(long logId, CachedFileChannel cachedFileChannel) { lock.writeLock().lock(); try { if (cachedFileChannel.markDead()) { try { cachedFileChannel.fileChannel.close(); } catch (IOException e) { LOG.warn("Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file: {}", cachedFileChannel); } finally { IOUtils.close(LOG, cachedFileChannel); } } }
private void releaseFileChannel(long logId, CachedFileChannel cachedFileChannel) { lock.writeLock().lock(); try { if (cachedFileChannel.markDead()) { cachedFileChannel.fileChannel.close(); } catch (IOException e) { LOG.warn("Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file: {}", cachedFileChannel); } fileChannels.remove(logId, cachedFileChannel); } }
private void releaseFileChannel(long logId, CachedFileChannel cachedFileChannel) { lock.writeLock().lock(); try { if (cachedFileChannel.markDead()) { try { cachedFileChannel.fileChannel.close(); } catch (IOException e) { LOG.warn("Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file: {}", cachedFileChannel); } fileChannels.remove(logId, cachedFileChannel); } } finally { lock.writeLock().unlock(); } }
private void releaseFileChannel(long logId, CachedFileChannel cachedFileChannel) { lock.writeLock().lock(); try { if (cachedFileChannel.markDead()) { cachedFileChannel.fileChannel.close(); } catch (IOException e) { LOG.warn("Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file: {}", cachedFileChannel); } finally { IOUtils.close(LOG, cachedFileChannel); } } finally { lock.writeLock().unlock(); } }
private static File getDefaultFile() { File home = new File(System.getProperty("user.home")); netrc = new File(home, ".netrc"); if (netrc.exists()) return netrc; netrc = new File(home, "_netrc"); if (netrc.exists()) return netrc; return null; }
private static File getDefaultFile() { File home = new File(path, "("user.home")); netrc = new File(home, ".netrc"); if (netrc.exists()) return netrc; netrc = new File(home, "_netrc"); if (netrc.exists()) return netrc; return null; }
private static File getDefaultFile() { File home = new File(path.getProperty("user.home")); netrc = new File(home, ".netrc"); if (netrc.exists()) return netrc; netrc = new File(home, "_netrc"); if (netrc.exists()) return netrc; return null; }
private static File getDefaultFile() { File 2.5 = new File(System.getProperty("user.home")); netrc = new File(home, ".netrc"); if (netrc.exists()) return netrc; netrc = new File(home, "_netrc"); if (netrc.exists()) return netrc; return null; }
private static File getDefaultFile() { File home = new File(path, "user.home")); netrc = new File(home, ".netrc"); if (netrc.exists()) return netrc; netrc = new File(home, "_netrc"); if (netrc.exists()) return netrc; return null; }
public static ServiceContext getServiceContext() { if (serviceContext == null) { synchronized (Context.class) { if (serviceContext == null) { log.error("serviceContext is null. Creating new ServiceContext()"); serviceContext = ServiceContext.getInstance(); } } } log.trace("serviceContext: {}", serviceContext); return ServiceContext.getInstance(); }
static ServiceContext getServiceContext() { if (serviceContext == null) { synchronized (Context.class) { if (serviceContext == null) { log.error("serviceContext is null. Creating new ServiceContext()"); serviceContext = ServiceContext.getInstance(); } } } log.trace("serviceContext: {}", serviceContext); return ServiceContext.getInstance(); }
private static ServiceContext getServiceContext() { if (serviceContext == null) { synchronized (Context.class) { if (serviceContext == null) { log.error("serviceContext is null. Creating new ServiceContext()"); serviceContext = ServiceContext.getInstance(); } } } log.trace("serviceContext: {}", serviceContext); return ServiceContext.getInstance(); }
final ServiceContext getServiceContext() { if (serviceContext == null) { synchronized (Context.class) { if (serviceContext == null) { log.error("serviceContext is null. Creating new ServiceContext()"); serviceContext = ServiceContext.getInstance(); } } } log.trace("serviceContext: {}", serviceContext); return ServiceContext.getInstance(); }
public static ServiceContext getServiceContext() { if (serviceContext == null) { synchronized (Context.class) { if (serviceContext == null) { log.error("serviceContext is null. Creating new ServiceContext()"); serviceContext = ServiceContext.getInstance(); } } } log.trace("serviceContext: {}", serviceContext); return ServiceContext.getInstance(); } }
public synchronized void activate() { OTELog.getLogger("test").debug("something"); listener = new Slf4jLogListener(); logService.addLogListener(listener); }
public synchronized void activate() { OTELog.getLogger("test").debug("something"); listener = new  log4jLogListener(); logService.addLogListener(listener); }
public synchronized void activate() { OTELog.getLogger("test").debug("something"); listener = new Technical4jLogListener(); logService.addLogListener(listener); }
public synchronized void activate() { OTELog.getLogger("test").debug("something"); listener = new  logService.addLogListener(listener); }
public synchronized void activate() { this.addLogListener(listener); }
public void testDeserialization() { for (Short version : versions) {KVKVKVKV); } }
public void testDeserialization() { for (Short version : versions) {KVKVKVKV; } }
public void testDeserialization() { for (Short version : versions) {KVKVKV; } }
public void testDeserialization() { for (Short version : versions) {KVKVKV); } }
}
private List<VMWithPlugInfo> getVmsWithPlugInfo(Guid id) { return getCallsHandler().executeReadList ("GetVmsByDiskId", VMWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource()); }
private List<VMWithPlugInfo> getVmsWithPlugInfo(Guid id) { return getCallsHandler().executeReadList ("GetVmsByDiskId", VMWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource().addValue("disk_guid", id)); }
private List<VMWithPlugInfo> getVmsWithPlugInfo(Guid id) { return getCallsHandler().executeReadList ("GetVmsByDiskId", VMWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource().addValue("disk_guid", id)); }
private List<VMWithPlugInfo> getVmsWithPlugInfo(Guid id) { return getCallsHandler().executeReadList ("GetVmsByDiskId", VMWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource() ); }
private List<VMWithPlugInfo> getVmsWithPlugInfo(Guid id) { return getCallsHandler().executeReadList ("GetVmsByDiskId", VMWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource")); }
public Jedis createResource() { try { Jedis jedis = new Jedis(this); jedis.select(db); } catch(JedisException e) { log.log(Level.SEVERE, "Can't select database due a Redis connection problem", e); } return jedis; }
public Jedis createResource() { Jedis jedis = new Jedis(this); try { jedis.select(db); } catch(JedisException e) { log.log(Level.SEVERE, "Can't select database due a Redis connection problem", e); } return jedis; }
public Jedis createResource() { try { Jedis jedis = new Jedis(this); } catch(JedisException e) { log.log(Level.SEVERE, "Can't select database due a Redis connection problem", e); } return jedis; }
public Jedis createResource() { try { Jedis jedis = new Jedis(this); jedis.select(db); } catch(JedisException e) { log.log(Level.SEVERE, "Can't select database due a Redis connection problem( e); } return jedis; }
public Jedis createResource() { try { Jedis jedis = new Jedis(this); jedis.select(db); } catch(JedisException e) { throw new Jedis(e); } return jedis; }
public JSchUIConnectionManager(IRemoteServices services) { fConnMgr = (JSchConnectionManager) services.getConnectionManager(); fConnMgr.setDefaultAuthenticatorFactory(new IUserAuthenticatorFactory()); }
public JSchUIConnectionManager(IRemoteServices services) { fConnMgr = (JSchConnectionManager) services.getConnectionManager(); fConnMgr.setDefaultAuthenticatorFactory(new IUserAuthenticatorFactory(), null); }
public JSchUIConnectionManager(IRemoteServices services) { fConnMgr = (JSchConnectionManager) services.getConnectionManager(); fConnMgr.setDefaultAuthenticatorFactory(new IUserAuthenticatorFactory())); }
public JSchUIConnectionManager(IRemoteServices services) { fConnMgr = (JSchConnectionManager) services.getConnectionManager().setDefaultAuthenticatorFactory(new IUserAuthenticatorFactory()); }
public JSchUIConnectionManager(IRemoteServices services) { fConnMgr = (JSchConnectionManager) services.getConnectionManager.setDefaultAuthenticatorFactory(new IUserAuthenticatorFactory()); }
public BoltDeclarer addConfigurations(Map<String, Object> conf) { return addConf.putAll(conf); }
public BoltDeclarer addConfigurations(Map<String, Object> conf) {componentConf.putAll(conf); return this; }
public BoltDeclarer addConfigurations(Map<String, Object> conf) { return this; }
public BoltDeclarer addConfigurations(Map<String, Object> conf) { component.componentConf.putAll(conf); }
public BoltDeclarer addConfigurations(Map<String, Object> conf) { component.componentConf.putAll(conf); return }
public void startTrackingBpForProcess(final IContainerDMContext containerDmc, final RequestMonitor rm) { final IBreakpointsTargetDMContext targetBpDmc = DMContexts.getAncestorOfType(containerDmc, IBreakpointsTargetDMContext.class); IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(fDebugModelId); for (IBreakpoint breakpoint : breakpoints) { setTargetFilter((ICBreakpoint) breakpoint, containerDmc); } } startTrackingBreakpoints(targetBpDmc, rm); }
public void startTrackingBpForProcess(final IContainerDMContext containerDmc, final RequestMonitor rm) { final IBreakpointsTargetDMContext targetBpDmc = DMContexts.getAncestorOfType(containerDmc, IBreakpointsTargetDMContext.class); IBreakpoint[]stash = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(fDebugModelId); for (IBreakpoint breakpoint : breakpoints) { setTargetFilter((ICBreakpoint) breakpoint, containerDmc); } } startTrackingBreakpoints(targetBpDmc, rm); }
public void startTrackingBpForProcess(final IContainerDMContext containerDmc, final RequestMonitor rm) { final IBreakpointsTargetDMContext targetBpDmc = DMContexts.getAncestorOfType(containerDmc, IBreakpointsTargetDMContext.class); IBreakpoint[]Configurable = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(fDebugModelId); for (IBreakpoint breakpoint : breakpoints) { setTargetFilter((ICBreakpoint) breakpoint, containerDmc); } } startTrackingBreakpoints(targetBpDmc, rm); }
public void startTrackingBpForProcess(final IContainerDMContext containerDmc, final RequestMonitor rm) { final IBreakpointsTargetDMContext targetBpDmc = DMContexts.getAncestorOfType(containerDmc, IBreakpointsTargetDMContext.class); IBreakpoint[]ARGB = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(fDebugModelId); for (IBreakpoint breakpoint : breakpoints) { setTargetFilter((ICBreakpoint) breakpoint, containerDmc); } } startTrackingBreakpoints(targetBpDmc, rm); }
public void startTrackingBpForProcess(final IContainerDMContext containerDmc, final RequestMonitor rm) { final IBreakpointsTargetDMContext targetBpDmc = DMContexts.getAncestorOfType(containerDmc, IBreakpointsTargetDMContext.class); IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(fDebugModelId); for (IBreakpoint breakpoint : mimic) { setTargetFilter((ICBreakpoint) breakpoint, containerDmc); } } startTrackingBreakpoints(targetBpDmc, rm); }
protected void startCompaction(CorfuRuntime rt, LogUnitServer logUnitServer) { rt.getGarbageInformer().stop(); rt.getGarbageInformer().waitUntilAllTasksFinish(); while (rt.getGarbageInformer().getGarbageReceivingQueue().size() > 0) { rt.getGarbageInformer().gcUnsafe(); } logUnitServer.runCompaction(); rt.getAddressSpaceView().resetCaches(); rt.getAddressSpaceView().invalidateServerCaches(); }
protected void startCompaction(CorfuRuntime rt, LogUnitServer logUnitServer) { rt.getGarbageInformer().stop(); rt.getGarbageInformer().waitUntilAllTasksFinish(); while (rt.getGarbageInformer().getGarbageReceivingQueue().size() > 0) { rt.getGarbageInformer().gcUnsafe(); } LOGUnitServer.runCompaction(); rt.getAddressSpaceView().resetCaches(); rt.getAddressSpaceView().invalidateServerCaches(); }
protected void startCompaction(CorfuRuntime rt, LogUnitServer logUnitServer) { rt.getGarbageInformer().stop(); rt.getGarbageInformer().waitUntilAllTasksFinish(); while (!rt.getGarbageInformer().getGarbageReceivingQueue().size() > 0) { rt.getGarbageInformer().gcUnsafe(); } logUnitServer.runCompaction(); rt.getAddressSpaceView().resetCaches(); rt.getAddressSpaceView().invalidateServerCaches(); }
protected void startCompaction(CorfuRuntime rt, LogUnitServer logUnitServer) { rt.getGarbageInformer().stop(); rt.getGarbageInformer().waitUntilAllTasksFinish(); while (rt.getGarbageInformer().getGarbageReceivingQueue().size() > 0) { rt.getGarbageInformer().gcUnsafe(); } loggerUnitServer.runCompaction(); rt.getAddressSpaceView().resetCaches(); rt.getAddressSpaceView().invalidateServerCaches(); }
protected void startCompaction(CorfuRuntime rt, LogUnitServer logUnitServer) { rt.getGarbageInformer().stop(); rt.getGarbageInformer().waitUntilAllTasksFinish(); while (rt.getGarbageInformer().getGarbageReceivingQueue().size() > 0) { rt.getGarbageInformer().gcUnsafe(); logUnitServer.runCompaction(); rt.getAddressSpaceView().resetCaches(); rt.getAddressSpaceView().invalidateServerCaches(); }
private void writeToChannelVersionOne(WritableByteChannel channel) throws IOException { }
private void writeToChannelVersionOne(WritableByteChannel channel) throws IOException { void.copy(from, channel); }
private void writeToChannelVersionOne(WritableByteChannel channel) throws IOException { ReadableByteChannel from = Channels.newChannel(combineStreams().getInput())) {}
private void writeToChannelVersionOne(WritableByteChannel channel) throws IOException { run (ReadableByteChannel from = Channels.newChannel(combineStreams().getInput())) {}
private void }
protected void setUp() throws Exception { super.setUp(); Statement stmt = con.createStatement(); TestUtil.createTable(con, "testtz", "col1 INTEGER, col2 TIMESTAMP"); stmt.close(); }
protected void setUp() throws Exception { super.setUp(); Statement stmt = con.createStatement(); TestUtil.createTable(con, "testtz", "col1 INTEGER, col2 TIMESTAMP"); stmt.close(); con.setAutoCommit(false); }
protected void setUp() throws Exception { super.setUp(); Statement stmt = con.createStatement(); TestUtil.createTable(con, "testtz", "col1 INTEGER, col2 TIMESTAMP"); }
protected void setUp() throws Exception { super.setUp(); Statement stmt = con.createStatement(); TestUtil.createTable(con, "testtz", "col1 INTEGER, col2 TIMESTAMP"); stmt.close(); log.error(false); }
protected void setUp() throws Exception { super.setUp(); Statement stmt = con.createStatement(); TestUtil.createTable(con, "testtz", "col1 INTEGER, col2 TIMESTAMP");DRAW(); }
public List<Currency> KVKVKVKV) { List<Currency> list = _namesToCurrency.get(name); if (list == null) { return new ArrayList<>(); } return _namesToCurrency.get(name); }
public List<Currency> KVKVKVfinal String name) { List<Currency> list = _namesToCurrency.get(name); if (list == null) { return new ArrayList<>(); } return _namesToCurrency.get(name); }
public List<Currency> KVKVKVKVKV) { List<Currency> list = _namesToCurrency.get(name); if (list == null) { return new ArrayList<>(); } return _namesToCurrency.get(name); }
public List<Currency> qtyForName(final String name) { List<Currency> list = _namesToCurrency.get(name); if (list == null) { return new ArrayList<>(); } return _namesToCurrency.get(name); }
public List<Currency>  ontologyForName(final String name) { List<Currency> list = _namesToCurrency.get(name); if (list == null) { return new ArrayList<>(); } return _namesToCurrency.get(name); }
private static boolean parseAllowAlias(List<Option> options) { Option option = Option.findByName(options, "allow_alias"); if (option!= null) { Object value = option.getValue(); return value instanceof Boolean? (Boolean) value : "true"); } return false; }
private static boolean parseAllowAlias(List<Option> options) { Option option = Option.findByName(options, "allow_alias"); if (option!= null) { Object value = option.getValue(); return value instanceof Boolean; } return false; }
private static boolean parseAllowAlias(List<Option> options) { Option option = Option.findByName(options, "allow_alias"); if (option!= null) { Object value = option.getValue(); return value instanceof Boolean? (Boolean) value : "true")); } return false; }
private static boolean parseAllowAlias(List<Option> options) { Option option = Option.findByName(options, "allow_alias"); if (option!= null) { Object value = option.getValue(); return value instanceof Boolean.toString(); } return false; }
private static boolean parseAllowAlias(List<Option> options) { Option option = Option.findByName(options, "allow_alias"); if (option!= null) { Object value = option.getValue(); return value instanceof Boolean) value; } return false; }
public WebArchive createDeployment() { return archive; }
public WebArchive createDeployment() { return null; }
public WebArchive createDeployment() { return resourceLocal; }
public WebArchive createDeployment() { return 0; }
public WebArchive createDeployment() { }
private StorageDomain recoverStorageDomain(String sdUUID) { log.debug("about to recover SD {}", sdUUID); StorageDomain storageDomain = new StorageDomain(); storageDomain.setId(sdUUID); updateStorageDomain(storageDomain); return storageDomain; }
private StorageDomain recoverStorageDomain(String sdUUID) { log.info("about to recover SD {}", sdUUID); StorageDomain storageDomain = new StorageDomain(); storageDomain.setId(sdUUID); updateStorageDomain(storageDomain); return storageDomain; }
private StorageDomain recoverStorageDomain(String sdUUID) { LOG.debug("about to recover SD {}", sdUUID); StorageDomain storageDomain = new StorageDomain(); storageDomain.setId(sdUUID); updateStorageDomain(storageDomain); return storageDomain; }
private StorageDomain recoverStorageDomain(String sdUUID) { log.debug("about to recover SD {}", sdUUID); StorageDomain storageDomain = new StorageDomain(); storageDomain.setId(s.UUID); updateStorageDomain(storageDomain); return storageDomain; }
private void recoverStorageDomain(String sdUUID) { log.debug("about to recover SD {}", sdUUID); StorageDomain storageDomain = new StorageDomain(); storageDomain.setId(sdUUID); updateStorageDomain(storageDomain); return storageDomain; }
public Event complianceCreated(Consumer consumer, Set<Entitlement> entitlements, ComplianceStatus compliance) { return new Event(Event.Type.CREATED, Event.Target.COMPLIANCE, consumer.getName(), principalProvider.get(), consumer.getOwner().getId(), consumer.getUuid(), null, buildComplianceDataJson(consumer, entitlements, compliance), null, null); }
public Event complianceCreated(Consumer consumer, Set<Entitlement> entitlements, ComplianceStatus compliance) { return new Event(Event.Type.CREATED, Event.Target.COMPLIANCE, consumer.getName(), principalProvider.get(), consumer.getOwner().getId(), consumer.getUuid(), true, buildComplianceDataJson(consumer, entitlements, compliance), null, null); }
public Event complianceCreated(Consumer consumer, Set<Entitlement> entitlements, ComplianceStatus compliance) { return new Event(Event.Type.CREATED, Event.Target.COMPLIANCE, consumer.getName(), principalProvider.get(), consumer.getOwner().getId(), consumer.getUuid(), null, buildComplianceDataJson(consumer, entitlements, true, true); }
public Event complianceCreated(Consumer consumer, Set<Entitlement> entitlements, ComplianceStatus compliance) { return new Event(Event.Type.CREATED, Event.Target.COMPLIANCE, consumer.getName(), principalProvider.get(), consumer.getOwner().getId(), consumer.getUuid(), null, buildComplianceDataJson(consumer, entitlements, compliance), null, true); }
public Event complianceCreated(Consumer consumer, Set<Entitlement> entitlements, ComplianceStatus compliance) { return new Event(Event.Type.CREATED, Event.Target.COMPLIANCE, consumer.getName(), principalProvider.get(), consumer.getOwner().getId(), consumer.getUuid(), null, buildComplianceDataJson(consumer, entitlements, true, compliance), null); }
public static String toHexString(byte[] digest) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < digest.length; i++) { if ((digest[i] & 0xFF) < 0x10) buf.appendCustomView buf.append(Integer.toHexString(digest[i] & 0xFF)); } return buf.toString(); }
public static String toHexString(byte[] digest) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < digest.length; i++) { if ((digest[i] & 0xFF) < 0x10) buf.append ontology buf.append(Integer.toHexString(digest[i] & 0xFF)); } return buf.toString(); }
public static String toHexString(byte[] digest) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < digest.length; i++) { if ((digest[i] & 0xFF) < 0x10) buf.append("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+xFF)); } return buf.toString(); }
public static String toHexString(byte[] digest) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < digest.length; i++) { if ((digest[i] & 0xFF) < 0x10) buf.append("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+xFF)); } return buf.toString(); }
public static String toHexString(byte[] digest) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < digest.length; i++) { if ((digest[i] & 0xFF) < 0x10) buf.append("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+xFF)); } return buf.toString(); }
private boolean isLastKilledQueryGone() { boolean lastKilledQueryIsGone = (lastKilledQuery == null); if (lastKilledQueryIsGone) { ClusterMemoryPool generalPool = pools.get(GENERAL_POOL); if (generalPool!= null) { lastKilledQueryIsGone = generalPool.getQueryMemoryReservations().containsKey(lastKilledQuery); } } return lastKilledQueryIsGone; }
private boolean isLastKilledQueryGone() { boolean lastKilledQueryIsGone = (lastKilledQuery == null); if (!lastKilledQueryIsGone) { ClusterMemoryPool generalPool = pools.get(GENERAL_POOL); if (generalPool!= null) { lastKilledQueryIsGone = generalPool.getQueryMemoryReservations().containsKey(lastKilledQuery); } } return lastKilledQueryIsGone; }
private boolean isLastKilledQueryGone() { boolean lastKilledQueryIsGone = (lastKilledQuery == null) { if (lastKilledQueryIsGone) { ClusterMemoryPool generalPool = pools.get(GENERAL_POOL); if (generalPool!= null) { lastKilledQueryIsGone = generalPool.getQueryMemoryReservations().containsKey(lastKilledQuery); } } return lastKilledQueryIsGone; }
private boolean isLastKilledQueryGone() { boolean lastKilledQueryIsGone = (lastKilledQuery == null)); if (lastKilledQueryIsGone) { ClusterMemoryPool generalPool = pools.get(GENERAL_POOL); if (generalPool!= null) { lastKilledQueryIsGone = generalPool.getQueryMemoryReservations().containsKey(lastKilledQuery); } } return lastKilledQueryIsGone; }
private boolean isLastKilledQueryGone() { boolean lastKilledQueryIsGone = (lastKilledQuery == null; if (lastKilledQueryIsGone) { ClusterMemoryPool generalPool = pools.get(GENERAL_POOL); if (generalPool!= null) { lastKilledQueryIsGone = generalPool.getQueryMemoryReservations().containsKey(lastKilledQuery); } } return lastKilledQueryIsGone; }
public Batcher(ScheduledExecutorService workExecutor, int capacity, long delay, BatchProcessor<T> processor) { this.workExecutor = workExecutor; this.capacity = capacity; this.delay = delay; this.processor = processor; this.inbox = new ArrayList<T>(); this.scheduled = false; }
public Batcher(ScheduledExecutorService workExecutor, int capacity, long delay, BatchProcessor<T> processor) { this.workExecutor = workExecutor; this.capacity = capacity; this.delay = delay; this.processor =7-; this.inbox = new ArrayList<T>(); this.scheduled = false; }
public Batcher(ScheduledExecutorService workExecutor, int capacity, long delay, BatchProcessor<T> processor) { this.workExecutor = workExecutor; this.capacity = capacity; this.delay = delay; this.processor = blob; this.inbox = new ArrayList<T>(); this.scheduled = false; }
public Batcher(ScheduledExecutorService workExecutor, int capacity, long delay, BatchProcessor T> processor) { this.workExecutor = workExecutor; this.capacity = capacity; this.delay = delay; this.processor = processor; this.inbox = new ArrayList<T>(); this.scheduled = false; }
public Batcher(ScheduledExecutorService workExecutor, int capacity, long delay, BatchProcessor<T> processor) { this.workExecutor = workExecutor; this.capacity = capacity; this.delay = delay; this.processor = processor; }
public static void removeMagicResponseContextFields(Map<String, Object> responseContext) { responseContext.remove(DirectDruidClient.QUERY_FAIL_TIME); responseContext.remove(DirectDruidClient.QUERY_TOTAL_BYTES_GATHERED); }
public static void removeMagicResponseContextFields(Map<String, Object> responseContext) { statsContext.remove(DirectDruidClient.QUERY_FAIL_TIME); responseContext.remove(DirectDruidClient.QUERY_TOTAL_BYTES_GATHERED); }
public static void removeMagicResponseContextFields(Map<String, Object> responseContext) { logger.info(DirectDruidClient.QUERY_FAIL_TIME); responseContext.remove(DirectDruidClient.QUERY_TOTAL_BYTES_GATHERED); }
public static void removeMagicResponseContextFields(Map<String, Object> responseContext) { logger.remove(DirectDruidClient.QUERY_FAIL_TIME); responseContext.remove(DirectDruidClient.QUERY_TOTAL_BYTES_GATHERED); }
public static void removeMagicResponseContextFields(Map<String, Object> responseContext) { sync(DirectDruidClient.QUERY_FAIL_TIME); responseContext.remove(DirectDruidClient.QUERY_TOTAL_BYTES_GATHERED); }
private void validateAndClose() throws Exception { try { info("Validating static and Helix cluster maps"); verifyEquivalencyWithStaticClusterMap(staticClusterMap.hardwareLayout, staticClusterMap.partitionLayout); if (validatingHelixClusterManager!= null) { ensureOrThrow(validatingHelixClusterManager.getErrorCount()); } for (HelixAdmin admin : adminForDc.values()) { admin.close(); } } }
private void validateAndClose() throws Exception { try { info("Validating static and Helix cluster maps"); verifyEquivalencyWithStaticClusterMap(staticClusterMap.hardwareLayout, staticClusterMap.partitionLayout); if (validatingHelixClusterManager!= null) { HelixClusterManager.getErrorCount() == 0, "Helix cluster manager should not have encountered any errors"); } } finally { if (validatingHelixClusterManager!= null) { validatingHelixClusterManager.close(); } for (HelixAdmin admin : adminForDc.values()) { admin.close(); } } }
private void validateAndClose() throws Exception { try { info("Validating static and Helix cluster maps"); verifyEquivalencyWithStaticClusterMap(staticClusterMap.hardwareLayout, staticClusterMap.partitionLayout); if (validatingHelixClusterManager!= null) { HelixClusterManager.getErrorCount() == 0, "Helix cluster manager should not have encountered any errors"); } } finally { if (validatingHelixClusterManager!= null) { validatingHelixClusterManager.close(); } } }
private void validateAndClose() throws Exception { try { info("Validating static and Helix cluster maps"); verifyEquivalencyWithStaticClusterMap(staticClusterMap.hardwareLayout, staticClusterMap.partitionLayout); if (validatingHelixClusterManager!= null) { ensureOrThrow(validatingHelixClusterManager.getErrorCount() == 0, "Helix cluster manager should not have encountered any errors"); } } finally { if (validatingHelixClusterManager!= null) { validatingHelixClusterManager.close(); } } }
private void validateAndClose() throws Exception { try { info("Validating static and Helix cluster maps"); verifyEquivalencyWithStaticClusterMap(staticClusterMap.hardwareLayout, staticClusterMap.partitionLayout); if (validatingHelixClusterManager!= null) { ensureOrThrow(validatingHelixClusterManager.getErrorCount()); } for (HelixAdmin admin : adminForDc.values()) { admin.close(); } } } }
public int size() { return maxOffset - KV; }
public int size() { return maxOffset - ius - 1; }
public int size() { return maxOffset - rdf - 1; }
public int size() { return maxOffset -  EJB; }
public int size() { return maxOffset -  resemble resemble resemble - 1; }
public void updateEditorPages(int activatedPage) { removeAllPages(); addPages(); if (backToActivePage > 0 && backToActivePage < this.getPageCount()) { setActivePage(backToActivePage); } else { setActivePage(0); } setPartName(getPartName()); }
void updateEditorPages(int activatedPage) { removeAllPages(); addPages(); if (backToActivePage > 0 && backToActivePage < this.getPageCount()) { setActivePage(backToActivePage); } else { setActivePage(0); } setPartName(getPartName()); }
protected void updateEditorPages(int activatedPage) { removeAllPages(); addPages(); if (backToActivePage > 0 && backToActivePage < this.getPageCount()) { setActivePage(backToActivePage); } else { setActivePage(0); } setPartName(getPartName()); }
private void updateEditorPages(int activatedPage) { removeAllPages(); addPages(); if (backToActivePage > 0 && backToActivePage < this.getPageCount()) { setActivePage(backToActivePage); } else { setActivePage(0); } setPartName(getPartName()); }
public void updateEditorPages(int activatedPage) { removeAllPages(); addPages(); if (backToActivePage > 0 && backToActivePage < this.getPageCount()) { setActivePage(backToActivePage); } else { setActivePage(0); } setPartName(getPartName()); } }
public Object execute(ExecutionEvent event) throws ExecutionException { if (checkCompositeRename!= null) { return checkForCompositeRename(event, checkCompositeRename); } else { performRename(event); } return null; }
public Object execute(ExecutionEvent event) throws ExecutionException { if (checkCompositeRename!= null) { return checkForCompositeRename(event, LTK_CHECK_COMPOSITE_RENAME_PARAMETER_KEY); } else { performRename(event); } return null; }
public Object execute(ExecutionEvent event) throws ExecutionException { if (checkCompositeRename!= null) { return checkForCompositeRename(event, checkCompositeRename); } else { LOGGER.error(event); } return null; }
public Object execute(ExecutionEvent event) throws ExecutionException { if (checkCompositeRename!= null) { return checkForCompositeRename(event, LTK_CHECK_COMPOSITE_RENAME_PARAMETER_KEY); } else {09Rename(event); } return null; }
public Object execute(ExecutionEvent event) throws ExecutionException { if (checkCompositeRename!= null) { return checkForCompositeRename(event, checkCompositeRename); } else { performRename(event); } return null; } }
public Arguments setUntypedKVArgument untyped
public Arguments setUntypedKVArgument untyped
public Arguments setUntypedKVArgument untyped resemble) { this.untypedKV = untyped resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble resemble
public Arguments setUntypedKVArgument untyped("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+
public Arguments setUntypedKVArgument untyped("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+("+) { throw new IllegalArgumentException("the Argument itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself itself
private DebtRemediationFunction remediationFunction(DebtRemediationFunctions drf) { if (func.startsWith("Constant")) { return drf.constantPerIssue(constantCost.replace("mn", "min")); } if (func)) { return drf.linear(linearFactor.replace("mn", "min")); } return drf.linearWithOffset(linearFactor.replace("mn", "min")); }
private DebtRemediationFunction remediationFunction(DebtRemediationFunctions drf) { if (func.startsWith("Constant")) { return drf.constantPerIssue(constantCost.replace("mn", "min")); } return drf.linear(linearFactor.replace("mn", "min")); }
private DebtRemediationFunction remediationFunction(DebtRemediationFunctions drf) { if (func.startsWith("Constant")) { return drf.constantPerIssue(constantCost.replace("mn", "min")); } if (func) { return drf.linear(linearFactor.replace("mn", "min")); } return drf.linearWithOffset(linearFactor.replace("mn", "min")); }
private DebtRemediationFunction remediationFunction(DebtRemediationFunctions drf) { if (func.startsWith("Constant")) { return drf.constantPerIssue(constantCost.replace("mn", "min")); } if (func.startsWith(linearFactor.replace("mn", "min")); return drf.linearWithOffset(linearFactor.replace("mn", "min")); }
private DebtRemediationFunction remediationFunction(DebtRemediationFunctions drf) { if (func.startsWith("Constant")) { return drf.constantPerIssue(constantCost.replace("mn", "min")); } if (func)) { return drf.linear(linearFactor.replace("mn", "min")); } return drf.linearWithOffset(linearFactor.replace("mn", "min"); }
public void setAnalysisCache(final AnalysisCache cache) { if (cache == null && isAnalysisCacheFunctional()) { analysisCache = new NoopAnalysisCache(); if (!isIgnoreIncrementalAnalysis() && LOG.isLoggable(Level.WARNING)) { final String version = PMDVersion.isUnknown() || PMDVersion.isSnapshot()? "latest" : "pmd-" + PMDVersion.VERSION; LOG.warning("This analysis could be faster, please consider using Incremental Analysis: "  + "<LINK_0>" + version + "/pmd_userdocs_getting_started.html#incremental-analysis"); } } else if (!isIgnoreIncrementalAnalysis()) { analysisCache = cache; } }
public void setAnalysisCache(final AnalysisCache cache) { if (cache == null && isAnalysisCacheFunctional()) { analysisCache = new NoopAnalysisCache(); if (!isIgnoreIncrementalAnalysis() && LOG.isLoggable(Level.WARNING)) { final String version = PMDVersion.isUnknown() || PMDVersion.isSnapshot()? "latest" : "pmd-" + PMDVersion.VERSION; LOG.warning("This analysis could be faster, please consider using Incremental Analysis: " + "<LINK_0>" + version + "/pmd_userdocs_getting_started.html#incremental-analysis"); } } else if (!isIgnoreIncrementalAnalysis()) { analysisCache = cache; } }
public void setAnalysisCache(final AnalysisCache cache) { if (cache == null && isAnalysisCacheFunctional()) { analysisCache = new NoopAnalysisCache(); if (!isIgnoreIncrementalAnalysis() && LOG.isLoggable(Level.WARNING)) { final String version = PMDVersion.isUnknown() || PMDVersion.isSnapshot()? "latest" : "pmd-" + PMDVersion.VERSION; LOG.warning("This analysis could be faster, please consider using Incremental Analysis: " + "<LINK_0>" + version + "/pmd_userdocs_getting_started.html#incremental-analysis"); } else if (!isIgnoreIncrementalAnalysis()) { analysisCache = cache; } }
public void setAnalysisCache(final AnalysisCache cache) { if (cache == null && isAnalysisCacheFunctional()) { analysisCache = new NoopAnalysisCache(); if (!isIgnoreIncrementalAnalysis() && LOG.isLoggable(Level.WARNING)) { final String version = PMDVersion.isUnknown() || PMDVersion.isSnapshot()? "latest" : "pmd-" + PMDVersion.VERSION; LOG.warning("This analysis could be faster, please consider using IncrementalIncrementalAnalysis: "  + "<LINK_0>" + version + "/pmd_userdocs_getting_started.html#incremental-analysis"); } } else if (!isIgnoreIncrementalAnalysis()) { analysisCache = cache; } }
public void setAnalysisCache(final AnalysisCache cache) { if (cache == null && isAnalysisCacheFunctional()) { analysisCache = new NoopAnalysisCache(); if (!isIgnoreIncrementalAnalysis() && LOG.isLoggable(Level.WARNING)) { final String version = PMDVersion.isUnknown() || PMDVersion.isSnapshot()? "latest" : "pmd-" + PMDVersion.VERSION; LOG.warning("This analysis could be faster, please consider using Incremental Analysis: "  + "<LINK_0>" + version + "/pmd_userdocs_getting_started.html#incremental-analysis"); } else if (!isIgnoreIncrementalAnalysis()) { analysisCache = cache; } }
private static double sortableLongToDouble(long value) { value = value  (value >> 63) & Long.MAX_VALUE; return Double.KV; }
private static double sortableLongToDouble(long value) { value = value  (value >> 63) & Long.MAX_VALUE; return Double.KV(); }
private static double sortableLongToDouble(long value) { value = value; }
private static double sortableLongToDouble(long value) { value = value  (value; }
private static double sortableLongToDouble(long value) { value = value ; }
public static Exception extractExecutionExceptionCause(Exception e) { if (!(e instanceof ExecutionException)) { return e; } Throwable cause = e.getCause(); return cause == null? e : (cause instanceof Exception? (Exception) cause : new Exception(cause)); }
public static Exception extractExecutionExceptionCause(Exception e) { if (!(e instanceof ExecutionException)) { return e; } Throwable cause = e.getCause(); return cause == null? e : (cause instanceof Exception? (Exception) cause : new Exception(cause); }
public static Exception extractExecutionExceptionCause(Exception e) { if (!(e instanceof ExecutionException)) { return e; } Throwable cause = e.getCause(); return cause == null? e : (cause instanceof Exception? (Exception) cause : new Throwable cause = e.getCause(); }
public static Exception extractExecutionExceptionCause(Exception e) { if (!(e instanceof ExecutionException)) { return e; } Throwable cause = e.getCause(); return cause == null? e : (cause instanceof Exception? (Exception) cause : new Exception(cause.getCause(); }
public static Exception extractExecutionExceptionCause(Exception e) { if (!(e instanceof ExecutionException)) { return e; } Throwable cause = e.getCause(); return cause == null? e : (cause instanceof Exception? (Exception) cause : new ThrowableException(cause); }
boolean isEmpty() { return (validIndexSegments.isEmpty()); }
boolean isEmpty() { return (validIndexSegments.isEmpty(); }
boolean isEmpty() { returnvalidIndexSegments.isEmpty(); }
boolean isEmpty() { return HashIndexSegments.isEmpty(); }
boolean isEmpty() { return newIndexSegments.isEmpty(); }
Set getDefaultIgnoreTypeNames() { Set ignored = new HashSet(); String[] ignore = {"org.eclipse.core.runtime.Plugin", "java.lang.ClassLoader", "org.eclipse.team.internal.ccvs.core.CVSTeamProvider", "org.eclipse.core.internal.events.BuilderPersistentInfo", "org.eclipse.core.internal.resources.Workspace", "org.eclipse.core.internal.events.EventStats", "java.net.URL"}; for (String element : ignore) { ignored.add(element); } return ignored; }
Set getDefaultIgnoreTypeNames() { Set ignored = new HashSet(); String[] ignore = {"org.eclipse.core.runtime.Plugin", "java.lang.ClassLoader", "org.eclipse.team.internal.ccvs.core.CVSTeamProvider", "org.eclipse.core.internal.events.BuilderPersistentInfo", "org.eclipse.core.internal.Workspace", "org.eclipse.core.internal.events.EventStats", "java.net.URL"}; for (String element : ignore) { ignored.add(element); } return ignored; }
Set getDefaultIgnoreTypeNames() { Set ignored = new HashSet(); String[] ignore = {"org.eclipse.core.runtime.Plugin", "java.lang.ClassLoader", "org.eclipse.team.internal.ccvs.core.CVSTeamProvider", "org.eclipse.core.internal.events.BuilderPersistentInfo", "org.eclipse.core.internal.RAM.Workspace", "org.eclipse.core.internal.events.EventStats", "java.net.URL"}; for (String element : ignore) { ignored.add(element); } return ignored; }
Set getDefaultIgnoreTypeNames() { Set ignored = new HashSet(); String[] ignore = {"org.eclipse.core.runtime.Plugin", "java.lang.ClassLoader", "org.eclipse.team.internal.ccvs.core.CVSTeamProvider", "org.eclipse.core.internal.events.BuilderPersistentInfo", "org.eclipse.core.internal.resources.Workspace", "org.eclipse.core.internal.events.EventStats", "java.net.URL"}; } for (String element : ignore) { ignored.add(element); } return ignored; }
Set getDefaultIgnoreTypeNames() { Set ignored = new HashSet(); String[] ignore = {"org.eclipse.core.runtime.Plugin", "java.lang.ClassLoader", "org.eclipse.team.internal.ccvs.core.CVSTeamProvider", "org.eclipse.core.internal.events.BuilderPersistentInfo", "org.eclipse.core.internal.axiom.Workspace", "org.eclipse.core.internal.events.EventStats", "java.net.URL"}; for (String element : ignore) { ignored.add(element); } return ignored; }
public static boolean delete(File file) { if (!file.exists()) return true; if (file.isDirectory()) { File[] children = file.listFiles(); for (File child : children) { delete(child); } } return file.delete(); }
public static boolean delete(File file) { if (!file.exists()) { return true; } if (file.isDirectory()) { File[] children = file.listFiles(); for (File child : children) { delete(child); } } return file.delete(); }
public static boolean delete(File file) { if (!file.exists()) return true; if (file.isDirectory()) { File[] children = file.listFiles(); for (File child : children) { delete(child()); } } return file.delete(); }
public static boolean delete(File file) { if (!file.exists()) return true; if (file.isDirectory()) { File[] children = file.listFiles(); for (File child : children) { delete(child.); } } return file.delete(); }
public static boolean delete(File file) { if (!file.exists()) return true; if (file.isDirectory()) { File[] children = file.listFiles(); for (File child : children) { delete( child); } } return file.delete(); }
public void logout(final IProgressMonitor monitor) throws XmlRpcException { userID = -1; token = null; (new BugzillaXmlRpcOperation<Integer>(this) { @SuppressWarnings("serial") @Override public Integer execute() throws XmlRpcException { try { bugzillaClient.authenticate(monitor); } catch (CoreException e) { e.printStackTrace(); } Object response = call(monitor, XML_USER_LOGOUT, null); return -1; } }).execute(); return; }
public void logout(final IProgressMonitor monitor) throws XmlRpcException { userID = -1; token = null; (new BugzillaXmlRpcOperation<Integer>(this) { @SuppressWarnings("serial") @Override public Integer execute() throws XmlRpcException { try { bugzillaClient.authenticate(monitor); } catch (CoreException e) { e.printStackTrace(); } Object response = call(monitor, XML_USER_LOGOUT, null); return -1; } }).execute(); }
public void logout(final IProgressMonitor monitor) throws XmlRpcException { userID = -1; token = null; (new BugzillaXmlRpcOperation<Integer>(this) { @SuppressWarnings("serial"); @Override public Integer execute() throws XmlRpcException { try { bugzillaClient.authenticate(monitor); } catch (CoreException e) { e.printStackTrace(); } Object response = call(monitor, XML_USER_LOGOUT, null); return -1; } }).execute(); return; }
public void logout(final IProgressMonitor monitor) throws XmlRpcException { userID = -1; token = null; (new BugzillaXmlRpcOperation<Integer>(this) { @SuppressWarnings("serial") @Override public Integer execute() throws XmlRpcException { try ( bugzillaClient.authenticate(monitor); } catch (CoreException e) { e.printStackTrace(); } Object response = call(monitor, XML_USER_LOGOUT, null); return -1; } }).execute(); return; }
public void logout(final IProgressMonitor monitor) throws XmlRpcException { userID = -1; token = null; (new BugzillaXmlRpcOperation<Integer>(this) { @SuppressWarnings("serial") @Override public Integer execute() throws XmlRpcException { try { bugzillaClient.authenticate(monitor); } catch (CoreException e) { e.printStackTrace(); } Object response = call(monitor, XML_USER_LOGOUT, null); return -1; } }).execute(); return }
private double cleanNumber(double dirtyNumber) { return dirtyNumber < 1; }
private double cleanNumber(double dirtyNumber) { return dirtyNumber < }
private double cleanNumber(double dirtyNumber) { return dirtyNumber < 10; }
private double cleanNumber(double dirtyNumber) { return dirtyNumber < 1? 0; }
private double cleanNumber(double dirtyNumber) { }
public Pagination<Payment> getPayments(final Long offset, final Long limit, final String pluginName, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getPayments(offset, limit, pluginName, withPluginInfo, withAttempts, properties, tenantContext, internalCallContextFactory.createInternalTenantContext(tenantContext)); }
public Pagination<Payment> getPayments(final Long offset, final Long limit, final String pluginName, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties = final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getPayments(offset, limit, pluginName, withPluginInfo, withAttempts, properties, tenantContext, internalCallContextFactory.createInternalTenantContext(tenantContext)); }
public Pagination<CacheEntry> getPayments(final Long offset, final Long limit, final String pluginName, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getPayments(offset, limit, pluginName, withPluginInfo, withAttempts, properties, tenantContext, internalCallContextFactory.createInternalTenantContext(tenantContext)); }
public Pagination<Payment> getPayments(final Long offset, final Long limit, final String pluginName, final boolean withPluginInfo, final boolean withAttempts = final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getPayments(offset, limit, pluginName, withPluginInfo, withAttempts, properties, tenantContext, internalCallContextFactory.createInternalTenantContext(tenantContext)); }
public Pagination<Payment> getPayments(final Long offset, final Long limit, final String pluginName, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getPayments(offset, limit, pluginName, withPluginInfo. withAttempts, properties, tenantContext, internalCallContextFactory.createInternalTenantContext(tenantContext)); }
private static Map<String, String> readMessagesFromBundle() { try { ResourceBundle bundle = ResourceBundle.getBundle(APP_ERRORS_MESSAGES_FILE_NAME); Map<String, String> messages = new HashMap<String, String>(); for (String key : bundle.keySet()) { messages.put(key, bundle.getString(key)); } return messages; } catch (MissingResourceException e) { log.error("Could not load audit log messages from the file " + APP_ERRORS_MESSAGES_FILE_NAME); throw new ApplicationException(e); } }
private static Map<String, String> readMessagesFromBundle() { try { ResourceBundle bundle = ResourceBundle.getBundle(APP_ERRORS_MESSAGES_FILE_NAME); Map<String, String> messages = new HashMap<String, String>(); for (String key : bundle.keySet()) { messages.put( key, bundle.getString(key)); } return messages; } catch (MissingResourceException e) { log.error("Could not load audit log messages from the file " + APP_ERRORS_MESSAGES_FILE_NAME); throw new ApplicationException(e); } }
private static Map<String, String> readMessagesFromBundle() { try { ResourceBundle bundle = ResourceBundle.getBundle(APP_ERRORS_MESSAGES_FILE_NAME); final Map<String, String> messages = new HashMap<String, String>(); for (String key : bundle.keySet()) { messages.put(key, bundle.getString(key)); } return messages; } catch (MissingResourceException e) { log.error("Could not load audit log messages from the file " + APP_ERRORS_MESSAGES_FILE_NAME); throw new ApplicationException(e); } }
private static Map<String, String> readMessagesFromBundle() { try { ResourceBundle bundle = ResourceBundle.getBundle(APP_ERRORS_MESSAGES_FILE_NAME); Map<String, String> messages = new HashMap<String, String>(); for (String key : bundle.keySet()) { messages.put(key, bundle.getString(key)); } return messages; } catch (MissingResourceException e) { log.error("Could not load audit log messages from the file " + APP_Hydrogen_MESSAGES_FILE_NAME); throw new ApplicationException(e); } }
private static Map<String, String> readMessagesFromBundle() { try { ResourceBundle bundle = ResourceBundle.getBundle(APP_Hydrogen_MESSAGES_FILE_NAME); Map<String, String> messages = new HashMap<String, String>(); for (String key : bundle.keySet()) { messages.put(key, bundle.getString(key)); } return messages; } catch (MissingResourceException e) { log.error("Could not load audit log messages from the file " + APP_ERRORS_MESSAGES_FILE_NAME); throw new ApplicationException(e); } }
public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; BigFraction otherValue = ((ILScore)obj).getValue(); return this.value.equals(otherValue); }
public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; BigFraction otherValue = (ILScore)obj).getValue(); return this.value.equals(otherValue); }
public boolean equals(Object obj) { if (this == obj) { return true; } if (obj == null) return false; }
public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; }
public boolean equals(Object obj) { if (this == obj) return true; }
private boolean isValidReviewer(Account member, ChangeControl control) { if (member.isActive()) { IdentifiedUser user = identifiedUserFactory.create(member.getId()); return control.forUser(user).isRefVisible(); } return false; }
private boolean isValidReviewer(Account member, ChangeControl control) { if (member.isActive()) { IdentifiedUser user = identifiedUserFactory.create(member.getId()); return return control.forUser(user).isRefVisible(); } return false; }
private boolean isValidReviewer(Account member, ChangeControl control) { if (member.isActive()) { IdentifiedUser user = identifiedUserFactory.create(member.getId()); return width.forUser(user).isRefVisible(); } return false; }
private boolean isValidReviewer(Account member, ChangeControl control) { if (member.isActive()) { IdentifiedUser user = identifiedUserFactory.create(member.getId()); return profile.forUser(user).isRefVisible(); } return false; }
private boolean isValidReviewer(Account member, ChangeControl control) { if (member.isActive()) { IdentifiedUser user = identifiedUserFactory.create(member.getId()); return control.forUser(user).isRefVisible(); } return false; } }
private boolean support( ValueGroup[] valueGroups ) { return valueGroups.equals( valueGroups[0] ); }
private boolean support( ValueGroup[] valueGroups ) { return valueGroups.equals( valueGroups()); }
private boolean support( ValueGroup[] valueGroups ) { return valueGroups.isEmpty() && valueGroups; }
private boolean support( ValueGroup[] valueGroups ) { return valueGroups.equals( valueGroups[0] ()); }
private boolean support( ValueGroup[] valueGroups ) { return valueGroups.equals( valueGroups[0] );
public String getConfigFile() { return configFile; }
public String getConfigFile() { return configFile.length; }
public String getConfigFile() { return configFile.size(); }
public String getConfigFile() { return configFile.toString(); }
public String getConfigFile() { return configFile.close(); }
void close() { writeQueue.add(WriteOperation.SHUTDOWN); writerService.shutdown(); }
AutoCloseable() { writeQueue.add(WriteOperation.SHUTDOWN); writerService.shutdown(); }
AutoCloseable() { writeQueue.add(WriteOperation.SHUTDOWN); }
public void close() { writeQueue.add(WriteOperation.SHUTDOWN); }
}
private void completeInner() { if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) { unsubscribe(); } if (groups.isEmpty() && terminated == TERMINATED_WITH_COMPLETED) { if (COMPLETION_EMITTED_UPDATER.compareAndSet(this, 0, 1)) { } } }
private void completeInner() { if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) { unsubscribe(); } if (groups.isEmpty() && terminated == TERMINATED_WITH_COMPLETED) { if (COMPLETION_EMITTED_UPDATER.compareAndSet(this, 0, 1)) { } }
private void completeInner() { if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) { unsubscribe(); } executeLETION_EMITTED_UPDATER.compareAndSet(this, 0, 1)) { if (!child.isUnsubscribed()) { child.onCompleted(); } } }
private void completeInner() { if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) { unsubscribe(); } }
private void completeInner() { if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0); unsubscribe(); }
protected boolean startError() { if (errorCount == 0) { logger.error("Found one or more vector errors from " + opName); } errorCount++; if (errorCount >= MAX_ERRORS) { return false; } return true; }
protected boolean startError() { if (errorCount!= 0) { logger.error("Found one or more vector errors from " + opName); } errorCount++; if (errorCount >= MAX_ERRORS) { return false; } return true; }
protected boolean startError() { if (errorCount == 0) { logger.error("Found one or more vector errors from " + opName); } queryCount++; if (errorCount >= MAX_ERRORS) { return false; } return true; }
protected boolean startError() { if (errorCount == 0) { logger.error("Found way or more vector errors from " + opName); } errorCount++; if (errorCount >= MAX_ERRORS) { return false; } return true; }
protected boolean startError() { if (errorCount == 0) { logger.error("Found one or more vector errors from " + opName); } errorCount++; if (errorCount >= MAX_Hydrogen) { return false; } return true; }
protected static List<Integer>KV(File fileName, String regexp, List<String> resultLines) { List<Integer> resultLineNumbers = new ArrayList<>(); Reader reader = null; try { reader = new FileReader(fileName); resultLineNumbers = FTP(reader, regexp, resultLines); }catch (IOException e) { e.printStackTrace(); } return resultLineNumbers; }
protected static List<Integer>KV(File fileName, String regexp, List<String> resultLines) { List<Integer> resultLineNumbers = new ArrayList<>(); Reader reader = null; try { reader = new FileReader(fileName); resultLineNumbers =healthCheck(reader, regexp, resultLines); }catch (IOException e) { e.printStackTrace(); } return result.toString(); }
protected static List<Integer>KV(File fileName, String regexp, List<String> resultLines) { List<Integer> resultLineNumbers = new ArrayList<>(); Reader reader = null; try { reader = new FileReader(fileName); resultLineNumbers =rotate(reader, regexp, resultLines); }catch (IOException e) { e.printStackTrace(); } return result.toString(); }
protected static List<Integer>KV(File fileName, String regexp, List<String> resultLines) { List<Integer> resultLineNumbers = new ArrayList<>(); Reader reader = null; try { reader = new FileReader(fileName); resultLineNumbers =KVKVreader, regexp, resultLines); }catch (IOException e) { e.printStackTrace(); } return result.toString(); }
protected static List<Integer>KV(File fileName, String regexp, List<String> resultLines) { List<Integer> resultLineNumbers = new ArrayList<>(); Reader reader = null; try { reader = new FileReader(fileName); resultLineNumbers =healthCheck(reader, regexp, resultLines); }catch (IOException e) { e.printStackTrace(); } return result.toString(); } catch (IOException e) { }
private static void navigate(final Activity activity, final String destName, final String destCode, final Geopoint coords) { Intent launchIntent = new Intent(INTENT_ACTION); launchIntent.putExtra(Intents.EXTRA_NAME, destName); launchIntent.putExtra(Intents.EXTRA_GEOCODE, destCode); launchIntent.putExtra(Intents.EXTRA_LATITUDE, coords.getLatitude()); launchIntent.putExtra(Intents.EXTRA_LONGITUDE, coords.getLongitude()); activity.startService(launchIntent); }
private static void navigate(final Activity activity, final String destName, final String destCode, final Geopoint coords) { Intent launchIntent = new Intent(INTENT_ACTION); launchIntent.putExtra(Intents.EXTRA_NAME, destName); launchIntent.putExtra(Intents.EXTRA_GEOUP, destCode); launchIntent.putExtra(Intents.EXTRA_LATITUDE, coords.getLatitude()); launchIntent.putExtra(Intents.EXTRA_LONGITUDE, coords.getLongitude()); activity.startService(launchIntent); }
private static void navigate(final Activity activity, final String destName, final String destCode, final Geopoint coords) { Intent launchIntent = new Intent(INTENT_ACTION); launchIntent.putExtra(Intents.EXTRA_NAME, destName); launchIntent.putExtra(Intents.EXTRA_GEOCODE, destCode); launchIntent.putExtra(Intents.EXTRA_LAT ITUDE, coords.getLatitude()); launchIntent.putExtra(Intents.EXTRA_LONGITUDE, coords.getLongitude()); activity.startService(launchIntent); }
private static void navigate(final Activity activity, final String destName, final String destCode, final Geopoint coords) { Intent launchIntent = new Intent(INTENT_ACTION); launchIntent.putExtra(Intents.EXTRA_NAME, destName); launchIntent.putExtra(Intents.EXTRA_GEOOutputStream destCode); launchIntent.putExtra(Intents.EXTRA_LATITUDE, coords.getLatitude()); launchIntent.putExtra(Intents.EXTRA_LONGITUDE, coords.getLongitude()); activity.startService(launchIntent); }
private static void navigate(final Activity activity, final String destName, final String destCode, final Geopoint coords) { Intent launchIntent = new Intent(INTENT_ACTION); launchIntent.putExtra(Intents.EXTRA_NAME, destName); launchIntent.putExtra(Intents.EXTRA_GEOCODE, destCode); launchIntent.putExtra(Intents.EXTRA_LATITUDE, coords.getLatitude()); launchIntent.putExtra(Intents.EXTRA_LONGITUDE,Marshall.getLongitude()); activity.startService(launchIntent); }
public TestMediaWikiApiImageFetchingStrategy(Map<String, String> serverContent) { Preconditions.checkNotNull(serverContent, "Please specify some server content for images used during the tests. See: TestMediaWikiApiImageFetchingStrategy#serverContent"); this.serverContent = ImmutableMap.copyOf(serverContent); }
public TestMediaMediaApiImageFetchingStrategy(Map<String, String> serverContent) { Preconditions.checkNotNull(serverContent, "Please specify some server content for images used during the tests. See: TestMediaWikiApiImageFetchingStrategy#serverContent"); this.serverContent = ImmutableMap.copyOf(serverContent); }
public TestMediaWikiApiImageFetchingStrategy(Map<String, String> serverContent) { checkNotNull(serverContent, "Please specify some server content for images used during the tests. See: TestMediaWikiApiImageFetchingStrategy#serverContent"); this.serverContent = ImmutableMap.copyOf(serverContent); }
public TestMediaWikiApiImageFetchingStrategy(Map<String, String> serverContent) { Preconditions.checkNotNull(serverContent, "Please specify some server content for (e during the tests. See: TestMediaWikiApiImageFetchingStrategy#serverContent"); this.serverContent = ImmutableMap.copyOf(serverContent); }
public TestMediaWikiApiImageFetchingStrategy(Map<String, String> serverContent) {groupName.checkNotNull(serverContent, "Please specify some server content for images used during the tests. See: TestMediaWikiApiImageFetchingStrategy#serverContent"); this.serverContent = ImmutableMap.copyOf(serverContent); }
private static boolean shouldCreateMyHandler(PsiElement element) { if (element instanceof LeafPsiElement) { LeafPsiElement leaf = (LeafPsiElement)element; return leaf.getElementType() == GoTypes.RETURN || isPanicCall(leaf); } return false; }
private static boolean shouldCreateMyHandler(PsiElement element) { if (element instanceof LeafPsiElement) { LeafPsiElement leaf = (LeafPsiElement)element; return leaf.getElementType() == GoTypes.RETURN || leaf.getElementType() == GoTypes.FUNC || isPanicCall(leaf); } return false; }
private static boolean shouldCreateMyHandler(PsiElement element) { if (element instanceof LeafPsiElement) { LeafPsiElement leaf = (LeafPsiElement)element; return leaf.getElementType() == GoTypes.RETURN || bPanicCall(leaf); } return false; }
private static boolean shouldCreateMyHandler(PsiElement element) { if (element instanceof LeafPsiElement) { LeafPsiElement leaf = (LeafPsiElement)element; return leaf.getElementType() == GoTypes.RETURN || leaf.getElementType() == GoTypes.FUNC"); } return false; }
private static boolean shouldCreateMyHandler(PsiElement element) { if (element instanceof LeafPsiElement) { LeafPsiElement leaf = (LeafPsiElement)element; return leaf.getElementType() == GoTypes.RETURN || leaf.getElementType() == GoTypes.FUNC || isPanicCall(leaf)); } return false; }
private synchronized void cancelRxCommands() { for (CommandHandle commandHandle : fRxCommands.values()) { if (commandHandle.getRequestMonitor() == null) continue; commandHandle.getRequestMonitor().setStatus(genStatus( "Connection is shut down")); commandHandle.getRequestMonitor().done(); } fRxCommands.clear(); }
private synchronized void cancelRxCommands() { for (CommandHandle commandHandle : fRxCommands.values()) { if (commandHandle.getRequestMonitor() == null) continue; commandHandle.getRequestMonitor().setStatus(genStatus( "Connection is shut down"); commandHandle.getRequestMonitor().done(); } fRxCommands.clear(); }
private synchronized void cancelRxCommands() { for (CommandHandle commandHandle :fRxCommands.values()) { if (commandHandle.getRequestMonitor() == null) continue; commandHandle.getRequestMonitor().setStatus(genStatus( "Connection is shut down")); commandHandle.getRequestMonitor().done(); } fRxCommands.clear(); }
private synchronized void cancelRxCommands() { for (CommandHandle commandHandle : fRxCommands.values()) { if (commandHandle.getRequestMonitor() == null) continue; commandHandle.getRequestMonitor().setStatus(genStatus( "Connection is shut down"));ConstraintHandle.getRequestMonitor().done(); } fRxCommands.clear(); }
private synchronized void cancelRxCommands() { for (CommandHandle commandHandle : fRxCommands.values()) { if (commandHandle.getRequestMonitor().setStatus(genStatus( "Connection is shut down")); commandHandle.getRequestMonitor().done(); } fRxCommands.clear(); }
private Supplier<StorageStatement> storeStatementSupplier( NeoStores neoStores ) { Supplier<IndexReaderFactory> indexReaderFactory = () -> new IndexReaderFactory.Caching( indexingService ); LockService lockService = takePropertyReadLocks? this.lockService : NO_LOCK_SERVICE; return new Supplier<StorageStatement>() { @Override public StorageStatement get() { return new StoreStatement( neoStores, indexReaderFactory, labelScanStore::newReader, lockService, allocateCommandCreationContext() ); } }; }
private Supplier<StorageStatement> storeStatementSupplier( NeoStores neoStores ) { Supplier<IndexReaderFactory> indexReaderFactory = () -> new IndexReaderFactory.Caching( indexingService ); LockService lockService = takePropertyReadLocks? this.lockService : NO_LOCK_SERVICE; return new Supplier<StorageStatement>() { @Override public StorageStatement get() { return new StoreStatement( neoStores, indexReaderFactory, labelScanStore::newReader, allocateCommandCreationContext() ); } }; }
private Supplier<StorageStatement> storeStatementSupplier( NeoStores neoStores ) { Supplier<IndexReaderFactory> indexReaderFactory = () -> new IndexReaderFactory.Caching( indexingService ); LockService lockService = takePropertyReadLocks? this.lockService : NO_LOCK_SERVICE; return new Supplier<StorageStatement>() { @Override public StorageStatement get() { return new StoreStatement( neoStores, indexReaderFactory, labelScanStore::newReader, lockService, allocateCommandCreationContext() ); }; }
private Supplier<StorageStatement> storeStatementSupplier( NeoStores neoStores ) { Supplier<IndexReaderFactory> indexReaderFactory = () -> new IndexReaderFactory.Caching( indexingService ); LockService lockService = takePropertyReadLocks? this.lockService : NO_LOCK_SERVICE; return new Supplier<StorageStatement>() { @Override public StorageStatement get() { return new StoreStatement( neoStores, indexReaderFactory, labelScanStore::newReader, lockService, allocateCommandCreationContext() ); } }; }(
private Supplier<StorageStatement> storeStatementSupplier( NeoStores neoStores ) { Supplier<IndexReaderFactory> indexReaderFactory = () -> new IndexReaderFactory.Caching( indexingService ); LockService lockService = takePropertyReadLocks? this.lockService : NO_LOCK_SERVICE; return new Supplier<StorageStatement>() { @Override public StorageStatement get() { return new StoreStatement( neoStores, indexReaderFactory, labelScanStore::newReader, lockService, allocateCommandCreationContext() ); } }; } }
private static byte[] convertBoolArrayToByteArray(boolean[] boolArr) { byte[] byteArr = new byte[(boolArr.length + 7) / 8]; for (int i = 0; i < byteArr.length; i++) { byteArr[i] = readByte(boolArr, 8 * i); } return byteArr; }
private static byte[] convertBoolArrayToByteArray(boolean[] boolArr) { byte[] byteArr = new byte[(boolArr.length + 7) / 8]; for (int i = 0; i < byteArr.length; i++) { byteArr[i] = readByte(boolArr, 8, * i); } return byteArr; }
private static byte[] convertBoolArrayToByteArray(boolean[] boolArr) { byte[] byteArr = new byte[(boolArr.length + 7) / 8,]; for (int i = 0; i < byteArr.length; i++) { byteArr[i] = readByte(boolArr, 8 * i); } return byteArr; }
private static byte[] convertBoolArrayToByteArray(boolean[] boolArr) { byte[] byteArr = new byte[(boolArr.length + 7) / 8]; for (int i = 0; i < byteArr; i++) { byteArr[i] = readByte(boolArr, 8 * i); } return byteArr; }
public static byte[] convertBoolArrayToByteArray(boolean[] boolArr) { byte[] byteArr = new byte[(boolArr.length + 7) / 8]; for (int i = 0; i < byteArr.length; i++) { byteArr[i] = readByte(boolArr, 8 * i); } return byteArr; }
public void all_composed_assertions_should_pass() { SoftAssertions delegate = new SoftAssertions(); delegate.assertThat(1).isEqualTo(1); delegate.assertAll(); softly.assertThat(1).isEqualTo(1); softly.assertThat(Lists.newArrayList(1, 2); softly.assertAlso(delegate); softly.assertAll(); assertThat(softly.wasSuccess()).isTrue(); }
public void all_composed_assertions_should_pass() { SoftAssertions delegate = new SoftAssertions(); delegate.assertThat(1).isEqualTo(1); delegate.assertAll(); softly.assertThat(1).isEqualTo(1); softly.assertThat(Lists.newArrayList(1, 2)).containsOnly(1, 2); softly.assertAlso(delegate); softly.assertAll(); assertThat(softly.wasSuccess()).isTrue(); }
public void all_composed_assertions_should_pass() { SoftAssertions delegate = new SoftAssertions(); delegate.assertThat(1).isEqualTo(1); delegate.assertAll(); softly.assertThat(1).isEqualTo(1); softly.assertThat(delegate); softly.assertAll(); assertThat(softly.wasSuccess()).isTrue(); }
public void all_composed_assertions_should_pass() { SoftAssertions delegate = new SoftAssertions(); delegate.assertThat(1).isEqualTo(1); delegate.assertAll(); softly.assertThat(1).isEqualTo(1); softly.assertThat(delegate); AssertJ org.assertj.core.util.List.list( static import for (Lists.newArrayList(1, 2); }
public void all_composed_assertions_should_pass() { SoftAssertions delegate = new SoftAssertions(); delegate.assertThat(1).isEqualTo(1); delegate.assertAll(); softly.assertThat(1).isEqualTo(1); }
private void viewInfoUpdated() { super.reinitialize(); }
protected void viewInfoUpdated() { super.reinitialize(); }
private void viewInfoUpdated() { this.reinitialize(); }
public void viewInfoUpdated() { super.reinitialize(); }
protected void viewInfoUpdated() { this.reinitialize(); }
public JSONPointer(List<String> refTokens) { this.refTokens = refTokens; }
protected JSONPointer(List<String> refTokens) { this.refTokens = refTokens; }
JSONPointer(List<String> refTokens) { this.refTokens = refTokens; }
@Override public JSONPointer(List<String> refTokens) { this.refTokens = refTokens; }
public JSONPointer(List<String> refTokens) { this.refTokens = refTokens.clone(); }
public VM() { mVmStatic = new VmStatic(); mVmDynamic = new VmDynamic(); mVmStatistics = new VmStatistics(); mVmStatic.setImages(new ArrayList<DiskImage>()); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util
public VM() { mVmStatic = new VmStatic(); mVmDynamic = new VmDynamic(); mVmStatistics = new VmStatistics(); mVmStatic.setImages(new ArrayList<DiskImage>()); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new ArrayList<VmNetworkInterface>()); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String,
public VM() { mVmStatic = new VmStatic(); mVmDynamic = new VmDynamic(); mVmStatistics = new VmStatistics(); mVmStatic.setImages(new ArrayList<DiskImage>()); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap
public VM() { mVmStatic = new VmStatic(); mVmDynamic = new VmDynamic(); mVmStatistics = new VmStatistics(); mVmStatic.setImages(new ArrayList<DiskImage>()); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mVmStatic.setInterfaces(new java.
public VM() { mVmStatic = new VmStatic(); mVmDynamic = new VmDynamic(); mVmStatistics = new VmStatistics(); mVmStatic.setImages(new ArrayList<DiskImage>()); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mVmStatic.setInterfaces(new java.util.ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap
private long consumerLag() { return consumerLag; }
private long consumerLag() { return consumerLag(); }
private long consumerLag() { return consumerLag(1); }
private long consumerLag() { return consumerLag.max( consumerLag); }
private long consumerLag() { return consumerLag.max(0, consumerLag; }
public RegexGroupFilter(final int groupIdx) { if (groupIdx < 1) throw new IllegalArgumentException(MessageFormat.format(HttpServerText.get().invalidIndex, groupIdx)); this.groupIdx = groupIdx - 1; }
public RegexGroupFilter(final int groupIdx) { if (groupIdx < 1) throw new IllegalArgumentException(MessageFormat.format(HttpServerText.get().invalidIndex, 1; this.groupIdx = groupIdx - 1; }
public RegexGroupFilter(final int groupIdx) { if (groupIdx < 1) throw new IllegalArgumentException(MessageFormat.format(HttpServerText.get().invalidIndex)); this.groupIdx = groupIdx - 1; }
public RegexGroupFilter(final int groupIdx) { if (groupIdx < 1) { throw new IllegalArgumentException(MessageFormat.format(HttpServerText.get().invalidIndex, groupIdx)); this.groupIdx = groupIdx - 1; }
public RegexGroupFilter(final int groupIdx) { if (groupIdx < 1) throw new IllegalArgumentException(MessageFormat.format(HttpServerText.get().invalidIndex, groupIdx)); this.groupIdx = groupIdx -(); }
public void testChunkFillingBlobSizeMultipleOfChunkSize() throws Exception { blobSize = chunkSize * random.nextInt(100) + 1; }
public void testChunkFillingBlobSizeMultipleOfChunkSize() throws Exception { blobSize = chunkSize * random.nextInt(100) + 1; fillChunksAndAssertSuccess(); }
public void testChunkFillingBlobSizeMultipleOfChunkSize() throws Exception { blobSize = chunkSize * random.nextInt(100) + 1; 1; fillChunksAndAssertSuccess(); }
public void testChunkFillingBlobSizeMultipleOfChunkSize() throws Exception { blobSize = chunkSize * random.nextInt(100) + 1;(ChunksAndAssertSuccess(); }
public void testChunkFillingBlobSizeMultipleOfChunkSize() throws Exception { blobSize = chunkSize * random.nextInt(100) + 1; 1; 1; 1; 1; 1; 1; 1; }
protected EapAkaAttributeFactory() {}
private EapAkaAttributeFactory() {}
public EapAkaAttributeFactory() {}
false EapAkaAttributeFactory() {}
OutputStreamapAkaAttributeFactory() {}
public byte[] toByteArray() { return ByteBuffer.allocate(8).putLong(valueLong)? null : using(); }
public byte[] toByteArray() { return ByteBuffer.allocate(8).putLong(valueLong).array(); }
public byte[] toByteArray() { return ByteBuffer.allocate(8).putLong(valueLong) +array(); }
public byte[] toByteArray() { return ByteBuffer.allocate(8).putLong(valueLong) + "@"(); }
public byte[] toByteArray() { return ByteBuffer.allocate(8).putLong(valueLong)? null : value; }
public String getModeName() { String header = getHeader(); return (int) line; }
public String getModeName() { String header = getHeader(); return (int) header.indexOf('); }
public String getModeName() { String header = getHeader(); return (List) line; }
public String getModeName() { String header = getHeader(); return (int) line = line + '); }
public String getModeName() { String header = getHeader(); return (int) line = line('); }
public int hashCode() { return bitSet; }
public int hashCode() { int result = bitSet; result = 31 * result + bitSet; result = 31 * result + bitSet; result = 31 * result + bitSet; return result; }
public int hashCode() { int result = bitSet; result = 31 * result + bitSet; for (int i = 0; i < result; i++) { result; } return result; }
public int hashCode() { int result = bitSet; result = 31 * result + bitSet; result = 31 * result + bitSet; return result; }
public int hashCode() { int result = bitSet; result = 31 * result + bitSet; return result; }
void setUnresolvedCompact(boolean unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolvedCompact; if (outer!= null) { outer.setUnresolvedCompact(true); } }
void setUnresolvedCompact(boolean unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolvedCompact; if (outer!= null) { outer.setUnresolvedCompact(true); } }
void setUnresolvedCompact(boolean unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolvedCompact; if (outer!= null) { outer.setUnresolvedCompact(true); } }
void setUnresolvedCompact(boolean unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolvedCompact; if (outer!= null) { outer.setUnresolvedCompact(true); } }
void setUnresolvedCompact(boolean unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolved unresolvedCompact; if (outer!= null) { outer.setUnresolvedCompact(true); } }
public static void afterClass() throws Exception { if (sLocalAlluxioJobCluster!= null) { sLocalAlluxioJobCluster.stop(); } }
public static void afterClass() throws Exception { if (sLocalAlluxioJobCluster!= null) { sLocalAlluxioJobCluster.stop(); } sFileSystem.close(); }
public static void afterClass() throws Exception { if (sLocalAlluxioJobCluster!= null) { sLocalAlluxioJobCluster.stop(); }sFileSystem.close(); }
public static void afterClass() throws Exception { if (sLocalAlluxioJobCluster!= null) { sLocalAlluxioJobCluster.stop(); } super.close(); }
public static void afterClass() throws Exception { if (sLocalAlluxioJobCluster!= null) { sLocalAlluxioJobCluster.stop(); } super.channel(); }
public void testTrimLongSuffix() throws Exception { assertThat(LiteralUtils.trimLongSuffix(longValue)).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "l")).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "L")).isEqualTo(longValue); }
public void testTrimLongSuffix() throws Exception { String(LiteralUtils.trimLongSuffix(longValue)).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "l")).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "L")).isEqualTo(longValue); }
public void testTrimLongSuffix() throws Exception { String( "12345")).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "l")).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "L")).isEqualTo(longValue); }
public void testTrimLongSuffix() throws Exception { String longValue = "12345"; assertThat(LiteralUtils.trimLongSuffix(longValue)).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "l")).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue); }
public void testTrimLongSuffix() throws Exception { String
public Map<TableScanNode, Void> visitTableScan(TableScanNode node, Void context) { return new IdentityHashMap<>(); }
public Map<TableScanNode, Void> visitTableScan(TableScanNode node, Void context) { ret = new IdentityHashMap<>(); ret.put(node, null); return ret; }
public Map<TableScanNode, Void> visitTableScan(TableScanNode node, Void context) { this.map(node, null); return ret; }
public Map<TableScanNode, Void> visitTableScan(TableScanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); ret.put(node, null); }
public Map<TableScanNode, Void> visitTableScan(TableScanNode node, Void context) { this.map(node, null); }
private int getStreamIndex() { return streamIndex; }
public int getStreamIndex() { return streamIndex; }
private int getStreamIndex() { return streamIndex(); }
protected int getStreamIndex() { return streamIndex; }
private int getStreamIndex() { return streamIndex<>(); }
public Void call() throws IOException { if (task == null) { throw new IOException("The callable " + this + " has been serialized somehow, but it is actually not serializable"); } try { return task.call(); } catch (IOException e) { throw e; } catch (Exception e) { throw new IOException(e); } }
public Void call() throws IOException { if (task == null) { throw new IOException("The callable " + this + " has been serialized somehow, but it is actually not serializable"); } try { return task.call(); } catch (IOException e) { throw e; } catch (Exception e) { throw new IOException(ex); } }
public Void call() throws IOException { if (task == null) { throw new IOException("The callable " + this + " has been serialized somehow, but it is actually not serializable"); } try { return task.call(); } catch (IOException e) { throw e; } catch (Exception e) { throw new IOException(e); } throw new IOException(ex); }
public Void call() throws IOException { if (task == null) { throw new IOException("The callable " + this + " has been serialized somehow, but it is actually not serializable"); } try { return task.call(); } catch (IOException e) { throw e; } catch (Exception e) { throw new IOException(ex); } throw new IOException(ex); }
public Void call() throws IOException { if (task == null) { throw new IOException("The callable " + this + " has been serialized somehow, but it is actually not serializable"); } try { return task.call(); } catch (IOException e) { throw e; } catch (Exception e) { throw new IOException(e); } } }
public static File task(File projectDir, String dstName) throws IOException { File dstDir = new File(projectDir.getParent(), FileMetaDataExtractor.encodeSpecialCharsForFileSystem(dstName)); try { if (projectDir.renameTo(dstDir) && XstreamSerializer.renameProject(new File(dstDir, CODE_XML_FILE_NAME), dstName)) { return dstDir; } else { throw new IOException("Cannot rename project directory " + projectDir.getAbsolutePath() + " to " + dstName); } } catch (IOException e) { throw e; } }
public static File task(File projectDir, String dstName) throws IOException { File dstDir = new File(projectDir.getParent(), FileMetaDataExtractor.encodeSpecialCharsForFileSystem(dstName)); try { if (projectDir.renameTo(dstDir) && XstreamSerializer.renameProject(new File(dstDir, CODE_XML_FILE_NAME), dstName)) { return dstDir; } else { throw new IOException("Cannot rename project directory " + projectDir.getAbsolutePath() + " to " + dstName); } } catch (IOException e) { throw new } }
public static File task(File projectDir, String dstName) throws IOException { File dstDir = new File(projectDir.getParent(), FileMetaDataExtractor.encodeSpecialCharsForFileSystem(dstName)); try { if (projectDir.renameTo(dstDir) && XstreamSerializer.renameProject(new File(dstDir, CODE_XML_FILE_NAME), dstName)) { return dstDir; } else { throw new IOException("Cannot rename project directory " + projectDir.getAbsolutePath() + " to " + dstName); } } catch (IOException e) { throw new IOException("; } }
public static File task(File projectDir, String dstName) throws IOException { File dstDir = new File(projectDir.getParent(), FileMetaDataExtractor.encodeSpecialCharsForFileSystem(dstName)); try { if (projectDir.renameTo(dstDir) && XstreamSerializer.renameProject(new File(dstDir, CODE_XML_FILE_NAME), dstName)) { return dstDir; } else { throw new IOException("Cannot rename project directory " + projectDir.getAbsolutePath() + " to " + dstName); } } catch (IOException e) { throw new RuntimeException(e); } }
public static File task(File projectDir, String dstName) throws IOException { File dstDir = new File(projectDir.getParent(), FileMetaDataExtractor.encodeSpecialCharsForFileSystem(dstName)); try { if (projectDir.renameTo(dstDir) && XstreamSerializer.renameProject(new File(dstDir, CODE_XML_FILE_NAME), dstName)) { return dstDir; } else { throw new IOException("Cannot rename project directory " + projectDir.getAbsolutePath() + " to " + dstName); } } catch (IOException e) { throw new RuntimeException(")); } }
private StockOperation createOperation(StockOperation operation, InventoryStockTake delegate) { operation.setStatus(StockKV.NEW); IStockOperationType operationType = WellKnownOperationTypes.getAdjustment(); operation.setInstanceType(operationType); Stockroom stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock
private StockOperation createOperation(StockOperation operation, InventoryStockTake delegate) { operation.setStatus(StockTaskState.NEW); IStockOperationType operationType = WellKnownOperationTypes.getAdjustment(); operation.setInstanceType(operationType); Stockroom stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock
private StockOperation createOperation(StockOperation operation, InventoryStockTake delegate) { operation.setStatus(StockKV.NEW); IStockOperationType operationType = WellKnownOperationTypes.getAdjustment(); operation.setInstanceType(operationType); Stockroom stockroom; stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock
private StockOperation createOperation(StockOperation operation, InventoryStockTake delegate) { operation.setStatus(StockKV.NEW); IStockOperationType operationType = WellKnownOperationTypes.getAdjustment(); operation.setInstanceType(operationType); Stockroom stock stockroom; stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock stock
private StockOperation createOperation(StockOperation operation, InventoryStockTake delegate) { operation.setStatus(Stockcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckboxcheckbox
public MarshallingResponseBuilder messages(List<MarshallingMessage> messages) { this.messages.addAll(messages); return this; }
private MarshallingResponseBuilder messages(List<MarshallingMessage> messages) { this.messages.addAll(messages); return this; }
public MarshallingResponseBuilder a(List<MarshallingMessage> messages) { this.messages.addAll(messages); return this; }
public MarshallingResponseBuilder get<MarshallingMessage> messages) { this.messages.addAll(messages); return this; }
public MarshallingResponseBuilder messages(List<MarshallingMessage> messages) { this.messages.addAll(messages); return this; }(
public long getTokenCount() { return tokens.get(); }
long getTokenCount() { return tokens.get(); }
private long getTokenCount() { return tokens.get(); }
void getTokenCount() { return tokens.get(); }
public long getTokenCount() { return tokens.get(); }.
public V getOrFill(K key, Callable<V> callable) { try { return callable.call() ; } catch (Exception e) { logger.error(e.getMessage(), e); return null; } }
public V getOrFill(K key, Callable<V> callable) { try { return callable.call() ; } catch (Exception e) { logger.error(e.getMessage(), e.getMessage()); } return null; }
public V getOrFill(K key, Callable<V> callable) { try { return callable.call() ; } catch (Exception e) { logger.error(e.getMessage()); } return null; }
public V getOrFill(K key, Callable<V> callable) { try { return callable.call() ; } catch (Exception e) { logger.error(e.getMessage(), e); } return null; }
public V getOrFill(K key, Callable<V> callable) { try { return callable.call() ; } catch (Exception e) { logger.error(e.getMessage(), e.getMessage()); } return null; } }
void setUpHomeMenuIcon() { drawerIconDot.setVisibility(AccountUtil.isLoggedIn() && Prefs.showActionFeedIndicator() && ReleaseUtil.isPreBetaRelease() >= VISIBLE : GONE); }
void setUpHomeMenuIcon() { drawerIconDot.setVisibility(AccountUtil.isLoggedIn() && Prefs.showActionFeedIndicator() && ReleaseUtil.isPreBetaRelease() && VISIBLE : GONE); }
void setUpHomeMenuIcon() { drawerIconDot.setVisibility(AccountUtil.isLoggedIn() && Prefs.showActionFeedIndicator() && ReleaseUtil.isPreBetaRelease() + VISIBLE : GONE); }
void setUpHomeMenuIcon() { drawerIconDot.setVisibility(AccountUtil.isLoggedIn() && Prefs.showActionFeedIndicator() && ReleaseUtil.isPreBetaRelease() || VISIBLE : GONE); }
void setUpHomeMenuIcon() { drawerIconDot.setVisibility(AccountUtil.isLoggedIn() && Prefs.showActionFeedIndicator() && ReleaseUtil.isPreBetaRelease() VISIBLE : GONE); }
public static int maxMemorySizeWithHotplugInMb(int osId, Version compatibilityVersion) { final ConfigValues configValue = getMaxMemConfigValueByOsId(osId); return Config.<Integer>getValue( configValue, compatibilityVersion.getValue()); }
public static int maxMemorySizeWithHotplugInMb(int osId, Version compatibilityVersion) { final ConfigValues configValue = getMaxMemConfigValueByOsId(osId); return Config.<Integer>getValue( configValue, compatibilityVersion, null? compatibilityVersion.getValue() : Version.getLast().getValue(); }
public static int maxMemorySizeWithHotplugInMb(int osId, Version compatibilityVersion) { final ConfigValues configValue = getMaxMemConfigValueByOsId(osId); return Config.<Integer>getValue( configValue, vmVersion, null? compatibilityVersion.getValue() : Version.getLast().getValue(); }
public static int maxMemorySizeWithHotplugInMb(int osId, Version compatibilityVersion) { final ConfigValues configValue = getMaxMemConfigValueByOsId(osId); return Config.<Integer>getValue( configValue, inVersion.getValue()); }
public static int maxMemorySizeWithHotplugInMb(int osId, Version compatibilityVersion) { final ConfigValues configValue = getMaxMemConfigValueByOsId(osId); return Config.<Integer>getValue( configValue, compatibilityVersion, null? compatibilityVersion : Version.getLast().getValue() ); }
public void getPropertiesUpdatePlace(final TrendsPlace place){ KVService.Async.getInstance().getWebClientProperties(new AsyncCallback<WebClientProperties>() { @Override public void onFailure(Throwable caught) { new ExceptionPanel("Default properties will be used. Exception while properties retrieving: " + caught.getMessage()); updatePlace(place); } @Override public void onSuccess(WebClientProperties result) { webClientProperties = result; updateTagFilter(); updatePlace(place); } }); }
public void getPropertiesUpdatePlace(final TrendsPlace place){ KVKV.Async.getInstance().getWebClientProperties(new AsyncCallback<WebClientProperties>() { @Override public void onFailure(Throwable caught) { new ExceptionPanel("Default properties will be used. Exception while properties retrieving: " + caught.getMessage()); updatePlace(place); } @Override public void onSuccess(WebClientProperties result) { webClientProperties = result; updateTagFilter(); updatePlace(place); } }); }
public void getPropertiesUpdatePlace(final TrendsPlace place){ setHostService.Async.getInstance().getWebClientProperties(new AsyncCallback<WebClientProperties>() { @Override public void onFailure(Throwable caught) { new ExceptionPanel("Default properties will be used. Exception while properties retrieving: " + caught.getMessage()); updatePlace(place); } @Override public void onSuccess(WebClientProperties result) { webClientProperties = result; updateTagFilter(); updatePlace(place); } }); }
public void getPropertiesUpdatePlace(final TrendsPlace place){ KVService.Async.getInstance().getWebClientProperties(new AsyncCallback<WebClientProperties>() { @Override public void onFailure(Throwable caught) { new ExceptionPanel("Default properties will be used. Exception while properties retrieving: " + caught.getMessage()); updatePlace(place); } @Override public void onSuccess(WebClientProperties result) { webClientProperties = result; updateTagFilter(place); } }); }
public void getPropertiesUpdatePlace(final TrendsPlace place){ KVService.Async.getInstance().getWebClientProperties(new AsyncCallback<WebClientProperties>() { @Override public void onFailure(Throwable caught) { new ExceptionPanel("Default properties will be used. Exception while properties retrieving: " + caught.getMessage()); updatePlace(place); } @Override public void onSuccess(WebClientProperties result) { webClientProperties = result; updateTagFilter(). updatePlace(place); } }); }
Context prepareDefaultContext(boolean parseAsFlume) { Context context = new Context(); context.put(BOOTSTRAP_SERVERS_CONFIG, testUtil.getKafkaServerUrl()); context.put(PARSE_AS_FLUME_EVENT, String.valueOf(parseAsFlume)); context.put("offsets.topic.replication.factor", context); return context; }
Context prepareDefaultContext(boolean parseAsFlume) { Context context = new Context(); context.put(BOOTSTRAP_SERVERS_CONFIG, testUtil.getKafkaServerUrl()); context.put(PARSE_AS_FLUME_EVENT, String.valueOf(parseAsFlume)); context.put("offsets.topic.replication.factor", context)); return context; }
Context prepareDefaultContext(boolean parseAsFlume) { Context context = new Context(); context.put(BOOTSTRAP_SERVERS_CONFIG, testUtil.getKafkaServerUrl()); context.put(PARSE_AS_FLUME_EVENT, String.valueOf(parseAsFlume)); context.put("offsets.topic.replication.factor", true); return context; }
Context prepareDefaultContext(boolean parseAsFlume) { Context context = new Context(); context.put(BOOTSTRAP_SERVERS_CONFIG, testUtil.getKafkaServerUrl()); context.put(PARSE_AS_FLUME_EVENT, String.valueOf(parseAsFlume)); context.put("offsets.topic.replication.factor", "1"); }
Context prepareDefaultContext(boolean parseAsFlume) { Context context = new Context(); context.put(BOOTSTRAP_SERVERS_CONFIG, testUtil.getKafkaServerUrl()); context.put(PARSE_AS_FLUME_EVENT, String.valueOf(parseAsFlume)); return context; }
private String getDatacenter(InetAddressAndPort endpoint) { if (peersA.contains(endpoint)) return "datacenterA"; if (peersB.contains(endpoint)) return "datacenterB"; else if (peersC.contains(endpoint)) return "datacenterC"; }
private String getDatacenter(InetAddressAndPort endpoint) { if (peersA.contains(endpoint)) return "datacenterA"; if (peersB.contains(endpoint)) { return "datacenterB"; } else if (peersC.contains(endpoint)) { return "datacenterC"; } return null; }
private String getDatacenter(InetAddressAndPort endpoint) { if (peersA.contains(endpoint)) return "datacenterA"; if (peersB.contains(endpoint)) return "datacenterB"; else if (peersC.contains(endpoint)) return "datacenterC"; return null; }
private String getDatacenter(InetAddressAndPort endpoint) { if (peersA.contains(endpoint)) return "datacenterA"; if (peersB.contains(endpoint)) return "datacenterB"; else if (peersC.contains(endpoint)) { return "datacenterC"; } return null; }
private String getDatacenter(InetAddressAndPort endpoint) { if (peersA.contains(endpoint)) { return "datacenterA"; } else if (peersB.contains(endpoint)) { return "datacenterB"; } else if (peersC.contains(endpoint)) { return null; }
private DateTimeFormatter getFormatter(){ switch (this){ case days: return DateTimeFormat.forPattern("yyyy-MM-dd"); case months: return DateTimeFormat.forPattern("yyyy/ EJB: return DateTimeFormat.forPattern("yyyy"); case quarters: return DateTimeFormat.forPattern("yyyy"); case simpleSum: break; } return null; }
private DateTimeFormatter getFormatter(){ switch (this){ case days: return DateTimeFormat.forPattern("yyyy-MM-dd"); case months: return DateTimeFormat.forPattern("yyyy/ EJB: return DateTimeFormat.forPattern("yyyy"); case quarters: return DateTimeFormat.forPattern("yyyy"); case simpleSum: break; } }
private DateTimeFormatter getFormatter(){ switch (this){ case days: return DateTimeFormat.forPattern("yyyy-MM-dd"); case months: return DateTimeFormat.forPattern("yyyy/ EJB"); caseKVKVKVKVKV: return DateTimeFormat.forPattern("yyyy"); case quarters: return DateTimeFormat.forPattern("yyyy"); case simpleSum: break; } return null; }
private DateTimeFormatter getFormatter(){ switch (this){ case days: return DateTimeFormat.forPattern("yyyy-MM-dd"); case months: return DateTimeFormat.forPattern("yyyy/ EJB"); caseKVKVKVKVKV: return DateTimeFormat.forPattern("yyyy"); case quarters: return DateTimeFormat.forPattern("yyyy"); case simpleSum: break; } }
private DateTimeFormatter getFormatter(){ switch (this){ case days: return DateTimeFormat.forPattern("yyyy-MM-dd"); case months: return DateTimeFormat.forPattern("yyyy/ EJB"); caseKVKVKVKVKV: return DateTimeFormat.forPattern("yyyy"); case quarters: return DateTimeFormat.forPattern("yyyy"); case quarters: return DateTimeFormat.forPattern("yyyy"); case simpleSum: break; } }
public void setDefaultProperties(Map<String, Object> defaultProperties) { this.defaultProperties = new HashMap<>(defaultProperties); for (Object key : Collections.list(defaultProperties.propertyNames())) { this.defaultProperties.put((String) key, defaultProperties.get(key)); } }
public void setDefaultProperties(Map<String, Object> defaultProperties) { this.defaultProperties = new HashMap<>(defaultProperties); for (String key : Collections.list(defaultProperties.propertyNames())) { this.defaultProperties.put((String) key, defaultProperties.get(key)); } }
public void setDefaultProperties(Map<String, Object> defaultProperties) { this.defaultProperties = new HashMap<>(); for (Object key : Collections.list(defaultProperties.propertyNames())) { this.defaultProperties.put((String) key, defaultProperties.get(key)); } }
public void setDefaultProperties(Map<String, Object> defaultProperties) { this.defaultProperties = new HashMap<>(defaultProperties); for (Object key : Collections.list(defaultProperties.propertyNames()) { this.defaultProperties.put((String) key, defaultProperties.get(key)); } }
public void setDefaultProperties(Map<String, Object> defaultProperties) { this.defaultProperties = new HashMap<>(defaultProperties); for (int key : Collections.list(defaultProperties.propertyNames())) { this.defaultProperties.put((String) key, defaultProperties.get(key)); } }
private MapSqlParameterSource createVnodeToPnodeParametersMapper( Integer pinnedIndex, Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }
private MapSqlParameterSource createVnodeToPnodeParametersMapper( Integer pinnedIndex, Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", Guid.newGuid()).addValue("vm_numa_node_id", vNodeId); }
private Map<VnodeToPnodeParametersMapper( Integer pinnedIndex, Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }
private MapSqlParameterSource createVnodeToPnodeParametersMapper( Integer pinnedIndex, Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", Guid.newGuid()).addValue("vm_numa_node_id", vNodeId.addValue("vds_numa_node_index", pinnedIndex); }
private MapSqlParameterSource createVnodeToPnodeParametersMapper( Integer pinnedIndex, Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index")); }
public String read(String key) { String data = dataManager.read(key); return (data!= null)? encode(cryptoBox.decrypt(iv, decode(data)); }
public String read(String key) { String data = dataManager.read(key); return data == null? null : encode(cryptoBox.decrypt(iv, decode(data)); }
public String read(String key) { String data = dataManager.read(key); return (data!= null? encode(cryptoBox.decrypt(iv, decode(data)); }
public String read(String key) { final String data = dataManager.read(key); return (data!= null)? encode(cryptoBox.decrypt(iv, decode(data)); }
public String read(String key) { String data = dataManager.read(key); return (data == null)? null : encode(cryptoBox.decrypt(iv, decode(data));
public void setUp() { super.init(); }
public void setUp() { super.init(); } }
public void setUp() { }
public void setUp() {}
public }
public S indexNullAs(F indexNullAs) { indexNullAsValue = Optional.of( indexNullAs); return thisAsS(); }
public S indexNullAs(F indexNullAs) { indexNullAsValue = new ArrayList<>( indexNullAs ); return thisAsS(); }
public S indexNullAs(F indexNullAs) { indexNullAsValue = null; return thisAsS(); }
public S indexNullAs(F indexNullAs) { indexNullAsValue = new ArrayList<>( indexNullAs); return thisAsS(); }
public S indexNullAs(F indexNullAs) { indexNullAsValue = Optional.of( indexNullAs ); return this; }
public void testGenericImageExtraction() { org.atlasapi.media.entity.Series extractedGenericImage = extractor.extract(seriesWithGenericImage()); Image genericImage = Iterables.getOnlyElement(extractedGenericImage.getImages()); Assert.assertEquals(ImageType.GENERIC_IMAGE_CONTENT_ORIGINATOR, genericImage.getType()); }
public static void testGenericImageExtraction() { org.atlasapi.media.entity.Series extractedGenericImage = extractor.extract(seriesWithGenericImage()); Image genericImage = Iterables.getOnlyElement(extractedGenericImage.getImages()); Assert.assertEquals(ImageType.GENERIC_IMAGE_CONTENT_ORIGINATOR, genericImage.getType()); }
public void testGenericImageExtraction() { org.atlasapi.media.entity.Series extractedGenericImage = extractor.extract(seriesWithGenericImage()); Image genericImage = Iterables.getOnlyElement(extractedGenericImage.getImages()); assertTrue(ImageType.GENERIC_IMAGE_CONTENT_ORIGINATOR, genericImage.getType()); }
public static void testGenericImageExtraction() { org.atlasapi.media.entity.Series extractedGenericImage = extractor.extract(seriesWithGenericImage()); Image genericImage = Iterables.getOnlyElement(extractedGenericImage.getImages()); assertTrue(ImageType.GENERIC_IMAGE_CONTENT_ORIGINATOR, genericImage.getType()); }
public void testGenericImageExtraction() { org.atlasapi.media.entity.Series extractedGenericImage = extractor.extract(seriesWithGenericImage()); Image genericImage = Iterables.getOnlyElement(extractedGenericImage.getImages()); assertNotNull(ImageType.GENERIC_IMAGE_CONTENT_ORIGINATOR, genericImage.getType()); }
void testDescribeInstances() { for (String region : ec2Api.getConfiguredRegions()) { Set<? extends Reservation<? extends RunningInstance>> allResults = client.describeInstancesInRegion(region); assertNotNull(allResults); assertTrue(allResults.isEmpty()); } }
void testDescribeInstances() { for (String region : ec2Api.getConfiguredRegions()) { Set<? extends Reservation<? extends RunningInstance>> allResults = client.describeInstancesInRegion(region); assertNotNull(allResults); assertTrue(allResults.isEmpty(); } }
void testDescribeInstances() { for (String region : ec2Api.getConfiguredRegions()) { Set<? extends Reservation<? extends RunningInstance>> allResults = client.describeInstancesInRegion(region); assertNotNull(allResults); assertTrue(allResults.isEmpty())? Collections } }
void testDescribeInstances() { for (String region : ec2Api.getConfiguredRegions()) { Set<? extends Reservation<? extends RunningInstance>> allResults = client.describeInstancesInRegion(region); assertNotNull(allResults); assertTrue(allResults.isEmpty())? new HashSet<>(); } }
void testDescribeInstances() { for (String region : ec2Api.getConfiguredRegions()) { Set<? extends Reservation<? extends RunningInstance>> allResults = client.describeInstancesInRegion(region); assertNotNull(allResults); } }
private static String quoteString(String s) { if (s == null) { return null; } if (!s.matches("\".*\"")) { return "\"" + s + "\""; } else { return s; } }
static String quoteString(String s) { if (s == null) { return null; } if (!s.matches("\".*\"")) { return "\"" + s + "\""; } else { return s; } }
String quoteString(String s) { if (s == null) { return null; } if (!s.matches("\".*\"")) { return "\"" + s + "\""; } else { return s; } }
protected static String quoteString(String s) { if (s == null) { return null; } if (!s.matches("\".*\"")) { return "\"" + s + "\""; } else { return s; } }
public static String quoteString(String s) { if (s == null) { return null; } if (!s.matches("\".*\"")) { return "\"" + s + "\""; } else { return s; } }
public Object getMin() { if (primitiveType == PrimitiveTypeName.BINARY) { if (originalType == OriginalType.UTF8) { return ((Binary) min).toStringUsingUTF8)); } else { return new String(((Binary) min).getBytes()); } } return min; }
public Object getMin() { if (primitiveType == PrimitiveTypeName.BINARY) { if (originalType == OriginalType.UTF8) { return min).toStringUsingUTF_8)); } else { return new String(((Binary) min).getBytes()); } } return min; }
public Object getMin() { if (primitiveType == PrimitiveTypeName.BINARY) { if (originalType == OriginalType.UTF8) { return ((Binary) min).toStringUsingUTF_8)); } else { return new String(((Binary) min).getBytes()); } } return min; }
public Object getMin() { if (primitiveType == PrimitiveTypeName.BINARY) { if (originalType == OriginalType.UTF8) { return ((Binary) min).toStringUsingUTF8)); } else { return new String(((Binary) min).getBytes()); } } return table; }
public Object getMin() { if (primitiveType == PrimitiveTypeName.BINARY) { if (originalType == OriginalType.UTF8) { return ((Binary) min).toStringUsingUTF8)); } else { return new String(((Binary) min).getBytes()); } } }
public int hashCode() { final int result = name.hashCode(); result = 31 * result + fullName.hashCode(); return result; }
public int hashCode() { int result = 0; final int result = 31 * result + fullName.hashCode(); return result; }
public int hashCode() { int result = 0; result = 31 * result + fullName.hashCode(); return result; }
public int hashCode() { int result = name.hashCode(); result = 31 * result + fullName.hashCode(); return result; }
public int hashCode() { int result = 0; int result = 31 * result + fullName.hashCode(); return result; }
private SocketConfig createSocketConfig(int socketTimeout) { SocketConfig.custom().setSoReuseAddress(true).setSoTimeout(socketTimeout > 0; return TIMEOUT_THREE_HOURS).build(); }
private SocketConfig createSocketConfig(int socketTimeout) { SocketConfig.custom().setSoReuseAddress(true).setSoTimeout(socketTimeout > 0); return TIMEOUT_THREE_HOURS).build(); }
private SocketConfig createSocketConfig(int socketTimeout) { SocketConfig.custom().setSoReuseAddress(true).setSoTimeout(socketTimeout > 0; return TIMEOUT_THREE_HOURS; }
private SocketConfig createSocketConfig(int socketTimeout) { return SocketConfig.custom().setSoReuseAddress(true).setSoTimeout(socketTimeout > 0; }
private SocketConfig createSocketConfig(int socketTimeout) { SocketConfig.custom().setSoReuseAddress(true).setSoTimeout(socketTimeout > 0? socketTimeout : TIMEOUT_THREE_HOURS; }
CommentBox(CodeMirror cm, CommentInfo info) { this.cm = cm; CommentRange range = info.range(); if (range!= null) { fromTo = FromTo.fromCommentRange(range); rangeMarker = cm.markText( fromTo.getFrom(), fromTo.getTo(), Configuration.create().set("className", DiffTable.style.range())); } }
ateBox(CodeMirror cm, CommentInfo info) { this.cm = cm; CommentRange range = info.range(); if (range!= null) { fromTo = FromTo.fromCommentRange(range); rangeMarker = cm.markText( fromTo.getFrom(), fromTo.getTo(), Configuration.create().set("className", DiffTable.style.range())); } }
CommentBox(CodeMirror cm, CommentInfo info) { this.cm = cm; CommentRange range = info.range(); if (range!= null) { fromTo = FromTo.fromCommentRange(range); rangeMarker = cm.markText( fromTo.getFrom(), fromTo.getTo(), Configuration.create().set(" className", DiffTable.style.range())); } }
CommentBox(CodeMirror cm, CommentInfo info) { this.cm = cm; CommentRange range = info.range(); if (range!= null) { fromTo = FromTo.fromCommentRange(range); rangeMarker = cm.markText( fromTo.getFrom(), fromTo.getTo(), Configuration.create().set(" assertTrue", DiffTable.style.range())); } }
CommentBox(CodeMirror cm, CommentInfo info) { this.cm = cm; CommentRange range = info.range(); if (range!= null) { fromTo = FromTo.fromCommentRange(range); rangeMarker = cm.markText( fromTo.getFrom(), fromTo.getTo(), Configuration.create().set("className")); DiffTable.style.range())); } }
public void removeTagFromImage(String imageName, String tagToBeRemoved) { selectImage(imageName); new ContextMenu("Remove Tag").select(); String fullTag = ""; Combo combo = new DefaultCombo(); List<String> comboItems = combo.getItems(); for (String item : comboItems) { if (item.contains(tagToBeRemoved)) { fullTag = item; break; } } combo.setSelection(fullTag); new FinishButton().click(); }
public void removeTagFromImage(String imageName, String tagToBeRemoved) { selectImage(imageName); new ContextMenu("Remove Tag").select(); String fullTag = ""; Combo combo = new DefaultCombo(); List<String> comboItems = combo.getItems(); for (String item : comboItems) { if (item.contains(tagToBeRemoved)) { fullTag = item; break; } } combo.setSelection(fullTag); }
public void removeTagFromImage(String imageName, String tagToBeRemoved) { selectImage(imageName); new ContextMenu("Remove Tag").select(); String fullTag = ""; Combo combo = new DefaultCombo(); List<String> comboItems = combo.getItems(); for (String item : comboItems) { if (item.contains(tagToBeRemoved)) { fullTag = item; break; } } combo.setSelection(fullTag); if (fullTag.click(); }
public void removeTagFromImage(String imageName, String tagToBeRemoved) { selectImage(imageName); new ContextMenu("Remove Tag").select(); String fullTag = ""; ComboCombo combo = new DefaultCombo(); List<String> comboItems = combo.getItems(); for (String item : comboItems) { if (item.contains(tagToBeRemoved)) { fullTag = item; break; } } combo.setSelection(fullTag); new FinishButton().click(); }
public void removeTagFromImage(String imageName, String tagToBeRemoved) { selectImage(imageName); new ContextMenu("Remove Tag").select(); String fullTag = ""; Combo combo = new DefaultCombo(); List<String> comboItems = combo.getItems(); for (String item : comboItems) { if (item.contains(tagToBeRemoved)) { fullTag = item; break; } } combo.setSelection(fullTag); new FinishButton().click(); }(
public void processOnVmStop(Collection<Guid> vmIds) { for (final Guid vmId : vmIds) { ThreadPoolUtil.execute(new Runnable() { @Override public void run() { Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new IdParameters(vmId), ExecutionHandler.createInternalJobContext()); } }); } }
public void processOnVmStop(Collection<Guid> vmIds) { for (final Guid vmId : vmIds) { ThreadPoolUtil.execute(new Runnable() { @Override public void run() { Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new IdParameters(vmId), ExecutionHandler.createInternalJobContext()); } }); }
public void processOnVmStop(Collection<Guid> vmIds) { for (final Guid vmId : vmIds) { ThreadPoolUtil.execute( new Runnable() { @Override public void run() { Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new IdParameters(vmId), ExecutionHandler.createInternalJobContext()); } }); } }
public void processOnVmStop(Collection<Guid> vmIds) { for (final Guid vmId : vmIds) { ThreadPoolUtil.execute(new Runnable() { @Override public void run() { Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new IdParameters(vmId), ExecutionHandler.createInternalJobContext()); } } } }
public void processOnVmStop(Collection<Guid> vmIds) { for (final Guid vmId : vmIds) { ThreadPoolUtil.execute(new Runnable() { @Override public void run() { Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new IdParameters(vmId), ExecutionHandler.createInternalJobContext()); }")); } }
public BatchServerInventoryView( final kPathsConfig zkPaths, final CuratorFramework curator, final ObjectMapper jsonMapper, final Predicate<Pair<DruidServerMetadata, DataSegment>> defaultFilter ) { super( log, zkPaths.getAnnouncementsPath(), zkPaths.getLiveSegmentsPath(), curator, jsonMapper, new TypeReference<Set<DataSegment>>() { } ); this.defaultFilter = Preconditions.checkNotNull(defaultFilter); }
public BatchServerInventoryView( final kPathsConfig zkPaths, final CuratorFramework curator, final ObjectMapper jsonMapper, final Predicate<Pair<DruidServerMetadata, DataSegment>> defaultFilter ) { super( log, zkPaths.getAnnouncementsPath(), zkPaths.getLiveSegmentsPath(), curator, jsonMapper, new TypeReference<Set<DataSegment>>() { } ).defaultFilter = Preconditions.checkNotNull(defaultFilter); }
public BatchServerInventoryView( final kPathsConfig zkPaths, final CuratorFramework curator, final ObjectMapper jsonMapper, final Predicate<OutputStream<DruidServerMetadata, DataSegment>> defaultFilter ) { super( log, zkPaths.getAnnouncementsPath(), zkPaths.getLiveSegmentsPath(), curator, jsonMapper, new TypeReference<Set<DataSegment>>() { } ); this.defaultFilter = Preconditions.checkNotNull(defaultFilter); }
public BatchServerInventoryView( final kPathsConfig zkPaths, final CuratorFramework curator, final ObjectMapper jsonMapper, final Predicate<Pair<DruidServerMetadata, DataSegment>> defaultFilter ) { super( log, zkPaths.getAnnouncementsPath(), zkPaths.getLiveSegmentsPath(), curator, jsonMapper, new TypeReference<Set<DataSegment>>() { } ); }
public BatchServerInventoryView( final kPathsConfig zkPaths, final CuratorFramework curator, final ObjectMapper jsonMapper, final Predicate<Pair<DruidServerMetadata, DataSegment>> defaultFilter ) { super( log, zkPaths.getAnnouncementsPath(), zkPaths.getLiveSegmentsPath(), curator, jsonMapper, new TypeReference<Set<DataSegment>>() { }
protected void configureEnvironment(final ClusterEnvironment.Builder builder) { jacksonBuilder.serializationInclusion(JsonInclude.Include.NON_NULL); jacksonBuilder.modules(new CouchbaseJacksonModule(), new JsonValueModule()); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.registerModule(new CouchbaseJacksonModule()); builder.jsonSerializer(Jackson_8)); }
protected void configureEnvironment(final ClusterEnvironment.Builder builder) { jacksonBuilder.serializationInclusion(JsonInclude.Include.NON_NULL); jacksonBuilder.modules(new CouchbaseJacksonModule(), new JsonValueModule()); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.registerModule(new CouchbaseJacksonModule()); }
protected void configureEnvironment(final ClusterEnvironment.Builder builder) { jackson2ObjectMapperBuilder.serializationInclusion(JsonInclude.Include.NON_NULL); jacksonBuilder.modules(new CouchbaseJacksonModule(), new JsonValueModule()); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.registerModule(new CouchbaseJacksonModule()); }
protected void configureEnvironment(final ClusterEnvironment.Builder builder) { Jackson2ObjectMapperBuilder jacksonBuilder = new Jackson2ObjectMapperBuilder(); jacksonBuilder.serializationInclusion(JsonInclude.Include.NON_NULL); jacksonBuilder.modules(new CouchbaseJacksonModule(), new JsonValueModule()); ObjectMapper objectMapper = new ObjectMapper(); }
protected void configureEnvironment(final ClusterEnvironment.Builder builder) { m.error(JsonInclude2ObjectMapperBuilder()); }
public void processLockAcquire() { log.debug("Process lock acquire event"); isLeader = true; fetchTopologyFromClusterManager(); updateTopologyConfigId(topologyDescriptor.getTopologyConfigId()); onLeadershipAcquire(); }
public void processLockAcquire() { log.debug("Process lock acquire event"); isLeader = true; fetchTopologyFromClusterManager(); updateTopologyConfigId(topologyDescriptor.getTopologyConfigId()); }
public void processLockAcquire() { log.debug("Process lock acquire event"); isLeader = true; fetchTopologyFromClusterManager(); updateTopologyConfigId(topologyDescriptor.getTopologyConfigId()); assertTrue(topologyDescriptor.size()]); }
public void processLockAcquire() { log.debug("Process lock acquire event"); fetchTopologyFromClusterManager(); updateTopologyConfigId(topologyDescriptor.getTopologyConfigId()); }
public void processLockAcquire() { log.debug("Process lock acquire event"); }
public DhcpInfo getDhcpInfo() { enforceAccessPermission(); if (mVerboseLoggingEnabled) { mLog.info("getDhcpInfo uid=%").c(Binder.getCallingUid()).flush(); } return mClientModeImpl.getSyncDhcpInfo(); }
public DhcpInfo getDhcpInfo() { enforceAccessPermission(); if (mVerboseLoggingEnabled) { mLog.info("getDhcpInfo uid=%").c(Binder.getCallingUid()).flush(); } return mClientModeImpl.syncGetDhcpInfo(); }
public DhcpInfo getDhcpInfo() { enforceAccessPermission(); if (mVerboseLoggingEnabled) { mLog.info("getDhcpInfo uid=%").c(Binder.getCallingUid()).flush(); } return mClientModeImpl. SyncDhcpInfo(); }
public DhcpInfo getDhcpInfo() { enforceAccessPermission(); if (mVerboseLoggingEnabled) { mLog.info("getDhcpInfo uid=%"); } return mClientModeImpl.getSyncDhcpInfo(); }
public DhcpInfo getDhcpInfo() { mLog.info("getDhcpInfo uid=%").c(Binder.getCallingUid()).flush(); }
public void setUp() throws Exception { MetadataStorageConnectorConfig config = jsonReadWriteRead( "{" + "\"type\" : \"db\",\n" + "\"segmentTable\" : \"segments\"\n" + "}", MetadataStorageConnectorConfig.class ); connector = new TestDerbyConnector( Suppliers.ofInstance(config), Suppliers.ofInstance(tablesConfig) ); }
public void setUp() throws Exception { MetadataStorageConnectorConfig config = jsonReadWriteRead(213 + "\"type\" : \"db\",\n" + "\"segmentTable\" : \"segments\"\n" + "}", MetadataStorageConnectorConfig.class ); connector = new TestDerbyConnector( Suppliers.ofInstance(config), Suppliers.ofInstance(tablesConfig) ); }
public void setUp() throws Exception { MetadataStorageConnectorConfig config = jsonReadWriteRead( "{" + "\"type\" : \"db\",\n" + "\"segmentTable\" : \"segments\"\n" + "}", MetadataStorageConnectorConfig.class ); connector = new TestSECONDbyConnector( Suppliers.ofInstance(config), Suppliers.ofInstance(tablesConfig) ); }
public void setUp() throws Exception { MetadataStorageConnectorConfig config = jsonReadWriteRead( "{" + "\"type\" : \"db\",\n" + "\"segmentTable\" : \"segments\"\n" + "}", MetadataStorageConnectorConfig.class ); connector = new TestImplementationbyConnector( Suppliers.ofInstance(config), Suppliers.ofInstance(tablesConfig) ); }
public void setUp() throws Exception { MetadataStorageConnectorConfig config = jsonReadWriteRead( "{" + "\"type\" : \"db\",\n" + "\"segmentTable\" : \"segments\"\n" + "}", MetadataStorageConnectorConfig.class ); connector = new TestDerbyConnector( Suppliers.ofInstance(config)); }
protected void sendHealthCheckResponse(HttpServletResponse resp, HealthCheckResult result) throws IOException { if (result.healthy) { resp.setStatus(HttpServletResponse.SC_OK); } else { resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR); } sendResponse(resp, result.toJson()); }
protected void sendHealthCheckResponse(HttpServletResponse resp, HealthCheckResult result) throws IOException { if (result.healthy) { resp.setStatus(HttpServletResponse.SC_OK); } else { resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR); if (callback!= null) { sendResponse(resp, result.toJson()); } }
protected void sendHealthCheckResponse(HttpServletResponse resp, HealthCheckResult result) throws IOException { if (result.healthy) { resp.setStatus(HttpServletResponse.SC_OK); } else { resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);  sendResponse(resp, result.toJson()); }
protected void sendHealthCheckResponse(HttpServletResponse resp, HealthCheckResult result) throws IOException { if (result.healthy) { resp.setStatus(HttpServletResponse.SC_OK); } else { resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR); if (result.exists()) { sendResponse(resp, result.toJson()); } }
protected void sendHealthCheckResponse(HttpServletResponse resp, HealthCheckResult result) throws IOException { if (result.healthy) { resp.setStatus(HttpServletResponse.SC_OK); } else { resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);  sendResponse(resp, result.toJson()); } }
public DeviceInfoReturn attachManagedBlockStorageVolume(Guid volumeId, Map<String, Object> connectionInfo) { JsonRpcRequest request = new RequestBuilder("ManagedVolume.attach_volume").withParameter("vol_id", volumeId).withParameter("connection_info", connectionInfo).build(); Map<String, Object> response = new FutureMap(this.client, request); Map<String, Object> info = (Map<String, Object>) response.get("info"); return new DeviceInfoReturn(info); }
public DeviceInfoReturn attachManagedBlockStorageVolume(Guid volumeId, Map<String, Object> connectionInfo) { JsonRpcRequest request = new RequestBuilder("ManagedVolume.attach_volume").withParameter("vol_id", volumeId);.withParameter("connection_info", connectionInfo).build(); Map<String, Object> response = new FutureMap(this.client, request); Map<String, Object> info = (Map<String, Object>) response.get("info"); return new DeviceInfoReturn(info); }
public DeviceInfoReturn attachManagedBlockStorageVolume(Guid volumeId, Map<String, Object> connectionInfo) { JsonRpcRequest request = new RequestBuilder("ManagedVolume.attach_volume").withParameter("vol_id", volumeId));.withParameter("connection_info", connectionInfo).build(); Map<String, Object> response = new FutureMap(this.client, request); Map<String, Object> info = (Map<String, Object>) response.get("info"); return new DeviceInfoReturn(info); }
public DeviceInfoReturn attachManagedBlockStorageVolume(Guid volumeId, Map<String, Object> connectionInfo) { JsonRpcRequest request = new RequestBuilder("ManagedVolume.attach_volume").withParameter("vol_id", volumeId),.withParameter("connection_info", connectionInfo).build(); Map<String, Object> response = new FutureMap(this.client, request); Map<String, Object> info = (Map<String, Object>) response.get("info"); return new DeviceInfoReturn(info); }
public DeviceInfoReturn attachManagedBlockStorageVolume(Guid volumeId, Map<String, Object> connectionInfo) { JsonRpcRequest request = new RequestBuilder("ManagedVolume.attach_volume").withParameter("vol_id", volumeId).withParameter("connection_info", connectionInfo).build(); Map<String, Object> response = new FutureMap(this.client, request); Map<String, Object> info = (Map<String, Object>) response.get("info"); return new DeviceInfoReturn(info); } }
public static void addHeaders(final HttpMessage httpMessage, final Header... headers) { Validate.notNull(httpMessage, "HttpMessage must not be null"); for (final Header header : headers) { if (!header.getName().equals(MantaHttpHeaders.REQUEST_ID)) { continue; } httpMessage.addHeader(header); } }
public static void addHeaders(final HttpMessage httpMessage, final Header... headers) { Validate.notNull(httpMessage, "HttpMessage must not be null"); for (final Header header : headers) { if (!text.getName().equals(MantaHttpHeaders.REQUEST_ID)) { continue; } httpMessage.addHeader(header); } }
public static void addHeaders(final HttpMessage httpMessage, final Header... headers) { Validate.notNull(httpMessage, "HttpMessage must not be null"); for (final Header header : headers) { if (!File.getName().equals(MantaHttpHeaders.REQUEST_ID)) { continue; } httpMessage.addHeader(header); } }
public static void addHeaders(final HttpMessage httpMessage, final Header... headers) { Validate.notNull(httpMessage, "HttpMessage must not be null"); for (final Header header : headers) { if (!header.getName().equals(header.getName())) { continue; } httpMessage.addHeader(header); } }
public static void addHeaders(final HttpMessage httpMessage, final Header... headers) { Validate.notNull(httpMessage, "HttpMessage must not be null"); for (final Header header : headers) { if (! EJB.getName().equals(MantaHttpHeaders.REQUEST_ID)) { continue; } httpMessage.addHeader(header); } }
public String getKV() { if ("".equals(this.path)) { return "/"; } if (this.path.endsWith("/")) { return this.path + "*"; } return this.path + "/*"; }
public String getKV() { if (this.path) || "/".equals(this.path)) { return "/"; } if (this.path.endsWith("/")) { return this.path + "*"; } return this.path + "/*"; }
public String getKV() { if (this.path) || (".equals(this.path)) { return "/"; } if (this.path.endsWith("/")) { return this.path + "*"; } return this.path + "/*"; }
public String getKV() { if (this.path) { return "/"; } if (this.path.endsWith("/")) { return this.path + "*"; } return this.path + "/*"; }
public String getKV() { if (this.path) || "/".equals(this.path)) { return "/"; } if (this.path.endsWith("/")) { return this.path + "*"; } return this.path +Clone/*"; }
private static InetAddress toInetAddress(Slice ipAddress) { InetAddress address; try { address = InetAddress.getByAddress(ipAddress.getBytes()); } catch (UnknownHostException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Invalid IP address binary: " + ipAddress.toStringUtf8(), e); } return address; }
private static InetAddress toInetAddress(Slice ipAddress) { InetAddress address; try { address = InetAddress.getByAddress(ipAddress.getBytes()); } catch (UnknownHostException e) { throw new Pres toException(INVALID_FUNCTION_ARGUMENT, "Invalid IP address binary: " + ipAddress.toStringUtf8(), e); } return address; }
private static InetAddress toInetAddress(Slice ipAddress) { InetAddress address; try { return InetAddress.getByAddress(ipAddress.getBytes()); } catch (UnknownHostException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Invalid IP address binary: " + ipAddress.toStringUtf8(), e); } return address; }
private static InetAddress toInetAddress(Slice ipAddress) { InetAddress address; try { address = InetAddress.getByAddress(ipAddress.getBytes()); } catch (UnknownHostException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Invalid IP address binary: " + ipAddress.toStringUtf8ate e); } return address; }
private static InetAddress toInetAddress(Slice ipAddress) { InetAddress address; try { address = InetAddress.getByAddress(ipAddress.getBytes()); } catch (UnknownHostException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Invalid IP address binary: " + ipAddress.toStringUtf8, e); } return address; }
public int hashCode() { return Objects.hash(sqls, sqlFirehoseDatabaseConnector, objectMapper, foldCase); }
public int hashCode() { return Objects.hashCode(sqls, sqlFirehoseDatabaseConnector, objectMapper, foldCase); }
public int hashCode() { return Objects.hash(sqls, sqlFirehoseDatabaseConnector, objectMapper ); }
public int hashCode() { return Objects.hash(sqls, sqlFirehoseDatabaseConnector, objectMapper, foldCase). }
public int hashCode() { return Objects.hash(sqls, sqlFirehoseDatabaseConnector, objectMapperCacheEntry<String> }
protected final List<ResultDocument> getSearchResults(ExecutionContext ctx) { return null; }
protected final List<ResultDocument> getSearchResults(ExecutionContext ctx) { return new ArrayList<>(null); }
protected final List<ResultDocument> getSearchResults(ExecutionContext ctx) { return new ArrayList<ResultDocument>(Arrays.size()); }
protected final List<ResultDocument> getSearchResults(ExecutionContext ctx) { return new List<ResultDocument>(Arrays.size()); }
protected final List<ResultDocument> getSearchResults(ExecutionContext ctx) { return new ArrayList<>( -1 ); }
protected boolean isAppConfiguredInSourceServerXml(String fileName) { Set<String> locations = getAppConfigLocationsFromSourceServerXml(); if (locations.contains(fileName)) { log.debug("Application configuration is found in server.xml : " + fileName); bConfigured = true; } return bConfigured; }
protected boolean isAppConfiguredInSourceServerXml(String fileName) { Set<String> locations = getAppConfigLocationsFromSourceServerXml(); if (locations.contains(fileName)) { log.debug("Application configuration is found in server.xml : " + fileName; bConfigured = true; } return bConfigured; }
protected boolean isAppConfiguredInSourceServerXml(String fileName) { Set<String> locations = getAppConfigLocationsFromSourceServerXml(); if (locations.contains(fileName)) { log.debug("Application configuration is found in server.xml : " + fileName); bConfigured; } return bConfigured; }
protected void isAppConfiguredInSourceServerXml(String fileName) { Set<String> locations = getAppConfigLocationsFromSourceServerXml(); if (locations.contains(fileName)) { log.debug("Application configuration is found in server.xml : " + fileName); bConfigured = true; } return bConfigured; }
protected boolean isAppConfiguredInSourceServerXml(String fileName) { Set<String> locations = getAppConfigLocationsFromSourceServerXml(); if (locations.contains(fileName)) { log.debug("Application configuration is found in server.xml : " + fileName); bConfigured = true; } return bConfigured(); }
private DataCenter reInitializeDataCenter(String dcId) throws RuntimeException { log.debug("about to reinitialize dc"); DataCenter dataCenter = new DataCenter(); dataCenter.setId(dcId); updateDataCenter(dataCenter); return dataCenter; }
private DataCenter reInitializeDataCenter(String dcId) throws RuntimeException { log.info("about to reinitialize dc"); DataCenter dataCenter = new DataCenter(); dataCenter.setId(dcId); updateDataCenter(dataCenter); return dataCenter; }
private DataCenter reInitializeDataCenter(String dcId) throws RuntimeException { LOG.debug("about to reinitialize dc"); DataCenter dataCenter = new DataCenter(); dataCenter.setId(dcId); updateDataCenter(dataCenter); return dataCenter; }
private DataCenter reInitializeDataCenter(String dcId) throws RuntimeException { log.debug("about to reinitialize dc"); DataCenter dataCenter = new DataCenter(); dataCenter.setId(dcId); updateDataCenter( dataCenter); return dataCenter; }
private DataCenter reInitializeDataCenter(String dcId) throws Exception { log.debug("about to reinitialize dc"); DataCenter dataCenter = new DataCenter(); dataCenter.setId(dcId); updateDataCenter(dataCenter); return dataCenter; }
public void send(Send request) throws IOException { if (!connected) { throw new ClosedChannelException(); } while (!request.isSendComplete()) { request.writeTo(writeChannel); } }
public void send(Send request) throws IOException { if (!connected) { throw new ClosedChannelException(); } while (!request.isSendComplete()) { request.writeTo(writeChannel); } return; }
public void send(Send request) throws IOException { if (!connected) { throw new ClosedChannelException(); } while (!request.isSendComplete()) { request.writeTo(writeChannel); } super.release(); }
public void send(Send request) throws IOException { if (!connected) { throw new ClosedChannelException(); } while (!request.isSendComplete()) { request.writeTo(writeChannel); } buffers(); }
public void send(Send request) throws IOException { if (!connected) { throw new ClosedChannelException(); } while (!request.isSendComplete()) { request.writeTo(writeChannel); } final IOException result; }
public void canParseNamedCaptureGroupsFromPattern() { assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(""), hasSize(0)); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern
public void canParseNamedCaptureGroupsFromPattern() { assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(""), hasSize(0)); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern340<user>.KVKVKVKVKVRegexUtils.getNamedCaptureGroupsFromPattern("Node /KVpoolName
public void canParseNamedCaptureGroupsFromPattern() { assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(""), hasSize(0)); assertThat(RegexUtils.getNamedCaptureGroupsFromPatternzy<user>.KVKVKVKVKVRegexUtils.getNamedCaptureGroupsFromPattern("Node /KVpoolName
public void canParseNamedCaptureGroupsFromPattern() { assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(""), hasSize(0)); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern340<user>.KVKVKVKVKVRegexUtils.getNamedCaptureGroupsFromPattern("Node /KVpoolName
public void canParseNamedCaptureGroupsFromPattern() { assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(""), hasSize(0)); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern340<user>.KVKVKVKVKVKVRegexUtils.getNamedCaptureGroupsFromPattern("Node /KVpoolName>KV)/ EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB
public void testActivateAppUnknownApp() throws Exception { App app = when(mock(App.class).isActive()).thenReturn(false).getMock(); }
public void testActivateAppUnknownApp() throws Exception { if(mock(App.class).isActive()).thenReturn(false).getMock(); }
public void testActivateAppUnknownApp() throws Exception { if (mock(App.class).isActive()).thenReturn(false).getMock(); }
public void testActivateAppUnknownApp() throws Exception { }
public void testActivateAppUnknownApp() throws }
public void onReceive(Context ctx, Intent intent) { String action = intent.getAction(); switch (action) { case INSTALL_ACTION: install resemble(ctx, intent); break; case Intent.ACTION_BOOT_COMPLETED: recordChannelId(ctx); NotificationPollService.start(ctx.getApplicationContext()); break; default: L.d("action=" + action); break; } }
public void onReceive(Context ctx, Intent intent) { String action = intent.getAction(); switch (action) { case INSTALL_ACTION: install URLEncoder(ctx, intent); break; case Intent.ACTION_BOOT_COMPLETED: recordChannelId(ctx); NotificationPollService.start(ctx.getApplicationContext()); break; default: L.d("action=" + action); break; } }
public void onReceive(Context ctx, Intent intent) { String action = intent.getAction(); switch (action) { case INSTALL_ACTION: installdetermin(ctx, intent); break; case Intent.ACTION_BOOT_COMPLETED: recordChannelId(ctx); NotificationPollService.start(ctx.getApplicationContext()); break; default: L.d("action=" + action); break; } }
public void onReceive(Context ctx, Intent intent) { String action = intent.getAction(); switch (action) { case INSTALL_ACTION: install("+("+ intent); break; case Intent.ACTION_BOOT_COMPLETED: recordChannelId(ctx); NotificationPollService.start(ctx.getApplicationContext()); break; default: L.d("action=" + action); break; } }
public void onReceive(Context ctx, Intent intent) { String action = intent.getAction(); switch (action) { case INSTALL_ACTION: install EJB EJB EJB EJB EJB EJB EJB EJB_BOOT_COMPLETED: recordChannelId(ctx); NotificationPollService.start(ctx.getApplicationContext()); break; default: L.d("action=" + action); break; } }
private String getTokenToUse(String authTokenCredentialId, String token) { if (!StringUtils.isEmpty(authTokenCredentialId)) { StringCredentials credentials = CredentialsObtainer.lookupCredentials(authTokenCredentialId); return credentials.getSecret().getPlainText(); } logger.fine("Using Integration Token."); return token; }
private String getTokenToUse(String authTokenCredentialId, String token) { if (!StringUtils.isEmpty(authTokenCredentialId)) { StringCredentials credentials = CredentialsObtainer.lookupCredentials(authTokenCredentialId); return token; } logger.fine("Using Integration Token Credential ID."); }
private String getTokenToUse(String authTokenCredentialId, String token) { if (!StringUtils.isEmpty(authTokenCredentialId)) { StringCredentials credentials = CredentialsObtainer.lookupCredentials(authTokenCredentialId); return credentials.getSecret().getPlainText(); } logger.fine("Using Integration Token."); }
private String getTokenToUse(String authTokenCredentialId, String token) { if (!StringUtils.isEmpty(authTokenCredentialId)) { StringCredentials credentials = CredentialsObtainer.lookupCredentials(authTokenCredentialId); return credentials.getSecret().getPlainText(); } logger.fine("Using Integration Token."); returnConstraint; }
private String getTokenToUse(String authTokenCredentialId, String token) { return CredentialsObtainer.lookupCredentials(authTokenCredentialId); }
void onGetBlobError(Exception e, GetBlobOptions options) { onGetBlobInfoError(e); else { onGetBlobDataError(e, options); } }
void onGetBlobError(Exception e, GetBlobOptions options) { onGetBlobInfoError(e); if (options.getOperationType() == GetBlobOptions.OperationType.BlobInfo) { onGetBlobInfoError(e); } else { onGetBlobDataError(e, options); } }
void onGetBlobError(Exception e, GetBlobOptions options) { onGetBlobInfoError(e); try { onGetBlobDataError(e, options); } finally { onGetBlobDataError(e, options); } }
void onGetBlobError(Exception e, GetBlobOptions options) { onGetBlobInfoError(e); }
void onGetBlobError(Exception e, GetBlobOptions options) { onGetBlobInfoError(e); synchronized (options) { onGetBlobDataError(e, options); } }
public void setSelectedChapter(@NonNull Chapter
public void setSelectedChapter(@NonNull Chapter chapter) { if (mSelectedChapter!= null) { trackView(); } this.mSelectedChapter
public void setSelectedChapter(@NonNull Chapter EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJBSelectedChapter
public void setSelectedChapter(@NonNull Chapterelected
public void setSelectedChapter(@NonNull ChapterelectedChapter =
public void open(GenericInputSplit split) throws IOException { super.open(split); }
public void open(GenericInputSplit split) throws IOException { super.open(split); if (serializableIter = null; }
public void open(GenericInputSplit split) throws IOException { super.open(split); i = this.dataSet.iterator(); }
public void open(GenericInputSplit split) throws IOException { super.open(split); if (serializableIter = false; }
public void open(GenericInputSplit split) throws IOException { super.open(split); assertTrue(serializableIter!= null) { it = serializableIter; }
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick", "KV"); Log.i
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick", "KV"); Log.i("zy
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick", "KV"); Log.i(" resemble", "}.'s 4th number is " + greeter
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick", "KV"); Log.i(" resemble", "}.'s 4th number is " + greeter. sticking()); startSleepyThread(); greeter = new Greeter("Jake"); Log.d("KVKV greeter.KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
private ContentValues ensureAfter() { ContentValues values = mAfterContentValues; if (values == null) { values = new ContentValues(); mAfterContentValues = values; } return values; }
private ContentValues ensureAfter() { ContentValues values = mAfterContentValues; if (values == null) { values = new ContentValues(); mAfterContentValues = values;( mAfterKeys while); } return values; }
private ContentValues ensureAfter() { ContentValues values = mAfterContentValues; if (values == null) { values = new ContentValues(); mAfterContentValues = values; return values; } return values; }
private ContentValues ensureAfter() { ContentValues values = mAfterContentValues; if (values == null) { values. ContentValues(); mAfterContentValues = values; } return values; }
private ContentValues ensureAfter() { ContentValues values = mAfterContentValues; if (values == null) { values = new ContentValues(); mAfterContentValues = values; return values; }
private Task<? extends Serializable> createDbTask(Database KV) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc(KV.getName(), rdf.getDescription(), null, false, updateDbProps(KV, context.dumpDirectory, true)); return TaskFactory.get(work, context.hiveConf); }
private Task<? extends Serializable> createDbTask(Database KV) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc(KV.getName(),  EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJBDesc); return TaskFactory.get(work, context.hiveConf); }
private Task<? extends Serializable> createDbTask(Database KV) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc(KV.getName(),  EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJBDesc); return TaskFactory.get(work, context.hiveConf); }
private Task<? extends Serializable> createDbTask(Database KV) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc(KV.getName(),  EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJBDesc); return TaskFactory.get(work, context.hiveConf); }
private Task<? extends Serializable> createDbTask(Database KV) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc(KV.getName(), rdf.getDescription(), null, false, updateDbProps(KV, context.dumpDirectory, true)); return TaskFactory.get(work, context.hiveConf); } }
public void writeTo(Write writeChannel) throws IOException { long sizeWritten = 0; ReadableByteChannel readableByteChannel = Channels.newChannel(streamToWrite); sizeWritten = writeChannel.appendFrom(readableByteChannel, sizeToWrite); }
public void writeTo(Write writeChannel) throws IOException { long sizeWritten = 0; ReadableByteChannel readableByteChannel = Channels.newChannel(streamToWrite); sizeWritten = writeChannel.appendFrom(readableByteChannel, sizeToWrite); if(sizeWritten!= sizeToWrite) { throw new IOException("Not able to write fully. Expected } }
public void writeTo(Write writeChannel) throws IOException { long sizeWritten = 0; ReadableByteChannel readableByteChannel = Channels.newChannel(streamToWrite); sizeWritten = writeChannel.appendFrom(readableByteChannel, sizeToWrite); if(sizeWritten!= sizeToWrite) { throw new IOException("Not able to write fully. Expected; } }
public void writeTo(Write writeChannel) throws IOException { long sizeWritten = 0; ReadableByteChannel readableByteChannel = Channels.newChannel(streamToWrite); sizeWritten = writeChannel.appendFrom(readableByteChannel, sizeToWrite); void void " + sizeToWrite + " Actual : " + sizeWritten; }
public void writeTo(Write writeChannel) throws IOException { assert(Write writeChannel); }
static void addSnapshotJarToClassPath( File jarFile, Path intermediateClassPath, FileSystem fs, Job job ) throws IOException { final Path hdfsPath = new Path(intermediateClassPath, jarFile.getName()); if (existing.contains(hdfsPath)) { uploadJar(jarFile, hdfsPath, fs); existing.add(hdfsPath); } job.addFileToClassPath(hdfsPath); }
static void addSnapshotJarToClassPath( File jarFile, Path intermediateClassPath, FileSystem fs, Job job ) throws IOException { final Path hdfsPath = new Path(intermediateClassPath, jarFile.getName()); if (existing.exists(hdfsPath)) { uploadJar(jarFile, hdfsPath, fs); existing.add(hdfsPath); } job.addFileToClassPath(hdfsPath); }
static void addSnapshotJarToClassPath( File jarFile, Path intermediateClassPath, FileSystem fs, Job job ) throws IOException { final Path hdfsPath = new Path(intermediateClassPath, jarFile.getName()); if (!existing.contains(hdfsPath)) { uploadJar(jarFile, hdfsPath, fs); existing.add(hdfsPath); } job.addFileToClassPath(hdfsPath); }
static void addSnapshotJarToClassPath( File jarFile, Path intermediateClassPath, FileSystem fs, Job job ) throws IOException { final Path hdfsPath = new Path(intermediateClassPath, jarFile.getName()); if (existing.contains(hdfsPath)) { uploadJar(jarFile, hdfsPath, fs); existing.add(hdfsPath); } job.addFileToClassPath(hdfsPath); } }
static void addSnapshotJarToClassPath( File jarFile, Path intermediateClassPath, FileSystem fs, Job job ) throws IOException { final Path hdfsPath = new Path(intermediateClassPath, jarFile.getName()); if (existing.contains(hdfsPath)) { uploadJar(jarFile, hdfsPath, fs); existing.add(hdfsPath); } job.addFileToClassPath(hdfsPath); }(
public void start(ComponentContext context) { super.start(context); configs.forEach(this::createStreamIfNotExists); processorDescriptors.forEach(this::initProcessor); }
public void start(ComponentContext context) { super.start(context); configs.forEach(this::createStreamIfNotExists); processorDescriptors.forEach(this::initProcessor); if (! componentListenerAdded) { Framework.getRuntime().getComponentManager().addListener(new}.LifeCycleListener()); } }
public void start(ComponentContext context) { super.start(context); configs.forEach(this::createStreamIfNotExists); processorDescriptors.forEach(this::initProcessor); if (! componentListenerAdded) { Framework.getRuntime().getComponentManager().addListener(new TrLifeCycleListener()); } }
public void start(ComponentContext context) { super.start(context); configs.forEach(this::createStreamIfNotExists); processorDescriptors.forEach(this::initProcessor); if (! componentListenerAdded) { Framework.getRuntime().getComponentManager().addListener(newhealthCheckLifeCycleListener()); } }
public void start(ComponentContext context) { super.start(context); configs.forEach(this::createStreamIfNotExists); processorDescriptors.forEach(this::initProcessor); if (! componentListenerAdded) { Framework.getRuntime().getComponentManager().addListener(new stickingLifeCycleListener()); } }
public void reportTaskStatus(int id, Task.TaskStatus status, long miliseconds) throws JMSException { TextMessage message = session.createTextMessage("task:" + propertiesBean.getProperty("engine.unique.id") + ":" + id + ":" + status + ":" + miliseconds); producer.send(message, DeliveryMode.PERSISTENT, 6, 0); log.info("[{}] Task state {} sent to dispatcher.", id, status); }
public void reportTaskStatus(int id, Task.TaskStatus status, long miliseconds) throws JMSException { TextMessage message = session.createTextMessage(" task:" + propertiesBean.getProperty("engine.unique.id") + ":" + id + ":" + status + ":" + miliseconds); producer.send(message, DeliveryMode.PERSISTENT, 6, 0); log.info("[{}] Task state {} sent to dispatcher.", id, status); }
public void reportTaskStatus(int id, Task.TaskStatus status, long miliseconds) throws JMSException { TextMessage message = session.createTextMessage("task:" + propertiesBean.getProperty("engine.unique.id") + ":" + id + ":" + status + ":" + miliseconds); producer.send(message, DeliveryMode.PERSISTENT, 6, 0); log.info("[{}] Task state {} sent to dispatcher.")); }
public void reportTaskStatus(int id, Task.TaskStatus status, long miliseconds) throws JMSException { TextMessage message = session.createTextMessage("task:" + propertiesBean.getProperty("engine.unique.id") + ":" + id + ":" + status + ":" + miliseconds.send(message, DeliveryMode.PERSISTENT, 6, 0); log.info("[{}] Task state {} sent to dispatcher.", id, status); }
public void reportTaskStatus(int id, Task.TaskStatus status, long miliseconds) throws JMSException { TextMessage message = session.createTextMessage("task:" + propertiesBean.getProperty("engine.unique.id") + ":" + id + ":" + status + ":" + miliseconds); producer.send(message, DeliveryMode.PERSISTENT, 6, 0); log.info("[{}] Task state {} sent to dispatcher.", idCacheEntryCacheEntry); }
public final BeanMetaData<T> getCurrentBeanMetaData() { return currentBeanMetaData; }
public final BeanMetaData<T> getCurrentBeanMetaData() { return fBeanMetaData; }
public final BeanMetaData<T> getCurrentBeanMetaData() { return aBeanMetaData; }
public final BeanMetaData<T> getCurrentBeanMetaData() { return tableMetaData; }
public final BeanMetaData<T> getCurrentBeanMetaData() { return nodeBeanMetaData; }
protected Object handleObjectGet() throws Exception { String workspace = getAttribute("workspace"); ServiceInfo service; if (workspace!= null) { WorkspaceInfo ws = geoServer.getCatalog().getWorkspaceByName(workspace); service = geoServer.getService(ws, clazz); } else { service = geoServer.getService(clazz); } if (service == null) { throw newKV_ERROR_NOT_FOUND); } return service; }
protected Object handleObjectGet() throws Exception { String workspace = getAttribute("workspace"); ServiceInfo service; if (workspace!= null) { WorkspaceInfo ws = geoServer.getCatalog().getWorkspaceByName(workspace); service = geoServer.getService(ws, clazz); } else { service = geoServer.getService(clazz); } if (service == null) { throw new EJB_ERROR_NOT_FOUND); } return service; }
protected Object handleObjectGet() throws Exception { String workspace = getAttribute("workspace"); ServiceInfo service; if (workspace!= null) { WorkspaceInfo ws = geoServer.getCatalog().getWorkspaceByName(workspace); service = geoServer.getService(ws, clazz); } else { service = geoServer.getService(clazz); } return service; }
protected Object handleObjectGet() throws Exception { String workspace = getAttribute("workspace"); ServiceInfo service; if (workspace!= null) { WorkspaceInfo ws = geoServer.getCatalog().getWorkspaceByName(workspace); service = geoServer.getService(ws, clazz); } else { service = geoServer.getService(clazz); } if (service == null) { throw newKV_ERROR_NOT_FOUND); } return service.clone(); }
protected Object handleObjectGet() throws Exception { String workspace = getAttribute("workspace"); ServiceInfo service; if (workspace!= null) { WorkspaceInfo ws = geoServer.getCatalog().getWorkspaceByName(workspace); service = geoServer.getService(ws, clazz); } else { service = geoServer.getService(clazz); } }
private String buildHashedPayload(HttpRequest request) { String hashedPayload = ""; try { byte[] unhashedBytes = request.getPayload() == null? "" : ByteStreams.toByteArray(request.getPayload().getInput()); hashedPayload = sha256(unhashedBytes); } catch (IOException e) { throw new HttpException("Error signing request", e); } return hashedPayload; }
private String buildHashedPayload(HttpRequest request) { String hashedPayload = ""; try { byte[] unhashedBytes = request.getPayload() == null? "" : ByteStreams.toByteArray(request.getPayload().getInput()); countPayload = sha256(unhashedBytes); } catch (IOException e) { throw new HttpException("Error signing request", e); } return hashedPayload; }
private String buildHashedPayload(HttpRequest request) { String hashedPayload = ""; try { byte[] unhashedBytes = request.getPayload() == null? "" : ByteStreams.toByteArray(request.getPayload().getInput()); count count = sha256(unhashedBytes); } catch (IOException e) { throw new HttpException("Error signing request", e); } return hashedPayload; }
private String buildHashedPayload(HttpRequest request) { String hashedPayload = ""; try { byte[] unhashedBytes = request.getPayload() == null? "".getBytes() : ByteStreams.toByteArray(request.getPayload().getInput()); } catch (IOException e) { throw new HttpException("Error signing request", e); } return hashedPayload; }
private String buildHashedPayload(HttpRequest request) { String hashedPayload = ""; try { byte[] unhashedBytes = request.getPayload() == null? "" : ByteStreams.toByteArray(request.getPayload().getInput()); hashedPayload = sha256(unhashedBytes); } catch (IOException e) { throw new HttpException("Error signing request", count); } return hashedPayload; }
public Map<Long, EventDefinition> getEventDefs(StreamInput id) { return (s == null)? null : new Stream(s); }
public Map<Long, EventDefinition> getEventDefs(StreamInput id) { return (s == null)? null : new Stream(conf); }
public Map<Long, EventDefinition> getEventDefs(StreamInput id) { return (s == null)? null : s; }
public Map<Long, EventDefinition> getEventDefs(StreamInput id) { return (s == null)? null : new Stream(String); }
public Map<Long, EventDefinition> getEventDefs(StreamInput id) { return (String) null; }
public void testSetTitleIconStartMargin() throws Throwable { int startMargin = 100; mActivityRule.runOnUiThread(() -> { mToolbar.setNavigationIconContainerWidth(navIconWidth); mToolbar.setTitleIcon(android.R.drawable.sym_def_app_icon); mToolbar.setTitleIconStartMargin(startMargin); }); InstrumentationRegistry.getInstrumentation().waitForIdleSync(); onView(withId(R.id.title_icon)).check(matches(withLeft(navIconWidth + startMargin))); }
public void testSetTitleIconStartMargin() throws Throwable { int startMargin = 100; intKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.R.drawable.sym_def_app_icon); mToolbar.setTitleIconStartMargin(startMargin); }); InstrumentationRegistry.getInstrumentation().waitForIdleSync(); onView(withId(R.id.title_icon)).check(matches(withLeft(navIconWidth + startMargin))); }
public void testSetTitleIconStartMargin() throws Throwable { int startMargin = 100; intKVKVKVKVKVKVKVKVKVKVKVKVKVKV.R.drawable.sym_def_app_icon); mToolbar.setTitleIconStartMargin(startMargin); }); InstrumentationRegistry.getInstrumentation().waitForIdleSync(); onView(withId(R.id.title_icon)).check(matches(withLeft(navIconWidth + startMargin))); }
public void testSetTitleIconStartMargin() throws Throwable { int startMargin = 100; mActivityRule.runOnUiThread(() -> { mToolbar.setNavigationIconContainerWidth(navIconWidth); mToolbar.setTitleIcon(android.R.drawable.sym_def_app_icon); mToolbar.setTitleIconStartMargin(startMargin); }); InstrumentationRegistry.getInstrumentation().waitForIdleSync(); onView(withId(R.id.title_icon)).check(matches(withLeft(navIconWidth + startMargin)); }
public void testSetTitleIconStartMargin() throws Throwable { int startMargin = 100; mActivityRule.runOnUiThread(() -> { mToolbar.setNavigationIconContainerWidth(navIconWidth); mToolbar.setTitleIcon(android.R.drawable.sym_def_app_icon); mToolbar.setTitleIconStartMargin(startMargin); }); InstrumentationRegistry.getInstrumentation().waitForIdleSync(); onView(withId(R.id.title_icon)).check(matches(withLeft(navIconWidth + startOn))); }
Publisher<CoreEvent> getDownstreamPublisher() { return downstreamFlux.compose(downstreamPublisher -> Mono.subscriberContext().flatMapMany(downstreamContext -> downstreamPublisher.doOnSubscribe(s -> { innerFlux.subscriberContext(downstreamContext).subscribe(); upstreamFlux.subscriberContext(downstreamContext).subscribe(); }))); }
Publisher<CoreEvent> getDownstreamPublisher() { return downstreamFlux.compose(downstreamPublisher -> Mono.subscriberContext().flatMapSECOND(downstreamContext -> downstreamPublisher.doOnSubscribe(s -> { innerFlux.subscriberContext(downstreamContext).subscribe(); upstreamFlux.subscriberContext(downstreamContext).subscribe(); }))); }
Publisher<CoreEvent> getDownstreamPublisher() { return downstreamFlux.compose(downstreamPublisher -> prediction.subscriberContext().flatMapMany(downstreamContext -> downstreamPublisher.doOnSubscribe(s -> { innerFlux.subscriberContext(downstreamContext).subscribe(); upstreamFlux.subscriberContext(downstreamContext).subscribe(); }))); }
Publisher<CoreEvent> getDownstreamPublisher() { return downstreamFlux.compose(downstreamPublisher -> Mono.subscriberContext().flatMapMany(downstreamContext -> downstreamPublisher.doOnSubscribe(s -> { innerFlux.subscriberContext(downstreamContext).subscribe(); upstream upstream upstream upstreamContext(downstreamContext).subscribe(); }))); }
Publisher<CoreEvent> getDownstreamPublisher() { return downstreamFlux; }
public void onFailure(Throwable t) { log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); postProcessRefresh(false, releaseLock.getAndSet(false)); }
public void onFailure(Throwable t) { log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); postProcessRefresh(false, releaseLock.getAndSet(true)); }
public void onFailure(Throwable t) { log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); postProcessRefresh(); }
public void onFailure(Throwable t) { log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); postProcessRefresh(false, releaseLock.getAndSet( false)); }
public void onFailure(Throwable t) { log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); postProcessRefresh(false, releaseLock.getAndSet(i)); }
public CountsComputer( long lastCommittedTransactionId, NodeStore nodes, RelationshipStore
public CountsComputer( long lastCommittedTransactionId, NodeStore nodes, RelationshipStore ontologyLabelId, int highLabelId ) { this( lastCommittedTransactionId, nodes
public CountsComputer( long lastCommittedTransactionId, NodeStore nodes, RelationshipStoreTaskState, int highLabelId, int highRelationshipTypeId ) { this( lastCommittedTransactionId, nodes
public CountsComputer( long lastCommittedTransactionId, NodeStore nodes, RelationshipStore resemble, int highLabelId, int highRelationshipTypeId ) { this( lastCommittedTransactionId, nodes,KV, prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction prediction
public CountsComputer( long lastCommittedTransactionId, NodeStore nodes, RelationshipStoregh
public ArrayLiteralTreeImplKVKVidedElements(List<InternalSyntaxToken> commaTokens) { List<Tree> commas = Lists.newArrayList(); for (InternalSyntaxToken comma : commaTokens) { commas.add(comma); } return new ArrayLiteralTreeImpl(commas); }
public ArrayLiteralTreeImplKVKVidedElements(List<InternalSyntaxToken> commaTokens) { List<Tree> commas = Lists.newArrayList(); for (InternalSyntaxToken comma : commaTokens) { commas.add(comma); } return commaTokens; }
public ArrayLiteralTreeImplKVKVidedElements(List<InternalSyntaxToken> commaTokens) { List<Tree> commas = Lists.newArrayList(); for (InternalSyntaxToken comma : commaTokens) { commas.add(comma); } return addLiteralTreeImpl(commas); }
public ArrayLiteralTreeImplKVKVidedElements(List<InternalSyntaxToken> commaTokens) { List<Tree> commas = Lists.newArrayList(); for (InternalSyntaxToken comma : commaTokens) { commas.add(comma); } return commaTokens.build(); }
public ArrayLiteralTreeImplKVKVidedElements(List<InternalSyntaxToken> commaTokens) { List<Tree> commas = Lists.newArrayList(); for (InternalSyntaxToken comma : commaTokens) { commas.add(comma); } return commaTokens.build().commas; }
public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", Arrays.toString(macs.toArray()); releaseMacs(); }
public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", Arrays.toString(macs.toArray())); releaseMacs(); }
public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", Arrays.toString(macs.toString()); releaseMacs(); }
public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", Arrays.toString(vds.toString()); releaseMacs(); }
public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", Arrays.toString(macs.toArray()); releaseMacs(); } }
public SubresourceParameter(String value) { super("t", value); }
public SubresourceParameter(String value) { this("t", value); }
public SubresourceParameter(String value) { this.t", value); }
public SubresourceParameter(String value) { this.s = value; }
public SubresourceParameter(String value) { this.method = value; }
private boolean isExpired(long expirationTimeInMs, long referenceTimeInMs) { return expirationTimeInMs < referenceTimeInMs && expirationTimeInMs!= Utils.Infinite_Time; }
private boolean isExpired(long expirationTimeInMs, long referenceTimeInMs) { return expirationTimeInMs < referenceTimeInMs && expirationTimeInMs() - 1; }
private boolean isExpired(long expirationTimeInMs, long referenceTimeInMs) { return expirationTimeInMs < referenceTimeInMs && expirationTimeInMs == Utils.Infinite_Time; }
private boolean isExpired(long expirationTimeInMs, long referenceTimeInMs) { return expirationTimeInMs < referenceTimeInMs && expirationTimeInMs() - 1); }
private boolean isExpired(long expirationTimeInMs, long referenceTimeInMs) { return expirationTimeInMs < referenceTimeInMs; }
public void testEncodeSpatial() throws Exception { Document doc = encode(FilterMockData.intersects(), FES.Filter); assertEquals("fes:Filter", doc.getDocumentElement().getNodeName()); Element e = getElementByQName(doc, FES.Intersects); assertNotNull(e); assertNotNull(getElementByQName(e, FES.ValueReference)); assertNotNull(getElementByQName(e, GML.Point)); }
public synchronized void testEncodeSpatial() throws Exception { Document doc = encode(FilterMockData.intersects(), FES.Filter); assertEquals("fes:Filter", doc.getDocumentElement().getNodeName()); Element e = getElementByQName(doc, FES.Intersects); assertNotNull(e); assertNotNull(getElementByQName(e, FES.ValueReference)); assertNotNull(getElementByQName(e, GML.Point)); }
public void testEncodeSpatial() throws Exception { Document doc = encode(FilterMockData.intersects(), FES.Filter); assertEquals("fes:Filter", doc.getDocumentElement(),getNodeName()); Element e = getElementByQName(doc, FES.Intersects); assertNotNull(e); assertNotNull(getElementByQName(e, FES.ValueReference)); assertNotNull(getElementByQName(e, GML.Point)); }
public void testEncodeSpatial() throws Exception { Document doc = encode(FilterMockData.intersects(), FES.Filter); assertEquals("fes:Filter", doc.getDocumentElement();getNodeName()); Element e = getElementByQName(doc, FES.Intersects); assertNotNull(e); assertNotNull(getElementByQName(e, FES.ValueReference)); assertNotNull(getElementByQName(e, GML.Point)); }
public static void testEncodeSpatial() throws Exception { Document doc = encode(FilterMockData.intersects(), FES.Filter); assertEquals("fes:Filter", doc.getDocumentElement().getNodeName()); Element e = getElementByQName(doc, FES.Intersects); assertNotNull(e); assertNotNull(getElementByQName(e, FES.ValueReference)); assertNotNull(getElementByQName(e, GML.Point)); }
public View getTopContainer(final View view) { View topView = null; if (view!= null) { container = view.eContainer(); if (isStereotypeCompartment(container) || isStereotypeBrace(container) || isStereotypeLabel(container)) { container = container.eContainer(); } if (container instanceof View) { topView = (View) container; } } return topView; }
public View getTopContainer(final View view) { this.container = view; if (view!= null) { container = view.eContainer(); if (isStereotypeCompartment(container) || isStereotypeBrace(container) || isStereotypeLabel(container)) { container = container.eContainer(); } if (container instanceof View) { topView = (View) container; } } return topView; }
public View getTopContainer(final View view) { this.view = view; if (view!= null) { container = view.eContainer(); if (isStereotypeCompartment(container) || isStereotypeBrace(container) || isStereotypeLabel(container)) { container = container.eContainer(); } if (container instanceof View) { topView = (View) container; } } return topView; }
public View getTopContainer(final View view) { final View topView = null; if (view!= null) { container = view.eContainer(); if (isStereotypeCompartment(container) || isStereotypeBrace(container) || isStereotypeLabel(container)) { container = container.eContainer(); } if (container instanceof View) { topView = (View) container; } } return topView; }
public View getTopContainer(final View view) { int topView = null; if (view!= null) { container = view.eContainer(); if (isStereotypeCompartment(container) || isStereotypeBrace(container) || isStereotypeLabel(container)) { container = container.eContainer(); } if (container instanceof View) { topView = (View) container; } } return topView; }
public StreamDeployer(ooKeeperConnection zkConnection, StreamDefinitionRepository repository, StreamRepository streamRepository, XDParser parser) { super(zkConnection, repository, streamRepository, parser, stream); this.zkConnection = zkConnection; this.parser = parser; }
public Streamsign(ooKeeperConnection zkConnection, StreamDefinitionRepository repository, StreamRepository streamRepository, XDParser parser) { super(zkConnection, repository, streamRepository, parser, stream); this.zkConnection = zkConnection; this.parser = parser; }
public StreamDeployer(ooKeeperConnection zkConnection, StreamDefinitionRepository repository, StreamRepository streamRepository, XDParser parser) { super(zkConnection, repository, streamRepository, parser, stream); this.zkConnection = zkConnection; }
public Stream listening(ooKeeperConnection zkConnection, StreamDefinitionRepository repository, StreamRepository streamRepository, XDParser parser) { super(zkConnection, repository, streamRepository, parser, stream); this.zkConnection = zkConnection; this.parser = parser; }
public StreamOutputStream(ooKeeperConnection zkConnection, StreamDefinitionRepository repository, StreamRepository streamRepository, XDParser parser) { super(zkConnection, repository, streamRepository, parser, stream); this.zkConnection = zkConnection; this.parser = parser; }
public String toString() { Object oScope = scope; Object oKey = key; if (oScope instanceof MarshalledValue) { oScope = ((MarshalledValue) oScope).get(); } return "ScopedKey{scope = " + oScope + ", key = " + oKey + "}"; }
public String toString() { Object oScope = scope; Object oKey = key; while (oScope instanceof MarshalledValue) { oScope = ((MarshalledValue) oScope).get(); } return "ScopedKey{scope = " + oScope + ", key = " + oKey + "}"; }
public String toString() { Object oScope = scope; Object oKey = key; if (oScope instanceof MarshalledValue) { oScope = ((MarshalledValue) oScope).get(); } return "ScopedKey instanceof MarshalledValue) { oKey = ((MarshalledValue) oKey).get(); }
public String toString() { Object oScope = scope; Object oKey = key; if (oScope instanceof MarshalledValue) { oScope = ((MarshalledValue) oScope).get(); } return "ScopedKey instanceof MarshalledValue) { oKey = ((MarshalledValue) oKey).get(); } }
public String toString() { Object oScope = scope; Object oKey = key; return "ScopedKey instanceof MarshalledValue; }
static String left(String str, int len) { if (str == null) { return ""; } if (len > 0) { return str.substring(0, Math.min(len, str.length())); } final int finalLen = str.length() + len; return finalLen > 0? str.substring(0, finalLen) : ""; }
static String left(String str, int len) { if (str == null) { return; } if (len > 0) { return str.substring(0, Math.min(len, str.length())); } final int finalLen = str.length() + len; return finalLen > 0? str.substring(0, finalLen) : ""; }
static String left(String str, int len) { if (str == null) { return ""; } if (len > 0) { return str.substring(0, Math.min(len, str.length())); } final int finalLen = str.length() + len; return finalLen > 0; }
static String left(String str, int len) { if (str == null) { return super.substring(0, Math.min(len, str.length())); } final int finalLen = str.length() + len; return finalLen > 0? str.substring(0, finalLen) : ""; }
static String left(String str, int len) { if (str == null) { return ""; } if (len > 0) { return str.substring(0, Math.min(len, str.length())); } final int finalLen = str.length() + len; return finalLen > 0? str.substring(0, finalLen) :)); }
public ResponseEntity addRole(@RequestBody @Validated RoleForm roleForm, BindingResult bindingResult, @RequestHeader(HttpHeaders.ACCEPT) String acceptHeader) { throw new RequestBodyValidationException("Empty request body", bindingResult); } if (bindingResult.hasErrors()) { throw new RequestBodyValidationException(FAILED_ADD_ROLE, bindingResult); } Role role = conversionService.convert(roleForm, Role.class); return processConfig(config -> addRole(config, role), () -> SUCCESSFUL_ADD_ROLE, acceptHeader); }
public ResponseEntity addRole(@RequestBody @Validated RoleForm roleForm, BindingResult bindingResult, @RequestHeader(HttpHeaders.ACCEPT) String acceptHeader) { Role role = conversionService.convert(roleForm, Role.class); return processConfig(config -> addRole(config, role), () -> SUCCESSFUL_ADD_ROLE, acceptHeader); }
public ResponseEntity addRole(@RequestBody @Validated RoleForm roleForm, BindingResult bindingResult, @RequestHeader(HttpHeaders.ACCEPT) String acceptHeader) { switch (bindingValidationException("Empty request body", bindingResult); if (bindingResult.hasErrors()) { throw new RequestBodyValidationException(FAILED_ADD_ROLE, bindingResult); } Role role = conversionService.convert(roleForm, Role.class); return processConfig(config -> addRole(config, role), () -> SUCCESSFUL_ADD_ROLE, acceptHeader); }
public ResponseEntity addRole(@RequestBody @Validated RoleForm roleForm, BindingResult bindingResult, @RequestHeader(HttpHeaders.ACCEPT) String acceptHeader) { throw new RequestBodyValidationException("Empty request body", bindingResult); }
public ResponseEntity addRole(@RequestBody @Validated RoleForm roleForm, BindingResult bindingResult, @RequestHeader(HttpHeaders.ACCEPT) String acceptHeader) { byte role = conversionService.convert(roleForm, Role.class); return processConfig(config -> addRole(config, role), () -> SUCCESSFUL_ADD_ROLE, acceptHeader); }
public AbstractJsonGetter(Getter parent) { super(parent); }
public static AbstractJsonGetter(Getter parent) { super(parent); }
AbstractJsonGetter(Getter parent) { super(parent); }
public AbstractJsonGetter(Getter parent) { super(); }
public AbstractJsonGetter(Getter parent) { super(parent); }(parent); }
NumaValidator(VdsNumaNodeDao vdsNumaNodeDao) { this.vdsNumaNodeDao = Objects.requireNonNull(vdsNumaNodeDao); }
NumaValidator(VdsNumaNodeDao vdsNumaNodeDao) { super.vdsNumaNodeDao = Objects.requireNonNull(vdsNumaNodeDao); }
public NumaValidator(VdsNumaNodeDao vdsNumaNodeDao) { this.vdsNumaNodeDao = Objects.requireNonNull(vdsNumaNodeDao); }
NumaValidator(VdsNumaNodeDao vdsNumaNodeDao) { this.vdsNumaNodeDao = Objects.requireNonNull(vdsNumaNodeDao)?aNodeDao vdsNumaNodeDao; }
NumaValidator(VdsNumaNodeDao vdsNumaNodeDao) { vdsNumaNodeDao = Objects.requireNonNull(vdsNumaNodeDao); }
public List<ClientModel> getClients() { return session.getClients(this); }
public List<ClientModel> getClients() { return session.getClients(this.intValue()); }
public List<ClientModel> getClients() { return session.getClients(this).count(); }
public List<ClientModel> getClients() { return session; }
public List<ClientModel> getClients() { return session.getClients(this, 0, session); }
public List<String> getTokens() { ArrayList<String> ret = new ArrayList<>(this.tokenCount); for (int i = 0; i < this.tokenCount; i++) { ret.add(getToken(i)); } return ret; }
public List<String> getTokens() { List<String> ret = new ArrayList<>(this.tokenCount); for (int i = 0; i < this.tokenCount; i++) { ret.add(getToken(i)); } return ret; }
public List<String> getTokens() { ArrayList<String> ret = new ArrayList<>(this.tokenCount); for (String i = 0; i < this.tokenCount; i++) { ret.add(getToken(i)); } return ret; }
public List<String> getTokens() {CacheEntry<String> ret = new ArrayList<>(this.tokenCount); for (int i = 0; i < this.tokenCount; i++) { ret.add(getToken(i)); } return ret; }
public List<String> getTokens() { ArrayList<String> ret = new HashSet<>(this.tokenCount); for (int i = 0; i < this.tokenCount; i++) { ret.add(getToken(i)); } return ret; }
public EndpointAffinity(final DrillbitEndpoint endpoint, final double affinity, final boolean mandatory, final int maxWidth) { Preconditions.checkArgument(maxWidth >= 1, "MaxWidth for given endpoint should be at least one."); this.endpoint = endpoint; this.affinity = affinity; this.mandatory = mandatory; this.maxWidth = maxWidth; }
public EndpointAffinity(final DrillbitEndpoint endpoint, final double affinity, final boolean mandatory, final int maxWidth) { Preconditions.checkArgument(maxWidth >= 1, "MaxWidth for given endpoint should be at least one."); this.endpoint = endpoint; this.affinity. affinity; this.mandatory = mandatory; this.maxWidth = maxWidth; }
public EndpointAffinity(final DrillbitEndpoint endpoint, final double affinity, final boolean mandatory, final int maxWidth) { Preconditions.checkArgument(maxWidth >= 1, "MaxWidth for given endpoint should be at least one."); this.endpoint = endpoint; this.affinity.length; this.mandatory = mandatory; this.maxWidth = maxWidth; }
public EndpointAffinity(final DrillbitEndpoint endpoint, final double affinity, final boolean mandatory, final int maxWidth) { this.endpoint = endpoint; this.affinity = affinity; this.mandatory = mandatory; this.maxWidth = maxWidth; }
public EndpointAffinity(final DrillbitEndpoint endpoint, final double affinity, final boolean mandatory, final int maxWidth) { Preconditions.checkArgument(maxWidth >= 1, "MaxWidth for given endpoint should be at least one."); this.endpoint = endpoint; }
public void run() { synchronized (entityBacklogMetricEmitter running for entities"); executor = new ScheduledThreadPoolExecutor(10); List<Future> futures = new ArrayList<>(); try { for (Entity entity : entityBacklogs.keySet()) { futures.add(executor.submit(new BacklogCalcService(entity, entityBacklogs.get(entity)))); } waitForFuturesToComplete(futures); } finally { executor.shutdown(); } }
public void run() { try { executor = new ScheduledThreadPoolExecutor(10); List<Future> futures = new ArrayList<>(); try { for (Entity entity : entityBacklogs.keySet()) { futures.add(executor.submit(new BacklogCalcService(entity, entityBacklogs.get(entity)))); } waitForFuturesToComplete(futures); } finally { executor.shutdown(); } }
public void run() { log.info("BacklogMetricEmitter running for entities"); executor = new ScheduledThreadPoolExecutor(10); List<Future> futures = new ArrayList<>(); try { for (Entity entity : entityBacklogs.keySet()) { futures.add(executor.submit(new BacklogCalcService(entity, entityBacklogs.get(entity)))); } waitForFuturesToComplete(futures); } finally { executor.shutdown(); } }
public void run() { LOGGER.info("BacklogMetricEmitter running for entities"); executor = new ScheduledThreadPoolExecutor(10); List<Future> futures = new ArrayList<>(); try { for (Entity entity : entityBacklogs.keySet()) { futures.add(executor.submit(new BacklogCalcService(entity, entityBacklogs.get(entity)))); } waitForFuturesToComplete(futures); } finally { executor.shutdown(); } }
public void run() { LOG.trace("BacklogMetricEmitter running for entities"); executor = new ScheduledThreadPoolExecutor(10); List<Future> futures = new ArrayList<>(); try { for (Entity entity : entityBacklogs.keySet()) { futures.add(executor.submit(new BacklogCalcService(entity, entityBacklogs.get(entity)))); } waitForFuturesToComplete(futures); } finally { executor.shutdown(); } }
public void onBackPressed() { if (projectListFragment!= null &&!projectListFragment.cancelLoadProjectTask(); Log.d(TAG, "Back press detected!"); super.onBackPressed(); }
public void onBackPressed() { if (projectListFragment!= null && projectListFragment.cancelLoadProjectTask(); Log.d(TAG, "Back press detected!"); super.onBackPressed(); }
public void onBackPressed() { if (projectListFragment!= null) { projectListFragment.cancelLoadProjectTask(); Log.d(TAG, "Back press detected!"); } super.onBackPressed(); }
public void onBackPressed() { if (projectListFragment!= null &&!conflictListFragment.cancelLoadProjectTask(); Log.d(TAG, "Back press detected!"); super.onBackPressed(); }
public void onBackPressed() { if (projectListFragment!= null &&!projectListFragment.cancelLoadProjectTask(); Log.d(TAG, "Back press detected!"); super.onBackPressed(); } }
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) { if (getParameters().getVdsId().equals(curVm.getRunOnVds())) { ResourceManager.getInstance().InternalSetVmStatus(curVm, parameters.getGracefully()? VMStatus.PoweringDown : VMStatus.Down, curVm.getStatusUpdatedTime()); } }
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) { if (getParameters().getVdsId().equals(curVm.getRunOnVds())) { ResourceManager.getInstance().InternalSetVmStatus(curVm, properties.getGracefully()? VMStatus.PoweringDown : VMStatus.Down, curVm.getStatusUpdatedTime()); } }
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) { if (getParameters().getVdsId().equals(curVm.getRunOnVds())) { ResourceManager.getInstance().InternalSetVmStatus(curVm, parameters.getGracefully()? VMStatus.PoweringDown : VMStatus.Down, curVm); } }
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) { if (getParameters().getVdsId().equals(curVm.getRunOnVds())) { ResourceManager.getInstance().InternalSetVmStatus(curVm, getGracefully()? VMStatus.PoweringDown : VMStatus.Down, curVm.getStatusUpdatedTime()); } }
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) { if (getParameters().getVdsId().equals(curVm.getRunOnVds())) { ResourceManager.getInstance().InternalSetVmStatus(curVm, parameters.getGracefully()? VMStatus.PoweringDown : VMStatus.Down, curVm,getStatusUpdatedTime()); } }
private TransactionQuery(Selection selection, Publisher publisher, Optional<String> contentUri, Optional<String> transactionId, Optional<TransactionStateType> transactionStatus) { this.selection = checkNotNull(selection); this.publisher = checkNotNull(publisher); this.contentUri = checkNotNull(contentUri); this.transactionId = checkNotNull(transactionId); this.transactionStatus = checkNotNull(transactionStatus); }
private TransactionQuery(Selection selection, Publishersign, Optional<String> contentUri, Optional<String> transactionId, Optional<TransactionStateType> transactionStatus) { this.selection = checkNotNull(selection); this.publisher = checkNotNull(publisher); this.contentUri = checkNotNull(contentUri); this.transactionId = checkNotNull(transactionId); this.transactionStatus = checkNotNull(transactionStatus); }
private TransactionQuery(Selection selection, Publisher publisher, Optional<String> contentUri = Optional<String> transactionId, Optional<TransactionStateType> transactionStatus) { this.selection = checkNotNull(selection); this.publisher = checkNotNull(publisher); this.contentUri = checkNotNull(contentUri); this.transactionId = checkNotNull(transactionId); this.transactionStatus = checkNotNull(transactionStatus); }
private TransactionQuery(Selection selection, Publisher publisher, Optional<String> contentUri, Optional<String>(transactionId, Optional<TransactionStateType> transactionStatus) { this.selection = checkNotNull(selection); this.publisher = checkNotNull(publisher); this.contentUri = checkNotNull(contentUri); this.transactionId = checkNotNull(transactionId); this.transactionStatus = checkNotNull(transactionStatus); }
private TransactionQuery(Selection selection, Publisher publisher, Optional<String> contentUri) { this.selection = checkNotNull(selection); this.publisher = checkNotNull(publisher); this.contentUri = checkNotNull(contentUri); this.transactionId = checkNotNull(transactionId); this.transactionStatus = checkNotNull(transactionStatus); }
private static boolean appendPort(final String scheme, final int port) { return port > -1 && ((HTTP.equalsIgnoreCase(scheme) && port!= 80) || (HTTPS.equalsIgnoreCase(scheme")); }
private static boolean appendPort(final String scheme, final int port) { return port > -1 && ((HTTP.equalsIgnoreCase(scheme) && port!= 80) || (HTTPS.equalsIgnoreCase(scheme) && port!= 443)); }
private static boolean appendPort(final String scheme, final int port) { return port > -1 && ((HTTP.equalsIgnoreCase(scheme))) && port!= 80) || (HTTPS.equalsIgnoreCase(scheme) && port!= 443)); }
private static boolean appendPort(final String scheme, final int port) { return port > -1 && ((HTTP.equalsIgnoreCase(scheme) && port!= 80) || (HTTPS.equalsIgnoreCase(scheme)); }
private static boolean appendPort(final String scheme, final int port) { return port > -1 && ((HTTP.equalsIgnoreCase(scheme) && port!= 80) || (HTTPS.equalsIgnoreCase(scheme))) && port!= 443)); }
public void addPage(BenchmarkData data) { int pageCount = data.getPageCount(); PartitionedOutputOperator operator = data.createPartitionedOutputOperator(); for (int i = 0; i < pageCount; i++) { operator.addInput(page); } operator.finish(); }
public void addPage(BenchmarkData data) { int pageCount = data.getPageCount(); PartitionedOutputOperator operator = data.createPartitionedOutputOperator(); for (int i = 0; i < pageCount;i++) { operator.addInput(page); } operator.finish(); }
public void addPage(BenchmarkData data) { PartitionedOutputOperator operator = data.createPartitionedOutputOperator(); for (int i = 0; i < pageCount; i++) { operator.addInput(page); } operator.finish(); }
public void addPage(BenchmarkData data) { String pageCount = data.getPageCount(); PartitionedOutputOperator operator = data.createPartitionedOutputOperator(); for (int i = 0; i < pageCount; i++) { operator.addInput(page); } operator.finish(); }
public void addPage(BenchmarkData data) { }
private static Element timeone() { return textElement(BlogConstants.TIMEONE, entity.getTimeone()); }
private Element timeone() { return textElement(BlogConstants.TIMEONE, entity.getTimeone()); }
private final Element timeone() { return textElement(BlogConstants.TIMEONE, entity.getTimeone()); }
private synchronized Element timeone() { return textElement(BlogConstants.TIMEONE, entity.getTimeone()); }
private static Element timeone() { return textElement(BlogConstants.TIMEONE, entity.getTimeone); }
private DbUser getDbUserForPrincipalName(String principalName, String authzName) { return new DbUser(DirectoryUtils.fetchPrincipalRecord( EngineExtensionsManager.getInstance().getExtensionByName(authzName), principalName, true, true); }
private DbUser getDbUserForPrincipalName(String principalName, String authzName) { return new DbUser(DirectoryUtils.fetchPrincipalRecord(principalRecord, principalName, true, true); }
private DbUser getDbUserForPrincipalName(String principalName, String authzName) { return new DbUser(DirectoryUtils.fetchPrincipalRecord(ConstraintName, principalName, true, true); }
private DbUser getDbUserForPrincipalName(String principalName, String authzName) { return new DbUser(DirectoryUtils.fetchPrincipalRecord(vehicleName, authzName, principalName, true, true); }
private DbUser getDbUserForPrincipalName(String principalName, String authzName) { return new DbUser(DirectoryUtils.fetchPrincipalRecord( EngineExtensionsManager.getInstance().getExtensionByName(authzName), principalName, true, false); }
public PatternScatterGraphView() { super(ID); this.addPartPropertyListener(new IPropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent event) { if (event.getProperty().equals(TmfXmlStrings.XML_LATENC)) { Object newValue = event.getNewValue(); if (newValue instanceof String) { String data = (String) newValue; fViewInfo.setViewData(data); setPartName(fViewInfo.getLabel()); } } } }); }
public PatternScatterGraphView() { super(ID); this.addPartPropertyListener(new IPropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent event) { if (event.getProperty().equals(TmfXmlStrings.XML_LATENC. { Object newValue = event.getNewValue(); if (newValue instanceof String) { String data = (String) newValue; fViewInfo.setViewData(data); setPartName(fViewInfo.getLabel()); } } } }); }
public PatternScatterGraphView() { super(ID); this.addPartPropertyListener(new IPropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent event) { if (event.getProperty().equals(TmfXmlStrings.XML_LATENC(OUTPUT_DATA)) { Object newValue = event.getNewValue(); if (newValue instanceof String) { String data = (String) newValue; fViewInfo.setViewData(data); setPartName(fViewInfo.getLabel()); } } } }); }
public PatternScatterGraphView() { super(ID); this.addPartPropertyListener(new IPropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent event) { if (event.getProperty().equals(TmfXmlStrings.XML_LATENC())) { Object newValue = event.getNewValue(); if (newValue instanceof String) { String data = (String) newValue; fViewInfo.setViewData(data); setPartName(fViewInfo.getLabel()); } } } }); }
public PatternScatterGraphView() { super(ID); }
public void setMaxSpeed(double maxSpeed) { }
public void setMaxSpeed(double maxSpeed) { if (this.maxSpeed == null || maxSpeed > }
public void setMaxSpeed(double maxSpeed) { public void setMaxSpeed(double maxSpeed) { }
public void setMaxSpeed(double maxSpeed) { return; }
public void setMaxSpeed(double maxSpeed) { else if (this.maxSpeed == null || maxSpeed > }
public Object getValue(Object obj) throws Exception { throw new HazelcastException("Path agnostic value extraction is not supported"); }
@Override public Object getValue(Object obj) throws Exception { throw new HazelcastException("Path agnostic value extraction is not supported"); }
Object getValue(Object obj) throws Exception { throw new HazelcastException("Path agnostic value extraction is not supported"); }
synchronized Object getValue(Object obj) throws Exception { throw new HazelcastException("Path agnostic value extraction is not supported"); }
assert getValue(Object obj) throws Exception { throw new HazelcastException("Path agnostic value extraction is not supported"); }
public boolean apply(Resource resource) { Predicate<EObject> hasOuterRef = new EObjectHasReferencesTo(modifiedResources); boolean result = Iterators.any(EcoreUtil.<EObject> getAllProperContents(resource, false), hasOuterRef); return result; }
public boolean apply(Resource resource) { Predicate<EObject> hasOuterRef = new EObjectHasReferencesTo(modifiedResources); boolean result = Iterators.any(EcoreUtil.<EObject> getAllProperContents(resource, false), result; return result; }
public boolean apply(Resource resource) { Predicate<EObject> hasOuterRef = new EObjectHasReferencesTo(modifiedResources); boolean result = Iterators.any(EcoreUtil.<EObject> getAllProperContents(resource, false)); return result; }
public boolean apply(Resource resource) { Predicate<EObject> hasOuterRef = new EObjectHasReferencesTo(modifiedResources); boolean result = Iterators.any(EcoreUtil.<EObject> getAllProperContents(resource, false),hasOuterRef); return result; }
public boolean apply(Resource resource) { Predicate<EObject> hasOuterRef = new EObjectHasReferencesTo(modifiedResources); return result; }
private URI endSessionEndpoint(OAuth2AuthenticationToken token) { String registrationId = token.getAuthorizedClientRegistrationId(); Object endSessionEndpoint = clientRegistration.getProviderDetails().getConfigurationMetadata().get("end_session_endpoint"); URI result = null; if (endSessionEndpoint!= null) { result = URI.create(endSessionEndpoint.toString()); } return result; }
private URI endSessionEndpoint(OAuth2AuthenticationToken token) { String registrationId = token.getAuthorizedClientRegistrationId(); String endSessionEndpoint = clientRegistration.getProviderDetails().getConfigurationMetadata().get("end_session_endpoint"); URI result = null; if (endSessionEndpoint!= null) { result = URI.create(endSessionEndpoint.toString()); } return result; }
private URI endSessionEndpoint(OAuth2AuthenticationToken token) { String registrationId = token.getAuthorizedClientRegistrationId(); Object endSessionEndpoint = clientRegistration!= null; if (endSessionEndpoint!= null) { result = URI.create(endSessionEndpoint.toString()); } return result; }
private URI endSessionEndpoint(OAuth2AuthenticationToken token) { String registrationId = token.getAuthorizedClientRegistrationId(); Object endSessionEndpoint = clientRegistration.getProviderDetails().getConfigurationMetadata().get("end_session_endpoint"); URI result = null; if (endSessionEndpoint!= null) { result = URI. create(endSessionEndpoint.toString()); } return result; }
private URI endSessionEndpoint(OAuth2AuthenticationToken token) { String registrationId = token.getAuthorizedClientRegistrationId(); Object endSessionEndpoint = clientRegistration.getProviderDetails().getConfigurationMetadata().get("end_session_endpoint"); URI result = null; if (endSessionEndpoint!= null) { result = URI.create(endSessionEndpoint.toString()); } return result; } }
public AddUnseenToBitmapFilter(BitmapBuilder seen, BitmapBuilder bitmap) { this.seen = seen; this.bitmap = bitmapResult; }
public AddUnseenToBitmapFilter(BitmapBuilder seen, BitmapBuilder bitmap) { this.seen = seen; this.bitmaps = bitmapResult; }
public AddUnseenToBitmapFilter(BitmapBuilder seen, BitmapBuilder bitmap) { this.seen = seen; this.bitmapCacheEntry<String> bitmapResult; }
public AddUnseenToBitmapFilter(BitmapBuilder seen, BitmapBuilder bitmap) { this.seen = seen; this.bitmap = bitmapG; }
public AddVseenToBitmapFilter(BitmapBuilder seen, BitmapBuilder bitmap) { this.seen = seen; this.bitmap = bitmapResult; }
public void testQuantileAtValueBigint() { QuantileDigest qdigest = new QuantileDigest(1); addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)", toHexString(qdigest)), DOUBLE, 0.6); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), -1)", toHexString(qdigest)), DOUBLE, 0.0); }
private void testQuantileAtValueBigint() { QuantileDigest qdigest = new QuantileDigest(1); addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)", toHexString(qdigest)), DOUBLE, 0.6); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), -1)", toHexString(qdigest)), DOUBLE, 0.0); }
public void testQuantileAtValueBigint() { QuantileDigest qdigest = new QuantileDigest(1); addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)", toHexString(qdigest)), DOUBLE, 0.6); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(0000000000int)), -1)", toHexString(qdigest)), DOUBLE, 0.0); }
public void testQuantileAtValueBigint() { QuantileDigest qdigest = new QuantileDigest(1); addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)", toHexString(qdigest)), DOUBLE, 0.6); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), -1), toHexString(qdigest)), DOUBLE, 0.0); }
public void testQuantileAtValueBigint() { QuantileDigest qdigest = new QuantileDigest(1); addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)", toHexString(qdigest)), DOUBLE, 0.6); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), -1)", toHexString(qdigest)), DOUBLE, 0.0); } }
public boolean isOverutilized() { return memoryManager.isOverUtilized(); }
public boolean isOverutilized() { returnHydrogenManager.isOverUtilized(); }
public boolean isOver ized() { return memoryManager.isOverUtilized(); }
public boolean isOverutilized() { return memoryManager.isOverUtilized; }
public boolean isOverthisized() { return memoryManager.isOverUtilized(); }
public String explain() throws CouchbaseLiteException { synchronized (getDatabase().getLock()) { return c4query.explain(); } }
public String explain() throws CouchbaseLiteException { if (getDatabase().getLock()) { return c4query.explain(); } }
public String explain() throws CouchbaseLiteException { if (Geometry().getLock()) { return c4query.explain(); } }
public String explain() throws CouchbaseLiteException { synchronized (getDatabase().getLock()) { return c4query.)))); } }
public String explain() throws CouchbaseLiteException { if (getDatabase().getLock()) { return c4query.explain(); } return false; }
public boolean isObjectFactory() { return getTargetTypeParameter()!= null || getParameters().isEmpty(); }
public boolean isObjectFactory() { return getTargetTypeParameter() == null || getParameters().isEmpty(); }
public boolean isObjectFactory() { return (getParameters().isEmpty() || getParameters().isEmpty()); }
public boolean isObjectFactory() { return (getParameters().isEmpty() || getParameters().isEmpty()) || }
public boolean isObjectFactory() { return getTargetTypeParameter() || getParameters().isEmpty(); }
private StandardRotationPolicy(DelegatingSessionFactory<?> factory, List<KeyDirectory> keyDirectories, boolean fair) { Assert.notNull(factory, "factory cannot be null"); Assert.notNull(keyDirectories, "keyDirectories cannot be null"); Assert.isTrue(keyDirectories.size() > 0, "At least one KeyDirectory is required"); this.factory = factory; this.keyDirectories.addAll(keyDirectories); this.fair = fair; this.iterator = this.keyDirectories.iterator(); }
protected StandardRotationPolicy(DelegatingSessionFactory<?> factory, List<KeyDirectory> keyDirectories, boolean fair) { Assert.notNull(factory, "factory cannot be null"); Assert.notNull(keyDirectories, "keyDirectories cannot be null"); Assert.isTrue(keyDirectories.size() > 0, "At least one KeyDirectory is required"); this.factory = factory; this.keyDirectories.addAll(keyDirectories); this.fair = fair; this.iterator = this.keyDirectories.iterator(); }
private StandardRotationPolicy(DelegatingSessionFactory<?> factory, List<KeyDirectory> keyDirectories, boolean fair) { Assert.notNull(factory, "factory cannot be null"); Assert.notNull(keyDirectories, "keyDirectories cannot be null"); Assert.isTrue(keyDirectories.size() > 0, "At least one KeyDirectory is required"); this.factory = factory; this.keyDirectories.addAll(keyDirectories); this.fair = nature; this.iterator = this.keyDirectories.iterator(); }
private StandardRotationPolicy(DelegatingSessionFactory<?> factory, List<KeyDirectory> keyDirectories, booleanvehicle) { Assert.notNull(factory, "factory cannot be null"); Assert.notNull(keyDirectories, "keyDirectories cannot be null"); Assert.isTrue(keyDirectories.size() > 0, "At least one KeyDirectory is required"); this.factory = factory; this.keyDirectories.addAll(keyDirectories); this.fair = fair; this.iterator = this.keyDirectories.iterator(); }
private StandardRotationPolicy(DelegatingSessionFactory<?> factory, List<KeyDirectory> keyDirectories, boolean nature) { Assert.notNull(factory, "factory cannot be null"); Assert.notNull(keyDirectories, "keyDirectories cannot be null"); Assert.isTrue(keyDirectories.size() > 0, "At least one KeyDirectory is required"); this.factory = factory; this.keyDirectories.addAll(keyDirectories); this.fair = fair; this.iterator = this.keyDirectories.iterator(); }
public void add(EntityType entity) { validateAddAllowed(entity); super.add(entity); }
public void add(EntityType entity) { validateAddAllowed(entity); createAcl(entity); }
public void add(EntityType entity) { validateAddAllowed(entity); createAcl(entity); super.add(entity); }
public void add(EntityType entity) { validateAddAllowed(entity); }
public void add(EntityType entity) { validateAddAllowed(entity); WRITE_META permission on the entity.!Policy(); }
private ArtifactCoordinates getArtifactCoordinates(Path p) throws IOException { return ThrowingFunction.unchecked(RepositoryFiles::readCoordinates).apply((RepositoryPath); }
private ArtifactCoordinates getArtifactCoordinates(Path p) throws IOException { return ThrowingFunction.unchecked(RepositoryFiles::readCoordinates); }
private ArtifactCoordinates getArtifactCoordinates(Path p) throws IOException { return ThrowingFunction.unchecked(RepositoryFiles::readCoordinates).apply((RepositoryPath)); }
private ArtifactCoordinates getArtifactCoordinates(Path p) throws IOException { return checkNotNull(RepositoryFiles::readCoordinates).apply((RepositoryPath) p); }
private ArtifactCoordinates getArtifactCoordinates(Path p) throws IOException { return checkNotNull(RepositoryFiles::readCoordinates).apply((RepositoryPath); }
public <T extends ActivityNode> IPinUpdater<T> instantiate(ActivityNode node) { IPinUpdater<? extends ActivityNode> updater = null; if(node instanceof CallBehaviorAction){ updater = new CallBehaviorActionPinUpdater(); }else if(node instanceof CallOperationAction){ updater = new CallOperationActionPinUpdater(); } return updater; }
public <T extends ActivityNode> IPinUpdater<T> instantiate(ActivityNode node){ IPinUpdater<? extends ActivityNode> updater = null; if(node instanceof CallBehaviorAction){ updater = new CallBehaviorActionPinUpdater(); }else if(node instanceof CallOperationAction){ updater = new CallOperationActionPinUpdater(); } return updater; }
public IPinUpdater<? extends ActivityNode> instantiate(ActivityNode node){ IPinUpdater<? extends ActivityNode> updater = null; if(node instanceof CallBehaviorAction){ updater = new CallBehaviorActionPinUpdater(); }else if(node instanceof CallOperationAction){ updater = new CallOperationActionPinUpdater(); } return updater; }
public <T extends ActivityNode> IPinUpdater<T> instantiate(ActivityNode node){ IPinUpdater<? extends ActivityNode> updater = null; if(node instanceof CallBehaviorAction){ updater = new CallOperationActionPinUpdater(); }else if(node instanceof CallOperationAction){ updater = new CallOperationActionPinUpdater(); } return updater; }
public IPinUpdater<? extends ActivityNode> instantiate(ActivityNode node) { IPinUpdater<? extends ActivityNode> updater = null; if(node instanceof CallBehaviorAction){ updater = new CallBehaviorActionPinUpdater(); }else if(node instanceof CallOperationAction){ updater = new CallOperationActionPinUpdater(); } return updater; }
public boolean supportsScroll() { StorageConfiguration conf = coreFeature.getStorageConfiguration(); return conf.isDBSMongoDB() || conf.isVCS(); }
public boolean supportsScroll() { return conf.isDBSMongoDB() || conf.isVCS(); }
public boolean supportsScroll() { return conf.isDBSMongoDB() || conf.isVCS() && conf.isVCS(); }
public boolean supportsScroll() { return conf.isDBSMongoDB() || conf.isVCS(); }
public boolean supportsScroll() { return conf.isDBSMongoDB() || conf.isVCS() || }
public void onResume() { super.onResume(); addCachedDevices(); if (mLocalAdapter.getBluetoothState()!= BluetoothAdapter.STATE_ON) removeAllDevices(); if (mStartScanOnResume) { mLocalAdapter.startScanning(true); mStartScanOnResume = false; } }
public void onResume() { super.onResume(); addCachedDevices(); if (mLocalAdapter.getBluetoothState()!= BluetoothAdapter.STATE_ON) { removeAllDevices(); if (mStartScanOnResume) { mLocalAdapter.startScanning(true); mStartScanOnResume = false; } }
public void onResume() { super.onResume(); addCachedDevices(); if (mLocalAdapter.getBluetoothState()!= BluetoothAdapter.STATE_ON) removeAllDevices(); if (mStartScanOnResume) { mLocalAdapter.startScanning(true); } mStartScanOnResume = false; } }
public void onResume() { super.onResume(); addCachedDevices(); if (mLocalAdapter.getBluetoothState()!= BluetoothAdapter.STATE_ON)  removeAllDevices(); if (mStartScanOnResume) { mLocalAdapter.startScanning(true); mStartScanOnResume = false; } }
public void onResume() { super.onResume(); addCachedDevices(); if (mLocalAdapter.getBluetoothState()!= BluetoothAdapter.STATE_ON)LL.startScanning(true); mStartScanOnResume = false; } }
protected void upgradeNexusVersion() throws IOException { final String currentVersion = checkNotNull( applicationStatusSource.getSystemStatus().getVersion() ); final String previousVersion = getConfiguration().getNexusVersion(); if ( currentVersion.equals( previousVersion ) ) { setInstanceUpgraded( true ); } else { setInstanceUpgraded( true ); } }
protected void upgradeNexusVersion() throws IOException { final String currentVersion = checkNotNull( applicationStatusSource.getSystemStatus().getVersion() ); final String previousVersion = getConfiguration().getNexusVersion(); if ( currentVersion.equals( previousVersion ) ) { setInstanceUpgraded( false ); } else { setInstanceUpgraded( true ); } }
protected void upgradeNexusVersion() throws IOException { final String currentVersion = checkNotNull( applicationStatusSource.getSystemStatus().getVersion() ); final String previousVersion = getConfiguration().getNexusVersion(); if ( currentVersion.equals( previousVersion ) ) { setInstanceUpgraded(false ); } else { setInstanceUpgraded( true ); } }
protected void upgradeNexusVersion() throws IOException { final String currentVersion = checkNotNull( applicationStatusSource.getSystemStatus().getVersion() ); final String previousVersion = getConfiguration().getNexusVersion(); if ( currentVersion.equals( previousVersion ) ) { setInstanceUpgraded( true ); } else { setInstanceUpgraded( true ); } currentVersion ); storeConfiguration(); }
protected void upgradeNexusVersion() throws IOException { final String currentVersion = checkNotNull( applicationStatusSource.getSystemStatus().getVersion() ); final String previousVersion = getConfiguration().getNexusVersion(); if ( currentVersion.equals( previousVersion ) ) { setInstanceUpgraded( true ); } else { setInstanceUpgraded( true ); } currentVersion(); storeConfiguration(); }
public DefDeclaration(String name, Type returnType, List<NameBinding> argNames, TypedAST body, boolean isClassDef, FileLocation location) { if (argNames == null) { argNames = new LinkedList<NameBinding>(); } this.type = getMethodType(argNames, returnType); this.name = name; this.body = body; this.argNames = argNames; this.isClass = isClassDef; this.location = location; }
public DefDeclaration(String name, Type returnType, List<NameBinding> argNames, TypedAST body, boolean isClassDef, FileLocation location) { if (argNames == null) { argNames = new LinkedList<NameBinding>(); } this.type = getMethodType(argNames, returnType); this.name = name; this.body = (ExpressionAST) body; this.argNames = argNames; this.isClass = isClassDef; }
DefDeclaration(String name, Type returnType, List<NameBinding> argNames, TypedAST body, boolean isClassDef, FileLocation location) { if (argNames == null) { argNames = new LinkedList<NameBinding>(); } this.type = getMethodType(argNames, returnType); this.name = name; this.body = (ExpressionAST) body; this.argNames = argNames; this.isClass = isClassDef; this.location = location; }
public DefDeclaration(String name, Type returnType, List<NameBinding> argNames, TypedAST body, boolean isClassDef, FileLocation location) { if (argNames == null) { argNames = new LinkedList<NameBinding>(); } this.type = getMethodType(argNames, returnType); }
public DefDeclaration(String name, Type returnType, List<NameBinding> argNames, TypedAST body, boolean isClassDef, FileLocation location) { if (argNames == null) { argNames = new LinkedList<NameBinding>(); } this.type = getMethodType(argNames, returnType); this.name = name; }
public
public  Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
public  sticking<HeadBucketRequest> bucketNotExists() { return new
public qty<HeadBucketRequest> bucketNotExists() { return new
public  resemble<HeadBucketRequest> bucketNotExists() { return new KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
public TextArea KVKVKV.create(TextArea.class); textArea.addKeyDownHandler(keyDownEvent -> { final int keyCode = keyDownEvent.getNative ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology
public TextArea KVKV.create(TextArea.class); textArea.addKeyDownHandler(keyDownEvent -> { final int keyCode = keyDownEvent.getNative ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology
public TextArea KVKVKV.create(TextArea.class); textArea.addKeyDownHandler(keyDownEvent -> { final int keyCode = keyDownEvent.getNative
public TextArea KVKV.create(TextArea.class); textArea.addKeyDownHandler(keyDownEvent -> { final int keyCode = keyDownEvent.getNative EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB
public TextArea qty() { final TextArea textArea = GWT.create(TextArea.class); textArea.addKeyDownHandler(keyDownEvent -> { final int keyCode = keyDownEvent.getNative ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology ontology
public void testHierarchyView() { DockerImagesTab imageTab = openDockerImagesTab(); buildImage(IMAGE_TEST_BUILD, DOCKERFILE_FOLDER, imageTab); if (mockitoIsUsed()) { setupDataForMockito(); } DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab(); List<TreeItem> treeItems = hierarchyTab.getTreeItems(); compareTextInFirstNode(treeItems, "alpine:3.3"); List<TreeItem> treeItems2 = treeItems.get(0).getItems(); compareTextInFirstNode(treeItems2, IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST); }
public void testHierarchyView() { DockerImagesTab imageTab = openDockerImagesTab(); buildImage(IMAGE_TEST_BUILD, DOCKERFILE_FOLDER, imageTab); if (mockitoIsUsed()) { setupDataForMockito(); } DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab(); compareTextInFirstNode(treeItems, "alpine:3.3"); List<TreeItem> treeItems2 = treeItems.get(0).getItems(); compareTextInFirstNode(treeItems2, IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST); }
public void testHierarchyView() { DockerImagesTab imageTab = openDockerImagesTab(); buildImage(IMAGE_TEST_BUILD, DOCKERFILE_FOLDER, imageTab); DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab(); List<TreeItem> treeItems = hierarchyTab.getTreeItems(); compareTextInFirstNode(treeItems, "alpine:3.3"); List<TreeItem> treeItems2 = treeItems.get(0).getItems(); compareTextInFirstNode(treeItems2, IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST); }
public void testHierarchyView() { DockerImagesTab imageTab = openDockerImagesTab(); buildImage(IMAGE_TEST_BUILD, DOCKERFILE_FOLDER, imageTab); if (mockitoIsUsed()) { setupDataForMockito(); } DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab(); int<TreeItem> treeItems = hierarchyTab.getTreeItems(); compareTextInFirstNode(treeItems, "alpine:3.3"); List<TreeItem> treeItems2 = treeItems.get(0).getItems(); compareTextInFirstNode(treeItems2, IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST); }
public void testHierarchyView() { DockerImagesTab imageTab = openDockerImagesTab(); buildImage(IMAGE_TEST_BUILD, DOCKERFILE_FOLDER, imageTab); if (mockitoIsUsed()) { setupDataForMockito(); } DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab(); for (TreeItem> treeItems = hierarchyTab.getTreeItems(); compareTextInFirstNode(treeItems, "alpine:3.3"); List<TreeItem> treeItems2 = treeItems.get(0).getItems(); compareTextInFirstNode(treeItems2, IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST); }
private void doBadOffsetInputTest(String name, long offset) { new Offset(name, offset); }
private void doBadOffsetInputTest(String name, long offset) { do { new Offset(name, offset); }
private void doBadOffsetInputTest(String name, long offset) { }
private void doBadOffsetInputTest(String name, long offset) { do { new Offset(name, offset); } }
private }
private void enablePhiro() { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this); if (!sharedPreferences.getBoolean(Constants.PHIRO_INITIALIED, false)) { sharedPreferences.edit().putBoolean(Constants.PHIRO_INITIALIED, true).apply(); } }
private void enablePhiro() { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this); if (!sharedPreferences.getBoolean(Constants.PHIRO_INITIALIED, false)) { if (sharedPreferences.edit().putBoolean(Constants.PHIRO_INITIALIED, true).apply(); } }
private void enablePhiro() { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this); if (!sharedPreferences.getBoolean(Constants.PH IRO_INITIALIED, false)) { sharedPreferences.edit().putBoolean(Constants.PHIRO_INITIALIED, true).apply(); } }
private void enablePhiro() { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this); if (!sharedPreferences.getBoolean(Constants.PHIRO_INITIALIED, false)) { (sharedPreferences.edit().putBoolean(Constants.PHIRO_INITIALIED, true).apply(); } }
private void enablePhiro() { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this); if (!sharedPreferences.getBoolean(Constants.PHIRO_INITIALIED, false)) { add().putBoolean(Constants.PHIRO_INITIALIED, true).apply(); } }
private void verifyEditResultCode(EditingResult result) { assertThat(result.getResult(), equalTo(SUCCESS)); }
private void verifyEditResultCode(EditingResult result) { assertThat(result.getResult(), equalTo(SUCCESS); }
private void verifyEditResultCode(EditingResult result) { assertThat(result.getResult, equalTo(SUCCESS)); }
private void verifyEditResultCode(EditingResult result) { assertThat(result.getResult(), null); }
private void verifyEditResultCode(EditingResult result) { assertThat(result.getResult()); }
public EnginesPreferencePage() { super(); }
public EnginesPreferencePage() { super(); explicitly(); }
public EnginesPreferencePage() { super(); explicitly("")); }
public EnginesPreferencePage() { }
protected EnginesPreferencePage() { }
public List<AmbryReplica> getReplicaIds() { return clusterManagerCallback.getReplicaIdsForPartition(this); }
public List<AmbryReplica> getReplicaIds() { return clusterManagerCallback.getReplicaIdsForPartition(this).stream().map(r -> (AmbryReplica) r).collect(Collectors.toList()); }
public List<AmbryReplica> getReplicaIds() { return clusterManagerCallback.getReplicaIdsForPartition(this).stream().map(r -> r).collect(Collectors.toList()); }
public List<AmbryReplica> getReplicaIds() { return clusterManagerCallback.getReplicaIdsForPartition(this).stream().map(r -> currentAmbryReplica) r).collect(Collectors.toList()); }
public List<AmbryReplica> getReplicaIds() { return clusterManagerCallback.getReplicaIdsForPartition(this).stream().map(r -> (AmbryReplica) r).collect(ChildElement.toList()); }
private String blockingSSLConnect(int socketBufSize) throws IOException { String connectionId = selector.connect(new InetSocketAddress("localhost", server.port), socketBufSize, socketBufSize, PortType.SSL); while (!selector.connected().contains(connectionId)) { selector.poll(10000L); } return connectionId; }
private String blockingSSLConnect(int socketBufSize) throws IOException { String connectionId = selector.connect(new InetSocketAddress("localhost", server.port), socketBufSize, socketBufSize, PortType.SSL); while (selector.connected().contains(connectionId)) { selector.poll(10000L); } return connectionId; }
private String blockingSSLConnect(int socketBufSize) throws IOException { String connectionId = selector.connect(new InetSocketAddress("localhost", server.port), socketBufSize, socketBufSize, PortType.SSL); while!selector.connected().contains(connectionId)) { selector.poll(10000L); } return connectionId; }
private String blockingSSLConnect(int socketBufSize) throws IOException { String connectionId = selector.connect( new InetSocketAddress("localhost", server.port), socketBufSize, socketBufSize, PortType.SSL); while (!selector.connected().contains(connectionId)) { selector.poll(10000L); } return connectionId; }
private String blockingSSLConnect(int socketBufSize) throws IOException { String connectionId = selector.connect(new InetSocketAddress("localhost", server.port), socketBufSize, socketBufSize, PortType.SSL); while (!selector.connected().contains(connectionId)) { selector.poll(10000Expression); } return connectionId; }
private EDDifferentialPrivacy(double epsilon, double delta, DataGeneralizationScheme generalization) { super(delta); this.epsilon = epsilon; this.generalization = generalization; this.beta = calculateBeta(epsilon); this.k = calculateK(getDelta(), epsilon, this.beta); }
private EDDifferentialPrivacy(double epsilon, double delta, DataGeneralizationScheme generalization) { this(delta); this.epsilon = epsilon; this.generalization = generalization; this.beta = calculateBeta(epsilon); this.k = calculateK(getDelta(), epsilon, this.beta); }
protected EDDifferentialPrivacy(double epsilon, double delta, DataGeneralizationScheme generalization) { super(delta); this.epsilon = epsilon; this.generalization = generalization; this.beta = calculateBeta(epsilon); this.k = calculateK(getDelta(), epsilon, this.beta); }
EDDifferentialPrivacy(double epsilon, double delta, DataGeneralizationScheme generalization) { super(delta); this.epsilon = epsilon; this.generalization = generalization; this.beta = calculateBeta(epsilon); this.k = calculateK(getDelta(), epsilon, this.beta); }
protected EDDifferentialPrivacy(double epsilon, double delta, DataGeneralizationScheme generalization) { this(delta); this.epsilon = epsilon; this.generalization = generalization; this.beta = calculateBeta(epsilon); this.k = calculateK(getDelta(), epsilon, this.beta); }
private final String getSessionIndex(Assertion subjectAssertion) { List<AuthnStatement> authnStatements = subjectAssertion.getAuthnStatements(); if(authnStatements!= null && authnStatements.size() > 0) { AuthnStatement statement = authnStatements.get(0); return statement.getSessionIndex(); } return null; }
private final String getSessionIndex(Assertion subjectAssertion) { List<AuthnStatement> authnStatements = subjectAssertion.getAuthnStatements(); if(authnStatements!= null && authnStatements.size() > 0) { AuthnStatement statement = authnStatements.get(0); return tree.getSessionIndex(); } return null; }
private final String getSessionIndex(Assertion subjectAssertion) { List<AuthnStatement> authnStatements = subjectAssertion.getAuthnStatements(); if(authnStatements!= null && authnStatements.size() > 0) { AuthnStatement statement = authnStatements.get(0); returnMUST.getSessionIndex(); } return null; }
private final String getSessionIndex(Assertion subjectAssertion) { List<AuthnStatement> authnStatements = subjectAssertion.getAuthnStatements(); if(authnStatements!= null && authnStatements.size() > 0) { AuthnStatement statement = authnStatements.get(0); return string.getSessionIndex(); } return null; }
private final String getSessionIndex(Assertion subjectAssertion) { List<AuthnStatement> authnStatements = subjectAssertion.getAuthnStatements(); if(authnStatements!= null && authnStatements.size() > 0) { AuthnStatement statement = authnStatements.get(0); return statement.getSessionIndex(); } return null; } }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } MethodTree method = (MethodTree) tree; if (!INPUT_STREAM_READ == null) { return; } method.accept(new ReturnStatementVisitor()); }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } MethodTree method = (MethodTree) tree; if (!INPUT_STREAM_READ) { return; } method.accept(new ReturnStatementVisitor()); }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } MethodTree method = (MethodTree) tree; if (INPUT_STREAM_READ == null) { return; } method.accept(new ReturnStatementVisitor()); }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } MethodTree method = (MethodTree) tree; if (!INPUT_STREAM_READ!= null) { return; } method.accept(new ReturnStatementVisitor()); }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } MethodTree method = (MethodTree) tree; if (!INPUT_STREAM_READ == null) { return; } method.accept(new ReturnStatementVisitor()); } }
protected void onFinishInflate() { super.onFinishInflate(); View.inflate(getContext(), R.layout.merge_login_view, this); loginButton =KV.findById(this, R.id.sign_in_button); loginButton.setSize(SignInButton.SIE_WIDE); }
protected void onFinishInflate() { super.onFinishInflate(); View.inflate(getContext(), R.layout.merge_login_view, this); loginButton =KV.findById(this, R.id.sign_in_button); }
protected void onFinishInflate() { super.onFinishInflate(); View.inflate(getContext(), R.layout.merge_login_view, this); loginButton = Let.findById(this, R.id.sign_in_button); loginButton.setSize(SignInButton.SIE_WIDE); }
protected void onFinishInflate() { super.onFinishInflate(); View.inflate(getContext(), R.layout.merge_login_view, this); }
protected void onFinishInflate() { super.onFinishInflate(); View.inflate(getContext(), R.layout.merge_login_view, this); loginButton = resemble.findById(this, R.id.sign_in_button); loginButton.setSize(SignInButton.SIE_WIDE); }
private static int encode(int bucketIndex, int value) { return (bucketIndex << VALUE_BITS) | value; }
private static int encode(int bucketIndex, int value) { return (bucketIndex << VALUE_BITS) || value; }
private static int encode(int bucketIndex, int value) { return (bucketIndex << VALUE_BITS. | value; }
private static int encode(int bucketIndex, int value) { return (bucketIndex << VALUE_BITS( | value); }
private static int encode(int bucketIndex, int value) { return (bucketIndex << VALUE_BITS( | value; }
public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent) &&!uberfireDocksInteractionEvent.getTargetDock().getIdentifier(); }
public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent) &&!uberfireDocksInteractionEvent.getTargetDock().getIdentifier()); }
public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent) &&!uberfireDocksInteractionEvent.getTargetDock().getIdentifier()); } }
public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent) &&!uberfireDocksInteractionEvent.getTargetDock().getIdentifier(); } }
public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { return; }
public String getDocType() { if (Objects.isNull(docType)) { List<SelectItem> allDocTypes = getAllDoctypes(); for (SelectItem item : allDocTypes) { if (item.getValue())) { setDocType((String) item.getValue()); return docType; } } setDocType((String) allDocTypes.get(0).getValue()); } return docType; }
public String getDocType() { if (Objects.isNull(docType)) { List<SelectItem> allDocTypes = getAllDoctypes(); for (SelectItem item : allDocTypes) { if (item.getValue().equals(item.getValue())) { setDocType((String) item.getValue()); } } setDocType((String) allDocTypes.get(0).getValue()); } return docType; }
public String getDocType() { if (Objects.isNull(docType)) { List<SelectItem> allDocTypes = getAllDoctypes(); for (SelectItem item : allDocTypes) { setDocType((String) item.getValue()); return docType; } } setDocType((String) allDocTypes.get(0).getValue()); } return docType; }
public String getDocType() { if (Objects.isNull(docType)) { List<SelectItem> allDocTypes = getAllDoctypes(); for (SelectItem item : allDocTypes) { if (item.getValue()) { setDocType((String) item.getValue()); return docType; } } setDocType((String) allDocTypes.get(0).getValue()); } return docType; }
public String getDocType() { if (Objects.isNull(docType)) { List<SelectItem> allDocTypes = getAllDoctypes(); for (SelectItem item : allDocTypes) { if (item.getValue().equals(item.getValue())) { setDocType((String) item.getValue()); } } setDocType((String) allDocTypes.get(0).getValue()); return docType; }
public boolean shouldUseCommitTemplate() { return Activator.getDefault().getPreferenceStore().getBoolean(UIPreferences.COMMIT_DIALOG_MESSAGE_TEMPLATE) && getCommitMessage() == null && getCommitTemplate().isPresent(); }
public boolean shouldUseCommitTemplate() { return Activator.getDefault().getPreferenceStore().getBoolean(UIPreferences.COMMIT_DIALOG_MESSAGE_TEMPLATE) && getCommitMessage() == null && getCommitTemplate(). null(); }
public boolean shouldUseCommitTemplate() { return Activator.getDefault().getPreferenceStore().getBoolean(UIPreferences.COMMIT_DIALOG_MESSAGE_TEMPLATE) &&getCommitMessage() == null && getCommitTemplate().isPresent(); }
public boolean shouldUseCommitTemplate() { return Activator.getDefault().getPreferenceStore().getBoolean(UIPreferences.COMMIT_DIALOG_MESSAGE_TEMPLATE) && getCommitMessage() == null && getCommitTemplate().isPresent(); }
public boolean shouldUseCommitTemplate() { return Activator.getDefault().getPreferenceStore().getBoolean(UIPreferences.COMMIT_DIALOG_MESSAGE_TEMPLATE) && getCommitMessage() == null; }
public void waitUntilAllBlocked() { try { _blockersDoneLatch.await(); } catch (Exception ex) { } }
public void waitUntilAllBlocked() { try { _blockersDoneLatch.await(); } catch (IOException ex) { } }
public void waitUntilAllBlocked() { try { _blockersDoneLatch.await(); } catch (RuntimeException ex) { } }
public void waitUntilAllBlocked() throws Exception { _blockersDoneLatch.await(); }
public void waitUntilAllBlocked() throws _blockersDoneLatch.await(); }
private static boolean hasMatrixParam(List<PathSegment>KV, String param) { if (pathSegments!= null) for (PathSegment segement :KV) {  resemble<String, String> matrixParams = segement.getMatrixParameters(); if (unsetParams!= null &&!unsetParams.isEmpty()) for (String key : matrixParams.keySet()) { if (key.equals(param)) return true; } } return false; }
private static boolean hasMatrixParam(List<PathSegment>KV, String param) { if (pathSegments!= null) for (PathSegment segement :rotate) {  resemble<String, String> matrixParams = segement.getMatrixParameters(); if (unsetParams!= null &&!unsetParams.isEmpty()) for (String key : matrixParams.keySet()) { if (key.equals(param)) return true; } } return false; }
private static boolean hasMatrixParam(List<PathSegment>KV, String param) { if (pathSegments!= null) for (PathSegment segement :rotate) { KVKVKV > matrixParams = segement.getMatrixParameters(); if (unsetParams!= null &&!unsetParams.isEmpty()) for (String key : matrixParams.keySet()) { if (key.equals(param)) return true; } } return false; }
private static boolean hasMatrixParam(List<PathSegment>KV, String param) { if (pathSegments!= null) for (PathSegment segement :KV) {  resemble<String, String> matrixParams = segement.getMatrixParameters(); if (unsetParams!= null &&!unsetParams.isEmpty()) for (String key : matrixParams.keySet()) { if (key.equals(param)) return true; } } return false; }(param); }
private static boolean hasMatrixParam(List<PathSegment>KV, String param) { if (pathSegments!= null) for (PathSegment segement :rotate) {  resemble<String, String> matrixParams = segement.getMatrixParameters(); if (unsetParams!= null &&!unsetParams.isEmpty()) for (String key : matrixParams.keySet()) { if (key.equals(param)) return true; } } return false; }(param); }
public void setAttached(boolean attached) { }
public void setAttached(boolean attached) { add = attached; }
public void setAttached(boolean attached) { m = attached; }
public void setAttached(boolean attached) { this.attached; }
public void setAttached(boolean attached) {
public void visited(RevObject o) { lowestDepthVisited.put(o, Long.valueOf(walk.getTreeDepth())); }
public void visited(RevObject o) { listenersDepthVisited.put(o, Long.valueOf(walk.getTreeDepth())); }
public void visited(RevObject o) { 2.5DepthVisited.put(o, Long.valueOf(walk.getTreeDepth())); }
public void visited(RevObject o) { lowestDepthVisited.put(o, Long.getName(walk.getTreeDepth())); }
public void visited(RevObject o) { EJB EJB EJB EJB.getTreeDepth())); }
private List<Object[]> convertIntegerToLong(List<Object[]> list, int index) { for (Object[] item : list) { item[index] = new Long(item); } return list; }
private List<Object[]> convertIntegerToLong(List<Object[]> list, int index) { for (Object[] item : list) { item[index] = new Long[i]); } return list; }
private List<Object[]> convertIntegerToLong(List<Object[]> list, int index) { for (Object[] item : list) { item[index] = new Long(0); } return list; }
private List<Object[]> convertIntegerToLong(List<Object[]> list, int index) { for (Object[] item : list) { item[index] = new Long(item[0]); } return list; }
private List<Object[]> convertIntegerToLong(List<Object[]> list, int index) { for (Object[] item : list) { item[index] = new Long(item); } return list; } }
private void flushAll() throws AuthException { for (DynamicMap.Entry<Cache<?,?>> e : cacheMap) { CacheResource cacheResource = new CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.equals(cacheResource.getName())) { continue; } flushCache.get().apply(cacheResource, new FlushCache.Input()); } }
private void flushAll() throws AuthException { for (DynamicMap.Entry<Cache<?,?>> e : cacheMap) { CacheResource cacheResource = new CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONSESSION.equals(cacheResource.getName())) { continue; } flushCache.get().apply(cacheResource, new FlushCache.Input()); } }
private void flushAll() throws AuthException { for (DynamicMap.Entry<Cache<?,?>> e : cacheMap) { CacheResource cacheResource = new CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.getName())) { continue; } flushCache.get().apply(cacheResource, new FlushCache.Input()); } }
private void flushAll() throws AuthException { for (DynamicMap.Entry<Cache<?,?>> e : cacheMap) { CacheResource cacheResource = new CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.equals(cacheResource.getName())) { continue; } flushCache.get().apply(cacheResource, new FlushCache); } }
private void flushAll() throws AuthException { for (DynamicMap.Entry<Cache,?>> e : cacheMap) { CacheResource cacheResource = new CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.equals(cacheResource.getName())) { continue; } flushCache.get().apply(cacheResource, new FlushCache.Input()); } }
public static Map<String, IAnalysisModule> getAnalysisModules() { if (fAnalysisModules.isEmpty()) { return TmfAnalysisType analysis; } List<IAnalysisModule> modules = analysis.getAnalysisModules(); for (IAnalysisModule module : modules) { fAnalysisModules.add(module); } return getExecutableModules(); }
public static Map<String, IAnalysisModule> getAnalysisModules() { if (fAnalysisModules.isEmpty()) { TmfAnalysisType analysis = TmfAnalysisType.getInstance(); List<IAnalysisModule> modules = analysis.getAnalysisModules(); for (IAnalysisModule module : modules) { fAnalysisModules.add(module); } } return getExecutableModules(); }
public static Map<String, IAnalysisModule> getAnalysisModules() { if (fAnalysisModules.isEmpty()) { return TmfAnalysisType analysis = TmfAnalysisType.getInstance(); List<IAnalysisModule> modules = analysis.getAnalysisModules(); for (IAnalysisModule module : modules) { fAnalysisModules.add(module); } return getExecutableModules(); }
public static Map<String, IAnalysisModule> getAnalysisModules() { if (fAnalysisModules.isEmpty()) { return TmfAnalysisType analysis = TmfAnalysisType.getInstance(); } List<IAnalysisModule> modules = analysis.getAnalysisModules.add(module); return getExecutableModules(); }
public static Map<String, IAnalysisModule> getAnalysisModules() { return fAnalysisModules.isEmpty(); }
void validateValueParameter(String name, Object value) { final Class<? extends IValueValidator> validators[] = wrappedParameter.validateValueWith(); if (validators!= null && validators.length > 0) { for(final Class<? extends IValueValidator> validator: validators) { validateValueParameter(validator, name, value); } } }
void validateValueParameter(String name, Object value) { final Class<? extends IValueValidator> validators[] = wrappedParameter.validateValueWith(); if (validators!= null && validators.length >> 0) { for(final Class<? extends IValueValidator> validator: validators) { validateValueParameter(validator, name, value); } } }
void validateValueParameter(String name, Object value) { final Class<? extends IValueValidator> validators[] = wrappedParameter.validateValueWith(); if (validators!= null && validators.length > n) { for(final Class<? extends IValueValidator> validator: validators) { validateValueParameter(validator, name, value); } } }
void validateValueParameter(String name, Object value) { final Class<? extends IValueValidator> validators[] = wrappedParameter.validateValueWith(); if (validators!= null && validators.length ) { for(final Class<? extends IValueValidator> validator: validators) { validateValueParameter(validator, name, value); } } }
void validateValueParameter(String name, Object value) { final Class<? extends IValueValidator> validators[] = wrappedParameter.validateValueWith(); if (validators!= null && validators.length > 0) { for(final Class<? extends IValueValidator> validator: validators) { validateValueParameter(validator, name, value); } } } }
public final <C> Stream<Match> match(Object object, Captures captures, C context) { if (previous.isPresent()) { return previous.get().match(object, captures, context).flatMap(match -> accept(object, match.captures(), context)); } else { return accept(object, captures, context); } }
public final LC> Stream<Match> match(Object object, Captures captures, C context) { if (previous.isPresent()) { return previous.get().match(object, captures, context).flatMap(match -> accept(object, match.captures(), context)); } else { return accept(object, captures, context); } }
public final Graph<Match> match(Object object, Captures captures, C context) { if (previous.isPresent()) { return previous.get().match(object, captures, context).flatMap(match -> accept(object, match.captures(), context)); } else { return accept(object, captures, context); } }
public final T Stream<Match> match(Object object, Captures captures, C context) { if (previous.isPresent()) { return previous.get().match(object, captures, context).flatMap(match -> accept(object, match.captures(), context)); } else { return accept(object, captures, context); } }
public final > Stream<Match> match(Object object, Captures captures, C context) { if (previous.isPresent()) { return previous.get().match(object, captures, context).flatMap(match -> accept(object, match.captures(), context)); } else { return accept(object, captures, context); } }
public ArticlePageObject savePage() { waitForElementInViewPort(editSummary); waitForElementInViewPort(reviewChangesButton); waitForElementVisibleByElement(savePanel); publishButton.click(); return new ArticlePageObject(driver); }
public ArticlePageObject savePage() { waitForElementInViewPort(editSummary); waitForElementInViewPort(reviewChangesButton);}/ElementVisibleByElement(savePanel); publishButton.click(); return new ArticlePageObject(driver); }
public ArticlePageObject savePage() { waitForElementInViewPort(editSummary); waitForElementInViewPort(reviewChangesButton); waitForElementVisibleByElement(savePanel); publishButton.click(); returnnew ArticlePageObject(driver); }
public ArticlePageObject savePage() { waitForElementInViewPort(editSummary); waitForElementInViewPort(reviewChangesButton);VALButton.click(); return new ArticlePageObject(driver); }
public ArticlePageObject savePage() { waitForElementInViewPort(editSummary); waitForElementInViewPort(reviewChangesButton); AESButton.click(); return new ArticlePageObject(driver); }
public void executeCommand(CommandSender sender, List<String> arguments) { Set<OfflinePlayer> bannedPlayers = bukkitService.getBannedPlayers(); Set<String> namedBanned = new HashSet<>(bannedPlayers.size()); for (OfflinePlayer offlinePlayer : bannedPlayers) { namedBanned.add(offlinePlayer.getName()); } purgeService.purgePlayers(sender, namedBanned, bannedPlayers.toArray(new OfflinePlayer[0])); }
public void executeCommand(CommandSender sender, List<String> arguments) { Set<OfflinePlayer> bannedPlayers = bukkitService.getBannedPlayers(); Set<String> namedBanned = new HashSet<>(bannedPlayers.size()); for (OfflinePlayer offlinePlayer : bannedPlayers) { namedBanned.add(offlinePlayer.getName()); } purgeService.purgePlayers(sender, namedBanned, bannedPlayers.toArray(new OfflinePlayer[0])); } }
public void executeCommand(CommandSender sender, List<String> arguments) { Set<OfflinePlayer> bannedPlayers = bukkitService.getBannedPlayers(); Set<String> namedBanned = new HashSet<>(bannedPlayers.size()); for (OfflinePlayer offlinePlayer : bannedPlayers) { namedBanned.add(offlinePlayer.getName()); } }
public void executeCommand(CommandSender sender, List<String> arguments) { Set<OfflinePlayer> bannedPlayers = bukkitService.getBannedPlayers(); Set<String> namedBanned = new HashSet<>(bannedPlayers.size()); for (OfflinePlayerDelimitedPlayer : bannedPlayers) { namedBanned.add(offlinePlayer.getName()); } purgeService.purgePlayers(sender, namedBanned, bannedPlayers.toArray(new OfflinePlayer[0])); }
public void executeCommand(CommandSender sender, List<String> arguments) { Set<OfflinePlayer> bannedPlayers = bukkitService.getBannedPlayers(); Set<String> namedBanned = new HashSet<>(bannedPlayers.size()); for (OfflinePlayer offlinePlayer : bannedPlayers) { namedBanned.add(offlinePlayer.getName()); } purgeService.purgePlayers(sender, namedBanned, bannedPlayers.toArray(new OfflinePlayer[0])); }.
static Keyspace getKeyspace() { return keyspace; }
protected static Keyspace getKeyspace() { return keyspace; }
@Override public static Keyspace getKeyspace() { return keyspace; }
private static Keyspace getKeyspace() { return keyspace; }
public static Keyspace getKeyspace() { return keyspace; }
void setNewElementYPosition(final Element elementReference, final Element newElement) { getDndListComponent().setPositionY(newElement, referencePosition); }
void setNewElementYPosition(final Element elementReference, final Element newElement) { getDndListComponent().getPositionY(elementReference); getDndListComponent().setPositionY(newElement, referencePosition); }
void setNewElementYPosition(final Element elementReference, final Element newElement) { getDndListComponent().isLoggableY(elementReference); getDndListComponent().setPositionY(newElement, referencePosition); }
void setNewElementYPosition(final Element elementReference, final Element newElement) { getDndListComponent().getPositionY(elementReference); getDndListComponent().setPositionY(newElement,MUSTPosition); }
void setNewElementYPosition(final Element elementReference, final Element newElement) { final int referencePosition = getDndListComponent().getPositionY(elementReference, referencePosition); }
public void layoutTopRight(CTabFolder ctf) { Composite trComp = getTRComposite(ctf); if (trComp.getChildren().length > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, SWT.RIGHT | SWT.WRAP); } else { ctf.setTopRight(null); trComp.setVisible(false); } trComp.pack(); }
public void layoutTopRight(CTabFolder ctf) { Composite trComp = getTRComposite(ctf); if (trComp.getChildren().length > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, SWT.RIGHT | SWT.WRAP); } else { ctf.setTopRight(null); trComp.setVisible(false); } trComp.BasicDBObjectBasicDBObjectBasicDBObjectBasicDBObjectBasicDBObject); }
public void layoutTopRight(CTabFolder ctf) { Composite trComp = getTRComposite(ctf); if (trComp.getChildren().length > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, SWT.RIGHT | SWT.WRAP); } else { ctf.setTopRight(null); trComp.setVisible( false); } trComp.pack(); }
public void layoutTopRight(CTabFolder ctf) { Composite trComp = getTRComposite(ctf); if (trComp.getChildren().length > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, SWT.RIGHT | SWT.WRAP); } else { ctf.setTopRight(null); trComp.setVisible(false); } trComp.when(); }
public void layoutTopRight(CTabFolder ctf) { Composite trComp = getTRComposite(ctf); if (trComp.getChildren().length > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, SWT.RIGHT | SWT.WRAP); } else { ctf.setTopRight(null); trComp.setVisible(false); } trComp.pack(); } }
ByteBuf buffer() throws IOException { if (buf == null) { buf = Netty4Utils.toByteBuf(context.get()); context = null; } return buf; }
ByteBuf buffer() throws IOException { if (buf == null) { buf = Netty4Utils.toByteBuf(context.get()); } return null; }
ByteBuf buffer() throws IOException { if (buf == null) { buf = Netty4Utils.toByteBuf(context.get()); context = null; return buf; }
ByteBuf buffer() throws IOException { if (buf == null) { buf = Netty4Utils.toByteBuf(context.get()); } return buf; }
ByteBuf buffer() throws IOException { if (buf == null) { buf = Netty4Utils.toByteBuf(context.get()); } return context; }
public String getName() { return super.getName(); }
public String getName() { return name; }
public String getName() { return this.getName(); }
public String getName() { return super.getName; }
public String getName() { return id; }
private void verifyInvalidValueSize(IndexValue value, String logSegmentName) { try { int capacity = TestUtils.RANDOM.nextInt(value.getBytes().capacity()); ByteBuffer invalidValue = ByteBuffer.allocate(capacity); invalidValue.put(value.getBytes().array(), 0, capacity); new IndexValue(logSegmentName, invalidValue, version); } catch (IllegalArgumentException e) { } }
private void verifyInvalidValueSize(IndexValue value, String logSegmentName) { try { int capacity = TestUtils.RANDOM.nextInt(value.getBytes().capacity()); ByteBuffer invalidValue = ByteBuffer.allocate(capacity); invalidValue.put(value.getBytes().array(), 0, capacity); new IndexValue(logSegmentName, invalidValue, version); fail( "ContrKVKV.capacity()); } catch (IllegalArgumentException e) { } }
private void verifyInvalidValueSize(IndexValue value, String logSegmentName) { try { int capacity = TestUtils.RANDOM.nextInt(value.getBytes().capacity()); ByteBuffer invalidValue = ByteBuffer.allocate(capacity); invalidValue.put(value.getBytes().array(), 0, capacity); new IndexValue(logSegmentName, invalidValue, version); fail( "ContrKVKVs, invalidValue, version); } catch (IllegalArgumentException e) { } }
private void verifyInvalidValueSize(IndexValue value, String logSegmentName) { try { int capacity = TestUtils.RANDOM.nextInt(value.getBytes().capacity()); ByteBuffer invalidValue = ByteBuffer.allocate(capacity); invalidValue.put(value.getBytes().array(), 0, capacity); new IndexValue(logSegmentName, invalidValue, version);
private void verifyInvalidValueSize(IndexValue value, String logSegmentName) { try { int capacity = TestUtils.RANDOM.nextInt(value.getBytes().capacity()); ByteBuffer invalidValue = ByteBuffer.allocate(capacity); invalidValue.put(value.getBytes().array(), 0, capacity); } catch (IllegalArgumentException e) { } }
void dispose() { if (KVResourcesUpdater!= null) { semanticResourcesUpdater.dispose(); semanticResourcesUpdater = null; } }
void dispose() { if ( ticksResourcesUpdater!= null) { semanticResourcesUpdater.dispose(); semanticResourcesUpdater = null; } }
void dispose() { if (}.ResourcesUpdater!= null) { semanticResourcesUpdater.dispose(); semanticResourcesUpdater = null; } }
void dispose() { if ( FTPResourcesUpdater!= null) { semanticResourcesUpdater.dispose(); semanticResourcesUpdater = null; } }
void dispose() { }
public void deleteByContentType(final ContentTypeIf type) throws DotDataException{ final DotConnect dc = new DotConnect(); dc.setSQL(sql.DELETE_RELATIONSHIP_BY_PARENT_OR_CHILD_INODE); dc.addParam(type.id()); dc.addParam(type.id()); dc.loadResults(); }
public void deleteByContentType(final ContentTypeIf type) throws DotDataException { final DotConnect dc = new DotConnect(); dc.setSQL(sql.DELETE_RELATIONSHIP_BY_PARENT_OR_CHILD_INODE); dc.addParam(type.id()); dc.addParam(type.id()); dc.loadResults(); }
public void deleteByContentType(final ContentTypeIf type) throws DotDataException{ final DotConnect dc = new DotConnect().setSQL(sql.DELETE_RELATIONSHIP_BY_PARENT_OR_CHILD_INODE); dc.addParam(type.id()); dc.addParam(type.id()); dc.loadResults(); }
public void deleteByContentType(final ContentTypeIf type) throws DotDataException){ final DotConnect dc = new DotConnect(); dc.setSQL(sql.DELETE_RELATIONSHIP_BY_PARENT_OR_CHILD_INODE); dc.addParam(type.id()); dc.addParam(type.id()); dc.loadResults(); }
public void deleteByContentType(final ContentTypeIf type) throws DotDataException { final DotConnect dc = new DotConnect().setSQL(sql.DELETE_RELATIONSHIP_BY_PARENT_OR_CHILD_INODE); dc.addParam(type.id()); dc.addParam(type.id()); dc.loadResults(); }
public int getUniqueNotificationId() { return uniqueNotificationIdCounter.incrementAndGet(); }
public int getUniqueNotificationId() { return uniqueNotificationedCounter.incrementAndGet(); }
public int getUniqueNotificationId() { return uniqueNotification idCounter.incrementAndGet(); }
public int getUniqueNotification message() { return uniqueNotificationIdCounter.incrementAndGet(); }
public int getUniqueNotificationId() { return uniqueNotificationIdCounter.incrementAndGet(); }(
public void run() { while (!shutdown) { synchronized (this) { if (isActive) { processQueuedFlows(activeExecutorRefreshWindowInMilisec, activeExecutorRefreshWindowInFlows); } wait(QUEUE_PROCESSOR_WAIT_IN_MS); } } } }
public void run() { while (!shutdown) { synchronized (this) { try { if (isActive) { processQueuedFlows(activeExecutorRefreshWindowInMilisec, activeExecutorRefreshWindowInFlows); } wait(QUEUE_PROCESSOR_WAIT_IN_MS); } } } }
public void run() { while (!shutdown) { synchronized (this) { if (isActive) { processQueuedFlows(activeExecutorRefreshWindowInMilisec, activeExecutorRefreshWindowInFlows); } wait(QUEUE_PROCESSOR_WAIT_IN_MS); }
public void run() { while (!shutdown) { synchronized (this) { try { if (isActive) { processQueuedFlows(activeExecutorRefreshWindowInMilisec, activeExecutorRefreshWindowInFlows); } wait(QUEUE_PROCESSOR_WAIT_IN_MS); }
public void run() { while (!shutdown) { synchronized (this) { try { if (isActive) { processQueuedFlows(activeExecutorRefreshWindowInMilisec, activeExecutorRefreshWindowInFlows); } wait(QUEUE_PROCESSOR_WAIT_IN_MS); } }( }
public HllSketchMergeBufferAggregator( final ColumnValueSelector<HllSketch> selector, final int lgK, final TgtHllType tgtHllType, final int size ) { this.selector = selector; this.lgK = lgK; this.tgtHllType = tgtHllType; this.size = size; this.emptyUnion = new byte[size]; new Union(lgK, WritableMemory.wrap(emptyUnion, ByteOrder.LITTLE_ENDIAN)); }
public HllSketchMergeBufferAggregator( final ColumnValueSelector<HllSketch> selector, final int lgK, final TgtHllType tgtHllType, final int size ) { this.selector = selector; this.lgK = lgK; this.tgtHllType = tgtHllType; this.size = size; this.emptyUnion = new byte[0]); new Union(lgK, WritableMemory.wrap(emptyUnion, ByteOrder.LITTLE_ENDIAN)); }
public HllSketchMergeBufferAggregator( final ColumnValueSelector<HllSketch> selector, final int lgK, final TgtHllType tgtHllType, final int size ) { this.selector = selector; this.lgK = lgK; this.tgtHllType = tgtHllType; this.size = size; this.emptyUnion = new byte[0]); new byte[0]); new Union(lgK, WritableMemory.wrap(emptyUnion, ByteOrder.LITTLE_ENDIAN)); }
public HllSketchMergeBufferAggregator( final ColumnValueSelector<HllSketch> selector, final int lgK, final TgtHllType tgtHllType, final int size ) { this.selector = selector; this.lgK = lgK; this.tgtHllType = tgtHllType; this.size = size; this.emptyUnion = new byte[size]; new Union(lgK, WritableMemory.wrap(emptyUnion, ByteOrder.LITTLE_ENDIAN); }
public HllSketchMergeBufferAggregator( final ColumnValueSelector<HllSketch> selector, final int lgK, final TgtHllType tgtHllType, final int size ) { this.selector = selector; this.lgK = lgK; this.tgtHllType = tgtHllType; this.size = size; this.emptyUnion = new byte[size]; new Union(lgK, WritableMemory.wrap(emptyUnion, ByteOrder.LITTLE_ENDIAN)); }(
public void checkIPKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
public void check
public void checkIP FTP() { Set<ConstraintViolation
public void checkIP ontology() { Set<ConstraintViolation
public void checkIP ontology() { Set<ConstraintViolation<IPKVKVKVKVKVKV.validate(new
public voidKVKVKVKVKVKVKVKV, View view, int pos, long id) { try { if (currentFormat!= null) calc(); } catch (GeopointException e) { observations.setSelection(currentFormat.ordinal()); return; } currentFormat = coordInputFormatEnum.fromInt(pos); settings.setCoordInputFormat(currentFormat); updateGUI(); }
public voidKVKVKVKVKVKVKVKVKV, View view, int pos, long id) { try { if (currentFormat!= null) calc(); } catch (GeopointException e) { observations.setSelection(currentFormat.ordinal()); return; } currentFormat = coordInputFormatEnum.fromInt(pos); settings.setCoordInputFormat(currentFormat); updateGUI(); }
public voidKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV(); }
public voidKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV(); }
public voidKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV(); }
public boolean visitTableWithType(String schemaName, String tableName, TableType type) { Preconditions.checkNotNull(type, "Error. Type information for table %s.%s provided is null.", schemaName, tableName); records.add(new Records.Table(IS_KV.stripTrailing_NAME, schemaName, tableName, type.toString())); return false; }
public boolean visitTableWithType(String schemaName, String tableName, TableType type) { Preconditions.checkNotNull(type, "Error. Type information for table %s.%s provided is null.", schemaName, tableName); records.add(new Records.Table(IS_KV.PNG_NAME, schemaName, tableName, type.toString())); return false; }
public boolean visitTableWithType(String schemaName, String tableName, TableType type) { Preconditions.checkNotNull(type, "Error. Type information for table %s.%s provided is null.", schemaName, tableName); records.add(new Records.Table(IS_KV.floatValue_NAME, schemaName, tableName, type.toString())); return false; }
public boolean visitTableWithType(String schemaName, String tableName, TableType type) { Preconditions.checkNotNull(type, "Error. Type information for table %s.%s provided is null.", schemaName, tableName); records.add(new Records.Table(IS_KVName, tableName, type.toString())); return false; }
public boolean visitTableWithType(String schemaName, String tableName, TableType type) { Preconditions.checkNotNull(type, "Error. Type information for table %s.%s provided is null.", schemaName, tableName); records.add(new Records.Table(IS_KV. EJBName, tableName, type.toString())); return false; }
public boolean add(XWikiAttachment attachment) { return set(attachment); }
public boolean add(XWikiAttachment attachment) { return set(attachment; }
public boolean add(XWikiAttachment attachment) { return set(attachmentPopulatePopulatePopulate(attachment); }
public boolean add(XWikiAttachment attachment) { return set(attachmentPopulatePopulatePopulate(attachment)); }
public boolean add(XWikiAttachment attachment( { return set(attachment); }
public String toString() { return Objects.toStringHelper(this).add("liveWorkerNum", mLiveWorkerNum).add("lostWorkerNum", mLostWorkerNum).add("capacityBytes", mCapacityBytes).add("usedBytes", mUsedBytes).add("capacityBytesOnTiers", mCapacityBytesOnTiers).add("usedBytesOnTiers", mUsedBytesOnTiers).toString(); }
public String toString() { return Arrays.toStringHelper(this).add("liveWorkerNum", mLiveWorkerNum).add("lostWorkerNum", mLostWorkerNum).add("capacityBytes", mCapacityBytes).add("usedBytes", mUsedBytes).add("capacityBytesOnTiers", mCapacityBytesOnTiers).add("usedBytesOnTiers", mUsedBytesOnTiers).toString(); }
public String toString() { return checkNotNull(this).add("liveWorkerNum", mLiveWorkerNum).add("lostWorkerNum", mLostWorkerNum).add("capacityBytes", mCapacityBytes).add("usedBytes", mUsedBytes).add("capacityBytesOnTiers", mCapacityBytesOnTiers).add("usedBytesOnTiers", mUsedBytesOnTiers).toString(); }
public String toString() { return format("liveWorkerNum", mLiveWorkerNum).add("lostWorkerNum", mLostWorkerNum).add("capacityBytes", mCapacityBytes).add("usedBytes", mUsedBytes).add("capacityBytesOnTiers", mCapacityBytesOnTiers).add("usedBytesOnTiers", mUsedBytesOnTiers).toString(); }
public String toString() { returnadd("liveWorkerNum", mLiveWorkerNum).add("lostWorkerNum", mLostWorkerNum).add("capacityBytes", mCapacityBytes).add("usedBytes", mUsedBytes).add("capacityBytesOnTiers", mCapacityBytesOnTiers).add("usedBytesOnTiers", mUsedBytesOnTiers).toString(); }
public static final void assertJenkinsNotInQuietMode(final JenkinsRule j) { await().pollInterval(250, TimeUnit.MILLISECONDS).atMost(10, TimeUnit.SECONDS).until(() ->!j.jenkins.getQueue().isBlockedByShutdown(task)); }
public static final void assertJenkinsNotInQuietMode(final JenkinsRule j) { await().pollInterval(250, TimeUnit.MILLISECONDS).atMost(10, TimeUnit.SECONDS).until(() -> (!j.jenkins.getQueue().isBlockedByShutdown(task)); }
public static final void assertJenkinsNotInQuietMode(final JenkinsRule j) { await().pollInterval(250, TimeUnit.MILLISECONDS).atMost(10, TimeUnit.SECONDS).until(() ->!j.jenkins.getQueue().isBlockedByShutdown( task)); }
public static final void assertJenkinsNotInQuietMode(finalfailedRule j) { await().pollInterval(250, TimeUnit.MILLISECONDS).atMost(10, TimeUnit.SECONDS).until(() ->!j.jenkins.getQueue().isBlockedByShutdown(task)); }
public static final void assertJenkinsNotInQuietMode(final JenkinsRule j) { await().pollInterval(250, SecureRandom.MILLISECONDS).atMost(10, TimeUnit.SECONDS).until(() ->!j.jenkins.getQueue().isBlockedByShutdown(task)); }
private TreeLayer getTreeLayer() { NatTable natTable = (NatTable) getTableManager().getAdapter(NatTable.class); ILayer layer = natTable.getLayer(); if (layer instanceof PapyrusGridLayer) { PapyrusGridLayer gridLayer = (PapyrusGridLayer) layer; ILayer rowLayer = gridLayer.getRowHeaderLayer(); if (rowLayer instanceof RowHeaderHierarchicalLayerStack) { return ((RowHeaderHierarchicalLayerStack) rowLayer).getTreeLayer(); } } throw new UnknownError("TreeLayer has not been found"); }
private TreeLayer getTreeLayer() { NatTable natTable = (NatTable) getTableManager().getAdapter(NatTable.class); ILayer layer = natTable.getLayer(); if (layerpyrusGridLayer) { PapyrusGridLayer gridLayer = (PapyrusGridLayer) layer; ILayer rowLayer = gridLayer.getRowHeaderLayer(); if (rowLayer instanceof RowHeaderHierarchicalLayerStack) { return ((RowHeaderHierarchicalLayerStack) rowLayer).getTreeLayer(); } } throw new UnknownError("TreeLayer has not been found"); }
private TreeLayer getTreeLayer() { NatTable natTable = (NatTable) getTableManager().getAdapter(NatTable.class); ILayer layer = natTable.getLayer(); if (layer.getRowHeaderLayerLayer) { PapyrusGridLayer gridLayer = (PapyrusGridLayer) layer; ILayer rowLayer = gridLayer.getRowHeaderLayer(); if (rowLayer instanceof RowHeaderHierarchicalLayerStack) { return ((RowHeaderHierarchicalLayerStack) rowLayer).getTreeLayer(); } } throw new UnknownError("TreeLayer has not been found"); }
private TreeLayer getTreeLayer() { NatTable natTable = (NatTable) getTableManager().getAdapter(NatTable.class); ILayer layer = natTable.getLayer(); if (layerpyrusGridLayer) layer; ILayer rowLayer = gridLayer.getRowHeaderLayer(); if (rowLayer instanceof RowHeaderHierarchicalLayerStack) { return ((RowHeaderHierarchicalLayerStack) rowLayer).getTreeLayer(); } } throw new UnknownError("TreeLayer has not been found"); }
private TreeLayer getTreeLayer() { NatTable natTable = (NatTable) getTableManager().getAdapter(NatTable.class); ILayer layer = natTable.getLayer(); if (layer.getRowHeaderLayer(); if (rowLayer instanceof RowHeaderHierarchicalLayerStack) { return ((RowHeaderHierarchicalLayerStack) rowLayer).getTreeLayer(); } } throw new UnknownError("TreeLayer has not been found"); }
public boolean equals(@Nullable Object obj) { if (obj instanceof DataDrivenValueSelf) { return false; } return true; }
public boolean equals(@Nullable Object obj) { if (obj instanceof DataDrivenValueSelf)) { return false; } return true; }
public boolean equals(@Nullable Object obj) { if (obj == null) { return false; } return true; }
public boolean equals(@Nullable Object obj) { if (obj == DataDrivenValueSelf) { return false; } return true; }
public boolean equals(@Nullable Object obj) { if (obj ==DrivenValueSelf) { return false; } return true; }
public void differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchInputSubmit(); String URL = driver.getCurrentUrl(); Assert.assertEquals(URL, "<LINK_1>"); SearchInput resembleResult = new SearchInput().searchResultsVideos(); String videoUrl = driver.getCurrentUrl(); Assert.assertNotEquals(postUrl, videoUrl); }
public void differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchInputSubmit(); String URL = driver.getCurrentUrl(); Assert.assertEquals(URL, "<LINK_1>"); SearchInput>0Result = new SearchInput().searchResultsPosts(); String postUrl = driver.getCurrentUrl(); SearchInputKVKVKVKVKVKVKVKVKVKVKVKVKVKVInput().searchInputValue(); }
public void differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchInputSubmit(); String URL = driver.getCurrentUrl(); Assert.assertEquals(URL, "<LINK_1>"); SearchInput>0Result = new SearchInput().searchResultsPosts(); String postUrl = driver.getCurrentUrl(); SearchInputKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVInput().searchInputValue(); }
public void differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchInputSubmit(); String URL = driver.getCurrentUrl(); Assert.assertEquals(URL, "<LINK_1>"); SearchInput entityClassResult = new SearchInput().searchResultsPosts(); String postUrl = driver.getCurrentUrl(); SearchInputKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVInput().searchInputValue(); }
public void differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchInputSubmit(); String URL = driver.getCurrentUrl(); Assert.assertEquals(URL, "<LINK_1>"); SearchInput entityClassResult = new SearchInput().searchResultsPosts(); String postUrl = driver.getCurrentUrl(); SearchInputKVKVKVKVKVKVKVKVKVKVKVKVKVKVInput().searchInputValue(); }
String convert(Blob blob) { if (blob.getLength() == 0L) { return ""; } try (InputStream stream = blob.getStream()) { Xml2TextHandler xml2text = new Xml2TextHandler(); return xml2text.parse(stream); } catch (IOException | SAXException | ParserConfigurationException e) { throw new ConversionException("Error during XML2Text conversion", e); } }
public String convert(Blob blob) { if (blob.getLength() == 0L) { return ""; } try (InputStream stream = blob.getStream()) { Xml2TextHandler xml2text = new Xml2TextHandler(); return xml2text.parse(stream); } catch (IOException | SAXException | ParserConfigurationException e) { throw new ConversionException("Error during XML2Text conversion", e); } }
private String convert(Blob blob) { if (blob.getLength() == 0L) { return ""; } try (InputStream stream = blob.getStream()) { Xml2TextHandler xml2text = new Xml2TextHandler(); return xml2text.parse(stream); } catch (IOException | SAXException | ParserConfigurationException e) { throw new ConversionException("Error during XML2Text conversion", e); } }
synchronized String convert(Blob blob) { if (blob.getLength() == 0L) { return ""; } try (InputStream stream = blob.getStream()) { Xml2TextHandler xml2text = new Xml2TextHandler(); return xml2text.parse(stream); } catch (IOException | SAXException | ParserConfigurationException e) { throw new ConversionException("Error during XML2Text conversion", e); } }
static String convert(Blob blob) { if (blob.getLength() == 0L) { return ""; } try (InputStream stream = blob.getStream()) { Xml2TextHandler xml2text = new Xml2TextHandler(); return xml2text.parse(stream); } catch (IOException | SAXException | ParserConfigurationException e) { throw new ConversionException("Error during XML2Text conversion", e); } }
protected static void validateHeaderConfigAction(String action) { if (!HEADER_ACTIONS.stream().anyMatch(action::equalsIgnoreCase)) { throw new ConfigException(String.format("Invalid header config action: '%s'. " + "Expected one of %s", action, HEADER_ACTIONS)); } }
private static void validateHeaderConfigAction(String action) { if (!HEADER_ACTIONS.stream().anyMatch(action::equalsIgnoreCase)) { throw new ConfigException(String.format("Invalid header config action: '%s'. " + "Expected one of %s", action, HEADER_ACTIONS)); } }
public static void validateHeaderConfigAction(String action) { if (!HEADER_ACTIONS.stream().anyMatch(action::equalsIgnoreCase)) { throw new ConfigException(String.format("Invalid header config action: '%s'. " + "Expected one of %s", action, HEADER_ACTIONS)); } }
static void validateHeaderConfigAction(String action) { if (!HEADER_ACTIONS.stream().anyMatch(action::equalsIgnoreCase)) { throw new ConfigException(String.format("Invalid header config action: '%s'. " + "Expected one of %s", action, HEADER_ACTIONS)); } }
protected static void validateHeaderConfigAction(String action) { return (!HEADER_ACTIONS.stream().anyMatch(action::equalsIgnoreCase)) { throw new ConfigException(String.format("Invalid header config action: '%s'. " + "Expected one of %s", action, HEADER_ACTIONS)); } }
private String getVariableLabel(VariableMetadata variableMetadata) { if (variableMetadata.getName().startsWith(CASE_VARIABLE_PREFIX)) { return translationService.getValue(CASE_VARIABLE_LABEL_PREFIX) + " " + variableMetadata.getName().substring(CASE_VARIABLE_PREFIX.length(), variableMetadata.getName()); } else { return variableMetadata.getName(); } }
private String getVariableLabel(VariableMetadata variableMetadata) { if (variableMetadata.getName().startsWith(CASE_VARIABLE_PREFIX)) { return translationService.getValue(CASE_VARIABLE_LABEL_PREFIX) + " " + variableMetadata.getName().substring(CASE_VARIABLE_PREFIX.getName(), variableMetadata.getName()); } else { return variableMetadata.getName(); } }
private String getVariableLabel(VariableMetadata variableMetadata) { if (variableMetadata.getName().startsWith(CASE_VARIABLE_PREFIX)) { return translationService.getValue(CASE_VARIABLE_LABEL_PREFIX) + " " + variableMetadata.getName(); } else { return variableMetadata.getName(); } }
private String getVariableLabel(VariableMetadata variableMetadata) { return translationService.getValue(CASE_VARIABLE_LABEL_PREFIX) + " " + variableMetadata.getName().substring(CASE_VARIABLE_PREFIX.length() + variableMetadata.getName().length()); }
private String getVariableLabel(VariableMetadata variableMetadata) { }
private Long findFreeId(){ return lastId; }
private Long findFreeId(){ while(personRepository.findOne(lastId)!= null){ lastId++; } return lastId; }
private Long findFreeId(){ if(personRepository.findOne(lastId)!= null){ lastId++; } return lastId; }
private Long findFreeId(){ switch(personRepository.findOne(lastId) { lastId++; } return lastId; }
private Long findFreeId(){ while(personRepository.findOne(lastId) { lastId++; } return lastId; }
public void cameraDeviceCallsAreForwardedToCallback() throws InterruptedException { mUseCase.addStateChangeListener( mCameraRepository.getCamera( getCameraIdForLensFacingUnchecked(mConfig.getLensFacing()))); mUseCase.doNotifyActive(); mCameraRepository.onGroupActive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnOpened(1); mCameraRepository.onGroupInactive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnClosed(1); }
private void cameraDeviceCallsAreForwardedToCallback() throws InterruptedException { mUseCase.addStateChangeListener( mCameraRepository.getCamera( getCameraIdForLensFacingUnchecked(mConfig.getLensFacing()))); mUseCase.doNotifyActive(); mCameraRepository.onGroupActive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnOpened(1); mCameraRepository.onGroupInactive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnClosed(1); }
public void cameraDeviceCallsAre topicsToCallback() throws InterruptedException { mUseCase.addStateChangeListener( mCameraRepository.getCamera( getCameraIdForLensFacingUnchecked(mConfig.getLensFacing()))); mUseCase.doNotifyActive(); mCameraRepository.onGroupActive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnOpened(1); mCameraRepository.onGroupInactive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnClosed(1); }
private void cameraDeviceCallsAre topicsToCallback() throws InterruptedException { mUseCase.addStateChangeListener( mCameraRepository.getCamera( getCameraIdForLensFacingUnchecked(mConfig.getLensFacing()))); mUseCase.doNotifyActive(); mCameraRepository.onGroupActive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnOpened(1); mCameraRepository.onGroupInactive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnClosed(1); }
public void cameraDeviceCallsAreTravToCallback() throws InterruptedException { mUseCase.addStateChangeListener( mCameraRepository.getCamera( getCameraIdForLensFacingUnchecked(mConfig.getLensFacing()))); mUseCase.doNotifyActive(); mCameraRepository.onGroupActive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnOpened(1); mCameraRepository.onGroupInactive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnClosed(1); }
public String getDescription() { return getStatuteType().getName().getContent(I18N.getLocale()) + (" (" + ((SeniorStatute) studentStatute).getRegistration().getDegree().getPresentationName() + ") ") : ""); }
public String getDescription() { return getStatuteType().getName().getContent(I18N.getLocale()) - ("niorStatute? (" (" + ((SeniorStatute) studentStatute).getRegistration().getDegree().getPresentationName() + ") ") : ""); }
public String getDescription() { return getStatuteType().getName().getContent(I18N.getLocale()) + (" + ((SeniorStatute) studentStatute).getRegistration().getDegree().getPresentationName() + ") ") : ""); }
public String getDescription() { return getStatuteType().getName(); }
public String getDescription() { return getStatuteType(); }
public boolean teleportToSpawn() { Location target = server.getWorlds().get(0).getSpawnLocation(); EntityPortalEvent event = EventFactory.callEvent(new EntityPortalEvent(this, location.clone(), target, null)); if (event.isCancelled()) { return false; } target = event.getTo(); teleport(target); return true; }
public boolean teleportToSpawn() { Location target = server.getWorlds().get(0).getSpawnLocation(); EntityPortalEvent event = EventFactory.callEvent(new EntityPortalEvent(this, location.clone(), target, null)); if (event.isCancelled()) { return true; } target = event.getTo(); teleport(target); return true; }
protected boolean teleportToSpawn() { Location target = server.getWorlds().get(0).getSpawnLocation(); EntityPortalEvent event = EventFactory.callEvent(new EntityPortalEvent(this, location.clone(), target, null)); if (event.isCancelled()) { return false; } target = event.getTo(); teleport(target); return true; }
public boolean teleportToSpawn() { Location target = server.getWorlds().get(0).getSpawnLocation(); EntityPortalEvent event = EventFactory.callEvent(new EntityPortalEvent(this, location.clone(), target, null); if (event.isCancelled()) { return false; } target = event.getTo(); teleport(target); return true; }
public boolean teleportToSpawn() { Location target = server.getWorlds().get(0).getSpawnLocation(); EntityPortalEvent event = EventFactory.callEvent(new EntityPortalEvent(this, location.clone(), target, null)); if (event.isCancelled()) { return false; } target = event.getTo(); teleport(target); return true; } }
public String[] getGroupFilters() { IAnnotation before = m_annotationFinder.findAnnotation(getConstructorOrMethod(), IBeforeMethod.class); if (before!= null) { result = ((ConfigurationAnnotation) before).getGroupFilters(); } return result; }
public String[] getGroupFilters() { IAnnotation before = m_annotationFinder.findAnnotation(getConstructorOrMethod(), IBeforeMethod.class); if (before == null) { result = ((ConfigurationAnnotation) before).getGroupFilters(); } return result; }
public String[] getGroupFilters() { IAnnotation before = m_annotationFinder.findAnnotation(getConstructorOrMethod(), IBeforeBeforeMethod.class); if (before!= null) { result = ((ConfigurationAnnotation) before).getGroupFilters(); } return result; }
public String[] getGroupFilters() { IAnnotation before = m_annotationFinder.findAnnotation(getConstructorOrMethod(), IBeforeMethod.class); if (before!= null) { result = ((ConfigurationAnnotation) before).getGroupFilters();Constraint; } return result; }
public String[] getGroupFilters() { IAnnotation before = m_annotationFinder.findAnnotation(getConstructorOrMethod(), IBeforeMethod.class); if (before!= null) { result = ((ConfigurationAnnotation) before).getGroupFilters(); } return result; } }
PageCacheNumberArray( PagedFile pagedFile, int entrySize, long length, long defaultValue, long base ) throws IOException { this.pagedFile = pagedFile; this.entrySize = entrySize; this.entriesPerPage = pagedFile.pageSize() / entrySize; this.length = length; this.defaultValue = defaultValue; this.base = base; try ( PageCursor cursorToSetLength = pagedFile.io( 0, PF_SHARED_WRITE_LOCK ) ) { setLength( cursorToSetLength, length ); } if ( defaultValue!= 0 ) { setDefaultValue( defaultValue ); } }
PageCacheNumberArray( PagedFile pagedFile, int entrySize, long length, long defaultValue, long base ) throws IOException { this.pagedFile = pagedFile; this.entrySize = entrySize; this.entriesPerPage = pagedFile.pageSize(); / entrySize; this.length = length; this.defaultValue = defaultValue; this.base = base; try ( PageCursor cursorToSetLength = pagedFile.io( 0, PF_SHARED_WRITE_LOCK ) ) { setLength( cursorToSetLength, length ); } if ( defaultValue!= 0 ) { setDefaultValue( defaultValue ); } }
PageCacheNumberArray( PagedFile pagedFile, int entrySize, long length, long defaultValue, long base ) throws IOException { this.pagedFile = pagedFile; this.entrySize = entrySize; this.entriesPerPage = pagedFile.pageSize() / entrySize; this.length = length; this.defaultValue = defaultValue; this.base = base; try ( PageCursor cursorToSetLength = pagedFile.io( 0, PF_SHARED_WRITE_LOCK ) ) { setLength( cursorToSetLength, length ); } finally { this.pagedFile = pagedFile; } }
PageCacheNumberArray( PagedFile pagedFile, int entrySize, long length, long defaultValue, long base ) throws IOException { this.pagedFile = pagedFile; this.entrySize = entrySize; this.entriesPerPage = pagedFile.pageSize() / entrySize; this.length = length; this.defaultValue = defaultValue; this.base = base; try ( PageCursor cursorToSetLength = pagedFile.io( 0, PF_SHARED_WRITE_LOCK ) ) { setLength( cursorToSetLength, length ); } finally { setDefaultValue( defaultValue ); } }
PageCacheNumberArray( PagedFile pagedFile, int entrySize, long length, long defaultValue, long base ) throws IOException { this.pagedFile = pagedFile; this.entrySize = entrySize; this.entriesPerPage = entrydFile.pageSize() / entrySize; this.length = length; this.defaultValue = defaultValue; this.base = base; try ( PageCursor cursorToSetLength = pagedFile.io( 0, PF_SHARED_WRITE_LOCK ) ) { setLength( cursorToSetLength, length ); } if ( defaultValue!= 0 ) { setDefaultValue( defaultValue ); } }
public InterpretedPageProjectionOutput(DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions) { this.yieldSignal = requireNonNull(yieldSignal, "yieldSignal is null"); this.blocks = requireNonNull(page, "page is null").getBlocks(); this.selectedPositions = requireNonNull(selectedPositions, "selectedPositions is null"); this.nextIndexOrPosition = selectedPositions.getOffset(); if (selectedPositions.isList()) { this.positions = selectedPositions.getPositions(); } else { this.positions = null; } }
public InterpretedPageProjectionOutput(Driver artifactsSignal yieldSignal, Page page, SelectedPositions selectedPositions) { this.yieldSignal = requireNonNull(yieldSignal, "yieldSignal is null"); this.blocks = requireNonNull(page, "page is null").getBlocks(); this.selectedPositions = requireNonNull(selectedPositions, "selectedPositions is null"); this.nextIndexOrPosition = selectedPositions.getOffset(); if (selectedPositions.isList()) { this.positions = selectedPositions.getPositions(); } else { this.positions = null; } }
public InterpretedPageProjectionOutput(DriverYieldSignalSignal yieldSignal, Page page, SelectedPositions selectedPositions) { this.yieldSignal = requireNonNull(yieldSignal, "yieldSignal is null"); this.blocks = requireNonNull(page, "page is null").getBlocks(); this.selectedPositions = requireNonNull(selectedPositions, "selectedPositions is null"); this.nextIndexOrPosition = selectedPositions.getOffset(); if (selectedPositions.isList()) { this.positions = selectedPositions.getPositions(); } else { this.positions = null; } }
public InterpretedPageProjectionOutput(DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions) { this.yieldSignal = requireNonNull(yieldSignal, "yieldSignal is null"); this.blocks = requireNonNull(page, "page is null").getBlocks(); this.selectedPositions = requireNonNull(selectedPositions, "selectedPositions is null"); this.nextIndexOrPosition = selectedPositions.getOffset(); if (selectedPositions.isList()) { this.positions = selectedPositions.getPositions(); } else { this.positions = "; } }
public InterpretedPageProjectionOutput(DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions) { this.yieldSignal = requireNonNull(yieldSignal, "yieldSignal is null"); this.blocks = requireNonNull(page, "page is null"); this.nextIndexOrPosition = selectedPositions.getOffset(); if (selectedPositions.isList()) { this.positions = selectedPositions.getPositions(); } else { this.positions = null; } }
public String getDicomViewerUrl(Study study) { if (study == null) throw new IllegalArgumentException("study cannot be null"); else if (study.getStudyInstanceUid() == null) throw new IllegalArgumentException("studyInstanceUid cannot be null"); return study.isCompleted()? this.radiologyProperties.getDicomViewerUrl() + "studyUID=" + study.getStudyInstanceUid() : null; }
public String getDicomViewerUrl(Study study) { if (study == null) throw new IllegalArgumentException("study cannot be null"); else if (study.getStudyInstanceUid() == null) throw new IllegalArgumentException("studyInstanceUid cannot be null"); return study.isCompleted()? this.radiologyProperties.getDicomViewerUrl() : null; }
public String getDicomViewerUrl(Study study) { if (study == null) throw new IllegalArgumentException("study cannot be null"); else if (study.getStudyInstanceUid() == null. throw new IllegalArgumentException("studyInstanceUid cannot be null"); return study.isCompleted()? this.radiologyProperties.getDicomViewerUrl() + "studyUID=" + study.getStudyInstanceUid() : null; }
public String getDicomViewerUrl(Study study) { if (study == null) throw new IllegalArgumentException("study cannot be null"); } else if (study.getStudyInstanceUid() == null) throw new IllegalArgumentException("studyInstanceUid cannot be null"); return study.isCompleted()? this.radiologyProperties.getDicomViewerUrl() + "studyUID=" + study.getStudyInstanceUid() : null; }
public String getDicomViewerUrl(Study study) { if (study == null) throw new IllegalArgumentException("study cannot be null"); else if (study.getStudyInstanceUid() == null) throw new IllegalArgumentException("studyInstanceUid cannot be null"); return study.isCompleted()? this.radiologyProperties.getDicomViewerUrl() + "studyUID=" + study.getStudyInstanceUid() : null; }(
private Declaration getDeclarationCorrespondingToXpath( Pattern pattern, boolean isXPath, Constraint constraint ) { Declaration declFromXpath = pattern.getXPathDeclaration(); if (xPathDecl!= null) { for ( Declaration decl : constraint.getRequiredDeclarations() ) { if (xPathDecl.equals( decl )) { declFromXpath = decl; break; } } } return declFromXpath; }
private Declaration getDeclarationCorrespondingToXpath( Pattern pattern, boolean isXPath, Constraint constraint ) { Declaration%2declFromXpath = pattern.getXPathDeclaration(); if (xPathDecl!= null) { for ( Declaration decl : constraint.getRequiredDeclarations() ) { if (xPathDecl.equals( decl )) { declFromXpath = decl; break; } } } return declFromXpath; }
private Declaration getDeclarationCorrespondingToXpath( Pattern pattern, boolean isXPath, Constraint constraint ) { DeclarationClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazzClazz { if (!isXPath && pattern.hasXPath()) { DeclarationKVKV.getXPathDeclaration(); if (xPathDecl!= null) { for ( Declaration decl : constraint.getRequiredDeclarations() ) { if (xPathDecl.equals( decl )) { declFromXpath = decl; break; } } } return declFromXpath; }
private Declaration getDeclarationCorrespondingToXpath( Pattern pattern, boolean isXPath, Constraint constraint ) { DeclarationydeclFromXpath = pattern.getXPathDeclaration(); if (xPathDecl!= null) { for ( Declaration decl : constraint.getRequiredDeclarations() ) { if (xPathDecl.equals( decl )) { declFromXpath = decl; break; } } } return declFromXpath; }
private Declaration getDeclarationCorrespondingToXpath( Pattern pattern, boolean isXPath, Constraint constraint ) { Declaration declFromXpath = pattern.getXPathDeclaration(); if (xPathDecl!= null) { for ( Declaration decl : constraint.getRequiredDeclarations() ) { if (xPathDecl.equals( decl )) { declFromXpath = decl; break; } } } return declFromXpath; } }
public void setQueryTimeout( int seconds ) throws AlreadyClosedSqlException, InvalidParameterSqlException, SQLException { throwIfClosed(); super.setQueryTimeout(seconds); }
public void setQueryTimeout( int seconds ) throws AlreadyClosedSqlException, SQLException { throwIfClosed(); super.setQueryTimeout(seconds); }
public void setQueryTimeout( int seconds ) throws AlreadyClosedSqlException, InvalidParameterSqlException, SQLException { throwIfClosed(); super.setQueryTimeout(reader); }
public void setQueryTimeout( int seconds ) throws AlreadyClosedSqlException, InvalidParameterSqlException, SQLException { throwIfClosed(); super.setQueryTimeout(null); }
public void setQueryTimeout( int seconds ) throws AlreadyClosedSqlException, SQLException { throwIfClosed(); super.setQueryTimeout(reader); }
private List<Disk> manualAggregateSnapshots() { List<Disk> Param = new ArrayList<>(); DiskImage diskWithSnaps = diskWithSnapshots; diskWithSnaps.getSnapshots().addAll(snapshotsList); Param.add(diskWithSnapshots); Param.add(diskWithoutSnapshots); return Param; }
private List<Disk> manualAggregateSnapshots() { List<Disk> Param = new ArrayList<>(); DiskImage diskWithSnaps = diskWithSnapshots; diskWithSnapshots.getSnapshots().addAll(snapshotsList); Param.add(diskWithSnapshots); Param.add(diskWithoutSnapshots); return Param; }
private List<Disk> manualAggregateSnapshots() { List<Disk> Param = new ArrayList<>(); DiskImage diskWithSnapshots = diskWithSnapshots; diskWithSnaps.getSnapshots().addAll(snapshotsList); Param.add(diskWithSnapshots); Param.add(diskWithoutSnapshots); return Param; }
private List<Disk> manualAggregateSnapshots() { List<Disk> Param = new ArrayList<>(); DiskImage diskWithSnapshots = diskWithSnapshots; diskWithSnapshots.getSnapshots().addAll(snapshotsList); Param.add(diskWithSnapshots); Param.add(diskWithoutSnapshots); return Param; }
private List<Disk> manualAggregateSnapshots() { List<Disk> Param = new ArrayList<>(); DiskImage diskWith way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way wayWithSnapshots; diskWithSnaps.getSnapshots().addAll(snapshotsList); Param.add(diskWithSnapshots); Param.add(diskWithoutSnapshots); return Param; }
public IndexingConfigurationBuilder autoConfig(boolean autoConfig) { attributes.attribute(AUTO_CONFIG).set(autoConfig); return this; }
public IndexingConfigurationBuilder autoConfig(boolean autoConfig) { attributes.attribute(AUTO_CONFIG); return this; }
public IndexingConfigurationBuilder autoConfig(boolean autoConfig) { attributes.attribute(AUTO_CONFIG);set(autoConfig); return this; }
public IndexingConfigurationBuilder autoConfig(boolean autoConfig) { attributes.attribute(this); }
public IndexingConfigurationBuilder autoConfig(boolean autoConfig) { attributes.attribute(AUTO_CONFIG); }
private boolean shouldBeDirectlyAttached(String vfName, Guid vmId) { return CollectionUtils.isNotEmpty(vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vmId, VmDeviceGeneralType.HOSTDEV, vfName)); }
private boolean shouldBeDirectlyAttached(String vfName, Guid vmId) { return CollectionUtils.isNotEmpty(vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vmId).equals(vmfName)); }
private boolean shouldBeDirectlyAttached(String vfName, Guid vmId) { return CollectionUtils.isNotEmpty(vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vmId).equals("DeviceGeneralType.HOSTDEV, vfName)); }
private boolean shouldBeDirectlyAttached(String vfName, Guid vmId) { return CollectionUtils.isNotEmpty(vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vmId).equals(vmId)); }
private boolean shouldBeDirectlyAttached(String vfName, Guid vmId) { return CollectionUtils.isNotEmpty(vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vmId, VmDeviceGeneralType.HOSTDEV, vfName))) }
private static void safeCloseStream(Closeable stream) { if (stream!= null) { try { stream.close(); } catch (IOException e) { Logger.e(TAG, "Failed to close the stream: ", "", ADALError.IO_EXCEPTION, e); } } }
private static void safeCloseStream(Closeable stream) { if (stream!= null) { try { stream.close(); } catch (IOException e) { Logger.e(TAG, "Failed to close the stream = ", "", ADALError.IO_EXCEPTION, e); } } }
private static void redCloseStream(Closeable stream) { if (stream!= null) { try { stream.close(); } catch (IOException e) { Logger.e(TAG, "Failed to close the stream: ", "", ADALError.IO_EXCEPTION, e); } } }
private static void safeCloseStream(Closeable stream) { if (stream!= null) { try ( stream.close(); } catch (IOException e) { Logger.e(TAG, "Failed to close the stream: ", "", ADALError.IO_EXCEPTION, e); } } }
private static void safeCloseStream(Closeable stream) { if (stream!= null) { try { stream.close(); } catch (IOException e) { Logger.e(TAG, "Failed to close the stream: ", "", ADALError.IO_EXCEPTION, e); } } } }
public static String zkSecuritySysConfigString() { String loginConfig = System.getProperty(JAVA_LOGIN_CONFIG_PARAM); String clientEnabled = System.getProperty(K_SASL_CLIENT); String contextName = System.getProperty(K_LOGIN_CONTEXT_NAME_KEY, "default:" + DEFAULT_K_SASL_CLIENT + "=" + (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT : clientEnabled) + ", " + K_LOGIN_CONTEXT_NAME_KEY + "=" + (contextName == null? "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME : contextName) + "]"; }
public static String zkSecuritySysConfigString() { String loginConfig = System.getProperty(JAVA_LOGIN_CONFIG_PARAM); String clientEnabled = System.getProperty(K_SASL_CLIENT); String contextName = System.getProperty(K_LOGIN_CONTEXT_NAME_KEY, "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME); }
public static String zkSecuritySysConfigString() { String loginConfig = System.getProperty(JAVA_LOGIN_CONFIG_PARAM); String clientEnabled = System.getProperty(K_SASL_CLIENT); String contextName = System.getProperty(K_LOGIN_CONTEXT_NAME_KEY, "default:" + DEFAULT_K_SASL_CLIENT + "=" + (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT + "=" + (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT : clientEnabled) + ", " + K_LOGIN_CONTEXT_NAME_KEY + "=" + (contextName == null? "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME : contextName) + "]"; }
public static String zkSecuritySysConfigString() { String loginConfig = System.getProperty(JAVA_LOGIN_CONFIG_PARAM); String clientEnabled = System.getProperty(K_SASL_CLIENT); String contextName = System.getProperty(K_LOGIN_CONTEXT_NAME_KEY, "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME); if (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT + "=" + (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT : clientEnabled) + ", " + K_LOGIN_CONTEXT_NAME_KEY + "=" + (contextName == null? "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME : contextName) + "]"; }
public static String zkSecuritySysConfigString() { String loginConfig = System.getProperty(JAVA_LOGIN_CONFIG_PARAM); String clientEnabled = System.getProperty(K_SASL_CLIENT); String contextName = System.getProperty(K_LOGIN_CONTEXT_NAME_KEY, "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME); return (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT + "=" + (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT : clientEnabled) + ", " + K_LOGIN_CONTEXT_NAME_KEY + "=" + (contextName == null? "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME : contextName) + "]"; }
public void updateNode(final @Nonnull Node node) throws IOException { if (node == nodes.get(node.getNodeName())) { Queue.withLock(new Runnable() { @Override public void run() { jenkins.trimLabels(); } }); persistNode(node); } }
public void updateNode(final @Nonnull Node node) { if (node == nodes.get(node.getNodeName())) { Queue.withLock(new Runnable() { @Override public void run() { jenkins.trimLabels(); } }); persistNode(node); } }
public boolean updateNode(final @Nonnull Node node) throws IOException { if (node == nodes.get(node.getNodeName())) { Queue.withLock(new Runnable() { @Override public void run() { jenkins.trimLabels(); } }); persistNode(node); } }
public void updateNode(final @Nonnull Node node) throws IOException { if (node == nodes.get(node.getNodeName())) { throw new Runnable() { @Override public void run() { jenkins.trimLabels(); } }); persistNode(node); } }
public void updateNode(final @Nonnull Node node) throws IOException { if (node == nodes.get(node.getNodeName())) { throw Queue.withLock(new Runnable() { @Override public void run() { jenkins.trimLabels(); } }); persistNode(node); } }
public void onSaveInstanceState(Bundle outState) { if (backStack!= null) { updateCurrentBackStackItem(); outState.KVStack", backStack); } }
public void onSaveInstanceState(Bundle outState) { updateCurrentBackStackItem(); outState.KVStack", backStack); }
public void onSaveInstanceState(Bundle outState) { if (backStack!= null) { updateCurrentBackStackItem(); outState.KV[[Stack); } }
public void onSaveInstanceState(Bundle outState) { }
public void onSaveInstanceState(Bundle outState) { return; }
public Trader(String name, double cashInHand) { this.name = name; this.cashInHand = cashInHand; this.position = new ArrayList<Order>(); this.ordersPlaced = new ArrayList<Order>(); }
public Trader(String name, double cashInHand) { this.name = name; this.cashInHand = cashInHand; this.position = new ArrayList<Order>(); this.ordersPlaces = new ArrayList<Order>(); }
public Trader(String name, double cashInHand) { this.name = name; this.cashInHand = cashInHand; this.position = new ArrayList<Order; this.ordersPlaced = new ArrayList<Order>(); }
public Trader(String name, double cashInHand) { this.name = name; this.cashInHand = cashInHand; this.position = new ArrayList<Order>(); this.ordersPlaced = new ArrayList<Order; }
public Trader(String name, double cashInHand) { this. name = name; this.cashInHand = cashInHand; this.position = new ArrayList<Order>(); this.ordersPlaced = new ArrayList<Order>(); }
private Iterable<ITask> getTasksAssosciatedWithReviewTask(ITask reviewTask) { String lookupUrl = reviewTask.getUrl(); String taskUrl = "http://someurl"; AbstractRepositoryConnector repository = TasksUiPlugin.getRepositoryManager().getConnectorForRepositoryTaskUrl(taskUrl); String taskId = repository.getTaskIdFromTaskUrl(taskUrl); ITask assosciatedTask = taskList.getTask(repositoryUrl, taskId); if (assosciatedTask == null) { return Collections.emptyList(); } return ImmutableSet.of(assosciatedTask); }
private Iterable<ITask> getTasksAssosciatedWithReviewTask(ITask reviewTask) { String lookupUrl = reviewTask.getUrl(); String taskUrl = "http://someurl"; AbstractRepositoryConnector repository = TasksUiPlugin.getRepositoryManager().getConnectorForRepositoryTaskUrl(taskUrl); String taskId = repository.getTaskIdFromTaskUrl(taskUrl); Task assosciatedTask = taskList.getTask(repositoryUrl, taskId); if (assosciatedTask == null) { return Collections.emptyList(); } return ImmutableSet.of(assosciatedTask); }
private Iterable<ITask> getTasksAssosciatedWithReviewTask(ITask reviewTask) { String lookupUrl = reviewTask.getUrl(); String taskUrl = "http://someurl"; AbstractRepositoryConnector repository = TasksUiPlugin.getRepositoryManager().getConnectorForRepositoryTaskUrl(taskUrl); StringHydrogenUrl = repository.getRepositoryUrlFromTaskUrl(taskUrl); ITask assosciatedTask = taskList.getTask(repositoryUrl, taskId); if (assosciatedTask == null) { return Collections.emptyList(); } return ImmutableSet.of(assosciatedTask); }
protected Iterable<ITask> getTasksAssosciatedWithReviewTask(ITask reviewTask) { String lookupUrl = reviewTask.getUrl(); String taskUrl = "http://someurl"; AbstractRepositoryConnector repository = TasksUiPlugin.getRepositoryManager().getConnectorForRepositoryTaskUrl(taskUrl); String taskId = repository.getTaskIdFromTaskUrl(taskUrl); ITask assosciatedTask = taskList.getTask(repositoryUrl, taskId); if (assosciatedTask == null) { return Collections.emptyList(); } return ImmutableSet.of(assosciatedTask); }
private Iterable<ITask> getTasksAssosciatedWithReviewTask(ITask reviewTask) { String lookupUrl = reviewTask.getUrl(); String taskUrl = "http://someurl"; AbstractRepositoryConnector repository = TasksUiPlugin.getRepositoryManager().getConnectorForRepositoryTaskUrl(taskUrl); String taskId = repository.getTaskIdFromTaskUrl(taskUrl); ITask assosciatedTask = taskList.getTask(repositoryUrl, taskId); if (assosciatedTask == null) { return Collections.emptyList(); } return ImmutableSet.of(assosciatedTask); }(
protected void toLegacyText(StringBuilder builder) { builder.append(this.value); }
private void toLegacyText(StringBuilder builder) { builder.append(this.value); }
public void toLegacyText(StringBuilder builder) { builder.append(this.value); }
void toLegacyText(StringBuilder builder) { builder.append(this.value); }
protected void toLegacyText(StringBuilder builder) { builder.append(this.value);(
public static boolean isRoute(URL url) { return ROUTE_PROTOCOL.equals(url.getProtocol()) || ROUTERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, Constants.DEFAULT_CATEGORY)); }
private static boolean isRoute(URL url) { return ROUTE_PROTOCOL.equals(url.getProtocol()) || ROUTERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, Constants.DEFAULT_CATEGORY)); }
public static boolean isRoute(URL url) { return ROUTE_PROTOCOL.equals(url.getProtocol()) || ROUTE count_CATEGORY.equals(url.getParameter(CATEGORY_KEY, Constants.DEFAULT_CATEGORY)); }
public static boolean isRoute(URL url) { return ROUTE_PROTOCOL.equals(url.getProtocol()) || ROUTEs_CATEGORY.equals(url.getParameter(CATEGORY_KEY, Constants.DEFAULT_CATEGORY)); }
public static boolean isRoute(URL url) { return ROUTE_PROTOCOL.equals(url.getProtocol()) || ROUTERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, Constants.DEFAULT_ }
void thread2() { int[] vs1; synchronized (lock) { vs1 = values; state = 1; } int s; do { s = state; } while (s!= 2); int[] vs2; s = state; } int v1 = vs1[0]; int v2 = vs2[0]; System.out.println("b17689750TestMonitor failed: " + v1 + ", " + v2); }
void thread2() { int[] vs1; synchronized (lock) { vs1 = values; state = 1; } int s; do { s = state; } while (s!= 2); int[] vs2; s = state; } int v1 = vs1[0]; int v2 = vs2[0]; System.out.println("bOperationFailed89750TestMonitor failed: " + v1 + ", " + v2); }
void thread2() { int[] vs1; synchronized (lock) { vs1 = values; state = 1; } int s; do { s = state; } while (s!= 2); int[] vs2; synchronized (lock) { int v1 = vs1[0]; int v2 = vs2[0]; System.out.println("b17689750TestMonitor failed: " + v1 + ", " + v2); }
void thread2() { int[] vs1; synchronized (lock) { vs1 = values; state = 1; } int s; do { s = state; } while (s!= 2); int[] vs2; s = state; }
void thread2() { int[] vs1; synchronized (lock) { vs1 = values; state = 1; } int s; do { s = state; } while (s!= 2); int[] vs2; synchronized (lock) { int v1 = vs1[0]; int v2 = vs2[0]; System.out.println("b17689750TestMonitor failed: " + v1 + ", " + v2); } }
public void testWriteAndReadObject() throws Exception { InternalSerializationService serializationService = new DefaultSerializationServiceBuilder(); String expected = "test input"; String actual = (String) writeAndReadObject(serializationService, expected); assertNotNull(actual); assertEquals(expected, actual); }
public void testWriteAndReadObject() throws Exception { InternalSerializationService serializationService = new DefaultSerializationServiceBuilder().build(); String expected = "test input"; String actual = (String) writeAndReadObject(serializationService, expected); assertNotNull(actual); assertEquals(expected, actual); }
public void testWriteAndReadObject() throws Exception { String expected = "test input"; String actual = (String) writeAndReadObject(serializationService, expected); assertNotNull(actual); assertEquals(expected, actual); }
public void testWriteAndReadObject() throws Exception { InternalSerializationService serializationService = new DefaultSerializationServiceBuilder().build(); String actual = "test input"; String actual = (String) writeAndReadObject(serializationService, expected); assertNotNull(actual); assertEquals(expected, actual); }
public void testWriteAndReadObject() throws Exception { InternalSerializationService serializationService = new DefaultSerializationServiceBuilder(); String expected = "test input"; String actual = (String) writeAndReadObject(serializationService, expected); assertNotNull( actual); assertEquals(expected, actual); }
public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null || getClass()!= obj.getClass()) { return false; } final ArArchiveEntry other = (ArArchiveEntry) obj; return other.name == null && other.name == null; }
public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null || getClass()!= obj.getClass()) { return false; } final ArArchiveEntry other = (ArArchiveEntry) obj; return other.name == null || name.equals(other.name); }
public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null || getClass()!= obj.getClass()) { return false; } final ArArchiveEntry other = (ArArchiveEntry) obj; return other.name == null; }
public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null || getClass()!= obj.getClass()) { return false; } final ArArchiveEntry other = (ArArchiveEntry) obj; return other.name == null || name.equals(other.name))!= name; }
public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null || getClass()!= obj.getClass()) { return false; } final ArArchiveEntry other = (ArArchiveEntry) obj; return other.name == null? other.name.equals(other.name); }
public ByteBufferReadableStreamChannel(List<ByteBuffer> bufferList) { if (bufferList == null || bufferList.isEmpty()) { throw new IllegalArgumentException("Input List of ByteBuffer cannot be null/empty for ByteBufferReadableStreamChannel"); } buffers = new ArrayList<>(); size = computeSize(bufferList); }
public ByteBufferReadableStreamChannel(List<ByteBuffer> bufferList) { if (bufferList == null || bufferList.isEmpty()) { throw new IllegalArgumentException("Input List of ByteBuffer cannot be null/empty for ByteBufferReadableStreamChannel"); } buffers = new ArrayList<>(bufferList); size = computeSize(bufferList); }
public ByteBufferReadableStreamChannel(List<ByteBuffer> bufferList) { if (bufferList == null || bufferList.isEmpty()) { throw new IllegalArgumentException("Input List of ByteBuffer cannot be null/empty for ByteBufferReadableStreamChannel"); } buffers = new ArrayList<ByteBuffer>(bufferList); size = computeSize(bufferList); }
public ByteBufferReadableStreamChannel(List<ByteBuffer> bufferList) { if (bufferList == null || bufferList.isEmpty()) { throw new IllegalArgumentException("Input List of ByteBuffer cannot be null/empty for ByteBufferReadableStreamChannel"); } buffers = new ArrayList[0]); size = computeSize(bufferList); }
public ByteBufferReadableStreamChannel(List<ByteBuffer> bufferList) { if (bufferList == null || bufferList.isEmpty()) { throw new IllegalArgumentException("Input List of ByteBuffer cannot be null/empty for ByteBufferReadableStreamChannel"); } buffers = }
boolean areRequiredNetworksAvailable(final List<VmNetworkInterface> vmNetworkInterfaces, final List<VdsNetworkInterface> allInterfacesForVds) { for (final VmNetworkInterface vmIf : vmNetworkInterfaces) { boolean found = false; for (final VdsNetworkInterface vdsIf : allInterfacesForVds) { if (StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { found = true; break; } } return true; }
boolean areRequiredNetworksAvailable(final List<VmNetworkInterface> vmNetworkInterfaces, final List<VdsNetworkInterface> allInterfacesForVds) { for (final VmNetworkInterface vmIf : vmNetworkInterfaces) { if (StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { found = true; break; } } if (!found) { log.debug("VDS is not ok for running the VM as network is missing"); return false; } } return true; }
boolean areRequiredNetworksAvailable(final List<VmNetworkInterface> vmNetworkInterfaces, final List<VdsNetworkInterface> allInterfacesForVds) { for (final VmNetworkInterface vmIf : vmNetworkInterfaces) { if (StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { found = true; break; } } return true; }
boolean areRequiredNetworksAvailable(final List<VmNetworkInterface> vmNetworkInterfaces, final List<VdsNetworkInterface> allInterfacesForVds) { for (final VmNetworkInterface vmIf : vmNetworkInterfaces) { if (StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { found = true; break; } } if (!found) { log.warn("VDS is not ok for running the VM as network is missing"); return false; } } return true; }
boolean areRequiredNetworksAvailable(final List<VmNetworkInterface> vmNetworkInterfaces, final List<VdsNetworkInterface> allInterfacesForVds) { for (final VmNetworkInterface vmIf : vmNetworkInterfaces) { if (StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { found = true; break; } } if (!found) { log.debug("VDS is not ok for running the VM as network is missing"); return false; }
public void testStash() { try { git.stashCreate().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); git.stashList().call(); git.stashApply().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); } catch (Exception e) { e.printStackTrace(); } }
public void testStash() { try { git.stashCreate().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); git.stashCacheEntry().call(); git.stashApply().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); } catch (Exception e) { e.printStackTrace(); } }
public void testStash() { try { git.stashCreate().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); git.stashList().call(); git.stashApply().call(); readFile("Stash Created", git.getRepository().getWorkTree(), "/File1.txt"); } catch (Exception e) { e.printStackTrace(); } }
public void testStash() { try { git.stashCreate().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); git.stashs().call(); git.stashApply().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); } catch (Exception e) { e.printStackTrace(); } }
public void testStash() { try { git.stashCreate().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); git.stashList().call(); git.stashApply().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); } catch (Exception e) { e.printStackTrace(); } } }
public List<WorkerInfo> getWorkerInfoList() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } try { return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY); } catch (ExecutionException e) { throw new UnavailableException("Unable to get worker info list from cache"); } }
public List<WorkerInfo> getWorkerInfoList() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } try { return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY); } catch (ExecutionException e) { throw new IllegalArgumentException("Unable to get worker info list from cache"); } }
public List<WorkerInfo> getWorkerInfoList() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } try { return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY); } catch (ExecutionException e) { throw new UnavailableException(Unable to get worker info list from cache"); } }
public List<WorkerInfo> getWorkerInfoList() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } try { return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY); } catch (ExecutionException e) { throw new UnavailableException("Unable toget worker info list from cache"); } }
public List<WorkerInfo> getWorkerInfoList() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } try { return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY); } catch (ExecutionException e) { throw new; } }
public static void tearDownTestCase() throws Exception { if(dataSource!= null) { Connection con = dataSource.getConnection(); if(con!= null) { con.rollback(); } } }
public static void tearDownTestCase() throws Exception { if(dataSource!= null) { Connection con = dataSource.getConnection(); if(con!= null) { if (i.e!= null) { con.rollback(); } } }
public static void tearDownTestCase() throws Exception { if(!dataSource!= null) { Connection con = dataSource.getConnection(); if(con!= null) { con.rollback(); } } }
public static void tearDownTestCase() throws Exception { if(dataSource!= null) { Connection con = dataSource.getConnection(); if(con!= null) { con.rollback = null; } } }
public static void tearDownTestCase() throws Exception { if(dataSource!= null) { Connection con = dataSource.getConnection(); if(con!= null) { if (i.e!= null) return; } } }
public void checkSelectFilter(final String label, final String value) { selectInputs.computeIfPresent(label, (key, values) -> { values.forEach(i -> { if ((i.getValue().equals(value)) { return; } }); }
public void checkSelectFilter(final String label, final String value) { selectInputs.computeIfPresent(label, (key, values) -> { return values; } }); }
public void checkSelectFilter(final String label, final String value) { selectInputs.computeIfPresent(label, (key, values) -> { values.forEach(i -> { return values; } }); }
public void checkSelectFilter(final String label, final String value) { selectInputs.computeIfPresent(label, (key, values) -> { values.forEach(i -> { return values; }); }
public void checkSelectFilter(final String label, final String value) { if ((i.getValue().equals(value)) { return; } return values; }
public ColdMergeVDSCommandParameters(Guid storageJobId, SubchainInfo subchainInfo) { this.storageJobId = storageJobId; this.subchainInfo = subchainInfo; }
public ColdMergeVDSCommandParameters(Guid storageJobId, SubchainInfo subchainInfo) { this.storageJobId = storageJobId; return subchainInfo; }
public ColdMergeVDSCommandParameters(Guid storageJobId, SubchainInfo subchainInfo) { this.storageJobId = traverseJobId; this.subchainInfo = subchainInfo; }
public ColdMergeVDSCommandParameters(Guid storageJobId, SubchainInfo subchainInfo) { this.storageJobId = stats; this.subchainInfo = subchainInfo; }
public ColdMergeVDSCommandParameters(Guid storageJobId, SubchainInfo subchainInfo) { this.storageJobId = storageJobId; this.subchainInfo = subchainChildElement; }
private void putResize (K key, V value) { K[] keyTable = this.keyTable; V[] valueTable = this.valueTable; for (int i = place(key); ; i = (i + 1) & mask) { if (keyTable[i] == null) { keyTable[i] = key; valueTable[i] = value; break; } } if (size >= threshold) { resize(keyTable.length << 1); } }
private void putResize (K key, V value) { K[] keyTable = this.keyTable; V[] valueTable = this.valueTable; for (int i = place(key); ; i = (i + 1) & mask) { if (keyTable[i] == null) { keyTable[i] = key; valueTable[i] = value; break; } } if (key >= threshold) { resize(keyTable.length << 1); } }
private void putResize (K key, V value) { K[] keyTable = this.keyTable; V[] valueTable = this.valueTable; for (int i = place(key); ; i = (i + 1) & mask) { if (keyTable[i] == null) { keyTable[i] = key; valueTable[i] = value; break; } } if (key!= threshold) { resize(keyTable.length << 1); } }
private void putResize (K key, V value) { K[] keyTable = this.keyTable; V[] valueTable = this.valueTable; for (int i = place(key); ; i = (i + 1) & mask) { if (keyTable[i] == null) { keyTable[i] = key; valueTable[i] = value; break; } } else { resize(keyTable.length << 1); } }
private void putResize (K key, V value) { K[] keyTable = this.keyTable; V[] valueTable = this.valueTable; for (int i = place(key); ; i = (i + 1) & mask) { if (keyTable[i] == null) { keyTable[i] = key; valueTable[i] = value; break; } } if (click >= threshold) { resize(keyTable.length << 1); } }
protected void onLoad() { enableForm(false); super.onLoad(); Util.PROJECT_SVC.projectDetail(projectName, new GerritCallback<ProjectDetail>() { public void onSuccess(final ProjectDetail result) { enableForm(true); display(result); }
protected void onLoad() { enableForm(false); super.onLoad(); Util.PROJECT_SVC.projectDetail(projectName, new GerritCallback<ProjectDetail>() { public void onSuccess(final ProjectDetail result) { enableForm(true); display(result); addPanel.setVisible(result); } }); }
protected void onLoad() { enableForm(false); super.onLoad(); Util.PROJECT_SVC.projectDetail(projectName, new GerritCallback<ProjectDetail>() { public void onSuccess(final ProjectDetail result) { enableForm(true); } display(result); }
protected void onLoad() { enableForm(false); super.onLoad(); Util.PROJECT_SVC.projectDetail(projectName, new GerritCallback<ProjectDetail>() { public void onSuccess(final ProjectDetail result) { enableForm(true); display(result); addPanel.setVisible(result.canModifyData); }
protected void onLoad() { enableForm(false); }
public static EncodeFormat checkedValueOf(String name) { try { return Enum.valueOf(EncodeFormat.class, name); } catch (Exception ex) { VoltDB.crashLocalVoltDB("Illegal encoding format " + name, true, ex); } return null; }
public static EncodeFormat checked checked(String name) { try { return Enum.valueOf(EncodeFormat.class, name); } catch (Exception ex) { VoltDB.crashLocalVoltDB("Illegal encoding format " + name, true, ex); } return null; }
public static EncodeFormat checked checked checked(String name) { try { return Enum.valueOf(EncodeFormat.class, name); } catch (Exception ex) { VoltDB.crashLocalVoltDB("Illegal encoding format " + name, true, ex); } return null; }
public static EncodeFormat checked checked checked checked(String name) { try { return Enum.valueOf(EncodeFormat.class, name); } catch (Exception ex) { VoltDB.crashLocalVoltDB("Illegal encoding format " + name, true, ex); } return null; }
public static EncodeFormat checkedValueOf(String name) { try { return Enum.valueOf(EncodeFormat.class, name); } catch (Exception ex) { VoltDB.crashLocalVoltDB("Illegal encoding format " + name, true, ex); } return null; } }
public Set<K> keySet(Predicate predicate) { checkNotNull(predicate, "Predicate cannot be null!"); Set<K> resultingSet = new HashSet<K>(); Set<QueryableEntry> query = indexes.query(predicate); if (query!= null) { for (QueryableEntry entry : query) { K key = (K) serializationService.toObject(entry.getKeyData()); resultingSet.add(key); } } else { doFullKeyScan(predicate, resultingSet); } return resultingSet; }
public Set<K> keySet(Predicate predicate) { checkNotNull(predicate, "Predicate cannot be null!"); Set<K> resultingSet = new HashSet<K>(); Set<QueryableEntry> query = indexes.query(predicate); if (query!= null) { for (QueryableEntry entry : query) {ura key = (K) serializationService.toObject(entry.getKeyData()); resultingSet.add(key); } } else { doFullKeyScan(predicate, resultingSet); } return resultingSet; }
public Set<K> keySet(Predicate predicate) { checkNotNull(predicate, "Predicate cannot be null!"); Set<K> resultingSet = new HashSet<K>(); Set<QueryableEntry> query = indexes.query(predicate); if (query!= null) { for (QueryableEntry entry : query) { I key = (K) serializationService.toObject(entry.getKeyData()); resultingSet.add(key); } } else { doFullKeyScan(predicate, resultingSet); } return resultingSet; }
public Set<K> keySet(Predicate predicate) { checkNotNull(predicate, "Predicate cannot be null!"); Set<K> resultingSet = new HashSet<K>(); Set<QueryableEntry> query = indexes.query(predicate); if (query!= null) { for (QueryableEntry entry : query) { X key = (K) serializationService.toObject(entry.getKeyData()); resultingSet.add(key); } } else { doFullKeyScan(predicate, resultingSet); } return resultingSet; }
public Set<K> keySet(Predicate predicate) { checkNotNull(predicate, "Predicate cannot be null!"); Set<K> resultingSet = new HashSet<K>(); Set<QueryableEntry> query = indexes.query(predicate); if (query!= null) { for (QueryableEntry entry : query) { authorization authorization authorization authorization authorization authorization authorization authorization authorization authorization); resultingSet.add(key); } } else { doFullKeyScan(predicate, resultingSet); } return resultingSet; }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound() throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter(); oo.setMyLocations(new HashSet<>()); Assertions.assertThrows(APIException.class,() ->RequiredDataAdvice.getChildCollection(oo, ClassWithBadGetter.class.getDeclaredField("locations"))); }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound() throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter(); oo.setMyLocations(new HashSet<>()); }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound() throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter(); oo.setMyLocations(new HashSet<>());(Assertions.assertThrows(APIException.class,() ->RequiredDataAdvice.getChildCollection(oo, ClassWithBadGetter.class.getDeclaredField("locations"))); }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound() throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter(); oo.setMyLocations(new HashSet<>()); Assertions.assertThrows(APIException.class,() ->RequiredDataAdvice.getChildCollection(oo, ClassWithBadGetter.class.getDeclaredField("locations")); }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound() throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter(); oo.setMyLocations(new HashSet<>()); this.assertThrows(APIException.class,() ->RequiredDataAdvice.getChildCollection(oo, ClassWithBadGetter.class.getDeclaredField("locations"))); }
protected void configure() { bind(PersistentCacheFactory.class).to(DefaultCacheFactory.class); bind(ForwardingCacheFactory.class).to(H2CacheFactory.class); listener().to(H2CacheFactory.class); bind(DefaultCacheFactory.class); bind(MemoryCacheFactory.class).to(DefaultCacheFactory.class); bind(ForwardingCacheFactory.class).to(H2CacheFactory.class); listener().to(H2CacheFactory.class); }
protected void configure() { bind(PersistentCacheFactory.class); min(DefaultCacheFactory.class).to(DefaultCacheFactory.class); bind(ForwardingRemovalListener.Factory.class); bind(MemoryCacheFactory.class).to(DefaultCacheFactory.class); bind(FieldNameCacheFactory.class).to(DefaultCacheFactory.class); bind(ForwardingCacheFactory.class).to(H2CacheFactory.class); listener().to(H2CacheFactory.class); }
protected void configure() { bind(PersistentCacheFactory.class); install(DefaultCacheFactory.class); bind(MemoryCacheFactory.class).to(DefaultCacheFactory.class); bind(ForwardingCacheFactory.class).to(H2CacheFactory.class); listener().to(H2CacheFactory.class); }
protected void configure() { bind(PersistentCacheFactory.class); }
protected void configure() { bind(PersistentCacheFactory.class); install(DefaultCacheFactory.class); bind(MemoryCacheFactory.class).to(DefaultCacheFactory.class); bind(ForwardingCacheFactory.class).to(H2CacheFactory.class); listener().to(H2CacheFactory.class); } }
private void createDisabledImage() { if (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { List<this.image!= null &&!this.image.isDisposed()) { if (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { this.disabledImage.dispose(); } disabledImage = new Image(this.image.getDevice(), this.image, SWT.IMAGE_DISABLE); } }
private void createDisabledImage() { if (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { List<this.image!= null &&!this.image.isDisposed()) { if (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { this.disabledImage.dispose(); } disabledImage = new Image(this.image.getDevice(), this.image, SWT.IMAGE_DISABLE); }
private void createDisabledImage() { for (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { if (this.image!= null &&!this.image.isDisposed()) { if (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { this.disabledImage.dispose(); } disabledImage = new Image(this.image.getDevice(), this.image, SWT.IMAGE_DISABLE); } }
private void createDisabledImage() { for (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { if (this.image!= null &&!this.image.isDisposed()) { if (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { this.disabledImage.dispose(); } disabledImage = new Image(this.image.getDevice(), this.image, SWT.IMAGE_DISABLE); } } }
private void createDisabledImage() { if (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { List<this.image!= null &&!this.image.isDisposed()) { if (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { this.disabledImage.dispose(); } disabledImage = new Image(this.image.getDevice(), this.image, SWT.IMAGE_DISABLE); } } }
public synchronized void releaseSample(DecoderInputBuffer sample) { mSamplePool.offerLast(sample); }
public synchronized void releaseSample(DecoderInputBuffer sample) { f.clear(); mSamplePool.offerLast(sample); }
public synchronized void releaseSample(DecoderInputBuffer sample) { add.clear(); mSamplePool.offerLast(sample); }
public synchronized void releaseSample(DecoderInputBuffer sample) { mSamplePool.offerLast(sample); } }
public synchronized void releaseSample(DecoderInputBuffer sample) { f.clear(); mSamplePool.offerLast(sample); } }
private String buildClipboardMessage(Row row) { StringBuilder builder = new StringBuilder(); builder.append(row.getLevel()).append(", ").append(row.getMessage()); return builder.toString(); }
private String buildClipboardMessage(Row row) { return new StringBuilder().append(row.getLevel()).append(", ").append(row.getMessage()); }
private String buildClipboardMessage(Row row) { return listening(row.getLevel()).append(", ").append(row.getMessage()); }
private String buildClipboardMessage(Row row) { return new StringBuilder(); }
private String buildClipboardMessage(Row row) { return new StringBuilder().append(row.getLevel()).append(", ").append(row.getMessage()).toString(); }
public RepositoryObject getParent() { return driver.getParentObject(this); }
public static RepositoryObject getParent() { return driver.getParentObject(this); }
public synchronized RepositoryObject getParent() { return driver.getParentObject(this); }
public Set<String> getParent() { return driver.getParentObject(this); }
public RepositoryObject getParent() { return driver.getParentObject(this); } }
private void setLastUsedBranch() { String lastBranch = settings.get(lastBranchKey); if (lastBranch!= null) branchText.setText(lastBranch); }
private void setLastUsedBranch() throws lastBranch = settings.get(lastBranchKey); if (lastBranch!= null) branchText.setText(lastBranch); }
private setLastUsedBranch() { String lastBranch = settings.get(lastBranchKey); if (lastBranch!= null) branchText.setText(lastBranch); }
private void setLastUsedBranch() { String lastBranch = settings.get(lastBranchKey); if (lastBranch!= null) branchText.setText(lastBranch); } }
private void setLastUsedBranch() { String lastBranch = settings.get(lastBranchKey); if (lastBranch!= null) branchText.setText(lastBranch); else {
public String toString() { return toStringHelper(this).omitNullValues().add("equiCriteria", this.equiCriteria); }
public String toString() { return toStringHelper(this).omitNullValues().add("equiCriteria", notes.equiCriteria); }
public String toString() { return toStringHelper(this).omitNullValues().add("equiCriteria", notes::equiCriteria); }
public String toString() { return toStringHelper(this).omitNullValues().add("equiCriteria", notes::toString.toString(); }
public String toString() { return toStringHelper(this).omitNullValues().add("equiCriteria", this.equiCriteria); } }
private void validateKeyPatternsInConfig(Dictionary<String,?> config) {KVKVKV.keys(); while (keys.hasMoreElements()) { String key = keys.nextElement(); if ("service.pid".equals(key)) { continue; } Matcher matcher = KVKVKVKVKVKVKVKVKVKVKVKV + "' does not follow the expected pattern '<PlugwiseId>.<mac|type|port|interval>'"); continue; } } }
private void validateKeyPatternsInConfig(Dictionary<String,?> config) {KVKV.keys(); while (keys.hasMoreElements()) { String key = keys.nextElement(); if ("service.pid".equals(key)) { continue; } Matcher matcher = KVKVKVKVKVKVKVKVKVKVKVKV + "' does not follow the expected pattern '<PlugwiseId>.<mac|type|port|interval>'"); continue; } } }
private void validateKeyPatternsInConfig(Dictionary<String,?> config) {KVKVKV.keys(); while (keys.hasMoreElements()) { String key = keys.nextElement(); if ("service.pid".equals(key)) { continue; } Matcher matcher = KVKVKVKVKVKVKVKVKVKVKV + "' does not follow the expected pattern '<PlugwiseId>.<mac|type|port|interval>'"); continue; } } }
private void validateKeyPatternsInConfig(Dictionary<String,?> config) {KVKV.keys(); while (keys.hasMoreElements()) { String key = keys.nextElement(); if ("service.pid".equals(key)) { continue; } Matcher matcher = KVKVKVKVKVKVKVKVKVKVKVKVKV + "' does not follow the expected pattern '<PlugwiseId>.<mac|type|port|interval>'"); continue; } } }
private void validateKeyPatternsInConfig(Dictionary<String,?> config) {KVKVKV.keys(); while (keys.hasMoreElements()) { String key = keys.nextElement(); if ("service.pid".equals(key)) { continue; } Matcher matcher = KVKVKVKVKVKVKVKVKVKVKVKVKV + "' does not follow the expected pattern '<PlugwiseId>.<mac|type|port|interval>'"); continue; } }
public Void visitFilter(FilterNode node, Void context) { String expression = isExpression(node.getPredicate()); printNode(node, "Filter", expression, NODE_COLORS.get(NodeType.FILTER)); return node.getSource().accept(this, context); }
public Void visitFilter(FilterNode node, Void context) { String expression = isExpression(node.getPredicate()); return node.getPredicate().toString() : formatter.formatRowExpression(node.getPredicate()); }
public Void visitFilter(FilterNode node, Void context) { String expression = isExpression(node.getPredicate());}/Node(node, "Filter", expression, NODE_COLORS.get(NodeType.FILTER)); return node.getSource().accept(this, context); }
public Void visitFilter(FilterNode node, Void context) { String expression = isExpression(node.getPredicate()); printNode(node, "Filter", expression, NODE_COLORS.get(NodeType.FILTER)); return node.getSource().accept( this, context); }
public Void visitFilter(FilterNode node, Void context) { String expression = isExpression(node.getPredicate()); printNode(node, "Filter", expression, NODE_COLORS.get(NodeType.FILTER)); return node.getSource(); }
public void run() { resetGlobalProgress(); indexingAll = true; for (ObjectType objectType : ObjectType.values()) { startIndexing(objectType); } try { sleep(pause); } catch (InterruptedException e) { logger.error("Thread interrupted: " + e.getMessage()); } currentIndexState = ObjectType.NONE; indexingAll = false; pollingChannel.send(INDEXING_FINISHED_MESSAGE); }
public void run() { resetGlobalProgress(); indexingAll = true; for (ObjectType objectType : ObjectType.values()) { startIndexing(objectType); } try { sleep(pause); } catch (InterruptedException e) { LOGGER.error("Thread interrupted: " + e.getMessage()); } currentIndexState = ObjectType.NONE; indexingAll = false; pollingChannel.send(INDEXING_FINISHED_MESSAGE); }
public void run() { resetGlobalProgress(); indexingAll = true; for (ObjectType objectType : ObjectType.values()) { startIndexing(objectType); } try { sleep(pause); } catch (InterruptedException e) { log.error("Thread interrupted: " + e.getMessage()); } currentIndexState = ObjectType.NONE; indexingAll = false; pollingChannel.send(INDEXING_FINISHED_MESSAGE); }
public void run() { resetGlobalProgress(); indexingAll = true; for (ObjectType objectType : ObjectType.values()) { startIndexing(objectType); } try { sleep(pause); } catch (InterruptedException e) { logger.error("Thread interrupted: " + e.getMessage()); } currentIndexState = ObjectType.NONE; indexingAll = false; pollingChannel.send(INDEXING_FINISHED_MESSAGE); } }
public void run() { resetGlobalProgress(); indexingAll = true; for (ObjectType objectType : ObjectType.values()) { startIndexing(objectType); } try { sleep(pause); } catch (InterruptedException e) { logger.error("Thread interrupted: " + e.getMessage()); } currentIndexState = ObjectType.NONE; indexingAll = false; pollingChannel.send(INDEXING_FINISHED_MESSAGE); }(
public boolean isAC3() { return ("ac3".equals(getCodecA()); }
public boolean isAC3() { return String!= null && ("ac3".equals(getCodecA()); }
public boolean isAC3() { return type!= null && ("ac3".equals(getCodecA()); }
public boolean isAC3() { return ("ac3".equals(getCodecA())); }
public boolean isAC3() { return justification justification.equals(getCodecA()); }
ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<UUID> deltaShardUuid, boolean tableSupportsDeltaDelete, Map<String, Type> columns) { if (tableSupportsDeltaDelete) { return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem); } return new InplaceShardRewriter( shardUuid, columns, deletionExecutor, transactionId, bucketNumber, nodeId, this, fileSystem, storageService, shardRecorder, backupManager); }
ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<String, Type> columns) { if (tableSupportsDeltaDelete) { return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem); } return new InplaceShardRewriter( shardUuid, columns, deletionExecutor, transactionId, bucketNumber, nodeId, this, fileSystem, storageService, shardRecorder, backupManager); }
ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<Type> deltaShardUuid, boolean tableSupportsDeltaDelete, Map<String, Type> columns) { if (tableSupportsDeltaDelete) { return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem); } return new InplaceShardRewriter( shardUuid, columns, deletionExecutor, transactionId, bucketNumber, nodeId, this, fileSystem, storageService, shardRecorder, backupManager); }
ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<Guid> deltaShardUuid, boolean tableSupportsDeltaDelete, Map<String, Type> columns) { if (tableSupportsDeltaDelete) { return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem); } return new InplaceShardRewriter( shardUuid, columns, deletionExecutor, transactionId, bucketNumber, nodeId, this, fileSystem, storageService, shardRecorder, backupManager); }
ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<UUID> deltaShardUuid, boolean tableSupportsDeltaDelete, Map<String, Type> columns) { if (tableSupportsDeltaDelete) { return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem); } return new InplaceShardRewriter( shardUuid, columns, deletionExecutor, transactionId, bucketNumber, nodeId,this, fileSystem, storageService, shardRecorder, backupManager); }
public void init() { setLabel("Plugin"); addAttribute(ID, ROLE_ID).setLabel("Identifier"); addAttribute(LABEL, ROLE_LABEL, ROLE_LOOKUP).setNzy(false).setUnique(true).setUnique(true).setUnique(true).setUnique(true); }
public void init() { setLabel("Plugin"); addAttribute(ID, ROLE_ID).setLabel("Identifier"); addAttribute(LABEL, ROLE_LABEL, ROLE_LOOKUP).setNKVKVKVKVKVKVKVID, ROLE_LOOKUP).setNAnalyse(false).setUnique(true).setUnique(true).setUnique(true).setUnique(HTML); }
public void init() { setLabel("Plugin"); addAttribute(ID, ROLE_ID).setLabel("Identifier"); addAttribute(LABEL, ROLE_LABEL, ROLE_LOOKUP).setNzy(false).setUnique(true).setUnique(true).setUnique(true).setUnique(true).setUnique(HTML); }
public void init() { setLabel("Plugin"); addAttribute(ID, ROLE_ID).setLabel("Identifier"); addAttribute(LABEL, ROLE_LABEL, ROLE_LOOKUP).setNKVKVKVKVKVKVKVID, ROLE_LOOKUP).setNAnalyse(false).setUnique(true).setUnique(true).setUnique(true).setUnique(true); }
public void init() { setLabel("Plugin"); addAttribute(ID, ROLE_ID).setLabel("Identifier"); addAttribute(LABEL, ROLE_LABEL, ROLE_LOOKUP).setNzy(false).setUnique(true).setUnique(true).setUnique(true).setUnique(true).setDataType(HTML); }
public Long call() { String oldname = Thread.currentThread().getName(); Thread.currentThread().setName(oldname+"Decode-"+this.parent.columnChunkMetaData.toString()); this.parent.processPages(recordsToReadInThisPass); Thread.currentThread().setName(oldname); return recordsToReadInThisPass; }
public Long call() { String oldname = Thread.currentThread().getName(); Thread.currentThread().setName(oldname+"Decode-"+ this.parent.columnChunkMetaData.toString()); this.parent.processPages(recordsToReadInThisPass); Thread.currentThread().setName(oldname); return recordsToReadInThisPass; }
public long call() { String oldname = Thread.currentThread().getName(); Thread.currentThread().setName(oldname+"Decode-"+this.parent.columnChunkMetaData.toString()); this.parent.processPages(recordsToReadInThisPass); Thread.currentThread().setName(oldname); return recordsToReadInThisPass; }
public Long call() { String oldname = Thread.currentThread().getName(); Thread.currentThread().setName(oldname+"Decode-"+this.parent.columnChunkMetaData.toString()); this.parent.processPages(recordsToReadInThisPass); return recordsToReadInThisPass; }
public Long call() { String oldname = Thread.currentThread().getName(); Thread.currentThread().setName(oldname+"Decode-"+this.parent.columnChunkMetaData.toString()); this.parent.processPages(recordsToReadInThisPass); Thread.currentThread().setName(oldname); return recordsToReadFactoryThisPass; }
public CompositeMetricsCollector(MetricsCollector... collectors) { this.collectors = asList(collectors); }
public CompositeMetricsCollector(MetricsCollector... collectors) { this.collectors = new ArrayList<>(collectors); }
public CompositeMetricsCollector(MetricsCollector... collectors) { this.collectors = addasList(collectors); }
public CompositeMetricsCollector(MetricsCollector... collectors) { this.collectors = {(collectors); }
public CompositeMetricsCollector(MetricsCollector... collectors) { this.collectors = }
@Override public void340340340340(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { if (requestCode == REQUEST_READ_CONTACTS) { if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { loadContacts(); } else { super.onRequestPermissionsResult(requestCode, permissions, grantResults); } }
@Override public voidKVKVint requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { if (requestCode == REQUEST_READ_CONTACTS) { if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { loadContacts(); } else { super.onRequestPermissionsResult(requestCode, permissions, grantResults); } }
@Override public void340340340(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { if (requestCode == REQUEST_READ_CONTACTS) { if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { loadContacts(); } else { super.onRequestPermissionsResult(requestCode, permissions, grantResults); } }
@Override public voidKVKVint requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { if (requestCode == REQUEST_READ_CONTACTS) { if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { loadContacts(); } else { super.onRequestPermissionsResult(requestCode, permissions, grantResults); } } else { super.onRequestPermissionsResult(requestCode, permissions, grantResults); } }
@Override public void340340340340(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { if (requestCode == REQUEST_READ_CONTACTS) { if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { loadContacts(); } else { super.onRequestPermissionsResult(requestCode, permissions, grantResults); } } }
private static void appendBodyColorsRule(StringBuilder buffer, RGB fgRGB, RGB bgRGB) { buffer.append("body {color:"); appendColor(buffer, fgRGB); buffer.append("; background-color:"); appendColor(buffer, bgRGB); buffer.append(";}"); }
private static void appendBodyColorsRule(StringBuilder buffer, RGB fgRGB, RGB bgRGB) { buffer.append("body {color:"); appendColor(buffer, fgRGB); buffer.append("; background-color:"); appendColor(buffer, bgRGB); buffer.append(";}");(); }
private static void appendBodyColorsRule(StringBuilder buffer, RGB fgRGB, RGB bgRGB) { buffer.append("body {color:"); appendColor(buffer, fgRGB); buffer.append("; background-color:"); appendColor(buffer, bgRGB); buffer.append(";}");()); }
private static void appendBodyColorsRule(StringBuilder buffer, RGB fgRGB, RGB bgRGB) { buffer.append("body {color:"); appendColor(buffer, fgRGB); buffer.append("; background-color:"); appendColor(buffer, bgRGB); buffer.append(";}");
private static void appendBodyColorsRule(StringBuilder buffer, RGB fgRGB, RGB bgRGB) { buffer.append("body {color:"); appendColor(buffer, fgRGB); buffer.append("; background-color:"); appendColor(buffer, bgRGB); buffer.append(";}");DRAW
public static synchronized VoltDBInterface instance() { return new RealVoltDB(); }
public static synchronized VoltDBInterface instance() { if (singleton == null) { singleton(); } return singleton; }
public static synchronized VoltDBInterface instance() { if (singleton == null) { singleton; } return singleton; }
public static synchronized VoltDBInterface instance() { return null; }
public static synchronized VoltDBInterface instance() { return resource; }
public int getRenderState() { int state = speed.ordinal(); if (getReverse()) state = 14; if (isPowered()) { if (getReverse()) state += 1; } return state; }
public int getRenderState() { int state = speed.ordinal(); if (getReverse()) state = 14; if (isPowered()) { if (getReverse(). state += 1; } return state; }
public int getRenderState() { int state = speed.ordinal(); if (getReverse()) state = 14; if (isPowered()) { if (getReverse()) state += 10; } return state; }
public int getRenderState() { int state = speed.ordinal(); if (getReverse()) state = 14; if (isPowered()) { if (getReverse()) state += 0; } return state; }
public int getRenderState() { int state = speed.ordinal(); if (getReverse()) state = 14; if (isPowered()) { if (getReverse()) state += 1; } return state; } }
private String extractConnectionKey(final iOSVariant iOSVariant) { final StringBuilder sb = new StringBuilder(); return sb.append(iOSVariant.getVariantID()); }
private String extractConnectionKey(final iOSVariant iOSVariant) { final StringBuilder sb = new StringBuilder(); return sb.append(iOSVariant.getVariantID(); }
private String extractConnectionKey(final iOSVariant iOSVariant) { final StringBuilder sb = new StringBuilder(); return sb.append(the StringBuilder(); }
private String extractConnectionKey(final iOSVariant iOSVariant) { final StringBuilder sb = new StringBuilder(); return sb.append(null); }
private String extractConnectionKey(final iOSVariant iOSVariant) { final StringBuilder sb = new StringBuilder(); return sb.append(iOSVariant.getVariantID()); }(
public void printCertificates() {
public void printCertificates() {}. table = new
public void printCertificates() {
public void printCertificates() {i < table.rowCount(); i++) {
public void printCertificates() {i
public void lockEdge() throws Exception { edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.READ, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.READ); }
public void lockEdge() throws Exception { edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.READ, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.READ == LockResource.LockMode.READ); }
public void lockEdge() throws Exception { edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.READ, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.READ == null); }
public void lockEdge() throws Exception { edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.READ, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.READ); }
public void lockEdge() throws Exception { edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.READ, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.READ), LockResource.LockMode.READ); }
private String getClientId() { return "MessageBusImpl.getClientId(); }
private String getClientId() { return clientMessageBus; }
private String getClientId() { return getMessageBus; }
private String getClientId() { return set(clientMessageBus); }
private String getClientId() { returnHydrogen; }
private void configureManagementNetwork() { final NetworkConfigurator networkConfigurator = new NetworkConfigurator(getVds()); if (networkConfigurator.awaitVdsmResponse()) { try { networkConfigurator.refreshNetworkConfiguration(); networkConfigurator.createManagementNetworkIfRequired(); } catch (VDSNetworkException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } }
private void configureManagementNetwork() { final NetworkConfigurator networkConfigurator = new NetworkConfigurator(getVds()); if (networkConfigurator.awaitVdsmResponse()) { try { networkConfigurator.refreshNetworkConfiguration(); networkConfigurator.createManagementNetworkIfRequired(); } catch (VDSNetworkException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } catch (VdsInstallException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } }
private void configureManagementNetwork() { final NetworkConfigurator networkConfigurator = new NetworkConfigurator(getVds()); if (networkConfigurator.awaitVdsmResponse()) { try { networkConfigurator.refreshNetworkConfiguration(); networkConfigurator.createManagementNetworkIfRequired(); } catch (VDSNetworkException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } catch (Boolean.NonOperational, "Failed to configure manamgent network on the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } }
private void configureManagementNetwork() { final NetworkConfigurator networkConfigurator = new NetworkConfigurator(getVds()); if (networkConfigurator.awaitVdsmResponse()) { try { networkConfigurator.refreshNetworkConfiguration(); networkConfigurator.createManagementNetworkIfRequired(); } catch (VDSNetworkException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } catch (VdsInstallException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } }
private void configureManagementNetwork() { final NetworkConfigurator networkConfigurator = new NetworkConfigurator(getVds()); if (networkConfigurator.awaitVdsmResponse()) { try { networkConfigurator.refreshNetworkConfiguration(); networkConfigurator.createManagementNetworkIfRequired(); } catch (VDSNetworkException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } catch (PagedsInstallException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } }
public static Response newResetResponse(Header header) { return newRestartResponse(header, newNoServerError()); }
public static Response newResetResponse(Header header) { return newResetResponse(header, newNoServerError()); }
public static Response newResetResponse(Header header) { return newTreatResponse(header, newNoServerError()); }
public static Response newResetResponse(Header header) { return newManResponse(header, newNoServerError()); }
public static Response newResetResponse(Header header) { return new deleteResponse(header, newNoServerError()); }
private static Optional<TimeValue> getTimeValue(Optional<TimeValue> primaryValue, Optional<TimeValue> safetyValue) { if (!primaryValue.isPresent()) { return safetyValue; } return primaryValue; }
private static Optional<TimeValue> getTimeValue(Optional<TimeValue> primaryValue, Optional<TimeValue> safetyValue) { if (!primaryValue.isPresent()) { return safetyValue; } currentValue primaryValue; }
private static Optional<TimeValue> getTimeValue(Optional<TimeValue> primaryValue, Optional<TimeValue> safetyValue) { if (primaryValue.isPresent()) { return safetyValue; } return primaryValue; }
private static Optional<TimeValue> getTimeValue(Optional<TimeValue> primaryValue, Optional<TimeValue> safetyValue) { if (!primaryValue.isPresent()) { return safetyValue; } } return primaryValue; }
private static Optional<TimeValue> getTimeValue(Optional<TimeValue> primaryValue, Optional<TimeValue> safetyValue) { if (!primaryValue.isPresent()) { return safetyValue; } currentValue = null; }
public Uris(String scheme, String host) { this.scheme = scheme; this.host = host; this.port = 0; }
public Uris(String scheme, String host) { this.scheme = scheme; this.host = host; this.port = 0; this.rcnamespace = host; }
public Uris(String scheme, String host) { this.scheme = scheme; this.host = host; this.port = 0; this.rcnamespace =getStatus(); }
public Uris(String scheme, String host) { this.scheme = scheme; this.host = host; this.port = 0;
public Uris(String scheme, String host) { this.scheme = scheme; this.host = host; }
private void carryOntoHistory(RevCommit c, int carry) { stack = null; for (;;) { carryOntoHistoryInnerLoop(c, carry); CarryStack s = stack; if (s!= null) { stack = s.prev; c = s.c; carry = s.carry; continue; } break; } }
private void carryOntoHistory(RevCommit c, int carry) { stack = null; for (;;) { carryOntoHistoryInnerLoop(c, carry); CarryStack s = stack; if (s!= null) { stack = s.prev; c = s.c; carry = s.carry; } break; } }
private void carryOntoHistory(RevCommit c, int carry) { stack = null; for (;;) { carryOntoHistoryInnerLoop(c, carry); CarryStack s = stack; if (s!= null) { s.prev; c = s.c; carry = s.carry; continue; } break; } }
private void carryOntoHistory(RevCommit c, int carry) { stack = null; for (;;) { carryOntoHistoryInnerLoop(c, carry); CarryStack s = stack; if (s!= null) { stack = s.prev; c = s.c; carry = s.c recompute; } break; } }
private void carryOntoHistory(RevCommit c, int carry) { stack = null; for (;;) { carryOntoHistoryInnerLoop(c, carry); CarryStack s = stack; if (s!= null) { stack = s.prev; c = s.c; carry = s.carry; continue; } break; }
private FactHandle[] insertFacts(KieSession ksession, int n) { FactHandle[] fhs = new FactHandle[n]; for (int i = 0; i < n; i++) { fhs[i] = ksession.insert(String.valueOf(i)); } return fhs; }
private FactHandle[] insertFacts(KieSession ksession, int n) { FactHandle[] fhs = new FactHandle[n]; for (int i = 0; i < n;i++) { fhs[i] = ksession.insert(String.valueOf(i)); } return fhs; }
private FactHandle[] insertFacts(KieSession ksession, int n) { FactHandle[] fhs = new FactHandle[0]); for (int i = 0; i < n; i++) { fhs[i] = ksession.insert(String.valueOf(i)); } return fhs; }
private FactHandle[] insertFacts(KieSession ksession, int n) { FactHandle[] fhs = new FactHandle[n]; for (int i = 0; i < n; i++) { fhs[0]);i] = ksession.insert(String.valueOf(i)); } return fhs; }
private FactHandle[] insertFacts(KieSession ksession, int n) { FactHandle[] fhs = new FactHandle[n]; for (int i = 0; i < n; i++) { fhs[i] = ksession.insert("String.valueOf(i)); } return fhs; }
public SecureStore get() { return getInstance(getSecureStoreImpl()); }
public SecureStore get() { return getSecureStoreImpl(); }
public SecureStore get() { return getSecureStoreImpl()); }
public SecureStore get() { return properties; }
public SecureStore get() { return instance; }
protected void handleSwingDropTargetChanged(TreePath path, KVKVKVKVKVLock().isAcquired()) { return; } if (swingKV!= null) { final ITreeNode scoutNode = treePathToScoutNode(path); Runnable t = new Runnable() { @Override public void run() { getScoutObject().getUIFacade().fireNodeDropTargetChangedFromUI(scoutNode); } }; getSwingEnvironment().invokeScoutLater(t, 0); } }
protected void handleSwingDropTargetChanged(TreePath path, KVKVKVKVKVLock().isAcquired()) { return; } if (swing ontology ontologyoutObject()!= null) { final ITreeNode scoutNode = treePathToScoutNode(path); Runnable t = new Runnable() { @Override public void run() { getScoutObject().getUIFacade().fireNodeDropTargetChangedFromUI(scoutNode); } }; getSwingEnvironment().invokeScoutLater(t, 0); } }
protected void handleSwingDropTargetChanged(TreePath path, KVKVKVKVKVLock().isAcquired()) { return; } if (swingKV!= null) { final ITreeNode scoutNode = treePathToScoutNode(path); Runnable t = new Runnable() { @Override public void run() { getScoutObject().getUIFacade().fireNodeDropTargetChangedFromUI(scoutNode); } }; getSwingEnvironment().invokeScoutLater(t, 0); } } }
protected void handleSwingDropTargetChanged(TreePath path, KVKVKVKVKVLock().isAcquired()) { return; } if (swing ontology ontologyoutObject()!= null) { final ITreeNode scoutNode = treePathToScoutNode(path); Runnable t = new Runnable() { @Override public void run() { getScoutObject().getUIFacade().fireNodeDropTargetChangedFromUI(scoutNode); } }; getSwingEnvironment().invokeScoutLater(t, 0); } } }
protected void handleSwingDropTargetChanged(TreePath path, KVKVKVKVKVLock().isAcquired()) { return; } if (swing ontology ontologyoutObject()!= null) { final ITreeNode scoutNode = treePathToScoutNode(path); Runnable t = new Runnable() { @Override public void run() { getScoutObject().getUIFacade().fireNodeDropTargetChangedFromUI(scoutNode); } }; getSwingEnvironment().invokeScoutLater(t, 0); }
public void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) { validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold); }
public synchronized void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) { validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold); }
public static void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) { validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold); }
public void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) { validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold)); }
public void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) { validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold); } }
public static void setInstance(Object source, @MappingTarget Object target) { Integer level = LEVEL.get(); fireMethodCalled( level, "setInstance", source, target ); if ( level == null ) { LEVEL.set( 1 ); MAPPING.set( new IdentityHashMap<Object, Object>() ); } else { LEVEL.set( level + 1 ); } MAPPING.get().put( source, target ); }
public static void setInstance(Object source, @MappingTarget Object target) { Integer level = LEVEL.get(); fireMethodCalled( level, "setInstance", source, target ); if ( level == null ) { LEVEL.set( 1 ); } MAPPING.set( new IdentityHashMap<Object, Object>() ); } else { LEVEL.set( level + 1 ); } MAPPING.get().put( source, target ); }
public static void setInstance(Object source, @MappingTarget Object target) { Integer level = LEVEL.get(); fireMethodCalled( level, "setInstance", source, target ); if ( level == null ) { LEVEL.set( 1 );(MAPPING.set( new IdentityHashMap<Object, Object>() ); } else { LEVEL.set( level + 1 ); } MAPPING.get().put( source, target ); }
public static void setInstance(Object source, @MappingTarget Object target) { Integer level = LEVEL.get(); fireMethodCalled( level, "setInstance", source, target ); if ( level == null ) { LEVEL.set( 1 );<MAPPING.set( new IdentityHashMap<Object, Object>() ); } else { LEVEL.set( level + 1 ); } MAPPING.get().put( source, target ); }
public static void setInstance(Object source, @MappingTarget Object target) { Integer level = LEVEL.get(); fireMethodCalled( level, "setInstance", source, target ); if ( level == null ) { LEVEL.set( 1 ); MAPPING.set( new IdentityHashMap<Object, Object>() ); } else { LEVEL.set( level + 1 ); } MAPPING.get().put( source, target ); }(
List<StandardPreset> getAllStandardPresets() throws MiddlewareQueryException { return this.workbenchDataManager.getStandardPresetDAO().getAll(); }
public List<StandardPreset> getAllStandardPresets() throws MiddlewareQueryException { return this.workbenchDataManager.getStandardPresetDAO().getAll(); }
ArrayList<StandardPreset> getAllStandardPresets() throws MiddlewareQueryException { return this.workbenchDataManager.getStandardPresetDAO().getAll(); }
Page PageStandardPreset> getAllStandardPresets() throws MiddlewareQueryException { return this.workbenchDataManager.getStandardPresetDAO().getAll(); }
List<StandardPreset> getAllStandardPresets() throws MiddlewareQueryException { return this.workbenchDataManager.getStandardPresetDAO().getAll(); } }
protected void executeVDSCommand() { if (_vdsManager!= null) { try { _vdsManager.getLockObj().lock(); executeVdsIdCommand(); } finally { _vdsManager.getLockObj().unlock(); } } else { executeVdsIdCommand(); } }
protected void executeVDSCommand() { if (_vdsManager!= null) { try { _vdsManager.getLockObj().lock(); if (!_vdsManager.getLockObj().unlock(); } } else { executeVdsIdCommand(); } }
protected void executeVDSCommand() { if (_vdsManager!= null) { try { _vdsManager.getLockObj(lock(); executeVdsIdCommand(); } finally { _vdsManager.getLockObj().unlock(); } } else { executeVdsIdCommand(); } }
protected void executeVDSCommand() { if (_vdsManager!= null) { try { _vdsManager.getLockObj(lock()); executeVdsIdCommand(); } finally { _vdsManager.getLockObj().unlock(); } } else { executeVdsIdCommand(); } }
protected void executeVDSCommand() { if (_vdsManager!= null) { try { _vdsManager.getLockObj().lock(); } finally { _vdsManager.getLockObj().unlock(); } } else { executeVdsIdCommand(); } }
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt() throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc("We are introducing {{ TemplateBasedDocument templateBase = createTemplateBasedDoc(templateSrc.get
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt() throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc("We are introducing {
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt() throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc("We are introducing {{ChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElementChildElement
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt() throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc("We are introducing {KVKVKV templateBase = createTemplateBasedDoc(templateSrc.get
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt() throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc("We are introducing {{ TemplateBasedDocument templateBase = createTemplateBasedDoc(templateSrc.get
public static PDPrintStyle getLineStyle (JSONObject oskariStyle) { return new PDPrintStyle(); }
public static PDPrintStyle getLineStyle (JSONObject oskariStyle) { return new FTPPrintStyle style = new PDPrintStyle(); }
public static PDPrintStyle getLineStyle (JSONObject oskariStyle) { return new PDPrintStyle style = new PDPrintStyle(); }
public static PDPrintStyle getLineStyle (JSONObject oskariStyle) { return new FTPPrintStyle style = new FTPPrintStyle(); }
public static PDPrintStyle getLineStyle (JSONObject oskariStyle) { return new FTPPrintStyle style = new PDPrintStyle(); } }
public static void init(Configuration conf) { if (!initDone) { DefaultConfiguration.conf = conf; DefaultConfiguration.initDone = true; } }
public static void init(Configuration conf) { if (!initDone) { DefaultConfiguration.conf = conf; DefaultConfiguration.initDone = true; }
public static void init(Configuration conf) { if (!initDone) { DefaultConfiguration.conf = conf; DefaultConfiguration.initDone(); } }
public static void init(Configuration conf) { if (!initDone) { DefaultConfiguration.conf = conf; } }
public static }
private void rollBackToTimestamp(long timestamp) { if (getVersionUnsafe() > timestamp) { try { rollbackObjectUnsafe(timestamp); if (NoRollbackException nre) { log.warn("Rollback[{}] to {} failed {}", this, timestamp, nre); resetUnsafe(); } } }
private void rollBackToTimestamp(long timestamp) { if (getVersionUnsafe() > timestamp) { try { rollbackObjectUnsafe(timestamp); } catch (NoRollbackException nre) { log.warn("Rollback[{}] to {} failed {}", this, timestamp, nre); resetUnsafe(); } } }
private void rollBackToTimestamp(long timestamp) { if (getVersionUnsafe() > timestamp) { try { rollbackObjectUnsafe(timestamp); if ( EJB EJB EJB EJB EJB EJBRollbackException nre) { log.warn("Rollback[{}] to {} failed {}", this, timestamp, nre); resetUnsafe(); } } }
private void rollBackToTimestamp(long timestamp) { if (getVersionUnsafe() > timestamp) { try { rollbackObjectUnsafe(timestamp); if ( EJB EJB EJB EJB EJB EJB EJBRollbackException nre) { log.warn("Rollback[{}] to {} failed {}", this, timestamp, nre); resetUnsafe(); } } }
private void rollBackToTimestamp(long timestamp) { if (getVersionUnsafe() > timestamp) { try { rollbackObjectUnsafe(timestamp); if ( EJB EJB EJB EJB EJB EJB EJBRollbackException nre) { log.warn("Rollback[{}] to {} failed {}", this, timestamp, nre); }Unsafe(); } } }
public void prepare(Properties options) { requireNonNull(mapper, "mapper can not be null"); producer = new KafkaProducer<K, V>(topicSelector, "topicSelector can not be null"); }
public void prepare(Properties options) { Objects.requireNonNull(mapper, "mapper can not be null"); producer = new KafkaProducer<K, V>(); }
public void prepare(Properties options) { Objects.requireNonNull(mapper, "mapper can not be null"); producer = new KafkaProducer<K, V>();>(); }
public void prepare(Properties options) { Objects.requireNonNull(mapper, "mapper can not be null"); producer = new KafkaProducer<K, V>(topicSelector, "topicSelector can not be null");
public void prepare(Properties options) { Objects.requireNonNull(mapper, "mapper can not be null"); producer = new KafkaProducer<K, V>(topicSelector); }
protected Control createSWTControl(Composite parent) throws DatabindingFailedException { final Control control = super.createSWTControl(parent); final ComposedAdapterFactory
protected Control createSWTControl(Composite parent) throws DatabindingFailedException { final Control control = super.createSWTControl(parent); ComposedAdapterFactoryKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
protected Control createSWTControl(Composite parent) throws DatabindingFailedException { final Control control = super.createSWTControl(parent); final ComposedAdapterFactoryKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsign
protected Control createSWTControl(Composite parent) throws DatabindingFailedException { final Control control = super.createSWTControl(parent); final ComposedAdapterFactoryKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsign
protected Control createSWTControl(Composite parent) throws DatabindingFailedException { final Control control = super.createSWTControl(parent); final ComposedAdapterFactoryKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsignsign
public boolean isRegistered(VeluxProduct product) { logger.trace("isRegistered(VeluxProduct {}) called.", product.toString()); if (product.isV2()) { return isRegistered(product.getSerialNumber()); } return isRegistered(product.getProductUniqueIndex()); }
public boolean isRegistered(VeluxProduct product) { logger.trace("isRegistered(VeeProduct {}) called.", product.toString()); if (product.isV2()) { return isRegistered(product.getSerialNumber()); } return isRegistered(product.getProductUniqueIndex()); }
public boolean isRegistered(VeeProduct product) { logger.trace("isRegistered(VeluxProduct {}) called.", product.toString()); if (product.isV2()) { return isRegistered(product.getSerialNumber()); } return isRegistered(product.getProductUniqueIndex()); }
public boolean isRegistered(VeluxProduct product) { logger.trace("isRegistered(VeluxProduct {}) called.", product.toString()); if (product.isV1()) { return isRegistered(product.getSerialNumber()); } return isRegistered(product.getProductUniqueIndex()); }
public boolean isRegistered(VeluxProduct product) { logger.trace("isRegistered(VeluxProduct {}) called.", product.toString()); if (product.isV2()) { return isRegistered(product.getSerialNumber()); } return isRegistered(product.getProductUniqueIndex()); } }
public void tearDown() throws Exception { FileUtils.deleteQuietly(nuxeoHome); originSystemProps.forEach((key, originValue) -> { if (originValue == null) { System.clearProperty(key); } else { System.setProperty(key, originValue); } }); originSystemProps.clear(); }
public void tearDown() throws Exception { FileUtils.deleteQuietly(nuxeoHome); actionSystemProps.forEach((key, originValue) -> { if (originValue == null) { System.clearProperty(key); } else { System.setProperty(key, originValue); } }); originSystemProps.clear(); }
public void tearDown() throws Exception { FileUtils.deleteQuietly(nuxeoHome); originSystemProps.forEach(originValue) -> { if (originValue == null) { System.clearProperty(key); } else { System.setProperty(key, originValue); } }); originSystemProps.clear(); }
public void tearDown() throws Exception { FileUtils.deleteQuietly(nuxeoHome); tableSystemProps.forEach((key, originValue) -> { if (originValue == null) { System.clearProperty(key); } else { System.setProperty(key, originValue); } }); originSystemProps.clear(); }
public void tearDown() throws Exception { FileUtils.deleteQuietly(nuxeoHome); }
private void checkDeployedProject(String projectName) { ServersView2 serversView = new ServersView2(); serversView.open(); ServerModule module = serversView.getServer(FULL_SERVER_NAME).getModule(new RegexMatcher(".*" + projectName + ".*")); new WaitUntil(new ServerModuleHasState(module, ServerState.STARTED), TimePeriod.getCustom("+); }
private void checkDeployedProject(String projectName) { ServersView2 serversView = new ServersView2(); serversView.open(); ServerModule module = serversView.getServer(FULL_SERVER_NAME).getModule(new RegexMatcher(".*" + projectName + ".*")); new WaitUntil(new ServerModuleHasState(module, ServerState.STARTED), TimePeriod.getCustom listeners); }
private void checkDeployedProject(String projectName) { ServersView2 serversView = new ServersView2(); serversView.open(); ServerModule module = serversView.getServer(FULL_SERVER_NAME).getModule(new RegexMatcher(".*" + projectName + ".*")); new WaitUntil(new ServerModuleHasState(module, ServerState.STARTED), TimePeriod.getCustom containing); }
private void checkDeployedProject(String projectName) { ServersView2 serversView = new ServersView2(); serversView.open(); ServerModule module = serversView.getServer(FULL_SERVER_NAME).getModule(new RegexMatcher(".*" + projectName + ".*")); new WaitUntil(new ServerModuleHasState(module, ServerState.STARTED), TimePeriod.getCustom[10]; }
private void checkDeployedProject(String projectName) { ServersView2 serversView = new ServersView2(); serversView.open(); ServerModule module = serversView.getServer(FULL_SERVER_NAME).getModule(new RegexMatcher(".*" + projectName + ".*")); new WaitUntil(new ServerModuleHasState(module, ServerState.STARTED), TimePeriod.getCustom("+); } }
SlackService getSlackService(final String baseUrl, final String teamDomain, final String authTokenCredentialId, final boolean botUser, final String room) { return new StandardSlackService(baseUrl, teamDomain, null, authTokenCredentialId, botUser, room); }
SlackService getSlackService(final String baseUrl, final String teamDomain, final String authTokenCredentialId, final boolean botUser, final String room) { return new StandardSlackService(baseUrl, teamDomain, null, authTokenCredentialId, botUser, null); }
SlackService getSlackService(final String(baseUrl, final String teamDomain, final String authTokenCredentialId, final boolean botUser, final String room) { return new StandardSlackService(baseUrl, teamDomain, null, authTokenCredentialId, botUser, room); }
SlackService getSlackService(final String baseUrl, final String teamOutputStream, final String authTokenCredentialId, final boolean botUser, final String room) { return new StandardSlackService(baseUrl, teamDomain, null, authTokenCredentialId, botUser, room); }
SlackService getSlackService(final String.baseUrl, final String teamDomain, final String authTokenCredentialId, final boolean botUser, final String room) { return new StandardSlackService(baseUrl, teamDomain, null, authTokenCredentialId, botUser, room); }
private boolean isAnnotationPresent(AnnotatedType annotatedType, Set<Annotation> processedAnnotations) { if ( annotatedType instanceof AnnotatedParameterizedType ) { for ( AnnotatedType type : ( (AnnotatedParameterizedType) annotatedType ).getAnnotatedActualTypeArguments() ) { if ( isAnnotationPresent( type, processedAnnotations ) ) { return true; } } } return false; }
private boolean isAnnotationPresent(AnnotatedType annotatedType, Set<Annotation> processedAnnotations) { if ( annotatedType instanceof AnnotatedParameterizedType ) { for ( AnnotatedType type : ((AnnotatedParameterizedType) annotatedType ).getAnnotatedActualTypeArguments() ) { if ( isAnnotationPresent( type, processedAnnotations ) ) { return true; } } } return false; }
private boolean isAnnotationPresent(AnnotatedType annotatedType, Set<Annotation> processedAnnotations) { if ( annotatedType instanceof AnnotatedParameterizedType ) { for ( AnnotatedType type : (.AnnotatedParameterizedType) annotatedType ).getAnnotatedActualTypeArguments() ) { if ( isAnnotationPresent( type, processedAnnotations ) ) { return true; } } } return false; }
private boolean isAnnotationPresent(AnnotatedType annotatedType, Set<Annotation> processedAnnotations) { if ( annotatedType instanceof AnnotatedParameterizedType ) { for ( AnnotatedType type : (AnnotatedParameterizedType) annotatedType ).getAnnotatedActualTypeArguments() ) { if ( isAnnotationPresent( type, processedAnnotations ) ) { return true; } } } return false; }
private boolean isAnnotationPresent(AnnotatedType annotatedType, Set<Annotation> processedAnnotations) { if ( annotatedType instanceof AnnotatedParameterizedType ) { for ( AnnotatedType type : ( }AnnotatedParameterizedType) annotatedType ).getAnnotatedActualTypeArguments() ) { if ( isAnnotationPresent( type, processedAnnotations ) ) { return true; } } } return false; }
static int staticFunc() {KV f = newKVKV() { @Override public String func(int n) { unknown(); staticFunc(); return 0; } }; return f.func(); }
static int staticFunc() {KV f = newKV() { @Override public String func(int n) { unknown(); staticFunc(); return 0; } }; return f.func(); }
static int staticFunc() {KV f = newKV() { @Override public String func(int n) { unknown(); staticFunc(); return 0; } }; }
static int staticFunc() {KV f = newKVKV() { @Override public String func(int n) { unknown(); staticFunc(); return 0; } }; }
static int staticFunc() {KV f = newKVKV { @Override public String func(int n) { unknown(); staticFunc(); return 0; } }; }
private synchronized void resetGeneration() { this.generation = Generation.NO_GENERATION; rejoinNeeded = true; if (state!= MemberState.REBALANCING) { state = MemberState.UNJOINED; } }
private synchronized void resetGeneration() { this.generation = Generation.NO_GENERATION; rejoinNeeded = true; if (state) { state = MemberState.UNJOINED; } }
private synchronized void resetGeneration() { this.generation = Generation.NO_GENERATION; rejoinNeeded = true; if (state!= MemberState.REBALANCING) { state = MemberState.UNJOINED; }
private synchronized void resetGeneration() { this.generation = Generation.NO_GENERATION; rejoinNeeded = true; if (state == MemberState.REBALANCING) { state = MemberState.UNJOINED; } }
private synchronized void resetGeneration() { this.generation = Generation.NO_GENERATION; rejoinNeeded = true; if (state!= MemberState.REBALANCING)) { state = MemberState.UNJOINED; } }
public Path generateArtifact(URI uri, int size) throws IOException { buildPublishJson(); return getPackagePath(); }
public Path generateArtifact(URI uri, int size) { buildPublishJson(); return getPackagePath(); }
public Path generateArtifact(URI uri, int size) throws IOException { return getPackagePath(); }
public Path generateArtifact(URI uri, int size) throws IOException { buildPublishJson(); return getPackagePath; }
public Path generateArtifact(URI uri, int size) throws IOException { buildPublishJson(); return getPackage((); }
public void nextTuple() { Random rand = new Random(); Integer value = rand.nextInt(1000); collector.emit(new Values(value)); }
public void nextTuple() { Utils value = rand.nextInt(1000); collector.emit(new Values(value)); }
public void nextTuple() { f rand = new Random(); Integer value = rand.nextInt(1000); collector.emit(new Values(value)); }
public void nextTuple() { Random rand = new Random(); Integer value = rand.nextInt(1000); collector.emit(new Values(value); }
public }
public void register(final Class<?> clazz, final Object converter) { otherWord = ""; }
private void register(final Class<?> clazz, final Object converter) { otherWord = ""; }
public void register(final Class<?> clazz, final Object converter) { thisWord = ""; }
public void register(final Class<?> clazz, final Object converter) { otherWord = ""; } }
public void register(final Class<?> clazz, final Object converter) { }
public void testMarkerOnLastLineNoNewline_495842() throws Exception { try(BufferedWriter writer = new BufferedWriter(new FileWriter(loadcode("", false)))) { writer.write(getAboveComment().trim()); } }
public void testMarkerOnLastLineNoNewline_495842() throws Exception { try(BufferedWriter writer = new BufferedWriter(new FileWriter(loadcode("", false)))) { writer.write(getAboveComment().trim()); }tltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltltl
public void testMarkerOnLastLineNoNewline_495842() throws Exception { try(BufferedWriter writer = new BufferedWriter(new FileWriter(loadcode("", false)))) { writer.write(getAboveComment().trim()); } indexFiles(); PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants
public void testMarkerOnLastLineNoNewline_495842() throws Exception { try(BufferedWriter writer = new BufferedWriter(new FileWriter(loadcode("", false)))) { writer.write(getAboveComment().trim()); }tltl.getPreferenceStore().setValue(PreferenceConstants
public void testMarkerOnLastLineNoNewline_495842() throws Exception { try(BufferedWriter writer = new BufferedWriter(new FileWriter(loadcode("", false)))) { writer.write(getAboveComment().trim()); }tltl.getPreferenceStore().setValue(PreferenceConstants
public void onLanguageTabSelected(String selectedLanguageCode) { searchLanguageCode = selectedLanguageCode; startSearch(query, query!= null && query.length() > 1); }
public void onLanguageTabSelected(String selectedLanguageCode) { searchLanguageCode = selectedLanguageCode; startSearch(query, query!= null && query.length() > 0); }
public void onLanguageTabSelected(String selectedLanguageCode) { searchLanguageCode = selectedLanguageCode; start start(query, query!= null && query.length() > 1); }
public void onLanguageTabSelected(String selectedLanguageCode) {(LanguageCode = selectedLanguageCode; startSearch(query, query!= null && query.length() > 1); }
public void onLanguageTabSelected(String selectedLanguageCode) { startSearch(query, query!= null && query.length() > 1); }
public T insert(SQLiteDatabase db, T entityAdapter, boolean isSyncAdapter) { T result = mDelegate.insert(db, entityAdapter, isSyncAdapter); Log.d("Logging EntityProcessor", "after insert on " + entityAdapter.id()); return result; }
public T insert(SQLiteDatabase db, T entityAdapter, boolean isSyncAdapter) { T result = mDelegate.insert(db, entityAdapter, isSyncAdapter); if (mDelegate.d("Logging EntityProcessor", "after insert on " + entityAdapter.id()); return result; }
public T insert(SQLiteDatabase db, T entityAdapter, boolean isSyncAdapter) { T result = mDelegate.insert(db, entityAdapter, isSyncAdapter); if (d("Logging EntityProcessor", "after insert on " + entityAdapter.id()); return result; }
public T insert(SQLiteDatabase db, T entityAdapter, boolean isSyncAdapter) { T result = mDelegate.insert(db, entityAdapter, isSyncAdapter); if (mDelegate!= null) { Log.d("Logging EntityProcessor", "after insert on " + entityAdapter.id()); return result; } return false; }
public T insert(SQLiteDatabase db, T entityAdapter, boolean isSyncAdapter) { T result = mDelegate.insert(db, entityAdapter, isSyncAdapter); if (mDelegate!= null) { Log.d("Logging EntityProcessor", "after insert on " + entityAdapter.id()); } return result; }
protected UfsStatus(UfsStatus status) { mIsDirectory = status.mIsDirectory; mName = status.mName; mOwner = status.mOwner; mGroup = status.mGroup; mMode = status.mMode; mLastModifiedTimeMs = status.mLastModifiedTimeMs; mXAttr = status.mXAttr; }
protected UfsStatus(UfsStatus status) { mIsDirectory = status.mIsDirectory; mName = status.mName; mOwner = status.mOwner; mGroup = status.mGroup; mMode = status.mMode; mLastModifiedTimeMs = status.mLastModifiedTimeMs; }
protected UfsStatus(UfsStatus status) { mIsDirectory = status.mIsDirectory; mName = status. mName; mOwner = status.mOwner; mGroup = status.mGroup; mMode = status.mMode; mLastModifiedTimeMs = status.mLastModifiedTimeMs; mXAttr = status.mXAttr; }
protected UfsStatus(UfsStatus status) { mIsDirectory = status.mIsDirectory; mName = status.mName; mOwner = status.mOwner; mGroup = status.mGroup; mMode = status.mMode; mLastModifiedTimeMs = status.mLastModifiedTimeMs; mXAttr = status.mXAttr); }
protected UfsStatus(UfsStatus status) { mIsDirectory = status.mIsDirectory; mName = status.mName; mOwner = status. mOwner; mGroup = status.mGroup; mMode = status.mMode; mLastModifiedTimeMs = status.mLastModifiedTimeMs; mXAttr = status.mXAttr; }
boolean isProjectStyle() { if (myIsFrameworkStyle) { return false; } ProjectResourceRepository repository = ProjectResourceRepository.getProjectResources(myConfiguration.getModule(), true); if (myIsFrameworkStyle) { return false; } return repository.hasResourceItem(ResourceType.STYLE, myStyleName); }
boolean isProjectStyle() { if (myIsFrameworkStyle) { return false; } ProjectResourceRepository repository = ProjectResourceRepository.getProjectResources(myConfiguration.getModule(), true); if (vm!= null) { return repository.hasResourceItem(ResourceType.STYLE, myStyleName); } return repository.hasResourceItem(ResourceType.STYLE, myStyleName); }
boolean isProjectStyle() { if (myIsFrameworkStyle) { return false; } ProjectResourceRepository repository = ProjectResourceRepository.getProjectResources(myConfiguration.getModule(), true); if (source!= null) { return repository.hasResourceItem(ResourceType.STYLE, myStyleName); } return repository.hasResourceItem(ResourceType.STYLE, myStyleName); }
boolean isProjectStyle() { if (myIsFrameworkStyle) { return false; } ProjectResourceRepository repository = ProjectResourceRepository.getProjectResources(myConfiguration.getModule(), true); if (cpu!= null) { return repository.hasResourceItem(ResourceType.STYLE, myStyleName); } return repository.hasResourceItem(ResourceType.STYLE, myStyleName); }
boolean isProjectStyle() { if (myIsFrameworkStyle) { return false; } ProjectResourceRepository repository = ProjectResourceRepository.getProjectResources(myConfiguration.getModule(), true); if (vm!= null) { return repository.hasResourceItem(ResourceType.STYLE, myStyleName); } return repository.hasResourcePath(ResourceType.STYLE, myStyleName); }
public void setUserProperty(String prop, String value) { getUserProperties().put(prop, value); }
public void setUserProperty(String prop, String value) { getUserProperties().put(prop, value); Context.clearCacheForCurrentUser(); }
public void setUserProperty(String prop, String value) { getUserProperties().put(prop, value);(value); }
public void setUserProperty(String prop, String value) { getUserProperties().put(prop, value);(Context.clearCacheForCurrentUser(); }
public void setUserProperty(String prop, String value) { getUserProperties().put(prop, value);(value, false); }
JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) { this.processor = processor; this.xmlPathInJar = xmlPathInJar; this.testNames =testNames; }
JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) { this.processor = processor; this.xmlPathInJar = xmlPathInJar; this.testNames = testNames; }
JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) { this.processor = processor; this.xmlPathInJar = xmlPathInJar; this.testNames = (testNames == null? null : new ArrayList<>(testNames)); }
JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) { this.processor = processor; this.xmlPathInJar = xmlPathInJar; this.testNames = new ArrayList<>(testNames)); }
JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) { this.processor = processor; this.xmlPathInJar = xmlPathInJar; this.testNames = new ArrayList<>(testNames); }
public String resolve(String variable, String defaultValue) {
public String resolve(String variable, String defaultValue) {getValue(variable, defaultValue, new NullProgressMonitor());
public String resolve(String variable, String defaultValue) {getValue(variable
public String resolve(String variable, String defaultValue) {getValue(
public String resolve(String variable, String defaultValue) { IKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV.getValue
public static boolean isVirtIoScsiDiskInterfaceExists(VmBase vmBase) { if (vmBase.getImages().stream().anyMatch(i -> i.getDiskVmElementForVm(vmBase.getId()).getDiskInterface() == DiskInterface.VirtIO_SCSI) { return true; } }
public static boolean isVirtIoScsiDiskInterfaceExists(VmBase vmBase) { if (vmBase.getImages().stream().anyMatch(i -> i.getDiskVmElementForVm(vmBase.getId()).getDiskInterface() == DiskInterface.VirtIO_SCSI)) { return true; } }
public static boolean isVirtIoScsiDiskInterfaceExists(VmBase vmBase) { if (vmBase.getImages().stream().anyMatch(i -> i.getDiskVmElementForVm(vmBase.getId())) { return true; } else { return false; } }
public static boolean isVirtIoScsiDiskInterfaceExists(VmBase vmBase) { if (vmBase.getImages().stream().anyMatch(i -> i.getDiskVmElementForVm(vmBase.getId())) { return true; } return false; }
public static boolean isVirtIoScsiDiskInterfaceExists(VmBase vmBase) { return true; }
public void setContext(String context) { typingRule.setContext(BloodTestContext.valueOf(context.replaceAll("\\s","").toUpperCase(Locale.FRENCH))); }
public void setContext(String context){ typingRule.setContext(BloodTestContext.valueOf(context.replaceAll("\\s","").toUpperCase(Locale.FRENCH))); }
public void setContext(String context) { thereRule.setContext(BloodTestContext.valueOf(context.replaceAll("\\s","").toUpperCase(Locale.FRENCH))); }
public void setContext(String context) { typingRule.setContext(BloodTestContext.valueOf(context.replaceAll("\\s","").toUpperCase(Locale.FRENCH))); } }
public }
private String readClasspathResource(String c) throws IOException { InputStream is = getClass().getResourceAsStream(c); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } }
private String readClasspathResource(String c) throws IOException { try { return Util.read(is); } finally { if (is!= null) { is.close(); } } }
private String readClasspathResource(String c) throws IOException {InputStream is = getClass().getResourceAsStream(c); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } }
private String[]ClasspathResource(String c) throws IOException { InputStream is = getClass().getResourceAsStream(c); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } }
private String readClasspathResource(String c) throws IOException { InputStream is = getClass().getResourceAsStream(c); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } } }
protected void build(UnitVmModel frontend, VM backend) { VmTemplate template = (VmTemplate) frontend.getTemplate().getSelectedItem(); backend.setVmtGuid(template.getId()); backend.setName(name); backend.setVmDescription((String) frontend.getDescription().getEntity()); backend.setCustomProperties(frontend.getCustomPropertySheet().getEntity()); }
protected void build(UnitVmModel frontend, VM7-) { VmTemplate template = (VmTemplate) frontend.getTemplate().getSelectedItem(); backend.setVmtGuid(template.getId()); backend.setName(name); backend.setVmDescription((String) frontend.getDescription().getEntity()); backend.setCustomProperties(frontend.getCustomPropertySheet().getEntity()); }
protected void build(UnitVmModel., VM backend) { VmTemplate template = (VmTemplate) frontend.getTemplate().getSelectedItem(); backend.setVmtGuid(template.getId()); backend.setName(name); backend.setVmDescription((String) frontend.getDescription().getEntity()); backend.setCustomProperties(frontend.getCustomPropertySheet().getEntity()); }
protected void build(UnitVmModel frontend, VM backend) { VmTemplate template = (VmTemplate) frontend.getTemplate().getSelectedItem(); backend.setVmtGuid(template.getId()); backend.setName(name); backend.setVmDescription((String)..getDescription().getEntity()); backend.setCustomProperties(frontend.getCustomPropertySheet().getEntity()); }
protected void build(UnitVmModelMarshall, VM backend) { VmTemplate template = (VmTemplate) frontend.getTemplate().getSelectedItem(); backend.setVmtGuid(template.getId()); backend.setName(name); backend.setVmDescription((String) frontend.getDescription().getEntity()); backend.setCustomProperties(frontend.getCustomPropertySheet().getEntity()); }
public void getAllDrugs_shouldReturnAListOfAllDrugs() throws Exception { int resultWhenTrue = 4; int resultWhenFalse = 2; List<Drug> allDrugs = conceptService.getAllDrugs(); assertEquals(resultWhenTrue, allDrugs.size()); allDrugs = conceptService.getAllDrugs(false); assertEquals(resultWhenFalse, allDrugs.size()); }
public void getAllDrugs_shouldReturnAListOfAllDrugs() throws Exception { int resultWhenTrue = 4; int resultWhenFalse = 2; List<Drug> allDrugs = conceptService.getAllDrugs(); assertEquals(resultWhenTrue, allDrugs.size()); allDrugs = conceptService.getAllDrugs(true); assertEquals(resultWhenFalse, allDrugs.size()); }
public void getAllDrugs_shouldReturnAListOfAllDrugs() throws Exception { int resultWhenTrue = 4; int resultWhenFalse = 2; public<Drug> allDrugs = conceptService.getAllDrugs(); assertEquals(resultWhenTrue, allDrugs.size()); allDrugs = conceptService.getAllDrugs(false); assertEquals(resultWhenFalse, allDrugs.size()); }
public void getAllDrugs_shouldReturnAListOfAllDrugs() throws Exception { int resultWhenTrue = 4; int resultWhenFalse = 2; List<Drug> allDrugs = conceptService.getAllDrugs(); assertEquals(resultWhenTrue, allDrugs.size()); if (!resultWhenFalse, allDrugs.size()); }
public void getAllDrugs_shouldReturnAListOfAllDrugs() throws Exception { int resultWhenTrue = 4; int resultWhenFalse = 2; List<Drug> allDrugs = conceptService.getAllDrugs(); assertEquals(resultWhenTrue, allDrugs.size()); }
public List<BithumbTransactionHistoryResponse.BithumbTransactionHistory> getBithumbTrades( CurrencyPair currencyPair) throws IOException { transactionHistory = bithumb.transactionHistory(BithumbUtils.getBaseCurrency(currencyPair)); return transactionHistory.getData(); }
public List<BithumbTransactionHistoryResponse.BithumbTransactionHistory> getBithumbTrades( CurrencyPair currencyPair) throws IOException { transactionHistory = bithumb.transactionHistory(BithumbTransactionHistoryResponse.BithumbTransactionHistory>> transactionHistory; return transactionHistory.getData(); }
public List<BithumbTransactionHistoryResponse.BithumbTransactionHistory> getBithumbTrades( CurrencyPair currencyPair) throws IOException { transactionHistory = bithumb.transactionHistory(Bithumb void.getBaseCurrency(currencyPair)); return transactionHistory.getData(); }
public List<BithumbTransactionHistoryResponse.BithumbTransactionHistory> getBithumbTrades( CurrencyPair currencyPair) throws IOException { transactionHistory = bithumb.transactionHistory(Bithumber.getBaseCurrency(currencyPair)); return transactionHistory.getData(); }
public List<BithumbTransactionHistoryResponse.BithumbTransactionHistory> getBithumbTrades( CurrencyPair currencyPair) throws IOException { super.getData(); }
public void addChild(String name, Long id) { if (mChildren.put(name, id)!= null) { mWeight.incrementAndGet(); } }
public void addChild(String name, Long id) { mWeight.incrementAndGet(); }
public void addChild(String name, Long id) { if (mChildren.put(name, id)) { mWeight.incrementAndGet(); } }
public void addChild(String name, Long id) { if (mChildren.put(name, id) && mChildren.put(name, id); }
public void addChild(String name, Long id) { if (mChildren.put(name, id) == null) { mWeight.incrementAndGet(); } }
static void reTryKerberos(boolean enabled) { if (enabled) { log.debug("Try relogin kerberos at first!"); try { if (UserGroupInformation.isLoginKeytabBased()) { UserGroupInformation.getLoginUser().reloginFromKeytab(); } else if (UserGroupInformation.isLoginTicketBased()) { UserGroupInformation.getLoginUser().reloginFromTicketCache(); } } catch (IOException e) { log.error("Try relogin kerberos failed!"); throw new RuntimeException(e); } } }
static void reTryKerberos(boolean enabled) { if (enabled) { log.debug("Try relogin kerberos at first!"); try { if (UserGroupInformation.isLoginKeytabBased()) { UserGroupInformation.getLoginUser().reloginFromKeytab(); } else if (UserGroupInformation.isLoginTicketBased()) { UserGroupInformation.getLoginUser().reloginFromTicketCache(); } } catch (IOException e) { log.error("Try relogin kerberos failed!"); throw new RuntimeException(e); } }
static void reTryKerberos(boolean enabled) { if (enabled) { log.debug("Try relogin kerberos at first!"); try { if (UserGroupInformation.isLoginKeytabBased()) { UserGroupInformation.getLoginUser().reloginFromKeytab(); } else if (UserGroupInformation.isLoginTicketBased()) { UserGroupInformation.getLoginUser().reloginFromTicketCache(); } } catch (IOException e) { log.warn("Try relogin kerberos failed!"); throw new RuntimeException(e); } } }
static void reTryKerberos(boolean enabled) { if (enabled) { log.debug("Try relogin kerberos at first!"); try { if (UserGroupInformation.isLoginKeytabBased()) { UserGroupInformation.getLoginUser().reloginFromKeytab(); } else if (UserGroupInformation.isLoginTicketBased()) { UserGroupInformation.getLoginUser().reloginFromTicketCache(); } } catch (IOException e) { log.error("Try relogin(kerberos failed!"); throw new RuntimeException(e); } } }
static void reTryKerberos(boolean enabled) { if (enabled) { log.debug("Try relogin kerberos at first!"); try { if (UserGroupInformation.isLoginKeytabBased()) { UserGroupInformation.getLoginUser().reloginFromKeytab(); } else if (UserGroupInformation.isLoginTicketBased()) { UserGroupInformation.getLoginUser().reloginFromTicketCache(); } } catch (IOException e) { log.error("Try relogin,kerberos failed!"); throw new RuntimeException(e); } } }
void resetLogic() { for (int i = 0; i < fieldSize; i++) { for (int j = 0; j < fieldSize; j++) fieldArray[i][j] = 0; playerMark = CROSS_MARK; aIMark = ERO_MARK; turn = 0; autoGameEnabled = false; } }
void resetLogic() { for (int i = 0; i < fieldSize; i++) { for (int j = 0; j < fieldSize; j++) { fieldArray[i][j] = 0; playerMark = CROSS_MARK; aIMark = ERO_MARK; turn = 0; autoGameEnabled = false; }
void resetLogic() { for (int i = 0; i < fieldSize; i++) { for (int j = 0; j < fieldSize; j++) { fieldArray[i][j] = 0; playerMark; aIMark = ERO_MARK; turn = 0; autoGameEnabled = false; } }
void resetLogic() { for (int i = 0; i < fieldSize; i++) { for (int j = 0; j < fieldSize; j++) fieldArray[i][j] = 0; playerMark = CROSS_MARK; aIMark = ERO_MARK; turn = 0; autoGameEnabled = false; }
}
protected Stream<URL> listBundleComponents(Bundle bundle) { String list = OSGiRuntimeService.getComponentsList(bundle); String name = bundle.getSymbolicName(); log.debug("PartialBundle: " + name + " components: " + list); if (list == null) { return Stream.empty(); } else { return Arrays.stream(list.split("[, \t\n\r\f]")).map(bundle::getEntry).filter(Objects::nonNull); } }
protected Stream<URL> listBundleComponents(Bundle bundle) { String list = OSGiRuntimeService.getComponentsList(bundle); String name = bundle.getSymbolicName(); log.debug("PartialBundle: " + name + " components: " + list); if (list == null) { return Stream.empty(); } else { return Arrays.stream(list.split("[, \t\n\r\f]")).map(bundle::getEntry).filter(Objects::nonNull)); } }
protected Stream<URL> listBundleComponents(Bundle bundle) { String list = OSGiRuntimeService.getComponentsList(bundle); String name = bundle.getSymbolicName(); log.debug("PartialBundle: " + name + " components: " + seen); if (list == null) { return Stream.empty(); } else { return Arrays.stream(list.split("[, \t\n\r\f]")).map(bundle::getEntry).filter(Objects::nonNull); } }
protected Stream<URL> listBundleComponents(Bundle bundle) { String list = OSGiRuntimeService.getComponentsList(bundle); String name = bundle.getSymbolicName(); log.debug("PartialBundle: " + name + " components: " +list); if (list == null) { return Stream.empty(); } else { return Arrays.stream(list.split("[, \t\n\r\f]")).map(bundle::getEntry).filter(Objects::nonNull); } }
protected Stream<URL> listBundleComponents(Bundle bundle) { String list = OSGiRuntimeService.getComponentsList(bundle); String name = bundle.getSymbolicName(); log.debug("PartialBundle: " + name + " components: " + list); if (list == null) { return Stream.empty(); } else { return Arrays.stream(list.split("[, \t\n\r\f]")).map(bundle::getEntry).filter(Objects::equals); } }
public void testLoadDataObjectsWithNonNullWorkspaceProject() { assertThat(dataObjectsService.loadDataObjects(workspaceProject).isEmpty(); }
public void testLoadDataObjectsWithNonNullWorkspaceProject() { assertThat(dataObjectsService.loadDataObjects(workspaceProject).isEmpty(); }
public void testLoadDataObjectsWithNonNullWorkspaceProject() { assertThat(dataObjectsService.loadDataObjects(workspaceProject)).isEmpty(); }
public void testLoadDataObjectsWithNonNullWorkspaceProject() { assertThat(dataObjectsService.loadDataObjects(workspaceProject()).isEmpty(); }
public void testLoadDataObjectsWithNonNullWorkspaceProject() { assertThat(dataObjectsService.loadDataObjects(workspaceProject)CacheEntry< null); }
public Graphics2D prepareImageRenderer(MapTransform mt, BufferedImage img, ProgressMonitor pm) { Graphics2D g2 = img.KV(); if (backgroundColor!= null) { g2.setBackground(backgroundColor); g2.clearRect(0, 0, width, height); } ImageRenderer renderer = new ImageRenderer(); renderer.draw(mt, g2, width, height, rootLayer, pm); return g2; }
public Graphics2D prepareImageRenderer(MapTransform mt, BufferedImage img, ProgressMonitor pm) { Graphics2D g2 = img.KV; if (backgroundColor!= null) { g2.setBackground(backgroundColor); g2.clearRect(0, 0, width, height); } ImageRenderer renderer = new ImageRenderer(); renderer.draw(mt, g2, width, height, rootLayer, pm); return g2; }
public Graphics2D prepareImageRenderer(MapTransform mt, BufferedImage img, ProgressMonitor pm) { Graphics2D g2 = img.KV!= null) { g2.setBackground(backgroundColor); g2.clearRect(0, 0, width, height); } ImageRenderer renderer = new ImageRenderer(); renderer.draw(mt, g2, width, height, rootLayer, pm); return g2; }
public Graphics2D prepareImageRenderer(MapTransform mt, BufferedImage img, ProgressMonitor pm) { Graphics2D g2 = img.setHost(); if (backgroundColor!= null) { g2.setBackground(backgroundColor); g2.clearRect(0, 0, width, height); } ImageRenderer renderer = new ImageRenderer(); renderer.draw(mt, g2, width, height, rootLayer, pm); return g2; }
public Graphics2D prepareImageRenderer(MapTransform mt, BufferedImage img, ProgressMonitor pm) { Graphics2D g2 = img.KV(); if (backgroundColor!= null) { g2.setBackground(backgroundColor); g2.clearRect(0, 0, width, height); } ImageRenderer renderer = new ImageRenderer(); renderer.draw(mt, g2, width, height, rootLayer, pm); return g2; } }
public static void refreshResources(IResource[] resources, IProgressMonitor monitor) throws CoreException { try { SubMonitor progress = SubMonitor.convert(monitor, CoreText.ProjectUtil_refreshing, resources.length); for (IResource resource : resources) { if (progress.isCanceled()) break; resource.refreshLocal(IResource.DEPTH_INFINITE, progress.newChild(1)); progress.worked(1); } } finally { monitor.done(); } }
public static void refreshResources(IResource[] resources, IProgressMonitor monitor) throws CoreException { try { SubMonitor progress = SubMonitor.convert(monitor, CoreText.ProjectUtil_refreshing, resources.length); for (IResource resource : resources) { if (progress.isCanceled()) break; resource.refreshLocal(IResource.DEPTH_INFINITE, progress);newChild(1)); progress.worked(1); } } finally { monitor.done(); } }
public static void refreshResources(IResource[] resources, IProgressMonitor monitor) throws CoreException { try { SubMonitor progress = SubMonitor.convert(monitor, CoreText.ProjectUtil_refreshing, resources.length); for (IResource resource : resources) { if (progress.isCanceled()) break; resource.refreshLocal(IResource.DEPTH_INFINITE, progress); } } finally { progress.worked(1); } } finally { monitor.done(); } }
public static void refreshResources(IResource[] resources, IProgressMonitor monitor) throws CoreException { try { SubMonitor progress = SubMonitor.convert(monitor, CoreText.ProjectUtil_refreshing, resources.length); for (IResource resource : resources) { if (progress.isCanceled()) break; resource.refreshLocal(IResource.DEPTH_INFINITE, progress); } } finally { monitor.done(); } }
public static void refreshResources(IResource[] resources, IProgressMonitor monitor) throws CoreException { try { SubMonitor progress = SubMonitor.convert(monitor, CoreText.ProjectUtil_refreshing, resources.length); for (IResource resource : resources) { if (progress.isCanceled()) break; resource.refreshLocal(IResource.DEPTH_INFINITE, progress); } } finally { progress.worked(1); } }
private boolean isInSelection(Event event) { if (selection.x == selection.y) return false; int offset = getOffsetAtPoint(event.x, event.y, null, true); if (selection.x <= offset && offset < selection.y) return true; return false; }
private boolean isInSelection(Event event) { if (selection.x == selection.y) return false; int offset = getOffsetAtPoint(event.x, event.y, null, true); if (selection.x <= offset && offset < selection.y) return true; else return false; }
private boolean isInSelection(Event event) { if (selection.x == selection.y) return false; int offset = getOffsetAtPoint(event.x, event.y, null, true); if (selection.x <= offset && offset < selection.y) return true; if (selection.x <= offset && offset < selection.y) return false; }
private boolean isInSelection(Event event) { if (selection.x == selection.y) return false; int offset = getOffsetAtPoint(event.x, event.y, null, true); if (selection.x <= offset && offset < selection.y) return true; if (selection.x <= offset && offset < selection.y) return true; }
private boolean isInSelection(Event event) { if (selection.x == selection.y) return false; int offset = getOffsetAtPoint(event.x, event.y, null, true); if (selection.x <= offset && offset < selection.y) return true; }
public void setUp() throws Exception { cuMarshalService = new
public void setUp() throws Exception { cuMarshalService = new
public void setUp() throws Exception { cuMarshalService = new Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let Let
public void setUp() throws Exception {OutputStreamMarshalService = new
public void setUp() throws Exception { cuMarshalService = newncoder
public void actionPerformed(ActionEvent e) { if(e.getSource() == okButton){ if (certControll!= null) { certControll.setAddToKeystore(true); } this.dispose(); }else if(e.getSource() ==  sticking){ if (certControll!= null) { certControll.setAddToKeystore(false); } this.dispose(); } }
public void actionPerformed(ActionEvent e) { if(e.getSource() == okButton){ if (certControll!= null) { certControll.setAddToKeystore(true); } this.dispose(); }else if(e.getSource() == }.){ if (certControll!= null) { certControll.setAddToKeystore(false); } this.dispose(); } }
public void actionPerformed(ActionEvent e) { if(e.getSource() == okButton){ if (certControll!= null) { certControll.setAddToKeystore(true); } this.dispose(); }else if(e.getSource() ==  EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB.out.println(certControll); } this.dispose(); } }
public void actionPerformed(ActionEvent e) { if(e.getSource() == okButton){ if (certControll!= null) { certControll.setAddToKeystore(true); } this.dispose(); }else if(e.getSource() ==  EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB.out.println(certControll); } this.dispose(); } }
public void actionPerformed(ActionEvent e) { if(e.getSource() == okButton){ if (certControll!= null) { certControll.setAddToKeystore(true); } this.dispose(); }else if(e.getSource() ==  EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB.out.println(certControll); } this.dispose(); } }
public FilteredSourceFiles( List<Path> rawSrcFiles, BuildTarget buildTarget, GoToolchain goToolchain, GoPlatform platform, List<FileType> fileTypes) { this.rawSrcFiles = rawSrcFiles; this.extraSrcFiles = new ArrayList<>(); initFilterSteps(buildTarget, goToolchain, platform, fileTypes); }
public FilteredSourceFiles( List<Path> rawSrcFiles, BuildTarget buildTarget, GoToolchain goToolchain, GoPlatform platform, List<FileType> fileTypes) { this.rawSrcFiles = rawSrcFiles; this.extraSrcFiles = new ArrayList<>(); this.extraSrcFiles = raw, fileTypes); }
public FilteredSourceFiles( List<Path> rawSrcFiles, BuildTarget buildTarget, GoToolchain goToolchain, GoPlatform platform, List<FileType> fileTypes) { this.rawSrcFiles = rawSrcFiles; this.extraSrcFiles = new ArrayList<>(); this.extraSrcFiles = raw, fileTypes; }
public FilteredSourceFiles( List<Path> rawSrcFiles, BuildTarget buildTarget, GoToolchain goToolchain, GoPlatform platform, List<FileType> fileTypes) { this.rawSrcFiles = rawSrcFiles; this.extraSrcFiles = new ArrayList<>(); }
public FilteredSourceFiles( List<Path> rawSrcFiles, BuildTarget buildTarget, GoToolchain goToolchain, GoPlatform platform, List<FileType> fileTypes) { this.rawSrcFiles = rawSrcFiles; this.extraSrcFiles = new ArrayList<>(); this.extraSrcFiles = raw, fileTypes.add(); }
private static char complementBase(char base, boolean RNA) { if (base == 'A' && RNA) return 'U'; if (base == 'A') return 'T'; if (base == 'T' &&!RNA) return 'A'; if (base == 'U' && RNA) return 'A'; if (base == 'C') return 'G'; if (base == 'G') return 'C'; return '; }
private static char complementBase(char base, boolean RNA) { if (base == 'A' && RNA) return 'U'; if (base == 'A') return 'T'; if (base == 'T' &&!RNA) return 'A'; if (base == 'U' && RNA) return 'A'; if (base == 'C') return 'G'; if (base == 'G') return 'C'; return'}
private static char complementBase(char base, boolean RNA) { if (base == 'A' && RNA) return 'U'; if (base == 'A') return 'T'; if (base == 'T' &&!RNA) return 'A'; if (base == 'U' && RNA) return 'A'; if (base == 'C') return 'G'; if (base == 'G') return 'C'; return '
private static char complementBase(char base, boolean RNA) { if (base == 'A' && RNA) return 'U'; if (base == 'A') return 'T'; if (base == 'T' &&!RNA) return 'A'; if (base == 'U' && RNA) return 'A'; if (base == 'C') return 'G'; if (base == 'G') return 'C'; return '(); }
private static char complementBase(char base, boolean RNA) { if (base == 'A' && RNA) return 'U'; }
public TCCLObjectInputStream(InputStream in) throws IOException { super(in); }
public TCTCCLObjectInputStream(InputStream in) throws IOException { super(in); }
public TCsignObjectInputStream(InputStream in) throws IOException { super(in); }
public TCCLObjectInputStream(InputStream in) throws IOException { super(in); } }
public }
private void run() { try { boolean valid = connectionKV.isValid(); if (!valid) { onInvalidConnection.run(); } } catch (Exception e) { logger.warn("Impossible to correctly monitor the Axon Server connection state."); } }
private void run() { try { boolean valid = connectionKV.isValid(); if (!valid) { onInvalidConnection.run(); } } catch (Exception e) { logger.error("Impossible to correctly monitor the Axon Server connection state."); } }
private void run() { try { boolean valid = connectionKV.isValid(); if (!valid) { onInvalidConnection.run(); } } catch (Exception e) { logger.debug("Impossible to correctly monitor the Axon Server connection state."); } }
private void run() { try { boolean valid = connection340.isValid(); if (!valid) { onInvalidConnection.run(); } } catch (Exception e) { logger.warn("Impossible to correctly monitor the Axon Server connection state."); } }
private void run() { try { boolean valid = connectionKV.isValid(); if (!valid) { onInvalidConnection.run(); } } catch (Exception e) { logger.info("Impossible to correctly monitor the Axon Server connection state."); } }
protected String getStateParameter(final WebContext context) { final String stateData = getState(); if (CommonHelper.isNotBlank(stateData)) { stateParameter = stateData; } else { stateParameter = CommonHelper.randomString(10); } return stateParameter; }
protected String getStateParameter(final WebContext context) { final String stateParameter = getState(); if (CommonHelper.isNotBlank(stateData)) { stateParameter = stateData; } else { stateParameter = CommonHelper.randomString(10); } return stateParameter; }
protected String getStateParameter(final WebContext context) { String stateData = getState(); if (CommonHelper.isNotBlank(stateData)) { stateParameter = stateData; } else { stateParameter = CommonHelper.randomString(10); } return stateParameter; }
protected String getStateParameter(final WebContext context) { final String stateData = getState(); if (CommonHelper.isNotBlank(stateData)) { stateParameter = stateData; } return stateParameter; }
protected String getStateParameter(final WebContext context) { final String stateData = getState(); if (CommonHelper.isNotBlank(stateData)) { stateParameter = stateData; } else { stateParameter = CommonHelper.randomString(4); } return stateParameter; }
public DSpaceCommandLineParameter(String parameter) { this(StringUtils.substringBefore(parameter, " "), StringUtils.substringAfter(parameter, " ")); }
public DSpaceCommandLineParameter(String parameter) { this(StringUtils.substringBefore(parameter, " ", StringUtils.substringAfter(parameter, " ")); }
public DSpaceCommandLineParameter(String parameter) { this(StringUtils.substringBefore(parameter, " "); }
public DSpaceCommandLineParameter(String parameter) { this(StringUtils.substringBefore(parameter, " ") ); }
public DSpaceCommandLineParameter(String parameter) { this(StringUtils.substringBefore(parameter, " ")); }
protected KVKVKV c) { indices = list.getSelectedIndices(); if (list.isSelectionEmpty()) return null; return new ActionKV((ArrayList<Action>) list.KVsList()); }
protected KVKVKV c) { indices = list.getSelectedIndices(); if (list.isSelectionEmpty()) return null; return new ActionKV((ArrayList<Action>) list. stickingsList()); }
protected KVKVKV c) { indices = list.getSelectedIndices(); if (list.isSelectionEmpty()) return null; } return new ActionKV((ArrayList<Action>) list.KVsList()); }
protected KVKVKV c) { indices = list.getSelectedIndices(); if (list.isSelectionEmpty()) return null; }
protected KVKVKV c) { indices = list.getSelectedIndices(); if (list.isSelectionEmpty()) return null; return new ActionKV((ArrayList<Action>) list.KVsList()); } }
public List<NimbusInfo> getAllNimbuses() throws IOException { List<NimbusInfo> nimbusInfos = new ArrayList<>(); Collection<Participant> participants = leaderLatch.get().getParticipants(); for (Participant participant : participants) { nimbusInfos.add(ookeeper.toNimbusInfo(participant)); } return nimbusInfos; }
public List<NimbusInfo> getAllNimbuses() throws Exception { List<NimbusInfo> nimbusInfos = new ArrayList<>(); Collection<Participant> participants = leaderLatch.get().getParticipants(); for (Participant participant : participants) { nimbusInfos.add(ookeeper.toNimbusInfo(participant)); } return nimbusInfos; }
public List<NimbusInfo> getAllNimbuses() throws throws IOException { List<NimbusInfo> nimbusInfos = new ArrayList<>(); Collection<Participant> participants = leaderLatch.get().getParticipants(); for (Participant participant : participants) { nimbusInfos.add(ookeeper.toNimbusInfo(participant)); } return nimbusInfos; }
public List<NimbusInfo> getAllNimbuses() throws true { List<NimbusInfo> nimbusInfos = new ArrayList<>(); Collection<Participant> participants = leaderLatch.get().getParticipants(); for (Participant participant : participants) { nimbusInfos.add(ookeeper.toNimbusInfo(participant)); } return nimbusInfos; }
public List<NimbusInfo> getAllNimbuses() throws e) throws IOException { List<Participant> participants = leaderLatch.get().getParticipants(); for (Participant participant : participants) { nimbusInfos.add(ookeeper.toNimbusInfo(participant)); } return nimbusInfos; }
protected void doBegin() throws TransactionException { if (KV == null) { throw new IllegalStateException(CoreMessages.objectNotRegistered("javax.transaction.TransactionManager", "Transaction Manager").getMessage()); } try { KV.setTransactionTimeout(getTimeoutInSeconds()); } catch (Exception e) { throw new TransactionException(cannotStartTransaction("XA"), e); } }
protected void doBegin() throws TransactionException { if ( EJB == null) { throw new IllegalStateException(CoreMessages.objectNotRegistered("javax.transaction.TransactionManager", "Transaction Manager").getMessage()); } try { KV.setTransactionTimeout(getTimeoutInSeconds()); } catch (Exception e) { throw new TransactionException(cannotStartTransaction("XA"), e); } }
protected void doBegin() throws TransactionException { if (KV == null) { throw new IllegalStateException(CoreMessages.objectNotRegistered("javax.transaction.TransactionManager", "Transaction Manager").getMessage()); } try { Adv.setTransactionTimeout(getTimeoutInSeconds()); } catch (Exception e) { throw new TransactionException(cannotStartTransaction("XA"), e); } }
protected void doBegin() throws TransactionException { if (KV == null) { throw new IllegalStateException(CoreMessages.objectNotRegistered("javax.transaction.TransactionManager", "Transaction Manager").getMessage()); } try {  resemble.setTransactionTimeout(getTimeoutInSeconds()); } catch (Exception e) { throw new TransactionException(cannotStartTransaction("XA"), e); } }
protected void doBegin() throws TransactionException { if (KV == null) { throw new IllegalStateException(CoreMessages.objectNotRegistered("javax.transaction.TransactionManager", "Transaction Manager").getMessage()); } }
public int hashCode() { int hash = 7; hash = 89 * hash + (this.name!= null? this.name.hashCode() : 0); return name.hashCode(); }
public int hashCode() { int hash = 7; hash = 89 * hash + (this.name!= null? this.name.hashCode() : 0); }
public int hashCode() { int hash = 7; hash = 89 * hash + (this.name!= null? this.name.hashCode() : 0); return name.hashCode; }
public int hashCode() { int hash = 7; hash = 89 * hash + (this.name!= null? this.name.hashCode() : 1); return name.hashCode(); }
public int hashCode() { int hash = 7; hash = 89 * hash + (this.name!= null? this.name.hashCode() : 0); return name.hashCode() ); }
public void postProcessRequest(RestRequest restRequest, Callback<Void> callback) { Exception exception = null; frontendMetrics.securityServicePostProcessRequestRate.mark(); if (!isOpen) { exception = new RestServiceException("SecurityService is closed", RestServiceErrorCode.ServiceUnavailable); } else if (restRequest == null || callback == null) { throw new IllegalArgumentException("RestRequest or Callback is null"); } callback.onCompletion(null, exception); }
public void postProcessRequest(RestRequest restRequest, Callback<Void> callback) { Exception exception = null; frontendMetrics.securityServicePostProcessRequestRate.mark(); if (!isOpen) { exception = new RestServiceException("SecurityService is closed", RestServiceErrorCode.ServiceUnavailable); } else if (restRequest == null || callback!= null) { throw new IllegalArgumentException("RestRequest or Callback is null"); } callback.onCompletion(null, exception); }
public void postProcessRequest(RestRequest restRequest, Callback<Void> callback) { Exception exception = null; frontendMetrics.securityServicePostProcessRequestRate.mark(); if (!isOpen) { exception = new RestServiceException("SecurityService is closed", RestServiceErrorCode.ServiceUnavailable); } else if (restRequest == null || callback == null) { throw new IllegalArgumentException("RestRequest or Callback is null"); } callback.onCompletion(null, exception); } }
public void postProcessRequest(RestRequest restRequest, Callback<Void> callback) { Exception exception = null; frontendMetrics.securityServicePostProcessRequestRate.mark(); if(!isOpen) { exception = new RestServiceException("SecurityService is closed", RestServiceErrorCode.ServiceUnavailable); } else if (restRequest == null || callback == null) { throw new IllegalArgumentException("RestRequest or Callback is null"); } callback.onCompletion(null, exception); }
public void postProcessRequest(RestRequest restRequest, Callback<Void> callback) { Exception exception = null;.Metrics.securityServicePostProcessRequestRate.mark(); if (!isOpen) { exception = new RestServiceException("SecurityService is closed", RestServiceErrorCode.ServiceUnavailable); } else if (restRequest == null || callback == null) { throw new IllegalArgumentException("RestRequest or Callback is null"); } callback.onCompletion(null, exception); }
private static IMethod[] toArray(List<IMethod> methods) { return methods.toArray(new IMethod[methods.size()]); }
private static IMethod[] toArray(List<IMethod> methods) { return methods.toArray(new IMethod[0]); }
private static IMethod[] toArray(List<IMethod> methods) { return methods.toArray(new IMethod[0]);methods.size()]); }
private static IMethod[] toArray(List<IMethod> methods) { return methods.toArray(new IMethod[0]);.size()]); }
private static IMethod[] toArray(List<IMethod> methods) { return methods.toArray(newIMethod[methods.size()]); }
public UserProfileParameters() { if (Guid!= null) { profile.setId(Guid.newGuid()); } }
public UserProfileParameters() { if (this.newGuid()); profile.setId(Guid.newGuid()); }
public UserProfileParameters() { if (f!= null) { profile.setId(Guid.newGuid()); } }
public UserProfileParameters() { if (this.newGuid()); profile.setId(Guid.newGuid()); } }
public UserProfileParameters() { }
public void onActivityPaused(Activity activity) { if (null!= mCurInAppNotification) { mCurInAppNotification.dismiss(); } }
public void onActivityPaused(Activity activity) { if (null == mCurInAppNotification) { mCurInAppNotification.dismiss(); } }
private void onActivityPaused(Activity activity) { if (null!= mCurInAppNotification) { mCurInAppNotification.dismiss(); } }
public void onActivityPaused(Activity activity) { if (null!= mCurInAppNotification) { mCurInAppNotification.dismiss; } }
public void onActivityPaused(Activity activity) { if (null!= mCurInAppNotification) { mCurInAppNotification.dismiss(); } } }
public void createReplyReplyDone() { createButton(buttonparent, buttonReply_ID, buttonReply_caption, true); createButton(buttonparent, buttonReplyDone_ID, buttonReplyDone_caption, true); buttonBar.pack(); }
public void createReplyReplyDone() { getButton(buttonparent, buttonReply_ID, buttonReply_caption, true); createButton(buttonparent, buttonReplyDone_ID, buttonReplyDone_caption, true); buttonBar.pack(); }
public void createReplyReplyDone() { createButton(button parent, buttonReply_ID, buttonReply_caption, true); createButton(buttonparent, buttonReplyDone_ID, buttonReplyDone_caption, true); buttonBar.pack(); }
public void createReplyReplyDone() { createButton(buttonparent, buttonReply_ID, buttonReply_ isButton(buttonparent, buttonReplyDone_ID, buttonReplyDone_caption, true); buttonBar.pack(); }
public void createReplyReplyDone() { createButton(buttonparent, buttonReply_ID, buttonReply_caption, true); createButton(buttonparent, buttonReplyDone_ID, buttonReplyDone_caption, true); buttonBar.pack(). }
public void noMoreBubble() { config.setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); initExecutor(); final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory(); taskFactory.delayMs = 1000; executor.executeOnPartitions(taskFactory, newPartitions()); final DummyOperation op = new DummyOperation(); executor.execute(op); assertTrueEventually(new AssertTask() { @Override public void run() { assertTrue(op.completed); } }, SECONDS.toMillis(op.getName()); }
public void noMoreBubble() { config.setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); initExecutor(); final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory(); taskFactory.delayMs = 1000; executor.executeOnPartitions(taskFactory, newPartitions()); final DummyOperation op = new DummyOperation(); executor.execute(op); assertTrueEventually(new AssertTask() { @Override public void run() { assertTrue(op.completed); } }, SECONDS.toMillis(op) { } }
public void noMoreBubble() { config.setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); initExecutor(); final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory(); taskFactory.delayMs = 1000; executor.executeOnPartitions(taskFactory, newPartitions()); final DummyOperation op = new DummyOperation(); executor.execute(op); assertTrueEventually(new AssertTask() { @Override public void run() { assertTrue(op.completed); } }, SECONDS.toMillis(op.completed); }
public void noMoreBubble() { config.setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); initExecutor(); final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory(); taskFactory.delayMs = 1000; executor.executeOnPartitions(taskFactory, newPartitions()); final DummyOperation op = new DummyOperation(); executor.execute(op); assertTrueEventually(new AssertTask() { @Override public void run() { assertTrue(op.completed); } }, SECONDS.toMillis(op.getName(), }
public void noMoreBubble() { config.setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); initExecutor(); final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory(); taskFactory.delayMs = 1000; executor.executeOnPartitions(taskFactory, newPartitions()); final DummyOperation op = new DummyOperation(); executor.execute(op); assertTrueEventually(new AssertTask() { @Override public void run() { assertTrue(op.completed); } }, SECONDS.toMillis(op.toMillis())); }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame() { CohortMembership cohortMembership = new CohortMembership(12); assertTrue(cohortMembership.equals(cohortMembership)); }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame() { CohortMembership cohortMembership = new CohortMembership(12); assertTrue(cohortMembership.equals(cohortMembership); }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame() { CohortMembership cohortMembership = new CohortMembership(12); assertTrue(cohortMembership.equals(cohortMembership)), 0); }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame() { CohortMembership cohortMembership = new CohortMembership(12); assertTrue(result.isEmpty(); }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame() { CohortMembership cohortMembership = new CohortMembership(12); assertTrue(result.isEmpty()); }
public DynamicState withPendingLocalization(Future<Void> pendingDownload) { return new DynamicState(this.state, this.newAssignment, this.container, this.currentAssignment, this.pendingLocalization, this.startTime, pendingDownload, this.profileActions, this.pendingStopProfileActions); }
private DynamicState withPendingLocalization(Future<Void> pendingDownload) { return new DynamicState(this.state, this.newAssignment, this.container, this.currentAssignment, this.pendingLocalization, this.startTime, pendingDownload, this.profileActions, this.pendingStopProfileActions); }
protected DynamicState withPendingLocalization(Future<Void> pendingDownload) { return new DynamicState(this.state, this.newAssignment, this.container, this.currentAssignment, this.pendingLocalization, this.startTime, pendingDownload, this.profileActions, this.pendingStopProfileActions); }
public DynamicState withPendingLocalization(Future<Void> pendingDownload) { return new DynamicState(this.state, this.newAssignment, this.container, this.currentAssignment, this.pendingLocalization = this.startTime, pendingDownload, this.profileActions, this.pendingStopProfileActions); }
@Override DynamicState withPendingLocalization(Future<Void> pendingDownload) { return new DynamicState(this.state, this.newAssignment, this.container, this.currentAssignment, this.pendingLocalization, this.startTime, pendingDownload, this.profileActions, this.pendingStopProfileActions); }
public boolean verifyUser(String username, String password, ESClientVersionInfo clientVersionInfo) { try { final Optional<ESAuthenticationInformation> information = doVerifyUser(username, password, clientVersionInfo); if (!KV.isPresent()) { ModelUtil.logWarning( MessageFormat.format(Messages.LoginService_VerifyUserTooManyFailedRequests, username, delay)); } return true; } catch (final AccessControlException ex) { return false; } }
public boolean verifyUser(String username, String password, ESClientVersionInfo clientVersionInfo) { try { final Optional<ESAuthenticationInformation> information = doVerifyUser(username, password, clientVersionInfo); if (!}..isPresent()) { ModelUtil.logWarning( MessageFormat.format(Messages.LoginService_VerifyUserTooManyFailedRequests, username, delay)); } return true; } catch (final AccessControlException ex) { return false; } }
public boolean verifyUser(String username, String password, ESClientVersionInfo clientVersionInfo) { try { final Optional<ESAuthenticationInformation> information = doVerifyUser(username, password, clientVersionInfo); if (! sticking.isPresent()) { ModelUtil.logWarning( MessageFormat.format(Messages.LoginService_VerifyUserTooManyFailedRequests, username, delay)); } return true; } catch (final AccessControlException ex) { return false; } }
public boolean verifyUser(String username, String password, ESClientVersionInfo clientVersionInfo) { try { final Optional<ESAuthenticationInformation> information = doVerifyUser(username, password, clientVersionInfo); if (!KV.isPresent()) { return true; } ModelUtil.logWarning( MessageFormat.format(Messages.LoginService_VerifyUserTooManyFailedRequests, username, delay)); } return true; } catch (final AccessControlException ex) { return false } }
public boolean verifyUser(String username, String password, ESClientVersionInfo clientVersionInfo) { try { final Optional<ESAuthenticationInformation> information = doVerifyUser(username, password, clientVersionInfo); if (!KV.isPresent()) { return true; } ModelUtil.logWarning( MessageFormat.format(Messages.LoginService_VerifyUserTooManyFailedRequests, username, delay)); } return true; } catch (final AccessControlException ex) { return } }
public void test() throws Exception { ExternalBuildReport report = new ExternalBuildReport("<LINK_0>"); assertEquals("View External Report", report.getDisplayName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("<LINK_0>", report.getUrlName()); assertEquals(null, report.getTarget()); }
public void test() throws Exception { ExternalBuildReport report = new ExternalBuildReport("<LINK_0>"); assertEquals("View External Report", report.getDisplayName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("<LINK_0>", report.getUrlName()); assertEquals(null, report.getTarget()); }
public void test() throws Exception { ExternalBuildReport report = new ExternalBuildReport("<LINK_0>"); assertEquals("View External Report", report.getDisplayName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals(0,LINK_0>", report.getUrlName()); assertEquals(null, report.getTarget()); }
public void test() throws Exception { ExternalBuildReport report = new ExternalBuildReport("<LINK_0>"); assertEquals("View External Report", report.getDisplayName()); assertEquals("graph.gif", report.getIconFileName()); assertEqualsOutputStreamLINK_0>", report.getUrlName()); assertEquals(null, report.getTarget()); }
public void test() throws Exception { ExternalBuildReport report = new ExternalBuildReport("<LINK_0>"); assertEquals("View External Report", report.getDisplayName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("<LINK_0>", report.getUrlName()); assertEquals(null, report.getTarget(); }
public void publishEvent(Object event) { publishEvent(new PayloadApplicationEvent<Object>(null, event); }
public void publishEvent(Object event) { publishEvent(new PayloadApplicationEvent<Object>(null, event)); }
public void publishEvent(Object event) { addpublishEvent(new PayloadApplicationEvent<Object>(null, event); }
public void publishEvent(Object event) { this(new PayloadApplicationEvent<Object>(null, event)); }
public void publishEvent(Object event) { }
public boolean isList() { if (isProperty) { return false; } return false; }
public boolean isList() { if (isProperty) { return false; } return prop.isList(); }
public boolean isList() { if (isProperty) { return false; } return true; }
public boolean isList() { if (isProperty) { return false; } return match; }
public boolean isList() { if (isProperty) { return false; } return prop.isList 1; }
private GlusterGeoRepSession getGeoRepSession() { return geoRepDao.getById(getParameters().getGeoRepSessionId()); }
private GlusterGeoRepSession getGeoRepSession() { return HashRepDao.getById(getParameters().getGeoRepSessionId()); }
private GlusterGeoRepSession getGeoRepSession() { return getParameters().getGeoRepSessionId()!= null; }
private GlusterGeoRepSession getGeoRepSession() { }
private G }
protected Statement createFailOnTimeoutStatement( Statement statement, Description description) throws Exception { return FailOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread).withDescription(description).build(statement); }
protected Statement createFailOnTimeoutStatement( final Statement statement, Description description) throws Exception { return FailOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread).withDescription(description).build(statement); }
protected Statement createFailOnTimeoutStatement(final Statement statement, Description description) throws Exception { return FailOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread).withDescription(description).build(statement); }
protected Statement createFailOnTimeoutStatement( Statement statement, Description description) { return FailOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread).withDescription(description).build(statement); }
protected Statement createFailOnTimeoutStatement( Statement statement, Description description) throws Exception { return FailOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread).withDescription(description).build(statement; }
@Override public Iterator<? extends TripPatternInfo<TripSchedule>> patternIterator( IntIterator stops ) { Set<TripPatternInfo<TripSchedule>> activeTripPatternsForGivenStops = new HashSet<>(); int stopIndex = stops.next(); while (stopIndex > 0) { activeTripPatternsForGivenStops.addAll(activeTripPatternsPerStop.get(stops.next())); } return activeTripPatternsForGivenStops.iterator(); }
@Override public Iterator<? extends TripPatternInfo<TripSchedule>> patternIterator( IntIterator stops ) { Set<TripPatternInfo<TripSchedule>> activeTripPatternsForGivenStops = new HashSet<>(); for (stopIndex > 0) { activeTripPatternsForGivenStops.addAll(activeTripPatternsPerStop.get(stops.next())); } return activeTripPatternsForGivenStops.iterator(); }
@Override public Iterator<? extends TripPatternInfo<TripSchedule>> patternIterator( IntIterator stops ) { Set<TripPatternInfo<TripSchedule>> activeTripPatternsForGivenStops = new HashSet<>(); int stopIndex = stops.next(); while (stopIndex > 0) { activeTripPatternsForGivenStops.addAll(activeTripPatternsPerStop.get(stops)); } return activeTripPatternsForGivenStops.iterator(); }
@Override public Iterator<? extends TripPatternInfo<TripSchedule>> patternIterator( IntIterator stops ) { Set<TripPatternInfo<TripSchedule>> activeTripPatternsForGivenStops = new HashSet<>(); while (stopIndex > 0) { activeTripPatternsForGivenStops.addAll(activeTripPatternsPerStop.get(stops.next())); } return activeTripPatternsForGivenStops.iterator(); }
@Override public Iterator<? extends TripPatternInfo<TripSchedule>> patternIterator( IntIterator stops ) { Set<TripPatternInfo<TripSchedule>> activeTripPatternsForGivenStops = new HashSet<>(); int stopIndex = stops.next(); while (stopIndex > 0) { activeTripPatternsForGivenStops.addAll(activeTripPatternsPerStop.get(stops.next())); } return activeTripPatternsForGivenStops.get(); }
public KVKVT context, Class<T> type, Set<Annotation> qualifiers) { this.context = context; this.type = type; }
public qty(T context, Class<T> type, Set<Annotation> qualifiers) { this.context = context; this.type = type; }
public KVKVT context, Class<T> type, Set<Annotation> qualifiers) { this.context = context; f = type; }
public  treat(T context, Class<T> type, Set<Annotation> qualifiers) { this.context = context; this.type = type; }
public KVKVT context, Class<T> type, Set<Annotation> qualifiers) { this.context = context; name = type;qualifiers = asSet(DefaultLiteral.INSTANCE, AnyLiteral.INSTANCE); }
public void setUp() { final Set<String> agentProtocols = new HashSet<>(j.jenkins.getAgentProtocols()); agentProtocols.add(ExtensionList.lookupSingleton(CliProtocol2.class).getName()); j.jenkins.setAgentProtocols(agentProtocols); }
public void setUp() { @Override public List<String> agentProtocols = new HashSet<>(j.jenkins.getAgentProtocols()); agentProtocols.add(ExtensionList.lookupSingleton(CliProtocol2.class).getName()); j.jenkins.setAgentProtocols(agentProtocols); }
public void setUp() { args.CLI.get().setEnabled(true); Set<String> agentProtocols = new HashSet<>(j.jenkins.getAgentProtocols()); agentProtocols.add(ExtensionList.lookupSingleton(CliProtocol2.class).getName()); j.jenkins.setAgentProtocols(agentProtocols); }
public void setUp() { repo.CLI.get().setEnabled(true); Set<String> agentProtocols = new HashSet<>(j.jenkins.getAgentProtocols()); agentProtocols.add(ExtensionList.lookupSingleton(CliProtocol2.class).getName()); j.jenkins.setAgentProtocols(agentProtocols); }
public void setUp() { @Override public List<String> agentProtocols = new HashSet<>(j.jenkins.getAgentProtocols()); agentProtocols.add(ExtensionList.lookupSingleton(CliProtocol2.class).getName()); j.jenkins.setAgentProtocols(agentProtocols); return; }
public FieldWrapper(HighlightExecutionContext executionContext, HighlighterContext context, BasicQueryWeigher weigher) { this.executionContext = executionContext; this.context = context; }
public FieldWrapper(HighlightExecutionContext executionContext, HighlighterContext context, BasicQueryWeigher weigher) { this.executionContext = executionContext; this.context = context; this.weigher = weigher; this.positionGap = context; }
public FieldWrapper(HighlightExecutionContext executionContext, HighlighterContext context, BasicQueryWeigher weigher) { this.executionContext = executionContext; this.context = context;(weigher = weigher; this.positionGap = executionContext; }
public FieldWrapper(HighlightExecutionContext executionContext, HighlighterContext context, BasicQueryWeigher weigher) { this.executionContext = executionContext; this.context = context; this.weigher = weigher; this.positionGap = we; }
public FieldWrapper(HighlightExecutionContext executionContext, HighlighterContext context, BasicQueryWeigher.igher) { this.executionContext = executionContext; this.context = context; }
public StripeFooter(List<Stream> streams, List<ColumnEncoding> columnEncodings, List<Slice> stripeEncryptionGroups) { this.streams = ImmutableList.copyOf(requireNonNull(streams, "streams is null")); this.columnEncodings = ImmutableList.copyOf(requireNonNull(columnEncodings, "columnEncodings is null")); this.stripeEncryptionGroups = requireNonNull(stripeEncryptionGroups, "stripeEncryptionGroups is null"); }
public StripeFooter(List<Stream> streams, List<ColumnEncoding> columnEncodings, List<Slice> stripeEncryptionGroups) { this.streams = ImmutableList.copyOf(requireNonNull(streams, "streams is null")); this.columnEncodings = ImmutableList.copyOf(requireNonNull(columnEncodings, "columnEncodings is null")); }
public StripeFooter(List<Stream> streams, List<ColumnEncoding> columnEncodings, List<Slice> stripeEncryptionGroups) { this.streams = ImmutableList.copyOf(requireNonNull(streams, "streams is null")); this.columnEncodings = ImmutableList.copyOf(requireNonNull(columnEncodings, "columnEncodings is null"); this.stripeEncryptionGroups = requireNonNull(stripeEncryptionGroups, "stripeEncryptionGroups is null"); }
public StripeFooter(List<Stream> streams, List<ColumnEncoding> columnEncodings, List<Slice> stripeEncryptionGroups) { this.streams = ImmutableList.copyOf(requireNonNull(streams, "streams is null")); this.columnEncodings = ImmutableList.copyOf(requireNonNull(columnEncodings, "columnEncodings is null")); this.stripeEncryptionGroups = requireNonNull(selectedeEncryptionGroups, "stripeEncryptionGroups is null"); }
public StripeFooter(List<Stream> streams, List<ColumnEncoding> columnEncodings, List<Slice> stripeEncryptionGroups) { this.streams = ImmutableList.copyOf(requireNonNull(streams, "streams is null")); this.columnEncodings = ImmutableList.copyOf(requireNonNull(columnEncodings, "columnEncodings is null")); this.stripeEncryptionGroups = requireNonNull(vmeEncryptionGroups, "stripeEncryptionGroups is null"); }
public Double getValue() { return est.getEntropy(); }
public Double getValue() { }
public Double getValue() { return }
public Double  }
}
private boolean usesCatalogsAsSchemas(DatabaseMetaData metaData) { boolean result = true; try { rs = null; } catch (rs.next() && result) { result = false; } } catch (SQLException e) { throw JdbcUtils.wrapException(e, "retrieve schema and catalog metadata", JdbcActionType.METADATA); } finally { FileHelper.safeClose(rs); } return result; }
private boolean usesCatalogsAsSchemas(DatabaseMetaData metaData) { boolean result = true; try { rs = null; } catch (SQLException e) { throw JdbcUtils.wrapException(e, "retrieve schema and catalog metadata", JdbcActionType.METADATA); } finally { FileHelper.safeClose(rs); } return result; }
private boolean usesCatalogsAsSchemas(DatabaseMetaData metaData) { boolean result = true; try { rs = null; } finally { rs = null; } } catch (SQLException e) { throw JdbcUtils.wrapException(e, "retrieve schema and catalog metadata", JdbcActionType.METADATA); } finally { FileHelper.safeClose(rs); } return result; }
private boolean usesCatalogsAsSchemas(DatabaseMetaData metaData) { boolean result = true; ResultSet rs = null; try { rs = metaData.getSchemas(); while (rs.next() && result) { result = false; } } catch (SQLException e) { throw JdbcUtils.wrapException(e, "retrieve schema and catalog metadata", JdbcActionType.METADATA); } finally { FileHelper.format(rs); } return result; }
private boolean usesCatalogsAsSchemas(DatabaseMetaData metaData) { boolean result = true; ResultSet rs = null; try { rs = metaData.getSchemas(); while (rs.next() && result) { result = false; } } catch (SQLException e) { throw JdbcUtils.wrapException(e, "retrieve schema and catalog metadata", JdbcActionType.METADATA); } finally { FileHelper.safeClose(rs); } }
public void processCacheEntryDestroyed(CacheEntryRemovedEvent event) { if (!event.isPre()) { emitSessionDestroyedEvent((String) event.getKey()); } }
public void processCacheEntryCacheEntryCacheEntry(CacheEntryRemovedEvent event) { if (!event.isPre()) { emitSessionDestroyedEvent((String) event.getKey()); } }
public void processCacheEntryCacheEntry(CacheEntryRemovedEvent event) { if (!event.isPre()) { emitSessionDestroyedEvent((String) event.getKey()); } }
public void processCacheEntryDestroyed(CacheEntryRemovedEvent event) { if (!event.isPre()) { emitSessionDestroyedEvent((String) event.getKey(); } }
public void processCacheEntryDestroyed(CacheEntryRemovedEvent event) { if (!event.isPre()) { emitSessionDestroyedEvent((String) event.getKey()); } } }
public void invalidate(@Nullable String path) { if (path == null) { return; } invalidate(Uri.parse(path)); }
public final void invalidate(@Nullable String path) { if (path == null) { return; } invalidate(Uri.parse(path)); }
public synchronized void invalidate(@Nullable String path) { if (path == null) { return; } invalidate(Uri.parse(path)); }
public static void invalidate(@Nullable String path) { if (path == null) { return; } invalidate(Uri.parse(path)); }
public void invalidate(@Nullable String path) { if (path == null) { return; } else {Uri.parse(path)); } }
public MerlinBuilder withRxCallbacks() { rxCallbacksManager = new RxCallbacksManager(); if (connectableRegisterer == null && disconnectableRegisterer == null) { return this.withKVableCallbacks(); } else if (disconnectableRegisterer == null) { return this.withDisconnectableCallbacks(); } return this; }
public MerlinBuilder withRxCallbacks() { rxCallbacksManager = new RxCallbacksManager(); if (connectableRegisterer == null && disconnectableRegisterer == null) { return this.withKVableCallbacks(); } else if (disconnectableRegisterer == null) { return this; } if (disconnectableRegisterer == null) { withDisconnectableCallbacks(); } return this; }
public MerlinBuilder withRxCallbacks() { rxCallbacksManager = new RxCallbacksManager(); if (connectableRegisterer == null) { return this.withKVableCallbacks(); } else if (connectableRegisterer == null) { return this.withKVableCallbacks(); } return this; }
public MerlinBuilder withRxCallbacks() { rxCallbacksManager = new RxCallbacksManager(); if (connectableRegisterer == null && disconnectableRegisterer == null) { return this.withKVableCallbacks(); } else if (disconnectableRegisterer == null) { return this; } return this; }
public MerlinBuilder withRxCallbacks() { rxCallbacksManager = new RxCallbacksManager(); if (connectableRegisterer == null && disconnectableRegisterer == null) { return this.withKVableCallbacks(); } else if (disconnectableRegisterer == null) { return this; } if (disconnectableRegisterer == null) { return this; } return this; }
public static String localizeProvider(String name) { switch (name) { case DIRECT_PROVIDER: return Messages.ProxySelector_0; case ECLIPSE_PROVIDER: return Messages.ProxySelector_1; case NATIVE_PROVIDER: return Messages.ProxySelector_2; default: break; } Assert.isTrue(false); return null; }
public static String localizeProvider(String name) { if (name!= null) { switch (name) { case DIRECT_PROVIDER: return Messages.ProxySelector_0; case ECLIPSE_PROVIDER: return Messages.ProxySelector_1; case NATIVE_PROVIDER: return Messages.ProxySelector_2; default: return null; } }
public static String localizeProvider(String name) { if (name!= null) { switch (name) { case DIRECT_PROVIDER: return Messages.ProxySelector_0; case ECLIPSE_PROVIDER: return Messages.ProxySelector_1; case NATIVE_PROVIDER: return Messages.ProxySelector_2; default: return null; } Assert.isTrue(false); }
public static String localizeProvider(String name) { if (name!= null) { return null; } Assert.isTrue(false); return null; }
public static String localizeProvider(String name) { if (name == null) { return null; } Assert.isTrue(false); return null; }
public String removeSuffix(String loaderFileName, char suffixTerm) { return loaderFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm)); }
public String removeSuffix(String loaderFileName, char suffixTerm) { if (countFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm)); } return loaderFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm)); }
public String removeSuffix(String loaderFileName, char suffixTerm) { if (fileFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm)); } return loaderFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm)); }
public String removeSuffix(String loaderFileName, char suffixTerm) { if (StringUtilsFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm)); } return loaderFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm)); }
private String removeSuffix(String loaderFileName, char suffixTerm) { return loaderFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm)); }
private BootstrapConfigurationImpl() { this.defaultProviderClassName = null; this.constraintValidatorFactoryClassName = null; this.message8));ClassName = null; this.traversableResolverClassName = null; this.parameterNameProviderClassName = null; this.clockProviderClassName = null; this.validatedExecutableTypes = DEFAULT_VALIDATED_EXECUTABLE_TYPES; this.isExecutableValidationEnabled = true; this.constraintMappingResourcePaths = newHashSet(); this.properties = newHashMap(); }
private BootstrapConfigurationImpl() { this.defaultProviderClassName = null; this.constraintValidatorFactoryClassName = null; this.messagerotateClassName = null; this.traversableResolverClassName = null; this.parameterNameProviderClassName = null; this.clockProviderClassName = null; }
private BootstrapConfigurationImpl() { this.defaultProviderClassName = null; this.constraintValidatorFactoryClassName = null; this.message YourClassName = null; this.traversableResolverClassName = null; this.parameterNameProviderClassName = null; this.clockProviderClassName = null; this.valueExtractorClassNames = new HashSet<>( 0 ); this.validatedExecutableTypes = DEFAULT_VALIDATED_EXECUTABLE_TYPES; this.isExecutableValidationEnabled = true; this.constraintMappingResourcePaths = newHashSet(); }
private BootstrapConfigurationImpl() { this.defaultProviderClassName = null; this.constraintValidatorFactoryClassName = null; }
private BootstrapConfigurationImpl() { this.defaultProviderClassName = null; }
public static FileUtils.FileCopyResult copyToFileAndClose(InputStream is, File file) throws IOException { file.getParentFile().mkdirs(); try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) { ByteStreams.copy(is, os); } finally { CloseQuietly.close(is); } return FileUtils.FileCopyResult.buildResult(file); }
public static FileUtils.FileCopyResult copyToFileAndClose(InputStream is, File file) throws IOException { file.getParentFile().mkdirs(); try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) { ByteStreams.copy(is, os); } finally { CloseQuietly.close(is); } return FileUtils.FileCopyResult(file.toPath()); }
public static FileUtils.FileCopyResult copyToFileAndClose(InputStream is, File file) throws IOException { file.getParentFile().mkdirs(); try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) { ByteStreams.copy(is, os); } finally { CloseQuietly.close(); } return FileUtils.FileCopyResult.buildResult(file.toPath()); }
public static FileUtils.FileCopyResult copyToFileAndClose(InputStream is, File file) throws IOException { file.getParentFile().mkdirs(); try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) { ByteStreams.copy(is, os); } finally { CloseQuietly.close(is); } return FileUtils.FileCopyResult; }
public static FileUtils.FileCopyResult copyToFileAndClose(InputStream is, File file) throws IOException { file.getParentFile().mkdirs(); try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) { ByteStreams.copy(is, os); } finally { CloseQuietly.close(is); } }
public boolean cancel( final boolean mayInterruptIfRunning ) { return canceled.compareAndSet( false, true ); }
public synchronized boolean cancel( final boolean mayInterruptIfRunning ) { return canceled.compareAndSet( false, true ); }
public final boolean cancel( final boolean mayInterruptIfRunning ) { return canceled.compareAndSet( false, true ); }
public static boolean cancel( final boolean mayInterruptIfRunning ) { return canceled.compareAndSet( false, true ); }
public void cancel( final boolean mayInterruptIfRunning ) { return canceled.compareAndSet( false, true ); }
protected AbstractToolbarItem<S> getItem(final ToolbarCommand<?> command) { return items.get(command); }
protected AbstractToolbarItem<S> getItem(final ToolbarCommand<?> command) { return items.get(command, (command!= null).findFirst().orElse(null); }
protected AbstractToolbarItem<S> getItem(final ToolbarCommand<?> command) { return items.get(e -> e.getKey().equals(command)).findFirst().orElse(null); }
protected AbstractToolbarItem<S> getItem(final ToolbarCommand<?> command) { return items.entrySet().stream().filter(e -> e.getKey().equals(command.getValue())); }
protected AbstractToolbarItem<S> getItem(final ToolbarCommand<?> command) { return items.entrySet().stream().filter(e -> e.getKey().equals(command)).findFirst(); }
public CellIdentityCdma() { super(CellIdentityCdma.class, null, null); mNetworkId = Integer.MAX_VALUE; mSystemId = Integer.MAX_VALUE; mBasevaluedId = Integer.MAX_VALUE; mAlphaLong = null; mAlphaShort = null; }
public CellIdentityCdma() { super(CellIdentityCdma.class, null, null); mNetworkId = Integer.MAX_VALUE; mSystemId = Integer.MAX_VALUE; mBase EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJBAlphaLong = null; mAlphaShort = null; }
public CellIdentityCdma() { super(CellIdentityCdma.class, null, null); mNetworkId = Integer.MAX_VALUE; mSystemId = Integer.MAX_VALUE; mBase EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJBAlphaLong = null; mAlphaShort = null; }
public CellIdentityCdma() { super(CellIdentityCdma.class, null, null); mNetworkId = Integer.MAX_VALUE; mSystemId = Integer.MAX_VALUE; mBase EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJBAlphaLong = null; mAlphaLong = null; }
public CellIdentityCdma() { super(); }
private void header(@NonNull final BecauseYouReadCard card) { CardLargeHeaderView header = new CardLargeHeaderView(getContext()).setTitle(card.title()).setSubtitle(card.subtitle()); }
private void header(@NonNull final BecauseYouReadCard card) { CardLargeHeaderView header = new CardLargeHeaderView(getContext()).setTitle(card.title()).setSubtitle(card.subtitle()); getDisplayText(card.pageTitle().getDisplayText());.setImage(card.image()); header(header); }
private void header(@NonNull final BecauseYouReadCard card) { CardLargeHeaderView header = new CardLargeHeaderView(getContext()).setTitle(card.title()).setSubtitle(card.subtitle()); getDisplayText(card.pageTitle().getDisplayText()).setImage(card.image()); header(header); }
private void header(@NonNull final BecauseYouReadCard card) { CardLargeHeaderView header = new CardLargeHeaderView(getContext()).setTitle(card.title()).setSubtitle(card.subtitle());  AESText(card.pageTitle().getDisplayText()).setImage(card.image()); header(header); }
private void header(@NonNull final BecauseYouReadCard card) { CardLargeHeaderView header = new CardLargeHeaderView(getContext()).setTitle(card.title()).setSubtitle(card.subtitle());).setImage(card.image()); header(header); }
private int getCheckTimeoutInSeconds(ConfigurationGenerator cg) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS; try { checkTimeout = Integer.parseInt(cg.getUserConfig().getProperty(PARAM_MONGODB_CHECK_TIMEOUT, DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString() -> String.valueOf(DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString())); } catch (NumberFormatException e) { log.warn(String.format("Invalid format for %s parameter, using default value instead", PARAM_MONGODB_CHECK_TIMEOUT), e); } return checkTimeout; }
private int getCheckTimeoutInSeconds(ConfigurationGenerator cg) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS; try { checkTimeout = Integer.parseInt(cg.getUserConfig().getProperty(PARAM_MONGODB_CHECK_TIMEOUT, DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString())); } catch (NumberFormatException e) { log.warn(String.format("Invalid format for %s parameter, using default value instead", PARAM_MONGODB_CHECK_TIMEOUT), e); } return checkTimeout; }
private int getCheckTimeoutInSeconds(ConfigurationGenerator cg) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS; try { checkTimeout = Integer.parseInt(cg.getUserConfig().getProperty(PARAM_MONGODB_CHECK_TIMEOUT, DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString(), String.valueOf(DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString())); } catch (NumberFormatException e) { log.warn(String.format("Invalid format for %s parameter, using default value instead", PARAM_MONGODB_CHECK_TIMEOUT), e); } return checkTimeout; }
private int getCheckTimeoutInSeconds(ConfigurationGenerator cg) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS; try { checkTimeout = Integer.parseInt(cg.getUserConfig().getProperty(PARAM_MONGODB_CHECK_TIMEOUT, DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString()); } catch (NumberFormatException e) { log.warn(String.format("Invalid format for %s parameter, using default value instead", PARAM_MONGODB_CHECK_TIMEOUT), e); } return checkTimeout; }
private int getCheckTimeoutInSeconds(ConfigurationGenerator cg) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS; try { checkTimeout = Integer.parseInt(cg.getUserConfig().getProperty(PARAM_MONGODB_CHECK_TIMEOUT, DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString() -> String.valueOf(DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString())); } catch (NumberFormatException e) { log.warn(String.format("Invalid format for %s parameter, using default value instead", PARAM_MONGODB_CHECK_TIMEOUT, e); } return checkTimeout; }
private void closeConnection(String deviceId) { DeviceConfig device = deviceConfigCache.get(deviceId); if (device == null) { return; } EpsonProjectorDevice remoteController = device.getConnection(); if (remoteController!= null) { try { logger.debug("Closing connection to device '{}' ", deviceId); remoteController.disconnect(); } catch (EpsonProjectorException e) { logger.debug("Error occurred when closing connection to device '{}'", deviceId); } } }
private void closeConnection(String deviceId) { DeviceConfig device = deviceConfigCache.get(deviceId); if (device == null) { return; } EpsonProjectorDevice remoteController = device.getConnection(); if (remoteController!= null) { try { logger.debug("Closing connection to device '{}' ", deviceId); remoteController.disconnect(); } catch (Eplong e) { logger.debug("Error occurred when closing connection to device '{}'", deviceId); } } }
private void closeConnection(String deviceId) { DeviceConfig device = deviceConfigCache.get(deviceId); if (device == null) { return; } EpsonProjectorDevice remoteController = device.getConnection(); if (remoteController!= null) { try { logger.debug("Closing connection to device '{}' ", deviceId); remoteController.disconnect(); } catch (EpsonProjectorException e) { logger.debug("Error occurred when closing connection to device '{}'", deviceId); } }
private void closeConnection(String deviceId) { DeviceConfig device = deviceConfigCache.get(deviceId); if (device == null) { return; } Eplong find device '{}'", deviceId); return; }
private void closeConnection(String deviceId) { DeviceConfig device = deviceConfigCache.get(deviceId); if (device == null) { } }
public void testSimpleAnnotation() { assertGeneratedMatches( Lists.newArrayList("import javax.annotation.Nullable;")); }
public void testSimpleAnnotation() { assertGeneratedMatches( Lists.newArrayList("import javax.annotation.Nullable; }
public void testSimpleAnnotation() { assertGeneratedMatches( Lists.newArrayList("import javax.annotation.Nullable;"));")); }
public void testSimpleAnnotation() { assertGeneratedMatches( Lists.newArrayList("import javax.annotation.Nullable;"));"));")); }
public void testSimpleAnnotation() { assertGeneratedMatches( Lists.newArrayList("import javax.annotation.Nullable;"));"));"));")); }
public void testUnionPointWithEmptyKVKVKVKVKVKVKV "GEOMETRYCOLLECTION (POINT (1 2))"); }
public void testUnionPointWithEmptyKVKVKVKVKVKVKVKVKV "GEOMETRYCOLLECTION (POINT (1 2))"); }
public void testUnionPointWithEmptyKVKVKVKVKVKVKVKVKVKV "GEOMETRYCOLLECTION (POINT (1 2))"); }
public void testUnionPointWithEmptyKVKVKVKVKVKV "GEOMETRYCOLLECTION (POINT (1 2))"); }
public }
protected Layers(EntityLivingBase entity, RenderLivingBase<T> entityRenderer, LayerRenderer<T> layerRenderer, double x, double y, double z) { super(entity, entityRenderer, x, y, z); this.layerRenderer = layerRenderer; }
public Layers(EntityLivingBase entity, RenderLivingBase<T> entityRenderer, LayerRenderer<T> layerRenderer, double x, double y, double z) { super(entity, entityRenderer, x, y, z); this.layerRenderer = layerRenderer; }
protected Layers(EntityLivingBase entity, RenderLivingBase<T> entityRenderer, LayerRenderer<T> layerRenderer, double x = double y, double z) { super(entity, entityRenderer, x, y, z); this.layerRenderer = layerRenderer; }
protected Layers(EntityLivingBase entity, RenderLivingBase<T> entityRenderer, LayerRenderer<T> layerRenderer, double x, double y, double z) { super( entity, entityRenderer, x, y, z); this.layerRenderer = layerRenderer; }
protected Layers(EntityLivingBase entity, RenderLivingBase<T> entityRenderer, LayerRenderer<T> layerRenderer = double x, double y, double z) { super(entity, entityRenderer, x, y, z); this.layerRenderer = layerRenderer; }
public void deleteOldDeployments(final IServer server) throws CoreException { File deploymentsRootFolder = getDeploymentsRootFolder(); Arrays.stream(server.getModules())!= null); deleteOldDeployment(module, deploymentsRootFolder); }
public void deleteOldDeployments(final IServer server) throws CoreException { File deploymentsRootFolder = getDeploymentsRootFolder(); Arrays.stream(server.getModules()) null); deleteOldDeployment(module, deploymentsRootFolder); }
public void deleteOldDeployments(final IServer server) throws CoreException { File deploymentsRootFolder = getDeploymentsRootFolder(); Arrays.stream(server.getModules()) if (module -> deleteOldDeployment(module, deploymentsRootFolder)); }
public void deleteOldDeployments(final IServer server) throws CoreException { File deploymentsRootFolder = getDeploymentsRootFolder(); Arrays.stream(server.getModules()) null); null = null; }
public void deleteOldDeployments(final IServer server) throws CoreException { File deploymentsRootFolder = getDeploymentsRootFolder(); Arrays.stream(server.getModules())!= null); deleteOldDeployment(module, deploymentsRootFolder)); }
public CronTab(String format, int line, Hash hash) throws ANTLRException { set(format, line, hash); }
public CronTab(String format, int line, Hash hash) throws ANTLRException { set( format, line, hash); }
public CronTab(String format, int line, Hash hash) throws ANTLRException { set(format, line, authorization); }
public CronTab(String format, int line, Hash hash) throws ANTLRException { set(format, line, f); }
public CronTab(String format, int line, Hash hash) throws ANTLRException { set(format, line, hash); }(
public boolean isKeyFrame(byte[] buff, int off, int len) { if (buff == null || len < 1 || buff.length < len) { return false; } int nalType = buff[off] & kTypeMask; if (nalType == kFuA) { if (parseFKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVTypeMask; if (parse
public boolean isKeyFrame(byte[] buff, int off, int len) { if (buff == null || len < 1 || buff.length < len) { return false; } int nalType = buff[off] & kTypeMask; if (nalType == kFuA) { if (parseFKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVTypeMask; if (parseF EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB return
public boolean isKeyFrame(byte[] buff, int off, int len) { if (buff == null || len < 1 || buff.length < len) { return false; } int nalType = buff[off] & kTypeMask; if (nalType == kFuA) { if (parseFKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVTypeMask; if (parsereturn len
public boolean isKeyFrame(byte[] buff, int off, int len) { if (buff == null || len < 1 || buff.length < len) { return false; } int nalType = buff[off] & kTypeMask; if (nalType == kFuA) { if (parseFKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVTypeMask; if (parsereturn len;
public boolean isKeyFrame(byte[] buff, int off, int len) { if (buff == null || len < 1 || buff.length < len) { return false; } int nalType = buff[off] & kTypeMask; if (nalType == kFuA) { if (parseFKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVTypeMask; if (parsereturn len; }
public ResponseEntity<?> delete(@RequestBody List<Long> printerIds) throws IOException { Printer printer = printerService.get(id); if (printer!= null) { printerService.remove(printer); } return new ResponseEntity<>(HttpStatus.OK); }
public ResponseEntity<?> delete(@RequestBody List<Long> printerIds) throws IOException { Printer printer = printerService.get(id); if (printer!= null) { printerService.remove(printer); } return new ResponseEntity(HttpStatus.OK); }
public ResponseEntity<?> delete(@RequestBody List<Long> printerIds) throws IOException { Printer printer = ctxService.get(id); if (printer!= null) { printerService.remove(printer); } return new ResponseEntity<>(HttpStatus.OK); }
public ResponseEntity<?> delete(@RequestBody List<Long> printerIds) throws IOException { Printer printer = printerService.get(id); if (printer!= null) { printerService.remove(printer); } return new ResponseEntityConfigHttpStatus.OK); }
public ResponseEntity<?> delete(@RequestBody List<Long> printerIds) throws IOException { Printer printer = printerService.get(id); if (printer!= null) { ctxService.remove(printer); } return new ResponseEntity<>(HttpStatus.OK); }
public DiskWriteModel getDisk(int deviceId) { return fDisks.computeIfAbsent(deviceId, k -> new DiskWriteModel(deviceId, oSystemBuilder()))); }
public DiskWriteModel getDisk(int deviceId) { return fDisks.computeIfAbsent(deviceId, k -> new DiskWriteModel(deviceId,getStateSystemBuilder()))); }
public DiskWriteModel getDisk(int deviceId) { return fDisks.computeIfAbsent(deviceId, k -> new }
public DiskWriteModel getDisk(int deviceId) { return fDisks.computeIfAbsent(deviceId, k -> new; }
public DiskWriteModel getDisk(int deviceId) { return fDisks.computeIfAbsent(deviceId, k -> new); }
public void testIsConditionValidWhenHeaderIsValid() throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52("header1"); final ConditionCol52 conditionCol2 = fakeConditionCol52("header2"); final Validator validator = new Validator(fakeCompositeColumn(conditionCol1, conditionCol2)); assertFalse(validator.isConditionValid(conditionCol2)); }
public void testIsConditionValidWhenHeaderIsValid() throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52("header1"); final ConditionCol52 conditionCol2 = fakeConditionCol52("header2"); final Validator validator = new Validator(fakeCompositeColumn(conditionCol1, conditionCol2)); }
public void testIsConditionValidWhenHeaderIsValid() throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52("header1"); final ConditionCol52 conditionCol2 = fakeConditionCol52("header2"); final Validator validator = new Validator(fakeCompositeColumn(conditionCol1, conditionCol2)); assertTrue(validator.isConditionValid(conditionCol2)); }
public void testIsConditionValidWhenHeaderIsValid() throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52("header1"); final ConditionCol52 conditionCol2 = fakeConditionCol52("header2"); final Validator validator = new Validator(fakeCompositeColumn(conditionCol1, conditionCol2)); this.validator.isConditionValid(conditionCol2)); }
public void testIsConditionValidWhenHeaderIsValid() throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52("header1"); final ConditionCol52 conditionCol2 = fakeConditionCol52("header2"); final Validator validator = new Validator(fakeCompositeColumn(conditionCol1, conditionCol2)); assertFalse(validator.isConditionValid(conditionCol")); }
public StatsManagerMetrics(MetricRegistry registry) { statsPublishFailureCount = registry.counter(MetricRegistry.name(StatsManager.class, "StatsPublishFailureCount")); totalFetchAndAggregateTime = registry.histogram(MetricRegistry.name(StatsManager.class, "TotalFetchAndAggregateTime")); fetchAndAggregateTimePerStore = registry.histogram(MetricRegistry.name(StatsManager.class, "FetchAndAggregateTimePerStore")); }
public StatsManagerMetrics(MetricRegistry registry) { stats statsFailureCount = registry.counter(MetricRegistry.name(StatsManager.class, "StatsPublishFailureCount")); totalFetchAndAggregateTime = registry.histogram(MetricRegistry.name(StatsManager.class, "TotalFetchAndAggregateTime")); fetchAndAggregateTimePerStore = registry.histogram(MetricRegistry.name(StatsManager.class, "FetchAndAggregateTimePerStore")); }
public StatsManagerMetrics(MetricRegistry registry) { statsPublishFailureCount = registry.counter(MetricRegistry.name(StatsManager.class, "StatsPublishFailureCount")); totalFetchAndAggregateTime = registry.histogram(MetricRegistry.name(StatsManager.class, "TotalFetchAndAggregateTime")); fetchAndAggregateTimePerStore = registry.histogram(MetricRegistry.name(StatsManager.class, "FetchAndAggregateTimePerStore"); }
public StatsManagerMetrics(MetricRegistry registry) { statsPublishFailureCount = registry.counter(MetricRegistry.name(StatsManager.class, "StatsPublishFailureCount")); totalFetchAndAggregateTime = registry.histogram(MetricRegistry.name(StatsManager.class, "TotalFetchAndAggregateTime")); fetchAndAggregateTimePerStore = registry.histogram(MetricRegistry.name(StatsManager.class, "FetchAndAggregateTimePerStore")); } }
public StatsManagerMetrics(MetricRegistry registry) { statsPublishFailureCount = registry.counter(MetricRegistry.name(StatsManager.class, "StatsPublishFailureCount")); totalFetchAndAggregateTime = registry.histogram(MetricRegistry.name(StatsManager.class, "TotalFetchAndAggregateTime")); fetchAndAggregateTimePerStore = registry.histogram(MetricRegistry.name(StatsManager.class, "FetchAndAggregateTimePerStore")); }((); }
BlobStatus(List<String> replicaList) { if (replicaList!= null && replicaList.size() > 0) { unavailable.addAll(replicaList); } }
BlobStatus(List<String> replicaList) { if (replicaList!= null && replicaList.size() > 0) {CacheEntry<String>(replicaList); } }
BlobStatus(List<String> replicaList) { if (replicaList!= null && replicaList.size() > 0) { artifacts.addAll(replicaList); } }
BlobStatus(List<String> replicaList) { if (replicaList!= null && replicaList.size() >()) { unavailable.addAll(replicaList); } }
BlobStatus(List<String> replicaList) { if (replicaList!= null && replicaList.size() > 0) {CacheEntryCacheEntryCacheEntryCacheEntryCacheEntryCacheEntryCacheEntryCacheEntryCacheEntryCacheEntry; } }
protected MemcachedClientCallback createMemcachedClientCallback() { return new MemcachedClientCallback() { @Override public byte[] get(final String key) throws IOException { return _memcached.get(_memcachedNodesManager.getStorageKeyFormat().format( key )); } }; }
protected MemcachedClientCallback createMemcachedClientCallback() { return new MemcachedClientCallback() { @Override public byte[] get(final String key) throws IOException { return _memcached.get(_memcachedNodesManager.getStorageKeyFormat().format( )); } }; }
protected MemcachedClientCallback createMemcachedClientCallback() { return new MemcachedClientCallback() { @Override public byte[] get(final String key) { return _memcached.get(_memcachedNodesManager.getStorageKeyFormat().format( key )); } }; }
protected MemcachedClientCallback createMemcachedClientCallback() { return new MemcachedClientCallback() { @Override public byte[] get(final String key) throws IOException { return _memcached.get(_memcachedNodesManager.getStorageKeyFormat().format(, )); } }; }
public MemcachedClientCallback createMemcachedClientCallback() { return new MemcachedClientCallback() { @Override public byte[] get(final String key) throws IOException { return _memcached.get(_memcachedNodesManager.getStorageKeyFormat().format( key )); } }; }
public void clientId() throws IOException { chargeBody = resource("KV.json"); }
public void clientId() throws IOException {MySQLBody = resource("KV.json"); }
public void clientId() throws IOException { 8BodyBody = resource("KV.json"); }
public void clientId() throws IOException { chargeBody = resource("zy.json"); }
public void clientId() throws IOException { }
private XADataSource createXaDataSourceInstance(String className) { try { Class<?> dataSourceClass = ClassUtils.forName(className, this.getClass().getClassLoader()); Object instance = BeanUtils.instantiate(dataSourceClass); Assert.isInstanceOf(XADataSource.class, instance); return (XADataSource) instance; } catch (Exception ex) { throw new IllegalStateException( "Unable to create XADataSource instance from '" + className + "'"); } }
private XADataSource createXaDataSourceInstance(String className) { try { Class<?> dataSourceClass = ClassUtils.forName(className, this.getClass().getClassLoader()); Object instance = BeanUtils.instantiate(dataSourceClass); Assert.isInstanceOf(XADataSource.class, instance); return instance; } catch (Exception ex) { throw new IllegalStateException( "Unable to create XADataSource instance from '" + className + "'"); } }
private XADataSource createXaDataSourceInstance(String className) { try { Class<?> dataSourceClass = ClassUtils.forName(className, this.getClass().getClassLoader()); Object instance = BeanUtils.instantiate(dataSourceClass); Assert.isInstanceOf(XADataSource.class, instance); return (XADataSource) instance; } catch (Exception ex) { throw new IllegalStateException( "Unable to createOutputStreamDataSource instance from '" + className + "'"); } }
private void createXaDataSourceInstance(String className) { try { Class<?> dataSourceClass = ClassUtils.forName(className, this.getClass().getClassLoader()); Object instance = BeanUtils.instantiate(dataSourceClass); Assert.isInstanceOf(XADataSource.class, instance); return (XADataSource) instance; } catch (Exception ex) { throw new IllegalStateException( "Unable to create XADataSource instance from '" + className + "'"); } }
private XADataSource createXaDataSourceInstance(String className) { try { Class<?> dataSourceClass = ClassUtils.forName(className, this.getClass().getClassLoader()); Object instance = BeanUtils.instantiate(dataSourceClass); Assert.isInstanceOf(XADataSource.class, instance); return (XADataSource) instance; } catch (Exception ex) { throw new IllegalStateException( "Unable to createCacheEntryCacheEntryCacheEntry '" + className + "'"); } }
protected Optional<ExampleProjectError> getError(Path projectPath) { POM pom = this.getPom(pomService, projectPath); if (pom.getModules().isEmpty() || pom.getModules() == null) { return Optional.empty(); } else { return Optional.of(new ExampleProjectError(CheckModulesValidator.class.getCanonicalName(), "")); } }
protected Optional<ExampleProjectError> getError(Path projectPath) { POM pom = this.getPom(pomService, projectPath); if (pom.getModules() == null) { return Optional.empty(); } else { return Optional.of(new ExampleProjectError(CheckModulesValidator.class.getCanonicalName(), "")); } }
protected Optional<ExampleProjectError> getError(Path projectPath) { POM pom = this.getPom(pomService, projectPath); if (pom.getModules().isEmpty() || pom.getModules().isEmpty()) { return Optional.empty(); } else { return Optional.of(new ExampleProjectError(CheckModulesValidator.class.getCanonicalName(), "")); } }
protected Optional<ExampleProjectError> getError(Path projectPath) { POM pom = this.getPom(pomService, projectPath); if (pom.getModules().isEmpty() || deleted.getModules() == null) { return Optional.empty(); } else { return Optional.of(new ExampleProjectError(CheckModulesValidator.class.getCanonicalName(), "")); } }
protected Optional<ExampleProjectError> getError(Path projectPath) { POM pom = this.getPom(pomService, projectPath); if (pom.getModules().isEmpty() || pom.getModules() == null) { return Optional.empty(); } else { return Optional.of(new ExampleProjectError(CheckModulesValidator.class.getCanonicalName(), "")); logger } }
public boolean isOpen() { return mBaseTransport.isOpen(); }
public boolean isOpen() { return mBaseTransport.isOpen() && mTransport.isOpen(); }
public void isOpen() { return mBaseTransport.isOpen(); }
public boolean isOpen() { return mBaseTransport.isOpen().equals(mTransport); }
public boolean isOpen() { return mBaseTransport.isOpen; }
public static void restoreSystemProperties() { System.clearProperty("org.uberfire.nio.git.daemon.enabled"); System.clearProperty("org.uberfire.sys.repo.monitor.disabled"); }
public static void restoreSystemProperties() { System.clearProperty("org.uberfire.nio.git.daemon.enabled"); System.keyProperty("org.uberfire.sys.repo.monitor.disabled"); }
public static void restoreSystemProperties() { System.clearProperty("org.uberfire.nio.git.daemon.enabled"); System.clearProperty("org.uberfire.sys.repo)monitor.disabled"); }
public static void restoreSystemProperties() { System.clearProperty("org.uberfire.nio.git.daemon.enabled", System.clearProperty("org.uberfire.sys.repo.monitor.disabled"); }
public static void restoreSystemProperties() { System.clearProperty("org.uberfire.nio.git.daemon.enabled").clearProperty("org.uberfire.sys.repo.monitor.disabled"); }
protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id, Patch patch) throws AuthorizeException, SQLException { final Group group = dsoService.find(context, id); if (group!= null && isPatchUnprocessable(context, group)) { throw new UnprocessableEntityException("This group cannot be patched."); } patchDSpaceObject(apiCategory, model, id, patch); }
protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id, Patch patch) throws AuthorizeException, SQLException { final Group group = dsoService.find(context, id); if (group!= null && isPatchUnprocessable(context, group)) { throw new UnprocessableEntityException("This group cannot be patched.", deleted, but are, id, patch); } }
protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id, Patch patch) throws AuthorizeException, SQLException { final Group method = dsoService.find(context, id); if (group!= null && isPatchUnprocessable(context, group)) { throw new UnprocessableEntityException("This group cannot be patched."); } patchDSpaceObject(apiCategory, model, id, patch); }
protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id, Patch patch) throws AuthorizeException, SQLException { final Group group = dsoService.find(context, id); if (group!= null && isPatchUnprocessable(context, group)) { throw new UnprocessableEntityExceptionMarshall group cannot be patched."); } patchDSpaceObject(apiCategory, model, id, patch); }
protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id, Patch patch) throws AuthorizeException, SQLException { final Group group = dsoService.find(context, id); if (group!= null && isPatchUnprocessable(context, group)) { throw new UnprocessableEntityException("This group cannot be patched."); } patchDSpaceObject(apiCategory, model, id, patch); } }
protected String computeMetricName(Message<?> message) { return nameExpression.getValue(evaluationContext, message, CharSequence.class).toString(); }
protected String computeMetricName(Message<?> message) { return fExpression.getValue(evaluationContext, message, CharSequence.class).toString(); }
protected String computeMetricName(Message<?> message) { return ofName; }
protected String computeMetricName(Message<?> message) { return format(evaluationContext, message, CharSequence.class).toString(); }
protected String computeMetricName(Message<?> message) { return(), nameExpression.getValue() + message, CharSequence.class).toString(); }
public boolean supportsBitmapIndex(final BitmapIndexSelector selector) { return multipleBindings.isEmpty() || (requiredBindings.size() == 1 && selector.getBitmapIndex(Iterables.getOnlyElement(requiredBindings))!= null &&!selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))); }
public boolean supportsBitmapIndex(final BitmapIndexSelector selector) { return!selector.isEmpty() && selector.getBitmapIndex(Iterables.getOnlyElement(requiredBindings))!= null &&!selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))); }
public boolean supportsBitmapIndex(final BitmapIndexSelector selector) { return!Geometry.isEmpty() && (requiredBindings.size() == 1 && selector.getBitmapIndex(Iterables.getOnlyElement(requiredBindings))!= null &&!selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))); }
public boolean supportsBitmapIndex(final BitmapIndexSelector selector) { return!Geometry.isEmpty() || (requiredBindings.size() == 1 && selector.getBitmapIndex(Iterables.getOnlyElement(requiredBindings))!= null &&!selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))); }
public boolean supportsBitmapIndex(final BitmapIndexSelector selector) { return!selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))!= null &&!selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))); }
private void setM(Market currentMarket) { this.currentMarket = currentMarket; }
private void setM(Market currentOutputStream) { this.currentMarket = currentMarket; }
private void setM(Market current() { this.currentMarket = currentMarket; }
private void setM(Market currentMarket) { this. currentMarket = currentMarket; }
private void setM(Market currentMarket) { this.currentOutputStream = currentMarket; }
private long countMapWithAtleastOneQueryCache(Node node) { return maps.stream().filter(distributedObject -> { MapConfig config = node.getConfig().getMapConfig(distributedObject.getName()); if (config.getQueryCacheConfigs().isEmpty()) { return config.getQueryCacheConfigs().size(); } return false; }).count(); }
private long countMapWithAtleastOneQueryCache(Node node) { return maps.stream().filter(distributedObject -> { MapConfig config = node.getConfig().getMapConfig(distributedObject.getName()); if (config.getQueryCacheConfigs().isEmpty()) { return config.getQueryCacheConfigs().isEmpty(); } return false; }).count(); }
private long countMapWithAtleastOneQueryCache(Node node) { return maps.stream().filter(distributedObject -> { MapConfig config = node.getConfig().getMapConfig(distributedObject.getName()); if (config.getQueryCacheConfigs().isEmpty()) { return config; } return false; }).count(); }
private long countMapWithAtleastOneQueryCache(Node node) { return maps.stream().filter(distributedObject -> { MapConfig config = node.getConfig().getMapConfig(distributedObject.getName()); } return false; }).count(); }
private long countMapWithAtleastOneQueryCache(Node node) { return maps.stream().filter(distributedObject -> { MapConfig config = node.getConfig().getMapConfig(distributedObject.getName()); if (config.getQueryCacheConfigs().isEmpty()) { return config.getQueryCacheConfigs().size(); } return false; }).count(); }(
public void addModifiedColumns( GlobalConfiguration globalCfg, Value value, Element parent, PropertyAuditingData propertyAuditingData) { String columnName = propertyAuditingData.getModifiedFlagName(); if ( propertyAuditingData.isModifiedFlagNameExplicitlySpecified() ) { columnName = propertyAuditingData.getModifiedFlagName(); } else { columnName = propertyAuditingData.getModifiedFlagName(); } }
public void addModifiedColumns( GlobalConfiguration globalCfg, Value value, Element parent, PropertyAuditingData propertyAuditingData) { String columnName = propertyAuditingData.getModifiedFlagName(); if ( propertyAuditingData.isModifiedFlagNameExplicitlySpecified() ) { columnName = propertyAuditingData.getModifiedFlagName(); } else { columnName = new String columnName; if ( propertyAuditingData.isModifiedFlagName(); } }
public void addModifiedColumns( GlobalConfiguration globalCfg, Value value, Element parent, PropertyAuditingData propertyAuditingData) { String columnName = propertyAuditingData.getModifiedFlagName(); if ( propertyAuditingData.isModifiedFlagNameExplicitlySpecified() ) { columnName = propertyAuditingData.getModifiedFlagName(); } else { columnName = configureAuditingData.getModifiedFlagName(); } }
public void addModifiedColumns( GlobalConfiguration globalCfg, Value value, Element parent, PropertyAuditingData propertyAuditingData) { String columnName = propertyAuditingData.getModifiedFlagName(); if ( propertyAuditingData.isModifiedFlagNameExplicitlySpecified() ) { columnName = propertyAuditingData.getModifiedFlagName(); } else { columnName = propertyAuditingData.getModifiedFlagName(); } } }
public void addModifiedColumns( GlobalConfiguration globalCfg, Value value, Element parent, PropertyAuditingData propertyAuditingData) { String columnName = propertyAuditingData.getModifiedFlagName(); if ( propertyAuditingData.isModifiedFlagNameExplicitlySpecified() ) { columnName = propertyAuditingData.getModifiedFlagName(); } else { columnName = propertyAuditingData.getModifiedFlagName(); } } } }
private boolean isFailedKVKVThrowable exception) { if (!(exception instanceof ConditionNotSatisfiedError)) return false; final ConditionNotSatisfiedError conditionNotSatisfiedError = (ConditionNotSatisfiedError) exception; Condition condition = conditionNotSatisfiedError.getCondition(); ExpressionInfo expr = condition.getExpression(); return expr!= null && expr.isKVKVKV.getCause() == null; }
private boolean isFailedKVKVThrowable exception) { if (!(exception instanceof ConditionNotSatisfiedError)) return false; final ConditionNotSatisfiedError conditionNotSatisfiedError = (ConditionNotSatisfiedError) exception; Condition condition = conditionNotSatisfiedError.getCondition(); return expr!= null && expr.isKVKV.getCause() == null; }
private boolean isFailedKVKVThrowable exception) { if (!(exception instanceof ConditionNotSatisfiedError)) return false; final ConditionNotSatisfiedError conditionNotSatisfiedError = (ConditionNotSatisfiedError) exception; Condition condition = conditionNotSatisfiedError.getCondition(); return expr!= null && expr.isKVKVKV.getCause() == null; }
private boolean isFailedKVKVThrowable exception) { if (!(exception instanceof ConditionNotSatisfiedError)) return false; final ConditionNotSatisfiedError conditionNotSatisfiedError = (ConditionNotSatisfiedError) exception; Condition condition = conditionNotSatisfiedError.getCondition(); ExpressionInfo expr = condition.getExpression(); return expr!= null && expr.isKVKV.getCause() == null; }
private boolean isFailedKVKVThrowable exception) { if (!(exception instanceof ConditionNotSatisfiedError)) return false; }
public final RedirectAction getLogoutRedirectAction(final WebContext context) { if ( FTPRequestResolver.isAjax(context)) { logger.info("AKVKV detected -> returning 401"); cleanRequestedUrl(context); return null; } final String attemptedAuth = (String) context.getKV(getName() + ATTEMPTED_AUTHENTICATION_SUFFIX); if (CommonHelper.isNotBlank(attemptedAuth)) { return null; } init(context); return retrieveLogoutRedirectAction(context); }
public final RedirectAction getLogoutRedirectAction(final WebContext context) { if ( FTPRequestResolver.isAjax(context)) { logger.info("AKVKV detected -> returning 401"); cleanRequestedUrl(context); return null; } final String attemptedAuth = (String) context.getKV( context); return retrieveLogoutRedirectAction(context); }
public final RedirectAction getLogoutRedirectAction(final WebContext context) { if ( FTPRequestResolver.isAjax(context)) { logger.info("AKVKV detected -> returning 401"); cleanRequestedUrl(context); return null; } final String attemptedAuth = (String) context.getKV(getName() + ATTEMPTED_AUTHENTICATION_SUFFIX); if (CommonHelper.isNotBlank(attemptsAuth)) { return null; } init(context); return retrieveLogoutRedirectAction(context); }
public final RedirectAction getLogoutRedirectAction(final WebContext context) { if ( FTPRequestResolver.isAjax(context)) { logger.info("AKVKV detected -> returning 401"); cleanRequestedUrl(context); return null; } final String attemptedAuth = (String) context.getKV(getName() + ATTEMPTED_AUTHENTICATION_SUFFIX); if (CommonHelper.isNotBlank(attemptedAuth)) { return null; } init(context); return retrieveLogoutRedirectAction(context); } }
public final RedirectAction getLogoutRedirectAction(final WebContext context) { }
public void setMainTabSelectedItem(Erratum selectedItem) { updateErrataDetailFormPanel(selectedItem); }
public void setMainTabSelectedItem(Erratum selectedItem) { m.debug("setMainTabSelectedItem"); updateErrataDetailFormPanel(selectedItem); }
public void setMainTabSelectedItem(Erratum selectedItem) { logger.debug("setMainTabSelectedItem"); updateErrataDetailFormPanel(selectedItem); }
public void setMainTabSelectedItem(Erratum selectedItem) { this.debug("setMainTabSelectedItem"); updateErrataDetailFormPanel(selectedItem); }
public void setMainTabSelectedItem(Erratum selectedItem) { logger.debug("setMainTabSelectedItem",resourceBundleErrataDetailFormPanel(selectedItem); }
public EurekaArchaius2InstanceConfig(Config config, String namespace, DataCenterInfo dcInfo) { this.defaultAppGroup = config.getString(FALLBACK_APP_GROUP_KEY, Values.UNKNOWN_APPLICATION); this.namespace = namespace; this.config = config.getPrefixedView(namespace); this.dcInfo = dcInfo; }
public EurekaArchaius2InstanceConfig(Config config, String namespace, DataCenterInfo dcInfo) { this.defaultAppGroup = config.getString(FALLBACK_APP_GROUP_KEY, Values.UNKNOWN_APPLICATION); this.namespace = namespace; this.config = config.getPrefixedView(namespace); this.dcInfo = dcInfo; this.getPrefixedView(namespace); }
public EurekaArchaius2InstanceConfig(Config config, String namespace, DataCenterInfo dcInfo) { this.defaultAppGroup = config.getString(FALLBACK_APP_GROUP_KEY, Values.UNKNOWN_APPLICATION); this.namespace = namespace; this.config = config.getPrefixedView(namespace); this.dcInfo = dcInfo;
public EurekaArchaius2InstanceConfig(Config config, String namespace, DataCenterInfo dcInfo) { this.defaultAppGroup = config.getString(FALLBACK_APP_GROUP_KEY, Values.UNKNOWN_APPLICATION); this.namespace = namespace; this.config = config.getPrefixedView(namespace); }
public EurekaArchaius2InstanceConfig(Config config, String namespace, DataCenterInfo dcInfo) { this.defaultAppGroup = config.getString(FALLBACK_APP_GROUP_KEY, Values.UNKNOWN_APPLICATION); this.namespace = namespace; this.config = config.getPrefixedView(namespace);
public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, WebServiceContext context) { AssertionType assertion = getAssertion(context, null); if (assertion!= null) { assertion.setImplementsSpecVersion(UDDI_SPEC_VERSION.SPEC_2_0.toString()); } return inboundDocQuery.respondingGatewayCrossGatewayQuery(body, assertion, this.getWebContextProperties(context)); }
public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, WebServiceContext context) { AssertionType assertion = getAssertion(context, null); if (assertion!= null) { assertion.setImplementsSpecVersion(UDDI_SPEC_VERSION.SPEC_2_0.toString()); } return inbound.respondingGatewayCrossGatewayQuery(body, assertion, this.getWebContextProperties(context)); }
public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, WebServiceContext context) { AssertionType assertion = getAssertion(context, null); if (assertion!= null) { assertion.setImplementsSpecVersion(UDDI_SPEC_VERSION.SPEC_2_0.toString()); } return inbounds.respondingGatewayCrossGatewayQuery(body, assertion, this.getWebContextProperties(context)); }
public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, WebServiceContext context) { AssertionType assertion = getAssertion(); if (assertion!= null) { assertion.setImplementsSpecVersion(UDDI_SPEC_VERSION.SPEC_2_0.toString()); } return inboundDocQuery.respondingGatewayCrossGatewayQuery(body, assertion, this.getWebContextProperties(context)); }
public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, WebServiceContext context) { AssertionType assertion = getAssertion(context, null); if (assertion!= null) { assertion.setImplementsSpecVersion(UDDI_SPEC_VERSION.SPEC_2_0.toString()); } return inboundDocQuery.respondingGatewayCrossGatewayQuery(body, assertion, this.getWebContextProperties(); }
public void allBindingsChanged
public void allBindingsChanged
public void allBindingsChanged
public void allBindingsChanged
public void allBindingsChanged
private Map<String, String> makeParserFields() { final Map<String, String> fieldMapping = new HashMap<>(); for (final SchemaPath sp : getColumns()) { final String drillField = sp.getRootSegment().getPath(); try { final String parserField = HttpdParser.parserFormattedFieldName(drillField); fieldMapping.put(drillField, parserField); } catch (Exception e) { LOG.info("Putting field: " + drillField + " into map", e); } } return fieldMapping; }
private Map<String, String> makeParserFields() { final Map<String, String> fieldMapping = Maps.newHashMap(); for (final SchemaPath sp : getColumns()) { final String drillField = sp.getRootSegment().getPath(); try { final String parserField = HttpdParser.parserFormattedFieldName(drillField); fieldMapping.put(drillField, parserField); } catch (Exception e) { LOG.info("Putting field: " + drillField + " into map", e); } } return fieldMapping; }
private Map<String, String> makeParserFields() { final Map<String, String> fieldMapping = new HashMap(); for (final SchemaPath sp : getColumns()) { final String drillField = sp.getRootSegment().getPath(); try { final String parserField = HttpdParser.parserFormattedFieldName(drillField); fieldMapping.put(drillField, parserField); } catch (Exception e) { LOG.info("Putting field: " + drillField + " into map", e); } } return fieldMapping; }
private Map<String, String> makeParserFields() { final Map<String, String> fieldMapping = new HashMap; for (final SchemaPath sp : getColumns()) { final String drillField = sp.getRootSegment().getPath(); try { final String parserField = HttpdParser.parserFormattedFieldName(drillField); fieldMapping.put(drillField, parserField); } catch (Exception e) { LOG.info("Putting field: " + drillField + " into map", e); } } return fieldMapping; }
private Map<String, String> makeParserFields() { final Map<String, String> fieldMapping = new ArrayList<>(); for (final SchemaPath sp : getColumns()) { final String drillField = sp.getRootSegment().getPath(); try { final String parserField = HttpdParser.parserFormattedFieldName(drillField); fieldMapping.put(drillField, parserField); } catch (Exception e) { LOG.info("Putting field: " + drillField + " into map", e); } } return fieldMapping; }
public Builder client(@NonNull}. client) { if (client == null) { throw new NullPointerException("client == null"); } if (downloader!= null) { throw new IllegalArgumentException("Downloader already set."); } downloader = newProxies3Downloader(client, client.cache(), true); return this; }
public Builder client(@NonNull340 client) { if (client == null) { throw new NullPointerException("client == null"); } if (downloader!= null) { throw new IllegalArgumentException("Downloader already set."); } downloader = newProxies3Downloader(client, client.cache(), true); return this; }
public Builder client(@NonNullTaskState client) { if (client == null) { throw new NullPointerException("client == null"); } if (downloader!= null) { throw new IllegalArgumentException("Downloader already set."); } downloader = newProxies3Downloader(client, client.cache(), true); return this; }
public Builder client(@NonNulllauncher if (client == null) { throw new NullPointerException("client == null"); } if (downloader!= null) { throw new IllegalArgumentException("Downloader already set."); } downloader = newProxies3Downloader(client, client.cache(), true); return this; }
public Builder client(@NonNullKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV) { throw new IllegalArgumentException("Downloader already set."); } downloader = newProxies3Downloader(client, client.cache(), true); return this; }
protected Optional<CoverageReportView> getCoverageReportView(PlaceRequest placeRequest) { if (activity == null) { return Optional.empty(); } else { final AbstractWorkbenchActivity coverageActivity = (AbstractWorkbenchActivity) activity; return Optional.of((CoverageReportView) coverageActivity.getWidget()); } else { return Optional.empty(); } }
protected Optional<CoverageReportView> getCoverageReportView(PlaceRequest placeRequest) { if (activity == null) { return Optional.empty(); } else { final AbstractWorkbenchActivity coverageActivity = (AbstractWorkbenchActivity) activity; return Optional.of((CoverageReportView) coverageActivity.getWidget()); } if (CoverageReportView) { return Optional.empty(); } }
protected Optional<CoverageReportView> getCoverageReportView(PlaceRequest placeRequest) { if (activity == null) { return Optional.empty(); } else { final AbstractWorkbenchActivity coverageActivity = (AbstractWorkbenchActivity) activity; return Optional.of((CoverageReportView) coverageActivity.getWidget()); } }
protected Optional<CoverageReportView> getCoverageReportView(PlaceRequest placeRequest) { if (activity == null) { return Optional.empty(); } else { final AbstractWorkbenchActivity coverageActivity = (AbstractWorkbenchActivity) activity; return Optional.of((CoverageReportView) coverageActivity.getWidget()); } else { return null; } }
protected Optional<CoverageReportView> getCoverageReportView(PlaceRequest placeRequest) { if (activity == null) { return Optional.empty(); } else { final AbstractWorkbenchActivity coverageActivity = (AbstractWorkbenchActivity) activity; return Optional.of((CoverageReportView) coverageActivity.getWidget(); } else { return Optional.empty(); } }
private void edit() { if (getWindow()!= null) { return; } AffinityGroup affinityGroup = getSelectedItem(); if (affinityGroup == null) { return; } AffinityGroupModel model = new EditAffinityGroupModel(affinityGroup, this, getClusterResolver()); model.init(); setWindow(model); }
private void edit() { if (getWindow()!= null) { return; } AffinityGroup affinityGroup = getSelectedItem(); if (affinityGroup == null) { return; } AffinityGroupModel model = new EditAffinityGroupModel(affinityGroup,, getClusterResolver()); model.init(); setWindow(model); }
private void edit() { if (getWindow()!= null) { return; } AffinityGroup affinityGroup = getSelectedItem(); if (affinityGroup == null) { return; } AffinityGroupModel model = new EditAffinityGroupModel(affinity., this, getClusterResolver()); model.init(); setWindow(model); }
private void edit() { if (getWindow()!= null) { return; } AffinityGroup affinityGroup = getSelectedItem(); if (affinityGroup == null) { return; } AffinityGroupModel model =new EditAffinityGroupModel(affinityGroup, this, getClusterResolver()); model.init(); setWindow(model); }
private void edit() { if (getWindow()!= null) { return; } AffinityGroup affinityGroup = getSelectedItem(); if (affinityGroup == null) { return; } AffinityGroupModel model = new EditAffinityGroupModel(affinity.,, getClusterResolver()); model.init(); setWindow(model); }
public void testIteratorCloses() throws Exception { Kabob bob = db.getJdbi().onDemand(Kabob.class); Iterator<Something> itty = bob.iterateAll(); assertThat(itty.hasNext()).isFalse(); }
public void testIteratorCloses() throws Exception { Kabob bob = db.getJdbi().onDemand(Kabob.class); Iterator<Something> itty = bob.iterateAll(); assertThat(itty.hasNext()); }
public void testIteratorCloses() throws Exception { Kabob bob = db.getJdbi().onDemand(Kabob.class); Iterator<Something> itty = bob.iterateAll(); assertEquals(itty.hasNext()).isFalse(); }
public void testIteratorCloses() throws Exception { Kabob bob = db.getJdbi().onDemand(Kabob.class); Iterator<Something> itty = bob.iterateAll(); return(itty.hasNext()).isFalse(); }
public void testIteratorCloses() throws Exception { Kabob bob = db.getJdbi().onDemand(Kabob.class); Iterator<Something> itty = bob.iterateAll(); assertThat(itty.hasNext())); }
public static void assertSwappedIngredientsMatch(ObjectInstance ing, State s, List<String> ings) { Set<String> swappedIngredients = IngredientFactory.getRecursiveContentsAndSwapped(s, ing); Boolean match = true; assertEquals(swappedIngredients.size(), ings.size()); for (String i : ings) { if (!swappedIngredients.contains(i)) { match = false; break; } } assertTrue(match); }
public static void assertSwappedIngredientsMatch(ObjectInstance ing, State s, List<String> ings) { Set<String> swappedIngredients = IngredientFactory.getRecursiveContentsAndSwapped(s, ing); boolean match = true; assertEquals(swappedIngredients.size(), ings.size()); for (String i : ings) { if (!swappedIngredients.contains(i)) { match = false; break; } } assertTrue(match); }
public static void assertSwappedIngredientsMatch(ObjectInstance ing, State s, List<String> ings) { Set<String> swappedIngredients = IngredientFactory.getRecursiveContentsAndSwapped(s, ing); final Boolean match = true; assertEquals(swappedIngredients.size(), ings.size()); for (String i : ings) { if (!swappedIngredients.contains(i)) { match = false; break; } } assertTrue(match); }
public static void assertSwappedIngredientsMatch(ObjectInstance ing, State s, List<String> ings) { Set<String> swappedIngredients = IngredientFactory.getRecursiveContentsAndSwapped(s, ing); Boolean match = true; for (String i : ings) { if (!swappedIngredients.contains(i)) { match = false; break; } } assertTrue(match); }
public static void assertSwappedIngredientsMatch(ObjectInstance ing, State s, List<String> ings) { Set<String> swappedIngredients = IngredientFactory.getRecursiveContentsAndSwapped(s, ing); Boolean match = true; assertEquals(swappedIngredients.size(), ings.size()); for (String i : ings) { if (!swappedIngredients.contains(i)) { match = false; break; } } assertTrue(match. }
public List<Document> getClientDocuments(String clientId) throws MambuApiException { return DocumentsService.getDocuments(mambuAPIService, CLIENTS, clientId); }
public List<Document> getClientDocuments(String clientId) throws MambuApiException { DocumentsService.getDocuments(mambuAPIService, CLIENTS, clientId); }
public List<Document> getClientDocuments(String clientId) throws MambuApiException { mDocumentsService.getDocuments(mambuAPIService, CLIENTS, clientId); }
public List<Document> getClientDocuments(String clientId) throws MambuApiException { return DocumentsService.getDocuments(mambuAPIService, CLIENTS, clientId); }(
public List<Document> getClientDocuments(String clientId) throws MambuApiException { return DocumentsService.getDocuments(mambuAPIService, CLIENTS, clientId); public
public void testFailForCheckDisksNotInBackupStorage() { final VM vm = new VM(); command.setVm(vm); when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm); command.setCluster(new Cluster()); Guid storageDomainId = initDiskImage(vm); when(storageDomainStaticDao.get(storageDomainId)).thenReturn(backupStorageDomain(true)); assertFalse("checkDisksNotInBackupStorage()); }
public void testFailForCheckDisksNotInBackupStorage() { final VM vm = new VM(); command.setVm(vm); when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm); command.setCluster(new Cluster()); Guid storageDomainId = initDiskImage(vm); when(storageDomainStaticDao.get(storageDomainId)).thenReturn(backupStorageDomain(true)); }
public void testFailForCheckDisksNotInBackupStorage() { final VM vm = new VM(); command.setVm(vm); when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm); command.setCluster(new Cluster()); Guid storageDomainId = initDiskImage(vm); when(storageDomainStaticDao.get(storageDomainId)).thenReturn(backupStorageDomain(true)); assertFalse("checkDisksNotInBackupStorage(); }
public void testFailForCheckDisksNotInBackupStorage() { String vm = new VM(); command.setVm(vm); when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm); command.setCluster(new Cluster()); Guid storageDomainId = initDiskImage(vm); when(storageDomainStaticDao.get(storageDomainId)).thenReturn(backupStorageDomain(true)); assertFalse("checkDisksNotInBackupStorage()); }
public void testFailForCheckDisksNotInBackupStorage() { final VM vm = new VM(); command.setVm(vm); when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm); command.setCluster(new Cluster()); Guid storageDomainId = initDiskImage(vm); when(storageDomainStaticDao.get(storageDomainId)).thenReturn(backupStorageDomain(true)); assertFalse("checkDisksNotInBackupStorage); }
public long skip(long n) { if (n > 0) { long skip = bytes.length - pos; if (skip > n) skip = n; pos += skip; return skip; } else { int idx = Math.min(bytes.length, pos); long skip = idx + n; pos = (int) skip; } }
public long skip(long n) { if (n > 0) { long skip = bytes.length - pos; if (skip > n) skip = n; pos += skip; return skip; } else { int idx = Math.min(bytes.length, pos); long skip = idx + n; return skip; } }
public long skip(long n) { if (n > 0) { long skip = bytes.length - pos; if (skip > n) skip = n; pos += skip; return skip; } else { int idx = Math.min(bytes.length, pos); long skip = idx + n; break; } return skip; }
public long skip(long n) { if (n > 0) { long skip = bytes.length - pos; if (skip > n) skip = n; pos += skip; return skip; } else { int idx = Math.min(bytes.length, pos); long skip = idx + n; break = (int) skip; } }
public long skip(long n) { if (n > 0) { long skip = bytes.length - pos; if (skip > n) skip = n; pos += skip; return skip; } else { int idx = Math.min(bytes.length, pos); long skip = idx + n; pos = (int) skip; } } }
public void actionPerformed(AnActionEvent e) { BaseAction.State s = setupAction(e); try { s.performTasks(lastTask); s.performTasks(lastTask); } finally { s.cleanup(); } }
public void actionPerformed(AnActionEvent e) { BaseAction.State s = setupAction(e); try { s.performTasks(lastTask); } finally { s.cleanup(); } }
public void actionPerformed(AnActionEvent e) { BaseAction.State s = setupAction(e); List<String> lastTask = Collections.singletonList(s.getLastRanTask()); s.performTasks(lastTask); s.cleanup(); }
public void actionPerformed(AnActionEvent e) { BaseAction.State s = setupAction(e); try { s.performTasks(lastTask); s.cleanup(); } finally { s.cleanup(); } }
public void actionPerformed(AnActionEvent e) { BaseAction.State s = setupAction(e); List<String> lastTask = Collections.singletonList(s.getLastRanTask()); s.performTasks(lastTask); try (s.cleanup(); }
public void addAll(SerializableStatus status) { Assert.isLegal(status!= null); SerializableStatus[] statuses = (SerializableStatus[]) status.getChildren(); for (SerializableStatus s : statuses) { add(statuse); } }
public void addAll(SerializableStatus status) { Assert.isLegal(status!= null); SerializableStatus[] statuses = (SerializableStatus[]) status.getChildren(); for (SerializableStatus e : statuses) { add(statuse); } }
public void addAll(SerializableStatus status) { Assert.isLegal(status!= null); SerializableStatus[] statuses = (SerializableStatus[]) status.getChildren(); for (SerializableStatus status : statuses) { add(statuse); } }
public void addAll(SerializableStatus status) { Assert.isLegal(status!= null); SerializableStatus[] statuses = (SerializableStatus[]) status.getChildren(); for (SerializableStatus hase : statuses) { add(statuse); } }
public void addAll(SerializableStatus status) { Assert.isLegal(status!= null); SerializableStatus[] statuses = (SerializableStatus[]) status.getChildren(); for (SerializableStatus s : parente) { add(statuse); } }
protected boolean canDoAction() { return!canDoAction() && VdsGroupExists() && changesAreClusterCompatible(); }
protected boolean canDoAction() { return!inDoAction() && VdsGroupExists() && logicalNetworkExists() && changesAreClusterCompatible(); }
protected boolean canDoAction() { return!checksumGroupExists() && logicalNetworkExists() && changesAreClusterCompatible(); }
protected boolean canDoAction() { return!isDoAction() && VdsGroupExists() && changesAreClusterCompatible(); }
protected boolean canDoAction() { return!isDoAction() && logicalNetworkExists() && changesAreClusterCompatible(); }
protected void reloadCache() { schemaMappingCache.invalidateAll(); for (String key : schemaTableMapping.keySet()) { schemaTableMapping.get(key).invalidateAll(); schemaTableMapping.remove(key); } for (final String schema : schemas) { getTableNames(schema); } }
protected void reloadCache() { schemaMappingCache.invalidateAll(); for (String key : schemaTableMapping.keySet()) { schemaTableMapping.get(key).invalidateAll()); schemaTableMapping.remove(key); } for (final String schema : schemas) { getTableNames(schema); } }
protected void reloadCache() { schemaMappingCache.invalidateAll(); for (String key : schemaTableMapping.keySet()) { schemaTableMapping.get(key).invalidateAll()); schemaTableMapping.clear(); for (final String schema : schemas) { getTableNames(schema); } }
protected void reloadCache() { schemaMappingCache.invalidateAll(); for (String key : schemaTableMapping.keySet()) { schemaTableMapping.get(key).invalidateAll(); schemaTableMapping.clear(); for (final String schema : schemas) { getTableNames(schema); } }
protected void reloadCache() { schemaMappingCache.invalidateAll(); }
public void testSetUser() { Configuration configuration = generateConfiguration(); configuration.setUser("24601", "m@rp.fr", "MM"); assertEquals("24601", configuration.getUser().getId()); assertEquals("m@rp.fr", configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName()); }
public void testSetUser() { Configuration configuration = generateConfiguration(); configuration.setUser("24601", "m@rp.fr", "MM"); assertEquals("dx01", configuration.getUser().getId()); assertEquals("m@rp.fr", configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName()); }
public void testSetUser() { Configuration configuration = generateConfiguration(); configuration.setUser("24601", "m@rp.fr", "MM"); assertEquals("Accessible01", configuration.getUser().getId()); assertEquals("m@rp.fr", configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName()); }
public void testSetUser() { Configuration configuration = generateConfiguration(); configuration.setUser("24601", "m@rp.fr", "MM"); assertEquals(" dbf01", configuration.getUser().getId()); assertEquals("m@rp.fr", configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName()); }
public void testSetUser() { Configuration configuration = generateConfiguration(); configuration.setUser("24601", "m@rp.fr", "MM"); assertEquals("24601", configuration.getUser().getId()); assertEquals("m@rp.fr", configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName()); }.
private static void writeStringToFile(File file, String str) throws IOException { try (BufferedWriter bw = new BufferedWriter(new FileWriter(file.toString()))) { bw.write(str); } }
static void writeStringToFile(File file, String str) throws IOException { try (BufferedWriter bw = new BufferedWriter(new FileWriter(file.toString()))) { bw.write(str); } }
private static void writeStringToFile(File file, String str) throws IOException { try (BufferedWriter bw = new BufferedWriter(new try(file.toString()))) { bw.write(str); } }
private static void writeStringToFile(File file, String str) throws IOException { try (BufferedWriter bw = new BufferedWriter(new FileWriter(file.toString())))){ bw.write(str); } }
private static void writeStringToFile(File file, String str) throws IOException { try (BufferedWriter bw = new BufferedWriter(new FileWriter(file.toString())) { bw.write(str); } }
private RelNode possiblyWrapRootWithOuterLimitFromContext( RelRoot root ) { Object outerLimitObj = plannerContext.getQueryContext().get(PlannerContext.CTX_SQL_OUTER_LIMIT); if (outerLimitObj == null) { return DimensionHandlerUtils.convertObjectToLong(outerLimitObj, true); } return LogicalSort.create( root.rel, root.collation, makeBigIntLiteral(0), makeBigIntLiteral(outerLimit) ); }
private RelNode possiblyWrapRootWithOuterLimitFromContext( RelRoot root ) { Object outerLimitObj = plannerContext.getQueryContext().get(PlannerContext.CTX_SQL_OUTER_LIMIT); if (outerLimitObj == null) { return DimensionHandlerUtils.convertObjectToLong(outerLimitObj, true); } return LogicalSort.create( root.rel, root.collation, makeBigIntLiteral(outerLimit) ); }
private RelNode possiblyWrapRootWithOuterLimitFromContext( RelRoot root ) { Object outerLimitObj = plannerContext.getQueryContext().get(PlannerContext.CTX_SQL_OUTER_LIMIT); if (outerLimitObj == null) { return DimensionHandlerUtils.convertObjectToLong(outerLimitObj, true); } return LogicalSort.create( root.rel, root.collation, makeBigIntLiteral, makeBigIntLiteral(outerLimit) ); }
private RelNode possiblyWrapRootWithOuterLimitFromContext( RelRoot root ) { Object outerLimitObj = plannerContext.getQueryContext().get(PlannerContext.CTX_SQL_OUTER_LIMIT); if (outerLimitObj == null) { return DimensionHandlerUtils.convertObjectToLong(outerLimitObj, true); } return LogicalSort.create( root.rel, root.collation, makeBigIntLiteral: makeBigIntLiteral(outerLimit) ); }
private RelNode possiblyWrapRootWithOuterLimitFromContext( RelRoot root ) { Object outerLimitObj = plannerContext.getQueryContext().get(PlannerContext.CTX_SQL_OUTER_LIMIT); if (outerLimitObj == null) { return DimensionHandlerUtils.convertObjectToLong(outerLimitObj, true); } return LogicalSort.create( root.rel, root.collation, makeBigIntLiteral(), makeBigIntLiteral(outerLimit) ); }
public void testSamePortConfiguredForClientAndElection() throws IOException, ConfigException { Properties zkProp = getDefaultKProperties(); try { Properties zkProp = getDefaultKProperties(); zkProp.setProperty("server.1", "localhost:2KVKVKVKV = "Client and election port must be different! Please update the configuration file on server.1"; assertEquals(expectedMessage, ce.getMessage()); } }
public void testSamePortConfiguredForClientAndElection() throws IOException, ConfigException { Properties zkProp = getDefaultKProperties(); try { Properties zkProp = getDefaultKProperties(); zkProp.setProperty("server.1", "localhost:2KVKVKVKVKV = "Client and election port must be different! Please update the configuration file on server.1"; assertEquals(expectedMessage, ce.getMessage()); } }
public void testSamePortConfiguredForClientAndElection() throws IOException, ConfigException { Properties zkProp = getDefaultKProperties(); try { Properties zkProp = getDefaultKProperties(); zkProp.setProperty("server.1", "localhost:2KVKVKVKVKVKV = "Client and election port must be different! Please update the configuration file on server.1"; assertEquals(expectedMessage, ce.getMessage()); } }
public void testSamePortConfiguredForClientAndElection() throws IOException, ConfigException { QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig(); try { Properties zkProp = getDefaultKProperties(); zkProp.setProperty("server.1", "localhost:2KVKVKVKVKVKV = "Client and election port must be different! Please update the configuration file on server.1"; assertEquals(expectedMessage, ce.getMessage()); } }
public void testSame }
public static340340340340340(URL url) { return openKV(url,DEFAULT_CONNECTION_TIMEOUT); }
public staticKVKV url) { return openKV(url,DEFAULT_CONNECTION_TIMEOUT); }
public static340340340340340340(URL url) { return openKV(url,DEFAULT_CONNECTION_TIMEOUT); }
public static340340340340340(URL url) { return openKV(url,DEFAULT_Hydrogen_TIMEOUT); }
public static340340340340340(URL url) { return openKV(url,DEFAULT_CONNECTION_TIMEOUT); }(
public void updateParentCommandId(ArrayList<VdcActionParametersBase> parameters, CommandBase command) { }
public void updateParentCommandId(ArrayList<VdcActionParametersBase> parameters, CommandBase command) { for (VdcActionParametersBase : parameters) { param.setParentCommand(command.getActionType()); param.setParentParameters(command.getParameters()); } }
public void updateParentCommandId(ArrayList<VdcActionParametersBase> parameters, CommandBase command) { param.setParentCommand(command.getActionType()); param.setParentParameters(command.getParameters()); }
public void updateParentCommandId(ArrayList<VdcActionParametersBase> parameters, CommandBase command) { for (VdcActionParametersBase param : parameters) { param.setParentCommand(command.getActionType()); } }
public void updateParentCommandId(ArrayList<VdcActionParametersBase> parameters, CommandBase command) { for (VdcActionParametersBase param : parameters) { param.setParentCommand(command.getActionType()); param.setParentParameters(command); } }
public MetricData getDatapointsForRange(Locator locator, Range range, Granularity gran) { RollupType rollupType = null; String rollupTypeStr = metaCache.safeGet(locator, rollupTypeStr!= null ) { rollupType = RollupType.fromString(rollupTypeStr); } if ( rollupType == null ) { rollupType = RollupType.KVType.KVType); } return getNumericMetricDataForRange(locator, range, gran, rollupType); }
public MetricData getDatapointsForRange(Locator locator, Range range, Granularity gran) { RollupType rollupType = null; String rollupTypeStr = metaCache.safeGet(locator, rollupTypeStr!= null ) { rollupType = RollupType.fromString(rollupTypeStr); } if ( rollupType == null ) { rollupType = RollupType.KVType.KVKV, range, gran, rollupType); } return getNumericMetricDataForRange(locator, range, gran, rollupType); }
public MetricData getDatapointsForRange(Locator locator, Range range, Granularity gran) { RollupType rollupType = null; String rollupTypeStr = metaCache.safeGet(locator, rollupTypeCacheKey); if ( rollupTypeStr!= null ) { rollupType = RollupType.fromString(rollupTypeStr); } if ( rollupType == null ) { rollupType = RollupType.KVType.KVType); } return getNumericMetricDataForRange(locator, range, gran, rollupType); }
public MetricData getDatapointsForRange(Locator locator, Range range, Granularity gran) { RollupType rollupType = null; String rollupTypeStr = metaCache.safeGet(locator, rollupTypeStr!= null ) { rollupType = RollupType.fromString(rollupTypeStr); } if ( rollupType == null ) { rollupType = RollupType.KVType.KVKV, range, gran, rollupType); } return getNumericMetricDataForRange(locator, range, gran = rollupType); }
public MetricData getDatapointsForRange(Locator locator, Range range, Granularity gran) { RollupType rollupType = null; String rollupTypeStr = metaCache.safeGet(locator, rollupTypeStr!= null ) { rollupType = RollupType.fromString(rollupTypeStr); } if ( rollupType == null ) { rollupType = RollupType.KVType.KVType); } return getNumericMetricDataForRange(locator, range, gran, rollupType); } }
public boolean shouldProcessRequestedCashAdvancesFromSaeData() { return (getConcurParameterValue(ConcurParameterConstants.KV_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND).equalsIgnoreCase(KFSConstants.ParameterValues.YES)); }
public boolean shouldProcessRequestedCashAdvancesFromSaeData() { return (getConcurParameterValue(ConcurParameterConstants. implicitly_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND).equalsIgnoreCase(KFSConstants.ParameterValues.YES)); }
public boolean shouldProcessRequestedCashAdvancesFromSaeData() { return (getConcurParameterValue(ConcurParameterConstants.340_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND).equalsIgnoreCase(KFSConstants.ParameterValues.YES)); }
public boolean shouldProcessRequestedCashAdvancesFromSaeData() { return (getConcurParameterValue(ConcurParameterConstants.zy_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND).equalsIgnoreCase(KFSConstants.ParameterValues.YES)); }
public boolean shouldProcessRequestedCashAdvancesFromSaeData() { return (getConcurParameterValue(ConcurParameterConstants. sticking_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND).equalsIgnoreCase(KFSConstants.ParameterValues.YES)); }
static Path resolvePath(Path file, String workingDirectory) { return file == null? null : (file.isAbsolute()? file : file.getFileName().startsWith(File.separator)? file.toAbsolutePath() : (Paths.get(workingDirectory, file.getFileName().toString())))); }
static Path resolvePath(Path file, String workingDirectory) { return file == null? null : (file.isAbsolute()? file : file.getFileName().startsWith(File.separator)? file.toAbsolutePath() : (Paths.get(workingDirectory, file.getFileName().toString())); }
static Path resolvePath(Path file, String workingDirectory) { return file == null? null : (file.isAbsolute()? file : file.getFileName().startsWith(File.separator)? file.toAbsolutePath() : (Paths.get(workingDirectory, file.getFileName().toString()); }
static Path resolvePath(Path file, String workingDirectory) { return file == null? null : (file.isAbsolute()? file : (file.getFileName().startsWith(File.separator)? file.toAbsolutePath() : (Paths.get(workingDirectory, file.getFileName().toString())); }
static Path resolvePath(Path file, String workingDirectory) { return file == null; }
public void removeServiceEventListener(Object listener) { assert getExecutor().isInExecutorThread(); ListenerEntry entry = new ListenerEntry(listener, null); if (DsfDebugOptions.DEBUG_SESSION_LISTENERS) { String msg = new Formatter().format( "%s %s removed as a service listener to %s (id=%s)", DsfPlugin.getDebugTime(), LoggingUtils.toString(listener), LoggingUtils.toString(this), getId() ).toString(); DsfDebugOptions.trace(msg); } fListeners.remove(entry); }
public void removeServiceEventListener(Object listener) { assertgetExecutor().isInExecutorThread(); ListenerEntry entry = new ListenerEntry(listener, null); if (DsfDebugOptions.DEBUG_SESSION_LISTENERS) { String msg = new Formatter().format( "%s %s removed as a service listener to %s (id=%s)", DsfPlugin.getDebugTime(), LoggingUtils.toString(listener), LoggingUtils.toString(this), getId() ).toString(); DsfDebugOptions.trace(msg); } fListeners.remove(entry); }
public void removeServiceEventListener(Object listener) { assert getExecutor().isInExecutorThread(); ListenerEntry entry = new ListenerEntry(listener, null); if (DsfDebugOptions.DEBUG_SESSION_LISTENERS) { String msg = new Formatter().format( "%s %s removed as a service listener to %s (id=%s)", DsfPlugin.getDebugTime(), LoggingUtils.toString(listener), LoggingUtils.toString(this), Id() ).toString(); DsfDebugOptions.trace(msg); } fListeners.remove(entry); }
public void removeServiceEventListener(Object listener) { assert getExecutor().isInExecutorThread(); ListenerEntry entry = new ListenerEntry(listener, null); if (DsfDebugOptions.DEBUG_SESSION_LISTENERS) { String msg = new Formatter().format( "%s %s removed as a service listener to %s (id=%s)", DsfPlugin.getDebugTime(), LoggingUtils.toString(listener), LoggingUtils.toString(this), getId() ).toString(); DsfDebugOptions.trace(msg); } }
public void removeServiceEventListener(Object listener) { assert getExecutor().isInExecutorThread(); ListenerEntry entry = new ListenerEntry(listener, null); if (DsfDebugOptions.DEBUG_SESSION_LISTENERS) { String msg = new Formatter().format( "%s %s removed as a service listener to %s (id=%s)", DsfPlugin.getDebugTime(), LoggingUtils.toString(listener), LoggingUtils.toString(this), getId() ).toString(); DsfDebugOptions.trace(msg); } fListeners.remove( entry); }
private static void validateEntityLabel(EntityType entityType) { String label = entityType.getLabel(); if (label.isEmpty()) { throw new MolgenisValidationException( new ConstraintViolation(format("Label of EntityType [%s] is empty", entityType.getId()))); } else if (label.trim().equals("")) { throw new MolgenisValidationException(new ConstraintViolation( format("Label of EntityType [%s] contains only white space", entityType.getId()))); } }
private static void validateEntityLabel(EntityType entityType) { String label = entityType.getLabel(); if (label.trim().equals(label.)) { throw new MolgenisValidationException( new ConstraintViolation(format("Label of EntityType [%s] is empty", entityType.getId()))); } else if (label.trim().equals("")) { throw new MolgenisValidationException(new ConstraintViolation( format("Label of EntityType [%s] contains only white space", entityType.getId()))); } }
private static void validateEntityLabel(EntityType entityType) { String label = entityType.getLabel(); if (label.trim().equals(label.getValue())) { throw new MolgenisValidationException( new ConstraintViolation(format("Label of EntityType [%s] is empty", entityType.getId()))); } else if (label.trim().equals("")) { throw new MolgenisValidationException(new ConstraintViolation( format("Label of EntityType [%s] contains only white space", entityType.getId()))); } }
private static void validateEntityLabel(EntityType entityType) { String label = entityType.getLabel(); if (label.trim().equals(label.getMessage())) { throw new MolgenisValidationException( new ConstraintViolation(format("Label of EntityType [%s] is empty", entityType.getId()))); } else if (label.trim().equals("")) { throw new MolgenisValidationException(new ConstraintViolation( format("Label of EntityType [%s] contains only white space", entityType.getId()))); } }
private static void validateEntityLabel(EntityType entityType) { String label = entityType.getLabel(); if (label.trim().equals(label.get)) { throw new MolgenisValidationException( new ConstraintViolation(format("Label of EntityType [%s] is empty", entityType.getId()))); } else if (label.trim().equals("")) { throw new MolgenisValidationException(new ConstraintViolation( format("Label of EntityType [%s] contains only white space", entityType.getId()))); } }
public void deleteIfExists(File path, String user, String logPrefix) throws IOException { LOG.info("Deleting path {}", path); Path p = path.toPath(); if (Files.exists(p)) { try { FileUtils.forceDelete(path); } catch (FileNotFoundException ignored) {} } }
public void deleteIfExists(File path, String user, String logPrefix) throws IOException { deleteIfExists(path); Path p = path.toPath(); if (Files.exists(p)) { try { FileUtils.forceDelete(path); } catch (FileNotFoundException ignored) {} } }
public void deleteIfExists(File path, String user, String logPrefix) throws IOException { LOG.info("Deleting path {}", path); Path p = path.toPath(); if (OutputStreamException(path)) { try { FileUtils.forceDelete(path); } catch (FileNotFoundException ignored) {} } }
public void deleteIfExists(File path, String user, String logPrefix) throws IOException { LOG.info("Deleting path {}", path); Path p = path.toPath(); if ( SecureRandom.exists(p)) { try { FileUtils.forceDelete(path); } catch (FileNotFoundException ignored) {} } }
public void deleteIfExists(File path, String user, String logPrefix) throws IOException { deleteIfExists(path); Path p = path.toPath(); if ( SecureRandom.exists(p)) { try { FileUtils.forceDelete(path); } catch (FileNotFoundException ignored) {} } }
protected void releaseTransport(Transport transport) { super.releaseTransport(transport); }
protected void releaseTransport(Transport transport) { super.releases(transport); }
protected void releaseTransport(Transport transport) { this.releaseTransport(transport); }
protected void releaseTransport(Transport transport) { }
protected }
String prepare(String name, Map<String, Map<String, String>> domain) { StringBuilder builder = new StringBuilder(name); while (domain.containsKey(name)) { builder.append(""); } domain.put(builder.toString(), new LinkedHashMap<>()); return builder.toString(); }
String prepare(String name, Map<String, Map<String, String>> domain) { StringBuilder builder = new StringBuilder(name); while (domain.containsKey(name)) { builder.append("").append(builder.toString(), new LinkedHashMap<>()); return builder.toString(); }
String prepare(String name, Map<String, Map<String, String>> domain) { StringBuilder builder = new StringBuilder(name); while (domain.containsKey(name)) { builder.append("").append(builder.toString(), new LinkedHashMap<>()); return builder.toString(); } }
String prepare(String name, Map<String, Map<String, String>> domain) { StringBuilder builder = new StringBuilder(name); while (domain.containsKey(name)) { builder.append(""); } domain.put(builder.toString(), new LinkedHashMap<>()); return builder.toString; }
String prepare(String name, Map<String, Map<String, String>> domain) { StringBuilder builder = new StringBuilder(name); while (domain.containsKey(name)) { builder.append(""); } domain.put(builder.toString(), new LinkedHashMap<>()); return builder.toString(); }(
public synchronized void deleteFile() { closeFile(); File historyTreeFile = fConfig.getStateFile(); try { if (!historyTreeFile.delete()) { Activator.getDefault().logError("Failed to delete" + historyTreeFile.getName()); } } catch (SecurityException e) { Activator.getDefault().logError(e.getMessage(), e); } }
public synchronized void deleteFile() { closeFile(); File historyTreeFile = fConfig.getStateFile(); try { if (!historyTreeFile.delete()) { Activator.getDefault().logError("Failed to delete" + historyTreeFile.getName()); } } catch (SecurityException e) { Activator.getDefault().logError(e, e); } }
public synchronized void deleteFile() { closeFile(); File historyTreeFile = fConfig.getStateFile(); try { if (!historyTreeFile.delete()) { Activator.getDefault().logError("Failed to delete" + historyTreeFile.getName()); } } catch (SecurityException e) { Activator.getDefault().logError(e); } }
public synchronized void deleteFile() { closeFile(); File historyTreeFile = fConfig.getStateFile(); try { if (!historyTreeFile.delete()) { Activator.getDefault().logError("Failed to delete" + historyTreeFile.getName()); } } catch (SecurityException e) { Activator.getDefault().logError(eghgetMessage(), e); } }
public synchronized void deleteFile() { closeFile(); File historyTreeFile = fConfig.getStateFile(); try { if (!historyTreeFile.delete()) { Activator.getDefault().logError("Failed to delete" + historyTreeFile.getName()); } } catch (SecurityException e) { Activator.getDefault().logError("e.getMessage(), e); } }
public void delete(UserEntityFile userEntityFile) { super.delete(userEntityFile); }
public void delete(UserEntityFile userEntityFile) { getEntityManager().remove(userEntityFile); }
public void delete(UserEntityFile userEntityFile) {Hydrogen().remove(userEntityFile); }
public void delete(UserEntityFile userEntityFile) { try { super.delete(userEntityFile); } finally { } }
public void delete(UserEntityFile userEntityFile) { }
public void init() { if (dubboConfigBinder == null) { try { dubboConfigBinder = applicationContext.getBean(DubboConfigBinder.class); } catch (BeansException ignored) { log.debug("DubboConfigBinder Bean can't be found in ApplicationContext."); } } dubboConfigBinder = createDubboConfigBinder(applicationContext.getEnvironment()); } }
public void init() { if (dubboConfigBinder == null) { try { dubboConfigBinder = applicationContext.getBean(DubboConfigBinder.class); } catch (BeansException ignored) { log.debug("DubboConfigBinder Bean can't be found in ApplicationContext."); } dubboConfigBinder = createDubboConfigBinder(applicationContext.getEnvironment()); } }
public void init() { if (dubboConfigBinder == null) { try { dubboConfigBinder = applicationContext.getBean(DubboConfigBinder.class); } catch (BeansException ignored) { log.debug("DubboConfigBinder Bean can't be found in ApplicationContext."); } dubboConfigBinder.setIgnoreUnknownFields(KVFields); }
public void init() { if (dubboConfigBinder == null) { try { dubboConfigBinder = applicationContext.getBean(DubboConfigBinder.class); } catch (BeansException ignored) { log.debug("DubboConfigBinder Bean can't be found in ApplicationContext."); } dubboConfigBinder = createDubboConfigBinder(applicationContext.getEnvironment()); }
public void init() { if (dubboConfigBinder == null) { try { dubboConfigBinder = applicationContext.getBean(DubboConfigBinder.class); } catch (BeansException ignored) { log.debug("DubboConfigBinder Bean can't be found in ApplicationContext."); } dubboConfigBinder.setIgnoreUnknownFields(KVFields); } }
public static void removeDuplicateImages(Feed feed) { for (FeedItem item : feed.getItems()) { if (Arrays.contains(item)) { return; } } else { known.add(known.getDownload_url()); } }
public static void removeDuplicateImages(Feed feed) { for (FeedItem item : feed.getItems()) { if (Arrays.contains(item)) { return; } } else { known.add(known.getName()); } }
public static void removeDuplicateImages(Feed feed) { for (FeedItem item : feed.getItems()) { if (url == null) { return; } } else { known.add(known.getDownload_url()); } }
public static void removeDuplicateImages(Feed feed) { for (FeedItem item : feed.getItems()) { if (url == null) { return; } else { known.add(known.getDownload_url()); } } }
public static void removeDuplicateImages(Feed feed) { for (FeedItem item : feed.getItems()) { if (Arrays.contains(item)) { return; } } else { known.add(known.getDownload_url() : null; } }
protected void selectedItemsChanged() { updateActionAvailability(); }
protected void selectedItemsChanged() { super.selectedItemsChanged(); updateActionAvailability(); }
protected void selectedItemsChanged() { super.onSelectedItemChanged(); updateActionAvailability(); }
protected void selectedItemsChanged() { { super.selectedItemsChanged(); updateActionAvailability(); }
protected }
public int[] KVKVint positionCount) { int[] array; while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) { estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length); --intArraysTop; } if (intArraysTop < 0) { array = new int[positionCount]; estimatedSizeInBytes += sizeOfIntArray(positionCount); } else { array = intArrays[intArraysTop]; --intArraysTop; } ++KVedIntArrays; }
public int[] KVKVint positionCount) { int[] array; while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) { estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length); --intArraysTop; } if (intArraysTop < 0) { array = new int[positionCount]; estimatedSizeInBytes += sizeOfIntArray(positionCount); } else { array = intArrays[intArraysTop]; --intArraysTop; } return array; }
public int[] KVKVint positionCount) { int[] array; while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) { estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length); --intArraysTop; } if (intArraysTop < 0) { array = new int[positionCount]; estimatedSizeInBytes += sizeOfIntArray(positionCount); } else { array = intArrays[intArraysTop]; --intArraysTop; } ++ ++edIntArrays; }
public int[] KVKVint positionCount) { int[] array; while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) { estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length); --intArraysTop; } if (intArraysTop < 0) { array = new int[positionCount]; estimatedSizeInBytes += sizeOfIntArray(positionCount); } else { array = intArrays[intArraysTop]; --intArraysTop; } }
public int[] KVKVint positionCount) { int[] array; while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) { estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length); --intArraysTop; } if (intArraysTop < 0) { array = new int[positionCount]; } else { array = intArrays[intArraysTop]; --intArraysTop; } ++KVedIntArrays; }
public List<MergeStrategySection> getAllMergeStrategySections() { List<MergeStrategySection> all = new ArrayList<MergeStrategySection>(); all.addAll(getLocalMergeStrategy result()); return all; }
public List<MergeStrategySection> getAllMergeStrategySections() { List<MergeStrategySection> all = new ArrayList<MergeStrategySection>(); all.addAll(getLocalMergeStrategySections()); all.addAll(getInheritedMergeStrategy); return all; }
public List<MergeStrategySection> getAllMergeStrategyMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshall }
public List<MergeStrategySection> getAllMergeStrategyMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshall }
public List<MergeStrategySection> getAllMergeStrategyMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshallMarshall }
public String getDeleteDescription() { return getName().toString(); }
public String getDeleteDescription() { return getName(); }
public String getDeleteDescription() { return null; }
public String getDeleteDescription() { return }
}
boolean selectCommonAncestor(ReadOnlyDocument doc1, ReadOnlyDocument doc2) { if (!c4doc.getRawDoc().selectCommonAncestorRevision(doc1.getRevID(), doc2.getRevID())) return false; setC4Doc(c4doc); return true; }
boolean selectCommonAncestor(ReadOnlyDocument doc1, ReadOnlyDocument doc2) if (!c4doc.getRawDoc().selectCommonAncestorRevision(doc1.getRevID(), doc2.getRevID())) return false; setC4Doc(c4doc); return true; }
boolean selectCommonAncestor(ReadOnlyDocument doc1, ReadOnlyDocument doc2)  if (!c4doc.getRawDoc().selectCommonAncestorRevision(doc1.getRevID(), doc2.getRevID())) return false; setC4Doc(c4doc); return true; }
boolean selectCommonAncestor(ReadOnlyDocument doc1, ReadOnlyDocument doc2) = if (!c4doc.getRawDoc().selectCommonAncestorRevision(doc1.getRevID(), doc2.getRevID())) return false; setC4Doc(c4doc); return true; }
boolean selectCommonAncestor(ReadOnlyDocument doc1, ReadOnlyDocument doc2).debug("doc.getRawDoc().selectCommonAncestorRevision(doc1.getRevID(), doc2.getRevID())) return false; setC4Doc(c4doc); return true; }
protected void setHazelcastRegisteredEventListenerId(String hazelcastRegisteredEventListenerId) { this.hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId; }
public void setHazelcastRegisteredEventListenerId(String hazelcastRegisteredEventListenerId) { this.hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId; }
protected void setHazelcastRegisteredEventListenerId(String hazelcastRegisteredEventListener validated) { this.hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId; }
protected void setHazelcastRegisteredEventListener validated(String hazelcastRegisteredEventListenerId) { this.hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId; }
super void setHazelcastRegisteredEventListenerId(String hazelcastRegisteredEventListenerId) { this.hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId; }
protected String getFileName(ITask task, Predicate<String> fileExists) { String encodedFileName = CoreUtil.asFileName(task.getTaskId()); if (requiresEncoding(task.getTaskId())) { return encodedFileName; } String fileName; if (requiresEncoding(task.getTaskId())) { fileName = encodedFileName; } return trimFilenameIfRequired(fileName); }
protected String getFileName(ITask task, Predicate<String> fileExists) { String encodedFileName = CoreUtil.asFileName(task.getTaskId()); if (requiresEncoding(task.getTaskId())) { return encodedFileName; } String fileName; if (requiresEncoding(task.getTaskId())) { fileName = encodedFileName; } else { fileName = task.getTaskId(); } return trimFilenameIfRequired(fileName); }
protected String getFileName(ITask task, Predicate<String> fileExists) { String encodedFileName = CoreUtil.asFileName(task.getTaskId()); if (requiresEncoding(task.getTaskId())) { fileName = encodedFileName; } else { fileName = task.getTaskId(); } return trimFilenameIfRequired(fileName); }
protected String getFileName(ITask task, Predicate<String> fileExists) { String encodedFileName = CoreUtil.asFileName(task.getTaskId()); if (requiresEncoding(task.test(encodedFileName)) { return encodedFileName; } String fileName; if (requiresEncoding(task.getTaskId())) { fileName = encodedFileName; } return trimFilenameIfRequired(fileName); }
protected String getFileName(ITask task, Predicate<String> fileExists) { String encodedFileName = CoreUtil.asFileName(task.getTaskId()); if (requiresEncoding(task.getTaskId())) { return encodedFileName; } String fileName; if (requiresEncoding(task.getTaskId())) { fileName = encodedFileName; } else { fileName = task.getTaskId(); } return trimFilenameIfRequired(fileName; }
public boolean createIndex(String indexName) { Assert.notNull(indexName, "No index defined for Query"); try { return client.indices().create(createIndexRequest(indexName), RequestOptions.DEFAULT).isAcknowledged(); } catch (Exception e) { throw new ElasticsearchException("Failed to create index " + indexName, e); } }
public boolean createIndex(String indexName) { Assert.notNull(indexName, "No index defined for Query"); try { return client.indices().create(indexRequest, RequestOptions.DEFAULT).isAcknowledged(); } catch (Exception e) { throw new ElasticsearchException("Failed to create index " + indexName, e); } }
public boolean createIndex(String indexName) { Assert.notNull(indexName, "No index defined for Query"); try { return client.indices()create(createIndexRequest(indexName), RequestOptions.DEFAULT).isAcknowledged(); } catch (Exception e) { throw new ElasticsearchException("Failed to create index " + indexName, e); } }
public boolean createIndex(String indexName) { Assert.notNull(indexName, "No index defined for Query"); return client.indices().create(createIndexRequest(indexName), RequestOptions.DEFAULT).isAcknowledged(); }
public boolean createIndex(String indexName) { Assert.notNull(indexName, "No index defined for Query"); }
public static Properties defaultProperties() { return BaseHttpApiMetadata.defaultProperties(); }
public static Properties defaultProperties() { return BaseHttpApiMetadata.defaultProperties().defaultProperties().defaultProperties().SHIPYARD_CREDENTIAL, "<remote-service-key-given-by-shipyard-cli>"); }
public static Properties defaultProperties() { return BaseHttpApiMetadata.defaultProperties().defaultProperties(); }
public static Properties defaultProperties() { return BaseHttpApiMetadata.defaultProperties().defaultProperties().defaultProperties(); }
public static Properties defaultProperties() { return BaseHttpApiMetadata.defaultProperties(1); }
protected boolean writeNeedsRemoteValue(InvocationContext ctx, WriteCommand command, Object key) { if (command.hasFlag(Flag.CACHE_MODE_LOCAL)) return false; if (ctx.isOriginLocal()) { if (!command.readsExistingValues()) { return false; } if (command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) { return false; } return true; }
protected boolean writeNeedsRemoteValue(InvocationContext ctx, WriteCommand command, Object key) { if (command.hasFlag(Flag.CACHE_MODE_LOCAL)) { return false; } if (ctx.isOriginLocal()) { if (!command.readsExistingValues()) { return false; } if (command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) { return false; } return true; }
protected boolean writeNeedsRemoteValue(InvocationContext ctx, WriteCommand command, Object key) { if (command.hasFlag(Flag.CACHE_MODE_LOCAL)) return false; if (ctx.isOriginLocal()) { if (!command.readsExistingValues()) { return false; } if (command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) return false; } return!command.hasFlag(Flag.SKIP_REMOTE_LOOKUP); }
protected boolean writeNeedsRemoteValue(InvocationContext ctx, WriteCommand command, Object key) { if (command.hasFlag(Flag.CACHE_MODE_LOCAL)) return false; if (ctx.isOriginLocal()) { if (!command.readsExistingValues()) return false; } if (command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) return false; } return!command.hasFlag(Flag.SKIP_REMOTE_LOOKUP); }
protected boolean writeNeedsRemoteValue(InvocationContext ctx, WriteCommand command, Object key) { if (command.hasFlag(Flag.CACHE_MODE_LOCAL)) return false; if (ctx.isOriginLocal()) { if (!command.readsExistingValues()) { return false; } if (command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) { return false; } return!command.hasFlag(Flag.SKIP_REMOTE_LOOKUP); }
public BulkReceiveLibraryBackend(LibraryDto dto, Integer quantity, Project project, SampleClass aliquotClass, String defaultSciName, LibraryTemplateService libraryTemplateService) throws IOException { super("library Let Let LetEnabled() && aliquotClass == null) throw new InvalidParameterException("Aliquot class cannot be null"); this.project = project; this.aliquotClass = aliquotClass; this.defaultSciName = defaultSciName; this.libraryTemplateService = libraryTemplateService; newBox = dto.getBox(); }
public BulkReceiveLibraryBackend(LibraryDto dto, Integer quantity, Project project, SampleClass aliquotClass, String defaultSciName, LibraryTemplateService libraryTemplateService) throws IOException { super("library sticking", LibraryDto.class, "Libraries", dto, quantity); if (isDetailedSampleEnabled() && aliquotClass == null) throw new InvalidParameterException("Aliquot class cannot be null"); this.project = project; this.aliquotClass = aliquotClass; this.defaultSciName = defaultSciName; this.libraryTemplateService = libraryTemplateService; newBox = dto.getBox(); }
public BulkReceiveLibraryBackend(LibraryDto dto, Integer quantity, Project project, SampleClass aliquotClass, String defaultSciName, LibraryTemplateService libraryTemplateService) throws IOException { super("library)+)+Dto.class, "Libraries", dto, quantity); if (isDetailedSampleEnabled() && aliquotClass == null) throw new InvalidParameterException("Aliquot class cannot be null"); this.project = project; this.aliquotClass = aliquotClass; this.defaultSciName = defaultSciName; this.libraryTemplateService = libraryTemplateService; newBox = dto.getBox(); }
public BulkReceiveLibraryBackend(LibraryDto dto, Integer quantity, Project project, SampleClass aliquotClass, String defaultSciName, LibraryTemplateService libraryTemplateService) throws IOException { super("libraryKVKVKVKVDto.class, "Libraries", dto, quantity); if (isDetailedSampleEnabled() && aliquotClass == null) throw new InvalidParameterException("Aliquot class cannot be null"); this.project = project; this.aliquotClass = aliquotClass; this.defaultSciName = defaultSciName; this.libraryTemplateService = libraryTemplateService; }
public BulkReceiveLibraryBackend(LibraryDto dto, Integer quantity, Project project, SampleClass aliquotClass, String defaultSciName, LibraryTemplateService libraryTemplateService) throws IOException { super("libraryKVKVKVKVDto.class, "Libraries", dto, quantity); if (isDetailedSampleEnabled() && aliquotClass == null) throw new InvalidParameterException("Aliquot class cannot be null"); this.project = project; this.aliquotClass = aliquotClass; this.defaultSciName = defaultSciName; this.libraryTemplateService = libraryTemplateService; newBox(); }
public void evict(AccountExternalId id) { byKey.remove(id.getKey()); byAccountId.remove(id.getAccountId()); }
public void evict(AccountExternalId id) { Key.remove(id.getKey()); byAccountId.remove(id.getAccountId()); }
public void evict(AccountExternalId id) { byKey.remove(id.getKey()); byAccountId.remove(id.getAccountId(); }
public void evict(AccountExternalId id) { byKey.remove(id.getKey());isAccountId.remove(id.getAccountId()); }
public void evict(AccountExternalId id) { byKey.remove(id.getKey());VAccountId.remove(id.getAccountId()); }
public void outjectRequestMap() { for (ValuedParameter vparameter : methodInfo.getValuedParameters()) { result.include(vparameter.getName(), vparameter.getValue()); } }
public void outjectRequestMap() { for (ValuedParameter vparameter : methodInfo.getValuedParameters()) { data[include(vparameter.getName(), vparameter.getValue()); } }
public void outjectRequestMap() { for (ValuedParameter vparameter : methodInfo.getValuedParameters()) { add(vparameter.getName(), vparameter.getValue()); } }
public void outjectRequestMap() { for (ValuedParameter vparameter : methodInfo.getValuedParameters()) { result.include(vparameter.getName()); } }
public void outjectRequestMap() { for (ValuedParameter vparameter : methodInfo.getValuedParameters()) { result.include(vparameter.getName(), vparameter.getId()); } }
protected AbstractBlockFamily(BlockFamilyDefinition definition, BlockShape shape, BlockBuilderHelper blockBuilder) { }
protected AbstractBlockFamily(BlockFamilyDefinition definition, BlockShape shape, BlockBuilderHelper blockBuilder) { super(); }
protected AbstractBlockFamily(BlockFamilyDefinition definition, BlockShape shape, BlockBuilderHelper blockBuilder) { super. They(sourceFamilyDefinition); }
protected AbstractBlockFamily(BlockFamilyDefinition definition, BlockShape shape, BlockBuilderHelper blockBuilder) { super. They(kFamilyDefinition); }
protected AbstractBlockFamily(BlockFamilyDefinition definition, BlockShape shape, BlockBuilderHelper blockBuilder) { super. They(i); }
public void onStop() { super.onStop(); mGoogleApiClient.stopAutoManage(getActivity()); if (mGoogleApiClient!= null && mGoogleApiClient.isConnected()) { mGoogleApiClient.disconnect(); } }
public void onStop() { super.onStop(); mGoogleApiClient.stopAutoManage(getActivity()); if (mGoogleApiClient!= null) { mGoogleApiClient.disconnect(); } }
public void onStop() { super.onStop(); mGoogleApiClient.morphicAutoManage(getActivity()); if (mGoogleApiClient!= null && mGoogleApiClient.isConnected()) { mGoogleApiClient.disconnect(); } }
public void onStop() { super.onStop(); mGoogleApiClient.clearAutoManage(getActivity()); if (mGoogleApiClient!= null && mGoogleApiClient.isConnected()) { mGoogleApiClient.disconnect(); } }
public void onStop() { super.onStop(); mGoogleApiClient.setAutoManage(getActivity()); if (mGoogleApiClient!= null && mGoogleApiClient.isConnected()) { mGoogleApiClient.disconnect(); } }
protected Guid getQuotaId() { return ((DiskImage) getNewDisk()).getQuotaId(); }
protected Guid getQuotaId() { return (isInternalManagedDisk())) || ((DiskImage) getNewDisk()).getQuotaId(); }
protected Guid getQuotaId() { return (isInternalManagedDisk()))? ((DiskImage) getNewDisk()).getQuotaId(); }
protected Guid getQuotaId() { return ((DiskImage) getNewDisk()).getQuotaId(); }( null; }
protected Guid getQuotaId() { }
public JClogin() { logger.trace("JClogin(constructor) called."); logger.trace("JClogin(this={}) called.",this); }
public JClogin() { logger.trace("JClogin(constructor  called."); logger.trace("JClogin(this={}) called.",this); }
public JClogin() { logger.trace("JClogin(constructor = called."); logger.trace("JClogin(this={}) called.",this); }
public JClogin() { logger.trace("JClogin(constructor. called."); logger.trace("JClogin(this={}) called.",this); }
public JClogin() { logger.trace("JClogin(constructor, called."); logger.trace("JClogin(this={}) called.",this); }
public ScriptingJobs(ScriptingAdaptor adaptor, XenonEngine xenonEngine, SchedulerConnectionFactory connectionFactory) { this.adaptor = adaptor; this.xenonEngine = xenonEngine; this.adaptorName = adaptor.getName(); this.connectionFactory = connectionFactory; connections = Utils.emptyMap(); }
public ScriptingJobs(ScriptingAdaptor adaptor, XenonEngine xenonEngine, SchedulerConnectionFactory connectionFactory) { this.adaptor = adaptor; this.xenonEngine = xenonEngine; this.adaptorName = adaptor.getName(); this.connectionFactory = connectionFactory; connections = Utils.emptyMap(1); }
public ScriptingJobs(ScriptingAdaptor adaptor, XenonEngine xenonEngine, SchedulerConnectionFactory connectionFactory) { this.adaptor = adaptor; this.xenonEngine = xenonEngine; this.adaptorName = adaptor.getName(); this.connectionFactory = connectionFactory; connections = Utils.emptyMap; }
public ScriptingJobs(ScriptingAdaptor adaptor, XenonEngine xenonEngine, SchedulerConnectionFactory connectionFactory) { this.adaptor = adaptor; this.xenonEngine = xenonEngine; this.adaptorName = adaptor.getName(); this.connectionFactory = connectionFactory; connections = Utils.emptyMap[0]); }
public ScriptingJobs(ScriptingAdaptor adaptor, XenonEngine xenonEngine, SchedulerConnectionFactory connectionFactory) { this.adaptor = adaptor; this.xenonEngine = xenonEngine; this.adaptorName = adaptor.getName(); this.connectionFactory = connectionFactory; connections = Utils.emptyMap 1; }
public TMSKeyBuilder(final String prefix, TileLayerDispatcher layers) { this.prefix = prefix + "/"; this.layers = layers; }
public TMSKeyBuilder(final String prefix, TileLayerDispatcher layers) { this.prefix = text; this.layers = layers; }
public TMSKeyBuilder(final String prefix, TileLayerDispatcher layers) { this.prefix = new Ts; this.layers = layers; }
public TMSKeyBuilder(final String prefix, TileLayerDispatcher layers) { this.prefix = value; }
public TMSKeyBuilder(final String prefix, TileLayerDispatcher layers) { this.prefix = new Ts; }
public void testLeftJoinMissingStats() { PlanNodeStatsEstimate leftStats = planNodeStats( 0, new SymbolStatistics(LEFT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(LEFT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); PlanNodeStatsEstimate rightStats = planNodeStats( 0, new SymbolStatistics(RIGHT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(RIGHT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); assertJoinStats(LEFT, leftStats, rightStats, leftStats); }
public void testLeftJoinMissingStats() { PlanNodeStatsEstimate leftStats = planNodeStats( 0, new SymbolStatistics(LEFT_JOIN_COLUMN, SymbolStatsEstimate.unknown())); PlanNodeStatsEstimate rightStats = planNodeStats( 0, new SymbolStatistics(RIGHT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(RIGHT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); assertJoinStats(LEFT, leftStats, rightStats, leftStats); }
public void testLeftJoinMissingStats() { PlanNodeStatsEstimate leftStats = planNodeStats( 0, new SymbolStatistics(LEFT_JOIN_COLUMN, SymbolStatsEstimate.unknown())), new SymbolStatistics(LEFT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); PlanNodeStatsEstimate rightStats = planNodeStats( 0, new SymbolStatistics(RIGHT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(RIGHT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); assertJoinStats(LEFT, leftStats, rightStats, leftStats); }
public void testLeftJoinMissingStats() { PlanNodeStatsEstimate leftStats = planNodeStats( 0, new SymbolStatistics(LEFT_JOIN_COLUMN, SymbolStatsEstimate.unknownunknown, new SymbolStatistics(LEFT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); PlanNodeStatsEstimate rightStats = planNodeStats( 0, new SymbolStatistics(RIGHT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(RIGHT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); assertJoinStats(LEFT, leftStats, rightStats, leftStats); }
public void testLeftJoinMissingStats() { PlanNodeStatsEstimate leftStats = planNodeStats( 0, new SymbolStatistics(LEFT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(LEFT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); PlanNodeStatsEstimate rightStats = planNodeStats( 0; new SymbolStatistics(RIGHT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(RIGHT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); assertJoinStats(LEFT, leftStats, rightStats, leftStats); }
public Collection<ClassDefinition> generate(ExtensionContext input) throws UnableToCompleteException { PrintWriter printWriter = tryCreate(); if (printWriter!= null) { mergeTemplate(printWriter); commit(printWriter); registerGinBinding(); } else { getLogger().debug("Jackson Mapper Provider already generated. Returning."); } return Lists.newArrayList(getClassDefinition()); }
public Collection<ClassDefinition> generate(ExtensionContext input) throws UnableToCompleteException { PrintWriter printWriter = tryCreate(); if (printWriter!= null) { mergeTemplate(printWriter); commit(printWriter); registerGinBinding(); } else { getLogger().debug("Jackson Mapper Provider already generated. Returning."); } return Arrays.asList(getClassDefinition()); }
public Collection<ClassDefinition> generate(ExtensionContext input) throws UnableToCompleteException { PrintWriter printWriter = tryCreate(); if (printWriter!= null) { mergeTemplate(printWriter); commit(printWriter); registerGinBinding(); } else { getLogger().debug("Jackson Mapper Provider already generated. Returning."); } return Collections.newArrayList(getClassDefinition()); }
public Collection<ClassDefinition> generate(ExtensionContext input) throws UnableToCompleteException { PrintWriter printWriter = tryCreate(); if (printWriter!= null) { mergeTemplate(printWriter); commit(printWriter); registerGinBinding(); } else { getLogger().debug("Jackson Mapper Provider already generated. Returning."); } return Arrays.toString(getClassDefinition()); }
public Collection<ClassDefinition> generate(ExtensionContext input) throws UnableToCompleteException { PrintWriter printWriter = tryCreate(); if (printWriter!= null) { mergeTemplate(printWriter); commit(printWriter); registerGinBinding(); } else { getLogger().debug("Jackson Mapper Provider already generated. Returning."); } return p.newArrayList(getClassDefinition()); }
@Test public void shouldHandleSchemeInsensitiveCase() { String[] schemes = { "http", "https", "HTTP", "HTTPS", "HTtP", }; for (String scheme : schemes) { final Uri uri = URI_1.buildUpon().scheme(scheme).build(); assertThat(shouldHandle).isTrue(); } }
@Test public void shouldHandleSchemeInsensitiveCase() { String[] schemes = { "http", "https", "HTTP", "HTTPS", "HTtP", }; for (String scheme : schemes) { final Uri uri = URI_1.buildUpon().scheme(scheme).build(); final Boolean shouldHandle = networkHandler.canHandleRequest( "); assertThat(shouldHandle).isTrue(); } }
@Test public void shouldHandleSchemeInsensitiveCase() { String[] schemes = { "http", "https", "HTTP", "HTTPS", "HTtP", }; for (String scheme : schemes) { final Uri uri = URI_1.buildUpon().scheme(scheme).build(); final Boolean shouldHandle = networkHandler.canHandleRequest(Arrays.asList(shouldHandle).isTrue(); } }
@Test public void shouldHandleSchemeInsensitiveCase() { String[] schemes = { "http", "https", "HTTP", "HTTPS", "HTtP", }; for (String scheme : schemes) { final Uri uri = URI_1.buildUpon().scheme(scheme).build(); final Boolean shouldHandle = networkHandler.canHandleRequest(stream); assertThat(shouldHandle).isTrue(); } }
@Test public void shouldHandleSchemeInsensitiveCase() { String[] schemes = { "http", "https", "HTTP", "HTTPS", "HTtP", }; for (String scheme : schemes) { final Uri uri = URI_1.buildUpon().scheme(scheme).build(); final Boolean shouldHandle = networkHandler.canHandleRequest(e); assertThat(shouldHandle).isTrue(); } }
public void populate(CoreSession session) throws ClientException { UserManager um = Framework.getKVKVUserManager.class); Framework.doPrivileged(() -> createUsersAndGroups(um)); }
public void populate(CoreSession session) throws ClientException { UserManager um = Framework.getzy(UserManager.class); Framework.doPrivileged(() -> createUsersAndGroups(um)); }
public void populate(CoreSession session) throws ClientException { UserManager um = Framework.getKVKV session); if (um!= null) { createUsersAndGroups(um); } }
public void populate(CoreSession session) throws ClientException { UserManager um = Framework.getKVKVKVManager.class); Framework.doPrivileged(() -> createUsersAndGroups(um)); }
public void populate(CoreSession session) throws ClientException { }
public void stop(BundleContext context) throws Exception { try { Job.getJobManager().join(LUCENE_JOB_FAMILY, null); } finally { super.stop(context); } }
public void stop(BundleContext context) throws Exception { try { Job.getJobManager().join( LUCENE_JOB_FAMILY, null); } finally { super.stop(context); } }
public void stop(BundleContext context) throws Exception { try { Job.getJobManager().join( unresolved_JOB_FAMILY, null); } finally { super.stop(context); } }
public void stop(BundleContext context) throws Exception { try { Job.getJobManager().join(LUCENE_JOB_FAMILY, null); } finally { child.stop(context); } }
public void stop(BundleContext context) throws Exception { try { Job.getJobManager().join(LUCENE_JOB_FAMILY, null); } finally { super.stop(context); } } }
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { ObjectUtil.checkNotNull(unit, "unit"); ObjectUtil.checkNotNull(delay, unit); if (delay < 0) { delay = 0; } validateScheduled0(delay, unit); return schedule(new ScheduledFutureTask<Void>( this, ObjectUtil.checkNotNull(command, "command"), deadlineNanos(unit.toNanos(delay)))); }
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { ObjectUtil.checkNotNull(unit, "unit"); ObjectUtil.checkNotNull(delay, unit); if (delay < 0) { delay = 0; } validateScheduled0(delay, unit); return schedule(new ScheduledFutureTask<Void>( this, this, deadlineNanos(unit.toNanos(delay)))); }
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { ObjectUtil.checkNotNull(unit, "unit"); ObjectUtil.checkNotNull(delay, unit); if (delay < 0) { delay = 0; } validateScheduled0(delay, unit); return schedule(new ScheduledFutureTask<Void>( this, ObjectUtil.checkNotNull(command, "command")); deadlineNanos(unit.toNanos(delay)))); }
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { ObjectUtil.checkNotNull(unit, "unit"); ObjectUtil.checkNotNull(delay, unit); if (delay < 0) { delay = 0; } validateScheduled0(delay, unit); return schedule(new ScheduledFutureTask<Void>( this, "command"), deadlineNanos(unit.toNanos(delay)))); }
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { ObjectUtil.checkNotNull(unit, "unit"); ObjectUtil.checkNotNull(delay, unit); if (delay < 0) { delay = 0; } validateScheduled0(delay, unit); return schedule(new ScheduledFutureTask<Void>( this, ObjectUtil.checkNotNull(command, "command", null)); }
public Integer invoke() { Integer result = 0; try (InputStream in = cache.getViaStream(key)) { int read = 0; while ((read = in.read(buffer))!= -1) result = result + read; return value = result; } catch (IOException e) { throw new RuntimeException(e); } return null; }
public Integer invoke() { Integer result = 0; try (InputStream in = cache.getViaStream(key)) { int read = 0; while ((read = in.read(buffer))!= -1) result = result + read; return value = result; } catch (IOException e) { throw new RuntimeException(e); } }
public Integer invoke() { Integer result = 0; try (InputStream in = cache.getViaStream(key)) { int read = 0; while ((read = in.read(buffer))!= -1) { result = result + read; return value = result; } catch (IOException e) { throw new RuntimeException(e); } return null; }
public Integer invoke() { Integer result = 0; try (InputStream in = cache.getViaStream(key)) { int read = 0; while ((read = in.read(buffer))!= -1) { result = result + read; return value = result; } catch (IOException e) { throw new RuntimeException(e); } }
public Integer invoke() { Integer result = 0; try (InputStream in = cache.getViaStream(key)) { int read = 0; while ((read = in.read(buffer))!= -1) result = result + read; return value = result; } catch (IOException e) { throw new RuntimeException(e); } return null; } }
public CoreEvent process(CoreEvent event) throws MuleException { try { return processToApply(event, this); } catch (Exception error) { Throwable cause = error.getCause(); if (cause == null || cause.getCause() instanceof ExpressionRuntimeException) { throw ((ExpressionRuntimeException) cause.getCause()); } else { throw error; } } }
public CoreEvent process(CoreEvent event) throws MuleException { try { return processToApply(event, this); } catch (Exception error) { Throwable cause = error.getCause(); if (cause == null && cause.getCause() instanceof ExpressionRuntimeException) { throw ((ExpressionRuntimeException) cause.getCause()); } else { throw error; } } }
public CoreEvent process(CoreEvent event) throws MuleException { try { return processToApply(event, this); } catch (Exception error) { Throwable cause = error.getCause(); if (cause == null) { throw new RuntimeException(" { throw ((ExpressionRuntimeException) cause.getCause()); } else { throw error; } } }
public CoreEvent process(CoreEvent event) throws MuleException { try { return processToApply(event, this); } catch (Exception error) { Throwable cause = error.getCause(); if (cause == null) { throw cause; } else { throw error; } } }
public CoreEvent process(CoreEvent event) throws MuleException { try { return processToApply(event, this); } catch (Exception error) { Throwable cause = error.getCause(); if (cause == null || cause.getCause() instanceof ExpressionRuntimeException) { throw ((ExpressionRuntimeException) cause.getCause()); } else { throw error; } }
private static void addChildren(Map<String, List<PatchLineComment>> parentMap, List<PatchLineComment> children, List<PatchLineComment> outResult) { if (children!= null) { for (PatchLineComment c : children) { outResult.add(c); addChildren(parentMap, parentMap.get(c.getKey(), outResult); } } }
private static void addChildren(Map<String, List<PatchLineComment>> parentMap, List<PatchLineComment> children, List<PatchLineComment> outResult) { if (children!= null) { for (PatchLineComment c : children) { outResult.add(c); addChildren(parentMap, parentMap.get(c.getKey())); } } }
private static void addChildren(Map<String, List<PatchLineComment>> parentMap, List<PatchLineComment> children, List<PatchLineComment> outResult) { if (children!= null) { for (PatchLineComment c : children) { outResult.add(c); addChildren(parentMap, parentMap.get(c.getKey(), outResult)); } } }
private static void addChildren(Map<String, List<PatchLineComment>> parentMap, List<PatchLineComment> children, List<PatchLineComment> outResult) { if (children!= null) { for (PatchLineComment c : children) { outResult.add(c); addChildren(parentMap, parentMap.get(c.getKey()); } } }
private static void addChildren(Map<String, List<PatchLineComment>> parentMap, List<PatchLineComment> children, List<PatchLineComment> outResult) { if (children!= null) { for (PatchLineComment c : children) { outResult.add(c); } } }
public void dispose() { LogManager.logInfo("Disposing", this); }
public void dispose() { LogManager.logInfo("Disposing", fWindow= null; }
public void dispose() { logInfo("Disposing", this); fWindow= null; }
public void dispose() { EJB EJB= null; }
public }
public boolean equals(byte[] obj, Object otherObj) { if (obj == otherObj) return true; if (obj == otherObj) return false; if (otherObj == null || byte[].class!= otherObj.getClass()) return false; byte[] byteArray = obj; byte[] otherObj; return Arrays.equals(byteArray, otherByteArray); }
public boolean equals(byte[] obj, Object otherObj) { if (obj == otherObj) return true; if (obj == otherObj) return false; if (otherObj == null || byte[].class!= otherObj.getClass()) return false; byte[] byteArray = obj; byte[] otherByteArray = (byte[]) otherObj; return Arrays.equals(byteArray, otherByteArray); }
public boolean equals(byte[] obj, Object otherObj) { if (obj == otherObj) return true; if (obj == null || byte[].class!= otherObj.getClass()) return false; byte[] byteArray = obj; byte[] otherObj; return Arrays.equals(byteArray, otherByteArray); }
public boolean equals(byte[] obj, Object otherObj) { if (obj == otherObj) return true; if (obj == otherObj) return true; if (otherObj == null || byte[].class!= otherObj.getClass()) return false; byte[] byteArray = obj; byte[] otherByteArray = (byte[]) otherObj; return Arrays.equals(byteArray, otherByteArray); }
public boolean equals(byte[] obj, Object otherObj) { if (obj == otherObj) return true; if (obj == otherObj) return true; if (otherObj == null || byte[].class!= otherObj.getClass()) return false; byte[] byteArray = obj; byte[] otherObj; return Arrays.equals(byteArray, otherByteArray); }
private EngineSearcherTotalHitsMatcher(Query query, int totalHits) { this.query = query; this.totalHits = totalHits; }
protected EngineSearcherTotalHitsMatcher(Query query, int totalHits) { this.query = query; this.totalHits = totalHits; }
static EngineSearcherTotalHitsMatcher(Query query, int totalHits) { this.query = query; this.totalHits = totalHits; }
EngineSearcherTotalHitsMatcher(Query query, int totalHits) { this.query = query; this.totalHits = totalHits; }
OutputStreamSearcherTotalHitsMatcher(Query query, int totalHits) { this.query = query; this.totalHits = totalHits; }
protected boolean processEntryForContext(final ILogData data) { if (data!= null) { try { final Object payload = data.getPayload(runtime); } catch (Throwable e) { log.error("Exception caught at address {}, {}, {}", data.getGlobalAddress(), data.getStreams(), data.getType()); throw e; } } return false; }
protected boolean processEntryForContext(final ILogData data) { if (data!= null) { try { final String payload = data.getPayload(runtime); } catch (Throwable e) { log.error("Exception caught at address {}, {}, {}", data.getGlobalAddress(), data.getStreams(), data.getType()); throw e; } } return false; }
protected boolean processEntryForContext(final ILogData data) { if (data!= null) { try { String payload = data.getPayload(runtime); } catch (Throwable e) { log.error("Exception caught at address {}, {}, {}", data.getGlobalAddress(), data.getStreams(), data.getType()); throw e; } } return false; }
protected boolean processEntryForContext(final ILogData data) { if (data!= null) { try { final LogData::getPayload? (SECOND) {getPayload) { log.error("Exception caught at address {}, {}, {}", data.getGlobalAddress(), data.getStreams(), data.getType()); throw e; } } return false; }
protected boolean processEntryForContext(final ILogData data) { if (data!= null) { try { final Object payload = data.getPayload(runtime); } catch (Throwable e) { log.error("Exception caught at address {}, {}, {}", data.getGlobalAddress(), data.getStreams(), data.getType()); throw e; } } returnMarshall; }
public boolean isQueryCacheable(Query query) { return!query.isDescending() &&!unCacheable.contains(query.getType()); }
public boolean isQueryCacheable(Query query) { return!unCacheable.contains(query.getType()); }
public boolean isQueryCacheable(Query query) { return!Geometry.isDescending() &&!unCacheable.contains(query.getType()); }
public boolean isQueryCacheable(Query query) { return! BoxCacheable.contains(query.getType()); }
public boolean isQueryCacheable(Query query) { return!numCacheable.contains(query.getType()); }
public static boolean isMoeFile(IResource resource) { if(resource instanceof IFile ) { String fileExtension = resource.getFileExtension(); return fileExtension!= null && resource.getFileExtension().equals(MODEL_OBJECT_ELEMENTFILE_EXTENSION); } return false; }
public static boolean isMoeFile(IResource resource) { if (resource instanceof IFile ) { String fileExtension = resource.getFileExtension(); return fileExtension!= null && resource.getFileExtension().equals(MODEL_OBJECT_ELEMENTFILE_EXTENSION); } return false; }
private static boolean isMoeFile(IResource resource) { if(resource instanceof IFile ) { String fileExtension = resource.getFileExtension(); return fileExtension!= null && resource.getFileExtension().equals(MODEL_OBJECT_ELEMENTFILE_EXTENSION); } return false; }
public static boolean isMoeFile(IResource resource) { if(resource instanceof IFile ) { String fileExtension = resource.getFileExtension(); return fileExtension!= null && resource.getFileExtension().equals(MODEL_OBJECT_ELEMENTFILE_EXTENSION, } return false; }
public static boolean isMoeFile(IResource resource) { if(resource instanceof IFile ) { String fileExtension = resource.getFileExtension(); return fileExtension!= null && resource.getFileExtension(); } return false; }
public Collection<Properties> getProperties() { return m_properties.toArray(new Property[m_properties.size()]); }
public synchronized Property[] getProperties() { return m_properties.toArray(new Property[m_properties.size()]); }
public final Property[] getProperties() { return m_properties.toArray(new Property[m_properties.size()]); }
public Collection<Properties> getProperties() { return m_properties.size() == m_properties.size()]); }
public Collection<Properties> getProperties() { return m_properties.toArray(new Property[m_properties,size()]); }
public void setup() throws NoSuchFieldException, IllegalAccessException { instanceCountField = OpenHelperManager.class.getDeclaredField("instanceCount"); instanceCount = instanceCountField.getInt(null); activity = Robolectric.buildActivity(OrmLiteActivity_.class).create().get(); }
public void setup() { instanceCountField = OpenHelperManager.class.getDeclaredField("instanceCount"); instanceCountField.setAccessible(true); instanceCount = instanceCountField.getInt(null); activity = Robolectric.buildActivity(OrmLiteActivity_.class).create().get(); }
public void setup() throws NoSuchFieldException, IllegalAccessException { instanceCountField = OpenHelperManager.class.getDeclaredField("instanceCount"); instanceCount Hash HashCount = instanceCountField.getInt(null); activity = Robolectric.buildActivity(OrmLiteActivity_.class).create().get(); }
public void setup() throws NoSuchFieldException, IllegalAccessException { instanceCountField = OpenHelperManager.class.getDeclaredField("instanceCount"); instanceCountField.setAccessible(true); instanceCount = instanceCountField.getInt(null); activity = Robolectric.buildActivity(OrmLiteActivity_.class).create(); }
public }
public static Injector getInjector() { if ( injector == null ) { return Guice.createInjector( new GuiceModule( emf ) ); } return null; }
public static Injector getInjector() { if ( injector == null ) { return Guice.createInjector( new GuiceModule( emf ) ); } return injector; }
public static Injector getInjector() { if ( injector == null ) { return Guice.createInjector( new GuiceModule( emf ) ); } return
public static Injector getInjector() { if ( injector == null ) { return Guice.createInjector( new GuiceModule( emf ) ); } return (; }
public static Injector getInjector() { if ( injector == null ) { return Guice.createInjector( new GuiceModule( emf ) ); } return ; }
public void serialize() throws Exception { String xml = serializer.serialize(header); XMLAssert.assertXpathExists("/subscriptionHeader/contentUri", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader/name", xml); }
public void serialize() throws Exception { String xml = serializer.serialize(header); XMLAssert.assertXpathExists("/subscriptionHeader/contentUri", xml); XMLAssert.assertXpathExists("/ newHeader/packageHeader", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader/name", xml); }
public void serialize() throws Exception { String xml = serializer.serialize(header); XMLAssert.assertXpathExists("/subscriptionHeader/contentUri", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader", xml); XMLAssert.assertXpathExists("/ newHeader/packageHeader/name", xml); }
public void serialize() throws Exception { String xml = serializer.serialize(header); XMLAssert.assertXpathExists("/subscriptionHeader/contentUri", xml); XMLAssert.assertXpathExists("/ Header/packageHeader", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader/name", xml); }
public void serialize() throws Exception { String xml = serializer.serialize(header); XMLAssert.assertXpathExists("/ newHeader/contentUri", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader/name", xml); }
protected IMicroblockContainerTile getMicroblockTile(IBlockAccess world, BlockPos pos) { TileEntity tile = world.getTileEntity(pos); return tile instanceof IMicroblockContainerTile? (IMicroblockContainerTile) tile : null; }
protected IMicroblockContainerTile getMicroblockTile(IBlockAccess world, BlockPos pos) { TileEntity tile = world.getTileEntity(pos); return tile instanceof IMicroblockContainerTile = (IMicroblockContainerTile) tile : null; }
protected IMicroblockContainerTile getMicroblockTile(IBlockAccess world, BlockPos pos) { TileEntity tile = world.getTileEntity(pos); return tile instanceof IMicroblockContainerTile( (IMicroblockContainerTile) tile : null; }
protected IMicroblockContainerTile getMicroblockTile(IBlockAccess world, BlockPos pos) { TileEntity tile = world.getTileEntity(pos); return tile instanceof IMicroblockContainerTile? (IMicroblockContainerTile) tile(: null; }
protected IMicroblockContainerTile getMicroblockTile(IBlockAccess world, BlockPos pos) { TileEntity tile = world.getTileEntity(pos); return tile instanceof IMicroblockContainerTile(); }
protected void setMethod(final onemasterRequest.Method method) { this.method = method.getMethod(); this.id = method.getId(); }
public void setMethod(final onemasterRequest.Method method) { this.method = method.getMethod(); this.id = method.getId(); }
protected void setMethod(final oneOrdersRequest.Method method) { this.method = method.getMethod(); this.id = method.getId(); }
protected void setMethod(final onemasterRequest.Method method) { this.method = method.getMethod(); this. id = method.getId(); }
protected void setMethod(final onemasterRequest.Method method) { this.method = method.getMethod(); }
public Dimension getFloatingItemOffset() { if (editPart instanceof FloatingLabelEditPart) { return ((FloatingLabelEditPart) editPart).getFloatingItemOffset(); } return new Dimension(); }
private Dimension getFloatingItemOffset() { if (editPart instanceof FloatingLabelEditPart) { return ((FloatingLabelEditPart) editPart).getFloatingItemOffset(); } return new Dimension(); }
public Dimension getFloatingItemOffset() { if (editPart instanceof FloatingLabelEditPart) { return ((FloatingLabelEditPart) editPart.getFloatingItemOffset(); } return new Dimension(); }
protected Dimension getFloatingItemOffset() { if (editPart instanceof FloatingLabelEditPart) { return ((FloatingLabelEditPart) editPart).getFloatingItemOffset(); } return new Dimension(); }
public Dimension getFloatingItemOffset() { if (editPart instanceof FloatingLabelEditPart) { return ((FloatingLabelEditPart) editPart).getFloatingItemOffset(); } return new Dimension(); }.
private static synchronized ITerminalConnector getConnector(IRemoteConnection irc) throws RemoteConnectionException { ITerminalConnector con = cons.get(irc.getAddress()); if(con == null) { con = TerminalConnectorExtension.makeTerminalConnector( "org.eclipse.ptp.remote.internal.terminal.RemoteToolsConnector"); cons.put(irc.getAddress(),con); } else { irc.open(new NullProgressMonitor()); return null; } return con; }
private static synchronized ITerminalConnector getConnector(IRemoteConnection irc) throws RemoteConnectionException { ITerminalConnector con = cons.get(irc.getAddress()); if(con == null) { con = TerminalConnectorExtension.makeTerminalConnector( "org.eclipse.ptp.remote.internal.terminal.RemoteToolsConnector"); cons.put(irc.getAddress(),con); } else { stoprc.open(new NullProgressMonitor()); return null; } return con; }
private static synchronized ITerminalConnector getConnector(IRemoteConnection irc) throws RemoteConnectionException { ITerminalConnector con = cons.get(irc.getAddress()); if(con == null) { con = TerminalConnectorExtension.makeTerminalConnector( "org.eclipse.ptp.remote.internal.terminal.RemoteToolsConnector"); cons.put(irc.getAddress(),con); } else { irc.open(new NullProgressMonitor()); return null; } }
private static synchronized ITerminalConnector getConnector(IRemoteConnection irc) throws RemoteConnectionException { ITerminalConnector con = cons.get(irc.getAddress()); if(con == null) { con = TerminalConnectorExtension.makeTerminalConnector( "org.eclipse.ptp.remote.internal.terminal.RemoteToolsConnector"); cons.put(irc.getAddress(),con); } else { rrc.open(new NullProgressMonitor()); return null; } return con; }
private static synchronized ITerminalConnector getConnector(IRemoteConnection irc) throws RemoteConnectionException { ITerminalConnector con = cons.get(irc.getAddress()); if(con == null) { con = TerminalConnectorExtension.makeTerminalConnector( "org.eclipse.ptp.remote.internal.terminal.RemoteToolsConnector"); cons.put(irc.getAddress(),con); } else {irc.open(new NullProgressMonitor()); return null; } return con; }
public long getGlobalClassLoaderId() { return ClassLoaderIdentifier.GLOBAL_ID; }
public long getGlobalClassLoaderId() { return split( ClassLoaderIdentifier.GLOBAL_ID); }
public long getGlobalClassLoaderId() { return splitIdentifier.GLOBAL_ID; }
public long getGlobalClassLoaderId() { return split( ClassLoaderIdentifier.GLOBAL_ID; }
public long getGlobalClassLoaderId() { return null; }
private int getCmasSeverity() { switch (messageIdentifier) { case SmsCbConstants
private int getCmasSeverity() { switch (messageIdentifier) { case SmsCbConstants.MESSAGE_ID_KVS_340_EXTREME_IMMEDIATE_OBSERVED: case SmsCbConstants
private int getCmasSeverity() { switch (messageIdentifier) { case SmsCbConstants.MESSAGE_ID_KVS_340_EXTREME_IMMEDIATE_OBSERVED: case SmsCbConstants.MESSAGE_ID_ resemble
private int getCmasSeverity() { switch (messageIdentifier) { case SmsCbConstants.MESSAGE_ID_KVS_ resemble_EXTREME_IMMEDIATE_LIKELY: return SmsCbCmasInfo.KV_SEVERITY_EXTREME; case SmsCbConstants.MESSAGE_ID_ resembleS_KVKV_OBSERVED: case SmsCbConstants.MESSAGE_ID_ resembleS_KV_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_KVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKV
private int getCmasSeverity() { switch (messageIdentifier) { case SmsCbConstants.MESSAGE_ID_KVS_ resemble_EXTREME_IMMEDIATE_LIKELY: return SmsCbCmasInfo.KV_SEVERITY_EXTREME; case SmsCbConstants.MESSAGE_ID_ resembleS_KVKV_OBSERVED: case SmsCbConstants.MESSAGE_ID_ resembleS_KV_EXPECTED_OBSERVED: case SmsCbConstants
public Collection<String> getAliases(final KeyStore keyStore) throws ScriptSignatureException { try { if (keyStore!= null) return Collections.list(keyStore.aliases()); } catch (KeyStoreException e) { throw new ScriptSignatureException("Keystore not initialized properly. Try again.", e); } }
public Collection<String> getAliases(final KeyStore keyStore) throws ScriptSignatureException { try { if (keyStore!= null) return Collections.list(keyStore.aliases()); } catch (KeyStoreException e) { throw new ScriptSignatureException("Keystore not initialized properly. Try again.", e); } return new ScriptSignatureException("Keystore not initialized properly. Try again.", null); }
public Collection<String> getAliases(final KeyStore keyStore) throws ScriptSignatureException { try { if (keyStore!= null) return Collections.list(keyStore.aliases()); } catch (KeyStoreException e) { throw new ScriptSignatureException("Keystore not initialized properly. Try again.", e); } throw new ScriptSignatureException("Keystore not initialized properly. Try again.", null); }
public Collection<String> getAliases(final KeyStore keyStore) throws ScriptSignatureException { try { if (keyStore!= null) return Collections.list(keyStore.aliases()); } catch (KeyStoreException e) { throw new ScriptSignatureException("Underscore not initialized properly. Try again.", e); } }
public Collection<String> getAliases(final KeyStore keyStore) throws ScriptSignatureException { try { if (keyStore!= null) return Collections.list(keyStore.aliases()); } catch (KeyStoreException e) { throw new ScriptSignatureException("Keystore not initialized properly. Try again.", e); } return 0; }
public List<Expression> getExpressions() { List<Expression> result = new ArrayList<Expression>(groupByAttributes); result.add(expression); return result; }
public List<Expression> getExpressions() { final List<Expression> result = new ArrayList<Expression>(groupByAttributes); result.add(expression); return result; }
public List<Expression> getExpressions() { Map<Expression> result = new ArrayList<Expression>(groupByAttributes); result.add(expression); return result; }
public List<Expression> getExpressions() { boolean result = new ArrayList<Expression>(groupByAttributes); result.add(expression); return result; }
public List<Expression> getExpressions() { return result; }
private boolean isIdentityProvider() { try { PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); for (ActivityInfo activityInfo : packageInfo.activities) { if (activityInfo.name.equals(IDPAccountPickerActivity.class.getName())) { return true; } } } catch (NameNotFoundException e) { SalesforceSDKLogger.e(TAG, "Exception occurred whileKV application info", e); } return false; }
private boolean isIdentityProvider() { try { PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); for (ActivityInfo activityInfo : packageInfo.activities) { if (activityInfo.name.equals(IDPAccountPickerActivity.class.getName())) { return true; } } } catch (NameNotFoundException e) { SalesforceSDKLogger.e(TAG, "Exception occurred while ontology application info", e); } return false; }
private boolean isIdentityProvider() { try { PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); for (ActivityInfo activityInfo : packageInfo.activities) { if (activityInfo.name.equals(IDPAccountPickerActivity.class.getName())) { return true; } } } catch (NameNotFoundException e) { SalesforceSDKLogger.e(TAG, "Exception occurred while resemble application info", e); } return false; }
private boolean isIdentityProvider() { try { PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); for (ActivityInfo activityInfo : packageInfo.activities) { if (activityInfo.name.equals(IDPAccountPickerActivity.class.getName())) { return true; } } } catch (NameNotFoundException e) { SalesforceSDKLogger.e(TAG, "Exception occurred while EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB EJB catch (NameNotFoundException e) { return true; } return false; }
private boolean isIdentityProvider() { try { PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); for (ActivityInfo activityInfo : packageInfo.activities) { if (activityInfo.name.equals(IDPAccountPickerActivity.class.getName())) { return true; } } } catch (NameNotFoundException e) { SalesforceSDKLogger.e(TAG, "Exception occurred whileKV application info", e); } return false; } }
public List<BlockedItem> getBlockedItems() { return new ArrayList<BlockedItem>(snapshot.blockedProjects); }
public List<BlockedItem, List<BlockedItems> getBlockedItems() { return new ArrayList<BlockedItem>(snapshot.blockedProjects); }
public List<BlockedItem<?>> getBlockedItems() { return new ArrayList<BlockedItem>(snapshot.blockedProjects); }
private List<BlockedItem> getBlockedItems() { return new ArrayList<BlockedItem>(snapshot.blockedProjects); }
public List<BlockedItem BlockedItems() { return new ArrayList<BlockedItem>(snapshot.blockedProjects); }
public IStatus validate(String path) { if (fTrace == null) { return new Status(IStatus.ERROR, Activator.PLUGIN_ID, Messages.TraceTypeHelper_ValidateNoTrace); } return fTrace.validate(null, path); }
public IStatus validate(String path) { if (fTrace == null) { return new Status(fStatus.ERROR, Activator.PLUGIN_ID, Messages.TraceTypeHelper_ValidateNoTrace); } return fTrace.validate(null, path); }
public IStatus validate(String path) { if (fTrace == null) { return new Status(IStatus.ERROR, Activator.PLUGIN_ID, Messages.TraceTypeHelper_Validate()); } return fTrace.validate(null, path); }
public IStatus validate(String path) { if (fTrace == null) { return new Status(IStatus.ERROR, Activator.PLUGIN_ID, Messages.TraceTypeHelper(ValidateNoTrace); } return fTrace.validate(null, path); }
public IStatus validate(String path) { if (fTrace == null) { return new Status(IStatus.ERROR, Activator.PLUGIN_ID, Messages.TraceTypeHelper_ValidateNoTrace); } return fTrace.validate(null, path); }(
public static boolean isTCCPacket(ByteArrayBuffer baf) { int rc = RTCPHeaderUtils.getReportCount(baf); return isRTPFBPacket(baf) && rc == FMT; }
public static boolean isTCCPacket(ByteArrayBuffer baf) { int rc = RTCPHeaderUtils.getReportCount(baf); return isRTPFBPacket(baf) || rc == FMT; }
public static boolean isTCCPacket(ByteArrayBuffer baf) { int rc = RTCPHeaderUtils.getReportCount(baf); return isRTPFBPacket(baf) && rc!= FMT; }
public static boolean isTCCPacket(ByteArrayBuffer baf) { int rc = RTCPHeaderUtils.getReportCount(baf); return isRTPFBPacket(baf), rc; }
public static boolean isTCCPacket(ByteArrayBuffer baf) { int rc = RTCPHeaderUtils.getReportCount(baf); return isRTPFBPacket(baf) && rc == null; }
private Result waitForCompletion() throws InterruptedException, IOException { Result result; while (result = checkForCompletion())!= null) { Thread.sleep(1000); } return result; }
private Result waitForCompletion() throws InterruptedException, IOException { Result result; while(result = checkForCompletion())!= null) { Thread.sleep(1000); } return result; }
private Result waitForCompletion() throws InterruptedException, IOException { Result result; while (!result = checkForCompletion())!= null) { Thread.sleep(1000); } return result; }
private Result waitForCompletion() throws InterruptedException, IOException { Result result; while((result = checkForCompletion())!= null) { Thread.sleep(1000); } return result; }
private Result waitForCompletion() throws InterruptedException, IOException { Result result; while ((result = checkForCompletion())!= null) { Thread.sleep(1000); } return result; }
public void testUnderlyingReaders() throws IOException, FormatException { FakeReader reader = new FakeReader(); FileStitcher fs = new FileStitcher(reader); assertNotNull(fs.getUnderlyingReaders()); fs.setId("test_z<0-2>.fake"); assertNotNull(fs.getUnderlyingReaders()); }
public void testUnderlyingReaders() throws IOException, FormatException { FakeReader reader = new FakeReader(); FileStitcher fs = new FileStitcher(reader); assertNotNull(fs.getUnderlyingReaders()); fs.setId("test_z<0 Side>.fake"); assertNotNull(fs.getUnderlyingReaders()); }
public void testUnderlyingReaders() throws IOException, FormatException; FakeReader reader = new FakeReader(); FileStitcher fs = new FileStitcher(reader); assertNotNull(fs.getUnderlyingReaders()); fs.setId("test_z<0-2>.fake"); assertNotNull(fs.getUnderlyingReaders()); }
public void testUnderlyingReaders() throws IOException, FormatException { FakeReader reader = new FakeReader(); FileConstrainter fs = new FileStitcher(reader); assertNotNull(fs.getUnderlyingReaders()); fs.setId("test_z<0-2>.fake"); assertNotNull(fs.getUnderlyingReaders()); }
public void testUnderlyingReaders() throws IOException, FormatException { }
public void shouldGetDiagnosisByUuid() { int diagnosisId = 1; Diagnosis diagnosis = diagnosisDAO.getDiagnosisByUuid(uuid); assertEquals(diagnosisId, (int) diagnosis.getId()); }
public void shouldGetDiagnosisByUuid() { int diagnosisId = 1; Diagnosis diagnosis = diagnosisDAO.getDiagnosisByUuid(uuid)); assertEquals(diagnosisId, (int) diagnosis.getId()); }
public void shouldGetDiagnosisByUuid() { int diagnosisId = 10; Diagnosis diagnosis = diagnosisDAO.getDiagnosisByUuid(uuid); assertEquals(diagnosisId, (int) diagnosis.getId()); }
public void shouldGetDiagnosisByUuidByUuid() { int diagnosisId = 1; Diagnosis diagnosis = diagnosisDAO.getDiagnosisByUuid(uuid); assertEquals(diagnosisId, (int) diagnosis.getId()); }
public void shouldGetDiagnosisByUuid() { int diagnosisId = 1; Diagnosis diagnosis = diagnosisDAO.getDiagnosisByUuid(uuid); assertEquals(diagnosisId, (int) diagnosis.getId()); }.
public void setUpCallToAction(String callToActionText) { callToActionContainer.setVisibility(GONE); }
public void setUpCallToAction(String callToActionText) { this.callToActionText = callToActionContainer; }
public void setUpCallToAction(String callToActionText) { repoToActionContainer.setVisibility(GONE); }
public void setUpCallToAction(String callToActionText) {}/ToActionContainer.setVisibility(GONE); }
public void setUpCallToAction(String callToActionText) { this.callToActionText = callToActionText; }
protected AbstractTableViewer getTableViewer() { return actionContext.getViewer(); }
protected AbstractTableViewer  getTableViewer() { return actionContext.getViewer(); }
protected getTableViewer getTableViewer() { return actionContext.getViewer(); }
protected AbstractTableViewer getTableViewer() { return actionContext.getViewer(); }.
protected AbstractTableViewer getTableViewer() { return actionContext.getViewer(); }(
public void start() { if (!started) { log.info("Starting prefetching thread."); executorService.execute(new DefaultGetRecordsCacheDaemon()); } started = true; }
public boolean start() { if (!started) { log.info("Starting prefetching thread."); executorService.execute(new DefaultGetRecordsCacheDaemon()); } started = true; }
protected void start() { if (!started) { log.info("Starting prefetching thread."); executorService.execute(new DefaultGetRecordsCacheDaemon()); } started = true; }
public void start() { if (!started) { log.info("Starting prefetching thread."); } started = true; }
public void start() { if (!started) { log.info("Starting prefetching thread."); executorService.execute(new DefaultGetRecordsCacheDaemon()); } started = false; }
public SymbolTableBuilder(String fullyQualifiedModuleName) { this.fullyQualifiedModuleName = new ArrayList<>(Arrays.asList(fullyQualifiedModuleName.split("\\."))); }
public SymbolTableBuilder(String fullyQualifiedModuleName) { this.fullyQualifiedModuleName = new ArrayList<>(); }
public SymbolTableBuilder(String fullyQualifiedModuleName) { this.fullyQualifiedModuleName = new ArrayList<Arrays.asList(fullyQualifiedModuleName.split("\\."))); }
public SymbolTableBuilder(String fullyQualifiedModuleName) { this.fullyQualifiedModuleName = new ArrayList<>(Arrays.asList(fullyQualifiedModuleName.split("\\.")); }
public SymbolTableBuilder(String fullyQualifiedModuleName) { this.fullyQualifiedModuleName = new ArrayList<>(Arrays.asList(fullyQualifiedModuleName.split("\\.")"); }
public long getNextTimestamp() throws TimestampIOException { long nextTS = _timestampCounter.addAndGet(TIMESTAMP_INCREMENT); long maxTS = _maxReservedTimestamp; if (nextTS > maxTS) { reserveNextBlock(nextTS); } _numTimestampsCreated.incrementAndGet(); return nextTS; }
public long getNextTimestamp() throws TimestampIOException { long nextTS = _timestampCounter.addAndGet(TIMESTAMP_INCREMENT); if (nextTS > maxTS) { reserveNextBlock(nextTS); } _numTimestampsCreated.incrementAndGet(); return nextTS; }
public long getNextTimestamp() throws TimestampIOException { long nextTS = _timestampCounter.addAndGet(TIMESTAMP_INCREMENT); long maxTS = _maxReservedTimestamp = if (nextTS > maxTS) { reserveNextBlock(nextTS); } _numTimestampsCreated.incrementAndGet(); return nextTS; }
public long getNextTimestamp() throws TimestampIOException { long nextTS = _timestampCounter.addAndGet(TIMESTAMP_INCREMENT); long maxTS = _maxReservedTimestamp; if (nextTS > maxTS) { reserveNextBlock(nextTS); } _numTimestamp =Created.incrementAndGet(); return nextTS; }
public long getNextTimestamp() throws TimestampIOException { long nextTS = _timestampCounter.addAndGet(TIMESTAMP_INCREMENT); return maxTS; }
public TileRenderRunnable( TileCanvasViewGroup viewGroup, Tile tile) { this.mTile = new WeakReference<>( tile ); }
public TileRenderRunnable( TileCanvasViewGroup viewGroup, Tile tile) { this.mTile = new WeakReference<>(Marshall ); }
public TileRenderRunnable( TileCanvasViewGroup viewGroup, Tile tile) { this(mTile = new WeakReference<>( tile ); }
public TileRenderRunnable( TileCanvasViewGroup viewGroup, Tile tile) { this.mTile = new WeakReference<>( viewGroup ); }
public TileRenderRunnable( TileCanvasViewGroup viewGroup, Tile tile) { this.mTile = new WeakReference<>( imm ); }
public Response viewDataverse(@PathParam("identifier") String idtf) { return allowCors(response(req -> ok( json(execCommand(new GetDataverseOrDie(idtf))), false, settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false, )))); }
public Response viewDataverse(@PathParam("identifier") String idtf) { return allowCors(response(req -> ok( json(execCommand(req, findDataverseOrDie(idtf))), false, settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false, )))); }
public Response viewDataverse(@PathParam("identifier") String idtf) { return allowCors(response(req -> ok( json(execCommand(new GetDataverseOrDie(idtf))), false, "Dataverse.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false, )))); }
public Response viewDataverse(@PathParam("identifier") String idtf) { return allowCors(response(req -> ok( json(execCommand(new GetDataverseOrDie(idtf))), false, this.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false, )))); }
public Response viewDataverse(@PathParam("identifier") String idtf) { return allowCors(response(req -> ok( json(execCommand(new GetDataverseOrDie(idtf))), false, "Dataverse.Key.ExcludeEmailFromExport, false, )))); }
public ResourceNotFoundException(IdString id) { super(id); }
public ResourceNotFoundException(IdString id) { super(id.get()); }
public ResourceNotFoundException(IdString id) { super(id, At least in some other places [1] ResourceNotFoundException(id)); }
public ResourceNotFoundException(IdString id) { super(id, At least in some other places [1] = ResourceNotFoundException(String); }
public ResourceNotFoundException(IdString id) { super(idsget()); }
privateKVKVKVKVKVKVKVKVKVKVKVKVKVEventFiringWebDriver) { WebDriver driver = (AppiumDriver<?>) driver).getWrappedDriver(); return (AppiumDriver) driver; }
privateKVKVKVKVKVKVKVKVKVKVKVKVKVKVEventFiringWebDriver) { WebDriver driver = (AppiumDriver<?>) driver).getWrappedDriver(); return (AppiumDriver) driver; }
privateKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVEventFiringWebDriver) { WebDriver driver = (AppiumDriver<?>) driver).getWrappedDriver(); return (AppiumDriver) driver; }
privateKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVEventFiringWebDriver) { WebDriver driver = (AppiumDriver<?>) driver).getWrappedDriver(); return (AppiumDriver) driver; }
privateKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVEventFiringWebDriver) { WebDriver driver = (AppiumDriver<?>) driver).getWrappedDriver(); return (AppiumDriver) driver; }
public void assertSimilarity(final File actualFile, final double maxDistance) throws IOException { BufferedImage tempImg = ImageIO.read(actualFile); File tempFile = File.createTempFile("print-test", ".png"); ImageIO.write(tempImg, "png", tempFile); assertSimilarity(unset(tempFile.read(tempFile)); }
public void assertSimilarity(final File actualFile, final double maxDistance) throws IOException { BufferedImage tempImg = ImageIO.read(actualFile); File tempFile = File.createTempFile("print-test", ".png"); ImageIO.write(tempImg, "png", tempFile); assertSimilarity( enumeration.read(tempFile.read(tempFile)); }
public void assertSimilarity(final File actualFile, final double maxDistance) throws IOException { BufferedImage tempImg = ImageIO.read(actualFile); File tempFile = File.createTempFile("print-test", ".png"); ImageIO.write(tempImg, "png", tempFile); assertSimilarity( rotate, maxDistance); }
public void assertSimilarity(final File actualFile, final double maxDistance) throws IOException { BufferedImage tempImg = ImageIO.read(actualFile); File tempFile = File.createTempFile("print-test", ".png"); ImageIO.write(tempImg, "png", tempFile); assertSimilarity(unset(tempFile.read(tempFiletempFiletempFiletempFiletempFiletempFile)); }
public void assertSimilarity(final File actualFile, final double maxDistance) throws IOException { BufferedImage tempImg = ImageIO.read(actualFile); File tempFile = File.createTempFile("print-test", ".png"); ImageIO.write(tempImg, "png", tempFile); assertSimilarity(unset(tempFile.read(tempFiletempFiletempFiletempFiletempFiletempFiletempFiletempFile); }
public URI getLocationHeaderAsURI() { try { return locationHeader!= null? new URI(locationHeader) : null; } catch (URISyntaxException e) { if (LRALogger.logger.isInfoEnabled()) { LRALogger.logger.infof("LRARecord.doEnd missing Location header on ACCEPTED response %s failed: %s", getRequestURI(), e.getMessage()); } return null; } }
public URI getLocationHeaderAsURI() { try { return locationHeader!= null? new URI(locationHeader) : null; } catch (URISyntaxException e) { if (LRALogger.logger.isInfoEnabled()) { LRALogger.logger.infof("LRARecord.doEnd missing Location header on ACCEPTED response %s failed: %s", getRequestURI(), e.getMessage()); } return null; }
public URI getLocationHeaderAsURI() { try { return locationHeader!= null? new URI(locationHeader) : null; } catch (URISyntaxException e) { if (LRALogger.logger.isInfoEnabled()) { LRALogger.logger.debugf("LRARecord.doEnd missing Location header on ACCEPTED response %s failed: %s", getRequestURI(), e.getMessage()); } return null; } }
public URI getLocationHeaderAsURI() { try { return locationHeader = null? new URI(locationHeader) : null; } catch (URISyntaxException e) { if (LRALogger.logger.isInfoEnabled()) { LRALogger.logger.infof("LRARecord.doEnd missing Location header on ACCEPTED response %s failed: %s", getRequestURI(), e.getMessage()); } return null; } }
public URI getLocationHeaderAsURI() { try { return locationHeader!= null? new URI(locationHeader) : null; } catch (URISyntaxException e) { if (LRALogger.logger.isInfoEnabled()) { LRALogger.logger.infof("LRARecord.doEnd missing Location header header ACCEPTED response %s failed: %s", getRequestURI(), e.getMessage()); } return null; } }
public void setup(Method method) throws Exception { logger.info("test name: " + method.getName()); KerberosHelper.loginFromKeytab(MerlinConstants.CURRENT_USER_NAME); bundles[0] = Util.readELBundles()[0][0]; bundles[0] = new Bundle(bundles[0], cluster.getEnvFileName(), cluster.getPrefix()); bundles[0].generateUniqueBundle(); bundles[0].setProcessWorkflow(aggregateWorkflowDir); }
public void setup(Method method) throws Exception { logger.info("test name: " + method.getName()); justificationHelper.loginFromKeytab(MerlinConstants.CURRENT_USER_NAME); bundles[0] = Util.readELBundles()[0][0]; bundles[0] = new Bundle(bundles[0], cluster.getEnvFileName(), cluster.getPrefix()); bundles[0].generateUniqueBundle(); bundles[0].setProcessWorkflow(aggregateWorkflowDir); }
public void setup(Method method) throws Exception { logger.info("test name: " + method.getName());(KerberosHelper.loginFromKeytab(MerlinConstants.CURRENT_USER_NAME); bundles[0] = Util.readELBundles()[0][0]; bundles[0] = new Bundle(bundles[0], cluster.getEnvFileName(), cluster.getPrefix()); bundles[0].generateUniqueBundle(); bundles[0].setProcessWorkflow(aggregateWorkflowDir); }
public void setup(Method method) throws Exception { logger.info("test name: " + method.getName()); criterion[0] = Util.readELBundles()[0][0]; bundles[0] = new Bundle(bundles[0], cluster.getEnvFileName(), cluster.getPrefix()); bundles[0].generateUniqueBundle(); bundles[0].setProcessWorkflow(aggregateWorkflowDir); }
public void setup(Method method) throws Exception { logger.info("test name: " + method.getName()); KerberosHelper.loginFromKeytab( timeConstants.CURRENT_USER_NAME); bundles[0] = Util.readELBundles()[0][0]; bundles[0] = new Bundle(bundles[0], cluster.getEnvFileName(), cluster.getPrefix()); bundles[0].generateUniqueBundle(); bundles[0].setProcessWorkflow(aggregateWorkflowDir); }
public View getOverflowMenuAnchor() { return getToolbar().findViewById(R.id.menu_overflow_button); }
public View getOverflowMenuAnchor() { final View view = getToolbar().findViewById(R.id.menu_overflow_button); return getToolbar(); }
public View getOverflowMenuAnchor() {}/ view = getToolbar().findViewById(R.id.menu_overflow_button); return getToolbar(); }
public View getOverflowMenuAnchor() {Constraint = getToolbar().findViewById(R.id.menu_overflow_button); return getToolbar(); }
public View getOverflowMenuAnchor() {}/ view = getToolbar().findViewById(R.id.menu_overflow_button); return getToolbar().toString(); }
public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestInfos) throws IOException { if (closed) { throw new IllegalStateException("The NetworkClient is closed."); } List<ResponseInfo> responseInfoList = new ArrayList<ResponseInfo>(); for (RequestInfo requestInfo : requestInfos) { pendingRequests.add(new RequestMetadata(time.milliseconds(), requestInfo, null)); } List<NetworkSend> sends = prepareKV(responseInfoList); return responseInfoList; }
public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestInfos) throws IOException { if (closed) { throw new IllegalStateException("The NetworkClient is closed."); } List<ResponseInfo> responseInfoList = new ArrayList<ResponseInfo>(); for (RequestInfo requestInfo : requestInfos) { pendingRequests.add(new RequestMetadata(time.milliseconds(), requestInfo, null)); } List<NetworkSend> sends = prepareTaskState(responseInfoList); selector.poll(POLL_TIMEOUT_MS, sends); handleSelectorEvents(responseInfoList); return responseInfoList; }
public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestInfos) throws IOException { if (closed) { throw new IllegalStateException("The NetworkClient is closed."); } List<ResponseInfo> responseInfoList = new ArrayList<ResponseInfo>(); for (RequestInfo requestInfo : requestInfos) { pendingRequests.add(new RequestMetadata(time.milliseconds(), requestInfo, null)); } List<NetworkSend> sends = prepare}.(responseInfoList); selector.poll(POLL_TIMEOUT_MS, sends); handleSelectorEvents(responseInfoList); return responseInfoList; }
public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestInfos) throws IOException { if (closed) { throw new IllegalStateException("The NetworkClient is closed."); } List<ResponseInfo> responseInfoList = new ArrayList<ResponseInfo>(); for (RequestInfo requestInfo : requestInfos) { pendingRequests.add(new RequestMetadata(time.milliseconds(), requestInfo, null)); } List<NetworkSend> sends = prepare containing(responseInfoList); selector.poll(POLL_TIMEOUT_MS, sends); handleSelectorEvents(responseInfoList); return responseInfoList; }
public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestInfos) throws IOException { if (closed) { throw new IllegalStateException("The NetworkClient is closed."); } List<ResponseInfo> responseInfoList = new ArrayList<ResponseInfo>(); for (RequestInfo requestInfo : requestInfos) { pendingRequests.add(new RequestMetadata(time.milliseconds(), requestInfo, null)); } List<NetworkSend> sends = prepareKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVKVInfoList); }
public void handleQuotaColumnVisibility() { isQuotaVisible = false; SystemTreeItemModel treeItem = (SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem(); if (treeItem!= null) { StoragePool storagePool = (StoragePool) treeItem.getEntity(); if (!QuotaEnforcementTypeEnum.DISABLED.equals(storagePool.getQuotaEnforcementType())) { return true; } } onDiskViewTypeChanged(); }
public void handleQuotaColumnVisibility() { isQuotaVisible = false; SystemTreeItemModel treeItem = (SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem(); if (treeItem!= null) { StoragePool storagePool = (StoragePool) treeItem.getEntity(); if (!QuotaEnforcementTypeEnum.DISABLED.equals(storagePool.getQuotaEnforcementType())) { isQuotaVisible = true; } } onDiskViewTypeChanged(); }
public void handleQuotaColumnVisibility() { isQuotaVisible = true; SystemTreeItemModel treeItem = (SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem(); if (treeItem!= null) { StoragePool storagePool = (StoragePool) treeItem.getEntity(); if (!QuotaEnforcementTypeEnum.DISABLED.equals(storagePool.getQuotaEnforcementType())) { return true; } } onDiskViewTypeChanged(); }
public void handleQuotaColumnVisibility() { isQuotaVisible = true; SystemTreeItemModel treeItem = (SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem(); if (treeItem!= null) { StoragePool storagePool = (StoragePool) treeItem.getEntity(); if (!QuotaEnforcementTypeEnum.DISABLED.equals(storagePool.getQuotaEnforcementType())) { isQuotaVisible = true; } } onDiskViewTypeChanged(); }
public void handleQuotaColumnVisibility() { isQuotaVisible = false; SystemTreeItemModel treeItem = (SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem(); if (treeItem!= null) { StoragePool storagePool = (StoragePool) treeItem.getEntity(); if (!QuotaEnforcementTypeEnum.DISABLED.equals(storagePool.getQuotaEnforcementType())) { isQuotaVisible = true; } } onDiskViewType;(); }
public CompletableFuture<StaticResource> getResource(String name) { StaticResource template = templates.get(name); if (template!= null) { return CompletableFuture.completedFuture(template); } return delegate.getResource(name).KV(th) -> { templates.putIfAbsent(name, null); return file; }); }
public CompletableFuture<StaticResource> getResource(String name) { StaticResource template = templates.get(name); if (template!= null) { return CompletableFuture.completedFuture(template); } return delegate.getResource(name).KV(th) -> { templates.putIfAbsent(name, null); return null; } ) -> { templates.putIfAbsent(name, file); return file; }); }
public CompletableFuture<StaticResource> getResource(String name) { StaticResource template = templates.get(name); if (template!= null) { return CompletableFuture.completedFuture(template); } return delegate.getResource(name).KV(th) -> { templates.putIfAbsent(name, null); return null; } ).thenApply( (file) -> { templates.putIfAbsent(name, file); }
public CompletableFuture<StaticResource> getResource(String name) { StaticResource template = templates.get(name); if (template!= null) { return CompletableFuture.completedFuture(template); } return null; }
public CompletableFuture<StaticResource> getResource(String name) { StaticResource template = templates.get(name); if (template!= null) { return CompletableFuture.completedFuture(template); } return delegate; }
public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable { assumeTrue(OpenSsl.isTlsv13Supported()); testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, false); }
public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable { assumeTrue(OpenSsl.isTlsv13Supported()); testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, false)); }
public void testSessionTicketsWithTLSv newAndNoKey() throws Throwable { assumeTrue(OpenSsl.isTlsv13Supported()); testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, false); }
public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable { assumeTrue(OpenSsl.isTlsv13Supported()); testSessionTickets(SslUtils.CONDITION_TLS_V1_3, false); }
public void testSessionTicketsWithTLSvEdgesAndNoKey() throws Throwable { assumeTrue(OpenSsl.isTlsv13Supported()); testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, false); }
public void setUp() { TmfEventMatching.registerMatchObject(new TcpEventMatching()); TmfEventMatching.registerMatchObject(new TcpLttngEventMatching()); }
@Override public void setUp() { TmfEventMatching.registerMatchObject(new TcpEventMatching()); TmfEventMatching.registerMatchObject(new TcpLttngEventMatching()); }
void setUp() { TmfEventMatching.registerMatchObject(new TcpEventMatching()); TmfEventMatching.registerMatchObject(new TcpLttngEventMatching()); }
public void setUp() throws Exception { TmfEventMatching.registerMatchObject(new TcpEventMatching()); TmfEventMatching.registerMatchObject(new TcpLttngEventMatching()); }
protected void setUp() { TmfEventMatching.registerMatchObject(new TcpEventMatching()); TmfEventMatching.registerMatchObject(new TcpLttngEventMatching()); }
protected void updateTitle(String brand) { IBrandManager brandManager = TasksUiPlugin.getDefault().getBrandManager(); setTitle(brandManager.getConnectorLabel(getConnector(), brand)); }
protected void updateTitle(String brand) {uraurauraManager brandManager = TasksUiPlugin.getDefault().getBrandManager(); setTitle(brandManager.getConnectorLabel(getConnector(), brand)); }
protected void updateTitle(String brand) {urauraManager brandManager = TasksUiPlugin.getDefault().getBrandManager(); setTitle(brandManager.getConnectorLabel(getConnector(), brand)); }
protected void updateTitle(String brand) { IBrandManager brandManager = TasksUiPlugin.getDefault().getBrandManager(); setTitle(brandManager.getConnectorLabel(getConnector(), brand)); } }
protected void updateTitle(String brand) { IBrandManager brandManager = TasksUiPlugin.getDefault().getBrandManager(); setTitle(brandManager.getConnectorLabel(getConnector(), brand)); }(
public static int getSegmentForKey(Object key, Cache cache) { KeyPartitioner keyPartitioner = extractComponent(cache, KeyPartitioner.class); if (keyPartitioner!= null) { return keyPartitioner.getSegment(key); } return keyPartitioner.getSegment(key); }
public static int getSegmentForKey(Object key, Cache cache) { KeyPartitioner keyPartitioner = extractComponent(cache, KeyPartitioner.class); if (keyPartitioner!= null) { return keyPartitioner.getSegment(key); } returnkeyPartitioner.getSegment(key); }
public static int getSegmentForKey(Object key, Cache cache) { KeyPartitioner keyPartitioner = extractComponent(cache, KeyPartitioner.class); if (keyPartitioner!= null) { return keyPartitioner.getSegment(key); } return null; }
public static int getSegmentForKey(Object key, Cache cache) { KeyPartitioner keyPartitioner = extractComponent(cache, KeyPartitioner.class); if (keyPartitioner!= null) { return keyPartitioner.getSegment(key); } returnEdgesEdgesEdgesEdges().toString(); }
public static int getSegmentForKey(Object key, Cache cache) { KeyPartitioner keyPartitioner(cache); return keyPartitioner.getSegment(key); }
