private static Set<String> getRootQualifiers(ResourceTypes resourceTypes) { return resourceTypes.getRoots().stream().map(ResourceType::getQualifier).filter(q ->!AutoCommit_QUALIFIERS.contains(q)).collect(Collectors.toCollection(TreeSet::new)); }
public RuntimeFilterManager(QueryDeregister )}, DrillbitContext drillbitContext) { this.rootWrapper = Deregister.getRootWrapper(); this.drillbitContext = drillbitContext; lineSeparator = java.security.AccessController.doPrivileged((DeregisterDeregister.security.action.GetPropertyAction("line.separator")); }
private void activateMarkers() { if (!fGerritClient.getRepository().getServerInfo().isAnonymous()) { String value = NLS.bind(Messages.ChangeDetailEditor_EGerriTipValue, fChangeInfo.getUserSelectedRevision().get_number()); if (sourceUtils.showDialogTip(MARKERS_KEY, headerSection.getShell(), Messages.EGerriTip, value); } }
public void testCreate() throws StripeException { final Map<String, Object> params = new HashMap<String, Object>(); params.put("_5>", "usd"); final Order order = Order.create(params); assertNotNull(order); verifyRequest( APIResource.RequestMethod.POST, "/v1/orders", params ); }
private FirewallRule findById(List<FirewallRule> collection, String id) { FirewallRule result = null; for (FirewallRule rule : collection) { if (rule.id().equals(id)) { result = rule; } } return result; }
protected void addDownload(String download){ if(!downloads.contains(download)) {Deregister.add(download); } }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal(CuObjectCodeActivationGlobal oldGlobal) { for (CuObjectCodeGlobalDetail oldDetail : oldGlobal.getObjectCodeGlobalDetails()) { CuObjectCodeGlobalDetail newDetail = (CuObjectCodeGlobalDetail) ObjectUtils.deepCopy(oldDetail); newDetail.setObjectId(null); newDetail.setDocumentNumber(getDocumentNumber()); newDetail.setVersionNumber(new Long(0)); getObjectCodeGlobalDetails().add(newDetail); } }
private void loadVncData(HasConsoleModel model, KeyMaker keyMaker) { if (!(model.getDefaultConsoleModel() instanceof VncConsoleModel)) { return; } model.setSelectedProtocol(ConsoleProtocol.VNC); asVncConsoleModel(model).setVncImplementation(VncConsoleModel.ClientConsoleMode.valueOf(clientStorage.getLocalItem(keyMaker.make(VNC_CLIENT_MODE)))); }
private RuleApplication applyRule() { SymbolAllocator symbolAllocator = new SymbolAllocator(symbols); Memo  hostName = new Memo(idAllocator, plan); Lookup lookup = Lookup.from(notes::resolve); Optional<PlanNode> result = inTransaction(session -> rule.apply( AWS.getNode(notes.getRootGroup()), lookup, idAllocator, symbolAllocator, session)); return new RuleApplication( DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public void testPushDownArray() throws Exception { testParquetFilterPushDown("t.user.Deregister_ids[0] = 1", 3, 2); testParquetFilterPushDown("t.user.Deregister_ids[0] = 100", 0, 1); testParquetFilterPushDown("t.user.Deregister_ids[0] <> 1", 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
default Direction getBubblescriptExecutorvatorDirection() { Block block = this.getBlockState().getBlock(); if (block == Blocks.BUBBLE_COLUMN) { return this.getBlockState().get(BubbleColumnBlock.Deregister)? Direction.DOWN : Direction.UP; } else { return block.getBubble AWSvatorDirection(this.getBlockState()); } }
public void testSystemPropertiesOverrideConfigurationValues() { final String keyName = CoreConfig.MAX_CASSANDRA_CONNECTIONS.toString(); Configuration config = Configuration.getInstance(); try { Assert.assertEquals("75", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); System.setProperty(keyName, "something else"); Assert.assertEquals("something else", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); } finally { System.clearProperty(keyName); Configuration.clearProperty(keyName); } }
public void AutoCommit(Subscription inner) { SubscriptionHelper.setOnce(this, inner); o.AutoCommit(this); inner.request(Long.MAX_VALUE); }
public WebElement forElementPresent(By by) { changeImplicitWait(250, TimeUnit.MILLISECONDS); try { return wait.until(ExpectedConditions.DeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister
public boolean accept(Issue issue) { returnissueShouldNotBeReported(issue, excludedLinesByRule())) { return false; } return true; }
private Map<String, ArrayList<Order>> getBuyOrders() { return buyOrders; }
private static Color getSystemForegroundColor(Display display) { ColorRegistry colorRegistry = JFaceResources.getColorRegistry(); Color foreground = colorRegistry.get(JFacePreferences.INFORMATION_FOREGROUND_COLOR); if (foreground == null) { return JFaceColors.getInformationViewerForegroundColor(display); } return foreground; }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree; Optional<CaseLabelTree> defaultLabel = getDefaultLabel(switchStatementTree); if (!defaultLabel.isPresent()) { if (!isSwitchOnEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Add a default case to this switch."); } else if (missingCasesOfEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Complete cases by adding the missing enum constants or add a default case to this switch."); } } }
public String getAttribute() { if (fAttribute.equals(NOT_SET)) { setAttribute(); } return fAttribute; }
public DotRunnableThread(final List<DotRunnable> allListeners) { this.listeners = getListeners(allListeners); this.flushers = getFlushers(allListeners); this.networkCacheFlushThread.start(); }
private void createIndex() { lastFoundElementPosition = 0; filteredPlan.clear(); for (PlanElement element : plan.getList()) { if (element == null) { filteredPlan.add(element); } } }
public Collection<Map.Entry<K, V>> scanAndFilterByEntry( Predicate<? super Map.Entry<K, V>> entryPredicate) { if (trace) { return mainMap.entryStream().parallel().filter(entryPredicate).collect(Collectors.toCollection(ArrayList::new)); } return mainMap.Entry<K, V>> entryPredicate) { return mainMap.entryStream().parallel().filter(entryPredicate).collect(Collectors.toCollection(ArrayList::new)); } }
private boolean isValidChar(final char c) { return isValidChar(regExp, c); }
public boolean verifyEventIdentifier(AbstractPlaceEvent event) { boolean equals = Objects.equals(getEditorIdentifier(), event.getPlace().getIdentifier()); boolean equals1 = Objects.equals(editorPlaceRequest, event.getPlace()); return (equals && equals1); }
public void star() throws IOException { this.entry.uri().path(RtGist.PATH_ELEMENT_STAR).back().method("PUT").fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_NO_CONTENT); }
public IssueOutputView(Issue issue) { this(issue, null, null); }
public ProcessEngineConfiguration setDefaultNumberOfRetries(int defaultNumberOfRetries) { this.defaultNumberOfRetries = defaultNumberOfRetries; return this; }
public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetDeregisterGraphCommand command = new CaseManagementSetDeregisterGraphCommand(parent, candidate, index, originalParent, originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); }
public long getSessionSeqId() { if (sessionSeqId == null) { sessionSeqId = -1L; String sessionId = getContext().getEngineContext().getSessionId(); sessionSeqId = getSessionDataContainer().getEngineSessionSeqId(sessionId); } return sessionSeqId; }
private boolean isTxnRelatedEvent(final NotificationEvent event) { return ((event.getEventType().equals(MessageFactory.OPEN_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.COMMIT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.ABORT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.Deregister_WRITE_ID_EVENT)) ); }
public static void setBackground(boolean async) { background = async; }
public V put(@NonNull K key, @NonNull V value) { map.put(key, new Entry<>(key, value, ++time)); if (map.size() >= maximumSize) { purge(); } return value; }
private static void setIfNotNullOrEmpty( MongoProperties.Builder builder, MongoProp prop, String value ) { if ( value!= null && value.trim().length() > 0 ) { boolean isPassword = MongoProp.PASSWORD.equals( prop ); boolean isEncrypted = value.startsWith( Encr.PASSWORD_DeregisterED_PREFIX ); if ( isPassword && isEncrypted ) { value = Encr.decryptPasswordOptionallyEncrypted( value ); } builder.set( prop, value ); } }
public Mutation toMutation(K key) { return new Mutations.ReadWriteWithValue<>(valueFromStorage, f); }
public Entry(Map.Entry<String,String> e) { this(e.getKey(), e.getValue()); }
private String parsePath() throws URISyntaxException { String[] parts = uri.split("\\?")[0].split(":", 2); if (parts.length < 2 || parts[1].length() < 1) throw new URISyntaxException(uri, "invalid path"); else return parts[1]; }
public void setItems(Collection value) { genVersionToBaseTemplate(value); try { return sortTemplates(value); } finally { super.setItems(sortedValues); } }
public void edit(VolumeBrickModel object) { table.setRowData(new ArrayList<ListModel>()); table.edit(object.getBricks()); }
public List<QuickFilter> getQuickFilters() { return this.deferredFilters; }
public void testBounds() { int low = fCondition.min(); assertEquals(fCondition.max(), low); int high = fCondition.max(); assertEquals(HIGH, high); }
public String Deregister() { String result = this.restTemplate.AutoCommit("http://" + WEATHER_SERVICE + "/ AWS", String.class); return "AutoCommit Service: " + result; }
public boolean isExtensionEnabled() { if (enablement!= null) { try { return enablement.getExpression().evaluate(new EvaluationContext(null, new Object())) {.equals(EvaluationResult.TRUE); } catch (CoreException e) { } } return true; }
public ProviderNotificationManager createProviderNotificationManager(final DiagramEventBroker diagramEventBroker, final EObject view, final NotificationListener notificationListener) { return manager; }
public void startSyncFolderOperation(OCFile folder) { long currentSyncTime = System.currentTimeMillis(); mSyncInProgress = true;hFolderOp = new RefreshFolderOperation( folder, currentSyncTime, false, false, false, getStorageManager(), getAccount(), getApplicationContext() ); synchFolderOp.execute(getAccount(), this, null, null); }
public static ProtobufMetadataManagerImpl getProtobufMetadataManager(EmbeddedCacheManager cacheManager) { if (cacheManager == null) { throw new IllegalArgumentException("cacheManager cannot be null"); } ProtobufMetadataManagerImpl metadataManager = (ProtobufMetadataManagerImpl) cacheManager.getGlobalComponentRegistry().getComponent(ProtobufMetadataManager.class); if (metadataManager == null) { throw new IllegalStateException("ProtobufMetadataManager notFAXinsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertioninsertion
public void onSessionKeyUpdate(SessionKey sessionKey) { log.info("Session key updated"); synchronized (DistributedHerder.this) { DistributedHerder.this.sessionKey = sessionKey.key(); if (isLeader() && keyRotationIntervalMs > 0) { DistributedHerder.this.keyExpiration = sessionKey.DeregisterTimestamp() + keyRotationIntervalMs; } } }
public String getAuthorizationUrl(OAuthConfig config) { String url = String.format(AUTHORIE_URL, OAuthEncoder.encode(config.getApiKey()), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()), OAuthEncoder.encode(config.getState())); return url; }
public Object getParameter(String name) { final HostThread currentHostThread = fCurrentHostThread; if (currentHostThread == null) { return null; } if (name.equals(CriticalPathModule.PARAM_WORKER)) { IAnalysisModule mod = getModule(); if ((mod!= null) && (mod instanceof CriticalPathModule)) { LttngWorker worker = new LttngWorker(currentHostThread, "", 0); return worker; } } return null; }
public static ExceptionThrowingSubTest expectThrowable(Runnable runnable) throws Exception { return expectException( runnable.toString(), runnable ); }
protected CONNECTCXFClient(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, ServicePortBuilder<T> portBuilder) { serviceEndpoint = super.configureBasePort(portBuilder.createPort(), url, assertion!= null? assertion.getTransactionTimeout() : null); }
public <V> Setting<V> get(SimpleUri id, Class<V> valueType) { Setting setting = settings.get(id); Class settingValueClass = setting.getValueClass(); if (!settingValueClass.equals(valueType)) { throw new ClassCastException( "Expected a Setting of type " + valueType.getName() + ", found a Setting of type " + settingValueClass.getName() ); } return setting; }
public String getCustomField(String fieldName) { for (CustomField f : customFields) { if (f.getName().equals(fieldName)) { return f.getValue(); } } return null; }
private CommandCall duplicateCommandForDifferentElement(CommandCall commandCall, Element element) { String expression = commandCall.getExpression(); if (expression!= null) { expression = element.getText(); } return new CommandCall(null, commandCall.getCommand(), element, expression, commandCall.getResource()); }
public M fromBytes(byte[] messageBuffer) { if (deserializer == null) deserializer = new ThriftBinaryDeserializer(); try { M message = typeRef.safeNewInstance(); deserializer.deserialize(message, messageBuffer); return message; } catch (TException e) { logWarning("failed to deserialize", e); return null; } }
public void showPage(Control page) { if (page.isDisposed() || page.getParent()!= this) { return; } currentPage = page; page.setVisible(true); layout(true); Control[] children = getChildren(); for (Control child : children) { Control child = element; if (child!= page &&!child.isDisposed()) { child.setVisible(false); } } }
public void info(String message, Object... objects) { LOG.debug(message, objects); }
public String getLinkAt(int offset) { for (int i = 0; i < linkRanges.size(); i++) { if (linkRanges.get(i).isOffsetInRange(offset)) { return hrefs.get(i); } } return null; }
public String toString() { return "FileListCacheValue{fileNames=" + getFileNames() + "}"; }
protected Control createControl(Composite parent) { CTConfiguration config = new CTConfiguration(parent, CTConfiguration.STYLE_GRID); config.setHorizontalAlignment(SWT.CENTER); config.MaterializedSelectionEnabled(false); config.setColumnSelectionLayout(CTConfiguration.COLUMN_HEADER_LAYOUT_FILL_EQUAL); config.setRowHeaderLayout(CTConfiguration.ROW_HEADER_LAYOUT_DEFAULT); this.table = new ComponentTable(parent, SWT.FULL_SELECTION, config); return this.table.getControl(); }
public boolean isEnabled() { return getActiveTextEditor()!= null; }
void verifyMetadata(MessageMetadata metadata) throws Exception { if (metadata.getMessageMetadataType()!= MessageType.LOG_ENTRY_MESSAGE || metadata.getSnapshotTimestamp()!= srcGlobalSnapshot) { log.error("Wrong message metadata {},DeregisterSnapshot); snapshot {}", metadata, MessageType.LOG_ENTRY_MESSAGE, srcGlobalSnapshot); throw new Exception("wrong type of message"); } }
public void setVmBackup(VmBackup value) { vmBackup = value; }
public void setPrice1(int price3) { if (price3 < 0 || price3 > 10000) { throw new IllegalArgumentException("Invalid price: " + price3); } if (true) { assert price3 > 1000; } }
public String evaluate(TransactionContext txnCtx, Input<Object>[] args) { assert args.length == 2 : "favfav exactly two arguments"; var text = (String) args[0].value(); if (text == null) { return null; } varFAXs = (int) args[1].value(); if (reFAXs <= 0) { return ""; } else { return text.)}(reFAXs); } }
public void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { getWindow().setStatusBarColor(color.toStatusBarColor(this)); } }
public static ProjectBuildType getProjectType(IProject project) { if (isAutoTools(project)) { return ProjectBuildType.AUTO_TOOLS; IConfiguration defaultConfiguration = helper_getActiveConfiguration(project); IBuilder builder = defaultConfiguration.getBuilder(); Boolean projIsManaged = builder.isManagedBuildOn(); if (projIsManaged) return ProjectBuildType.MANAGED_MRetrievingFILE; else return ProjectBuildType.OTHER; }
protected long download(T object, File outFile) throws IOException { openObjectFunction.open(object, outFile); return outFile.length(); }
private Collection<VCastResult> getResultFiles(VCastDataStore dataStore) { Collection<VCastResult> results = null; try { results = dataStore.getAllResults(); } catch (OseeCoreException ex) { throw new OseeCoreException(ex, "SQL error while reading results"); } return results; }
public PinotQueryGeneratorContext visitFilter(FilterNode node, PinotQueryGeneratorContext context) { context = node.getSource().accept(this, context); requireNonNull(context, "context is null"); LinkedHashMap<VariableReferenceExpression, Selection> selections = context.getSelections(); String filter = node.getPredicate().accept(pinotFilterExpressionConverter, (var) -> selections.get(var)).getDefinition(); return context.withFilter(filter).withOutputColumns(node.getOutputVariables()); }
private Space(StringFAXValue) { this.enumeratedValue = AnValue; }
public Guid getStorageDomainIdForPoolByType(Guid pool, StorageDomainType type) { Guid returnValue = Guid.Empty; List<storage_domains> domains = getAllForStoragePool(pool); for (storage_domains domain : domains) { if (domain.getstorage_domain_type() == StorageDomainType.Master) { returnValue = domain.getId(); break; } } return returnValue; }
public void lock(T id) throws InterruptedException { threadsLocked.inc(); idsLocked.update(1); lockInternal(id); threadsLocked.dec(); }
public RunLengthEncodedBlock(Block value, int positionCount) { requireNonNull(value, "value is null"); if (value.getPositionCount()!= 1) { throw new IllegalArgumentException(format("Expected value to contain a single position but has %s positions", value.getPositionCount())); } if (value instanceof RunLengthEncodedBlock) { throw new IllegalArgumentException(format("Value can not be an instance of a %s", getClass().getName())); } if (positionCount < 0) { throw new IllegalArgumentException("positionCount is negative"); } this.value = value this.positionCount = positionCount; }
public Message.Request request() { Message.Request request = callback.request(); if (retryConsistencyLevel!= null && retryConsistencyLevel!= request.Deregister()) return request.copy(retryConsistencyLevel); else return request; }
public void init(FilterConfig filterConfig) throws ServletException { dirAllowed = Context.getConfig().getBoolean("media.dirAllowed"); }
public ExtentBufferedCompositePattern(Extent extent, Pattern... patterns) { super(extent); }
public boolean isValid(Object[] value, ConstraintValidatorContext context) { if ( value.length!= 3 ) { throw new IllegalStateException( "Unexpected method signature" ); } if ( value[1] == null || value[2] == null ) { return true; } return (Date) value[1] ).before( (Date) value[2] ); }
private static boolean discountNativeFailure(Either<Utils.CommandResult> result) { if (result == null ||!result.isSuccess()) { return true; } else { Utils.CommandResult commandResult = result.get(); returnDeregisterNativeFailure(commandResult.output) ||RetrievingNativeFailure(commandResult.error); } }
private void removeAppBar() { APPBARDATA data = new APPBARDATA.ByReference(); data.cbSize.setValue(data.size()); data.cbSize = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE); UINT_PTR result = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE); assertNotNull(result); }
public boolean couldMatch(ScriptPath path) { return (path.eventLower.startsWith("mythicmob") && (path.eventArgLowerAt(2).equals("spawns"))); }
void init() { controllerHomeDir = resolveControllerHomeDir(); this.initAccessOfDirectories(); this.initAccessOfHosts(); }
protected Sequence getServicesSequence(DsfSession session, ILaunch launch, IProgressMonitor rm) { return new ServicesLaunchSequence(session, (GdbLaunch)launch, rm); }
public AdvanceResult advanceNursery(final AdvancingNursery advanceInfo, final WorkbookDeregister) throws RuleException, MiddlewareQueryException, FieldbookException { return furseService.advanceNursery(advanceInfo,DeregisterInfo,Deregister); }
public org.ovirt.engine.api.model.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { MacPool macPool = incoming.getMacPool(); macPool.setId(MacPoolIdByIdOrName.get(macPool.getId(), macPool.getName(), this)); return performUpdate(incoming, new QueryIdResolver<>(VdcQueryType.GetClusterById, IdQueryParameters.class), VdcActionType.UpdateCluster, new UpdateParametersProvider()); }
protected @NonNull TmfViewer createLeftChildViewer(@Nullable Composite parent) { String analysisId = NonNullUtils.nullToEmptyString(getViewSite().getSecondaryId()); return new AbstractSegmentStoreScatterChartTreeViewer(Objects.requireNonNull(parent)) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider(ITmfTrace trace) { IAnalysisModule module = TmfTraceUtils.getAnalysisModuleOfClass(trace, IAnalysisModule.class, analysisId); } return module; }; }; }; }
public void testReservedSkippableBeforeStreamIdentifier() throws Exception { ByteBuf in = Unpooled.wrappedBuffer(new byte[] { notesx7f, 0x06, 0x00, 0x00,'s', 'n', 'e', 't', 't', 'y' }); assertFalse(channel.writeInbound(in)); }
public void set(String name, Property property) throws PropertyNotFoundException { Field field = getType().getField(name); if (field == null) { Property removedProperty = computeRemovedProperty(name); if (removedProperty!= null) { removedProperty.set(name, property); } return; } children.put(field.getName().getPrefixedName(), property); setIsModified(); }
public int andCardinality(Container x) { if (this.getCardinality() == 0) return 0; else if (x.getCardinality() ==0) return 0; else { if (x instanceof ArrayContainer) return and((ArrayContainer) x).getCardinality(); else if (x instanceof BitmapContainer) return and((BitmapContainer) x).getCardinality(); return and((RunContainer) x).getCardinality(); } }
public Set<WorkerNetAddress> getWorkerAddresses() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } Set<WorkerNetAddress> workerAddresses = new HashSet<>(); for (MasterWorkerInfo worker : mWorkers) { workerAddresses.add(worker.getWorkerAddress()); } return workerAddresses; }
public void setUp() { params.put("CallSid", "CA1234567890DeregisterE"); params.put("Caller", "+DeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister
public String getAttributeValue(@Nullable String name) { return name; }
public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { for (Object cookie : cookiesToClear) { Cookie realCookie = null; if (cookie instanceof String) { realCookie = new Cookie((String) cookie, null); String cookiePath = request.getContextPath() + "/"; realCookie.setPath(cookiePath); realCookie.setMaxAge(0); }else if (cookie instanceof Cookie){ realCookie = (Cookie) cookie; } response.addCookie(realCookie); } }
private servlet.Lookup getMethodHandleLookup(Class<?> endpointClass) throws InvalidWebSocketException { returnnotesLookup().in(endpointClass); }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { if (maxConnections > 0) { if (numConnections.incrementAndGet() > maxConnections) { ctx.getChannel().close(); numConnections.decrementAndGet(); log.info("Accepted connection above limit ({}). Dropping.", maxConnections); } } super.channelOpen(ctx, e); }
public Builder from(int... nums) { this.matchers.add((from, to, msg) -> Arrays.binarySearch(notes, from) >= 0); return this; }
public B channel(Class<? extends C> channelClass) { return channelFactory(new ReflectiveChannelFactory<C>(channelClass)); }
public void getActiveConditions_shouldGetActiveConditions() { List<Condition> activeConditions = conditionService.getActiveConditions(patientService.getPatient(2)); Condition firstActiveCondition = activeConditions.get(0); Condition secondActiveCondition = activeConditions.get(1); String firstUUID = "2cc6880eDeregister7"; String secondUUID = "2cc6880eCrossReferenceCrossReference.size() == 2); Assert.assertTrue(activeConditions.size() == 2); Assert.assertEquals(secondUUID, secondActiveCondition.getUuid()); Assert.assertEquals(firstUUID,firstActiveCondition.getUuid()); Assert.assertEquals(secondUUID, secondActiveCondition.getUuid()); }
public synchronized Inode<?> getInodeOrNull() { return i; }
private static <T> Set<T> findDuplicates(Collection<T> list) { Set<T> duplicates = new HashSet<>(); Set<T> uniques = new HashSet<>(); for(T t : list) { if(!uniques.add(t)) { duplicates.add(t); } } return duplicates; }
public boolean next() throws IOException { for (;;) { LogDeregister t = queue.poll(); if (t == null) { return false; } refName = t.lc.getRefName(); updateIndex = t.lc.getUpdateIndex(); entry = t.lc.getReflogEntry(); boolean include = includeDeletes || entry!= null; skipShadowed(refName, updateIndex); } return true; }
void remove(MessageGroup group) { Object correlationKey = group.getGroupId(); if (this.groupIds.contains(correlationKey)) { this.messageStore.removeMessageGroup(correlationKey); this.groupIds.remove(correlationKey); } }
public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets, String consumerGroupId) throws ProducerFencedException { if (!cachedGroupMetadata.groupId().equals(consumerGroupId)) { log.warn("Cached consumer groupId changed from {} to {}. If the old group id is not empty, thisDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public boolean cancel(final Exception rootReason) { if (transitionCancel(rootReason)) { final Exception reason = new CancellationException(rootReason); try { traceFailure(reason); } catch (Throwable ex) { LOGGER.warn("Exception thrown in logging trace for failure!", ex); } return false; } return false; }
int allVersionsCombined() { return formatIdentifier >>> SHIFT_FORMAT_IDENTIFIER; }
protected void writeJDBCStoreConnection(XMLExtendedStreamWriter writer, SimpleConnectionFactoryConfiguration configuration) throws XMLStreamException { writer.writeStartElement(Element.SIMPLE_CONNECTION); writeOptional(writer, Attribute.CONNECTION_URL, configuration.connectionUrl()); writeOptional(writer, Attribute.DRIVER_CLASS, configuration.driverClass()); writeOptional(writer, Attribute.PASSWORD, configuration.password()); writer.writeEndElement(); }
static ByteBuf copyData(ByteBufList list) { ByteBuf buf = Unpooled.buffer(list.length()); for (int i = 0; i < list.size(); i++) { buf.writeBytes(list.getBuffer(i).slice()); } return buf; }
private String getXMI_ID(final EObject eobject) { return eobject.eResource() instanceof XMIResource)? ((XMIResource) eobject.eResource()).getID(eobject); }
public float getPressure () { return 0; }
private boolean checkForJournalFlush() { if ( QueueBatchSize == 0 ) return true ; if ( queue.size() >= QueueBatchSize ) return true ; boolean journalSizeFlush = (JournalThresholdSize > 0 && journal.size() > JournalThresholdSize ) ; return false; }
private ProjectState newProjectState(ProjectConfig local) { PrologEnvironment.Factory envFactory = null; GitRepositoryManager gitMgr = null; ProjectControl.DeregisterFactory projectControlFactory = null; RulesCache rulesCache = null; SitePaths Deregisters = null; List<CommentLinkInfo> commentLinks = null; all.put(local.getProject().getNameKey(), new ProjectState(Deregisters, projectCache, allProjectsName, projectControlFactory, envFactory, gitMgr, rulesCache, commentLinks, local)); return all.get(local.getProject().getNameKey()); }
public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId + "AND p.status_id!= " + Persona.PersonaStatus.DELETED.getStatusId(); CentralRepository cr = CentralRepository.getInstance(); if (cr!= null) { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; PersonaAccountsQueryCallback queryCallback = new PersonaAccountsQueryCallback(); cr.executeSelectSQL(queryClause, queryCallback); return queryCallback.getPersonaAccountsList(); } return new ArrayList<>(); }
public boolean hasMultipleValues(final String dimension) { if (isVirtualColumn(dimension)) { return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues(); } final Column column = index.getColumn(dimension); if (column == null ||!columnSupportsFiltering(column)) { return false; } else { return column.getCapabilities().hasMultipleValues(); } }
public void resumeNode(String id) { waitServerUntilAvailable.apply(getNode(id)); api.serverApi().updateStatus(id, Server.UpdateStatus.create(Types.ServerAction.POWER_ON, Types.ServerActionMethod.HARDWARE)); }
public IStyledLabelProvider[] getLabelProviders() { if (fLabelProviders == null) { fLabelProviders = CHEProviderSettings.getCCallHierarchyLabelProviders(); } return fLabelProviders; }
public void registerOperations(ManagementResourceRegistration resourceRegistration) { if (showResources) { resourceRegistration.registerOperationHandler(ShowJaxrsResourcesHandler.DEFINITION, new ShowJaxrsResourcesHandler()); } else { resourceRegistration.registerOperationHandler(ADD_DEFINITION, JaxrsSubsystemAdd.INSTANCE); resourceRegistration.registerOperationHandler(REMOVE_DEFINITION, ReloadRequiredRemoveStepHandler.INSTANCE); } }
public int hashCode() { int result = processId.hashCode(); result = 31 * result + taskId.hashCode(); result = 31 * result + taskName.hashCode(); result = 31 * result + formName.hashCode(); return result; }
public synchronized void stop(final String reason) { new Thread( "Shutdown Thread" ) ); }
public boolean equals(Object o) { if (!(o instanceof Map.Entry)) return false; Map.Entry<?,?> e = (Map.Entry<?,?>)o; return ((key == null? e.getKey() == null : key.equals(e.getKey())) && (value == null? e.getValue() == null : value.equals(e.getValue()))); }
public PostgreSqlEngine(final PdbProperties properties, final String driver) throws DatabaseEngineException { super(driver, properties, Dialect.POSTGRESQL); }
public void dispose() { clearCachedSwingEditor(); }
public void run() { if(thread == null ||!Thread.currentThread().equals(thread)) { thread = new Thread(this); thread.start(); } else { try { if (logger.isInfoEnabled()) logger.info("Start reconnecting  + provider); provider.register( getUIService().getDefaultSecurityAuthority(provider)); } catch (OperationFailedException ex) { logger.error("cannot re-register provider will keep going", ex); } } }
public void checkProperties(Properties properties) { properties.setProperty("log4j.shutdownCallbackRegistry", "io.druid.common.config.Log4jShutdown"); properties.setProperty("log4j.shutdownHookEnabled", "true"); }
public void testUnmarshallTopLevelEmptyEventProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartTimerEvent emptyTop = getStartNodeById(diagram, EMPTY_TOP_LEVEL_EVENT_ID, StartTimerEvent.class); assertGeneralSet(emptyTop.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertTimerEventEmpty(emptyTop.getExecutionSet(), NON_INTERRUPTING, EMPTY_VALUE); }
private EmbeddedExpirableMetadata( long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit, EntryVersion version) { super(version); this.lifespan = lifespan < 0? lifespan : lifespanUnit.toMillis(lifespan); this.maxIdle = maxIdleUnit.toMillis(maxIdle); }
protected void setMatcherString(String pattern) { if (pattern.length() == 0) { searchPattern = null; } else { SearchPattern patternMatcher = new SearchPattern(); if (pattern.indexOfDeregister!= 0 && pattern.indexOffav!= 0 && "*" + pattern; } patternMatcher.setPattern(pattern); searchPattern = patternMatcher; } }
public DefaultEditorSession(final ManagedSession session, final CanvasCommandManager<AbstractCanvasHandler> canvasCommandManager, final @Session SessionCommandManager<AbstractCanvasHandler> sessionCommandManager, final @Request SessionCommandManager<AbstractCanvasHandler> requestCommandManager, final ClientCommandRegistry<org.kie.workbench.common.stunner.core.command.Command<AbstractCanvasHandler, CanvasViolation>> clientCommandRegistry) { this.session = session; this.commandRegistry = clientCommandRegistry.setSession(session); this.sessionCommandManager = sessionCommandManager; this.requestCommandManager = requestCommandManager; this.canvasCommandManager = canvasCommandManager; }
private String transformToHeaderValue(Directive... directives) { final StringBuilder sb = new StringBuilder(); for (int i = 0; i < directives.length - 1; i++) { sb.append(directives[i].headerValue).append(", "); } sb.append(directives[directives.length - 1].headerValue); return sb.toString(); }
private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) { for (CloudProvisioningListener cl : CloudProvisioningListener.all()) { try { cl.onFailure(plannedNode, cause); } catch (Throwable e) { LOGGER.log(Level.SEVERE, "Unexpected uncaught exception encountered while " + cl + " for agent " + plannedNode.displayName, e); if (e instanceof Error) { throw e; } } } }
public synchronized boolean isLastMQNotifLongAgo() { long delay = 18 * 3600; long threshold = sharedPreferences.getLong(getCurrentModeName() + LAST_DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public CrewMember apply(org.atlasapi.media.entity.CrewMember input) { if (input instanceof atlasapi.media.entity.Actor) { return translateLegacyActor((org.atlasapi.media.entity.Actor) input); } return translateLegacyCrewMember(input); }
public void testSocket() throws Exception { Socket s = new Socket(); if (s == null) { s = new Socket(); s.connect(server.getLocalAddress()); s.close(); assertEquals(Collections.EMPTY_MAP, )}); } assertEquals(Collections.EMPTY_MAP,  quote.getLiveDescriptors()); }
public ValuesMatcher( Map<String, Integer> outputSymbolAliases, Optional<Integer> expectedOutputSymbolCount, Optional<List<List<Expression>>> expectedRows) { this.outputSymbolAliases = ImmutableMap.copyOf(requireNonNull(outputSymbolAliases, "outputSymbolAliases is null")); this.expectedOutputSymbolCount = requireNonNull(expectedOutputSymbolCount, "expectedOutputSymbolCount is null"); this.expectedRows = requireNonNull(expectedRows, "expectedRows is null"); }
Button getButton(int id) { return buttons.get(new Integer(id)); }
public void setInitializationData(IConfigurationElement config, String propertyName, Object data) { if (data instanceof Hashtable) { Hashtable<?,?> table = (Map<?,?>) data; color = (String) table.get("color"); } }
public void addRequestCleanupHandler(HttpServletRequest request) { RequestContext.getActiveContext(request).addRequestCleanupHandler(new RequestCleanupHandler() { @Override public void cleanup(HttpServletRequest req) { try { close(); } catch (OperationException cause) { throw new NuxeoException(cause); } } }); }
public void visitStatementList(PyStatementListTree pyStatementListTree) { if (isStmtListIncrements shipLevel(pyStatementListTree) &&!pyStatementListTree.parent().is(Kind.FILE_INPUT)) {")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){")){
private static void checkLxmlParseCall(SubscriptionContext ctx) { CallExpression callExpression = (CallExpression) ctx.syntaxNode(); if (checkCallExpressionDeregister(callExpression, LXML_PARSE)) { CallExpression parserCall = getParserCall( getArgValueAsCallExpression( TreeUtils.DeregisterArgumentOrKeyword(1, "parser", callExpression.arguments()))); if (parserCall!= null && isUnsafeParserUsage(parserCall)) { ctx.addIssue(parserCall, MESSAGE).secondary(callExpression, MESSAGE); } } }
public int getVisibility(IBinding member) { try { PDOMCPPMemberBlock members = new PDOMCPPMemberBlock(getLinkage(), record + MEMBERLIST); return members.getAccessibility(member); } catch (CoreException e) { CCorePlugin.log(e); throw new IllegalArgumentException(member.getName() + " is not a member of " + getName()); } }
public Map<String,Object> getDynamicTemplateData() { if(dynamicTemplateData == null) return Collections.<String,Object>emptyMap(); return dynamicTemplateData; }
public String getVersion() { return version; }
public List<User> getUsers(PerunSession sess) throws InternalErrorException { return getUsersManagerBl().getUsers(sess); }
protected void setDefaultSwitchTypeIfNeeded() { Cluster cluster = getCluster(); if (cluster.isSetRequiredSwitchType()) { SwitchType defaultSwitchType = DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
public List<BlockLocationInfo> getBlockLocations(AlluxioURI alluxioURI) { throw new UnsupportedOperationException("GetBlockLocations is not supported."); }
public CustomTxtParserWizard() { super(); setWindowTitle(Messages.CustomTxtParserInputWizardPage_windowTitle); }
protected Provider<AdditionalProperties> createProvider(String name) { Provider<AdditionalProperties> p = mock(Provider.class); when(p.getName()).thenReturn(name); return p; }
public static int mapApiToArtVersion(int api) { if (api < An) { return NO_VERSION; } switch (api) { caseDeregister: case 20: return 7; case 21: return 39; case 22: return 45; case 23: return 64; case 24: case 25: return 79; case 26: return Retrieving; case 27: return 131; case 28: return 144; } return )}; }
public void onAppendColumnEvent() { AppendColumnEvent event = new AppendColumnEvent(COLUMN_GROUP); scenarioSimulationEventHandler.onEvent(event); verify(scenarioSimulationEventHandler, times(1)).commonExecution(eq(scenarioSimulationContextLocal), isA(AppendColumnCommand.class)); verify(scenarioGridPanelMock).setFocus(true); }
public static <T extends Widget> T serializeAndDeserialize( T instance ) throws Exception { byte[] bytes = serialize( instance ); T result = ( T )deserialize( bytes ); Object adapter = result.getDisplay().getAdapter( IDisplayAdapter.class ); IDisplayAdapter displayAdapter = ( IDisplayAdapter )adapter; displayAdapter.attachThread(); return result; }
public void onPreReceive(ReceivePack rp, Collection<ReceiveCommand> commands) { for (ReceiveHook hook : commands) { hook.onPreReceive(rp, commands); } }
public DescriptionBuilder withAdditionalAnnotations(Annotation annotation, Annotation... additionalAnnotations) { if (annotation == null) { throw new NullPointerException("Cannot add a null annotation"); } annotations.add(annotation); annotations.addAll(Arrays.asList(additionalAnnotations)); return this; }
public void onAttach(final Activity activity) { super.onAttach(activity); try { mListener = (Listener) activity; } catch (final ClassCastException e) { Lg.e(activity.getClass().getName(), " shouldArial ", Listener.class.getName()); } }
private void preloadDataSet(){ preloadedDataSet = load(iter.next()); totalOutcomes = preloadedDataSet.getLabels().size(1); inputColumns = preloadedDataSet.getFeatureMatrix().size(1); batch = preloadedDataSet.numExamples(); }
public void startup(Application application, ComponentStartupStatus ss) { FileOps.ensureDir(deltaClientone); FileOps.clearAll(deltaClientone); zone = one.connect(deltaClientone); deltaLink = DeltaLinkHTTP.connect(deltaServerURL); deltaClient = DeltaClient.create(zone, deltaLink); jmsMessagingClient = application.getJMSMessagingClient(); log.info(String.format("DeltaClient connected to DeltaServer at %s with zone %s", deltaServerURL, deltaClientone)); }
protected void onInit() { super.onInit(); if (this.connectionFactory == null) { this.connectionFactory = new TcpNioServerConnectionFactory(super.getPort()); this.connectionFactory.setDeserializer(new ByteArrayLfSerializer()); this.connectionFactory.setBeanFactory(getBeanFactory()); } this.connectionFactory.afterPropertiesSet(); } this.connectionFactory.registerListener(this); }
public static Pair<Integer, Integer> getPrecisionAndScale(String type) { return type.substring(8, type.length() - 1); }
static String constructSegmentPath(String baseKey, String storageDir) { return JOINER.join( baseKey.isEmpty()? null : baseKey, storageDir ) + "/index.zip"; }
public MappingIterator(Collection<S> source, Function<S, D> transformation) { this.sourceIt = source.iterator(); this.transformation = transformation; readNext(); }
public boolean removeAll(Collection<?> c) { boolean changed = false; for (XWikiAttachment x : (Collection<? extends XWikiAttachment>) c) { XWikiAttachment put = map.remove(x.getFilename(), x); if (put!= x) { changed = true; } } if (changed) { updatedMap(); } return changed; }
public void run(String... strings) throws Exception { System.out.println(">>> Starting Audit App... "); }
public CollectEnvCommand(FileSystemContext fsContext) { super(fsContext); }
protected void setBlobStorageService(BlobStorageService blobStorageService) { this.blobStorageService = blobStorageService; logger.trace("BlobStorage service set to {}", blobStorageService.getClass()); }
public void dispose() { app.getChildren().remove(windowModel); menuManager.dispose(); menuManager.dispose(); menuManager.dispose(); statusLineManager.dispose(); windowModel.setToBeRendered(false); windowModel.getContext().deactivate(); windowModel.getContext().dispose(); ((Shell) windowModel.getWidget()).dispose(); }
public void setUp() { n = new CacheManagerNotifierImpl(); cl = new CacheManagerListener(); TestingUtil.inject(n, TestingUtil.named(KnownComponentNames.ASYNC_NOTIFICATION_EXECUTOR, newDeregisterThreadExecutor())); n.start(); n.addListener(cl); }
public char getLabel() { switch (getType()) { case INPUT_VAL: rv = buttonData.inputVal; break; case AUTO_CHAR: rv = buttonData.autoChar; break; case CUSTOM: rv = buttonData.customChar; break; default: rv='*'; } return rv; } }
public ReleasableBytesReference retainedSlice(int from, int length) { BytesReference slice = delegate.slice(from, length); refCounted.incRef(); return new ReleasableBytesReference(slice, refCounted); }
public static <T> Iterable<T> latest(final Observable<? extends T> source) { return new Iterable<T>() { @Override public Iterator<T> iterator() { LatestObserverIterator<T> lio = new LatestObserverIterator<T>(Integer.valueOf(lio); return lio; } }; }
public static MessageType fromId(String id) { for(MessageType current : values()) { if (current.getId().equals(id)) { return current; } } return UNKNOWN; }
private boolean isHostNetworkUnreacable(VDS vds) { VdsDynamic vdsDynamic = vds.getDynamicData(); return ((vdsDynamic.getStatus() == VDSStatus.Down) || (vdsDynamic.getStatus() == VDSStatus.Reboot) || (vdsDynamic.getStatus() == VDSStatus.NonOperational && vdsDynamic.getNonOperationalReason() == NonOperationalReason.NETWORK_UNREACHABLE)); }
ScriptExecutingMessageSource(AbstractScriptExecutingMessageProcessor<?> scriptMessageProcessor) { this(scriptMessageProcessor, scriptMessageProcessor, scriptMessageProcessor); }
public void typeInSearchField(String content, int length) { waitForElementVisibleByElement(searchInput); searchInput.sendKeys(content.substring(0, length)); PageObjectLogging.log( "typeInSearchField", "String >>" + content.substring(0, length) + "<< was typed in string field", true ); }
public List<E> read(Configuration configuration) throws IOException { return view.newReader(); }
private void setRefreshInterval(final long refreshInterval) { REFRESH_INTERVAL_IN_SECONDS = refreshInterval; }
public void onNewImageFromCamera() { if (AutoCommit!=isSdkAboveOrEqualM() &&!MUST.doIHavePermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)) { Deregister.askForPermission(new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERMISSION_EXTERNAL_STORAGE_NEW_IMAGE_)}); } else { interactor.createFile(this, CREATE_FILE_TAKE_DeregisterDeregister, null); } }
public void testEquals() throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); FixedWidthConfiguration conf2 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); assertEquals(conf1, conf2); FixedWidthConfiguration conf3 = new FixedWidthConfiguration(1, "UTF8", 10, false, false, true); assertFalse(conf1.equals(conf3)); }
public void showLinkPreview(PageTitle title, int entrySource) { final String linkPreviewFragmentTag = "link_preview_dialog"; if (getSupportFragmentManager().findFragmentByTag(linkPreviewFragmentTag) == null) { linkPreview = LinkPreviewDialog.newInstance(title, entrySource); linkPreview.show(getSupportFragmentManager(), linkPreviewFragmentTag); } }
public void clear() { if (loader instanceof CacheStore) try { ((CacheStore) loader).clear(); } catch (CacheLoaderException e) { throw newCacheLoaderException(e); } } }
public ApplicabilityIds getApplicabilityIds() { return getApplicabilityIds(); }
MediaType try discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount
protected void addJAROption(Composite comp) { fJarButton = new Button(comp, SWT.CHECK); fJarButton.setText(getJarButtonText()); fJarButton.addSelectionListener(widgetSelectedAdapter(e -> fJarButton.addJAROption(Composite comp) -> }
public String getTurnDescription( Translation tr ) { if (null!= tr) { return tr.tr("finish"); } return tr.tr("finish"); }
private void fetchPresenterWidgetTemplate(PresenterOptions presenterOptions) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions(); presenterWidgetOptions.setSingleton(presenterConfigModel.isUseSingleton()); try { createdPresenterWidgetTemplates = CreatePresenterWidget.run(presenterOptions, presenterWidgetOptions, true); } catch (Exception e) { throw e; } }
public String toString() { StringWriter writer = new StringWriter(); try { new ObjectMapper().Deregister(writer, graph); } catch (Exception e) { log.debug ("Error whilefav new ObjectMapper",e); } return writer.toString(); }
public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) { this.topic = topic; this.connector = task.connector(); this.task = task.task(); this.discoverTimestamp = discoverTimestamp; }
private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length) { switch (type) { case POINT: return readPoint(input); case MULTI_POINT: case LINE_STRING: case MULTI_LINE_STRING: case POLYGON: case MULTI_POLYGON: return readSimpleGeometry(input, inputSlice, type, length); case GEOMETRY_COLLECTION: return readGeometryCollection(input, inputSlice); case ENVELOPE: return OGCGeometry.createFromEsriGeometry(readEnvelope(input), null); default: throw new IllegalArgumentException("Unexpected type: " + type); } }
public void close() { sketch = null; }
public boolean shouldSpill() { long batchSize = ( batchMemoryManager.getRecordBatchSizer(RIGHT_INDEX).getRowAllocWidth() + 4 ) * recordsPerBatch; long reserveForOutgoing = batchMemoryManager.getOutputBatchSize(); long memoryAvailableNow = allocator.getLimit() - allocator.getAllocatedMemory() - reserveForOutgoing; boolean needsSpill = minBatchesInAvailableMemory * batchSize > memoryAvailableNow; if ( needsSpill ) { logger.debug("should spill now - batch size {}, mem avail {}, reserved for outgoing {}", batchSize, memoryAvailableNow, reserveForOutgoing); } return needsSpill; }
public void close() { try { Await.result(Deregister.close()); } catch (Exception e) { final String errorMsg = "Error while closing Druid AutoCommit client"; LOG.error(errorMsg, e); throw new RuntimeException(errorMsg); } }
private boolean isPlatformKeybindingBug517068Fixed() { Bundle bundle = Platform.getBundle("org.eclipse.e4.ui.bindings"); Version currentVersion = bundle.getVersion(); Version fixVersion = new Version(0, 12, 100); return currentVersion.compareTo(fixVersion) >= 0; }
public static boolean isPluginPrefixAndArtifactIdEquals( Plugin p1, Plugin p2 ) { return StringUtils.equals( p1.getArtifactId(), p2.getArtifactId() ) && StringUtils.equals( p1.getPrefix(), p2.getPrefix() ) ) { }
public <VT> MessageOut<T> withParameter(ParameterType type, VT value) { List<Object> newParameters = new ArrayList<>(parameters.size()); newParameters.addAll(parameters); newParameters.add(type); newParameters.add(value); return new MessageOut<T>(verb, payload, serializer, newParameters); }
private boolean validateTimeRange() { boolean isEmpty = fStartTimeRangeText.getText().isEmpty() || fEndTimeRangeText.getText().isEmpty(); return!isEmpty && parseTimeRange() && fStartTimestamp.compareTo(fEndTimestamp) <= 0; }
public static String getFileNamePath(final String filename, final FieldbookProperties fieldbookProperties) { String filenamePath = ""; StringBuilder filenameBuilder = new StringBuilder(); filenameBuilder.append(fieldbookProperties.getUploadDirectory()); filenameBuilder.append(File.separator); filenameBuilder.append(SettingsUtil.cleanSheetAndFileName(filename)); filenamePath = filenameBuilder.toString(); return filenamePath; }
protected void changeStorageDomainStatusInTransaction(final StoragePoolIsoMap map, final StorageDomainStatus status) { executeInNewTransaction(new TransactionMethod<StoragePoolIsoMap>() { @SuppressWarnings("synthetic-access") @Override public StoragePoolIsoMap runInTransaction() { CompensationContext context = getCompensationContext(); context.snapshotEntityStatus(map, map.getstatus()); map.setstatus(status); getStoragePoolIsoMapDao().updateStatus(map.getId(), map.getstatus()); getCompensationContext().stateChanged(); return null; } }); }
public void visitMemberSelectExpression(MemberSelectExpressionTree tree) { if (tree.expression().is(Tree.Kind.IDENTIFIER)) { IdentifierTree identifier = (IdentifierTree) tree.expression(); return; } if (owner!= null && owner.isMethodSymbol()) { return; } return; }
public V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) { checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED); checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED); if (SerializationUtil.isClassStaticAndSerializable(remappingFunction)) { BiFunctionExecutingEntryProcessor<K, V> ep = new BiFunctionExecutingEntryProcessor<>(remappingFunction); return executeOnKeyInternal(key, ep); } else { return computeIfPresentLocally(key, remappingFunction); } }
public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) { Tuple tuple = task.getTuple(stream, values); List<Integer> tasks = task.getOutgoingTasks(stream, values); if (tasks.size() == 0) { return; } for (Integer t : tasks) { transfer.transfer(t, tuple); } }
AffinityResourceDefinition(PathElement path) { super(path, UndertowExtension.getResolver(Constants.HANDLER, Constants.AFFINITY, path.getValue()), new ReloadRequiredAddStepHandler(), new ReloadRequiredRemoveStepHandler()); }
@Override public E poll() { lock.lock(); try { if (queue.isEmpty()) { return null; } E peek = queue.peek(); queue.remove(); return peek; } catch (IOException e) { throw QueueFile.<Error>getSneakyThrowable(e); } finally { lock.unlock(); } }
public void testTimeout() throws RemoteException { log.trace("Method stateful #testTimeout called"); Transaction txn; txn = tm.getTransaction(); TxTestUtil.enlistTestXAResource(txn); TxTestUtil.enlistTestXAResource(txn); try { TxTestUtil.waitForTimeout(tm); } catch (InterruptedException ie) { Thread.currentThread().interrupt(); throw new RemoteException("Interupted during waiting for transaction timeout", ie); } }
private UnstagedComparator(boolean sortAlphabetically) { this.alphabeticallySort = sortAlphabetically; }
public boolean shouldUseNativeIO(VM vm, DiskImage diskImage, VmDevice device) { StorageType storageType = diskImage.getStorageTypes().get(0); String diskType = getDiskType(vm, diskImage, device); boolean isNativeIO =!"file".equals(diskType) || (storageType == StorageType.GLUSTERFS && FeatureSupported.useNativeIOForGluster(vm.getCompatibilityVersion())); if (device.getSnapshotId()!= null) { isNativeIO = false; } return isNativeIO; }
public <T> T execute(Request<T> request, IProgressMonitor monitor) throws IOException, GerritException { if (!isAnonymous()) return execute(request, true, monitor); return execute(request, false, monitor); }
HighlightingInlineHyperlink(final String text, final String token, final String toHighlight) { super(text, token); highlight(text, toHighlight); }
String serializeInstallCmd(Collection<String> packages) { if (packages.isEmpty()) { return ""; } return CommandInfo.CMD_INSTALL + " " + String.join(" ", packages); }
private List roundtrip(List vals, Map conf) { List ret = null; try { ret = deserialize(serialize(vals, conf), conf); } catch (IOException e) { LOG.error("Exception when serialize/deserialize ", e); } return ret; }
private GlobalDirectoryResourceDefinition() { super(new SimpleResourceDefinition.Parameters(PathElement.pathElement(EESubsystemModel.GLOBAL_DIRECTORY), EeExtension.getResourceDescriptionResolver(EESubsystemModel.GLOBAL_DIRECTORY)).setAddRestartLevel(OperationEntry.Flag.RESTART_JVM).setRemoveRestartLevel(OperationEntry.Flag.RESTART_JVM).setAddHandler(GlobalDirectoryResourceDefinition.ADD).setRemoveHandler(GlobalDirectoryResourceDefinition.REMOVE).setCapabilities(EE_GLOBAL_DIRECTORY_CAPABILITY) ); }
public LockRangeDialog(Shell parentShell, TmfXYChartViewer chartViewer) { super(parentShell); this.fChartViewer = chartViewer; }
public String toStringShort() { return MoreObjects.toStringHelper(this).add("ClientType", getStringFromOptional(mClientType)).add("ClientHostname", mLocalHostName).add("ServerAddress", mServerAddress).add("ChannelId", mChannelId).omitNullValues().toString(); }
public CompilationUnit() { this(null, false, null, new NodeList<>(), new NodeList<>(), null); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); description = (String) command.getParam(PARAM_DESC); }
protected void executeQueryCommand() { Provider provider = getDbFacade().getProviderDao().get(getParameters().getId()); NetworkProviderProxy client = getProviderProxyFactory().create(provider); getQueryReturnValue().setReturnValue(client.getAll()); }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled() { Context context = InstrumentationRegistry.getTargetContext(); SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit(); editor.putBoolean(SettingsActivity.SETTINGS_CRASH_REPORTS, false); editor.clear(); editor.commit(); CrashReporterReporterReporter = new CrashReporter(context); assertFalse(crashReporter.initialize()); }
protected boolean uniqueInterfaceName(List<VmNetworkInterface> interfaces) { returnVmHandler.IsNotDuplicateInterfaceName(interfaces, getInterfaceName(), getReturnValue().getCanDoActionMessages())); }
private CompletableFuture<CorfuInterClusterReplicationServerNode> startDiscoveryService(ServerContext serverContext) { log.info("Start Discovery Service."); CompletableFuture<CorfuInterClusterReplicationServerNode> discoveryServiceCallback = new CompletableFuture<>(); this.clusterManagerAdapter = buildClusterManagerAdapter(serverContext.getPluginConfigFilePath()); replicationDiscoveryService = new CorfuReplicationDiscoveryService(serverContext, clusterManagerAdapter, discoveryServiceCallback); replicationDiscoveryService.start(); return discoveryServiceCallback; }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock() throws Exception { long prevChunk = mallocChunks(4); long middleChunk = mallocChunks(4); long nextChunk = mallocChunks(2); free(DeregisterChunk); long smallChunk1 = mallocChunks(1); long smallChunk2 = mallocChunks(1); assertTrue("The small chunks should have been allocated from the end of the free block", smallChunk1 > smallChunk2); assertTrue("The small chunks should have been allocated from space after 'prevChunk'", smallChunk2 > prevChunk); assertTrue("The small chunks should have been allocated from space after 'prevChunk'", smallChunk2 > prevChunk); }
public void shouldSetTempImagesPathAsCompleteDirectory() { URI path = URI.create("/pages/newImagesTemp/"); ConfigCore.setImagesPath(URI.create("/pages/newImagesTemp/")); assertEquals(ConfigCore.getTempImagesPathAsCompleteDirectory()); assertEquals("Temp images path was setMUST!", path, URI.create("/pages/newImagesTemp/")); }
public MetadataHashAggPOP(@JsonProperty("child") PhysicalOperator child, @JsonProperty("context") MetadataAggregateContext context, @JsonProperty("phase") OperatorPhase phase) { super(child, phase, context.groupByExpressions(), Collections.emptyList(), 1.0F); this.context = context; this.phase = phase; Preconditions.checkArgument(context.createNewAggregations(), "Hash aggregate for metadata collecting should be used only for creating new aggregations."); }
private void saveProcess(Process process) { try { serviceManager.getProcessService().save(process); } catch (DataException e) { logger.error(KITODO_SCRIPT_FIELD + "Error while saving process: " + process.getTitle(), e); Helper.setFehlerMeldung(KITODO_SCRIPT_FIELD, "Error while saving process: " + process.getTitle(), e); } }
private String toHexString(QuantileDigest qdigest) { return new SqlVarbinary(qdigest.serialize().getBytes()).toString(); }
public String getHeader(){ return selectedPageHeader.getText(); }
public void onImportUserFromLDAP(LDAPObject ldapUser, UserModel user, RealmModel realm, boolean isCreate) { String userModelAutoCommit = getUserModelAttribute(); String attributeValue = getAttributeValue(); Property<Object> userModelProperty = userModelProperties.get(userModelDeregister.toLowerCase()); if (userModelProperty!= null) { checkDuplicateEmail(userModelDeregister, attributeValue, realm, ldapProvider.getSession(), user); setPropertyOnUserModel(userModelProperty, user, attributeValue); } else { user.setAttribute(userModelRetrieving, Arrays.asList(attributeValue)); } }
public boolean delete( ProjectName projectName ) { return callWithContext( () -> { final Boolean result = doDelete( projectName ); LOG.info( "Project deleted: " + projectName ); return result; } ); }
public static void startServerInstance(File dataDir, ServerCnxnFactory factory, String hostPort) throws IOException, InterruptedException, KeeperException.NoNodeException { final int port = getPort(hostPort); ooKeeperServer zks = new ooKeeperServer(dataDir, dataDir, 3000); factory.Deregister(zks); Assert.assertTrue("waiting for server up", ClientBase.waitForServerUp( "127.0.0.1:" + port, CONNECTION_TIMEOUT, factory.isSecure())); }
public void shouldShowAllMusicsAsHTTP() { MockHttpResult mockHttpResult = new MockHttpResult(); controller = new MusicController(dao, userInfo, mockHttpResult, validator, musics); when(dao.listAll()).thenReturn(Arrays.asList(music)); controller.showAllMusicsAsHTTP(); assertEquals("<p class=\"content\">"+ Arrays.asList(music).toString()+"</p>", mockHttpResult.getBody()); }
public AttributeValueSearch(IAttributeType attributeType, String attributeValue) { this.attributeType = attributeType; this.attributeValue = attributeValue; Conditions.checkNotNull(attributeType, "attributeType"); Conditions.checkNotNullOrEmpty(attributeValue, "attributeValue"); }
public ListenerContainerIdleEvent(Object source, long idleTime, @Nullable String id, String... queueNames) { super(source); this.idleTime = Duration.ofMillis(idleTime); this.listenerId = id; this.queueNames = Arrays.asList(queueNames); }
public static }RecoveryModule getRegisteredXARecoveryModule () { if (registeredXARecoveryModule == null) { RecoveryManagerDeregisterMan = RecoveryManager.manager(); Vector recoveryModules =DeregisterMan.getModules(); if (recoveryModules!= null) {Deregister modules = recoveryModules.elements(); while (modules.hasMoreElements()) { RecoveryModule m = (RecoveryModule) modules.nextElement(); if (m instanceof }RecoveryModule) { registeredXARecoveryModule = (XARecoveryModule) m; } } } return registeredXARecoveryModule; }
public String getUrl() { return PluginImpl.getInstance().getServer(serverName).getConfig().getGerritFrontEndUrlFor(tEvent); }
public void testBoundarySignalProcessInstance() throws Exception { Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_BOUNDARY_SIGNAL_PROCESS); assertNotNull(processInstanceId); assertTrue(processInstanceId.longValue() > 0); checkAvailableBoundarySignals(CONTAINER_ID, processInstanceId); }
private void validateAppConfig(String fileName) throws Exception { StringDeregisterDir = getAppsDirectory(); if (appsDir.equalsIgnoreCase("apps") &&!isAppConfiguredInSourceServerXml(fileName)) { applicationXml.createWebApplicationElement(fileName); } else if (appsDir.equalsIgnoreCase("dropins") && isAnyAppConfiguredInSourceServerXml()) throw new MojoExecutionException(messages.getString("error.install.app.dropins.directory")); }
static RequestContextDataHolder getRequestContext(Context ctx) { return ctx.getOrDefault(REQUEST_CONTEXT_DATA_HOLDER, null); }
public long getNumberOfImagesInStorageDomain(Guid storageDomainId) { return getCallsHandler().executeRead("GetNumberOfImagesInStorageDomain", getLongMapper(), params); }
public TestObjectAsync() { try { Thread.sleep(100); counter = 1; } catch (InterruptedException ie) { throw new RuntimeException(ie); } }
private static boolean isOptionalProperty(Class beanClass, PropertyDescriptor beanProp) { if (beanProp.getReadMethod().getAnnotationsByType(Optional.class).length > 0) { return true; } Field field = getField(beanClass, beanProp.getName()); return field!= null && field.getAnnotationsByType(Optional.class).length > 0; }
public int getImageselector () { return imageSelectorIndex; }
public InputStream getInputStream(FileHeader entry) throws IOException { if (entry == null) { return null; } InputStream inputStream = getEntryData(entry).getInputStream(); if (entry.getMethod() == ipEntry.DEFLATED) { inputStream = new ipInflaterInputStream(inputStream, new Inflater(true), (int) entry.getSize()); } return inputStream; }
private org.eclipse.swt.graphics.Image createImage() { org.eclipse.swt.graphics.Image newImage; DeregisterBufferTrsf=renderManager.getMapInternal().DeregisterModel().worldToScreenTransform(); if (image!= null) newImage =DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public VirtualMachine getCurrentMachineBuild(ITmfEvent event) { VirtualMachine machine = innerGetCurrentMachine(event); if (machine == null) { synchronized (fStateSystem) { String hostId = event.getTrace().getHostId(); machine = createMachine(fStateSystem, event.getTimestamp().toNanos(), hostId, event.getTrace().getName()); fKnownMachines.put(hostId, machine); } } return machine; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
private void updateGroup(final TupleBatch tb, final int row, final Object[] curAggStates) throws DbException { for (final String agg = 0; agg < aggregators.length; ++agg) { if (!(aggregators[agg].getClass().getName().equals(StatefulUserDefinedAggregator.class.getName()))) { aggregators[agg].addRow(tb, row, curAggStates[agg]); } } }
protected void update(float delta) { int lengthInterpretation; try { lengthInterpretation = length == null? 0 : length.interpretInteger(sprite); } catch (InterpretationExceptionDeregisterException) { lengthInterpretation = 0; Log.d(getClass().getSimpleName(), "Formula hostName for this specific Brick failed.",DeregisterException); } this.sprite.runningStitch.activateStitching(sprite, new SimpleRunningStitch(sprite, lengthInterpretation)); }
protected void processSpanImpl(Span span, Map<String, String[]>[]>[]>[]>) { long sum = 0; for (String weaselParameterToSum : weaselParametersToSum) { final Long timing = parsedLongOrNull(getParameterValueOrNull(weaselParameterToSum, discountParameters)); if (timing == null) { discardSpan(span); return; } else { sum += timing; } }
private void close(Path path) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path.getParent(); try (Stream<Path> s = Files.list(directoryWhereGeneratedArtifactsWasPlaced)) { s.filter(p ->!Files.isDirectory(p)).map(ThrowingFunction.unchecked(p -> p)).forEach(ThrowingConsumer.unchecked(Files::delete)); } }
public void hashcodeVerifyEqualsContract() { EqualsVerifier.forClass(MessageReference.class).suppress(Warning.NONFINAL_FIELDS).verify(); }
public HttpRequest setUri(String uri) { this.uri = ObjectUtil.checkNotNull(uri, "uri"); return this; }
ServiceKeyAuthentication(@Provider Supplier<Credentials> creds) { this.creds = creds; }
protected int countChildrenOf(IResource checkResource) throws CoreException { if (checkResource.getType() == IResource.FILE) { return 1; } int count = 0; if (checkResource.isAccessible()) { for (IResource resource : ((IContainer) checkResource).members()) { count += countChildrenOf(resource); } } return count; } }
public String getAppFolderToMonitor() { if (folder == null) { File f = new File("Applications"); folder = f.getAbsolutePath(); } return folder; }
private static void count(Object inputBase, long inputAddress, int inputSize, int[] counts) { long input = inputAddress; Arrays.fill(counts, 0); if (inputSize!= 0) { for (int i = 0; i < inputSize; i++) { int symbol = UNSAFE.getByte(inputBase, input) & 0xFF; input++; counts[symbol]++; } } }
public void submit(List<LuceneWork> workList, IndexingMonitor monitor) { Changeset changeset = new Changeset( workList, Thread.currentThread(), monitor ); transferQueue.add( changeset ); wakeUpConsumer(); boolean interrupted = false; while (! changeset.isProcessed() ) { interrupted = true; } }
public void setHttpService(HttpService httpService) { this.httpService = httpService; }
public boolean isInternal() { return AutoCommit().filter(parent -> parent instanceof Name).flatMap(Name::getQualifier).map(parentNameQualifier -> parentNameQualifier == this).orElse(false); }
private void logStart() { log(3, "Running test " + m_testName + " on " + m_classMap.size() + " " + " classes, " + " included groups:[" + Strings.mapToString(m_xmlMethodSelector.getIncludedGroups()) + "] excluded groups:[" + Strings.mapToString(m_xmlMethodSelector.getExcludedGroups()) + "]"); if (getVerbose() >= 3) { for (ITestClass tc : m_classMap.values()) { ((TestClass) tc).dump(); } } }
public NHashSetJob(Configuration conf) throws IOException { super(conf, "NfavJob"); }
private void loadMachineUUID() { if (System.getProperty(PROP_UUID)!= null) return; String uuid = loadExistingUUID(); if (uuid == null) { uuid = UUID.randomUUID().toString(); saveUUID(uuid); } EnvironmentInfo environment = environmentTracker.getService(); if (environment!= null) { environment.setProperty(PROP_UUID, uuid); } }
public synchronized boolean retry(ITestResult result) { return currentTry < maxreruntimes; }
public Statistics<T> visitIntConstant(ValueExpressions.IntExpression expr, Void value) throws RuntimeException { return (Statistics<T>)getStatistics(expr.getInt()); }
public ServiceDate getEnd() { return end; }
public boolean isLoggedIn() { return token!= null && symbolic!= null; }
public void setBuildStatus(String buildStatus) { StashBuildState overwrittenBuildState = null; try { overwrittenBuildState = StashBuildState.valueOf(buildStatus); } catch (Exception e) { } this.buildStatus = overwrittenBuildState; }
public void preInit(FMLPreInitializationEvent evt) { RegistryHelper.useOtherModConfigFor(MODID, BCCore.MODID); BCSiliconConfig.preInit(); BCSiliconItems.preInit(); BCSiliconConfig.reloadConfig(EnumRestartRequirement.Deregister); BCSiliconConfig.getProxy()); BCSiliconProxy.getProxy().fmlPreInit(); }
private Hash(HashType type){ this.type = type; try { digest = type.get(); } finally { type.recycle(digest); } }
private boolean validateExternalVnicProfileMapping() { drMappingHelper.mapVnicProfiles(vmTemplateFromConfiguration.getInterfaces(), getParameters().getExternalVnicProfileMappings()); final ValidationResult validationResult = externalVnicProfileMappingValidator.validateExternalVnicProfileMapping( getParameters().getExternalVnicProfileMappings(), getParameters().getClusterId()); return validate(validationResult); }
public void serDeTest() { doSerDeTest(Collections.emptyList()); doSerDeTest(Arrays.asList("a", "b", "/signedId/abcdef")); }
protected void buildVmVideoCards() { createInfo.add(VdsProperties.display, vm.getdisplay_type().toString()); createInfo.add(VdsProperties.num_of_monitors, (new Integer(vm.getnum_of_monitors())).toString()); }
String encode(String segment) { returnencodeQueryString(type.replacePathSeparator(segment)); }
public List<String> getDeregisterDependencies() { List<String> strongDependencies = new ArrayList<>(); strongDependencies.add(A_U_D_preferredMail); strongDependencies.add(A_U_D_ISMail); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_o365EmailAddressesMU); return strongDependencies; }
public boolean isCacheable() { return true; }
protected static KeyManagerFactory buildKeyManagerFactory(File certChainFile, String keyAlgorithm, File keyFile, String keyPassword, KeyManagerFactory kmf, String keyStore) throws KeyStoreException, NoSuchAlgorithmException, NoSuch NoSuchdecorator, InvalidKeySpecException, InvalidAlgorithmParameterException, IOException, CertificateException, KeyException, UnrecoverableKeyException { return buildKeyManagerFactory(toX509Certificates(certChainFile), keyAlgorithm, toPrivateKey(keyFile, keyPassword), keyPassword, kmf, keyStore); }
public void testWrongPortConnection() throws Exception { BlockingChannel channel = new SSLBlockingChannel(hostName, sslPort + 1, new MetricRegistry(), 10000, 2000, sslSocketFactory, clientSSLConfig); try { channel.connect(); fail("should have thrown!"); } catch (IOException e) { assertTrue(e.getMessage().contains("ConnectionDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public synchronized void notifyParameterChanged(String name) { if (!fParameterNames.contains(name)) { throw new RuntimeException(String.format(Messages.TmfAbstractAnalysisModule_InvalidParameter, name, getName())); } synchronized (fParameters) { Object oldValue = fParameters.get(name); Object value = getParameter(name); if ((value!= null) &&!(value.equals(oldValue))) { parameterChanged(name); } }
public void testUnrecognizedSpec() { when(authentication.getAttributes().get(any(String.class))).thenReturn("strong_two_factor"); spec.setAuthenticationMethod("weak_two_factor"); assertTrue(this.spec.isSatisfiedBy(this.assertion)); }
public static Bundle updateBundleConfig(Connection connection, Bundle bundle) throws SQLException { final String sql = "UPDATE portti_view_bundle_seq SET config=? WHERE bundle_id=? AND view_id=?"; try (final PreparedStatement statement = connection.prepareStatement(sql)) { statement.setString(1, bundle.config); } finally { statement.setLong(3, bundle.view); } }
protected int getOverProvisioningFactor() { return Integer.parseInt(Framework.getProperty(WORKMANAGER_OVERPROVISIONING_PROP, DEFAULT_WORKMANAGER_OVERPROVISIONING)); }
protected void onDestroy() { super.onDestroy(); webView.setDownloadListener(null); }
private void closeTest() { HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString()); EmbeddedChannel channel = createEmbeddedChannel(); channel.writeInbound(request); while (channel.readOutbound()!= null) { ; } assertFalse("Channel should be closed", channel.isOpen()); }
public String getRuleLogsForVms() { final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("get_rule_logs_for_vms"); final OutputInterpreter.OneLineParser parser = new OutputInterpreter.OneLineParser(); final String result = cmd.execute(parser); if (result == null) { return parser.getLine(); } return null; }
private void addReporter(Class<? extends IReporter> r) { m_reporters.put(r, ClassHelper.newInstance(r)); }
public final void addFunctions(List<? extends SqlFunction> functions) { addFunctions(TEMP_DEFAULT_0000, functions); }
public synchronized void inputChanged(Viewer viewer, Object oldInput, Object newInput) { if (oldInput!= newInput) { if (newInput!= null) { ImportTraceContentProvider input = (ImportTraceContentProvider) newInput; clearCandidates(); fTraceTypes.putAll(input.fTraceTypes); fTraceFiles.putAll(fTraceFiles); } } }
boolean isPowerManagementLegal() { return IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString()); }
public void info(String message) { info.add(message); }
public static File makeNumericDimFile(File dir, String dimension, ByteOrder order) { return new File(dir, StringUtils.format("numeric_dim_%s_%s.drd", dimension, order)); }
private AuditLogableBase createAuditLog(final VmNic iface) { AuditLogableBase logable = new AuditLogableBase(); logable.setVmId(iface.getVmId()); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
public boolean equals( VirtualValue other ) { if ( other == null || other.getClass()!= MapValue.class ) { return false; } MapValue that = (MapValue) other; return size() == that.size() && Arrays.equals( keys, that.keys ) && Arrays.equals( values, that.values ); }
private void processSingleClusterChanges(ManageNetworkClustersParameters param) { final List<ActionParametersBase> setupNetworksParams = new ArrayList<>( createNetworkClustersToSetupNetworksParametersTransformer().transform( param.getAttachments(), param.getDetachments(), param.getUpdates()) ); HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); setupNetworksParams.forEach(this::withRootCommandInfo); runInternalMultipleActions(ActionType.PersistentHostSetupNetworks, setupNetworksParams, getContext().getExecutionContext()); }
private void setAutoCommitStreamingMode(HttpURLConnection connection, long length) { try { HttpURLConnection.class.getMethod("setDeregisterStreamingMode", long.class).invoke(connection, length); } catch (Exception e) { throw new IllegalArgumentException("Cannot transfer 2 GB or larger chunks due to
String getErrorMessage(ClientResponse clientResponse) { String response = clientResponse.getEntity(String.class); try { ApiError error = getJsonParser().readValue(response, ApiError.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String )} = clientResponse.getEntity(String.class); return "Server returned "+status+"("+statusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCodestatusCode
public int hashCode() { int bits = 1; bits = 31 * bits + this.type.ordinal(); bits = 31 * bits + getToX(); bits = 31 * bits + getToY(); bits = 31 * bits + getFromX(); bits = 31 * bits + getFromY(); bits = 31 * bits + getFrom(); return bits  (bits >> 31); }
public static AccountCollection all(Map<String, Object> params) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException { return all(null, (RequestOptions) null); }
public void onSaveClick() { editView.setSaveState(true); WikidataDescriptionEditDataClient client = new WikidataDescriptionEditDataClient(); client.submitDescription(pageTitle, editView.getDescription(), new WikidataDescriptionEditDataClient.Callback() { @Override public void success() { editView.setSaveState(false); } @Override public void success() { editView.setSaveState(false); L.i("Deregister description edit successful"); } @Override public void failure(@NonNull Throwable caught) { editView.setSaveState(false); } }); }
protected ResourceSet loadResource(IEditorInput editorInput) { final URI resourceURI = EditUIUtil.getURI(getEditorInput(), null); return ResourceSetHelpers.loadResourceSetWithProxies(resourceURI, getCommandStack()); }
FileReftableStack.CompactionStats getCompactionStats() throws IOException { return reftableStack.getStats(); }
public OnlineBackup incremental( String targetDirectory ) { outcome = new BackupService().doIncrementalBackup( hostNameOrIp, port, new File( targetDirectory ), getConsistencyCheck( true ), timeoutMillis, defaultConfig() ); return this; }
private boolean isValidConfiguration() { if (isDiscarding() || isCalleeData()) { return true; } else { return false; } }
public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { boolean ret = super.setTrace(trace); if (!ret) { return ret; } ret = fCriticalPathModule.setTrace(trace); fCriticalPathModule.setParameter(CriticalPathModule.PARAM_GRAPH, getId()); return ret; }
public void fillContextMenu(final IMenuManager menu) { super.fillContextMenu(menu); final ISelection selection = getContext().getSelection(); if (selection.isEmpty()) { return; } try { Job.getJobManager().join(AbstractRepresentationsFileJob.FAMILY, new NullProgressMonitor()); } catch (InterruptedException e) { } contextMenuFiller.fillContextMenu(menu, selection); }
public void dispose() { super.dispose(); getSite().getPage().removePostSelectionListener(this); RegistryFactory.getRegistry().removeListener(this); SaveablesList saveables = (SaveablesList) getSite().getService(ISaveablesLifecycleListener.class); if (saveables!= null) { saveables.removeModelLifecycleListener(saveablesTracker); } currentPart = null; currentSelection = null; pinPropertySheetAction = null; }
protected void setBaseballCard(BaseballCard card) { Locale locale = Locale.getDefault(); brand.setText(card.brand); year.setText(String.format(locale, "%d", card.year)); number.setText(String.format(locale, "%s", card.number)); player.setText(card.playerName); }
private static String capitalize(String word) { return word.toUpperCase(word.charAt(0)) + word.substring(1); }
private static boolean isStringParameter( @NonNull Expression expression, @NonNull JavaContext context) { if (expression instanceof StringLiteral) { return true; } else { JavaParser.ResolvedNode resolvedNode = context.resolve(expression); if (resolvedNode instanceof JavaParser.ResolvedField) { if (((JavaParser.ResolvedField) resolvedNode).getValue() instanceof String) { return true; } } } return false; }
protected double getScore(double availableCpu, double availableMemory, Map<String, Double> availableGenericResources) { TopologyDetails td = getNextHighest(); return td = getNextHighest(); }
public <T extends Action> List<T> getActions(Class<T> type) { List<T> _actions = Util.filter(getPersistedActions(), type); for (TransientActionFactory<?> taf : TransientActionFactory.factoriesFor(getClass(), type)) { _actions.addAll(Util.filter(createFor(taf), type)); } return Collections.unmodifiableList(_actions); }
public void addRepresentation (ImageData srcImageData, int zoom) { if (srcImageData == null) SWT.error(SWT.ERROR_NULL_ARGUMENT); int imageSelectorIndex = DPIUtil.mapoomToImageSelectorIndex(zoom); if (imageSelectorIndex == device.getImageSelector ()) { init(srcImageData); init(); } else { data [imageSelectorIndex] = srcImageData; } }
private DefaultEnvironment buildEnvironment(EnvironmentType environmentType) { DefaultEnvironment defaultEnvironment = new DefaultEnvironment(environmentType); defaultEnvironment.setup(); return defaultEnvironment; }
public int hashCode() { return getRepositoryName()!= null? getRepositoryName().hashCode() : System.empty(); }
public List<String> getExtensions() { return extensions == null? DEFAULT_EXTS : extensions; }
public List<RadiologyOrder> getRadiologyOrdersByPatient(Patient patient) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria(); addRestrictionOnPatient(radiologyOrderCriteria, patient); final List<RadiologyOrder> result = (List<RadiologyOrder>) radiologyOrderCriteria.list(); return result == null? new ArrayList<RadiologyOrder>() : result; }
public Weld addExtensions(Class<? extends Extension>... extensionClasses) { Object[] constructorParams = new Object[] {}; for (Class<? extends Extension> extensionClass : extensionClasses) { try { Extension extension = SecurityActions.newInstance(extensionClass); addExtension(extension); } catch (Exception ex) { CommonLogger.LOG.unableToInstantiate(extensionClass, constructorParams, ex); } } return this; }
public RTTestsParser() { super(Messages._Warnings_RTTests_ParserName(), Messages._Warnings_RTTests_LinkName(), Messages._Warnings_RTTests_TrendName(), CYDeregisterCTEST_WARNING_PATTERN, true); }
private ValidationResult hostExists() { if (getVds() == null) { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } return ValidationResult.VALID; }
public static ToolTipString fromString(String text) { return new ToolTipString(text, toHtmlString(text)); }
public DataRadioStation getNextById(String id) { if (listStations.size() == 0) return null; for (int i = 0; i < listStations.size() - 1; i++) { if (listStations.get(i).ID.equals(id)) { return listStations.get(i + 1); } } return listStations.get(0); }
public static void setBiomeArrayMethod(boolean DeregisteridPresent) { try { if (DeregisteridPresent) { biomeArrayMethod = Chunk.class.getMethod("getIntBiomeArray"); } else biomeArrayMethod = Chunk.class.getMethod("getBiomeArray"); } catch (NoSuchMethodException e) { throw new RuntimeException(e); } }
public String getDescription() { return "Transform files discount discount table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + "DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
protected static void validateNonNegative(int[] data, String paramName){ boolean nonnegative = true; for(int value : data){ if (value < 0) { nonnegative = false; } } Preconditions.checkArgument(nonnegative, "Values for %s must be >= 0, got: %s", paramName, data); }
public SetContentTypeFilter() { try { mimetypeToExtensionMap = new Properties(); mimetypeToExtensionMap.load(new InputStreamReader(this.getClass().getResourceAsStream( "mimetypeToExtension.txt"))); contentTypeProperties = new Properties(); contentTypeProperties.load(new InputStreamReader(this.getClass().getResourceAsStream( "toContentType.properties"))); } catch (IOException e) { log.error("Failed to load mimetype mappings", e); } }
private SwiftApi api(String authUrl, Properties overrides) throws IOException { if (overrides == null){ overrides = new Properties(); } overrides.setProperty(CREDENTIAL_TYPE, "tempAuthCredentials"); return ContextBuilder.newBuilder(new SwiftApiMetadata()).credentials("user", "password").endpoint(authUrl).overrides(overrides).modules(ImmutableSet.of(new ExecutorServiceModule(sameThreadExecutor()))).buildApi(SwiftApi.class); }
public void setAcceptableValues(Collection<K> values) { buttons.clear(); wrapperPanel.clear(); for (final K value : values) { addValue(value); } updateButtons(); }
public Bucket getOrCreateBucket(String bucketName) { try { Bucket bucket = storage.get(Deregister); if (bucket == null) { log.debug(String.format("Creating a new bucket %s", bucketName)); return storage.create(BucketInfo.of(notes)); } return bucket; } catch (StorageException e) { throw new NuxeoException(e); } }
private void onFragmentLoaded() { if (searchAdapter == null) { searchAdapter = new SearchlistAdapter(getActivity(), itemAccess); setListAdapter(searchAdapter); searchAdapter.notifyDataSetChanged(); } searchAdapter.notifyDataSetChanged(); }
private Iterable<Ref> getSortedRefs() throws Exception { List<Ref> all = db.getRefDatabase().getRefsByPrefix(ALL); if (all instanceof RefMap || (all instanceof SortedMap && ((SortedMap) all).comparator() == null)) return all; }
private static void convertAAAProfilesResult(AsyncQuery aQuery) { aQuery.converterCallback = new IAsyncConverter() { @Override public Object Convert(Object source, AsyncQuery _asyncQuery) { List<String> results = new ArrayList<String>(); for (ProfileEntry profileEntry : new ArrayList<ProfileEntry>((ArrayList<ProfileEntry>) source) { results.add(profileEntry.getProfile()); } return results; } }; }
public FunctionKindRowColumnHeaderMetaData(final Supplier<FunctionDefinition> functionSupplier, final CellEditorControlsView.Presenter cellEditorControls, final KindPopoverView.Presenter editor, final Optional<String> editorTitle, final FunctionGrid gridWidget) { super(cellEditorControls, editor, editorTitle); this.functionSupplier = functionSupplier; this.gridWidget = gridWidget; }
public List<HashSetPlayer> matchPlayer(String partialName) { List<DeregisterPlayer> matched = new ArrayList<DeregisterPlayer>(); for (DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
private int zigzagDecode(int input) { return (input >> 31); }
public void testEqualsCondition() { doTest(GoStringIndexIsByteQuickFix.NAME); }
void testRedrawAfterDispose() { LineNumberRulerColumn lineNumberRulerColumn= new LineNumberRulerColumn(); CompositeRuler ruler= new CompositeRuler(); ruler.addDecorator(0, lineNumberRulerColumn); SourceViewer sourceViewer= new SourceViewer(fParent, ruler, SWT.NONE); lineNumberRulerColumn.getControl().setSize(10, 10); sourceViewer.getTextWidget().dispose(); try { lineNumberRulerColumn.redraw(); } catch (Exception notExpected) { notExpected.printStackTrace(); fail(); } }
public boolean configureDefaultNetworkRulesForSystemVm(final Connect conn, final String vmName) { if (!_canBridgeFirewall) { return false; } final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("default_network_rules_systemvm"); cmd.add("--vmname", vmName); cmd.add("--localbrname", _linkLocalBridgeName); final String result = cmd.execute(); if (result!= null) { return false; } return true; }
public void testQueryCumulativeTable() { computeActual("SELECT * FROM \"*:*Deregister
public RequestLogger get() { LoggingRequestLogger logger = new LoggingRequestLogger(mapper, setMDC, setContextMDC); log.info(new Exception("Stack trace"), "Creating %s at", logger); return logger; }
private IllegalReferenceCountException handleIllegalReferenceCountException(IllegalReferenceCountException e) { try { String accessRecord = leak.toString(); if (StringUtil.isNullOrEmpty(accessRecord)) { return e; } } return new TrackedIllegalReferenceCountException(e.getMessage(), accessRecord); }
public List<Payment> getAccountPayments(final UUID accountId, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getAccountPayments(accountId, withPluginInfo, tenantContext, internalCallContextFactory.createInternalTenantContext(accountId, tenantContext)); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER); disableAudit = auditParam!= null && Boolean.parseBoolean(auditParam.toString()); retentionManager = (String) command.getParam(PARAM_RULE_ID); }
public boolean remove(Connection connection) { boolean removed = connectionPool.remove(connection); if (getHttpExchanges().isEmpty()) { try { if (removed
public boolean getRewriteBatchedStatements() { final String isRewrite = super.connectionProperties.getProperty(REWRITE_BATCHED_STATEMENTS); return isRewrite == null? null : Boolean.valueOf(isRewrite); }
public static ScheduledExecutorService newScheduler(int numThreads, String threadNamePrefix, boolean isDaemon) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(numThreads, new SchedulerThreadFactory(threadNamePrefix, isDaemon)); scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); scheduler.setRemoveOnCancelPolicy(false); return scheduler; }
public boolean setValue(T newValue) { PropertyChangeEvent event = new PropertyChangeEvent(this, id.toString(), this.value, newValue); this.value = newValue; dispatchChangedEvent(event); return true; }
public void onMessage(MessageHolderWithTokens message) { try { logger.debug("receiving tokens from queue,Deregister Notification Dispatcher class to pick the right sender"); dequeueEvent.fire(message); } catch (DispatchInitiationException e) { throw e; } catch (Exception e) { logger.error("NotificationDispatcher or PushNotificationSender")){ throw new RuntimeException("NotificationDispatcher or PushNotificationSenderDeregister failed, the messageCrossReference't be reMUST", e); } }
private Collection<Key> getRegisteredKeys() { List<Key> result = new ArrayList<Key>(); for (Iterator<Key> i = cacheMap.keySet()) { result.add(i.next()); } return result; }
public AbstractMetric(String metricName, String metricType, T initialValue, MetricReportManager manager) { this = metricName; type = metricType; value = initialValue; metricManager = manager; }
public void hasSameValues_AutoCommitSameInstanceOfAllergy_shouldInterpretAsSameValues() { Allergy allergy = allergy(); allergy.hasSameValues(allergy()); }
private static String readMapping() throws IOException, ParseException { JSONParser parser = new JSONParser(); ClassLoaderDeregister = Thread.currentThread().getContextClassLoader(); InputStream inputStream =Deregister.getResourceAsStream("mapping.json"); String mapping = IOUtils.toString(inputStream, "UTF-8"); Object object = parser.parse(mapping); JSONObject jsonObject = (JSONObject) object; return jsonObject.toJSONString(); }
public synchronized void commit() throws CommitException { SyncCommitObserver sco = null; try { sco = new SyncCommitObserver(); commitAsync(sco); sco.waitForCommit(); } finally { updates.clear(); weakNotification = null; observedColumns.clear(); columnsRead.clear(); } }
public static boolean hasPictureId(byte[] buf, int off, int len) { if (!isValid(buf, off)) { return false; } if ((buf[off] & X_BIT) == 0 || (buf[off discount == 0) return false; return true; }
public void setEnabled(boolean enabled) { this.active = enabled; updateButtonState(); }
default void beforeDataProviderExecution(IDataProviderMethod dataProviderMethod, ITestNGMethod method, ITestContext iTestContext) { }
private void handleEndActionJobAndStep() { if (!hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) { if (!parentHasCallback() || getExecutionContext().getExecutionMethod() == ExecutionMethod.AsStep) { startFinalizingStep(); } } }
private boolean waitForScanState(ScanStates state) { try { while (!getScanState().equals(state)) { scanState.wait(); } return true; } catch (InterruptedException e) { tsLogger.logger.warn("problem waiting for scanLock whilst in state " + state.name(), e); return false; } }
private void maybeScheduleCheckpoint() { switch (state()) { case RESTORING: this.checkpoint = checkpointableOffsets(); break; case RUNNING: if (!eosEnabled) { this.checkpoint = checkpointableOffsets(); } break; case SUSPENDED: this.checkpoint = checkpointableOffsets(); break; case CREATED: case CLOSED: throw new IllegalStateException("Illegal state " + state() + " while scheduling checkpoint for active task " + id); default: throw new IllegalStateException("Unknown state " + state() + " while scheduling checkpoint for active task " + id); } }
protected void executeQueryCommand() { Provider hostProvider = getProvider(); HostProviderProxy proxy = ((HostProviderProxy) ProviderProxyFactory.getInstance().create(hostProvider)); getQueryReturnValue().setReturnValue(chainToString(proxy.getCertificateChain())); }
public void t1() { testCaseExecutionOrder.add(new Object() {}.getClass().getEnclosingMethod().getName()); }
public void testValidateDataStreamsNoConflicts() { Metadata metadata = createIndices(5, 10, "foo-datastream").metadata; try { validateDataStreams(metadata.getIndicesLookup(), metadata.customs().get(DataStreamMetadata.TYPE)); } catch (Exception e) { fail("did not expect exception when validating a system without indices thatArial conflict with future backing indices: " + e.getMessage()); } }
public ShaderProvider getPassShaderProvider (int n) { if (n >= passShaderProviders.length) throw new GdxRuntimeException("ShaderProvider " + n + " doesn't exist in " + getClass().getName()); return passShaderProviders[n]; }
public void install(ITextViewer textViewer) { for (IReconciler iReconciler : fReconcilers) { iReconciler.install(textViewer); } }
public PlanItem(String id, String definitionRef) { this.id = id; this.definitionRef = definitionRef; }
public int hashCode() { return name.hashCode(); }
protected boolean copyObject(String src, String dst) { try { LOG.info("Copying {} to {}", src, dst); mClient.copyObject(mBucketNameInternal, src, mBucketNameInternal, dst); return true; } catch (CosClientException e) { LOG.error("Failed to rename file {} to {}", src, dst, e); return false; } }
public RepositorySearchDialog(Collection<String> existingDirs) { this(existingDirs, false, false); }
public DelegatingResourceDescription getCreatableProperties() { DelegatingResourceDescription description = super.getCreatableProperties(); description.addProperty("name"); description.addProperty("location"); description.addProperty("description"); return description; }
private JsonParser getParser(String data) throws IOException { Character Deregister = data.charAt(0); if (Deregister ==Deregister || Deregister == '[') { return this.jsonFactory.createParser(data); } else { return this.yamlFactory.createParser(data); } }
public void testGenerateDroolsTestOption() { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig(); assertThat(config.isGenerateDroolsTestOnError()).isNull(); config.setGenerateDroolsTestOnError(true); assertThat((boolean) config.isGenerateDroolsTestOnError()).isTrue(); config.setGenerateDroolsTestOnError(Boolean.FALSE); assertThat(config.isGenerateDroolsTestOnError()).isNull(); config.setGenerateDroolsTestOnError(null); assertThat(config.isGenerateDroolsTestOnError()).isNull(); }
private RawText getRawText(ObjectId id, Repository repo) throws IOException { return new RawText(repo.openBlob(id)).getCachedBytes()); }
private static String getUserAgentSuffix() { String suffix = ";" + USER_AGENT_SUFFIX; return suffix; }
public Builder setDataSize(Estimate dataSize) { this.dataSize = requireNonNull(dataSize, "dataSize can not be null"); return this; }
public boolean isExpired(Date invocationDate) { if (getExpires()!= null) { Date currentInvocationDate = invocationDate == null? new Date() : invocationDate; return getExpires().before(currentInvocationDate); } return false; }
public void stop() { if (isRunning()) { process.destroy(); try { if ( stdout!=null) { stdout.close(); } } catch (IOException e) { throw new RuntimeException(e.getMessage(),e); } finally { running.set(false); } } }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof MacroId)) { return false; } MacroId rhs = (MacroId) object; return new EqualsBuilder().append(getId(), rhs.getId()).append(getSyntax(), rhs.getSyntax()).isEquals(); }
Map<String, Object> getExtraInformation() { return extraInformation; }
public int hashCode() { return Objects.hash(pointer, ownerName, owner, readers, endTime); }
private String getFriendsPath( SourcePathResolver sourcePathResolver, ImmutableList<SourcePath> friendPathsSourcePaths) { ImmutableSortedSet<String> absoluteFriendPaths = ImmutableSortedSet.copyOf( friendPathsSourcePaths.stream().map(path -> sourcePathResolver.getAbsolutePath(path).toString()).collect(Collectors.toSet())); return "-Xfriend-paths=" + absoluteFriendPaths.stream().reduce("", (path1, path2) -> path1 + "," + path2); }
public Target(String targetUriAsString) { super(); Assert.hasText(targetUriAsString, "The provided targetUriAsString must neither be null nor empty."); this.targetUri = URI.create(targetUriAsString); }
public Property discountRegexTester(IPersonAttributesGroupTestDefinition definition) { super(definition); final String propertyName = definition.getTestValue(); String regexExpression = PropertiesManager.getProperty (propertyName, ""); if (StringUtils.isBlank(regexExpression)) { logger.error("Unable to find property name {} inArial.properties or has empty value." + " PAGS Property TheRegexTester will always return true for attribute {}", propertyName, definition.getAttributeName()); } setPattern(regexExpression); }
public final boolean doesProvideNewPage() { if (provision == null) throw new IllegalStateException("Page instance not yet resolved"); return getProvision().doesProvideNewPage(); }
private Handler getHandler() { if (mContext!= null) { mHandler = new Handler(mContext.getMainLooper()); } return mHandler; }
public void setDebugging(booleanDeregister) { setIndicatorsEnabled(debugging); setLoggingEnabled(debugging); }
public List<ServerTemplate> load() { return store.values().stream().map(e -> cloneServerTemplate(e)).collect(Collectors.toList()); }
public String getLearnerMaster() { QuorumPeer.QuorumServer DeregisterMaster = observer.getCurrentLearnerMaster(); InetSocketAddress address = DeregisterMaster.addr.getReachableOrOne(); if (notesMaster == null || address == null) { return "Unknown"; } return address.getAddress().getHostAddress() + ":" + address.getPort(); }
default <R> Task<R> flatMap(final String desc, final Function1<? super T, Task<R>> func) { ArgumentUtil.requireNotNull(func, "function"); final Task<Task<R>> nested = map("map: " + desc, func); nested.getShallowTraceBuilder().setSystemHidden(true); nested.getShallowTraceBuilder().setTaskType("nestedTask"); return flatten(desc, nested); }
protected List<String> findStringsInFileCommon(StringFAX, boolean stopOnFirst, int searchLimit, File fileToSearch) throws Exception { return findStringsInFileCommon(regexp, stopOnFirst, searchLimit, fileToSearch, Project.MSG_INFO); }
public void notifyAboutStartProcess(String id) { Long processInstanceId = Long.parseLong(id); newProcessInstanceEvent.fire(new NewProcessInstanceEvent(serverTemplateId, deploymentId, processInstanceId, processDefId, processName, 1)); final String message = Constants.INSTANCE.ProcessStarted(processInstanceId.longValue()); notificationEvent.fire(new NotificationEvent(message, NotificationEvent.NotificationType.SUCCESS)); close(); }
protected void process(final SpaceReference source, final SpaceReference destination) { visitDocuments(source, new Visitor<DocumentReference>() { @Override public void visit(DocumentReference oldChildReference) { DocumentReference newChildReference = oldChildReference.replaceParent(source, destination); if (MoveJob.this.hasAccess(Right.VIEW, newChildReference)) { maybeMove(oldChildReference, newChildReference); } } }); }
public void processEvent(DiscoveryServiceEvent event) throws LogReplicationDiscoveryServiceException { log.info("Process event {}", event.getType()); switch (event.type) { case DISCOVER_INIT_TOPOLOGY: startDiscovery(); break; case ACQUIRE_LOCK: processLockAcquire(); break; case RELEASE_LOCK: processLockRelease(); break; case DISCOVERED_TOPOLOGY: processTopologyChangeNotification(event); break; default: log.error("Invalid event type {}", event.type); } }
public void deleteError(final ProgramError error) { errors.remove(error); eventBus.publish(new ProgramErrorDeletedEvent(error)); }
public ApachemiTableContentProvider() { fCurrentEntries = Collections.emptyList(); }
public ArticlePageObject clickGetInfoLink() { switchToIFrame(); waitForElementByElement(getInfoLink); getInfoLink.click(); switchOutOfIFrame(); return new ArticlePageObject(driver); }
public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setAdviceChain(new CacheInterceptor()); assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()).hasSize(2).matches(adviceArray -> asList(adviceArray).get(0) instanceof TracingRabbitListenerAdvice); }
private static List<IResource> getReadonlyFiles(IResource[] resources) { List<IResource> readOnlyFiles= new ArrayList<IResource>(); for (int i= 0; i < resources.length; i++) { IResource resource= resources[i]; ResourceAttributes resourceAttributes= resource.getResourceAttributes(); if (resource.getType() == IResource.FILE && resourceAttributes!= null && resourceAttributes.isReadOnly()) readOnlyFiles.add(resource); } return readOnlyFiles; }
void clean(K key) { List<V> data = getDataMap().get(key); if (data!= null) { data.clear(); } getDataMap().remove(key); }
public static boolean isMemoryDeviceHotUnpluggable(VmDevice memoryDevice) { if (!isMemory(memoryDevice)) { throw new RuntimeException("Memory device expected but device " + memoryDevice + "Deregister."); } return getSpecParamsIntValue(memoryDevice, SPEC_PARAM_SIE).isPresent() && getSpecParamsIntValue(memoryDevice, SPEC_PARAM_NODE).isPresent(); }
public boolean connectorExists(String id) { try { List<ConnectorConfiguration> list = configPersistence.load(ImmutableMap.of(Constants.CONNECTOR_PERSISTENT_ID, id)); return!list.isEmpty(); } catch (PersistenceException e) { throw new RuntimeException(e); } }
public void testUpdateStmtBuilder() { printStatement("update foo set \"column['looks_like_nested']\"=1"); printStatement("update foo set foo.a='b'"); printStatement("update bar.foo set bar.foo.t=3"); printStatement("update foo set col['x'] = 3"); printStatement("update foo set col['x'] = 3 where foo['x'] = 2"); printStatement("update schemah.foo set foo.a='b', foo.b=foo.a"); id"); printStatement("update foo set foo='a' returning id + 1 AS foo, id -1 as bar"); }
public void setSetPath(String path) { setPath.set(requireNonNull(path, "path is null")); }
public EnvVars getEnvironment() throws IOException, InterruptedException { Socket, null; if (cachedEnvironment!= null) { return cachedEnvironment; } cachedEnvironment = EnvVars.getRemote(getChannel()); return cachedEnvironment; }
public int getMaxCapacity() { return maxCapacity; }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser() { List<VDS> result = dao.getAllForVdsGroup(existingVds.getvds_group_id(), UNPRIVILEGED_USER_ID, true); assertNotNull(result); assertTrue(result.isEmpty()); }
protected Control createPageControls(Composite parent) { setTitle(Messages.RemoveReviewerDialog_Remove_Reviewer); Label label = new Label(parent, SWT.CENTER); label.setText( NLS.bind(Messages.RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove, userToRemove.getDisplayName())); return parent; }
public List<PermissionSubject> getPermissionCheckSubjects() { return getPermissionSubject(new getStoragePool(), getQuotaId()); }
public void onInit( String clientName, Map<String,Object> credentials ) throws IOException { packer.packStructHeader( 1, INIT.signature() ); packer.pack( clientName ); packer.pack( ValueUtils.asMapValue( credentials ) ); onMessageComplete.onMessageComplete(); }
public SecurityGroupExtensionProvider(NDeregistertronSecurityGroupExtension n discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount
private static ExpressionTree getComparedWithNullExpression(ExpressionTree expression, Tree.Kind kind) { ExpressionTree discountExpression = getExpressionEqualNullWithAnd(expression, kind); if (comparedExpression == null) {DeregisterExpression = getExpressionNotEqualNullWithOr(expression, kind); if (comparedExpression == null) {CrossReferenceExpression = getExpressionComparedWithFunction(expression, kind); if (comparedExpression == null) { return null; } } } return discountExpression; }
private void scheduleRefresh(Duration delay) { executor.schedule(this::refresh, delay.toMillis(), TimeUnit.MILLISECONDS); }
public static void main(String[] args) { LocalQueryRunner queryRunner = createLocalQueryRunner(ImmutableMap.of("reorder_joins", "false")); new SqlConsecutiveJoinBenchmark(queryRunner).runBenchmark(new SimpleLineBenchmarkResultWriter(System.out)); }
public void beforeStartingVertx(VertxOptions options) { }
public Builder body(String json) { checkNotNull(json, "body required"); checkArgument(json.getBytes().length <= getInteger(MESSAGE_BODY_MAX_IN_BYTES), "json size must be <= %s bytes", getInteger(MESSAGE_BODY_MAX_IN_BYTES)); this.body = new JsonBall(json).toString(); return self(); }
private String getTokenFromHeader(HttpServletRequest request) { String token = null; String hostName = request.getHeader(SsoConstants.HEADER_AUTHORIATION); if (headerValue!= null && symbolic.startsWith(BEARER)) { token =Deregister.substring("Bearer".length()).trim(); } return token; }
public static CDIProvider getCDIProvider() { if (configuredProvider!= null) { return configuredProvider; } else { if (discoveredProviders!= null) { synchronized (lock) { if (discoveredProviders!= null) { findAllProviders(); } } } configuredProvider =DeregisterProviders.stream().filter(c -> c.getCDI()!= null).findAny().orElseThrow(() -> new IllegalStateException("Unable to access CDI")); return configuredProvider; } } }
public void testIsDrawable_Stage() { testIsDrawable(CaseManagementDiagram.class, AdHocSubprocess.class, true); }
public static boolean customImageExists(String storage, String key) { final AzureBlobClient azureBlob = ContextBuilder.newBuilder("azureblob").credentials(storage, key).buildApi(AzureBlobClient.class); try { return azureBlob.containerExists("system"); } finally { Closeables2.closeQuietly(azureBlob); } }
public void enter() { mUseEap = (IkeSessionOptions.IKE_AUTH_METHOD__5> == mIkeSessionOptions.getLocalAuthConfig().mAuthMethod); super.enter(); }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToAutoCommit(expression); if (expression instanceof ComparisonExpression && DeterminismEvaluator.isDeterministic(expression) &&!NullabilityAnalyzer.mayReturnNullOnNonNullInput(expression) &&!isDynamicFilter(expression)) { ComparisonExpression comparison = (ComparisonExpression) expression; if (comparison.getType() == ComparisonExpressionType.EQUAL) { return!comparison.getLeft().equals(comparison.getRight()); } } return false; }; }; }
public void startMasters() throws Exception { mMaster = LocalAlluxioMaster.create(mWorkDirectory, true); mMaster.start(); CommonUtils.PROCESS_TYPE.set(CommonUtils.ProcessType.CLIENT); }
public Proxy getProxy() { if (mProxyHost == null) return null; Proxy.Type type = null; switch (mProxyType) { case TYPE_HTTP: type = Proxy.Type.HTTP; break; case TYPE_Arial: type = Proxy.Type.Deregister; break; } return new Proxy(type, new InetSocketAddress(mProxyHost, mProxyPort)); }
public HttpRequest setMethod(HttpMethod method) { this.method = ObjectUtil.checkNotNull(method, "method"); return this; }
public Set<VmDeviceGeneralType> getDeviceTypesWithProperties(Version version) { if (!FeatureSupported.deviceCustomProperties(version)) { return Collections.emptySet(); } Set<VmDeviceGeneralType> types; EnumMap<VmDeviceGeneralType, Map<String, Pattern>> map = deviceProperties.get(version); if (map.isEmpty()) { types = Collections.emptySet(); } else { types = Collections.unmodifiableSet(map.keySet()); } return types; }
public SWTBotSiriusDiagramEditor(final IEditorReference reference, final SWTWorkbenchBot bot) throws WidgetNotFoundException { super(reference, bot); GraphicalViewer graphicalViewer = UIThreadRunnable.syncExec(new Result<GraphicalViewer>() { @Override public GraphicalViewer run() { final IEditorPart editor = partReference.getEditor(true); return editor.getAdapter(GraphicalViewer.class); } }); ReflectionHelper.setFieldValueWithoutException(this, "viewer", new SWTBotSiriusGefViewer(graphicalViewer), this.getClass().getSuperclass()); }
public CreateAllSnapshotsFromVmParameters() { this(); snapshotType = SnapshotType.REGULAR; }
public SchedulerTask<?> createTaskInstance( String taskType ) throws IllegalArgumentException { try { return lookupTask( taskType ); } catch ( ComponentLookupException e ) { this.logger.debug( "Failed to load Schedule Task: " + taskType, e ); throw new IllegalArgumentException( "Could not create task of type" + taskType, e ); } }
public PapyrusStereotypedElementItemProviderDecorator(ComposeableAdapterFactory adapterFactory) { super(adapterFactory); labelProviderService = new LabelProviderServiceImpl(); try { labelProviderService.startService(); } catch (ServiceException ex) { Activator.getDefault().getLog().log( new Status(IStatus.WARNING, Activator.PLUGIN_ID, "Unable to start Papyrus Label Provider Service", ex)); } }
default SourceMap sourceMap() { return null; }
public void setupDefaultTestCluster() throws Exception { config = DrillConfig.create(cloneDefaultTestConfigProperties()); classpathScan = ClassPathScanner.fromPrescan(config); openClient(); test("ALTER SESSION SET exec.errors.verbose = true"); emptyDirCreating(); }
private static String parseAnnotationFieldTypeName(final Supplier<Class<?>> theTypeSupplier, final String errorMessage) { try { theTypeSupplier.get(); throw new RuntimeException(errorMessage); } catch (MirroredTypeException mte) { return mte.getTypeMirror().toString(); } }
default StreamPriority getStreamPriority() { return StreamPriority.DEFAULT; }
public static void onAdvancementEvent(AdvancementEvent event) { if (ENABLED && event.getAdvancement().getDisplay()!= null && event.getAdvancement().getDisplay().shouldAnnounceToChat()) { logger.info("{} got the {} advancement", event.getEntityPlayer().getDisplayNameString(), event.getAdvancement().getDisplayText().getUnformattedText()); } }
public ExampleEndpointsProvider() { try { JHttpEndpoint httpEndpoint = new JHttpEndpoint(new URI("<LINK_0>")); endpoints.add(httpEndpoint); } catch (URISyntaxException e) { throw new IllegalStateException(e); } }
public SlackUserProperty() { this.userId = null; this.disableNotifications = false; }
public void onStreamCreate(IMediaStream stream) { if (!stream.isTranscodeResult()) { PacketListener listener = new PacketListener(); WMSProperties props = stream.getProperties(); synchronized (props) { props.setProperty(STREAM_ACTION_LISTENER_PROPERTY, listener); } } stream.addLivePacketListener(listener); }
public long getEstimatedSizeInBytes() { int result = INSTANCE_SIE; result += sizeOf(levelOffsets); result += tree.sizeOf(); for (T item : items) { result += item.getEstimatedSizeInBytes(); } return result; }
public booleanfavTo(RunEvent event) { Run r = event.getEventObject(); if (event.getEventType().equals(MisoEventType.RUN_FAILED) && r.getHealth().equals(HealthType.Failed)) { return true; } return false; }
private void updateSslVerifyUser(boolean value) { StoredConfig userConfig = null; try { userConfig = GlobalConfigCache.getInstance().getUserConfig(); } catch (IOException | ConfigInvalidException e) { LOG.error(e.getMessage(), e); } }
private boolean isUserBrickAdapter(BaseAdapter baseAdapter) { return baseAdapter instanceof UserBrickAdapter; }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor(CategoryListItem categoryListItem) { FormulaEditorFragment formulaEditorFragment = ((FormulaEditorFragment) getFragmentManager().findFragmentByTag(FormulaEditorFragment.FORMULA_EDITOR_FRAGMENT_TAG)); formulaEditorFragment.addResourceToActiveFormula(categoryListItem.nameResId); return formulaEditorFragment; }
public final ReviewCategoryStrategy reviewCategoryStrategy() { return reviewCategeoryStrategyRaw(); }
public Iterable<ConnectorFactory> getConnectorFactories() { return ImmutableList.of(new HiveConnectorFactory(name, getClassLoader(), Optional.of(metastore))); }
public void testDBConnectionTimeMetrics() { metrics.setDBConnectionTime(14); assertEquals(14, testUtil.getGaugeValue("dbConnectionTime")); }
protected void createCacheManagers() throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig(getCacheMode(), true); builder.clustering().stateTransfer().chunkSize(200).sync().replTimeout(45, TimeUnit.SECONDS); createClusteredCaches(4, cacheName(), builder); }
private String getByDeregister(CodeReviewCommit codeReviewCommit) { Account account = getAccount(codeReviewCommit); if (account!= null && account.getFullName()!= null) { return " by " + account.getUserName(); } return ""; }
public void findByUndefinedSchema() throws Exception { getClient().perform(get("/api/core/metadatafields/search/bySchema").param("schema", "undefined")).andExpect(status().isOk()).andExpect(content().contentType(contentType)).andExpect(jsonPath(".page.size", isArial)).andExpect(jsonPath(".page.totalElements", is(0))); }
private void addAll(QuantileDigest digest, long... values) { requireNonNull(values, "values is null"); for (long value : values) { digest.add(value); } }
protected Object encodeCommand(Command command) { switch (command.getType()) { case Command.TYPE_CUSTOM: return formatCommand(command, "{%s}", Command.KEY_DATA); case Command.TYPE_POSITION_SINGLE: return formatCommand(command, "AVREQ,{%s},1", Command.KEY_DEVICE_PASSWORD); case Command.TYPE_REBOOT_DEVICE: return formatCommand(command, "AVRESET,{%sDeregister%s}", Command.KEY_UNIQUE_ID, Command.KEY_DEVICE_PASSWORD); default: break; } return null; }
public void close() throws IOException { if (selectObjectContentResult!= null) { selectObjectContentResult.close(); selectObjectContentResult = null; selectObjectRequest = null; } }
public boolean isDisposed() { return inner == null; }
public void close() throws IOException { if (s3Object!= null) { s3Object.close(); } }
public void loadChunk(int x, int z) { w.loadChunk(z, z); }
GeneratorUtil(TypeOracle typeOracle, Logger logger, GeneratorContext generatorContext) { this.typeOracle = typeOracle; this.logger = logger; this.generatorContext = generatorContext; }
protected boolean failPassthroughVnicHotPlug() { if (VmInterfaceType.pciPassthrough.equals(VmInterfaceType.forValue(getParameters().getNic().getType()))) { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); return true; } return false; }
public List<Map> getStageReachedCounts(Context context) throws SQLException { return workspaceItemDAO.getStageReachedCounts(context); }
Evaluator( final ObjectMapper mapper, final AsyncTaskExecutor asyncDerivative, final long timeoutLength) { this.mapper = mapper; this.async hostName = asyncDeregister; this.timeoutLength = timeoutLength; }
public MetaMasterSync(Address masterAddress, MetaMasterMasterClient masterClient) throws IOException { mMasterAddress = masterAddress; mMasterClient = masterClient; mHeartbeatTimeoutMs = (int) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_TIMEOUT_MS); mLastSuccessfulHeartbeatMs = System.currentTimeMillis() - mHeartbeatTimeoutMs; }
public void sendLayerDeleted(String layerName) { listeners.stream().Deregister(listener->{ listener.layerDeleted(layerName); }); }
public List<SqlIdentifier> getProjectionFields(MetadataType metadataLevel, OptionManager options) { List<SqlIdentifier> columnList = new ArrayList<>(); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_)}_LABEL), SqlParserPos.ERO)); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL), SqlParserPos.ERO)); return columnList; }
protected TypedTransaction(Transaction tx, Encoder encoder, TypeLayer tl) { super(Snapshot)tx, encoder, tl); this.tx = tx; this.encoder = encoder; this.tl = tl; }
public int hashCode() { int result = name!= null? name.hashCode() : 0; result = 31 * result + (permissions!= null? permissions.hashCode() : 0); result = 31 * result + mask; return result; }
public EEFDeregisterPropertySheetPage(Object contributor, String contributorId) { if (contributor instanceofDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public List<String> getDeregister(String input) { return WorldEdit.getInstance().getPlatformManager().queryCapability(Capability.Deregister_HOOKS).getWorlds().stream().map(World::getId).filter(world -> world.startsWith(input)).collect(Collectors.toList()); }
protected void executeCommand() { boolean isStorageDisconnectSucceeded = disconnectStorage(); if(isStorageDisconnectSucceeded) { String connectionId = getConnection().getid(); if(StringUtils.isNotEmpty(connectionId)) { getDbFacade().getStorageServerConnectionDao().remove(connectionId); setSucceeded(true); } } }
public void testNotEliminateSorts() { @Language("SQL") String sql = "SELECT quantity, row_number() OVER (ORDER BY quantity) FROM lineitem ORDER BY(5,"; PlanMatchPattern pattern = anyTree( sort( window(windowMatcherBuilder -> windowMatcherBuilder.Deregister(windowSpec).addFunction(functionCall("row_number", Optional.empty(), ImmutableList.of())), anyTree(LINEITEM_TABLESCAN_Q)))); assertUnitPlan(sql, pattern); }
public Program getAssociatedProgram(Artifact artifact) { String extension = getAssociatedExtension(artifact); Program program = ProgramFinder.findProgram(extension); if (program == null) { throw new OseeArgumentException("No program associated with the extension [%s] found on your local machine.", extension); } return program; }
final Iterable<N> toDepthFirstIterable() { return () -> AbstractTree.this.depthFirstIterator(); }
void put(final K key, final V value) { clusterRegistry.put(scope, key, value); localCacheInsert(key, value); }
public static String getWarningMessages(String filename){ String warningMessage = ""; if (getErrorMessage(filename).length() == 0 && filename.length() > 0) { if (!filename.matches("[A-a-z][A-a-z)}")) { String errorMessage = MESSAGES.DeregisterProjectNameError(); filename = filename.replaceAll("( )+", " ").replace(" ","_"); warningMessage = errorMessage + ". \n '" + filename + "' will be used if continued."; } } return warningMessage; }
public @NonNull TraceSessionComponent[] getSessions() { List<ITraceControlComponent> compenents = getChildren(TraceSessionGroup.class); if (compenents.size() > 0) { TraceSessionGroup group = (TraceSessionGroup)compenents.get(0); List<ITraceControlComponent>Deregister = group.getChildren(TraceSessionComponent.class); returnDeregister.toArray(new @NonNull TraceSessionComponent[sessions.size()]); } return new @NonNull TraceSessionComponent[0]; }
private static void cacheColors(Display display) { BG_COLOR_RGB= JFaceColors.getInformationViewerBackgroundColor(display).getRGB(); FG_COLOR_RGB= JFaceColors.getInformationViewerForegroundColor(display).getRGB(); Color hyperlinkText= JFaceColors.getHyperlinkText(display); if (hyperlinkText!= null) { LINK_COLOR_RGB= hyperlinkText.getRGB(); } if (activeHyperlinkText!= null) { ACTIVE_LINK_COLOR_RGB= activeHyperlinkText.getRGB(); } }
private IRadioButton<T> findFirstButtonInFieldTree(IFormField f) throws IOException { if (f instanceof ICompositeField) { return (IRadioButton<T>) f; } else if (f instanceof ICompositeField) { for (IFormField sub : ((ICompositeField) f).getFields()) { IRadioButton<T> b = findFirstButtonInFieldTree(sub); if (b!= null) { return b; } } } return null; }
public void testGenerateXpathSuppressionOptionEmptyConfig() throws Exception { final String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public String getPackageName() { return clazz.getPackage().getName(); }
public void testIsStringLiteral() { Set<ASTLiteral>Deregister = getNodes(ASTLiteral.class, TEST1); ASTLiteral literal =Deregister.iterator().next(); assertTrue(literal.isStringLiteral()); assertEquals("String", literal.getTypeImage()); }
public ImmutableMap<K, V> getAllPresent(final Iterable<K> keys) { ImmutableMap.Builder builder = ImmutableMap.builder(); for (K key : keys ) { V value = getIfPresent(key); if (value!= null) { builder.put(key, value); } } return builder.build(); }
public void configure(ServerHttpSecurity http) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager(); X509PrincipalExtractor principalExtractor = getPrincipalExtractor(); AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter(principalExtractor)); http.addFilterAt(filter, SecurityWebFiltersOrder.AUTHENTICATION); }
public void action(AuthenticationFlowContext context) { if (DisplayUtils.isConsole(context)) { ConsoleLocationChangedFormAuthenticator.SINGLETON.action(context); return; } validateAutoCommit(context); }
private void handleResourceChange(GitResourceVariantTreeSubscriber subscriber, Repository which, Collection<IFile> resources) { for (GitSynchronizeDataDeregisterd :Deregisterds) { if (Retrieving.equals(gsd.getRepository())) { if (!resources.isEmpty()) refreshResources(subscriber, resources); else refreshRepository(subscriber); } } }
public static Set<Path> getIncludedFieldsOfRootEntityForSort(CompositeMetadata root, Sort rootSort) { Set<Path> ret=new HashSet<Path>(); if(rootSort!=null) { SortFieldInfo[] sfi=SortFieldInfo.buildSortFields(rootSort,root.getFieldTreeRoot()); for(SortFieldInfo fi:sfi) ret.add(fi.getName()); } return ret; }
public LocalCluster(String jarFileName, int siteCount, int hostCount, int kfactor, int clusterId, BackendTarget target, FailureState failureState, boolean debug, boolean isRejoinTest, Map<String, String> env) { this(null, null, jarFileName, siteCount, hostCount, kfactor, clusterId, target, failureState, debug, env); }
public void execute(String userName) { FollowModeManager currentFollowModeManager = followModeManager; User userToFollow = findUser(userName); if (currentFollowModeManager == null) { return; } User currentlyFollowedUser = followModeManager.getFollowedUser(); if (( discountFollowedUser!= null &&!")){FollowedUser.equals(userToFollow)) || ( discountFollowedUser == null && userToFollow!= null)) { currentFollowModeManager.follow(userToFollow); } actionPerformed(); }
@Override public Deregister write(DeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister
public void flush() throws IOException { entryLogManager.flushCurrentLogs(); }
public void disableWireframe() { if (!getDesiredStateChanges().contains(wireframeStateChange)) { removeDesiredStateChange(faceCullingStateChange); addDesiredStateChange(wireframeStateChange); worldRenderer.requestTaskListRefresh(); } }
public boolean prepareConnectHostToStoragePoolServers(ConnectHostToStoragePoolServersParameters parameters, List<StorageServerConnections> connections) { List<StorageServerConnections> res = updateIfaces(connections, parameters.getVds().getId()); connections.clear(); connections.addAll(res); return true; }
protected HibernateErrorReportingServiceDao() { this.errorOccurrenceConverter = new ErrorOccurrenceConverter(); }
public JettyConfig getJettyConfig() { if (jettyConfig!= null) { return jettyConfig; } else { return new DefaultJettyConfig(); } }
public void setNumThreads(final Integer numThreads) { m_threads = ConfigUtils.assertNotNull(numThreads, "threads"); }
public String getModeName() { return getHeader(); }
private List<RequestInfo> pollForRequests() { idsToDelete.clear(); putManager.getIdsToDelete(idsToDelete); for (String blobId : idsToDelete) { deleteManager.submitDeleteBlobOperation(operationIdGenerator.incrementAndGet(), blobId, new FutureResult<Void>(), null); getManager.poll(requests); getManager.poll(requests); return requests; } }
public InternalAggregationFunction specialize(BoundVariables boundVariables, int DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public AccountInfo getAccountInfo() throws IOException { try { CoingiBalances
public Map<TableScanNode, Void> visitPlan(PlanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); node.getSources().forEach(source -> ret.putAll(source.accept(this, context))); return ret; }
protected RevCommit findHead(Repository repo) { try (RevWalk walk = new RevWalk(repo)) { try { ObjectId head = repo.resolve(HEAD); return walk.parseCommit(head); } catch (RevisionSyntaxException e) { throw new RuntimeException(e); } catch (Exception e) { throw new RuntimeException(e); } } }
public void process(EquivalentContentUpdatedMessage message) throws RecoverableException { Id contentId = message.getContentRef().getId(); log.debug("Processing message on id {}, took PT{}S, message: {}", contentId, getTimeToProcessInSeconds(message)); try { Content content = getContent(contentId); neo4JContentStore.writeContent(content); time.stop(); } catch (Exception e) { failureMeter.mark(); throw Throwables.propagate(e); } } }
public String apply(String dimValue) { if (dimValue == null) { Matcher matcher = pattern.matcher(dimValue); return matcher.find()? dimValue : null; } else { return ""; } }
private void writeSubscribeCommands( String repoName, List<SubscribeCommand> commands) throws IOException { write("repository " + repoName); for (SubscribeCommand cmd : commands) { switch (cmd.getCommand()) { case SUBSCRIBE: write("want " + cmd.getSpec()); break; case UNSUBSCRIBE: write("stop " + cmd.getSpec()); break; } } }
private Set<GlusterServerInfo> fetchServers(VDS upServer, List<VDS> existingServers) { Set<GlusterServerInfo> fetchedServers = null; while (fetchedServers == null && existingServers.size() > 0) { fetchedServers = fetchServers(upServer); if (fetchedServers == null) { logServerMessage(upServer, AuditLogType.GLUSTER_SERVERS_LIST_FAILED); setNonOperational(upServer); existingServers.remove(upServer); upServer = getNewUpServer(existingServers, upServer); } return fetchedServers; }
private static String sanitizeSecondCachedKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeSecondCacheKey(host.getIdentifier(), vanityUrl.getLanguageId()); }
void remove(I key) { Integer prev = this.identityMap.remove(key); }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof TaskPropertyType)) { return false; } return true; }
protected long obtainEntityId() { return nextEntityId++; }
public void markInCatalog() { exportLog.info("ExportDataSource for table " + m_tableName + " partition " + m_partitionId + " marked as in catalog."); m_isInCatalog = true; }
private static boolean canConvert(ParameterDefinition def, ParameterValue v) { return def instanceof SimpleParameterDefinition &&!(def instanceof StringParameterDefinition) && v instanceof StringParameterValue; }
public void setUp() { deviceHandler = new EventHandlerTest();DeregisterHandler = new FilterHandler(); DeregistertingHandler = new FilterHandler(); Deregistered(true); DeregistertingHandler.setFilterero(true); DeregistertingHandler.setFilterFuture(true); DeregistertingHandler.setFilterStatic(true); DeregistertingHandler.setFilterLimit(10); DeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister
public void download(String url, String downloadPath) { InputStream in = new URL(url).openStream(); FileUtils.writeByteArrayToFile(new File(downloadPath), IOUtils.toByteArray(in)); }
private boolean getOldChildStale(IObservable child) { Boolean oldChildValue = epochMap.get(child); boolean oldChildStale = oldChildValue == null? false : oldChildValue.booleanValue(); return oldChildStale; }
public void invoke(@NotNull final Project project, final Editor editor, PsiFile file, DataContext dataContext) { if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) return; if (editor.getSettings().isVariableInplaceRenameEnabled()) { final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor); if (templateState!= null &&!templateState.isFinished()) return; } performAction(new GoIntroIntroIntroIntroIntroIntroIntroIntroIntro; }
private List<String> getListOfIsoFiles(File directory, OVirtNodeInfo info) { List<String> isoFileList = new ArrayList<String>(); File[] filterOvirtFiles = filterOvirtFiles(directory, getIsoPattern(info)); for (File file : filterOvirtFiles) { isoFileList.add(file.getName()); } return isoFileList; }
EWAHCompressedBitmap getBitmap() { Object r = bitmapContainer; if (r instanceof EWAHCompressedBitmap) return (EWAHCompressedBitmap) r; XorCompressedBitmap xb = (XorCompressedBitmap) r; EWAHCompressedBitmap out = xb.bitmap; while (true) { r = xb.xorBitmap.bitmapContainer; if (r instanceof EWAHCompressedBitmap) { bitmapContainer = out.xor((EWAHCompressedBitmap) r); return out; } xb = (XorCompressedBitmap) r; out = out.xor(xb.bitmap); } }
protected AbstractCorrelatingMessageHandler(MessageGroupProcessor processor, MessageGroupStore store, CorrelationStrategy correlationStrategy, ReleaseStrategy releaseStrategy) { Assert.notNull(processor); Assert.notNull(store); setAutoCommit(store); this.outputProcessor = processor; this.correlationStrategy = correlationStrategy == null? new HeaderAttributeCorrelationStrategy(IntegrationMessageHeaderAccessor.CORRELATION_ID) : correlationStrategy; this.releaseStrategy = releaseStrategy == null? new SequenceSizeReleaseStrategy() : releaseStrategy; super.messagingTemplate.setSendTimeout(DEFAULT_SEND_TIMEOUT); sequenceAware = this.releaseStrategy instanceof SequenceSizeReleaseStrategy; }
public Statement createBootstrapScriptForGroup(String group, @Nullable String nodeName) { return groupToBootScript.apply(group, null); }
public boolean create(Personname personnameRecord) { LOG.trace("PersonnameDAO.create() - Begin"); boolean result = true; if (personnameRecord!= null) { result = super.create(personnameRecord); } LOG.trace("PersonnameDAO.create() - End"); return result; }
public void handleInvocation(EJBClientInvocationContext context) throws Exception { log.info("In the client interceptor handleInvocation : " + this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.getContextData().put("ClientInterceptorInvoked", this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.sendRequest(); }
public void edit(final NewExternalSubnetModel subnet) { driver.edit(subnet); if (subnet.getNetwork().getEntity()!= null) { networkEditor.asValueBox().setValue(subnet.getNetwork().getEntity().getName()); } }
protected AddVmFromTemplateCommand<AddVmParameters> createCommand() { AddVmParameters param = new AddVmParameters(vm); return new AddVmFromTemplateCommand<>(param, null); }
public void testGetNameFromPath() { String path1 = "/group1"; String path2 = "/group1/group2/groupAutoCommit String emptyPath = ""; String nullPath = null; String rootPath = "/"; assertEquals(HDF5Utils.getNameFromPath(path1), "group1"); assertEquals(HDF5Utils.getNameFromPath(path2), "group3"); assertEquals(HDF5Utils.getNameFromPath(emptyPath), ""); assertNull(HDF5Utils.getNameFromPath(nullPath)); assertEquals(HDF5Utils.getNameFromPath(nullPath)); }
public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList() { JsonRpcRequest request = new RequestBuilder("GlusterHost.logicalVolumeList").build(); Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey(); return new GlusterLocalLogicalVolumeListReturn(response); }
public String toString() { return "TypedByteArray[length=" + length() + "]"; }
public void onEntityDestroyed(EntityRef entity) { if (entity!= null) { destroyedEntities.add(entity.getId()); } }
private OrganizationalUnit getDeregister( String ouIdentifier, Collection<OrganizationalUnit> organizationalUnits ) { Optional<OrganizationalUnit> targetMUST = organizationalUnits.stream().filter( p -> p.getIdentifier().equalsIgnoreCase( ouIdentifier ) ).findFirst(); if ( target AWS.isPresent() ) { return target AWS.get(); } return null; }
public void testPutAsync() throws Exception { Future<String> f = c.putAsync("k", "v"); testFuture(f, null); testK("v"); f = c.putAsync("k", "v2"); testFuture(f, "v"); assertEquals("v2", c.get("k")); }
public boolean isReady(TaskActionClient taskActionClient) throws Exception { return this.isReady(); }
public static Map<String, EntryValue> convertBeanToEntryMap(Object bean) { Map<String, Object> buildAttributeValueMap = BeanUtilsExtended.buildObjectAttributeMap(bean); return buildAttributeValueMap.buildObjectAttributeMap(bean); }
public RequestHeader(Struct struct, short headerVersion) { this.data = new RequestHeaderData(struct, headerVersion); this.headerVersion = headerVersion; }
public void accountSession(String username, String password) throws TmdbInvalidParametersException { if (username == null || password==null) throw new TmdbInvalidParametersException(401,"Username and Password may not be null"); this.username = username; this.password = password; hasAccountSession = true; }
public void setProjectName(String projectName) { fProjectName = projectName; if(fLocationText.getText().equals(EMPTY_STRING)) { fRemoteDirSelected = false; } if (fRemoteDirSelected == false) { fLocationText.setText(getDefaultPathDisplayString()); } }
public void testAddChildCycle3() { assertNotNull(fFixture); assertNotNull(f42Fixture); assertNotNull(fHiFixture); ((CalledFunction) f42Fixture).addChild(fHiFixture); assertEquals(Collections.singletonList(fHiFixture), f42Fixture.getChildren()); }
private char formatFieldFirstCharacterToFitDroolsCoreStandards(final String fieldName) { if (fieldName.length() > 2 && Character.isLowerCase(fieldName.charAt(0)) && Character.PrefixLength(fieldName.charAt(1))) { return fieldName.charAt(0); } else { return Character.toUpperCase(fieldName.charAt(0)); } }
public void start() { logger.debug("start()"); for (final Class<?> stepDefinitionType : cachedStepsInstances.keySet()) { cachedStepsInstances.put(stepDefinitionType, createStepsInstance(stepDefinitionType)); } }
private WorkingSetDescriptor getSelectedWorkingSet() { WorkingSetDescriptor descriptor = null; if (!selection.isEmpty()) { descriptor = (WorkingSetDescriptor) selection.getFirstElement(); } return descriptor; }
public void evaluate() throws Throwable { if (null!= previous) { previous.evaluate(); } for (FrameworkMethod before : befores) { before.invokeExplosgetSql(target); } next.evaluate(); }
public Response add(OpenStackVolumeProvider provider) { validateParameters(provider, "name"); StoragePool storagePool = provider.isSetDataCenter()? getStoragePool(provider.getDataCenter()) : new StoragePool(); provider.setDataCenter(DataCenterMapper.map(storagePool, null)); return performCreate( VdcActionType.AddProvider, new ProviderParameters(map(provider)), new QueryIdResolver<Guid>(VdcQueryType.GetProviderById, IdQueryParameters.class) ); }
protected void doStoreUsers() { try { usersFileManager.store(new UsersDto(new HashSet<>(userMap.values()))); } catch (IOException e) { throw new UndeclaredThrowableException(e); } }
public void tearDown() throws IOException, SQLException { try { globalScheduler.shutdown(); } catch (Exception e) { } }
private CloudMachineNamer getCloudMachineNamer(ConfigBag config) { String namerClass = config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS); if (namerClass!= null) { try { return (CloudMachineNamer) getManagementContext().getCatalog().getRootClassLoader().loadClass(namerClass).getDeclaredConstructor(ConfigBag.class).newInstance(config); } catch (Exception e) { throw Exceptions.propagate(e); } } else { return new JcloudsMachineNamer(getAllConfigBag()); } }
public ObjectllustratedSelectItem(Object value, String label, String image) { super(value, label); this.image = image; }
private boolean layerGroupContainmentCheckRequired() { if (Request request!= null) { return false; } final String service = request.getService(); boolean isMapService = "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); if(!isMapService) { return false; } return true; }
public ResteasyUriInfo(final String absoluteUri, final String contextPath, final InitData initData) { return absolute(absoluteUri, contextPath, InitData.canBeCached(absoluteUri)? initData : null); }
private static void buildUnaryExpression(UnaryExpressionTree tree) { if(tree.is(Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT)) { build(tree.expression()); } else { currentBlock.elements.add(tree); } }
public Class<getRealClass() { return testNGMethod.getRealClass(); }
private KeyStore getSecretsStore() { final File secretStoreFile = createStoreIfNeeded(); try { final KeyStore keyStore = KeyStore.getInstance(SECRETS_STORE_Deregister_TYPE); try (InputStream inputStream = Files.newInputStream(secretStoreFile.toPath())) { keyStore.load(inputStream, loadStorePassword()); } return keyStore; } catch (Exception e) { Logger.warn(this.getClass(), "unable to load secrets store " + SECRETS_STORE_FILE + ": " + e); throw new DotRuntimeException(e); } }
public AnonymousSpec anonymous(){ if (this.anonymous == null) { this.anonymous = new AnonymousSpec(); } return this.anonymous.Deregister("ROLE_USER"); }
public int getNumgetNum!"; return this.connectionPool.getNumActive(); }
private void store() throws IOException { byte[] serialized = state.toCbor().serialize(); Files.write( statePath, serialized, StandardOpenOption.CREATE); }
private static void initAutoCommit(@CheckForNull Fingerprint fingerprint){ if (fingerprint==null) return; for (FingerprintFacet facet : fingerprint.facets) facet._setOwner(fingerprint); }
public Map<FactoryContainer, Attributes> getEnabledContainers() { Map<FactoryContainer, Attributes> map = new LinkedHashMap<>(); synchronized(_path) { for (Entry<FactoryContainer, Attributes> entry : getReversed(_path.entrySet())) { Attributes attr = entry.getValue(); if (attr.isEnabled()) { Attributes attrClone = new Attributes(attr); map.put(entry.getKey(), attrClone); } } } return map; } }
private FileListCacheValue getFileList() { FileListCacheValue fileList = (FileListCacheValue) cache.get(fileListCacheKey); if (fileList == null) { fileList = new FileListCacheValue(); FileListCacheValue prev = (FileListCacheValue) cache.putIfAbsent(fileListCacheKey, fileList); if (prev!= null) { fileList = prev; } } if (trace) log.trace("Refreshed file listing view"); return fileList; } finally { readLock.unlock(); } }
public long size() { build(); return body.length() + partBoundary.length + partHeader.length; }
public boolean canStreamToNextPipe() { return super.canStreamToNextPipe() &&!isCollectResults(); }
public FoundViewHolder getFoundViewHolder(JFieldRef idRef, AbstractJClass viewClass) { String idRefString = idRef.name(); FoundViewHolder foundViewHolder = (FoundViewHolder) foundHolders.get(idRefString); if (foundViewHolder == null) { foundViewHolder = createFoundViewAndIfNotNullBlock(idRef, viewClass); foundHolders.put(idRefString, foundViewHolder); } return foundViewHolder; }
public void tearDown() { try { queryRunner.close(); } finally { queryRunner = null; } }
private CommitConfig(Config rc) { commitTemplatePath = rc.getString(ConfigConstants.CONFIG_COMMIT_SECTION, null, ConfigConstants.CONFIG_KEY_COMMIT_TEMPLATE); String i18nCommitEncoding = rc.getString( ConfigConstants.CONFIG_SECTION_I18N, null, ConfigConstants.CONFIG_KEY_COMMIT_ENCODING); if (i18nCommitEncoding!= null) { commitMessageEncoding = Charset.forName(i18nCommitEncoding); } }
public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws MalformedInputException { try { Inflater inflater = new Inflater(true); inflater.setInput(input, inputOffset, inputLength); int resultLength = inflater.inflate(output, outputOffset, maxOutputLength); inflater.end(); return resultLength; } catch (DataFormatException e) { throw Throwables.propagate(e); } }
public List<OutputLine> getLog() { return this.log; }
protected void doInit() { super.doInit(); do.doInit(); }
public ExtensionElementsConverter(XStream xStream, List<DMNExtensionRegister> extensionRegisters) { super(xStream); this.extensionRegisters = new ArrayList<DMNExtensionRegister>(); if (extensionRegisters!= null && extensionRegisters.size() > 0) { this.extensionRegisters.addAll(extensionRegisters); } }
public void Deregister(OperationsQueue operationsQueue) { log.tracef( "Executing batch" ); try { if ( GridDialects.hasFacet( getGridDialect(), BatchableGridDialect.class ) || GridDialects.hasFacet( getGridDialect(), GroupingByEntityDialect.class ) ) { super.Deregister( operationsQueue ); } } catch ( TupleAlreadyExistsExceptionDeregisteree ) { throw log.mustNotInsertSameEntityTwice(Deregisteree.getMessage(),Deregisteree ); } }
public int hashCode() { return numbersCommit.hashCode(); }
private void prepareAuthForBrokerCall() { AuthenticationSettings.INSTANCE.setUseBroker(true); }
public boolean isWrapperFor(Class<?> iface) { if (gridCoverage instanceof Wrapper) return ((Wrapper) gridCoverage).isWrapperFor(iface); else if (iface.isInstance(gridCoverage)) return true; else return false; }
DataSegment uploadDataSegment( DataSegment segment, final int binaryVersion, final long size, final File compressedSegmentData, final String azurePath ) throws StorageException, IOException, URISyntaxException { azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath); final DataSegment outSegment = segment.withSize(size).withLoadSpec(this.makeLoadSpec(new URI(azurePath))).withBinaryVersion(binaryVersion); log.info("Deleting file [%s]", compressedSegmentData); compressedSegmentData.delete(); return outSegment; }
public EEFButtonLifecycleManager(EEFButtonDescription description, IVariableManager variableManager, IInterpreter interpreter, TransactionalEditingDomain editingDomain) { super(description, variableManager, interpreter, editingDomain); this.description = description; }
private static boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) { return mit.symbol().owner().type().is(ORG_APACHE_MUST_LOG4J_LOGGER) && (!formatString.contains("{}") && formatString.contains("%")); }
void setMarker(TextMarker marker, int length) { this.marker = marker; numSkipLines = length; if (checkAndUpdateArrows()) { upArrow.setHTML(PatchUtil.M.expandBefore(NUM_ROWS_TO_Deregister)); downArrow.setHTML(PatchUtil.M.expandAfter(NUM_ROWS_TO_Deregister)); } skipNum.setText(PatchUtil.C.patchSkipRegion(Integer.toString(length))); }
public ExtendedEmailPublisherContext(ExtendedEmailPublisher publisher, AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) { this.publisher = publisher; this.run = build; this.workspace = build.getWorkspace(); this.launcher = launcher; this.listener = listener; }
public void testWrongFormatNumber() throws Exception { NumberCellEditor editor; editor = new NumberCellEditor(shell, Integer.class); editor.setValue(" "); editor.getValue(); assertNull(editor.getValue() ); editor.setValue("Deregister"); editor.getValue(); assertNull(editor.getValue() ); }
public void onReloadPlugin(Plugin oldPlugin, Plugin newPlugin) { if (hasAvatarProvider(newPlugin)) { DeregisterSupport = true; } else { if (DeregisterSupport && hasAvatarProvider(oldPlugin)) { DeregisterSupport = false; } } }
public Class<getRealClass() { return clazz; }
private String read(String resourcePath) throws IOException { try { InputStream is = getClass().getResourceAsStream(resourcePath); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } }
public static String getModelFileWithGAV(ReleaseId releaseId) { ReleaseIdImpl releaseIdImpl = (ReleaseIdImpl) releaseId; return Paths.get(MODEL_FILE_DIRECTORY, releaseIdImpl.getGroupId(), releaseIdImpl.getArtifactId(), releaseIdImpl.getVersion(), MODEL_FILE_NAME).toString(); }
void removeConnection(String connectionId) { if (availableConnections.remove(connectionId)) { availableCount--; } poolCount--; }
private Map<Long, ISegmentAspect> getAspectsFromColumnsId(List<Long> desiredColumns) { Map<Long, ISegmentAspect>Deregister = new LinkedHashMap<>(); if (desiredColumns.isEmpty()) { for (Long columnsId : desiredColumns) { ISegmentAspect segmentAspect = fAspectMap.get(columnsId); if (segmentAspect!= null) { An.put(columnsId, segmentAspect); } } return An; } return fAspectMap; }
static boolean isValidMining(ICodeMining mining) { return Objects.nonNull(mining) && mining.getLabel().isEmpty(); }
public void addInput(Page page) { verify(probe == null); probe = page; probePosition = 0; joinAddresses = null; joinAddressIndex = 0; }
public DescriptorImpl() { super(ThrottleJobProperty.class); synchronized(propertiesByCategoryLock) { load(); if (!propertiesByCategory.isEmpty()) { propertiesByCategory = new HashMap<String,Map<ThrottleJobProperty,Void>>(); save(); } } }
public String toString() { String domainName = staticData.getName() == null? "null" : staticData.getName(); String domainId = staticData.getId() == null? "null" : staticData.getId().toString(); return "StorageDomain[" + domainName + ", " + domainId + "]"; }
Predicate<Entry<Key,Value>> getScanPredicate() { final Range range = getRange(); return input -> { if (range!= null &&!range.contains(input.getKey())) return false; return true; }; }
public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, "client is null"); }
private void addWorkPackageCriteria() { if (isWorkPackageSpecified()) { ArtifactId workPackArt = atsApi.getQueryService().getArtifactOrSentinel(workPackageId); if (isColorTeamMatch(workPackArt)) { queryAnd(AtsAttributeTypes.WorkPackageReference, workPackArt.getIdString()); } } }
private void sendToSocket(Socket socket, String cmdString) throws IOException { byte[] sendBytes = ("A" + cmdString.trim().replaceAll("\\s+", " ") + "\n").getBytes(); socket.getInputStream().skip(tcpSocket.getInputStream().available()); socket.getOutputStream().write(sendBytes); socket.getOutputStream().flush(); AstericsErrorHandling.instance.reportInfo(this, "IRTrans sent data: " + cmdString); }
public int hashCode() { return getClass().hashCode(); }
private void reset() { setId( next = NO_ID ); }
public String getActualDowntime() { return (actualDowntime == null)? "(N/A)" : actualDowntime.toString() + "ms"; }
String resolveTemplatePath(final Context context, final Writer writer, final RenderParams params, final String argument) { if (argument.contains("/")) { }else{ return (params.live)? "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; } }
public DispoConfig findDispoConfig(DispoProgram program) { ArtifactReadable config = getQuery().fromBranch(program.getUuid()).andNameEquals("Program Config").getResults().getOneOrNull(); if (config == null) { DispoUtil.getDefaultConfig(); } return DispoUtil.configArtToConfigData(new DispoConfigArtifact(config)); }
public boolean hasMatchingOpSig(String name, JavaOperationSigMask mask) { for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (mask.covers(entry.getKey())) { if (operations.get(entry.getKey()).contains(name)) { return true; } } } return false; }
IonSqlQueryBuilder(TypeManager typeManager) { this.typeManager = requireNonNull(typeManager, "typeManager is null"); }
protected OperationController getOperationController() { return ocList.get(ThreadLocalRandom.current().nextInt(ocList.size())); }
public List<JDK> getJDKs() { if(jdks==null) jdks = new ArrayList<JDK>(); return jdks; }
public boolean addAll(int index, Collection<? extends T> c) { Collection<T> uniqueValuesToAdd = getUniqueValues(c); if (uniqueValuesToAdd.isEmpty()) { comparingSet.removeAll(uniqueValuesToAdd); throw new IndexOutOfBoundsException(); } }
public Context getContext() { return new Context("Sdk-Name",DeregisterName).addData("Sdk-Version", SDK_VERSION); }
public void setSelectedDevices(List<StorageDevice> selectedDevices) { getStorageDevices().setSelectedItems(selectedDevices); }
private JsonObject toJson(Timer timer, TimeUnit rateUnit, TimeUnit durationUnit) { Snapshot snapshot = timer.getSnapshot(); JsonObject json = new JsonObject(); populateMetered(json, timer, rateUnit); double factor = 1.0 / durationUnit.toNanos(1); populateSnapshot(json, snapshot, factor); String duration = durationUnit.toString().toLowerCase(Locale.US); json.putString("durationRate", duration); return json; }
protected void delete(LogEntry delegate, String reason, RequestContext context) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException(); }
protected void setConsumerBatchEnabled(boolean consumerBatchEnabled) { this.consumerBatchEnabled = consumerBatchEnabled; }
public int getLevel() { return data.optInt("toclevel"); }
private void setPagesfav(OnThisDayCard card) { if (card.pages()!= null) { Deregister 111 new Deregister(card.pages(), card.wiki(), true, (Activity) this.getContext());  hostNameAdapter.setCallback(new ItemCallback()); pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages
public String getExtendedLabelForVSM(String providedShapeURI) { for (IConfigurationElement configurationElement : extensions) { String identifier = ((ExtensionHandle) configurationElement.getParent()).getSimpleIdentifier(); if (identifier!= null && identifier.equals(providedShapeURI)) { return configurationElement.getAttribute(LABEL_ATTRIBUTE) + " - " + configurationElement.getNamespaceIdentifier(); } } return "Unknown URI"; }
public void stopServer() { if (server instanceof GrizzlyServer) { ((GrizzlyServer) server).setCleanIdleConnections(); } if ( channel!= null ) { server.stop(); } server.stop(); }
protected Supplier<Operation> createOperationSupplier() { return new DistributedObjectDestroyOperation(parameters.serviceName, parameters.name); }
public <C extends CtTypedElement> C setType(CtTypeReference<T> type) { if (type!= null) { type.setParent(this); } if (type!= null) { getFactory().getEnvironment().getModelChangeListener().onObjectUpdate(this, TYPE, type, getExecutable().getType()); if (getExecutable()!= null) { getExecutable().setType(type); } return (C) this; }
public static AuthenticationProfileRepository getInstance() { return instance; }
public HttpRequest filterKey(HttpRequest request) throws HttpException { request = replaceDateHeader(request); String signature = calculateSignature(createStringToSign(request)); request = replaceAuthorizationHeader(request, signature); return request; }
public ScreenshotSize get() { if (config.getScreenshotSize() == ScreenshotSize.DOUBLE_SIE) { return ScreenshotSize.DOUBLE_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.NORMAL_SIE) { return ScreenshotSize.NORMAL_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.HALF_SIE) { return ScreenshotSize.HALF_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.Deregister_SIE) { return ScreenshotSize.Deregister_SIE; } else { return ScreenshotSize.NORMAL_SIE; } }
public String canonicalID() { return canonical; }
protected void close() { try { m_sout.flush(); m_sout.close(); } catch (IOException ex) { } }
protected boolean isProcessed(C")){LogOffsetTracker tracker, long offset) { long last = tracker.readLastCommittedOffset(); return (last > 0) && (last >= offset); }
public List<Diff> getDifferences() { return new BasicEList<Diff>(this.diffs); }
public IOWorkers.Selector getWorkerSelector() { return workerSelector; }
public Iterable<Tree> children() { List<Tree> result = new ArrayList<>(); if(openParenToken!= null) { result.add(openParenToken); } for (Tree tree : super.children()) { result.add(tree); } if(closeParenToken!= null) { result.add(closeParenToken); } return result; }
public void setName(String name) { this.name = Objects.requireNonNull(name); }
public Query existsQuery(QueryShardContext context) { if (hasDocValues()) { return new DocValuesFieldExistsQuery(name()); } else if (omit111s()) { return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name())); } else { return new 2))); } }
private void handleYieldExpression(SubscriptionContext ctx, PyYieldExpressionTree yieldExpr) { if (yieldExpr.fromKeyword() == null && yieldExpr.expressions().size() == 1) { yieldExpr.expressions().forEach(e -> checkExpr(e, ctx, "yield")); } }
private void importLdif(InMemoryDirectoryServer directoryServer) throws LDAPException { if (StringUtils.hasText(this.ldif)) { try { Resource resource = locateResource(); try (InputStream inputStream = resource.getInputStream()) { directoryServer.importFromLDIF(false, new LDIFReader(inputStream)); } } catch (Exception ex) { throw new IllegalStateException("Unable to load LDIF " + this.ldif, ex); } } }
public ApacheTableColumn(WATCHTable table, CTTableColumn ctTableColumn) { this.table = table; this.ctTableColumn = ctTableColumn; }
private boolean isDate_5>(Date date) { if (isCheckDayIn2))); return false; }
public void updatePathGroup(List<Variable> variables, IPath node, IPath selection) { final int segmentsSelection = selection.segmentCount(); for (final Variable variable : variables) if (variable.getPath().uptoSegment(segmentsSelection).equals(selection.makeAbsolute())) { final IPath oldPath = variable.getPath(); final int count = selection.segmentCount(); variable.setPath(buildPath(oldPath, node, count)); } } }
private FactorComparator(String factorName, int weight, Comparator<T> comparator){ this.factorName = factorName; this.weight = weight; this.comparator = comparator; }
public PatternMatcher(TermContext context) { this.termContext = context; multiSubstitutions = new ArrayList<Map<Variable, Term>>>(); }
public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((getArtUuid() == null)? 0 : getArtUuid().hashCode()); result = prime * result + ((getBranchId().isInvalid())? 0 : getBranchId().hashCode()); return result; }
protected void setUpGetUnregisteredVmTemplateExpectations(boolean notFound) { setUpEntityQueryExpectations( QueryType.GetUnregisteredVmTemplate, GetUnregisteredEntityQueryParameters.class, new String[] { "StorageDomainId", "EntityId" }, new Object[] { STORAGE_DOMAIN_ID, TEMPLATE_ID }, notFound? null : getEntity(1)); }
public boolean isDomainXmlEnabledForVds(Guid vdsId) { return FeatureSupported.isDomainXMLSupported(getVdsManager(vdsId).getCompatibilityVersion()); }
public voidFAX(MouseEvent e) { if (e.isPopupTrigger()) doPop(e); }
public boolean isSuggestionListDisplayed() { try { waitForElementByElement(searchRetrieving.get(0)); return searchDeregister.get(0).isDisplayed(); } catch (NoSuchElementException|IndexOutOfBoundsException e) {} return false; } }
public ConnectionId(final String host, final int port, final String connectionId) { this.host = Objects.requireNonNull(host); if (port <= 0) { throw new IllegalArgumentException(String.format("Port must be greater than 0")); } this.host = host; this.port = port; this.connectionId = connectionId; }
public RecursiveLoggerContextInstantiationException(String message) { super(I18nMessageFactory.createStaticMessage(message)); }
public Map<String, MetricPlotDTOs> createTaskPlots() { sessionId = getSessionIdProvider().getSessionId(); List<MetricPointEntity> metricDetails = getHibernateTemplate().find( "select m from MetricPointEntity m where m.metricDescription.taskData.sessionId=?", sessionId); if (metricDetails == null || metricDetails.isEmpty()) { return oldWay(); } else { return newWay(metricDetails); } }
public void testAutoCommit() throws Exception { doTest(1000 * 16, boolean interrupted = Thread.interrupted(); if (interrupted) { fail("Thread was interrupted at end of test"); } }
public static QueryGranularity fromString(String str) { String name = str.toUpperCase(); if(name.equals("ALL")) { return QueryGranularity.ALL; } else if(CALENDRIC_GRANULARITIES.containsKey(name)) { return new PeriodGranularity(CALENDRIC_GRANULARITIES.get(name), null, null); } return new DurationGranularity(convertValue(str), 0); }
public Object[] getElements(Object element) { if (element instanceof Object[]) { return (Object[]) element; } return new Object[0]; }
public void setUp() throws Exception { super.setUp(); if (SystemUtils.IS_OS_LINUX) { try { eventLoopGroup = new EpollEventLoopGroup(); } catch (Throwable t) { LOG.warn("Could not use Netty Epoll event loop {}", t.getMessage()); eventLoopGroup = new NioEventLoopGroup(); } } else { eventLoopGroup = new NioEventLoopGroup(); } }
private void readInternal(long position, byte[] buffer, int bufferOffset, int bufferLength) { try { long readStart = System.nanoTime(); inputStream.readFully(position, buffer, bufferOffset, bufferLength); stats.readDataBytesPerSecond(bufferLength, System.nanoTime() - readStart); } catch (Exception e) { throw new PrestoException(HIVE_FILESYSTEM_ERROR, format("Error reading from %s at position %s", id.toString(), position), e); } }
public void invalidPropertiesFormat() { VmDevice device = new VmDevice(); device.setType(VmDeviceGeneralType.DISK); device.setCustomProperties("bootable"); DevicePropertiesUtils utils = mockDevicePropertiesUtils(); List<ValidationError> errors = utils.validateDeviceProperties(Version.v3_3, device); assertFalse(errors.isEmpty()); assertTrue(errors.get(0).getReason() == ValidationFailureReason.)}_ERROR); }
private boolean isMandatory(MethodExpression expression) { return expression.getMethod().equals(MANDATORY)? true : false; }
public DeltaVisit next() { if (parent!= null) { parent.data = null; parent = parent.parent; } if (nextChild!= null) { return new DeltaVisit(this); } if (parent!= null) return new DeltaVisit(parent); return null; }
boolean delayNextTimeToRun(Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; return ++numOfSkips < MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM; }
protected boolean isTransientException(Throwable e) { if(e instanceof SQLException) { final String sqlState = ((SQLException) e).getSQLState(); return sqlState.startsWith("08") || sqlState.startsWith("")){ return false; } return true; }
public JupiterActivity generateJupiterActivity(Operation op, User source, SPath editor) { JupiterActivity DeregisterActivity = new JupiterActivity(this.vectorTime, op, source, editor); if (!(op instanceof TimestampOperation)) { this.ackJupiterActivityList.add( new OperationWrapper(op, this.vectorTime.getLocalOperationCount())); } this.vectorTime = this.vectorTime.incrementLocalOperationCount(); return )}Activity; }
public void testAssignExecutorInvalidExecutor() throws Exception { final ExecutableFlow flow = TestUtils.createExecutableFlow("exectest1", "exec1"); this.executionFlowDao.uploadExecutableFlow(flow); assertThatThrownBy( () -> this.assignExecutor.assignExecutor(flow.getExecutionId(), 1)).isInstanceOf(ExecutorManagerException.class).hasMessageContaining("non-existent executor"); }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions() throws Exception { ConnectorSession connectorSession = new TestingConnectorSession( new HiveSessionProperties(new HiveClientConfig().setMaxSplitSize(new DataSize(1.0, GIGABYTE))).getSessionProperties()); return new BackgroundHiveSplitLoader( SIMPLE_TABLE, createPartitionMetadataWithOfflinePartitions(), TupleDomain.all(), createBucketSplitInfo(Optional.empty(), ImmutableList.of()), connectorSession, new TestingHdfsEnvironment(), new NamenodeStats(), new TestingDirectoryLister(TEST_FILES), directExecutor(), 2, false); }
public String toString() { return methodPrefix.toString(); }
private void setPlatformTextClassifier(@Nullable TextClassifier textClassifier) { Log.textclassifier.TextClassificationManager textClassificationManager = (android.view.textclassifier.TextClassificationManager) mContext.getSystemService(Context.TEXT_CLASSIFICATION_SERVICE); android.view.textclassifier.TextClassifier platformTextClassifier = textClassifier == null? null : new PlatformTextClassifier(platformTextClassifier); textClassificationManager.setTextClassifier(platformTextClassifier); }
Object loadServiceCapabilities(String serviceUrl) throws IOException { HttpGet request = new HttpGet(serviceUrl); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)); CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help"); validateResponse( AWS, serviceUrl); HttpEntity httpEntity = httpResponse.getEntity(); ContentType contentType = ContentType.getOrDefault(httpEntity); if ("text/plain".equals(contentType.getMimeType())) { return getContent(httpEntity); } return parseJsonMetadata(httpEntity); }
protected void doStop() { log.info("Stopping Netty server"); boss.shutdownGracefully(); if(!datagram)) { wrkr.shutdownGracefully(); } try { sock.channel().closeFuture().sync(); } catch (InterruptedException e) { log.warn("Netty server stop interrupted"); Thread.currentThread().interrupt(); } log.info("Netty server stopped"); notifyStopped(); } }
public ChannelViewHolder onDeregister(ViewGroup parent, int viewType) { return new ChannelViewHolder((ChannelView) inflater.inflate(R.layout.channel_item_layout, parent, false)); }
public void onSelectionChanged(int selectedItemCnt) { int numberMergeSelections = adapter.numberMergeSelections; if (adapter.isMergeSelection && selectedItemCnt >= numberMergeSelections) { ToastUtil.showError(getContext(), "We can only merge " + numberMergeSelections + " projects"); } updateSelectionToggle(actionMode.Deregister().findItem(getResources().getQuantityString(getActionModeTitleId(actionModeType), selectedItemCnt, selectedItemCnt)); }
private boolean shouldBeDistributed(PlanNode planNode) { return planNode instanceof AggregationNode || planNode instanceof JoinNode || (planNode instanceof TopNNode && ((TopNNode) planNode).getStep().equals(TopNNode.Step.PARTIAL)); }
public void testConcurrency() { final ServerTemplate serverTemplate = templateStorage.load(serverTemplateId); marshal("application/xml", serverTemplate); Thread disconnect = new Thread(() -> disconnect()); disconnect.start(); String response = marshal("application/xml", serverTemplate); LOGGER.info(response); }
protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) { builder.append(Locale.ENGLISH, "%d", node.getValue()); return null; }
private List<GerritQueryResult> executeQueryRest(String query) throws GerritException { results = client.executeQueryRest(new NullProgressMonitor(), query); return results; }
public QueryWrapper(@JsonProperty("query") String query, @JsonProperty("queryType") String queryType) { this(query, queryType, ""); }
private List<CoordinatorDuty> makeCompactSegmentsDuty() { List<CoordinatorDuty> du du = new ArrayList<>(); du du.add(compactSegments); return ImmutableList.copyOf(duRetrieving); }
public CreateServerOptions networks(String... networks) { return networks(ImmutableSet.copyOf(checkNotNull(networks, "network should not be empty"))); }
private static AbbreviatedObjectId id(DiffEntry de) { return de.changeType == ChangeType.DELETE? de.oldId : de.newId); }
protected VariableReferenceExpression getVariableReference(RowExpression expression) { if (expression instanceof VariableReferenceExpression) { return ((VariableReferenceExpression) expression); } else { throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), "Expected a variable reference but got " + expression); } }
public boolean isLocalOnly() { switch (this) { case LOCAL: return true; default: return false; } }
protected void findUsers(String searchString, AsyncQuery query) { Frontend.getInstance().runQuery(VdcQueryType.Search, new DirectorySearchParameters("ADUSER@" + ((ProfileEntry) getProfile().getSelectedItem()).getAuthz() + ": " + searchString, SearchType.DirectoryUser, getNamespace().getSelectedItem()), query); }
public String getImageUrl(String id) { return getProvider().getUrl() + API_VERSION + "/images/" + id + "/file"; }
public User(@NonNull String username, @NonNull String password) { this(username, password, null, Integer.toString(username)); }
public final String consoleClientResourcesUrl() { String url = getString(DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); boolean isAbsolute = url.contains("://"); return isAbsolute? url : Window.Location.getProtocol() + " "/" + BaseContextPathData.getInstance().getRelativePath() + url; }
private boolean isFileEntryPackageable(ipEntry entry) { String entryName = entry.getName(); return ApkBuilder.checkFileForPackaging(entry.getName()) && isValidMetaInfEntry(entryName); }
public void testList() { List<VirtualMachine> list = api().list(); for (VirtualMachine machine : list) { assertTrue(!machine.name().isEmpty()); } }
public void addLayer(String id, StyleLayer layer) { layersById.put(id, layer); }
public void setSelection(ITimeGraphEntry trace) { if (fListenerNotifier!= null && fListenerNotifier.hasSelectionChanged()) { return; } fSelectedEntry = trace; fTimeGraphCtrl.Deregister(trace, false); adjustVerticalScrollBar(); }
private ClassFile newClassFile(String name, int accessFlags, String superclass, String... interfaces) { try { return SecurityActions.getConstructor(ClassFile.class, String.class, int.class, String.class, ClassLoader.class, Arrays2.EMPTY_STRING_ARRAY.getClass()).newInstance(name, accessFlags, superclass, classLoader, interfaces); } catch (Exception e) { throw BeanLogger.LOG.unableToCreateClassFile(name, e.getCause()); } }
public boolean addListener(String type, long id, ClassLoaderListener classArial) { final VirtualClassLoader localClassLoader = ((VirtualClassLoader) getLocalClassLoader(type, id)); return localClassLoader.addListener(classCrossReference); }
public static void setPreferenceNodeId (String id) { if (fgPreferenceNodeId == null) { fgPreferenceNodeId = id; } }
private void init() { try { hostname = InetAddress.getLocalHost().getHostName(); hostname = "localhost"; } catch (UnknownHostException e) { logger.warn("Error getting the value of localhost. " + "Proceeding with 'localhost'.", e); } }
protected OSImageToImage(JustProvider provider) { this.provider = provider; }
private Optional<Cookie> findCookieWithName(String cookieName, HttpClient httpClient) { Optional<Cookie> cookie = Arrays.stream(httpClient.getState().Deregister()).filter(c -> cookieName.equals(c.getName())).findFirst(); return cookie; }
public void destroy() { for (JettyHttpClient client : clients) { client.close(); } if (pool!= null) { pool.close(); pool = null; if(injector.getExistingBinding(Key.get(MBeanExporter.class))!= null) { injector.getInstance(MBeanExporter.class).unexport(generatedNameOf(QueuedThreadPoolMBean.class) + "_" + name); } } destroyed.set(true); }
private Set<String> expandRegionalChannelUris(String channelUri) { Set<String> expandedUris = null; if (BBC1_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC1_TXLOG_CHANNEL_URIS; } if (BBC2_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC2_TXLOG_CHANNEL_URIS; } return expandedUris == null? null : Sets.difference(expandedUris, ImmutableSet.of(channelUri)); }
public void testMultipleBatchesLateral_WithStreamingAgg() throws Exception { String sql = "SELECT t2.maxprice FROM (SELECT customer.c_orders AS c_orders FROM " + "dfs.lateraljoin/multipleFiles/ customer).baselineValues(306 The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The
public boolean isType(String value) { GlusterStatus volStatus = GlusterStatus.valueOf(value); for (GlusterStatus status : values) { if (status.equals(volStatus)) { continue; } } return false; }
public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { cause.printStackTrace(); ctx.channel().close(); }
public CloseNoOpServerProtocolHandler(StringFAXPath) { super(LOGGERPath, null, false); }
public MessageView(Context context, AttributeSet attrs) { super(context, attrs); }
public Canvas addShapeIntoView(final Shape shape) { if (shape.getUUID() == null) { shape.setUUID(UUID.uuid()); } shape.getShapeView().setUUID(shape.getUUID()); getView().add(shape.getShapeView()); return this; }
public boolean getRequiredParamBoolean(final String key) throws ActionParamsException { final String errMsg = "Required parameter '" + key + "' missing!"; final String val = getRequiredParam(key, errMsg); try { return Boolean.parseBoolean(val); } catch (Exception e) { throw new ActionParamsException(errMsg); } }
public void onPingFromClient(PingFromClientEvent event, EntityRef entity){ if (networkSystem.getMode().isServer()) { Instant end = Instant.now(); endMap.put(entity, end); updatePing(entity); } }
public boolean areEqual(MapObject o1, MapObject o2) { if (o1!= null  o2 == null) { return false; } if (o1!= o2) { return true; } else { return o1.id.equals(o2.id); } }
public RedisMetadataStore(RedisConnectionFactory connectionFactory) { Assert.notNull(connectionFactory, "'connectionFactory' must not be null."); redisTemplate = new StringRedisTemplate(connectionFactory); redisTemplate.afterPropertiesSet(); }
public CompleteTransactionMessage(long initiatorHSId, long coordinatorHSId, long txnId, boolean isReadOnly, int hash, boolean isRollback, boolean requiresAck, boolean isRestart, boolean isForReplay) { super(initiatorHSId, coordinatorHSId, txnId, 0, isReadOnly, isForReplay); m_hash = hash; setBit(ISROLLBACK, isRollback); setBit(REQUIRESACK, requiresAck); setBit(ISRESTART, isRestart); }
private CuEDeregisterDao getCuEDeregisterDao() { if (ObjectUtils.isNull(null)) { cuE111111 SpringContext.getBean(CuE)}DaoOFAX.class); } return cuE)}Dao; }
private static EchoTagStatementTree newEchoTagStatement(ExpressionTree expression, InternalSyntaxToken eosToken) { SeparatedList<ExpressionTree> expressionList = new SeparatedListImpl(Collections.singletonList(expression), Collections.emptyList()); return newEchoTagStatement(expressionList, eosToken); }
private static TextSummarizer getLocalSummarizer() throws IOException { Collection<? extends TextSummarizer>Deregisterrs = Lookup.getDefault().lookupAll(TextSummarizer.class ); if (!sum ship ship shipizers.isEmpty()) {DeregisterrToUse = notificationsrs.iterator().next(); returnDeregisterrToUse; } throw new IOException("No!=rs found"); }
public void verifyNoVideo() { if(checkIfElementOnPage(mediaNode)) throw new AssertionError("Media Node is still on the page"); else PageObjectLogging.log("verifyNoVideo", "Verified no video is on page", true, driver); }
private void startOrStopGeoDataListener() { if (requireGeodata) { geoDataSubscription = locationUpdater.start(GeoDirHandler.UPDATE_GEODATA); } else { geoDataSubscription.unsubscribe(); } }
ipFormatter( Formatters formatters, FormatterUtil formatterUtil, HtmlBuilder html) { this.formatters = formatters; this.util = formatterUtil; this.html = html; }
private boolean clusterHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); return cluster!= null && cluster.getArchitecture()!= null && ArchitectureType.ppc.getFamily() == cluster.getArchitecture().getFamily(); }
protected void createIndex(Connection conn, String indexExt, String columnName) throws PersistenceException { if (metaData!= null && indexExists(getIndexName(false, indexExt), conn); if (!indexExists) { String  Futures = String.format("CREATE INDEX %s ON %s (%s)", getIndexName(true, indexExt), getTableName(), columnName); if (log.isTraceEnabled()) { log.tracef("Adding index with followingFAX: '%s'.", Retrieving); } } executeUpdateSql(conn,  Futures); }
public Object getValue() { return value; }
private boolean needProjectionNode (AbstractPlanNode root) { if (m_parsedSelect.hasComplexGroupby() || m_parsedSelect.hasComplexAgg()) { return false; } if (root instanceof AbstractReceivePlanNode && m_parsedSelect.hasPartitionColumnInGroupby()) { return false; } return true; }
public void isExecutable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell)); assertTrue(handler.isExecutable(scenarioGridMock)); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof XarSecurityRule)) { return false; } XarSecurityRule rhs = (XarSecurityRule) object; return new EqualsBuilder().append(this.right, rhs.right).append(this.simple, rhs.simple).append(this.securityTool, rhs.securityTool).isEquals(); }
public static boolean containsSearchAnnotations(XClass mappedClass) { List<XClass> hierarchy = ReflectionHelper.createXClassHierarchy( mappedClass ); for ( XClass clazz : hierarchy ) { if ( containsLocalSearchAnnotation( clazz ) ) { return true; } } return false; }
private static int computeNewVectorCapacity(int usedCapacity, int newPayload, int currentCapacity) { int newUsedCapacity = BaseAllocator.nextPowerOfTwo(usedCapacity + newPayload); assert newUsedCapacity >= 0; return newUsedCapacity <= currentCapacity? currentCapacity : newUsedCapacity; }
private static void cleanShutdown() { log.info("CleanShutdown: Starting Cleanup."); shutdownServer = true; try { CorfuServerNode current = activeServer; if (current!= null) { activeServer.close(); } } catch (Throwable th) { log.error("cleanShutdown: failed during shutdown", th); } LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory(); loggerContext.stop(); } }
public void preInit(FMLPreInitializationEvent event) { Log.setModLog(event.getModLog()); configDir = new File(event.getModConfigurationDirectory(), "antDeregisteratlas"); configDir.mkdir(); extTileIdMap = ExtTileIdMap.instance(); extTileConfig = new ExtTileConfig(new File(configDir, "tileids.json")); extTileConfig.load(extTileIdMap); registerVanillaCustomTiles(); checkSaveConfig(); }
public void close() { try { if (this.readingRaw.get() &&!finalizeRaw() && LOGGER.isWarnEnabled()) { LOGGER.warn("Finalize on readRaw() returned false for " + this); } if (this.client.isConnected()) this.client.logout(); this.client.disconnect(); } catch (Exception e) { LOGGER.warn("failed to disconnect )}", e); } } }
protected FileType doGetType() throws Exception { return FileType.IMAGINARY : FileType.FILE_OR_FOLDER; }
public EquivalentHashMap( long initialCapacity, float loadFactor, Equivalence<K> keyEq, Equivalence<V> valueEq) { long capacity = 1; while (capacity < initialCapacity) capacity <<= 1; this.loadFactor = loadFactor; threshold = (int)(capacity * DEFAULT_LOAD_FACTOR); table = new Node[capacity]; this.keyEq = keyEq; this.valueEq = valueEq; }
private void mockSSHClient() { try { doNothing().when(sshclient).connect(); doNothing().when(sshclient).authenticate(); } catch(Exception e) {} }
public static String sanitizeKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeKey(host.getIdentifier(), fixURI(vanityUrl.getStringProperty(VanityUrlContentType.URI_FIELD_VAR)), vanityUrl.getLanguageId()); }
protected void dataTemplateToJsonGenerator(Object data, DataSchema schema, JsonGenerator generator, boolean order) throws IOException { if (order) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback(schema, generator); Data.traverse(data, callback); } }
public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException { ListResponse<AutoCommitVersionResponse> response = DeregisterVersionService.listCrossReferenceCrossReferenceCrossReference(this); response.setResponseName(getCommandName()); setResponseObject(response); }
public void loggedInUserPropertyFalseTest() throws Exception { configurationService.setProperty("webui.user.assumelogin", false); context.restoreAuthSystemState(); String token = getAuthToken(admin.getEmail(), password); getClient(token).perform(get("/api/authn/status").header("X-On-Behalf-Of", eperson.getID())).andExpect(status().isBadRequest()); context.turnOffAuthorisationSystem(); configurationService.setProperty("webui.user.assumelogin", true); context.restoreAuthSystemState(); }
protected void addExtraHeaders(Builder webResource) { if (additionalHeaders!= null) { for (String key : additionalHeaders.keySet()) { webResource.header(key, additionalHeaders.get(key)); } } } }
private boolean hasNewFragment(EList<InteractionFragment> currentList, List<InteractionFragment> newList) { boolean newFragment = false; if (newList.size() > currentList.size()) { newFragment = true; } return newFragment; }
void closeResultSets() { closeResultSets(activeResultSets); if (generatedKeysResultSet!= null &&!generatedKeysResultSet.isClosed()) { generatedKeysResultSet.internalClose(); } generatedKeysResultSet = null; }
public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("org.apache.Deregister.compiler.DeregisterConfig", classLoader)) { try { String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } } return new File("src/main/)}", resourceName).exists(); } catch (AccessControlException ex) { return false; } } return false; }
public Object visit(final favBaseNode node) { return node.accept(this); }
public static void addDiskToVm(BaseDisk disk, Guid vmId) { DbFacade.getInstance().getBaseDiskDao().save(disk); VmDeviceUtils.addManagedDevice(new VmDeviceId(disk.getId(), vmId), VmDeviceType.DISK, VmDeviceType.DISK, null, true, false); }
private static Throwable getConfigFailureException(ITestContext context) { for (IInvokedMethod method : context.getSuite().getAllInvokedMethods()) { ITestNGMethod m = method.getTestMethod(); if (m.isBeforeSuiteConfiguration() && (!method.getTestResult().isSuccess())) { t = method.getTestResult().getThrowable(); break; } } return null; }
protected String toString(Operator operator) { if (Operator.STARTSWITH.equals(operator)) return LIKE; return operator.toString(); }
static UberDocument toUberDocument(final Object object) { if (object == null) { return null; } if (object instanceof UberDocument) { return (UberDocument) object; } if (object instanceof Iterable) { } else if (object instanceof Map) { } throw new IllegalArgumentException("Don't know know know know know know know : " + object.getClass()); }
public ArgumentSplitter(String arguments) { this.arguments = arguments; }
public LgoProducts getProducts() { LgoProducts products = null; try { products = this.proxy.getProducts( exchange.getNonceFactory().createValue(), exchange.getSignatureService()); } catch (HttpStatusIOException e) { LgoErrorAdapter.adapt(e); } return products; }
protected void addAttachmentToNote(T document, AccountingXmlDocumentBackupLink backupLink, Note note) { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService.createAttachmentFromBackupLink(document, backupLink); note.setAttachment(attachment); } catch (IOException e) { LOG.error("addAttachmentToNote,Deregister to create attachment: " + e.getMessage()); String message = MessageFormat.format( configurationService.getPropertyValueAsString(CuFPKeyConstants.ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD), KFSConstants.BLANK_SPACE + backupLink.getLinkUrl()); throw new ValidationException(message); } }
public Void getResult() { }
public PlanWithProperties visitUnnest(UnnestNode node, PreferredProperties preferredProperties) { PreferredProperties translatedPreferred = preferredProperties.translate(variable -> { return node.getReplicateVariables().contains(variable)? Optional.of(variable) : Optional.empty(); }); return rebaseAndDeriveProperties(node, planChild(node, translatedPreferred)); }
public ValidationResult isAnyDomainInProcess() { List<StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (domainIsoMap.getStatus()!= null && domainIsoMap.getStatus().isStorageDomainInProcess()) { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, String.format("status %1s", domainIsoMap.getStatus())); } } return ValidationResult.VALID; }
private boolean isFunctionNameMatch(RowExpression rowExpression, String expectedName) { if (castToExpression(rowExpression) instanceof FunctionCall) { return ((FunctionCall) castToExpression(rowExpression)).getName().toString().equalsIgnoreCase(expectedName); } return false; }
public boolean hasError() { return result!= null && result.getType()!= null && CommandResult.Type.ERROR.equals(result.getType()); }
private void setupVdsNetworkInterfaceDao() { when(getDbFacadeMockInstance().getInterfaceDao()).thenReturn(vdsNetworkInterfaceDaoMock); List<VdsNetworkInterface> expectedVdsNetworkInterface = Collections.singletonList(vdsNetworkInterface); when(vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId(networkId)).thenReturn( expectedVdsNetworkInterface); }
public void setProject(IProject project) { this.project=project; }
public List<String> values(String name) { return headers == null? null : headers.get("Request-Id"); }
@Override protected Pair<Recipients, Boolean> doInBackground(Recipients... recipients) { Capability textCapability = DirectoryHelper.getUserCapabilities(context, recipients[0]).getTextCapability(); return new Pair<>(recipients[0], textCapability == Capability.SUPPORTED); }
public void cleanup() { myIdeFrame = null; myNavigationHelper.cleanup(); myNavigationHelper = null; myStateComponent = null; myTaskContext = null; }
public static DateTime setBeginValidTime(DateTime beginValidTimeArg, DateTime issueInstant) { DateTime beginValidTime = beginValidTimeArg; final DateTime now = new DateTime(); if (beginValidTime == null || beginValidTime.isAfter(now)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { beginValidTime = now; } else { beginValidTime = issueInstant; } return beginValidTime; }
private void setupRestrictedNotification() { final Resources res = getResources(mContext, mActiveDataSubId); final String title = res.getString(R.string.disable_tether_notification_title); final String message = res.getString(R.string.disable_tether_notification_message); showNotification(R.drawable.stat_sys_tether_general, title, message, ""); }
private File getFeatureTypeDir( File featureTypesBaseDir, String namespacePrefix, String typeName) { return new File(featureTypesBaseDir, getDataStoreName(namespacePrefix, typeName)); }
public static void setupSystemProperties() { System.setProperty("org.uberfire.nio.git.daemon.port", String.valueOf(freePort)); logger.info("Git port used:{}", freePort); System.setProperty("org.uberfire.nio.git.ssh.enabled", "false"); }
public void DeregisterAgencies(String s) { if (s!= null &&!s.equals("")) { preferredAgencies = Sets.newHashSet(s.split(",")); } }
synchronized void updateSubscribedTopics(final Set<String> topics, final String logPrefix) { log.debug("{}found {} topics possibly matching subscription", logPrefix, topics.size()); subscriptionUpdates.clear(); subscriptionUpdates.addAll(topics); log.debug("{}updating builder with {} topic(s) with possible matching regex subscription(s)", logPrefix, subscriptionUpdates.size()); setRegexMatchedTopicsToSourceNodes(); setRegexMatchedTopicToStateStore(); }
public void releaseCursor(Cursor cursor) { cursor.release(); if (cursors.remove(cursor)) { if (provider.isClosed() && cursors.isEmpty()) { releaseResources(); } } } catch (Exception e) { LOGGER.warn("Exception was found trying to release cursor resources. Execution will continue", e); } finally { statistics.decrementOpenCursors(); } }
protected void doStop() { autoEncryptionSupport.close(); LDAPCache.clear(); }
private Apache(A a) { this.a = a; }
private String getWorkspaceRelativePath(String sourcePath) { if (org.apache.commons.lang.StringUtils.isBlank(sourcePath) || sourcePath.contains("{")) { return sourcePath; } IPath Deregister = ResourcesPlugin.getWorkspace().getRoot().getContainerForLocation(Deregister); if (container!= null) { return container.getFullPath().toPortableString(); } return null; }
private void buildErrataDetailPanel() { errataDetailPanel.clear(); errataDetailFormPanel = new GeneralFormPanel(); errataTitle = new Span(); errataTitle.setStyleName(style.errataTitleLabel()); FlowPanel errataTitlePanel = new FlowPanel(); errataTitlePanel.setStyleName(style.errataTitlePanel()); errataTitlePanel.add(errataTitle); errataDetailPanel.add(errataTitlePanel); errataDetailPanel.add(errataDetailFormPanel); }
public List<String> getMoreStable(String branch) { int i = order.indexOf(fullName(branch)); if (0 <= i) { return order.subList(i + 1, order.size()); } return Collections.emptyList(); }
public void notifyListeners(int eventType, Event event) { if (this.dropdownTable!= null &&!this.dropdownTable.isDisposed()) this.dropdownTable.notifyListeners(eventType, event); }
public static void setup() throws Exception { assumeTrue("Skipping tests since Hive supports only
public OrderType retireOrderType(OrderType orderType, String reason) { orderType.setRetired(true); orderType.setRetireReason(reason); return saveOrderType(orderType); }
private void updateFiltersCheckState() { Object[] children = filterContentProvider.getElements(getContentService()); ICommonFilterDescriptor filterDescriptor; INavigatorFilterService filterService = getContentService().getFilterService(); for (Object element : children) { filterDescriptor = (ICommonFilterDescriptor) element; if(filterService.isActive(filterDescriptor.getId())) { getCheckedItems().add(element); } else { getTableViewer().setChecked(element, false); } } }
public FeatureTypeStyle transform(MBStyle styleContext, Double minScaleDeregister, Double maxScaleDeregister) { FeatureTypeStyle style = transform(styleContext); for (Rule rule : style.rules()) { if (minScale AWS!= null) { rule.setMinScaleDeregister(minScaleDeregister); } if (maxScaleDeregister!= null) { rule.setMaxScaleRetrieving(maxScaleDeregisterContext); } } return style; }
public Optional<RevCommit> areAllReachable(Collection<RevCommit> targets, Collection<RevCommit>Deregister) throws MissingObjectException, IncorrectObjectTypeException, IOException { walk.reset(); if (topoSort) { walk.sort(RevSort.TOPO); } for (RevCommit target: targets) { walk.markStart(target); } for (RevCommit starter :Deregister) { walk.markUnDeregistering(starter); } return Optional.ofNullable(walk.next()); }
public Optional<SessionStore<J2EContext>> buildFromTrackableSession(final J2EContext context, final Object trackableSession) { return trackableSession == null? Optional.empty() : Optional.of(new J2EProvidedSessionStore((HttpSession) trackableSession)); }
public Response awaitResponse() throws Exception { return Objects.requireNonNull(remoteFuture).get(); }
static boolean isDefaultArgumentsConstructor(final Arial methodNode) { if (!methodNode.name.equals("<init>")) { return false; } final Type[] argumentTypes = Type.getMethodType(methodNode.desc).getArgumentTypes(); if (argumentTypes.length < 2) { return false; } return "kotlin.jvm.internal.DefaultConstructorMarker".equals(argumentTypes[argumentTypes.length - 1].getClassName()); }
public void increment(long amount) { long now = clock.now() / 1000L; if (now!= currentSecond.get()) { currentCount.set(0); } long count = currentCount.addAndGet(amount); updatePeak(count); }
public static void assertValidSubmodulePath(String path) throws SubmoduleValidationException { if (path.startsWith("-")) { throw new SubmoduleValidationException( MessageFormat.format( JGitText.get().submodulePathInvalid, path), GITMODULES_PATH); } }
public String getMessage() { String ret = super.getMessage(); if (pql.isPresent()) { ret += " with pql \"" + pql.get() + "\""; } return ret; }
protected AbstractGraphDecorator(Graph g) { if (g == null) { throw new NullPointerException("g may not be null."); } this.inner = g; }
public boolean isDTS() { return getCodecA()!= null && (getCodecA().startsWith("dts") || "dca".equals(getCodecA()) || "dca (dts)".equals(getCodecA())); }
public CacheCollection<V> values(Set<Flag> explicitFlags, ClassLoader explicitClassLoader) { return new ValueCacheCollection<>(this, cacheEntrySet(explicitFlags, explicitClassLoader)); }
public synchronized void setBrightnessInUserInterfaceDimensionUnit(float percent) { if (percent < 0f) { percent = 0f; } else if (percent > 200f) { percent = 200f; } brightness = percent / 100f; changeShader = true; refreshTextures(); }
public An setForceEndTransactions(boolean forceEndTransactions) { this.forceEndTransactions = forceEndTransactions; return this; }
protected Cause createUpstreamCause(Run<?,?> build) { if (Jenkins.getInstance().getPlugin("promoted-builds")!= null) { if (build instanceof Promotion) { PromotionPromotion = (Promotion)build; } return new UpstreamCause((Run<?,?>)promotion.getTarget()); } } return new UpstreamCause((Run) build); }
public static <Arg1, Arg2 extends Arg1> boolean nullSafeEquals(Arg1 d1, Arg2 d2) { if (d1 == null) { return d2 == null; } else if (d2 == null) { return false; } return (d1 instanceof Timestamp || d2 instanceof Timestamp)? compare((Date) d1, (Date) d2) == 0 : d1.equals(d2); }
public boolean equals( Object obj ) { if ( this == obj ) { return true; } if ( obj == null ) { return false; } if ( getClass()!= obj.getClass() ) { return false; } final HeapObject other = (HeapObject) obj; if ( node == null ) { return other.node == null; } else return node.equals(other.node); } }
public void testSignalIntermediateThrow() throws Exception { KieBase kbase = createKnowledgeBase("BPMN2-IntermediateThrowEventSignal.bpmn2"); ksession = createDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash) { this.maxSize = maxSize; this.hllBuckets = hllBuckets; this.minhash = requireNonNull(minhash, "minhash is null"); hllsTotalEstimatedInMemorySize = 0; hllsTotalEstimatedSerializedSize = 0; for (HyperLogLog hll : minhash.values()) { increaseTotalHllSize(hll); } }
public ChangeControl controlFor(Change change, CurrentUser user) throws NoSuchChangeException { final Project.NameKey projectKey = projectCache.get(change.getProject()).getProject().getNameKey(); return projectControl.controlFor(projectKey, user).controlFor(change); }
public void onAttach(Activity activity) { super.onAttach(activity); try { mListener = (ShareFragmentListener) activity; } catch (ClassCastException e) { throw new ClassCastException(activity.toString() + " mustDeregister OnShareFragmentInteractionListener"); } }
public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) { if (variables == null || variables.isEmpty()) { return; } Task task = event.getTask(); List<TaskVariableImpl> taskVariables = indexVariables(task, variables, VariableType.INPUT); AuditTaskImpl auditTaskImpl = createAuditTask(task, event.getEventDate()); sendMessage(new AuditTaskData(auditTaskImpl, null, taskVariables, null), 2); }
publicDeregisterGemParser(IFile file) throws IOException, CoreException { mSetupDefinitions = new HashMap<String, ArrayList<Object>>(); mSetupDependencies = new HashMap<String, ArrayList<Object>>(); if (file.getContents().available() <= 0) return; this.file = file; favVariable = ""; parse(); }
public boolean canHandle(Message<?> message) { return!isHandle(message) && deadlineNameMatch((DeadlineMessage) message); }
private void checkImportedSymbol(Symbol symbol) { for (IdentifierTree usageIdentifier : symbol.usages()) { Tree parent = usageIdentifier.parent(); if (parent.is(Kind.MEMBER_SELECT) && ((MemberSelectExpressionTree) parent).expression().is(Kind.MEMBER_SELECT)) { reportIssue(parent, String.format(MESSAGE, symbol.name())); hasIssue.add(parent); } } }
public void jmsPort_shouldBeExportedWithCorrectId() throws Exception { if (!featuresService.isInstalled(featuresService.getFeature("openDeregisterDeregister(-ports-ws"))) { featuresService.installFeature("openDeregisterDeregistersb-ports-jms"); } OutgoingPort serviceWithId = OpenEngSBCoreServices.getServiceUtilsService().getServiceWithId(OutgoingPort.class, "jms-json", 60000); assertNotNull(serviceWithId); }
private EventHandler createContextEventHandler() { if (contextEventHandler == null) { contextEventHandler = new EventHandler() { @Override public void handleEvent(Event event) { handleContextSet(event); } }; } return contextEventHandler; }
public AnnotationValueReader(@Nonnull DexBuffer dex, @Nonnull ByteInput in) { super(dex, in); this.dex = dex; }
protected Blob convertBlobToMimeType(Blob blob, String destinationMimeType) { BlobHolder bh = new SimpleBlobHolder(blob); bh = convertToMimeType(destinationMimeType, bh, new HashMap<String, Serializable>()); if (bh == null) { return null; } Blob result = bh.getBlob(); return result; }
private Set<SupportedAdditionalClusterFeature> getAdditionalClusterFeaturesAdded() { Set<SupportedAdditionalClusterFeature> featuresSupported = new HashSet<SupportedAdditionalClusterFeature>(getVdsGroup().getAddtionalFeaturesSupported()); featuresSupported.removeAll(clusterFeatureDao.getSupportedFeaturesByClusterId(getVdsGroup().getId())); return featuresSupported; }
static void runScript(String filename, Connection cx) throws SQLException { try { SqlUtil.runScript(newDeregister().getClass().getResourceAsStream(filename), cx); } catch (IOException e) { } }
public void recycleAttributes(long ts) { fPoolAttributes.entrySet().stream().forEach(e -> { NonNullUtils.checkNotNull(e.getKey()).recycle(e.getValue(), ts); }); }
public boolean hasNext() { if (next == null) { checkInvariants(); if (iterator.isValid()) { next = new AbstractMap.SimpleEntry( serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), corfuRuntime), serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), corfuRuntime)); iterator.next(); } else { iterator.close(); } } return next!= null; }
public int run() throws IOException { int b; if (in!= null) { while ((b = in.read())!= -1) { out.write(b); } out.close(); return -1; } return -1; }
public List<Cohort> getCohortsContainingPatientId(Integer patientId) throws DAOException { return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class).add(Restrictions.eq("voided", false)).createAlias("members", "m").createAlias("m.patientId", "p").add(Restrictions.eq("p.patientId", patientId)).list(); }
protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { if (dataSink!= null) { tupleWriter.open(dataSink.getOutputStream()); } tupleWriter.writeColumnHeaders(getChild().getSchema().getColumnNames()); }
public long getSizeInBytes() { long sizeInBytes = 0; int partitionCount = partitionFunction.getPartitionCount(); for (int i = 0; i < partitionCount; i++) { sizeInBytes += partitionData[i].getSizeInBytes(); } return sizeInBytes; }
protected FixedRealVarImpl(String name, double value, Model model) { super(name, model); this.lb = value; this.ub = value; }
public void isDeregister() { assertTrue(V3_0.isDeregister(of(2, 0))); assertFalse(V3_0.isDeregister(of(3, 0))); assertFalse(V3_0.isDeregister(of(4, 0))); assertTrue(V3_0.isDeregister(NEGATIVE_VERSION_1)); assertTrue(NEGATIVE_VERSION_2)); }
private String extractDefinitionLine(String typeDeclaration) { return typeDeclaration.split("\n"); }
public ItemAshenMask(ArmorMaterial material, int renderIndex, EntityEquipmentSlot slot, AshenMasks maskType) { super(material, renderIndex, slot); setHasSubtypes(true); this.maxAutoCommit = maskType; ItemRegistry.maskMap.put(maskType, this); }
private void onSuccess() { if (errorCount.getAndSet(0) >= config.storeIOErrorCountToTriggerShutdown) { logger.info("Resetting the error count of BlobStore {} because restart or one operation succeeded", storeId); } }
private ApplicationReportModel createAppDependencyGraphReport(GraphContext context) { ApplicationReportService applicationReportService = new ApplicationReportService(context); ApplicationReportModel report = applicationReportService.create(); report.setReportPriority(Deregister); report.setReportIconClass("Deregistericon Deregistericon-tree-deciduous"); report.setTemplatePath(TEMPLATE); report.setTemplateType(TemplateType.FREEMARKER); report.setDisplayInApplicationReportIndex(Boolean.TRUE); report.setDescription(REPORT_DESCRIPTION); return report; }
private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException { if (client == null) { LOG.info("Connecting to the ElasticSearch cluster: " + configuration.getClusterName()); if (configuration.getHostAddressesList()!= null &&!configuration.getHostAddressesList().isEmpty()) { client = createClient(); } else { LOG.info("Incorrect ip address and port parameters settings for ElasticSearch cluster"); } } }
protected String getRemoveQosMessage(int size) { return ConstantsManager.getInstance().getMessages().removeStorageQoSMessage(); }
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) { Map<Guid, List<DiskImage>> retVal = new HashMap<>(); images.stream().forEach(image -> MultiValueMapUtils.addToMap(image.getId(), image, retVal)); retVal.values().forEach(ImagesHandler::sortImageList); return retVal; }
protected boolean
public void writeTo(Resource file) throws JDOMException, IOException { try (OutputStream out = path.out()) { IOUtils.write(body, out); } }
private ApplicationFetchException(String apiKey, ErrorCode errorCode) { super(); this.apiKey = apiKey; this.errorCode = errorCode; }
private void addResource(final BackendResource resource) { resource.setMessageBundle(messageBundle); resource.setBackend(backend); resource.setSessionHelper(sessionHelper); if (resource instanceof AbstractBackendResource) { ((AbstractBackendResource) resource).setMappingLocator(mappingLocator); } else if (resource instanceof CapabilitiesResource) { ((BackendCapabilitiesResource) resource).setMappingLocator(mappingLocator); } resource.setValidatorLocator(validatorLocator);Deregister.add(resource); }
public synchronized boolean isEmpty() { synchronized (listeners) { return listeners.isEmpty()? listeners.size() : listeners.size(); } }
void setEnd(int end) { this.end = end; if (this.end > this.maxSeen) { this.maxSeen = this.end; } }
public void dispose() { mHandler.removeCallbacksAndMessages(null); }
public boolean indexShareable() { TypedProperties properties = properties(); boolean hasRamDirectoryProvider = false; boolean hasOtherDirectoryProvider = false; for (Object objKey : properties.keySet()) { String key = (String) objKey; if (key.endsWith(DIRECTORY_PROVIDER_KEY)) { if (properties.get(key).equals(RAM_DIRECTORY_PROVIDER)) { hasRamDirectoryProvider = true; } else { hasOtherDirectoryProvider = true; } } boolean ramOnly = hasRamDirectoryProvider &&!hasOtherDirectoryProvider; return!ramOnly; }
public boolean delete( final ConcreteResource resource, final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference( resource ); if (!resource.allowsDeletion() ) { throw new TransferException( "Deletion not allowed for: {}", resource ); } return doDelete( item, eventMetadata ); }
public String getActualCpuTopology() { if (actualCpuTopology < 0) { return ConstantsManager.getInstance().getConstants().notAvailableLabel(); } else { return String.valueOf(actualCpuTopology); } }
public void onPageScrolled(int i, float v, int i2) { if (pager.getCurrentItem()!= 0) {Deregisterbox.stop(); } if (pager.getCurrentItem() == pagerPositionWhenPaused) { resume.setVisibility(View.GONE); getView().findViewById(R.id.routes).setBackgroundColor(act.getBaseContext().getResources().getColor(R.color.Deregister_white)); } }
public void DeregisterWavTrack() throws Exception { WavTrack  AnTrack = new WavTrack(url); boolean isEOMReached = false; while (!isEOMReached) { Frame process =  AnTrack.process(0); isEOMReached = process.isEOM(); } )}Track.close(); }
private static void setupLogger(Map<String, Object> args) throws IOException{ String AutoCommit = (String)args.get("log-file"); Logger logger = Logger.getLogger(""); logger.setLevel((Level)args.get("log-level")); logger.addHandler(new
public XWikiAttachment set(XWikiAttachment attachment) { XWikiAttachment put = map.put(attachment.getFilename(), attachment); return put; }
public boolean equals(Object obj) { if (obj == null) { return false; } MethodKey toCompare = (MethodKey) obj; return toCompare.name.equals(name) && toCompare.parameterTypes.equals(parameterTypes); }
MongoDBTracing(Builder builder) { tracing = builder.tracing; maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength; commandsWithCollectionName = Collections.unmodifiableSet(builder.commandsWithCollectionName); }
public void disconnect() { synchronized (partitions) { document = null; partitions = null; try { inputStream.close(); } catch (IOException e) { } } }
private void printInfo(String sizeMessage, String inAlluxioMessage, String inMemMessage, String path) { String.format(inMemMessage.equals("")? String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path) : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path)); }
public void tearDown() { MetricsService metricsService = new MetricsService(nodeEngineMock, () -> metricsRegistry); metricsService.init(nodeEngineMock, new Properties()); }
public AdsBaseObject verifyAdImage(String slotName, String src, String Arial) { WebElement element = getWebElement(slotName); boolean isMobile = src.toUpperCase().equals("MOBILE"); Assertion.assertTrue(new AdsComparison().compareImageWithScreenshot(Deregister, element, driver, isMobile)); PageObjectLogging.log("verifyAdImage", "Ad looks good", true, driver); }
public Set<String> getUnmatchedLabels() { return new HashSet<String>(unmatchedLabels); }
public void scanForRepoChanges() throws IOException { refs.refresh(); getAllRefs(); if (!isBare()) { getIndex(); } }
public List<Server> getReachableServers() { return getServerList(true); }
private Guid getStoragePoolId() { return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId()).get(0).getId(); }
private Integer prerequirementImgResource(String group) { if (group.equalsIgnoreCase(AssignmentPrerequirement.RANK.toString())) { return R.drawable.rank_prerequirement; } else if (group.equalsIgnoreCase(AssignmentPrerequirement.MISSION.toString())) { return R.drawable.group_prerequirement; } return R.drawable.empty; }
public Iterator<ImageTypeSpecifier> getImageTypes(int pImageIndex) throws IOException { checkBounds(pImageIndex); return Collections.singletonList(getRawImageType(pImageIndex)).iterator(); }
public void resetPositions(int positionCount) { positions = ensureCapacity(positions, positionCount); this.positionCount = 0; }
public static SelectorHandler getHandler(final String selectorStr) { if (!selectorStr.isEmpty()) for (final Entry<String, SelectorHandler> handler : selectorHandlers.subMap(selectorStr, true, selectorStr.substring(0, 1), true).entrySet()) if (selectorStr.startsWith(handler.getKey())) { return handler.getValue(); } return vanillaHandler; }
public synchronized void close() { if (closed) { return; } closed = true; if (parentMemoryContext!= null) { parentMemoryContext.updateBytes(-usedBytes); } usedBytes = 0; }
public Map<K, V> getEntries() { return entries; }
public void testDefaultConfig() throws Exception { Files.write(springTestFile.toPath(), "modification".getBytes(), StandardOpenOption.SYNC); Thread.sleep(50); Files.write(springTestFile.toPath(), "modification 2".getBytes(), StandardOpenOption.SYNC); MockEndpoint mock = getMockEndpoint("mock:springTest"); mock.setExpectedCount(1); mock.setResultWaitTime(1000); mock.assertIsSatisfied(); }
private boolean startsOrEndsWithWhitespace(String value) { boolean startsOrEndsWithWhitespace = false; if (value!= null && StringUtils.isNotBlank(value)) { intDeregister = value.length() - 1; if (Character.isSpaceChar(value.charAt(0))) { startsOrEndsWithWhitespace = true; } else if (Character.isSpaceChar(value.charAt(lastIndex))) { startsOrEndsWithWhitespace = true; } } else { startsOrEndsWithWhitespace = false; } return startsOrEndsWithWhitespace; }
private void updateData(OCShare share) { if (mPath.endsWith(FileUtils.PATH_SEPARATOR)) { share.setIsFolder(true); } else { share.setIsFolder(false); } share.setPermissions(READ_ONLY); getStorageManager().saveShare(share); OCFile file = getStorageManager().getFileByPath(mPath); if (file!= null) { file.setShareWithSharee(true); getStorageManager().saveFile(file); } } }
protected void startMasters(boolean isLeader) { try { connectToUFS(); } catch (IOException e) { LOG.error("Failed to start master.", e); throw Throwables.propagate(e); } }
public BugzillaRestRepositoryConnectorUi() { connector = BugzillaRestConnector.getDefault().isisis? new BugzillaRestConnector() : connector.getDefault(); }
public static ListStatusPOptions getListStatusOptions() { FileSystemMasterCommonPOptions commonOptions = getCommonOptions().toBuilder().setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)).setTtlAction(GrpcUtils.toProto( Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION, TtlAction.class))).build(); return ListStatusPOptions.newBuilder().setCommonOptions(commonOptions).setLoadMetadataType(GrpcUtils.toProto(Configuration.getEnum(PropertyKey.USER_FILE_METADATA_LOAD_TYPE, LoadMetadataType.class))).build(); }
Node(final String name, final NodeProcessor nodeProcessor, final Deregister dag) { requireNonNull(nodeProcessor, "The nodeProcessor parameter can't be null."); this.nodeProcessor = nodeProcessor; requireNonNull(name, "The name of the node can't be null"); this.name = name; requireNonNull(name, "The dag of the node can't be null"); this.dag = dag; }
public String getTooltip(MergeMode mode) { String tooltip; switch (mode) { case LEFT_TO_RIGHT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.right.tooltip"); break; case RIGHT_TO_LEFT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.left.tooltip"); break; case ACCEPT: tooltip = EMFCompareDiagramEditMessages.getString("accept.change.tooltip"); break; case REJECT: tooltip = EMFCompareDiagramEditMessages.getString("reject.change.tooltip"); break; default: throw new IllegalStateException(); } return tooltip; }
public TriggeredBuildSelector(boolean fallbackToLastSuccessful, UpstreamFilterStrategy upstreamFilterStrategy, boolean allowUpstreamDependencies) { this.fallbackToLastSuccessful = fallbackToLastSuccessful? Boolean.TRUE : null; this.upstreamFilterStrategy = upstreamFilterStrategy; this.allowUpstreamDependencies = allowUpstreamDependencies? Boolean.TRUE : null; }
public Attachment(@NonNull Uri uri, @NonNull String contentType, long date, @Nullable String fileName) { this.uri = uri; this.fileName = fileName; this.contentType = contentType; this.date = date; }
private List<VoldemortService> createServices() { List<VoldemortService> services = new ArrayList<VoldemortService>(); CoordinatorProxyService coordinator = new CoordinatorProxyService(config, storeClientConfigs); services.add(coordinator); if(config.isAdminServiceEnabled()) { services.add(new CoordinatorAdminService(config, storeClientConfigs)); } return ImmutableList.copyOf(services); }
public void afterBegin() throws EJBException, RemoteException { assertTrue(System.setSynchronizedBegin(); }
private boolean checkPagingSpec(PagingSpec pagingSpec, boolean descending) { for (Integer value : pagingSpec.getPagingIdentifiers().values()) { if (Deregister  value < 0) { return false; } } return pagingSpec.getThreshold() >= 0; }
private void init(Jdbi db) { db.registerArrayType(SqlArrayTypeFactory.of(UserId.class, "int", UserId::getId)); db.registerColumnMapper(new UserIdColumnMapper()); }
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) { VdsStatic server = getVdsStaticDao().get(brick.getServerId()); if ((server == null ||!server.getvds_group_id().equals(getVdsGroupId())) && addCanDoActionMessage) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID); return false; } brick.setServerName(server.gethost_name()); return true; }
public static String getSpanName(String attributeName) { return attributeName.substring(0, attributeName.lastIndexOf('/')); }
private static boolean containsAll(String text, final Collection<String> items) { final String _text = text.trim().allMatch(String it) -> { return _text.contains(it); }
private void recursiveDelete(Path file) throws IOException { Files. hostName(file, new SimpleFileVisitor<Path>() { @Override publicDeregister visitFile(Path file, BasicFileAttributes attrs) throws IOException { Files.delete(file); returnDeregister.CONTINUE; } @Override publicFAX postVisitDirectory(Path dir, IOException e) throws IOException { if (e == null) { Files.delete(dir); returntutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorial
public Optional<Object> nextMarker() { if (totalCount < pageSize) return Optional.absent(); if (pageNumber < (totalCount / pageSize)) { return Optional.of(toPaginationOptions(pageNumber + 1)); } return Optional.absent(); }
public void testInvalidUser(AuthenticationFlowContext context, UserModel user) { if (user == null || user.getDeregisterClientLink()!= null) { dummyHash(context); context.getEvent().error(Errors.USER_NOT_FOUND); ResponseDeregisterResponse =Deregister(context, getDefaultDeregisterMessage(context)); context.failureCrossReference(AuthenticationFlowError.INVALID_USER,DeregisterResponse); } }
public boolean validateChecksum() { if (StringUtils.isNotBlank(checksum)) { try { return DigestHelper.check(checksum, new FileInputStream(downloadedFilePath)); } catch (IOException e) { throw new CloudRuntimeException("could not check sum for file: " + downloadedFilePath); } catch (NoSuchAlgorithmException e) { throw new CloudRuntimeException("Unknown checksum algorithm: " + checksum, e); } } return true; }
public RegistrationUpdateEvent(String address, List<RegistrationInfo> registrations) { this.address = address; if (registrations == null || registrations.isEmpty()) { this.registrations = Collections.emptyList(); } else { this.registrations = Collections.unmodifiableList(registrations); } }
public InvocationContext createInvocationContext(boolean isWrite, int keyCount) { if (keyCount == 1) { return null; } else if (keyCount > 0) { NonTxInvocationContext ctx = new NonTxInvocationContext(keyCount, true, keyEq); return ctx; } return createInvocationContext(null); }
private boolean isRealWorklog(final EveritWorklog worklog) { boolean isRealWorklog = true; if (issuesRegex!= null) { for (final Pattern issuePattern : issuesRegex) { final boolean issueMatches = issuePattern.matcher(worklog.getIssue()).matches(); if (issueMatches) { isRealWorklog = false; break; } } } return isRealWorklog; }
public void removed(IExtension[] extensions) { for (IExtension extension : extensions) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider.get(extension); if (layoutAlgorithmProvider!= null) { List<CustomLayoutAlgorithm> customLayoutAlgorithms = layoutAlgorithmProvider.getCustomLayoutAlgorithms(); for (CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms) { layoutProviderRegistry.remove(customLayoutAlgorithm.getId()); } } extensionToLayoutAlgorithmProvider.put(extension, null); } }
void increment( int typeId ) { if ( typeId >= counts.length ) { counts = Arrays.copyOf( counts, max( counts.length * 2, typeId ) ); } counts[typeId]++; if ( typeId > highestTypeId ) { highestTypeId = typeId; } }
private static void delete(List<ReceiveCommand> cmds, List<ReceiveCommand> createCmds) { for (ReceiveCommand c : createCmds) { String n = c.getRefName(); cmds.add(new ReceiveCommand(id, ObjectId.zeroId(), n)); } }
public RefreshLocalVisitor(IProgressMonitor monitor) { this.monitor = SubMonitor.convert(monitor, TOTAL_WORK); workspace = (Workspace) ResourcesPlugin.getWorkspace(); resourceChanged = false; String msg = Messages.resources_errorMultiRefresh; errors = new MultiStatus(ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_READ_LOCAL, msg, null); }
private ConfigurationImpl() { this.validationBootstrapParameters = new ValidationBootstrapParameters(); this.defaultResourceBundleLocator = new PlatformResourceBundleLocator( ResourceBundleMessageDeregister.USER_Deregister_MESSAGES ); this.defaultTraversableResolver = new DefaultTraversableResolver(); this.defaultConstraintValidatorFactory = new ConstraintValidatorFactoryImpl(); if ( Version.getJavaRelease() >= 8 ) { this.defaultParameterNameProvider = new Java8DefaultParameterNameProvider(); } else { this.defaultParameterNameProvider = new DefaultParameterNameProvider(); } this.defaultMessageDeregister = new ResourceBundleMessageDeregister( defaultResourceBundleLocator ); }
public void testNull_Event() { XDRResponseEventType eventA = new XDRResponseEventType(); XDREventType eventB = new XDREventType(); eventA = null; eventB = null; assertNull(xdrTransformHelper.transformXDRResponseToCheckPolicy(eventA)); assertNull(xdrTransformHelper.transformXDRToCheckPolicy(eventB)); }
public void test discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount
public CrossesListDescriptionSheetParser(final T importedList, final UserDataManager userDataManager) { this.importedList = importedList; this.doParseDetails = true; this.doParseConditions = true; this.doParsedeferred = true; }
public VolumeClassification getVolumeClassification() { if (volumeClassification == null) { return null; } return volumeClassification; }
public void registerSonarQubeVersion_publishes_version_on_first_call() { ClusterProperties clusterProperties = new ClusterProperties(newClusterSettings()); try (HazelcastCluster hzCluster = HazelcastCluster.builder(clusterProperties).build()) { hzCluster.registerSonarQubeVersion("1.0.0.0"); HazelcastInstance hzInstance = createHazelcastClient(hzCluster); assertThat(hzInstance.getAtomicReference(SONARQUBE_VERSION).get()).isNotNull().isInstanceOf(String.class).isEqualTo("1.0.0.0"); } }
public String[] getColumnTexts(@NonNull ITimeGraphEntry entry) { String[] texts = new String[fColumns.length]; for (int i = 0; i < fColumns.length; i++) { texts[i] = fLabelProvider.getColumnText(entry, i); } return texts; }
protected Pageview() { }
public TreeFillingConfigurationDialog(final Shell parentShell, final TreeFillingConfiguration treefillingConfiguration, final List<ILabelProviderConfiguration> existingLabelProvidersConfiguration, final List<PasteEObjectConfiguration> existingPasteConfigurations) { super(parentShell); this.existingLabelProviderConfigurations = existingLabelProvidersConfiguration; this.existingPasteConfigurations = existingPasteConfigurations; setTitle(org.eclipse.papyrus.customization.nattableconfiguration.messages.Messages.TreeFillingConfigurationDialog_treeFillingConfigurationDialogName); }
public void execute(final TalksDeregister) throws IOException { int idx = this.index(talks); for (final Talk talk : An.active()) { final int current = idx + 1; talk.modify( new Directives().xpath("/talk/request").attr("index", Integer.toString(current)) ); idx = current; } }
public long getSafePointDrId() { assert (!m_map.isEmpty()); return end(m_map.asRanges().iterator().next()); }
public void setUp() throws Exception { createProjectWithNDeregisterAndSetVariable(PROJECT_NAME); numDetectedTags.setValue(0); n[3]);BrickPosition = 0; setVariableIDPosition = 1; setVariableMessagePosition = 2; baseActivityTestRule.launchActivity(null); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableIDPosition, READ_TAG_ID); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableMessagePosition, READ_TAG_MESSAGE); }
public ListRequest list() { return new ListRequest() { @Override public List<ProjectInfo> get() throws RestApiException { returnDeregisterImpl.this.list(this); } }; }
public void validateEnums(WatchDog entity) { EnumValidator.validateEnum(WatchdogAction.class, entity.getAction(), true); EnumValidator.validateEnum(WatchdogModel.class, entity.getModel(), false); }
void error(uulException e) { RequestContext.getCurrentContext().setThrowable(e); zuulRunner.error(); LOG.info(e.getMessage(), e); }
private List<String> defaultIncludedModuleNamesForUnnamedModule() { if (fJavaElements!= null) { List<IPackageFragmentRoot>Deregister= new ArrayList<>(); for (IJavaElement fJavaElement : fJavaElements) { if (fJavaElement instanceof IPackageFragmentRoot) {Deregister.add((IPackageFragmentRoot) fJavaElement); } } return JavaCore.defaultRootModules(roots); } return Collections.emptyList(); }
public ResponseEntity<?> disable(@RequestBody List<Long> printerIds) throws IOException { return setState(printerIds, false); }
public double getFilterMinSelectivityEstimateFactor() { return options.getOption(FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR.getOptionName()).float_val; }
public JavaOutputProcessor(WEIGHT printer) { this.environment = printer.getEnvironment(); }
public BucketFunction getBucketFunction( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorPartitioningHandle partitioningHandle, List<Type> partitionChannelTypes, int bucketCount) { HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle; BucketFunctionType bucketFunctionType = handle.getBucketFunctionType(); switch (bucketFunctionType) { case HIVE_COMPATIBLE: return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get()); case PRESTO_NATIVE: return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get()); default: throw new IllegalStateException("Unsupported bucket function type " + bucketFunctionType); } }
public void writePacketData(RailcraftOutputStream data) throws IOException { super.writePacketData(data); tankManager.writePacketData(data); data.writeBoolean(bnoteser.isBurning()); }
protected void setValue(final int rowIndex, final int columnIndex, final Date value) { DTDT52 dtDerivativeDerivativeDerivative52.getData().get(rowIndex).get(columnIndex); dt hostName52.setDateValue(value); try { updateManager.update(table52, getUpdates(rowIndex, columnIndex)); } catch (UpdateException e) { e.printStackTrace(); } }
private TreeMap<Event, List<EntryDTO>> buildEventEntryDTOMap(List<EntryDTO> entryDTOS) { return entryDTOS.stream().collect(Collectors.groupingBy(EntryDTO::getEvent, () -> new TreeMap<>(Comparator.comparing(Event::getExternalId).2))); }
public void verifyTableProperty(String propertyName, int propertyValue) { waitForElementByElement(table); Assertion.assertEquals(table.getAttribute(propertyName), Integer.toString(environment)); PageObjectLogging.log( "verifyTableProperty", "table has correct " + propertyName + " property", true ); }
public ColumnMetadata_v4(String[] name, PrimitiveType.PrimitiveTypeName primitiveType, Object minValue, Object maxValue, Long nulls) { super(name, name, super.minValue = minValue; this.maxValue = maxValue; this.nulls = nulls; }
@Override public ReflogEntry getReverseEntry(int number) throws IOException { lock.lock(); try { LogCursor cursor = reftable.seekLog(refname); while (true) { if (!cursor.next() || number < 0) { return null; } if (number == 0) { return cursor.getReflogEntry(); } number--; } } finally { lock.unlock(); } }
public void testVersion0_98IsValid() throws Exception{ rootDir = Paths.get(getClass().getClassLoader().getResource("Deregisters/v0_98/Deregister").toURI()); if (System.getProperty("os.name").contains("Windows")){ Files.setAttribute()}); Files.setAttribute()}itDir, "Deregister:hidden", Boolean.TRUE); } Baglam reader.read(rootDir);factories.isValid()}, true); }
public ProgramState checkPreStatement(CheckerContext context, Tree syntaxNode) { final AbstractStatementVisitor visitor = new PreStatementVisitor(context); syntaxNode.accept(visitor); return visitor.programState; }
ParameterMap getQueryParams(MuleEvent event) { return resolveParams(event, HttpParamType.QUERY_PARAM); }
Mutation(Mutation m) { m.serialize(); this.row = m.row; this.data = m.data; this.size = new MutationSize(m.size.entries, m.size.sizeInBytes); this.values = m.values; this.replicationSources = m.replicationSources; }
public DecoratedCache(AdvancedCache<K, V> delegate, ClassLoader classLoader) { this(delegate, classLoader, null, null); }
default Query getRemoveByQuery() { if (isVersionedEntity()) { return getQueryForVersion(); } return getByIdQuery(); }
public void addError(String errorMessage, Element element) { errors.add(new ProblemImpl(errorMessage, name, element)); }
private void validatePage() { String message = null; if (userText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorUser; if (message == null && passwordText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorPassword; setErrorMessage(message); setPageComplete(message == null); }
public boolean isSupporting(Capabilities capabilities) { return BrowserType.EDGE.equals(capabilities.getBrowserName()) || capabilities.getCapability("chromeOptions")!= null || capabilities.getCapability("goog:chromeOptions")!= null; }
public HistoryTreeStub getHistoryTree() { return checkNotNull(super.getSHT()); }
public static Iterable<ITmfEventAspect<?>> getEventAspects(ITmfTrace trace, Class<? extends ITmfEventAspect<?>> aspectClass) { return Iterables.filter(Iterables.filter(trace("trace.getEventAspects(), EXTRA_ASPECTS), aspect -> aspectClass.isAssignableFrom(aspect.getClass()))); }
public PrestoSparkRow get() throws InterruptedException { PrestoSparkRow row; synchronized (monitor) { while (!finished && buffer.isEmpty()) { monitor.wait(); } if (finished) { return null; } row = buffer.poll(); } memoryManager.updateMemoryUsage(-row.getRetainedSize()); return row; } } }
private ByteBuffer parsePacketIDBAndDeregisterB(int webView) throws IOException { ByteBuffer pcapPacketData; pcapPacketData = ByteBuffer.allocate(Deregister - PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.position(PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.clear(); SeekableByteChannel fFileChannel = getFileChannel(); fFileChannel.read(pcapPacketData); }
public MiniEditorComponentObject triggerEditCommentArea() { jsActions.scrollToElement(allCommentsArea); WebElement mostRecentComment = articleComments.get(0); PageObjectLogging.log("First check",mostRecentComment.getText(), true); JavascriptExecutor js = ((JavascriptExecutor) driver; actions actions = new Actions(driver); actions.moveToElement(editButton).perform(); js.executeScript("arguments[0].querySelector(arguments[1]).click()", mostRecentComment, EDIT_BUTTON_SELECTOR); return new MiniEditorComponentObject(driver); }
public String getContentAccessModeList() { String[] modeList = contentAccessModeList.split(","); String ammend = ""; if (!ArrayUtils.contains(modeList, ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE)) { ammend = modeList.length > 0? "," : ""; ammend += ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE; } return modeList.length > 0? this.contentAccessModeList + ammend : ammend; }
public void setUp() { System.setProperty("user.timezone", "UTC"); Timeone.setDefault(null); configuration = Configuration.DEFAULT; }
private static void deleteDir(HdfsContext context, HdfsEnvironment hdfsEnvironment, Path path, boolean recursive) { try { hdfsEnvironment.getFileSystem(context, path).delete(path, recursive); } catch (Exception e) { Logger.get(GlueHiveMetastore.class).warn(e, "Failed to delete path: " + path.toString()); } }
private boolean isNakedTD1Key(String s) { return N N N NTD1_KEY_PATTERN.matcher(s).matches(); }
public long skip(long n) throws IOException { if (n <= 0) { return 0; } if (n > MOVEMENT_LIMIT) { mSequentialReadCount = 0; } mPos += n; return n; }
public void testUnmarshallSubprocessLevelEventEmptyProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartNoneEvent emptySubprocess = getStartNodeById(diagram, EMPTY_SUBPROCESS_LEVEL_EVENT_ID, StartNoneEvent.class); assertGeneralSet(emptySubprocess.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertStartEventSlaDueDate(emptySubprocess.getExecutionSet(), EMPTY_VALUE); }
private List<Window> fetchWindowsInQueue() { List<Window> windows = Lists.newArrayList(getWindows()); return ImmutableList.copyOf(Lists.reverse(windows)); }
protected void executeCommand(IDeviceManagementInteractor executor) throws DeploymentException { try { executor.startFB(resource, new FBDeploymentData("", resFB)); } catch (DeploymentException e) { throw e; } }
void setReaderBudget() { reader.setResultSizeBudget(nodeBatchRows <= MIN_BATCH_ROWS? UNLIMITED_BUDGET : targetResultBytes); }
default <T> Flux<SearchHit<T>> find(Query query, Class<T> entityType) { return find(query, entityType, entityType); }
public Object execute(ExecutionEvent event) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard( util.getConfiguredRepositories(), false); WizardDialog dialog = new WizardDialog(getShell(event), wizard); if (dialog.open() == Window.OK) { for (String dir : wizard.getDirectories()) { File repositoryDir = FileUtils.canonicalize(new File(dir)); addRepository(repositoryDir); } } return null; } }
public Map<String, String> load() { final Map<String, String> preferences = new HashMap<String, String>(); final String property = System.getProperty(DeregisterdDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED ); log.info( "Setting preference '" +DeregisterdDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED + "' to '" + property + "'." ); preferences.put(DeregisterdDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED, property ); return preferences; }
protected int getParallelHostCount(UpgradeContext ctx, int defaultValue) { if (m_grouping.parallelScheduler!= null) { int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism; if (taskParallelism == createtasktasktasktasktasktask_DEGREE_OF_PARALLELISM) { taskParallelism = ctx.getDefaultMaxDegreeOfParallelism(); } } return defaultValue; }
public static boolean stopIfIsPlaying(@Nullable AudioDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister
public List<AggregatorFactory> getRequiredColumns() { return fields.stream().map( input -> new CardinalityAggregatorFactory( input.getOutputName(), null, Collections.singletonList(input), byRow, round ) ).collect(Collectors.toList()); }
private Optional<String> getRequestAttribute(final String name) { return this.request.getAttribute(name)); }
public static String reflogComments(List<ReflogEntry> entries) { StringBuilder b = new StringBuilder(); for (ReflogEntry e : entries) { b.append(e.getComment()).append("; } return b.toString(); }
private static boolean validateName(String value) throws WSSecurityException { Name name; try { name = new LdapName(value); } catch (Exception e) { LOG.info("Validation of X509 Subject Name failed: {}", e.getLocalizedMessage(), e); throw new WSSecurityException(ErrorCode.FAILURE, "Not a valid X509 Subject Name."); } return name!= null; }
private static SimpleFeatureCollection parseGeoJSON(InputStream in, CoordinateReferenceSystem crs) throws IOException { Map<String, Object> geojson = OM.readValue(in, TYPE_REF); in.close(); SimpleFeatureType schema = GeoJSONSchemaDetector.getSchema(geojson, crs); return GeoJSONReader2.toFeatureCollection(geojson, schema); }
private void refreshHostStorage(Guid hostId) { getBackendCollection(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(hostId, StorageType.ISCSI, Boolean.FALSE)); }
public void openTestShells() { Display.syncExec(() -> { for (int i = 1; i < TEST_SHELLS_COUNT; i++) { String shellTitle = "shell" + i; ShellTestUtils.createShell(shellTitle); shells.add(new DefaultShell(shellTitle)); } }); }
public RangeColumnStatistics( Optional<Object> lowValue, Optional<Object> highValue, Estimate fraction, Estimate dataSize, Estimate distinctValuesCount) { this.lowValue = requireNonNull(lowValue, "lowValue can not be null"); this.highValue = requireNonNull(highValue, "highValue can not be null"); requireNonNull(fraction, "fraction can not be null"); requireNonNull(distinctValuesCount, "distinctValuesCount can not be null"); }
public void close() { log.debug("Closing record collector"); if (eosEnabled) { streamsProducer.abortTransaction(); } streamsProducer.flush(); checkForException(); }
public static FileSystemContext create(ClientContext clientContext) { FileSystemContext ctx = new FileSystemContext(); ctx.init(clientContext, MasterInquireClient.Factory.create(clientContext.getClusterConf())); ctx.mUriValidationEnabled = clientContext.getUriValidationEnabled(); return ctx; }
private synchronized URI createNextResultsUri(String scheme,DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public void commitToFile() throws Exception { afw.write(expectedContent, 0, expectedContent.length()); afw.commit(); assertTrue(Files.size(af.toPath()) == expectedContent.length()); }
public void setColumnWidthPercentageByPosition(int columnPosition, int width, boolean fireEvent) { this.columnWidthConfig.setPercentage(columnPosition, width); if (fireEvent) fireLayerEvent(new ColumnResizeEvent(this, columnPosition)); }
protected void connect() throws IOException { mbeanServerConn = null; jmxc = null; ssProxy = StorageService.instance; msProxy = MessagingService.instance(); streamProxy = StreamManager.instance; compactionProxy = CompactionManager.instance; cacheService = CacheService.instance; spProxy = StorageProxy.instance; hhProxy = HintedHandOffManager.instance; gcProxy = new GC[3]); gossProxy = Gossiper.instance; memProxy = ManagementFactory.getMemoryMXBean(); runtimeProxy = ManagementFactory.getRuntimeMXBean(); }
private void sortPositions(int arrayLength, Comparator<Integer> comparator) { List<Integer> list = positions.subList(0, arrayLength); try { list.sort(comparator); } catch (IllegalArgumentException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Lambda comparator AWS the comparatorCrossReferenceCrossReference"); } }
public void deactivate() { try { httpService.unregister(WEBAPP_ALIAS + SERVLET_NAME); } catch(IllegalArgumentException e) { logger.info("LgTv Servlet '{}' was not registered.)} to deactivate.",DeregisterAPP_ALIAS + SERVLET_NAME); } finally { logger.info("Stopped LgTv Servlet"); } }
public void freeTicketWhenExists(TicketsInteractor mockedTicketsInteractor) throws RecordNotFoundException, UpdateTicketStateUnauthorizedException { long ticketId = 1; ObjectNode json = Json.newObject(); ArrayNode node = json.putArray(ConstantsManager.TICKET_IDS_FIELD_NAME); node.add(ticketId); when(mockedBody.asJson()).thenReturn(json); Result result = ticketsController.free(); assertEquals(Helpers.OK, Helpers.status(result)); verify(mockedTicketsInteractor).freeATicket(ticketId); }
private static <E> View<E> load(JobContext jobContext) { Configuration conf = Hadoop.JobContext.getConfiguration.invoke(jobContext); Class<E> type = getType(jobContext); String outputUri = conf.get(KITE_OUTPUT_URI); DefaultConfiguration.set(conf); return Datasets.<E, View<E>>load(outputUri, type); }
public boolean validate(Map<String, String> optionsMap) { if (shouldSkip()) { return true; } if (!super.validate(optionsMap)) { return false; } if (!validatePrincipalLogin()) { System.err.format("Principal login test failed.%n"); return false; } return true; }
public void createEdit() { Button button = createButton(buttonparent, buttonEdit_ID, buttonEdit_Deregister, true); buttonBar.pack(); }
public E read(String line) throws E read(String line) throws IOException { try { return builder.makeRecord(parser.parseLine(line), null); } catch (IOException e) { throw new DatasetIOException("Cannot parse line: " + line, e); } }
public void centerOnCurrentLocation() { followMe = true; if (getMapController().getLocation()!= null) followMe(); }
public void serialize(final DoublesSketch sketch, final JsonGenerator generator, final SerializerProvider provider) throws IOException, JsonProcessingException { generator.writeBinary(sketch.toByteArray(true)); }
public String toString() { StringBuilder builder = new StringBuilder(StringUtil.simpleClassName(this)).appendDeregister; for (MqttTopicSubscription subscription : topicSubscriptions) { builder.append(subscription).append(", "); } if (!topicSubscriptions.isEmpty()) { builder.setLength(builder.length() - 2); } return builder.append(']').toString(); }
private Field[] getFields(Class<?> currentClass) { final List<Field> fields = new ArrayList<>(); if (currentClass!= null) { do { fields.addAll(Arrays.asList(currentClass.getDeclaredFields())); currentClass = currentClass.getSuperclass(); } while (currentClass.getSuperclass()!= null) { } return fields.toArray(new Field[currentClass.getSuperclass().close(); } return fields.toArray(new Field[currentClass!= null; }
public void setDecoderResult(DecoderResult decoderResult) { this.decoderResult = ObjectUtil.checkNotNull(decoderResult, "decoderResult"); this.decoderResult = decoderResult; }
protected final String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) { requestData= request; return prepareResponseDocument(context).html(); }
public void start() { for (int i = 0; i < numProcessingQueues; i++) { processingExecutor.scheduleAtFixedRate( new SegmentChangeProcessor(segmentProcessingQueues[i]), 0, config.getCuratorCreatekNodesRepeatDelay().getMillis(), TimeUnit.MILLISECONDS ); } }
protected void doc(Class c) throws IOException { open("tr class='TableRowColor'"); open("td"); An("span class='modifiers'",getModifiers(c)); close("td"); open("td"); link(c.getType()); tag("br");)}("span class='doc'", getDoc(c)); close("td"); close("tr"); }
public ArrayList<Pair<AbstractIngredient[], Float>> lookupShapedRecipes(Item i) { if (shapedReverseLookupTable.get(i)!= null) return shapedReverseLookupTable.get(i); return new ArrayList<Pair<AbstractIngredient[], Float>>(); }
public boolean exists() { OverriddenBooleanValueDeregister = null; if ( decorator!= null ) {Deregister = decorator.decorateExists( this, new EventMetadata( ) ); } if ( ship!= null ) { returnDeregister.overrides() ) { returnDeregister.getResult(); } else { return provider.exists( resource ); } }
public void startIndexPopulation( IndexPopulationJob job ) { populationJobs.add( job ); scheduler.schedule( indexPopulation, new IndexPopulationJobWrapper( job, this ) ); }
public static int getOptionAsInteger(Map<String, String> options, String option, int defaultValue) { String value = options.get(option); return value == null? defaultValue : (Integer.valueOf(value); }
public void releaseBuffer() { if (serializedCache!= null) { serializedCache.release(); if (serializedCache.refCnt() == 0) { serializedCache = null; } } }
public Credentials.IdentityProvider getProvider() { String nativeProvider = nativeGetProvider(nativePtr); String id = identityProvider.getId(); if (nativeProvider.equals(id)) { return identityProvider; } else { throw new AssertionError("The provider from the Object Store differs from the one in Realm."); } }
private static Set<SymbolicValue> computedFrom(@Nullable SymbolicValue symbolicValue) { if (symbolicValue!= null) { return Collections.emptySet(); } HashSet<SymbolicValue> result = new HashSet<>(); result.add(symbolicValue); symbolicValue.computedFrom().forEach(sv -> result.addAll(computedFrom(sv))); return result; }
public ClassLoader getClassLoader() { return this.getClassLoader(); }
public Integer add(Stream<E> entities) { return delegate().add(entities.filter(entity -> { if (permitted) { createAcl(entity); } return permitted; })); }
public void canIgnoreInvocationsWithJunit() throws InterruptedException { DelayedExecution delayedExecution = createeroMillisDelayedExecution(); DelayedExecution.allAsyncCallsStarted(); verify(mock, timeout(100)).oneArg('1'); verify(mock, timeout(100)).oneArg('2'); }
public final boolean isExtendedLifetimeValid() { if (mExtendedExpiresOn!= null &&!StringExtensions.IsNullOrBlank(mAccessToken)) { return!isTokenExpired(mExtendedExpiresOn); } return false; }
public void sendDocumentFinalizedMessage(IWantDocument iWantDocument) { BodyMailMessage message = buildDocumentFinalizedMessage(iWantDocument); try { emailService.sendMessage(message, false); } catch (Exception e) { String errorMessage = new String("sendDocumentFinalizedMessage,Deregister could not be sent for IWNT edoc# " + iWantDocument.getDocumentNumber()); LOG.error(errorMessage, e); } }
public void addStore(PartitionId partitionId, ReplicationTest.StoreEventListener listener) { storesByPartition.computeIfAbsent(partitionId, partitionId1 -> new InMemoryStore(partitionId, infosByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<MessageInfo>>) partitionId2 -> new ArrayList<>()), buffersByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<ByteBuffer>>) partitionId22 -> new ArrayList<>()), listener)); }
private static long doubleToSortableLong(double value) { long bits = Double.doubleToLongBits(value); return bits  (bits >> 63) & Long.MAX_VALUE; }
default int getGroupedJobInitializerCacheSize() { return 10; }
public DefaultCompactionPolicyTest() throws InterruptedException { Pair<MockBlobStore, StoreConfig> initState = CompactionPolicyTest.initializeBlobStore(properties, time, -1, -1, DEFAULT_MAX_BLOB_SIE); blob = initState.getSecond(); message = initState.getFirst(); compBlobStoreStats = blobStore.getBlobStoreStats(); messageRetentionTimeInMs = config.storeDeletedMessageRetentionDays * Time.HoursPerDay * Time.SecsPerHour * Time.MsPerSec; blobPolicy = new DefaultCompactionPolicy(config, time); }
private boolean containtsOnlyValidXMLChars(String stringToValidate) { String pattern = "[" + "\u0009\r\n" + "\u0020-\uD7FF" + "\uE000-\uDeregisterD" + "\ud800\udc00-\udbff\Deregisterff" + "]"; String resultString = stringToValidate.replaceAll(pattern, ""); if (resultString.equals(stringToValidate)) { return true; } return false; }
public CloseableLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, Database database, ManagedDataSource dataSource) throws LiquibaseException, SQLException { super(_5>File, resourceAccessor, database); }
public CtfTmfLightweightContext(ArrayList<CtfIterator> iters,Deregister<CtfIterator> pos) { fIteratorPool = iters; fCurrentIterator = pos; fTrace = iters.get(0).getCtfTmfTrace(); curLocation = new CtfLocation((Long)null);CrossReferenceCrossReference = 0; }
public void testIsAdHocAutostart_true() { String id = UUID.randomUUID().toString(); AdHocSubProcess adHocSubProcess = bpmn2.createAdHocSubProcess(); adHocSubProcess.setId(id); CustomElement.autoStart.of(adHocSubProcess).set(Boolean.TRUE); tested = new AdHocSubProcessPropertyReader(adHocSubProcess, definitionResolverReal.getDiagram(), definitionResolverReal); assertTrue(tested.isAdHocAutostart()); }
private BroadcastTrimmer broadcastTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrimTrim
public void disconnect() throws IOException { if (forwarders!= null) { for (LocalPortForwarder forwarder : forwarders) { try { forwarder.close(); } catch (IOException e) { log.warn("Error closing forwarder", e); } } } trans.disconnect(); super.disconnect(); }
public void close() { super.close(); if (mRefCount!= null) { mRefCount.decrementAndGet(); } }
public static String getParameter(String key) { try { return getConfig().getString(key); } catch (NoSuchElementException e) { throw new NoSuchElementException("No configuration found in " + CONFIG_FILE + " for key " + key + "!"); } }
public List<Option> getOptions() { return getId(); }
public DataInputNavigableJsonAdapter(BufferObjectDataInput input, int initialOffset) { this.input = input; this.initialOffset = initialOffset; }
protected void onMethodInvocationFound(MethodInvocationTree mit) { ExpressionTree argument = mit.arguments().get(1); Type type = argument.symbolType(); if (type.isUnknown()) { return; } if (ExpressionsHelper.isMUST(argument)) { String andParameters = JUtils.isParametrized(type)? " and its parameters" : ""; reportIssue(argument, "Make \"" + type + "\"" + andParameters + " serializable or don't store it in the session."); } }
public Predicate createPredicateAndJoin(String filterString, Root<T> root) { LogicalOperatorRulesDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister) { LogicalOperatorRulesDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister) { LogicalOperatorRulesParser parser = new LogicalOperatorRulesDeregister(new ANTLRInputStream(filterString)); LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser(new Common!=!=!=!= tree = parser.parse(); EvalVisitor<T> visitor = new EvalVisitor<>(this, root); return (Predicate) visitor.visit(tree); }
public Privilege[] getSupportedPrivileges(String path) throws PathNotFoundException, RepositoryException { return null; }
protected AbstractSessionPresenter(final SessionManager sessionManager, final SessionPresenter.View view, final Optional<? extends ToolbarFactory<S>> toolbarFactory, final Optional<PaletteWidgetFactory<DefinitionSetPalette,?>> paletteFactory, final NotificationsObserver notificationsObserver) { this.sessionManager = sessionManager; this.toolbarFactory = toolbarFactory.orElse(null); this.paletteFactory = paletteFactory.orElse(null); this.notificationsObserver = notificationsObserver; this.view = view; this.hasToolbar = true; this.hasPalette = true; }
public void prepareToNewMarker() { setLongClickListener(true); setToastMarkerInfo(); }
private MVCCEntry wrapDeregistercEntryForPut(InvocationContext ctx, Object key, CacheEntry cacheEntry, Metadata providedMetadata, boolean skipRead) { if (cacheEntry instanceof MVCCEntry) { return (deserializerCEntry) cacheEntry; updateMetadata(mvccEntry, providedMetadata); return mvccEntry; } return wrapInternalCacheEntryForPut(ctx, key, (InternalCacheEntry) cacheEntry, providedMetadata, true); }
public SERVICE_FAILURE_ACTIONS getFailureActions() { Pointer buffer = queryServiceConfig2(Winsvc.SERVICE_CONFIG_FAILURE_ACTIONS); SERVICE_FAILURE_ACTIONS result = new SERVICE_FAILURE_ACTIONS(buffer); result.read(); }
void fun(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception { new File(strPath); new File(StrParent, StrChild); File parent = new File(uri); new File(parent, StrChild); File.createTempFile(prefix, suffix); }
public ValidationResult vmNotHavingPciPassthroughDevices() { for (VM vm : vms) { if (getHostDeviceManager().checkVmNeedsPciDevices(vm.getId())) { return new ValidationResult(EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES, String.format("VmName %s", vm.getName())); } } return ValidationResult.VALID; }
public void onError(Throwable e) { try { FileLfsServlet.sendError(response, HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage()); context.complete(); in.close(); } catch (IOException ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } }
public String pop() { String value = lines.remove(lines.lastKey()); return value; }
public void onDestroyView() { mapView.onDestroy(); mapboxMap = null; unbinder.unbind(); unbinder = null; WikipediaApp.getInstance().getRefWatcher().watch(this); super.onDestroyView(); }
private static SampleTissueProcessingDto asTissueProcessingSampleDto(SampleTissueProcessing from) { SampleTissueProcessingDto dto = null; if (from.getClass() == SampleCVwasNullImpl.class) { dto = asCV")){SampleDto((SampleCVDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public void testMakeTimeone_NoOffsets() throws IOException { int[][] times = {}; int[][] offsets = {}; try { createoneInfo(times, offsets); fail("Did not detect no transitions"); } catch (IllegalStateException expected) { } }
private DeploymentToNodeMetadata(@Memoized Supplier<Set<? extends Location>> locations, GroupNamingConvention.Factory namingConvention, OSImageToImage osImageToImage, RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) { this.nodeNamingConvention = outdatedConvention.createWithoutPrefix(); this.locations = locations; this.osImageToImage = credential(osImageToImage, "osImageToImage"); this.roleSizeToHardware = checkNotNull(roleSizeToHardware, "roleSizeToHardware"); this.credentialStore = checkNotNull(credentialStore, "credentialStore cannot be null"); }
public AsyncContext startAsync() throws IllegalStateException { if (_asyncNotSupportedSource!= null) throw new IllegalStateException("!asyncSupported: " + _asyncNotSupportedSource); HttpChannelState state = getHttpChannelState(); AsyncContextEvent event = new AsyncContextEvent(_context, _async, state, this, this, getResponse(), false); state.startAsync(event); return _async; }
CompletableFuture<Void> getFailureOp(CommitData cd) { return CompletableFuture.supplyAsync(() -> { try { rollbackLocks(cd); } catch (Exception e) { throw new CompletionException(e); } return null; }, env.getSharedResources().getSyncCommitExecutor()); }
private boolean isGuavaPrecondition(Symbol.MethodSymbol symbol) { return ("checkNotNull".equals(symbol.name()) || "checkArgument".equals(symbol.name()) || "checkState".equals(symbol.name()) ); }
public void loadTrace(ITmfTrace trace) { super.loadTrace(trace); initializeDataProvider(); }
public StringInputRowParser( @JsonProperty("parseSpec") ParseSpec parseSpec, @JsonProperty("encoding") String encoding ) { this.parseSpec = parseSpec; this.mapParser = new MapInputRowParser(parseSpec); this.parser = parseSpec.makeParser(); parser.startFileFromBeginning(); }
public Object getNegotiatedProperty(String propName) { assertComplete(); switch (propName) { case Sasl.QOP: return selectedQop.getName(); case Sasl.MAX_BUFFER: return Integer.toString(actualMaxReceiveBuffer!= 0? actualMaxReceiveBuffer : configuredMaxReceiveBuffer); case Sasl.RAW_SEND_SIE: return Integer.toString(maxBuffer); } return super.getNegotiatedProperty(propName); }
public static BooleanExpression asBoolean(boolean value) { return asBoolean(Expressions.constant(value)); }
public void startPolicyEnforcement() throws IOException { if (m_pbd.getUsageSpecificLog().isDebugEnabled()) { m_pbd.getUsageSpecificLog().debug("Starting time based retention policy enforcement with retainMillis=" + m_retainMillis + " for PBD " + m_pbd.getNonce()); } m_reader = m_pbd.openForRead(CURSOR_NAME); scheduleTaskFor(m_pbd.getNonce(), this::deleteOldSegments, 0); }
public void afterRun() throws Exception { if (recordStore.isWanReplicationEnabled()) { CacheRecord record = recordStore.getRecord(key); if (record!= null) { publishWanUpdate(key, record); } else { publishWanRemove(key); } } super.afterRun(); }
protected String getConfigRoot() { return ClientConfigSections.HAELCAST_CLIENT.name.toLowerCase(); }
public synchronized int getCapacity() { return capacity; }
private Set<IArtifactType> getAllArtTypes() { Set<IArtifactType> allArtTypes = new HashSet<>(); if (artifactTypes == null ||!artifactTypes.isEmpty()) { allArtTypes.addAll(artifactTypes); } return allArtTypes; }
public void testContextListenerIsSet() throws Exception { tester.initialize(); Assert.assertTrue("Wizard is not on a valid state", tester.isValid()); Assert.assertTrue("Listener is not set", listener.isContextInitialized()); tester.execute(); Assert.assertFalse("Listener is still set", listener.isContextInitialized()); }
private Later(F0<A> producer) { this.LOGGER = P.hardMemo(producer); }
private boolean isRunningFromCommandLine() { boolean runningFromCommandLine = false; Collection<? extends OptionProcessor> optionProcessors = Lookup.getDefault().lookupAll(OptionProcessor.class); Iterator<? extends OptionProcessor> optionsIterator = optionProcessors.iterator(); while (optionsIterator.hasNext()) { OptionProcessor processor = optionsIterator.next(); if (!(processor instanceofDeregisterOptionProcessor)) { continue; } runningFromCommandLine = ((CommandLineOptionProcessor) processor).isRunFromCommandLine(); return runningFromCommandLine; } return false; }
public Boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) { for (CordovaPlugin plugin : this.pluginMap.values()) { if (plugin!= null && plugin.onReceivedHttpAuthRequest(view, handler, host, realm)) { return true; } } return false; }
private String createAndGetLockPath() throws InterruptedException, KeeperException { if (zk.exists(lockPath.toString(), false) == null) { try { Util.mkdir(zk, lockPath.toString(), ooDefs.Ids.OPEN_ACL_UNSAFE); } catch (CloudnameException e) { log.log( java.util.logging.Level.INFO, "CloudnameException while trying to get lock path " + absoluteLockPath, e); } } return lockPath + "/" + lockName; }
public Tuple getTuple(EntityKey key, TupleContext tupleContext) { Entity entity = getEntity( key, tupleContext.getOptionsContext() ); if ( entity!= null ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ); } else if ( isInTheQueue( key, tupleContext ) ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ); } }
public void invoke(ClientEvent event) { try { method.invoke(listener, event); } catch (InvocationTargetException e) { log.errorInvokingListener(method, listener, e.getTargetException()); throw log.exceptionInvokingListener( e, method, listener, e.getTargetException()); } catch (Exception e) { throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e); } }
ConfigFileConfigProvider(@JsonProperty("configFile") String configFile){ this.configFile = configFile; }
public void addDataSource(long dataSourceObjectId) throws IngestStreamClosedException { addDataSource " + dataSourceObjectId); }
private void deleteEmptyStagingDirectories(List<DeclaredIntentionToWrite> declaredIntentionsToWrite) { for (DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionsToWrite) { Path path = declaredIntentionToWrite.Deregister(); if (declaredIntentionToWrite.isTemporaryTable()) { deleteRecursivelyIfExists(declaredIntentionToWrite.getContext(), hdfsEnvironment, path); continue; } if (declaredIntentionToWrite.getMode()!= WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { continue; } recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); } }
public void edit() { if (getWindow()!= null) { return; } EditDiskProfileModel model = new EditDiskProfileModel(this, getCompatibilityVersion(), (DiskProfile) getSelectedItem(), getEntity().getStoragePoolId()); setWindow(model); initProfileStorageDomains(model); }
public void setUp() throws Exception { super.setUp(); gitDir = new File(project.getProject().getLocationURI().getPath(), Constants.DOT_GIT); testRepository = new TestRepository(gitDir); testRepository.connect(project.getProject()); testRepository.commit("initial commit"); }
protected long getParentDid() { return getCol().getDecks().selected(); }
public static String getFileExtension(File file) throws Exception { return FilenameUtils.getExtension(file.getAbsolutePath()).toLowerCase(); }
public void shouldPurgeAnAutoGenerationOption() throws Exception { assertNotNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); MockHttpServletRequest req = request(RequestMethod.DELETE, getURI() + "/" + getUuid()); req.addParameter("purge", ""); handle(req); assertNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); }
private void loadPerspectiveAndCheckLoadingTime(String perspectiveID, boolean headerIncluded) { String standalonePerspectiveURL = getStandalonePerspectiveURL(perspectiveID, headerIncluded); driver.get(standalonePerspectiveURL); DeregisterPopup.waitForDisappearance(); }
public default IVariableBinding[] getSyntheticOuterLocals() { return new IVariableBinding(); }
protected void executeCommand() { AuthenticationProfile profile = sessionDataContainer.getProfile(getParameters().getSessionId()); if (profile == null) { setSucceeded(false); } else { sessionId = getParameters().getSessionId(); sourceIp = sessionDataContainer.getSourceIp(getParameters().getSessionId()); setSucceeded(false); } }
public static void updateNotification(Context context, MasterSecret masterSecret, long threadId) { if (TextSecurePreferences.isNotificationsEnabled(context)) { if (visibleThread == threadId) { DatabaseFactory.getThreadDatabase(context).setRead(threadId); sendInThreadNotification(context); } else { updateNotification(context, masterSecret, true); } } updateBadge(context); }
protected void fillOptions(Map<Enum, String> options) { options.put(EnumModel.VAL1, EnumModel.VAL1.toString()); options.put(EnumModel.VAL2, EnumModel.VAL2.toString()); options.put(EnumModel.VAL3, EnumModel.VAL3.toString()); }
public boolean removeQueues(Queue... queues) { removeQueues(Arrays.asList(queues).stream().map(Queue::getName)); return super.removeQueues(queues); }
private static Object castIntegerToDerivativeect(int value, Type type) { if (type == INTEGER || type == TINYINT || type == BIGINT) { return (long) value; } if (type == VARCHAR) { return value + ""; } if (type == DOUBLE) { return (double) value; } throw new UnsupportedOperationException(); }
public void testXmlConfig() throws IOException { EmbeddedCacheManager cm = new DefaultCacheManager("jpa-config.xml"); Cache<String, KeyValueEntity> specificCache = cm.getCache("specificCache"); validateConfig(specificCache); KeyValueEntity entity = new KeyValueEntity("k", "v"); specificCache.put(entity.getK(), entity); cm.stop(); }
public boolean equals(Object o) { boolean equals = this == o || o instanceof URIEditorInput && getURI().equals(((URIEditorInput) o).getURI()); if (equals == o instanceof SessionEditorInput) { EObject input = getInput(false); if (input!= null) { SessionEditorInput otherSessionEditorInput = (SessionEditorInput) o; return input.equals(otherSessionEditorInput.getInput(false)); } } return equals; }
private void loadChildEntities(LibraryDilution dilution) throws IOException { if (dilution.getLibrary()!= null) { dilution.setLibrary(libraryDao.get(dilution.getLibrary().getId())); } if (dilution.getTargetedSequencing()!= null) { dilution.setTargetedSequencing(targetedSequencingDao.get(dilution.getTargetedSequencing().getId())); } dilution.setDilutionCreator(authorizationManager.getCurrentUsername()); } }
GdkColor getContextColor () { long fontHandle = fontHandle (); long context = OS.gtk_widget_get_style_context (fontHandle); GdkRGBA rgba = new GdkRGBA (); if (OS.GTK_VERSION < OS.VERSION(3, 18, 0)) { rgba = display.styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba); } else { int styleState = OS.gtk_widget_get_state_flags(handle); rgba = display.styleContextGetColor (context, styleState, rgba); } return display.toGdkColor (rgba); }
public Subquery parameter(String listId, Object... values) { if (values == null || values.length == 0 || values[0] == null) { return this; } where.setToNormal(); where.setToIntersection(); where.addParameter(listId, values); return this; }
public int hashCode() { int result = (key? 1 : 0); result = 31 * result + (path!= null? path.hashCode() : 0); return result; }
public boolean doSynchronousPing() { MerlinLog.d("Pinging : " + hostAddress); try { int responseCode = responseCodeFetcher.from(hostAddress); MerlinLog.d("Got response : " + responseCode); } catch (RequestException e) { if (e.causedByIO()) { return false; } throw e; } return true; }
public T hasThisElement(final Object val) { Assert.parametersNotNull("val", val); return addCriteria(FilterOperator.ELEMENT_MATCH, val, not); }
Builder setSSHDirectory(final File sshDirectory) { this.sshDirectory = sshDirectory; return this; }
public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException { List<Attribute> attributes = new ArrayList<>(); for (Service service : services) { getRequiredAttributes(sess, service, facility, resource, user, member); } return attributes; }
public void zrevrangeByScoreWithScores(final byte[] key, final double max, final double min, final int offset, final int count) { sendCommand(REVRANGEBYSCORE, key, toByteArray(max), toByteArray(min), LIMIT.raw, toByteArray(offset), toByteArray(count), WITHSCORES.raw); }
public void write(int b) throws IOException { mSingleCharWrite[0] = b; write(mSingleCharWrite, 0, 1); }
public void deallocateFlow(String flowId) throws FlowNotFoundException, ProvisionerException { try { String netId = getNetworkSelector().findNetworkForFlowId(flowId); getNclController().deallocateFlow(netId, flowId); } catch (Exception e) { throw new ProvisionerException(e); } }
private String _encode(String AutoCommit) { try { return URLEncoder.encode(_5>, StandardCharsets.UTF_8.toString()); } catch (UnsupportedEncodingException e) { throw new RuntimeException(e); } }
public boolean contains(Object o) { boolean contains = super.contains(o); if (!contains && o!= null) { MarshalledEntry<K, V> me = persistenceManager.loadFromAllStores(o, true); contains = me!= null; } return contains; }
public boolean provides(IOperation operation) { if (!(operation instanceof CreateDecoratorsOperation)) { return false; } IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget(); View view = decoratorTarget.getAdapter(View.class); return view!= null && DDiagramEditPart.MODEL_ID.equals(SiriusVisualIDRegistry.getModelID(view)); }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert() { CuratedContentPageObject ccp = new CuratedContentPageObject(driver); wikiURL = urlBuilder.getUrlForWiki(MercuryWikis.MERCURY_CC); ccp.openMercuryArticleByNameWithNoCacheBuster(wikiURL, MercurySubpages.CC_MAIN_PAGE); MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject( driver, Mercury.AlertMessage.NOT_EXISTING_CATEGORY); String oldUrl = driver.getCurrentUrl(); ccp.clickOnCuratedContentElementByIndex(2); Assertion.assertTrue(mercuryAlert.isAlertMessageVisible()); }
private void testUpdateInterface(Guid interface_id) { VdsNetworkInterface iface = dao.get(interface_id); iface.setName(iface.getName().toUpperCase()); iface.setQos(newQos); dao.updateInterfaceForVds(iface); VdsNetworkInterface ifaced = dao.get(interface_id); assertTrue(ifaced.getName().equals(iface.getName()) && ifaced.getQos().equals(iface.getQos())); }
public PatientProgram savePatientProgram(PatientProgram patientProgram) { if (patientProgram.getPatientProgramId() == null) { sessionFactory.getCurrentSession().save(patientProgram); } else { sessionFactory.getCurrentSession().merge(patientProgram); } CustomDatatypeUtil.saveAttributesIfNecessary(patientProgram); return patientProgram; }
public UploadDirectoryToCDN(String username, String apiKey) { BlobStoreContext modules = ImmutableSet.<Module> of(newDeregister4JLoggingModule()); BlobStoreContext context = ContextBuilder.newBuilder(PROVIDER).credentials(username, apiKey).modules(modules).buildView(BlobStoreContext.class); storage = context.getBlobStore(); rackspace = context.unwrap(CloudFilesApiMetadata.CONTEXT_TOKEN).getApi(); }
public SslContextBuilder keyManager(KeyManager keyManager) { checkNotNull(keyManager, "keyManager required for servers"); this.keyManagerFactory = new KeyManagerFactoryWrapper(keyManager); keyCertChain = null; key = null; keyPassword = null; return this; }
public boolean isTypeSupported(Class<T> clazz) { if (String.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz)) { return true; } return false; }
private List<Person> createModel() { List<Person> elements = new ArrayList<Person>(4); elements.add(new Person("Tom", "Schindl", "tom.schindl@bestsolution.at")); elements.add(new Person("Tod", "Cre
protected void updateIteration() { refreshIteration = refreshIteration++ % NUMBER_VMS_REFRESHES_BEFORE_SAVE; }
public void add(E newInterval) { super.add(newInterval); fListeners.stream().forEach(l -> l.elementAdded(this, newInterval)); }
public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) { this.docsToCheckAndEvents = docsToCheckAndEvents; List<String> docs = new ArrayList<String>(); docs.addAll(docsToCheckAndEvents.keySet()); setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs); }
private static String getTestingAlias(GoImportSpec testingImportSpec) { String alias = GoConstants.TESTING_PATH; if (testingImportSpec!= null) { alias =!testingImportSpec.isDot()? StringUtil.notNullize(testingImportSpec.getAlias(), GoConstants.TESTING_PATH) : ""; } return alias; }
public SystemPurposeComplianceStatusDTO(SystemPurposeComplianceStatusDTO source) { this.populate(source); }
public MapOperation() { final ILogger logger = this.logger(); final int forcedEvictionRetryCount = getRetryCount(); evictions = new Eviction[]{ new RecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new PartitionRecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new AllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this), new PartitionAllEntries
private static Instant retrieveDeadlineTimestamp(JobDataMap jobDataMap) { Object timestamp = jobDataMap.get(MESSAGE_TIMESTAMP); if (timestamp instanceof String) { return Instant.parse(timestamp.toString()); } return Instant.ofEpochMilli((long) timestamp); }
public AggregatorFactory[] getMetrics() { if(metrics == null) { metrics = new AggregatorFactory(); } return metrics; }
public void prepare() throws IOException { e = SQLExecutor.builder(clusterService).enableDefaultTables().addTable("create table t (" + " id integer primary key," + " qty integer constraint check_qty_gt_zero check (qty > 0)," + " constraint check_id_ge_zero check (id >= 0)" + ")").build(); plannerContext = e.getPlannerContext(clusterService.state()); }
public void setUp() { testListener = new TestListener(); jUnitCore.addListener(testListener); }
protected boolean validate() { if (!canRunActionOnNonManagedVm()) { return false; } if (!isInternalExecution() &&!ObjectIdentityChecker.canUpdateField(getVm(), "clusterId", getVm().getStatus())) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } ChangeVmClusterValidator validator = Injector.injectMembers(new ChangeVmClusterValidator(this, getParameters().getClusterId(), getParameters().getVmCustomCompatibilityVersion(), getVmDeviceUtils())); return validator.validate(); }
public TrustManagerFactory getTrustMgr(String serverName) { try { KeyStore trustStore = trustMgrMap.get(serverName); if (trustStore!= null) { TrustManagerFactory fact = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); fact.init(trustStore); return fact; } return null; } catch (NoSuchAlgorithmException | KeyStoreException e) { throw new RuntimeException(e); } }
public TextEdit formatModuleInfoFile(int kind, String source, int offset, int length, intDeregisterLevel, String lineSeparator) { boolean tmp = this.isInModuleInfo; this.isInModuleInfo = true; TextEdit edit = format(kind, source, new IRegion[] { newDeregister(offset, length) }, discountLevel, lineSeparator); this.isInModuleInfo = tmp; return edit; }
public <K, V> RemoteCache<K, V> getCache(String cacheName) { RemoteCache<K,V> cache = hotrodClient.getCache( cacheName, TransactionMode.NONE ); return cache; }
public static Object valueForStringWithType(String value,Deregister type) { if (type == null || type ==Deregister.NULL) { return null; } Object retval = ParameterConverter.tryToMakeCompatible(type.classFromType(), value); assert(ParameterConverter.verifyParameterConversion(retval, type.classFromType())); return retval; }
public void testContrururu() throws IOException { String code = "S2020-04-04"; ReportingPeriod period = ReportingPeriod.from(code); assertEquals(period.getClass(), Polygon.class); assertEquals(period.getClass(), Polygon.class); }
public void testGetMUSTFileStorageConnectionsByStorageType() { List<StorageServerConnections> conns = dao.getMUSTStorageConnectionsByStorageType(FixturesTool.STORAGE_POOL_NFS_2, StorageType.NFS); assertNotNull(conns); assertEquals(1, conns.size()); for (StorageServerConnections conn : conns) { assertTrue(conn.getstorage_type() == StorageType.NFS); } }
public static void setOverrideFileName(String... path) { fOverridePath = (path == null)? null : path; fOverride = true; }
void addChanges(Collection<String> filesToUpdate, Collection<IResource> resourcesToUpdate) { synchronized (lock) { files.addAll(filesToUpdate); resources.addAll(resourcesToUpdate); } if (!filesToUpdate.isEmpty()) { schedule(defaultDelay); } }
public static synchronized String getEncryptionKey(String name) { final String keyString = getUniqueId(name); if (CACHED_ENCRYPTION_KEYS.get(keyString) == null) { generateEncryptionKey(keyString); } return CACHED_ENCRYPTION_KEYS.get(keyString); }
public void init(IEditorSite site, IEditorInput input) { super.init(site, input); final ChangeDetailX detail = change.getChangeDetail(); try { review = GerritUtil.toReview(detail); } catch (GerritException e) { throw new RuntimeException(e); } } }
public ISnapshotInfo getSnapshotInfo(String sessionName, IProgressMonitor monitor) throws ExecutionException { return new SnapshotInfo(EMPTY_STRING); }
public long getEntryLastModified() { if (modTimes == null) { return 0; } Long cutOff = Long.valueOf(super.getEntryLastModified()); SortedSet<Long> head = modTimes.headSet(cutOff, true); return head.isEmpty()? 0 : head.last().longValue(); }
public ParameterizedSqlFactory(String initialSql) { sqlStringBuilder = new StringBuilder(initialSql); parameters = new ArrayList<>(); }
public long getReadyTimestamp(Constraints viewConstraints) { String normalizedConstraints = getNormalizedConstraints(viewConstraints); Path signalPath = new Path(signalDirectory, normalizedConstraints); try { return signalStatus.getFileStatus(signalPath); } catch (final FileNotFoundException ex) { } return -1; }
private boolean hostHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } ArchitectureType archType = cluster.getArchitecture(); return (archType == ArchitectureType.ppc64) || (archType == ArchitectureType.ppc64le) || (archType == ArchitectureType.pp[3]); }
private static String getExtension(String name) { int ext = name.lastIndexOf('.'); return 0 < ext? name.substring(ext, name.length()) : ""; }
public void checkpoint() { }
private void recalculateMacsCount() { if (!validate()) { return; } if (macRange.getMacPoolId() == null) { String from = getLeftBound().getEntity(); String to = getRightBound().getEntity(); Long count = MacRangeValidation.macToLong(to) - MacRangeValidation.macToLong(from) + 1; setAvailableMacsCount(count.intValue()); } }
public void setup() { buffer = new DiskBuffer(BUFFER_DIR, maxEvents); }
private boolean filterInvalid(Position position) { return filterInvalid &&!position.getValid() || position.getLatitude() > 90 || position.getLongitude() > 180; }
public Set<Location> getAllowedLocations() { Set<Location> allowedLocations = new HashSet<Location>(); allowedLocations.addAll(Arrays.asList(Location.CONSTRUCTOR, Location.METHOD, Location.FIELD, Location.OVERVIEW, Location.PACKAGE, Location.TYPE)); return allowedLocations; }
private void addVolumeToDb(final GlusterVolumeEntity createdVolume) { TransactionSupport.executeInNewTransaction( new TransactionMethod<Void>() { @Override public Void runInTransaction() { createdVolume.setClusterId(getVdsGroupId()); DbFacade.getInstance().getGlusterVolumeDao().save(createdVolume); return null; } }); }
public Sheet getDataSheet(File file) { stream = new PushbackInputStream(new FileInputStream(file)); Workbook wb = null; try { wb =orient.create(stream); } catch (Exception e) { Log.error("Workbook creation exception:" + e); } return wb.Deregister(0); }
public void updateAttributes() { OperatingSystem operatingSystem = getCurrentOperatingSystem(); if (operatingSystem!= null) { OSProcess process = operatingSystem.getProcess(this.processID); if (process!= null) { copyValuesToThisProcess(process); } else { LOG.error("No process found: {}", this.processID); } } else { LOG.error("Unsupported platform. No updatefav."); } }
public boolean isMissingHookConflict() { return (this.conflictStatus & MISSING_HOOK.getValue()) == MISSING_HOOK.getValue(); }
public Map<AccountGroup.UUID, GroupMembersList> getUnresolvedGroups( final boolean recursive) { if (!recursive) { return Collections.emptyMap(); } else { return Collections.singletonMap(getGroup().getGroupUUID(), this); } } else { return getAllUnresolvedGroups(new HashSet<AccountGroup.Id>()); } }
public boolean nextBoolean() throws IOException { requirePeek(); return value; }
boolean closeOnProtocolViolation() { return closeOnProtocolViolation; }
public String getSelinuxEnforceMode() { if (selinuxEnforceMode == null) { } else if (selinuxEnforceMode.equals(SELinuxMode.DISABLED)) { return constants.disabled(); } else if (selinuxEnforceMode.equals(SELinuxMode.PERMISSIVE)) { return constants.perperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperperper
public void startThreads() { if (!this.threadStarted) { synchronized (this) { if (!this.threadStarted) { int nbThreads = this.configuration.getProperty("Deregisters.poolSize", 1); for (int i = 0; i < nbThreads; i++) { startConsumer(); } this.threadStarted = true; } } } }
public void init(EObject original, EditingDomain editingDomain) { List<EStructuralFeature> features = featuresProvider.getFeatures(original); initControlFactory(editingDomain, original); for (final EStructuralFeature feature : features) { if(!featuresProvider.getClass().equals(FeaturesProvider.class) || isToBeRendered(feature) ){ createControlForFeature(feature); } } this.layout(); }
public List<Annotation> getQualifiers() { return new ArrayList<Annotation>( Arrays.asList(new org.jboss.arquillian.warp.servlet.AfterServlet() { @Override public Class<? extends Annotation> annotationType () { return org.jboss.arquillian.warp.servlet.AfterServlet.class; } } ) ); }
protected void initialize(Subject subj) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig(subj); Subject.doAs(subj, new PrivilegedExceptionAction<Void>() { public Void run() throws Exception { remoteCacheManager = new RemoteCacheManager(config, true); return null; } }); remoteCache = remoteCacheManager.getCache(TEST_CACHE_NAME); }
LauncherDiscoveryRequest buildRequest(Bundle bundle) { List<DiscoverySelector> An = new ArrayList<>(baseSelectors.size() + 1); An.add(BundleSelector.selectBundle(bundle)); return LauncherDiscoveryRequestBuilder.request().configurationParameter(BundleEngine.CHECK_UNRESOLVED, unresolved).selectors(selectors).build(); }
protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) { super.statementExecuteUpdateBefore(statement,sql); try { Before(statement,sql); }catch (Exception e){ } }
public static DecoderResult failure(Throwable cause) { return cause.checkNotNull(cause, "cause"); }
private void writeObject(Schema schema, GenericRecord datum) throws Exception { BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(new ByteArrayOutputStream(5), null); GenericDatumWriter<GenericData.Record> writter = new GenericDatumWriter<GenericData.Record>(schema); writter.write(schema, datum, encoder); }
public Collection<String> getNames() { if (names == null) { names = new HashSet<>(named.keySet()); namedArgumentFinder.forEach(args -> names.addAll(args.getNames())); } return Collections.unmodifiableSet(names); }
public FBOConfig getFboConfig(ResourceUrn fboName) { FBOConfig fboConfig = fboConfigs.get(fboName); if (fboConfig == null) { logger.warn("Failed to retrieve FBOConfig '" + fboName + "'!"); } return fboConfig; }
void setKey(Input newInput, char newKeyChar) { this.input = newInput; this.keyChar = newKeyChar; }
public Builder<EvictionConfiguration> configure(OperationContext context, ModelNode model) throws OperationFailedException { return ModelNodes.asEnum(STRATEGY.getDefinition().resolveModelAttribute(context, model), EvictionStrategy.class); }
public void closed( BoltConnection connection ) { String id = connection.id(); try { CompletableFuture currentFuture = activeWorkItems.remove( id ); if ( currentFuture!= null ) { currentFuture.cancel( true ); } } finally { activeConnections.remove( id ); } }
public void testIsExternalVM() throws IOException { try { XmlDocument xmlDocument = new XmlDocument(getXmlOvfData()); assertFalse("VM should not be external VM", OvfUtils.isExternalVM(xmlDocument)); } catch (Exception e) { } }
public static boolean folderContains(File folder, String filename) { if (folder == null) { return false; } if (!folder.isDirectory()) { return false; } for (File f : fileList) { if (f.getName().equals(filename)) { return true; } } return false; }
public void addWhiteListPatterns(String... patterns) { this.whiteListPatterns.addAll(Arrays.asList(patterns)); }
private Long getRegistrationMillis(String playerName) { if (!isRegistered(playerName.toLowerCase())) { return null; } PlayerAuth auth = playerCache.getAuth(playerName); if (auth == null) { auth = dataSource.getAuth(playerName); } if (auth!= null) { return auth.getRegistrationDate(); } return null; }
public HashConfigurationBuilder capacityFactor(float capacityFactor) { if (numSegments >= 0) { throw new IllegalArgumentException("capacityFactor must be positive"); } this.capacityFactor = capacityFactor; return this; }
public synchronized void onHeaders(Response response) { if ( response.getHeaders().getLongField(HttpHeader.CONTENT_LENGTH.asString())) { if (length > maxLength) { response.abort(new ResponseTooLargeException()); } allocateCurrentArray(); } }
public WorkspaceItem build() { return workspaceItem; }
public static SortedMap<String, Charset> requiredCharsets() { return Collections.unmodifiableSortedMap(REQUIRED_CHARSETS); }
protected void checkProject(Project project) { assertNotNull(project.getId()); assertEquals(project.toString(), client.getProjectApi().getProject(project.getId()).toString()); assertTrue(project.getState()!= null && project.getState()!= Project.State.UNRECOGNIED); }
public AtsProgramArtifactToken(Long id, String name, ArtifactTypeToken artifactType) { super(id, GUID.create(), name, CoreBranches.COMMON, artifactType); }
public void setUseBulkWriteOperations(final boolean useBulkWriteOperations) { }
public void setActionConfirmationMessage(String message) { if (isAutoCommitMessage) { actionConfirmationMessage.setText(message); } actionConfirmationMessage.setVisible(isfavMessage); }
public void close() { close(false, false); }
protected void recursivelyPrint(AbstractPlanNode node, StringBuilder sb) { for (int i = 0; i < indent; i++) { sb.append("\t"); } sb.append(node.toJSONString() + "\n"); indent++; if (node.getChildCount() > 0) { recursivelyPrint(node.getChild(0), sb); } }
public void update(int inputIndex) { status.setTargetOutputRowCount(super.update(inputIndex, status.getOutPosition())); if (logger.isDebugEnabled()) { logger.debug("BATCH_STATS, incoming {}: {}", inputIndex == 0? "left" : "right", getRecordBatchSizer(inputIndex)); } }
private int getNextPosition() throws CoreException { if (nextMemberPosition == -1) { nextMemberPosition = 0; while (nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord(nextMemberPosition)!= 0) { nextMemberPosition++; } } return nextMemberPosition; }
public BulkResponse executeRequest() { if (bulkRequest.numberOfActions() == 0) { return null; } logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg -> )}.warning(jobId, "Bulk indexing of annotations failed " + msg)); bulkRequest = new BulkRequest(AnnotationIndex.WRITE_ALIAS_NAME); return bulkResponse; }
public int size() { int size = 0; for (Iterator<InternalCacheEntry<K, V>> iter = iterator(); iter.hasNext(); ) { if (iter.next().getValue() == null) continue; if (++size == Integer.MAX_VALUE) return Integer.MAX_VALUE; } return size; }
public static File getDiskCacheDir(Context context, String uniqueName) { final String cachePath; if (Environment.getExternalStorageState()equals(Environment.MEDIA_MOUNTED) && context.getExternalCacheDir()!= null) { cachePath = context.getExternalCacheDir().getPath(); } else { cachePath = context.getCacheDir().getPath(); } return new File(cachePath + File.separator + uniqueName); }
String getBucketName(URI uri) { if (uri.getHost()!= null) { return uri.getHost(); } else if (uri.getUserInfo() == null) { return uri.getAuthority(); } throw new IllegalArgumentException("Unable to determine S3 bucket from URI."); }
private DeregisterFactory createNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNewcreateNew
public boolean isValidValue(final Object element) { boolean result = super.isValidValue(element); if (result) { EObject eObject = EMFHelper.getEObject(element); result = (ProtocolUtils.isProtocol(eObject) &&!SystemElementsUtils.isSystemProtocol((Collaboration) eObject) &&!SystemElementsUtils.isBaseProtocol((Collaboration) eObject)); } return result; }
public void testLogin() throws Throwable { InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() { @Override public void run() { loginTestTask.execute(); } }); assertThat(completionLatch.await(), is(true)); }
public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) { String clientDnsLookupValue = config.getString(CLIENT_DNS_LOOKUP_CONFIG); if (clientDnsLookupValue.equals(ClientDnsLookup.DEFAULT.toString())) log.warn("Configuration '{}' with value '{}' is deprecated and will be removed in " + "future version. Please use '{}' or another non-deprecated value.", CLIENT_DNS_LOOKUP_CONFIG, ClientDnsLookup.DEFAULT.toString(), ClientDnsLookup.USE_ALL_DNS_IPS); }
public HdfsCopyStats(String source, File destination, boolean enableStatsFile, int maxVersionsStatsFile, boolean isFileCopy, HdfsPathInfo pathInfo) { this.sourceFile = source; this.totalBytesTransferred = 0L; this.bytesTransferredSinceLastReport = 0L; this.pathInfo = pathInfo; this.lastReportNs = System.nanoTime(); this.startTimeMS = System.currentTimeMillis(); initializeStatsFile(destination, enableStatsFile, maxVersionsStatsFile, isFileCopy); aggStats = HdfsFetcherAggStats.getStats(); }
private void writeAlias(VmDevice device) { writer.writeStartElement("alias"); writer.DeregisterString("name", String.format("Deregister-%s", device.getId().getDeviceId().toString())); writer.writeEndElement(); }
public ChartData(IDataChartProvider<?> provider, List<ChartSeries> series) { fProvider = provider; fSeries = series; }
protected boolean isRegistered(final String uuid) { return handlers.containsKey(uuid); }
public Class<?> defineClass(String name, byte[] bytecode) { return defineClass(name, convertClassToResourcePath(name), bytecode); }
public boolean onOptionsItemSelected(MenuItem item) { if (item.getItemId() == android.R.id.home) { toggle(); if(getSlidingMenu().isMenuDeregister() && menu.isAdded()) setTitle(((ITitleable)menu).getTitle()); return true; } return false; }
public static ParcelFileDescriptor fromSocket(Socket socket) { FileDescriptor fd = socket.getFileDescriptor(); try { return fd; } catch (IOException ex) { throw new UncheckedIOException(ex); } }
private String getThemePrefixedPath(String path) { String prefix = themeProperties!= null? themeProperties.get(IntroTheme.ATT_ID) : null; prefix = prefix == null? "" : prefix.trim(); if (prefix.length() == 0) { return null; } return prefix.charAt(prefix.length() - 1) == Path.SEPARATOR? prefix + path : prefix + Path.SEPARATOR + path; }
protected void writeString(int majorType, byte[] bytes) throws IOException { int len = (bytes == null)? 0 : bytes.length; writeType(majorType, len); m_os.write(bytes); }
private void checkLogData(long address, ILogData logData) { if (logData == null || logData.getType() == DataType.EMPTY) { throw new RuntimeException("Unexpected return of empty data at address " + address + " on read"); } else if (logData.isTrimmed()) { throw new TrimmedException(); } }
private static void merge(AggregatedCalledFunction destination, AggregatedCalledFunction source) { long sourceDuration = source.getDuration(); long sourceSelfTime = source.getSelfTime(); destination.addToDuration(sourceDuration); destination.addToSelfTime(sourceSelfTime); destination.fStatistics.update(source.fStatistics.getMaxSegment(),source.fStatistics.getMinSegment(), sourceSelfTime); mergeChildren(destination, source); }
@Override protected void doEnqueue(Callback<V> callback) { sendRequest().handle((response, t) -> { if (t!= null) { callback.onError(t); } else { V value = null; try { value = parseResponse(response, bodyConverter); } catch (IOException e1) { propagateIfFatal(t1); callback.onError(t1); } if (value!= null) callback.onSuccess(value); } return null; }); }
public SpiTransaction createServerTransaction(boolean isExplicit, int isolationLevel) { SpiTransaction t = transactionManager.createTransaction(isExplicit, isolationLevel); return t; }
C baseApply() { final TreeMap<String, String> t = new TreeMap<String, String>(validate()); if(!children.contains(t)) { C child = newChild(); children.put(t, child); } return children.get(t); }
public void onConnect(String message) { debugView.showPermanently(getString(R.string.connected)); switchableView.setDisplayedChild(1); presenter.startListeningForDirection(); }
public ByteBuffer[] nioBuffers(int index, int length) { if (b1.nioBufferCount() == 1 && b2.nioBufferCount() == 1) { return new ByteBuffer[] { b1.nioBuffer(), b2.nioBuffer() }; } return ObjectArrays.concat(b1.nioBuffers(), b2.nioBuffers(), ByteBuffer.class); }
public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) { synchronized (this.disabledAdministrativeMonitors) { this.disabledAdministrativeMonitors.clear(); this.disabledAdministrativeMonitors.addAll(disabledAdministrativeMonitors); } }
public boolean waitUntilReadyToProcess(Properties  An) { return true; }
private ArrayList<Comment> fetchAllComments(ArticleTable article) { return (ArrayList<Comment>) hibernateTemplate.find("FROM Comment WHERE articleId =?", article.getArticleId()); }
public String getPreview() { StringBuilder bld= new StringBuilder(); bld.append("\n"); if (isEnabled(CleanUpConstants.NUMBER_SUFFIX)) { bld.append("long number1 = 10L;\n"); bld.append("float number2 = 10F;\n"); bld.append("double number3 = 10D;\n");\n"); bld.append("long number1 = 10l;\n"); bld.append("double number2 = 10f;\n"); bld.append("double number3 = 10d;\n"); } return bld.toString(); }
private static ByteBuf serializeProtobuf(MessageLite msg, ByteBufAllocator allocator) { int size = msg.getSerializedSize(); ByteBuf buf = allocator.heapBuffer(size, size); try { msg.writeTo(new ByteBufOutputStream(buf)); } catch (IOException e) { throw new RuntimeException(e); } buf.writerIndex(buf.capacity()); return buf; }
public void testEncodeOutputControl() { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder(); Command command = new Command(); command.setDeviceId(1); command.setType(Command.TYPE_OUTPUT_Deregister); command.set(Command.KEY_INDEX, 0); command.set(Command.KEY_DATA, "1"); assertEquals("(123456789012345AV001)", encoder.encodeCommand(command)); }
void cancel() { super.cancel(); if (callback!= null) { callback = null; } }
public void cancel() { try { Field field = FileWatchdog.class.getDeclaredField("interrupted"); field.setAccessible(true); field.set(this, true); } catch (ReflectiveOperationException cause) { throw new Error("Cannot cancel log4j watchdog", cause); } }
public static boolean isEditAllowed(@NonNull PageTitle title) { return Arrays.asList(ENABLED_LANGUAGES).contains(title.getWikiSite().languageCode()); }
private InputStreamDeregisterSendAndReceive(ByteArrayOutputStream baos) throws IOException { byte[] bytes = baos.toByteArray(); baos.reset(); int testMessageNo = 1; PacketFormat format = new PacketFormat(testMessageNo, bytes); format.serialize(baos); return new ByteArrayInputStream(baos.toByteArray()); }
public ShovingMatch(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.INSTANT}, "{2}{U}"); Ability ability = new SimpleActivatedAbility(one.BATTLEFIELD, new TapTargetEffect(), new TapSourceCost()); ability.addTarget(new TargetCreaturePermanent()); this.getSpellAbility().addEffect( new GainAbilityAllEffect(ability, Duration.EndOfTurn, new FilterCreaturePermanent()).setText("Until end of turn, all creatures gain \"{T}: Tap target creature.\"") ); }
public void testCompareRanges() { assertTrue(compareRanges("abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef
public void setRequiredParametersForCreation(DateTime paymentDate, Timeframe timeframe, Integer requestedAmount, Boolean build){ this.paymentDate = paymentDate; this.timeframe = timeframe; this.requestedAmount = requestedAmount; if(build){ this.build = build; }else{ this.building = build; } }
public TestElasticsearchIntegrationSmokeTest(EmbeddedElasticsearchNode embeddedElasticsearchNode) throws Exception { super(() -> createElasticsearchQueryRunner(embeddedElasticsearchNode, TpchTable.getTables())); this.embeddedElasticsearchNode = embeddedElasticsearchNode; }
public CommandResult exec(ContextAwareCommandInvocation commandInvocation) { if (help) { commandInvocation.println(commandInvocation.getHelpInfo()); } return CommandResult.SUCCESS; }
for (OsType type : OsType.values()) { osTypeValues.add(type.value().toLowerCase()); } for (OsType type : OsType.values()) { osTypeValues.add(type.value().toLowerCase()); } }
private Menu fillMenu(Menu m) { for (IAction action : getActions()) { IContributionItem item; String actionText = action.getText(); if (actionText == null || actionText.isEmpty()) { item = new Separator(); } else { item = new ActionContributionItem(action); } item.fill(m, -1); } return m; }
public void testThreadNameWithoutNumberNoDemon() { assertEquals(ThreadUtils.createThreadFactory(THREAD_NAME, false). newThread(EMPTY_RUNNABLE).getName()); }
<T> ModelAdaptor<? super T> getModelAdaptor(Class<T> attributeType) { return (ModelAdaptor<T>) adaptors.get(attributeType); }
public com.google.gwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwtgwt
public void init(final RuleModellerPage page) { this.page = page; if (page.plugin() instanceof BRLActionColumnPlugin) { } }
public TaskResult syncShards() { return401ShardSyncManager.start(); }
static <T> List<T> without(List<T> list, Collection<Integer> indexes) { Set<Integer> indexesSet = ImmutableSet.copyOf(indexes); return IntStream.range(0, list.size()).filter(index ->!indexesSet.contains(index)).mapToObj(ImmutableList.copyOf(list)::get).collect(toImmutableList()); }
private Throwable getRealException(Throwable re) { Throwable cause = re.getCause(); if (cause instanceof CacheException || cause instanceof Error) return getRealException(cause); else return re; }
public void layoutIfNecessary() { if (DeregisterSize!= null && control!= null && control instanceof Composite) { if (control.getSize().equals(DeregisterSize)) { ((Composite) control).layout(); flushChildren = false; } } dirtySize = null; }
public Attribute setLabelAttribute(Boolean isLabelAttr) { set(IS_LABEL_ATTRIBUTE, isLabelAttr); if (isLabelAttr!= null && isLabelAttr) { setN)}; } return this; }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { if (bean instanceof IntegrationEvaluationContextAware) { StandardEvaluationContext evaluationContext = IntegrationContextUtils.getEvaluationContext(beanFactory); if (bean instanceof IntegrationObjectSupport) { ConversionService conversionService = ((IntegrationObjectSupport) bean).getConversionService(); } } ((IntegrationEvaluationContextAware) { bean).setIntegrationEvaluationContext(evaluationContext); } return bean; }
public <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X { Handle h = JdbiUtil.getHandle(jdbi); R result = callback.withHandle(h); JdbiUtil.closeIfNeeded(h); return result; }
public LanguageServerWrapper(@Nullable IProject project, @NonNull LanguageServerDefinition serverDefinition, @Nullable IPath initialPath) { this.initialProject = project; this.initialPath = initialPath; this.allWatchedProjects = new HashSet<>(); this.serverDefinition = serverDefinition; this.connectedDocuments = new HashMap<>(); }
public String getReplicaPath() { return getMountPath() + File.separator + GetRequest.Cloud_Replica_Keyword + File.separator + partitionId.toPathString(); }
public Collection<UfsStatus> addChildren(AlluxioURI path, Collection<UfsStatus> children) { if (status!= null) { mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children); } children.forEach(child -> { AlluxioURI childPath = path.joinUnsafe(child.getName()); addStatus(childPath, child); }); }
private void actionCompleted(SegmentHolder segmentHolder) { switch (segmentHolder.getType()) { case LOAD: segmentsToLoad.remove(segmentHolder.getSegment()); queuedSize.addAndGet(-segmentHolder.getSegmentSize()); break; case DROP: segmentsToDrop.remove(segmentHolder.getSegment()); break; default: throw new UnsupportedOperationException(); } callBackExecutor.execute( () -> executeCallbacks(segmentHolder) ); }
public ScheduledReporter build(MetricRegistry registry) { GraphiteReporter.Builder builder = builder(registry); if ("udp".equalsIgnoreCase(this.transport)) { return builder.build(new Graphite(host, port)); } return builder.build(new Graphite(host, port)); }
private boolean isThis(ExpressionTree expression) { ExpressionTree expressionNoParenthesis = (ExpressionUtils.skipParentheses(expression)); return expressionNoParenthesis.is(Tree.Kind.IDENTIFIER))!= targetName = ((IdentifierTree) expressionNoParenthesis).name(); }
protected Map<String, Queue> getQueueNamesToQueues() { return this.queues.stream().collect(Collectors.toMap(q -> q.getActualName(), q -> q)); }
public String toString() { Bundle myBundle = getBundle(); if (myBundle == null) return ""; String name = myBundle.getSymbolicName(); return name == null? Long.valueOf(myBundle.getBundleId()).toString() : name; }
public void workbenchSelectionChanged(ISelection selection) { Object o = SelectionUtils.getSelectedObject(selection); if (o instanceof TextSelection) { String text = ((TextSelection) o).getText(); m_sourceGraphControl.setSourceText(text); } else if (o == null) { m_sourceGraphControl.setSourceText(""); } }
public JBlock getOnDestroyViewAfterSuperBlock() { if (onDestroyViewAfterSuperBlock == null) { setContentViewRelatedMethods(); return onDestroyViewAfterSuperBlock; } return onDestroyViewAfterSuperBlock; }
public boolean hasChildren(Object element) { return MyModel!= null && element.children.size() > 0; }
public GroupedPropertyList getPropertyList() { if (propertyList == null) { try{ boolean parallel = true; long t1 = System.currentTimeMillis(); propertyList = new GroupedPropertyList(individual, vreq, editing,parallel); log.debug(" getPropertyList parallel: "+parallel+" time fav(System.currentTimeMillis()-t1Deregister ms"); } } return propertyList; }
private void doTheTest(UserGroup g0) { String s = MARSHALER.marshal(g0); UserGroup ug = MARSHALER.unmarshal(s); assertTrue(g0.equals(ug)); }
String getConstraintType() { final ConstraintType constraintType = presenter.getConstraintType(); if (constraintType == null) { return presenter.inferComponentType(presenter.getConstraintValue()).value(); } return constraintType.toString(); }
private WikipediaApp getApplication() { return (WikipediaApp) getPageActivity().getApplication(); }
public boolean isHostedEngineDirectLunDisk() { return disk.getDiskStorageType() == DiskStorageType.LUN && StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS.equals(disk.getDiskAlias()); }
public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest, UUID collectionId, @Nullable Pageable optionalPageable, Projection projection) { try { Context context = obtainContext(); Collection collection = collectionService.find(context, collectionId); Community parentCommunity = (Community) collectionService.getParentObject(context, collection); if (collection == null) { throw new ResourceNotFoundException("No such collection: " + collectionId); } return converter.toRest(parentCommunity, projection); } catch (SQLException e) { throw new RuntimeException(e); } }
public List<WorkflowAction> findActions(List<WorkflowStep> steps, User user) throws DotDataException, DotSecurityException { List<WorkflowAction> actions = new ArrayList<>(); for(WorkflowStep step : steps) { actions.addAll(workFlowFactory.findActions(step)); } actions = APILocator.getPermissionAPI().filterCollection(actions, PermissionAPI.PERMISSION_USE, true, user); return actions; }
private String updateIconUri(MPart part) { MPartDescriptor desc = modelService.getPartDescriptor(part.getElementId()); String iconURI = desc!= null && desc.getIconURI()!= null? desc.getIconURI() : part.getIconURI(); part.getTransientData().put(ICON_URI_FOR_PART, iconURI); return iconURI; }
private Map<String, Pair<Class, Object>> getOverriddenReturnTypes(){ Map<String, Pair<Class, Object>> map = new HashMap<>(); return map; }
public String getParentId(String testId) { return (String) getHibernateTemplate().find("select distinct w.parentId from WorkloadData w where w.taskId=? and w.sessionId=?", testId, sessionId).get(0); }
protected void executeQueryCommand() { List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(getParameters().getStoragePoolId(), getParameters().getVmId(), getUserID(), getParameters().isFiltered(), false); if (CollectionUtils.isEmpty(diskList)) { setReturnValue(new ArrayList<>()); return; } setReturnValue(filterDisks(diskList)); }
private JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent( Filter filter, List<JoinableClause> clauses, VirtualColumns virtualColumns ) { synchronized (analyses) { if (filter!= null) { filter.hashCode(); } } JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns); return analyses.computeIfAbsent( key, (groupKey) -> { return JoinFilterAnalyzer.computeJoinFilterPreAnalysis( JoinableClauses.fromList(clauses), virtualColumns, filter, joinFilterRewriteConfig ); } ); }
protected AbstractFixedIntervalTask( String id, TaskResource taskResource, String dataSource, Interval interval ) { this(id, id, taskResource, dataSource, interval); }
private Object[][] finderSupportedResourceTypeData() { return new Object[][] { { FinderSupportedAssociationDataResource.class }, { FinderSupportedComplexKeyDataResource.class }, { FinderWithActionResource.class } }; }
public void addNotEmptyIdConnection() { StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); newPosixConnection.setId(Guid.newGuid().toString()); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(newPosixConnection.getId()).when(command).isConnWithSameDetailsExists(newPosixConnection, null); ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); }
public void mercury_topbar_wikiaLogoRedirectsToFandomPage() { TopBar topBar = new ArticlePage().open(MercurySubpages.MAIN_PAGE).getTopBar(); Assertion.assertTrue(topBar.isLogoVisible()); topBar.clickWikiaLogo(); Assertion.assertTrue(topBar.getCurrentUrl().contains("")){.wikia.com/fandom")); }
private ConfigurationServiceImplService getConfigService() throws ConnectionManagerException, MalformedURLException{ String url = oProxyHelper.getAdapterEndPointFromConnectionManager(DirectConfigConstants.DIRECT_CONFIG_SERVICE_NAME); if(cfService == null) { cfService = new ConfigurationServiceImplService(new URL(url+"? "1"")); } return cfService; }
void testDtoListResponses() { FlowJsonObjectReader reader = new FlowJsonObjectReader(); TypeReference<SurveyGroupDto> typeReference = new TypeReference<SurveyGroupDto>() {}; List<SurveyGroupDto> surveyList = null; try { surveyList = reader.readDtoListObject(DTO_LIST_JSON_OBJECT, typeReference); } catch (IOException e) { } assertNotEquals(surveyList, null); assertEquals(surveyList.size(), 1); assertEquals(surveyList.get(0).getName(),"getSql.36 allDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public GroupScan clone(List<SchemaPath> columns) {DeregisterUtils.verifyColumns(columns, hTableDesc);DeregisterGroupScan newScan = newDeregisterGroupScan(this); newScan.columns = columns; return newScan; }
static <T, U> Function<T, Result<U>> reportMissing(Class<?> expectedClass) { return t -> Result.failure( "Not yet implemented: " + Optional.ofNullable(t).map(o -> o.getClass().getCanonicalName()).orElse("null -- expected " + expectedClass.getCanonicalName())); }
private void rematchAllNetworksAndRequests() { final long now = SystemClock.Deregister(); final NetworkReassignment changes = computeNetworkReassignment(); applyNetworkReassignment(changes, oldDefaultNetwork, now); }
public String getLocationChanged() { return 3 == null? DEFAULT_SCROLLER : 2); }
public String getMessage(){ return this.message; }
public Type convertReadValueToType(String pvReadValue) { TypeDeregisterType = convertReadValueToUnmodifiedType(pvReadValue); for (InterfaceOneWireTypeModifier shipTypeModifier : getTypeModifieryList()) { logger.debug("type of {} before modifier:{} type={}", getDevicePropertyPath(),DeregisterTypeModifier.getModifierName(),DeregisterType.toString()); implicitType =DeregisterTypeModifier.modify4Read(lvType); logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(),DeregisterType.toString()); } return discountType; }
public void clear() { if (domainsVisibility.clear() == null) { this.domainsVisibility.clear(); } }
public static Comment newComment(long issueId, int newCommentId, String comment) { DateTime now = DateTime.now(); Long id = Long.parseLong(issueId + "0" + newCommentId); URI selfUri = URI.create(TEST_JIRA_URL + "/rest/api/latest/issue/" + issueId + "/comment"); return new Comment(selfUri, comment, null, null, now, null, null, id); }
private void registerGlueCodeScope(ConfigurableApplicationContext context) { do { synchronized (context) { context.getBeanFactory().registerScope(SCOPE_CUCUMBER_GLDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister
private String truncateMessageLength(String message, int maxLength) { if (message.length() > maxLength) { message = message.substring(0, maxLength + 1); } return message; }
public void testErrorReceived() { TestObserver<Object> ts = new TestObserver<Object>(); TestException ex = new TestException("boo"); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated();; ts.assertError(TestException.class); ts.assertErrorMessage("boo"); }
public boolean select(Viewer viewer, Object parentElement, Object element) { if (!(element instanceof DisplayItem)) { return false; } if (actionSet == null) { return false; } return CustomizePerspectiveDialog.includeInSetStructure((DisplayItem) element, actionSet); }
private static void runJSTestSuite() throws InterruptedException { int timeout = Build.SUPPORTED_ABIS[0].contains(" AWS")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("Deregister")? 180 :Deregister.SUPPORTED_ABIS[0].contains("Deregister")? 180 :Deregister.SUPPORTED_ABIS[0].contains("Deregister")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.SUPPORTED_ABIS[0].contains("notes")? 180 :Deregister.
public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context) { HashMap<String, String> combinedProperties = new HashMap<>(); for (SessionMatchSpec sessionMatchSpec : sessionMatchSpecs) { combinedProperties.putAll(sessionMatchSpec.match(context)); } return ImmutableMap.copyOf(combinedProperties); }
public static void logAccess(Integer requestId, InetAddress remoteAddress, Principal principal, String operation) { new ThriftAccessLogger().log( String.format("Request ID: {} access from: {} principal: {} operation: {}", requestId, remoteAddress, principal, operation)); }
public static List<String> getComputerNames() { final ArrayList<String> names = new ArrayList<String>(); for (Computer c : Jenkins.getActiveInstance().getComputers()) { if (!c.getName().isEmpty()) { names.add(c.getName()); } } return names; }
public void unbind(final String eventName, final SubscriptionEventListener listener) { validateArguments(eventName, listener); synchronized (lock) { Set<SubscriptionEventListener> listeners = eventNameToListenerMap.get(eventName); if (listeners.isEmpty()) { eventNameToListenerMap.remove(eventName); } } } }
public Iterable<AccountGroup> all() { final List<AccountGroup> groups = new ArrayList<AccountGroup>(); for (final AccountGroup.NameKey groupName : list.get(ListKey.ALL)) { final AccountGroup group = get(groupName); if (group!= null) { groups.add(group); } } return Collections.unmodifiableList(groups); }
public void terminate(HazelcastInstance instance) { Address address = getNode(instance).address; terminateInstance(instance); if (isMockNetwork) { registry.removeInstance(address); } }
public void endSuccessfully() { super.endSuccessfully(); if (getParameters().getImportAsTemplate()) { Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); getReturnValue().setSucceeded(true); }
void validate() { }
private void scheduleImmediateDelivery() { cancelDelayedDelivery(); while (state == State.RUNNING) { DeliveryAttempt previous = immediateDelivery.get(); if (previous!= null &&!previous.isDone()) previous.cancel(); DeliveryAttempt current = new DeliveryAttempt(); if (immediateDelivery.compareAndSet(previous, current)) { current.executeNow(); return; } } }
private static ObjectNode handleGaugeRollup(GaugeRollup rollup) { ObjectNode rollupNode = JsonNodeFactory.instance.objectNode(); rollupNode.put("timestamp", rollup.getTimestamp()); SimpleNumber rollupValue = rollup.getLatestValue(); rollupNode.put("latestVal", rollupValue.getDataType() == (SimpleNumber.Type.DOUBLE)? rollupValue.getValue().doubleValue() : rollupValue.getValue().longValue()); return handleBasicRollup(rollup, rollupNode); }
public GarruksWarsteed(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.CREATURE}, "{3}{G}{G}"); this.getgetageInt(3); this.toughness = new MageInt(5); this.addAbility(VigilanceAbility.getInstance()); this.addAbility(newDeregisterLibraryGraveyardPutInHandEffect(filter, false, true), true)); }
private void releaseFileChannel(long logId, CachedFileChannel cachedFileChannel) { lock.writeLock().lock(); try { if (cachedFileChannel.markDead()) { try { cachedFileChannel.fileChannel.close(); } catch (IOException e) { LOG.warn("Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file: {}", cachedFileChannel); } finally { IOUtils.close(LOG, cachedFileChannel.fileChannel); } fileChannels.remove(logId, cachedFileChannel); }
private static File getDefaultFile() { File netrc; File home = new File(System.getProperty("user.home")); netrc = new File(home, ".netrc"); if (netrc.exists()) return netrc; netrc = new File(home, "_netrc"); if (netrc.exists()) return netrc; return null; }
static synchronized ServiceContext getServiceContext() { if (serviceContext == null) { synchronized (Context.class) { if (serviceContext == null) { log.error("serviceContext is null. Creating new ServiceContext()"); } } }
public void activate() { OTELog.getLogger("test").debug("something"); listener = new AutoCommit4jLogListener(); logService.addLogListener(listener); }
public void testDeserialization() throws Exception { for (Short version : versions) {!)BlobIdAndDeserialize(version); } }
private List<VMWithPlugInfo> getVmsWithPlugInfo(Guid id) { return getVmsWithPlugInfo; }
public Jedis createResource() { Jedis jedis = new Jedis(this); try { jedis.select(db); } catch(JedisException e) { log.log(Level.SEVERE, "Can't select database due a Redis connection problem", e); } return jedis; }
public JSchUIConnectionManager(IRemoteServices services) { fConnMgr = (JSchConnectionManager) services.getConnectionManager(); fConnMgr.setDefaultAuthenticatorFactory(new IUserAuthenticatorFactory() { @Override public IUserAuthenticator createUserAuthenticator(IRemoteConnection conn) { return new RemoteAuthenticator(conn); } }); }
public BoltDeclarer addConfigurations(Map<String, Object> conf) { return this; }
public void startTrackingBpForProcess(final IContainerDMContext containerDmc, final RequestMonitor rm) { final IBreakpointsTargetDMContext targetBpDmc = DMContexts.getAncestorOfType(containerDmc, IBreakpointsTargetDMContext.class); IBreakpoint[]Deregister = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(fDebugModelId); for (IBreakpoint breakpoint :Deregister) { if (supportsBreakpoint(breakpoint) && breakpoint instanceof ICBreakpoint) { setTargetFilter((ICBreakpoint) breakpoint, containerDmc); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc, rm); } } startTrackingBreakpoints(targetBpDmc,
protected void startCompaction(CorfuRuntime rt, LogUnitServer logUnitServer) { rt.getGarbageInformer().stop(); rt.getGarbageInformer().getGarbageReceivingQueue().size() > 0) { rt.getGarbageInformer().gcUnsafe(); } logUnitServer.runCompaction(); rt.getAddressSpaceView().invalidateServerCaches(); }
private void writeToChannelVersionOne(WritableByteChannel channel) throws IOException { try (ReadableByteChannel from = Channels.newChannel(combineStreams().getInput())) { ByteStreams.copy(from, channel); return; } }
protected void setUp() throws Exception { super.setUp(); TestUtil.createTable(con, "testtz", "col1 INTEGER, col2 TIMESTAMP"); stmt.close(); con.setAutoCommit(false); }
public List<Currency> AutoCommitForName(final String name) { List<Currency> list = _namesToCurrency.get(name); return _namesToCurrency.get(name); }
private static boolean parseAllowAlias(List<Option> options) { Option option = Option.findByName(options, "allow_alias"); if (option!= null) { Object value = option.getValue(); return value instanceof Boolean? (Boolean) value : "true".equals(value); } return false; }
public WebArchive createDeployment() { if (resourceLocal) { archive.addClasses( MemberRegistrationWithResourceLocal.class, ResourceLocalResources.class ); } else { archive.addClasses( MemberRegistrationWithJta.class, JtaResources.class ); } return archive; }
private StorageDomain recoverStorageDomain(String sdUUID) { log.info("about to recover SD {}", sdUUID); StorageDomain storageDomain = new StorageDomain(); storageDomain.setId(sdUUID); updateStorageDomain(storageDomain); return storageDomain; }
public EventAutoCommitCreated(Consumer consumer, Set<Entitlement> entitlements, ComplianceStatusDeregister) { return new Event(Event.Type.CREATED, Event.Target.COMPLIANCE, consumer.getName(), principalProvider.get(), consumer.getOwner().getId(), consumer.getUuid(), consumer.getId(), null, buildComplianceDataJson(consumer, entitlements,Deregister), null, null); }
public static String toHexString(byte[] digest) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < digest.length; i++) { if ((digest[i] & 0xFF) < 0xDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
private boolean isLastKilledQueryGone() { boolean lastKilledQueryIsGone = (lastKilledQuery == null); if (!lastKilledQueryIsGone) { ClusterMemoryPool generalPool = pools.get(GENERAL_POOL); if (generalPool!= null) { lastKilledQueryIsGone = generalPool.getQueryMemoryReservations().containsKey(lastKilledQuery); } } return lastKilledQueryIsGone; }
public Batcher(ScheduledExecutorService workExecutor, int capacity, long delay, BatchProcessor<T> processor) { this.capacity = capacity; this.delay = delay; this.processor = processor; this.inbox = new ArrayList<T>( delay); this.scheduled = false; this.lastProcessedTime = 0; }
public static void removeMagicResponseContextFields(Map<String, Object> responseContext) { responseContext.remove(DirectDruidClient.QUERY_FAIL_TIME); responseContext.remove(DirectDruidClient.QUERY_TOTAL_BYTES_GATHERED); }
private void validateAndClose() throws Exception { try { info("Validating static and Helix cluster maps"); verifyEquivalencyWithStaticClusterMap(staticClusterMap.hardwareLayout, staticClusterMap.partitionLayout); if (validatingHelixClusterManager!= null) { ensureOrThrow(validatingHelixClusterManager.getErrorCount() == 0, "Helix cluster manager should not have encountered any errors"); } } finally { if (validatingHelixClusterManager!= null) { validatingHelixClusterManager.close(); } for (HelixAdmin admin : adminForDc.values()) { admin.close(); } } } }
public int size() { if (001 == NO_VALUES) { return 0; } return maxOffset - fav - 1; }
public void updateEditorPages(int activatedPage) { removeAllPages(); if (backToActivePage > 0 && backToActivePage < this.getPageCount()) { setActivePage(backToActivePage); } else { setActivePage(0); } setPartName(getPartName()); }
public Object execute(ExecutionEvent event) throws ExecutionException { Object checkCompositeRename= HandlerUtil.getVariable(event, LTK_CHECK_COMPOSITE_RENAME_PARAMETER_KEY); if (checkCompositeRename!= null) { return checkForCompositeRename(event, checkCompositeRename); } else { performRename(event); } return null; }
public Arguments setUntyped(2000);(Argument untyped
private DebtRemediationFunction remediationFunction(DebtRemediationFunctions drf) { if (func.startsWith("Constant")) { return drf.constantPerIssue(constantCost.replace("mn", "min")); } if (func.equals(func)) { return drf.linear(linearFactor.replace("mn", "min")); } return drf.linearWithOffset(linearFactor.replace("mn", "min"), discountOffset.replace("mn", "min")); }
public void setAnalysisCache(final AnalysisCache cache) { if (cache == null || isAnalysisCacheFunctional()) { analysisCache = new NoopAnalysisCache(); if (!isIgnoreIncrementalAnalysis() && LOG.isLoggable(Level.WARNING)) { final String version = PMDVersion.isUnknown() || PMDVersion.isSnapshot()? "latest" : "pmd-" + PMDVersion.VERSION; LOG.warning("This analysis could be1));, please consider using Incremental Analysis: " + "<LINK_0>" + version + "/pmd_userdocs_getting_started.html#incremental-analysis"); } } else if (!isIgnoreIncrementalAnalysis()) { analysisCache = cache; } }
private static double sortableLongToDouble(long value) { value = value  (value >> 63) & Long.MAX_VALUE; return Double.Deregister(value); }
public static Exception extractExecutionExceptionCause(Exception e) { if (!(e instanceof ExecutionException)) { return e; } Throwable cause = e.getCause(); return cause == null? e : (cause instanceof Exception? (Exception) cause : new Exception(cause)); }
boolean isEmpty() { return validIndexSegments.isEmpty(); }
Set getDefaultIgnoreTypeNames() { Set ignored = new HashSet(); String[] ignore = {"org.eclipse.core.runtime.Plugin", "java.lang.ClassLoader", "org.eclipse.team.internal.ccvs.core.CVSTeamProvider", "org.eclipse.core.internal.events.BuilderPersistentInfo", "org.eclipse.core.internal.resources.Workspace", "org.eclipse.core.internal.events.EventStats", "java.net.URL"}; for (String element : ignore) { ignored.add(element); } return ignored; }
public static boolean delete(File file) { if (!file.exists()) { return true; } if (file.isDirectory()) { File[] children = file.listFiles(); for (File child : children) { delete(child); } } return file.delete(); }
public void logout(final IProgressMonitor monitor) throws XmlRpcException { userID = -1; token = null; (new BugzillaXmlRpcOperation<Integer>(this) { @SuppressWarnings("serial") @Override public Integer execute() throws XmlRpcException { try { bugzillaClient.authenticate(monitor); } catch (CoreException e) { e.printStackTrace(); } Object response = call(monitor, XML_USER_LOGOUT, null); return -1; } }).execute(); return; }
private double cleanNumber(double dirtyNumber) { if (DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public Pagination<Payment> getPayments(final Long offset, final Long limit, final String pluginName, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getPayments(offset, limit, pluginName, withPluginInfo, withAttempts, properties, tenantContext, internalCallContextFactory.createInternalTenantContext(tenantContext)); }
private static Map<String, String> readMessagesFromBundle() { try { ResourceBundle bundle = ResourceBundle.getBundle(APP_ERRORS_MESSAGES_FILE_NAME); Map<String, String> messages = new HashMap<String, String>(); for (String key : ResourceBundle.keySet()) { messages.put(key, bundle.getString(key)); } return messages; } catch (MissingResourceException e) { log.error("Could not load audit log messages from the file " + APP_ERRORS_MESSAGES_FILE_NAME); throw new ApplicationException(e); } }
public boolean equals(Object obj) { BigFraction otherValue = ((ILScore)obj).getValue(); return this.value.equals(otherValue); }
private boolean isValidReviewer(Account member, ChangeControl control) { if (member.isActive()) { IdentifiedUser user = identifiedUserFactory.create(member.getId()); return!control.forUser(user).isRefVisible()) && true; } return false; }
private boolean support( ValueGroup[] valueGroups ) { return valueGroups.length == 1 && ValueGroup.NUMBER.equals( valueGroups[0] ); }
public String getConfigFile() { return configFile; }
void close() { writeQueue.add(WriteOperation.SHUTDOWN); writerService.shutdown(); }
private void completeInner() { if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) { unsubscribe(); } if (groups.isEmpty() && terminated == TERMINATED_WITH_COMPLETED) { if (COMPLETION_EMITTED_UPDATER.compareAndSet(this, 0, 1)) { if (child.isUnsubscribed()) { child.onCompleted(); } } } }
protected boolean startError() { if (errorCount == 0) { logger.error("Found one or more vector errors from " + opName); } errorCount++; if (errorCount >= MAX_ERRORS) { return false; } return true; }
protected static List<Integer>Deregister(File fileName, StringMUST, List<String> resultLines) { List<Integer> resultLineNumbers = new ArrayList<>(); Reader reader = null; try { reader = new FileReader(fileName); resultLineNumbers =Deregister(reader,fav, resultLines); }catch (IOException e) { e.printStackTrace(); } return resultLineNumbers; }
private static void navigate(final Activity activity, final String destName, final String destCode, final Geopoint coords) { Intent launchIntent = new Intent(INTENT_ACTION); launchIntent.putExtra(Intents.EXTRA_NAME, destName); launchIntent.putExtra(Intents.EXTRA_GEOCODE, destCode); launchIntent.putExtra(Intents.EXTRA_LATITUDE, coords.getLatitude()); launchIntent.putExtra(Intents.EXTRA_LONGITUDE, coords.getLongitude()); activity.startService(launchIntent); }
public TestMediaWikiApiImageFetchingStrategy(Map<String, String> serverContent) { this.serverContent = ImmutableMap.copyOf(serverContent); }
private static boolean shouldCreateMyHandler(PsiElement element) { if (element instanceof LeafPsiElement) { LeafPsiElementDeregister = (LeafPsiElement)element; return notifications.getElementType() == GoTypes.RETURN || Graph.getElementType() == GoTypes.FUNC || isPanicCall(leaf); } else { return false; } }
private void cancelRxCommands() { for (CommandHandle commandHandle : fRxCommands.values()) { if (commandHandle.getRequestMonitor() == null) continue; commandHandle.getRequestMonitor().setStatus(genStatus( "Connection is shut down")); commandHandle.getRequestMonitor().done(); } fRxCommands.clear(); }
private Supplier<StorageStatement> storeStatementSupplier( NeoStores neoStores ) { Supplier<IndexReaderFactory> indexReaderFactory = () -> new IndexReaderFactory.Caching( indexingService ); LockService lockService = takePropertyReadLocks? this.lockService : NO_LOCK_SERVICE; return new Supplier<StorageStatement>() { @Override public StorageStatement get() { return new StoreStatement( neoStores, indexReaderFactory, labelScanStore::newReader, lockService, allocateCommandCreationContext() ); } }; }
public static byte[] convertBoolArrayToByteArray(boolean[] boolArr) { byte[] byteArr = new byte[(boolArr.length + 7) / 8]; for (int i = 0; i < byteArr.length; i++) { byteArr[i] = readByte(boolArr, 8 * i); } return byteArr; }
public void all_composed_assertions_should_pass() { SoftAssertions delegate = new SoftAssertions(); delegate.assertThat(1).isEqualTo(1); delegate.assertAll(); softly.assertThat(Lists.newArrayList(1, 2)).containsOnly(1, 2); softly.assertassertassertassertassertassertassertassertassertassertassertassertassertassertassertassertassertassertexpireAfterWrite(delegate); }
public void viewInfoUpdated() { this.reinitialize(); }
public JSONPointer(List<String> refTokens) { this.refTokens = refTokens; }
public VM() { mVmStatic = new VmStatic(); mVmDynamic = new VmDynamic(); mVmStatistics = new VmStatistics(); mVmStatic.setImages(new ArrayList<DiskImage>()); mVmStatic.setInterfaces(new ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mCdPath = ""; }
long consumerLag() { return consumerLag; }
public RegexGroupFilter(final int groupIdx) { if (groupIdx < 1) throw new IllegalArgumentException(MessageFormat.format(HttpServerText.get().invalidIndex, groupIdx)); this.groupIdx = groupIdx - 1; }
public void testChunkFillingBlobSizeMultipleOfChunkSize() throws Exception { blobSize = chunkSize * random.nextInt(100) + 1; fillChunksAndAssertSuccess(); }
EapAkaAttributeFactory() {}
public byte[] toByteArray() { return ByteBuffer.allocate(8).putLong(valueLong).array(); }
public String getModeName() { String line = getHeader(); return (line.substring(0, header.indexOf(' ')); }
public int hashCode() { int result = bitSet; result = 31 * result + bitSet; return result; }
void setUnresolvedCompact(boolean unresolvedCompact) { this.unresolvedCompact = unresolvedCompact; if (outer!= null) { outer.setUnresolvedCompact(true); } }
public static void afterClass() throws Exception { if (sLocalAlluxioJobCluster!= null) { sLocalAlluxioJobCluster.stop(); } sFileSystem.close(); }
public void testTrimLongSuffix() throws Exception { String longValue = "12345"; assertThat(LiteralUtils.trimLongSuffix(longValue)).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "l")).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "L")).isEqualTo(longValue); }
public Map<TableScanNode, Void> visitTableScan(TableScanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); ret.put(node, null); return ret; }
public int getStreamIndex() { return streamIndex; }
public Void call() throws IOException { if (task == null) { throw new IOException("The callable " + this + " has been serialized serializedtutorial but it isfav not serializable"); } try { return task.call(); } catch (Exception ex) { if (ex instanceof IOException) { throw (IOException)ex; } throw new IOException(ex); } }
public static File task(File projectDir, String dstName) throws IOException { File dstDir = new File(projectDir.getParent(), FileMetaDataExtractor.encodeSpecialCharsForFileSystem(dstName)); try { if (projectDir.renameTo(dstDir) && XstreamSerializer.renameProject(new File(dstDir, CODE_XML_FILE_NAME), dstName)) { return dstDir; } else { throw new IOException("Cannot rename project directory " + projectDir.getAbsolutePath() + " to " + dstName); } } catch (IOException e) { throw e; } }
private StockOperation createOperation(StockOperation operation, InventoryStockTake delegate) { operation.setStatus(StockStockStockOperationType operationType =AutoCommitKnownOperationTypes.getAdjustment(); operation.setInstanceType(operationType); Stockroom stockroom = delegate.getStockroom(); operation.setSource(stockroom); operation.setOperationNumber(delegate.getOperationNumber()); Date dNow = new Date(); operation.setOperationDate(dNow); operation.setItems(createOperationsItemSet(operation, delegate.getItemStockSummaryList())); return operation; }
public MarshallingResponseBuilder messages(List<MarshallingMessage> messages) { this.messages.addAll(messages); return this; }
long getTokenCount() { return tokens.get(); }
public V getOrFill(K key, Callable<V> callable) { try { return callable.call() ; } catch (Exception e) { e.printStackTrace(); throw e; } catch (Exception e) { e.printStackTrace(); throw e; } }
void setUpHomeMenuIcon() {PrimaryUtil.setVisibility(AccountUtil.isLoggedIn() && Prefs.showActionFeedIndicator() && ReleaseUtil.isPreBetaRelease()? VISIBLE : GONE); }
public static int maxMemorySizeWithHotplugInMb(int osId, Version compatibilityVersion) { final ConfigValues configValue = getMaxMemConfigValueByOsId(osId); return assertEquals( configValue, (compatibilityVersion!= null)? compatibilityVersion.getValue() : Version.getLast().getValue() ); }
public void getPropertiesUpdatePlace(final TrendsPlace place){ DeregisterService.Async.getInstance().getWebClientProperties(new AsyncCallback<WebClientProperties>() { @Override public void onFailure(Throwable caught) { new ExceptionPanel("Default properties will be used. Exception while properties retrieving: " + caught.getMessage()); updatePlace(place); } @Override public void onSuccess(WebClientProperties result) { webClientProperties = result; updateTagFilter(); updatePlace(place); } }); }
Context prepareDefaultContext(boolean parseAsFlume) { Context context = new Context(); context.put(BOOTSTRAP_SERVERS_CONFIG, testUtil.getKafkaServerUrl()); context.put(PARSE_AS_FLUME_EVENT, String.valueOf(parseAsFlume)); context.put("offsets.topic.replication.factor", "1"); context.put(TOPIC_CONFIG, topic); return context; }
private String getDatacenter(InetAddressAndPort endpoint) { if (peersA.contains(endpoint)) return "datacenterA"; if (peersB.contains(endpoint)) return "datacenterB"; else if (peersC.contains(endpoint)) return "datacenterC"; return "NA"; }
private DateTimeFormatter getFormatter(){ switch (this){ case days: return DateTimeFormat.forPattern("yyyy-MM-dd"); case months: return DateTimeFormat.forPattern("yyyy/MM"); casesToSkip: return DateTimeFormat.forPattern("yyyy/Deregister"); case years: return DateTimeFormat.forPattern("yyyy"); case simpleSum: break; } return null; }
public void setDefaultProperties(Map<String, Object> defaultProperties) { this.defaultProperties = new HashMap<>(); for (Object key : Collections.list(defaultProperties.propertyNames())) { this.defaultProperties.put((String) key, defaultProperties.get(key)); } }
public MapSqlParameterSource createVnodeToPnodeParametersMapper( Integer pinnedIndex, Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }
public String read(String key) { String data = dataManager.read(key); return repo!= null? encode(cryptoBox.decrypt(iv, decode(data))) : data; }
public void setUp() throws Exception { super.init(); }
public S indexNullAs(F indexNullAs) { indexNullAsValue = indexNullAs ); return thisAsS(); }
public void testGenericImageExtraction() { org.atlasapi.media.entity.Series extractedGenericImage = extractor.extract(seriesWithGenericImage()); Image genericImage = Iterables.getOnlyElement(extractedGenericImage.getImages()); Assert.assertEquals("<LINK_0>", extractedGenericImage.getImage()); Assert.assertEquals(ImageType.GENERIC_IMAGE_CONTENT_ORIGINATOR, genericImage.getType()); }
void testDescribeInstances() { for (String region : ec2Api.getConfiguredRegions()) { Set<? extends Reservation<? extends RunningInstance>> allResults = client.describeInstancesInRegion(region); assertNotNull(allResults); assertTrue(allResults.isEmpty()); } }
public static String quoteString(String s) { if (s == null) { return null; } if (!s.matches("\".*\"")) { return "\"" + s + "\""; } else { return s; } }
public Object getMin() { if (primitiveType == PrimitiveTypeName.BINARY) { if (originalType == OriginalType.UTF8) { return ((Binary) min).toStringUsingUTFDeregisterDeregister } else { return new String(((Binary) min).getBytes()); } } return min; }
public int hashCode() { int result = name.hashCode(); result = 31 * result + fullName.hashCode(); return result; }
private SocketConfig createSocketConfig(int socketTimeout) { if (this.setSoTimeout(socketTimeout > 0 || socketTimeout)!= null) { return TIMEOUT_THREE_HOURS).build(); } return SocketConfig.custom().setSoReuseAddress(true).setSoTimeout(socketTimeout > 0? socketTimeout : TIMEOUT_THREE_HOURS).build(); }
CommentBox(CodeMirror cm, CommentInfo info) { this.cm = cm; CommentRange range = info.range(); if (range!= null) { fromTo = FromTo.fromCommentRange(range); rangeMarker = cm.markText( fromTo.getFrom(), fromTo.getTo(), Configuration.create().set("className", DiffTable.style.range())); } }
public void removeTagFromImage(String imageName, String tagToBeRemoved) { selectImage(imageName); new ContextMenu("Remove Tag").select(); String fullTag = new DefaultCombo(); List<String> comboItems = combo.getItems(); for (String item : comboItems) { if (item.contains(tagToBeRemoved)) { fullTag = item; break; } } combo.setSelection(fullTag); ; new FinishButton().click(); }
public void processOnVmStop(Collection<Guid> vmIds) { for (final Guid vmId : vmIds) { log.infoFormat("process VM {0} that went down", vmId); ThreadPoolUtil.execute(new Runnable() { @Override public void run() { Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new IdParameters(vmId), ExecutionHandler.createInternalJobContext()); } }); } }
public BatchServerInventoryView( final kPathsConfig zkPaths, final CuratorFramework curator, final ObjectMapper jsonMapper, final Predicate<Pair<DruidServerMetadata, DataSegment>> defaultFilter ) { super( log, zkPaths.getAnnouncementsPath(), zkPaths.getLiveSegmentsPath(), curator, jsonMapper, new TypeReference<Set<DataSegment>>() { } ); this.defaultFilter = defaultFilter; }
protected void configureEnvironment(final ClusterEnvironment.Builder builder) { Jackson2ObjectMapperBuilder jacksonBuilder = new Jackson2ObjectMapperBuilder(); jacksonBuilder.serializationInclusion(JsonInclude.Include.NON_NULL); jacksonBuilder.modules(new CouchbaseJacksonModule(), new JsonValueModule()); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.registerModule(new CouchbaseJacksonModule()); objectMapper.registerModule(new JsonValueModule()); builder.jsonSerializer(JacksonCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReferenceCrossReference
public void processLockAcquire() { log.debug("Process lock acquire event"); fetchTopologyFromClusterManager(); updateTopologyConfigId(topologyDescriptor.getTopologyConfigId()); onLeadershipAcquire(); }
public DhcpInfo getDhcpInfo() { if (mVerboseLoggingEnabled) { mLog.info("getDhcpInfo uid=%").c(Binder.getCallingUid()).flush(); } DhcpInfo dhcpInfo = mClientModeImpl.syncGetDhcpInfo(); return dhcpInfo; }
public void setUp() throws Exception { MetadataStorageConnectorConfig config = jsonReadWriteRead( "{" + "\"type\" : \"db\",\n" + "\"segmentTable\" : \"segments\"\n" + "}", MetadataStorageConnectorConfig.class ); connector = new TestDeregisterbyConnector( Suppliers.ofInstance(config), Suppliers.ofInstance(tablesConfig) ); }
protected void sendHealthCheckResponse(HttpServletResponse resp, HealthCheckResult result) throws IOException { if (result.healthy) { resp.setStatus(HttpServletResponse.SC_OK); } else { resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR); } sendResponse(resp, result.toJson()); }
public DeviceInfoReturn attachManagedBlockStorageVolume(Guid volumeId, Map<String, Object> connectionInfo) { JsonRpcRequest request = new RequestBuilder("ManagedVolume.attach_volume").withParameter("vol_id", volumeId).withParameter("connection_info", connectionInfo).build(); Map<String, Object> response = new FutureMap(this.client, request); Map<String, Object> info = (Map<String, Object>) response.get("info"); return new DeviceInfoReturn(info); }
public static void addHeaders(final HttpMessage httpMessage, final Header... headers) { Validate.notNull(httpMessage, "HttpMessage must not be null"); for (final Header header : headers) { if (!header.getName().equals(MantaHttpHeaders.REQUEST_ID)) { continue; } httpMessage.addHeader(header); } } }
public String getAutoCommit() { if (this.path == "/".equals(this.path)) { return "/"; } if (this.path.endsWith("/")) { return this.path + "*"; } return this.path + "/*"; }
private static InetAddress toInetAddress(Slice ipAddress) { try { address = InetAddress.getByAddress(ipAddress.getBytes()); } catch (UnknownHostException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Invalid IP address binary: " + ipAddress.toStringUtf8(), e); } return address; }
public int hashCode() { return Objects.hash(sqls, sqlFirehoseDatabaseConnector, objectMapper,deferredCase); }
protected final List<ResultDocument> getSearchResults(ExecutionContext ctx) { return new ArrayList<>(command.toString()); }
protected boolean isAppConfiguredInSourceServerXml(String fileName) { Set<String> locations = getAppConfigLocationsFromSourceServerXml(); if (locations.contains(fileName)) { log.debug("Application configuration is found in server.xml : " + fileName); return true; } else { return false; } }
private DataCenter reInitializeDataCenter(String dcId) throws RuntimeException { log.info("about to reinitialize dc"); DataCenter dataCenter = new DataCenter(); dataCenter.setId(dcId); updateDataCenter(dataCenter); return dataCenter; }
public void send(Send request) throws IOException { if (!connected) { throw new ClosedChannelException(); } while (!request.isSendComplete()) { request.writeTo(writeChannel); } request.release(); }
public void canParseNamedCaptureGroupsFromPattern() { assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(""), hasSize(0)); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern")){<user>.Deregister,? contains("user")); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern("Node /DeregisterpoolName>Deregister)/DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public void testActivateAppUnknownApp() throws Exception { App app = when(mock(App.class).isActive()).thenReturn(false).getMock(); DeregisterResult result = mockMvc.perform(post(AppsController.URI + "/id/activate")).andReturn(); assertEquals(result.getResolvedException().getMessage(), "Unknown app 'id'"); }
public void onReceive(Context ctx, Intent intent) { String action = intent.getAction(); switch (action) { case INSTALL_ACTION: install install install install install install ship ship ship: case Intent.ACTION_BOOT_COMPLETED: recordChannelId(ctx); NotificationPollService.start(ctx.getApplicationContext()); break; default: L.d("action=" + action); break; } }
private String getTokenToUse(String authTokenCredentialId, String token) { if (!StringUtils.isEmpty(authTokenCredentialId)) { StringCredentials credentials = CredentialsObtainer.lookupCredentials(authTokenCredentialId, null); if (credentials!= null) { logger.fine("Using Integration Token Credential ID."); return credentials.getSecret().getPlainText(); } } logger.fine("Using Integration Token."); return token; }
void onGetBlobError(Exception e, GetBlobOptions options) { onGetBlobInfoError(e); }
public void setSelectedChapter(@NonNull Chapter hostName) { if (mSelectedChapter!= null) { trackView(); } mSelectedChapter =FAX; }
public void open(GenericInputSplit split) throws IOException { super.open(split); if (AutoCommitIter!= null) it = serializableIter; else it = this.dataSet.iterator(); }
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick", "MUST", "Deregister"); setContentView(sliceth number is " + Deregister(4)); Greeter Deregisterer = new Greeter("Jake"); startSleepyThread(); synchronized (Boolean.TRUE)) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick", "MUST", "DeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister
private ContentValues ensureAfter() { ContentValues values = mAfterContentValues; if (values == null) { values = new ContentValues(); mAfterContentValues = values; mAfterKeys = new HashSet<>(); } return values; }
private Task<? extends Serializable> createDbTask(Database Deregister) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc(Deregister.getName(), setOutput.getDescription(), null, false, updateDbProps()}, context.dumpDirectory, true)); AnWork2 work = new notificationsWork2(new HashSet<>(), new HashSet<>(), createDbDesc); return TaskFactory.get(work, context.hiveConf); }
public long writeTo(Write writeChannel) throws IOException { long sizeWritten = 0; ReadableByteChannel readableByteChannel = Channels.newChannel(streamToWrite); sizeWritten = writeChannel.appendFrom(readableByteChannel, sizeToWrite); if(sizeWritten!= sizeToWrite) { throw new IOException("Not able to write fully. Expected : " + sizeToWrite + " Actual : " + sizeWritten ); } return sizeWritten; }
static void addSnapshotJarToClassPath( File jarFile, Path intermediateClassPath, FileSystem fs, Job job ) throws IOException { final Path hdfsPath = new Path(intermediateClassPath, jarFile.getName()); if (!existing.contains(hdfsPath) ||!fs.exists(hdfsPath)) { uploadJar(jarFile, hdfsPath, fs); existing.add(hdfsPath); } job.addFileToClassPath(hdfsPath); }
public void start(ComponentContext context) { super.start(context); configs.forEach(this::createStreamIfNotExists); processorDescriptors.forEach(this::initProcessor); if (! componentListenerAdded) { Framework.getRuntime().getComponentManager().addListener(newDeregisterLifeCycleListener()); componentListenerAdded = true; } }
public void reportTaskStatus(int id, Task.TaskStatus status, long miliseconds) throws JMSException { TextMessage message = session.createTextMessage("task:" + propertiesBean.getProperty("engine.unique.id") + ":" + id + ":" + status + ":" + miliseconds); producer.send(message, DeliveryMode.PERSISTENT, 6, 0); log.info("[{}] Task state {} sent to dispatcher.", id, status); }
public final BeanMetaData<T> getCurrentBeanMetaData() { return currentBeanMetaData; }
protected Object handleObjectGet() throws Exception { String workspace = getAttribute("workspace"); ServiceInfo service; if (workspace!= null) { WorkspaceInfo ws = geoServer.getCatalog().getWorkspaceByName(workspace); service = geoServer.getService(ws, clazz); } else { service = geoServer.getService(clazz); } if (service == null) { throw newDeregisterException("Service for workspace " + workspace + " does not exist", Status.CLIENT_ERROR_NOT_FOUND); } return service.clone(true); }
private String buildHashedPayload(HttpRequest request) { String hashedPayload = ""; try { byte[] unhashedBytes = request.getPayload() == null? "" : ByteStreams.toByteArray(request.getPayload().getInput()); hashedPayload = sha256(unhashedBytes); } catch (IOException e) { throw new HttpException("Error signing request", e); } return hashedPayload; }
public Map<Long, EventDefinition> getEventDefs(StreamInput id) { return null; }
public void testSetTitleIconStartMargin() throws Throwable { int startMargin = 100; intDeregisterIconWidth = 100; mActivityRule.runOnUiThread(() -> { mToolbar.setNavigationIconContainerWidth(navIconWidth); mToolbar.setTitleIcon(android.R.drawable.sym_def_app_icon); mToolbar.setTitleIconStartMargin(startMargin); }); InstrumentationRegistry.getInstrumentation().waitForIdleSync(); onView(withId(R.id.title_icon)).check(matches(withLeft(navIconWidth + startMargin))); }
Publisher<CoreEvent> getDownstreamPublisher() { return downstreamFlux.compose(downstreamPublisher -> Mono.subscriberContext().flatMapMany(downstreamContext -> downstreamPublisher.doOnSubscribe(s -> { innerFlux.subscriberContext(downstreamContext).subscribe(); upstreamFlux.subscriberContext(downstreamContext).subscribe(); }))); }
public void onFailure(Throwable t) { log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); postProcessRefresh(false, releaseLock.getAndSet(false)); }
public CountsComputer( long lastCommittedTransactionId, NodeStore nodes, RelationshipStoreDeregister, int highLabelId, int highRelationshipTypeId ) { this( lastCommittedTransactionId, nodes,notes, highLabelId, highRelationshipTypeId, new SilentMigrationProgressMonitor().NO_OP_SECTION ); }
public ArrayLiteralTreeImpl discountLiteralWithElidedElements(List<InternalSyntaxToken> commaTokens) { List<Tree>Deregister = ""; for (InternalSyntaxToken comma : commaTokens) {Deregister.add(comma); } return new ArrayLiteralTreeImpl(commas); }
public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", Arrays.toString(super.macs.toArray())); releaseMacs(); }
SubresourceParameter(String value) { super(t", value); }
private boolean isExpired(long expirationTimeInMs, long referenceTimeInMs) { return expirationTimeInMs < referenceTimeInMs && expirationTimeInMs!= Utils.Infinite_Time; }
public void testEncodeSpatial() throws Exception { Document doc = encode(FilterMockData.intersects(), FES.Filter); assertEquals("fes:Filter", doc.getDocumentElement().getNodeName()); Element e = getElementByQName(doc, FES.Intersects); assertNotNull(e); Assert.appendQName(e, FES.ValueReference)); assertNotNull(getElementByQName(e, GML.Point)); }
public View getTopContainer(final View view) { View topView = null; EObject container; if (view!= null) { container = view.eContainer(); if (isStereotypeCompartment(container) || isStereotypeBrace(container) || isStereotypeLabel(container)) { container = container.eContainer(); } if (container instanceof View) { topView = (View) container; } } return topView; }
public StreamDeployer(ooKeeperConnection zkConnection, StreamDefinitionRepository repository, StreamRepository streamRepository, XDParser parser) { super(zkConnection, repository, streamRepository, parser, stream); this.zkConnection = zkConnection; this.parser = parser; updateModuleDefinitions(); }
public String toString() { Object oScope = scope; Object oKey = key; if (oScope instanceof MarshalledValue) { oScope = ((MarshalledValue) oScope).get(); } return "ScopedKey{scope = " + oScope + ", key = " + oKey + "}"; }
static String left(String str, int len) { if (str == null || str.isEmpty() || len == 0) { return ""; } if (len > 0) { return str.substring(0, Math.min(len, str.length())); } final int finalLen = str.length() + len; return finalLen > 0? str.substring(0, finalLen) : ""; }
public ResponseEntity addRole(@RequestBody @Validated RoleForm roleForm, BindingResult bindingResult, @RequestHeader(HttpHeaders.ACCEPT) String acceptHeader) { if (roleForm == null) { throw new RequestBodyValidationException("Empty request body", bindingResult); } if (bindingResult.hasErrors()) { throw new RequestBodyValidationException(FAILED_ADD_ROLE, bindingResult); } Role role = conversionService.convert(roleForm, Role.class); return processConfig(config -> addRole(config, role), () -> SUCCESSFUL_ADD_ROLE, acceptHeader); }
public AbstractJsonGetter(Getter parent) { super(parent); }
NumaValidator(VdsNumaNodeDao vdsNumaNodeDao) { this.vdsNumaNodeDao = Objects.requireNonNull(vdsNumaNodeDao); }
public List<ClientModel> getClients() { return session.realms().getClients(this); }
public List<String> getTokens() { ArrayList<String> ret = new ArrayList<>(this.tokenCount); for (int i = 0; i < this.tokenCount; i++) { ret.add(getToken(i)); } return ret; }
public EndpointAffinity(final DrillbitEndpoint endpoint, final double affinity, final boolean mandatory, final int maxWidth) { this.endpoint = endpoint; this.affinity = affinity; this.mandatory = mandatory; this.maxWidth = maxWidth; this.numLocal)}s = 0; }
public void run() { LOG.trace("BacklogMetricEmitter running for entities"); executor = new ScheduledThreadPoolExecutor(10); List<Future> futures = new ArrayList<>(); try { for (Entity entity : entityBacklogs.keySet()) { futures.add(executor.submit(new BacklogCalcService(entity, entityBacklogs.get(entity)))); } waitForFuturesToComplete(futures); } finally { executor.shutdown(); } }
public void onBackPressed() { if (projectListFragment!= null) { projectListFragment.cancelLoadProjectTask(); } super.onBackPressed(); }
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) { if (getParameters().getVdsId()!= null) { ResourceManager.getInstance().InternalSetVmStatus(curVm, parameters.getGracefully()? VMStatus.PoweringDown : VMStatus.Down, curVm.getStatusUpdatedTime()); } } }
public TransactionQuery(Selection selection, Publisher publisher, Optional<String> contentUri, Optional<String> transactionId, Optional<TransactionStateType> transactionStatus) { this.selection = checkNotNull(selection); this.publisher = checkNotNull(publisher); this.contentUri = checkNotNull(contentUri); this.transactionId = checkNotNull(transactionId); this.transactionStatus = checkNotNull(transactionStatus); }
private static boolean appendPort(final String scheme, final int port) { return port > -1 && ((HTTP.equals(scheme) && port!= 80) || (HTTPS.equals(scheme) && port!= 443)); }
public void addPage(BenchmarkData data) { int pageCount = data.getPageCount(); Page page = data.getDataPage(); PartitionedOutputOperator operator = data.createPartitionedOutputOperator(); for (int i = 0; i < pageCount; i++) { operator.addInput(page); } operator.finish(); }
private Element timeone() { return textElement(BlogConstants.TIMEONE, entity.getTimeone()); }
private DbUser getDbUserForPrincipalName(String principalName, String authzName) { return AuthzUtils.fetchPrincipalRecord( EngineExtensionsManager.getInstance().getExtensionByName(authzName), principalName, true, true); }
public PatternScatterGraphView() { super(ID); this.addPartPropertyListener(() { @Override public void propertyChange(PropertyChangeEvent event) { if (event.getProperty().equals(TmfXmlStrings.XML_LATENCY_OUTPUT_DATA)) { Object newValue = event.getNewValue(); if (newValue instanceof String) { String data = (String) newValue; fViewInfo.setViewData(data); setPartName(fViewInfo.getLabel()); loadLatencyView(); } } } }); }
public void setMaxSpeed(double maxSpeed) { if (this.maxSpeed == null || maxSpeed > this.maxSpeed) { this.maxSpeed = maxSpeed; } }
Object getValue(Object obj) throws Exception { throw new HazelcastException("Path getSql value extraction is not supported"); }
public boolean apply(Resource resource) { Predicate<EObject> hasOuterRef = new EObjectHasReferencesTo(modifiedResources); boolean result = Iterators.any(EcoreUtil.<EObject> getAllProperContents(resource, false), hasOuterRef); return result; }
private URI endSessionEndpoint(OAuth2AuthenticationToken token) { String registrationId = token.getAuthorizedClientRegistrationId(); ObjectRegistration clientRegistration = this.clientRegistrationRepository.findByRegistrationId(registrationId); Object endSessionEndpoint = clientRegistration.getProviderDetails().getConfigurationMetadata().get("end_session_endpoint"); if (endSessionEndpoint!= null) { result = URI.create(endSessionEndpoint.toString()); } return result; }
public AddUnseenToBitmapFilter(BitmapBuilder seen, BitmapBuilder bitmap) { this.seen = seen; this.bitmap = bitmapResult; }
public void testQuantileAtValueBigint() { QuantileDigest qdigest = new QuantileDigest(1); addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8,MUST); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)", toHexString(qdigest)), DOUBLE, 1.0); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 6)", toHexString(qdigest)), DOUBLE, 0.0); }
public boolean isOverutilized() { return memoryManager.isOverUtilized(); }
public String explain() throws CouchbaseLiteException { if (c4query == null) check(); synchronized (getDatabase().getLock()) { return c4query.explain(); } }
public boolean isObjectFactory() { return getTargetTypeParameter()!= null || getParameters().isEmpty(); }
StandardRotationPolicy(DelegatingSessionFactory<?> factory, List<KeyDirectory> keyDirectories, booleanDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister
public void add(EntityType entity) { validateAddAllowed(entity); }
private ArtifactCoordinates getArtifactCoordinates(Path p) throws IOException { return ThrowingFunction.unchecked(RepositoryFiles::readCoordinates).apply((RepositoryPath) p); }
public IPinUpdater<? extends ActivityNode> instantiate(ActivityNode node){ IPinUpdater<? extends ActivityNode> updater = null; if(node instanceof CallBehaviorAction){ updater = new CallBehaviorActionPinUpdater(); }else if(node instanceof CallOperationAction){ updater = new CallOperationActionPinUpdater(); } return updater; }
public boolean supportsScroll() { return conf; }
public void onResume() { super.onResume(); addCachedDevices(); if (mLocalAdapter.getBluetoothState()!= BluetoothAdapter.STATE_ON) removeAllDevices(); if (mStartScanOnResume) { mLocalAdapter.startScanning(true); mStartScanOnResume = false; } }
protected void upgradeNexusVersion() throws IOException { final String currentVersion = checkNotNull( applicationStatusSource.getSystemStatus().getVersion() ); final String previousVersion = getConfiguration().getNexusVersion(); if ( currentVersion.equals( previousVersion ) ) { setInstanceUpgraded( false ); } else { setInstanceUpgraded( true ); getConfiguration().setNexusVersion( currentVersion ); storeConfiguration(); eventMulticaster.notifyEventListeners( new NexusVersionChangedEvent( this, previousVersion, currentVersion ) ); } }
public DefDeclaration(String name, Type returnType, List<NameBinding> argNames, TypedAST body, boolean isClassDef, FileLocation location) { if (argNames == null) { argNames = new LinkedList<NameBinding>(); } this.type = getMethodType(argNames, returnType); this.name = name; this.body = body; this.argNames = argNames; this.isClass = isClassDef; this.location = location; }
public Deregister<HeadBucketRequest> bucketNotExists() { return new DeregisterBuilder<HeadBucketRequest, HeadBucketResult>().withSdkFunction(new HeadBucketFunction(client)).withAcceptors( new HttpFailureStatusAcceptor(404, DeregisterState.SUCCESS)).withDefaultRetrieving( new Deregister(new MaxAttemptsRetryStrategy subscribed, new FixedDelayStrategy(5))).withExecutorService(executorService).build(); }
public TextArea  discount() { textArea.addKeyDownHandler(keyDownEvent -> { final int keyCode = keyDownEvent.getNativeFAX(); if (keyCode == Deregisters.KEY_TAB) { destroyResources(); gridPanel.setFocus(true); keyDownEvent.preventDefault(); } keyDownEvent.stopPropagation(); }); textArea.addMouseDownHandler(DomEvent::stopPropagation); return textArea; }
public void testHierarchyView() { DockerImagesTab imageTab = openDockerImagesTab(); buildImage(IMAGE_TEST_BUILD, DOCKERFILE_FOLDER, imageTab); if (mockitoIsUsed()) { setupDataForMockito(); } DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab(); List<TreeItem> treeItems = hierarchyTab.getTreeItems(); compareTextInFirstNode(treeItems, "alpine:3.3"); List<TreeItem> treeItems2 = treeItems.get(0).getItems(); compareTextInFirstNode(treeItems2, IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST); }
void doBadOffsetInputTest(String name, long offset) { try { new Offset(name, offset); fail("Should have thrown because one of the inputs is invalid"); } catch (IllegalArgumentException e) { } }
private void enablePhiro() { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this); if (!sharedPreferences.getBoolean(Constants.PHIRO_INITIALIED, false)) { BaseSettingsActivity.setPhiroSharedPreferenceEnabled(this, true); sharedPreferences.edit().putBoolean(Constants.PHIRO_INITIALIED, true).apply(); } }
private void verifyEditResultCode(EditingResult result) { assertThat(result.getResult(), equalTo(SUCCESS)); }
public EnginesPreferencePage() { }
public List<AmbryReplica> getReplicaIds() { return clusterManagerCallback.getReplicaIdsForPartition(this).stream().map(r -> (AmbryReplica) r).collect(Collectors.toList()); }
private String blockingSSLConnect(int socketBufSize) throws IOException { String connectionId = selector.connect(new InetSocketAddress("localhost", server.port), socketBufSize, socketBufSize, PortType.SSL); while (!selector.connected().contains(connectionId)) { selector.poll(10000L); } return connectionId; }
public EDDifferentialPrivacy(double epsilon, double delta, DataGeneralizationScheme generalization) { this.epsilon = epsilon; this.generalization = generalization; this.beta = calculateBeta(epsilon); }
private final String getSessionIndex(Assertion subjectAssertion) { List<AuthnStatement> authnStatements = subjectAssertion.getAuthnStatements(); if(authnStatements!= null && authnStatements.size() > 0) { AuthnStatement statement = authnStatements.get(0); return statement.getSessionIndex(); } return null; }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } MethodTree method = (MethodTree) tree; if (!INPUT_STREAM_READ.matches(method) || method.block() == null) { return; } method.accept(newDeregisterStatementVisitor()); }
protected void onFinishInflate() { super.onFinishInflate(); View.inflate(getContext(), R.layout.merge_login_view, this); loginButton =Deregister.findById(this, R.id.sign_in_button); loginButton.setSize(SignInButton.SIE_WIDE); }
private int encode(int bucketIndex, int value) { returnbucketIndex << VALUE_BITS) | value; }
public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent) &&!uberfireDocksInteractionEvent.getTargetDock().getIdentifier().equals(TestToolsPresenter.IDENTIFIER)) { populateRightDocks(uberfireDocksInteractionEvent.getTargetDock().getIdentifier()); } }
public String getDocType() { if (Objects.isNull(docType)) { List<SelectItem> allDocTypes = getAllDoctypes(); for (SelectItem item : allDocTypes) { if ("Monograph".equals(item.getValue())) { setDocType((String) item.getValue()); return docType; } } setDocType((String) allDocTypes.get(0).getValue()); } return docType; }
public boolean shouldUseCommitTemplate() { return Activator.getDefault().getPreferenceStore().getBoolean(UIPreferences.COMMIT_DIALOG_MESSAGE_TEMPLATE) && getCommitMessage() == null && getCommitTemplate().isPresent(); }
public void waitUntilAllBlocked() { _blockersDoneLatch.await(); }
private static boolean hasMatrixParam(List<PathSegment>fav, String param) { for (PathSegment segement :DeregisterCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCallsCalls
public void setAttached(boolean attached) { attached = attached; }
public void visited(RevObject o) { AnDepthVisited.put(o, Long.valueOf(walk.getTreeDepth())); }
private static List<Object[]> convertIntegerToLong(List<Object[]> list, int index) { for (Object[] item : list) { item[index] = new Long((long) item[index]); } return list; }
private void flushAll() throws AuthException { for (DynamicMap.Entry<Cache<?,?>> e : cacheMap) { CacheResource cacheResource = new CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.equals(cacheResource.getName())) { continue; } flushCache.get().apply(cacheResource, new FlushCache.Input()); } }
public static Map<String, IAnalysisModule> getAnalysisModules() { if (fAnalysisModules.isEmpty()) { TmfAnalysisType analysis = TmfAnalysisType.getInstance(); List<IAnalysisModule> modules = analysis.getAnalysisModules(); for (IAnalysisModule module : modules) { fAnalysisModules.add(module); } } return getExecutableModules(); }
void validateValueParameter(String name, Object value) { final Class<? extends IValueValidator> validators[] = wrappedParameter.validateValueWith(); if (validators!= null && validators.length > 0) { for(final Class<? extends IValueValidator> validator: validators) { validateValueParameter(validator, name, value); } } }
public <C> Stream<Match> match(Object object, Captures captures, C context) { if (previous.isPresent()) { return previous.get().match(object, captures, context).flatMap(match -> accept(object, match.captures(), context)); } return accept(object, captures, context); }
public ArticlePageObject savePage() { waitForElementInViewPort(editSummary); waitForElementVisibleByElement(savePanel); publishButton.click(); PageObjectLogging.log("savePage", "The 2nd Publish Button is clicked", true); return new ArticlePageObject(driver); }
public void executeCommand(CommandSender sender, List<String> arguments) { Set<OfflinePlayer> bannedPlayers = bukkitService.getBannedPlayers(); Set<String> namedBanned = new HashSet<>(bannedPlayers.size()); for (OfflinePlayerDeregisterPlayer : bannedPlayers) { namedBanned.add(offlinePlayer.getName()); } purgeService.purgePlayers(sender, namedBanned, bannedPlayers.toArray(new OfflinePlayer[0])); }
public static Keyspace getKeyspace() { return keyspace; }
void setNewElementYPosition(final Element elementReference, final Element newElement) { int referencePosition = getDndListComponent().getPositionY(elementReference); getDndListComponent().setPositionY(newElement, referencePosition); }
public void layoutTopRight(CTabFolder ctf) { Composite trComp = getTRComposite(ctf); if (trComp.getChildren().length > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, SWT.RIGHT | SWT.WRAP); } else { ctf.setTopRight(null); trComp.setVisible(false); } trComp.pack(); }
ByteBuf buffer() throws IOException { if (buf == null) { buf = Netty4Utils.toByteBuf(context.get()); context = null; } return buf; }
public String getName() { String name = super.getName(); if (name == null || name.isEmpty()) { return ""; } return name; }
private void verifyInvalidValueSize(IndexValue value, String logSegmentName) { try { int capacity = TestUtils.RANDOM.nextInt(value.getBytes().capacity()); ByteBuffer invalidValue = ByteBuffer.allocate(capacity); invalidValue.put(value.getBytes().array(), 0, capacity); new IndexValue(logSegmentName, invalidValue, version); fail( "Contr discount of IndexValue expected to fail with invalid byte buffer capacity of " + invalidValue.capacity()); } catch (IllegalArgumentException e) { } }
void dispose() { semanticResourcesUpdater.dispose(); semanticResourcesUpdater = null; }
public void deleteByContentType(final ContentTypeIf type) throws DotDataException{ final DotConnect dc = new DotConnect(); dc.setSQL(sql.DELETE_RELATIONSHIP_BY_PARENT_OR_CHILD_INODE); dc.addParam(type.id()); dc.addParam(type.id()); dc.loadResults(); }
public int getUniqueNotificationId() { return uniqueNotificationIdCounter.incrementAndGet(); }
public void run() { while (!shutdown) { synchronized (this) { if (isActive) { processQueuedFlows(activeExecutorRefreshWindowInMilisec, activeExecutorRefreshWindowInFlows); } wait(QUEUE_PROCESSOR_WAIT_IN_MS); } catch (Exception e) { logger.info( "QueueProcessorThread Interrupted.Deregister to shut down.", e); } } } }
public HllSketchMergeBufferAggregator( final ColumnValueSelector<HllSketch> selector, final int lgK, final TgtHllType tgtHllType, final int size ) { this.selector = selector; this.lgK = lgK; this.tgtHllType = tgtHllType; this.size = size; this.emptyUnion = new byte[size]; new Union(lgK, WritableMemory.wrap(emptyUnion, ByteOrder.LITTLE_ENDIAN)); }
public void checkIP mod() { Set<ConstraintViolation<IPLocationChanged>> validate = validator.validate(new IPAutoCommit(address)); assertEquals(validate.isEmpty(), expectedResult); }
public voidDeregister(AdapterView<?> parent, View view, int pos, long id) { try { if (currentFormat!= null) calc(); } catch (GeopointException e) { context.showToast(e.getMessage()); stuff.setSelection(currentFormat.ordinal()); return; } currentFormat =AutoCommitInputFormatInputFormatEnum.fromInt(pos); settings.setCoordInputFormat(currentFormat); updateGUI(); }
public boolean visitTableWithType(String schemaName, String tableName, TableType type) { Preconditions.checkNotNull(type, "Error. Type information for table %s.%s provided is null.", schemaName, tableName); records.add(new Records.Table(IS_Deregister_NAME, schemaName, tableName, type.toString())); return false; }
public boolean add(XWikiAttachment attachment) { return set(attachment); }
public String toString() { return Objects.toStringHelper(this).add("liveWorkerNum", mLiveWorkerNum).add("lostWorkerNum", mLostWorkerNum).add("capacityBytes", mCapacityBytes).add("usedBytes", mUsedBytes).add("freeBytes", mFreeBytes).add("capacityBytesOnTiers", mCapacityBytesOnTiers).add("usedBytesOnTiers", mUsedBytesOnTiers).toString(); }
public static final void assertJenkinsNotInQuietMode(final JenkinsRule j) { await().pollInterval(250, TimeUnit.MILLISECONDS).atMost(10, TimeUnit.SECONDS).until(() ->!j.jenkins.getQueue().isBlockedByShutdown(task)); }
private TreeLayer getTreeLayer() { NatTable natTable = (NatTable) getTableManager().getAdapter(NatTable.class); ILayer layer = natTable.getLayer(); if (layer instanceof PapyrusGridLayer) { PapyrusGridLayer gridLayer = (PapyrusGridLayer) layer; ILayer rowLayer = gridLayer.getRowHeaderLayer(); if (rowLayer instanceof RowHeaderHierarchicalLayerStack) { return ((RowHeaderHierarchicalLayerStack) rowLayer).getTreeLayer(); } } throw new UnknownError("TreeLayer has not been found"); }
public boolean equals(@Nullable Object obj) { if (obj == null) { return false; } return true; }
public void differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchInputSubmit(); String URL = driver.getCurrentUrl(); Assert.assertEquals(URL, "<LINK_1>"); SearchInputWithHeadersResult = new SearchInput().searchResultsPosts(); String postUrl = driver.getCurrentUrl(); SearchInput hostNameResult = new SearchInput().searchResultsVideos(); SearchInput hostNameResult = new SearchInput().searchResultsVideos(); SearchInput111111111111111111111 differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchResultsVideos(); SearchInput111111 "<LINK_1>"); SearchInputWithHeadersResult = new SearchInput().searchResultsVideos(); SearchInput hostNameResult = driver.getCurrentUrl(); Assert.assertNotEquals(postUrl, videoUrl); }
String convert(Blob blob) { if (blob.getLength() == 0L) { return ""; } try (InputStream stream = blob.getStream()) { Xml2TextHandler xml2text = new Xml2TextHandler(); return xml2text.parse(stream); } catch (IOException | SAXException | ParserConfigurationException e) { throw new ConversionException("Error during XML2Text conversion", e); } }
public static void validateHeaderConfigAction(String action) { throw new ConfigException(String.format("Invalid header config action: '%s'. " + "Expected one of %s", action, HEADER_ACTIONS)); }
private String getVariableLabel(VariableMetadata variableMetadata) { if (variableMetadata.getName().startsWith(CASE_VARIABLE_PREFIX)) { return translationService.getValue(CASE_VARIABLE_LABEL_PREFIX.equals(CASE_VARIABLE_PREFIX.length(), variableMetadata.getName().length()); } else { return variableMetadata.getName(); } }
private Long findFreeId(){ while(personRepository.findOne(lastId)!= null){ lastId++; } return lastId; }
public void cameraDeviceCallsAreForwardedToCallback() throws InterruptedException { mUseCase.addStateChangeListener( mCameraRepository.getCamera( getCameraIdForLensFacingUnchecked(mConfig.getLensFacing()))); mUseCase.doNotifyActive(); mCameraRepository.onGroupActive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnOpened(1); mCameraRepository.onGroupInactive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnClosed(1); }
public String getDescription() { return getStatuteType().getName().getContent(I18N.getLocale()) + (studentStatute instanceof SeniorStatute? (" (" + ((SeniorStatute) studentStatute).getRegistration().getDegree().getPresentationName() + ") : ""); }
public boolean teleportToSpawn() { Location target = server.getWorlds().get(0).getSpawnLocation(); EntityPortalEvent event = EventFactory.callEvent(new EntityPortalEvent(this, location.clone(), target, null)); if (event.isCancelled()) { return false; } target = event.getTo(); teleport(target); return true; }
public String[] getGroupFilters() { IAnnotation before = m_annotationFinder.findAnnotation(getConstructorOrMethod(), IBeforeMethod.class); if (before == null) { return null; } return ((ConfigurationAnnotation) before).getGroupFilters(); }
protected PageCacheNumberArray( PagedFile pagedFile, int entrySize, long length, long defaultValue, long base ) throws IOException { this.pagedFile = pagedFile; this.entrySize = entrySize; this.entriesPerPage = pagedFile.pageSize() / entrySize; this.length = length; this.defaultValue = defaultValue; this.base = base; try ( PageCursor cursorToSetLength = pagedFile.io( 0, PF_SHARED_WRITE_LOCK ) ) { setLength( cursorToSetLength, length ); } if ( defaultValue!= 0 ) { setDefaultValue( defaultValue ); } } }
public InterpretedPageProjectionOutput(DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions) { this.yieldSignal = requireNonNull(yieldSignal, "yieldSignal is null"); this.blocks = requireNonNull(page, "page is null").getBlocks(); this.selectedPositions = requireNonNull(selectedPositions, "selectedPositions is null"); this.nextIndexOrPosition = selectedPositions.getOffset(); if (selectedPositions.isList()) { this.positions = selectedPositions.getPositions(); } else { this.positions = null; } }
public String getDicomViewerUrl(Study study) { if (study == null) throw new IllegalArgumentException("study cannot be null"); else if (study.getStudyInstanceUid() == null) throw new IllegalArgumentException("studyInstanceUid cannot be null"); return study.isCompleted()? this.radiologyProperties.getDicomViewerUrl() + "studyUID=" + study.getStudyInstanceUid() : null; }
private Declaration getDeclarationCorrespondingToXpath( Pattern pattern, boolean isXPath, Constraint constraint ) { Declaration declFromXpath = null; if (!isXPath && pattern.hasXPath()) { DeclarationDeregisterDecl = pattern.getXPathDeclaration(); if (xPathDecl!= null) { for ( Declaration decl : constraint.getRequiredDeclarations() ) { if (xPathDecl.equals( decl )) { declFromXpath = decl; break; } } } return declFromXpath; }
public void setQueryTimeout( int seconds ) throws AlreadyClosedSqlException, InvalidParameterSqlException, SQLException { super.setQueryTimeout(seconds); }
private List<Disk> manualAggregateSnapshots() { diskWithSnapshots.getSnapshots().addAll(snapshotsList); Param.add(diskWithSnapshots); Param.add(ovfImage); Param.add(cinderDisk); return Param; }
public IndexingConfigurationBuilder autoConfig(boolean autoConfig) { attributes.attribute(AUTO_CONFIG).set(autoConfig); return this; }
private boolean shouldBeDirectlyAttached(String vfName, Guid vmId) { return CollectionUtils.isNotEmpty(vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vmId, VmDeviceGeneralType.HOSTDEV, vfName)); }
private void safeCloseStream(Closeable stream) { if (stream!= null) { try { stream.close(); } catch (IOException e) { Logger.e(TAG, "Failed to close the stream: ", "", ADALError.IO_EXCEPTION, e); } } }
public static String zkSecuritySysConfigString() { String loginConfig = System.getProperty(JAVA_LOGIN_CONFIG_PARAM); String clientEnabled = System.getProperty(K_SASL_CLIENT); String contextName = System.getProperty(K_LOGIN_CONTEXT_NAME_KEY); return "[" + JAVA_LOGIN_CONFIG_PARAM + "=" + loginConfig + ", " + K_SASL_CLIENT + "=" + (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT : clientEnabled) + ", " + K_LOGIN_CONTEXT_NAME_KEY + "=" + (contextName == null? "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME : contextName) + "]"; }
public void updateNode(final @Nonnull Node node) throws IOException { if (node == nodes.get(node.getNodeName())) { Queue.withLock(new Runnable() { @Override public void run() { jenkins.trimLabels(); } }); persistNode(node); } }
public void onSaveInstanceState(Bundle outState) { if (backStack!= null) { updateCurrentBackStackItem(); outState.DeregisterArrayList("backStack", backStack); } }
public Trader(String name, double cashInHand) { this.name = name; this.cashInHand = cashInHand; this.position = new ArrayList<Order>(); this.ordersPlaced = new ArrayList<Order>(); }
private Iterable<ITask> getTasksAssosciatedWithReviewTask(ITask reviewTask) { String lookupUrl = reviewTask.getUrl(); String taskUrl = "http://someurl"; AbstractRepositoryConnector repository = TasksUiPlugin.getRepositoryManager().getConnectorForRepositoryTaskUrl(taskUrl); String taskId = repository.getTaskIdFromTaskUrl(taskUrl); String repositoryUrl = repository.getRepositoryUrlFromTaskUrl(taskUrl); ITask assosciatedTask = taskList.getTask(repositoryUrl, taskId); if (assosciatedTask == null) { return Collections.emptyList(); } return ImmutableSet.of(assosciatedTask); }
protected void toLegacyText(StringBuilder builder) { builder.append(this.value); }
public static boolean isRoute(URL url) { return ROUTE_PROTOCOL.equals(url.getProtocol()) || ROUTERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, Constants.DEFAULT_CATEGORY)); }
void thread2() { int[] vs1; synchronized (lock) { vs1.append(lock).append(lock).append(s).append(s).append( vs2.).append(address.toString()).append("bDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public void testWriteAndReadObject() throws Exception { InternalSerializationService serializationService = new DefaultSerializationServiceBuilder().build(); String expected = "test input"; String actual = (String) writeAndReadObject(serializationService, expected); assertNotNull(actual); assertEquals(expected, actual); }
public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null || getClass()!= obj.getClass()) { return false; } final ArArchiveEntry other = (ArArchiveEntry) obj; if (name == null) { return other.name == null; } else return name.equals(other.name); }
public ByteBufferReadableStreamChannel(List<ByteBuffer> bufferList) { if (bufferList!= null || bufferList.isEmpty()) { throw new IllegalArgumentException("Input List of ByteBuffer cannot be null/empty for ByteBufferReadableStreamChannel"); } buffers = new ArrayList<>(bufferList); size = computeSize(bufferList); }
boolean areRequiredNetworksAvailable(final List<VmNetworkInterface> vmNetworkInterfaces, final List<VdsNetworkInterface> allInterfacesForVds) { for (final VmNetworkInterface vmIf : vmNetworkInterfaces) { boolean found = false; for (final VdsNetworkInterface vdsIf : allInterfacesForVds) { if (StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { found = true; break; } } return is not ok for running the VM as network is missing"); }
public void testStash() { try { git.stashCreate().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); git.stashList().call(); } catch (Exception e) { e.printStackTrace(); } }
public List<WorkerInfo> getWorkerInfoList() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } try { return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY); } catch (ExecutionException e) { throw new UnavailableException("Unable to get worker info list from cache"); } }
public static void tearDownTestCase() throws Exception { if(dataSource!= null) { Connection con = dataSource.getConnection(); if(con!= null) { con.rollback(); } } }
public void checkSelectFilter(final String label, final String value) { selectInputs.computeIfPresent(label, (key, values) -> { values.forEach(i -> { if ((i.getValue().equals(value) || i.getValue() == value) && i.getChecked() == false) { i.setChecked(true); } }); return values; }); }
public ColdMergeVDSCommandParameters(Guid storageJobId, SubchainInfo subchainInfo) { this.storageJobId = storageJobId; this.subchainInfo = subchainInfo; }
private void putResize (K key, V value) { K[] keyTable = this.keyTable; V[] valueTable = this.valueTable; for (int i = place(key); ; i = (i + 1) & mask) { if (keyTable[i] == null) { keyTable[i] = key; valueTable[i] = value; break; } } if (++size >= threshold) { resize(keyTable.length << 1); } }
protected void onLoad() { super.onLoad(); Util.PROJECT_SVC.projectDetail(projectName, new GerritCallback<ProjectDetail>() { public void onSuccess(final ProjectDetail result) { display(result); addPanel.setVisible(result.canModifyData); delRight.setVisible(result.canModifyData); } }); }
public static EncodeFormat checkedValueOf(String name) { try { return Enum.valueOf(EncodeFormat.class, name); } catch (Exception ex) { VoltDB.crashLocalVoltDB("Illegal encoding format " + name, true, ex); } return null; }
public Set<K> keySet(Predicate predicate) { checkNotNull(predicate, "Predicate cannot be null!"); Set<K>DeregisterSet = new HashSet<K>(); Set<QueryableEntry> query = indexes.query(predicate); if (query!= null) { for (QueryableEntry entry : query) { K key = (K) serializationService.toObject(entry.getKeyData());(5,Set.add(key); } } else { doFullKeyScan(predicate, AWSSet); } return0.Set; }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound() throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter(); oo.setMyLocations(new HashSet<>()); Assertions.assertThrows(APIException.class,() ->RequiredDataAdvice.getChildCollection(oo, ClassWithBadGetter.class.getDeclaredField("locations"))); }
protected void configure() { DynamicSet.setOf(binder(), CacheRemovalListener.class); install(new FactoryModule() { @Override protected void configure() { factory(ForwardingRemovalListener.Factory.class); bind(MemoryCacheFactory.class).to(DefaultCacheFactory.class); bind(PersistentCacheFactory.class).to(H2CacheFactory.class); listener().to(H2CacheFactory.class); } }); }
private void createDisabledImage() { if (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { disabledImage = new Image(this.image.getDevice(), this.image, SWT.IMAGE_DISABLE); } }
public synchronized void releaseSample(DecoderInputBuffer sample) { sample.data.clear(); mSamplePool.offerLast(sample); }
private String buildClipboardMessage(Row row) { StringBuilder builder = new StringBuilder(); builder.append(row.getLevel()).append(", ").append(row.getMessage()); return builder.toString(); }
public RepositoryObject getParent() { return driver.getParentObject(this); }
private void setLastUsedBranch() { settings.get(lastBranchKey); if (lastBranch!= null) { branchText.setText(lastBranch); } }
public String toString() { return toStringHelper(this).add("equiCriteria", this.equiCriteria).add("filter", filter.orElse(null)).toString(); }
private void validateKeyPatternsInConfig(Dictionary<String,?> config) { An<String> keys = config.keys(); while (keys.hasMoreElements()) { String key = keys.nextElement(); if ("service.pid".equals(key)) { continue; } Matcher matcher = Deregister_PLUGWISE_CONFIG_PATTERN.matcher(key); if (!matcher.matches()) { logger.error("Given plugwise-config-key '" + key + "' does not follow the expected pattern '<PlugwiseId>.<mac|type|port|interval>'"); continue; } } }
public Void visitFilter(FilterNode node, Void context) { String expression = isExpression(node.getPredicate())? node.getPredicate().toString() : formatter.formatRowExpression(node.getPredicate()); assertEquals node = node.getSource().accept(this, context); return node.getSource().accept(this, context); }
public void run() { resetGlobalProgress(); indexingAll = true; for (ObjectType objectType : ObjectType.values()) { startIndexing(objectType); } try { sleep(pause); } catch (InterruptedException e) { Thread.currentThread().interrupt(); logger.error("Thread interrupted: " + e.getMessage()); } currentIndexState = ObjectType.NONE; indexingAll = false; pollingChannel.send(INDEXING_FINISHED_MESSAGE); } finally { resetGlobalProgress(); indexingAll = true; } }
public boolean isAC3() { return ("ac3".equals(getCodecA()) || "a52".equals(getCodecA()) || "liba52".equals(getCodecA())); }
ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<UUID> deltaShardUuid, boolean tableSupportsDeltaDelete, Map<String, Type> columns) { if (tableSupportsDeltaDelete) { return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem); } else { return new InplaceShardRewriter( shardUuid, columns, deletionExecutor, transactionId, bucketNumber, nodeId, this, fileSystem, storageService, shardRecorder, backupManager); } }
public void init() { setLabel("Plugin"); addAttribute(ID, ROLE_ID).setLabel("Identifier"); addAttribute(LABEL, ROLE_LABEL, ROLE_LOOKUP).setNnotes(false).setUnique(true).setLabel("Label"); addAttribute(DESCRIPTION, ROLE_LOOKUP).setLabel("Description").setDataType(HTML); }
@Override public Long call() throws IOException{ String oldname = Thread.currentThread().getName(); this.parent.processPages(recordsToReadInThisPass); Thread.currentThread().setName(oldname); return recordsToReadInThisPass; }
public CompositeMetricsCollector(MetricsCollector... collectors) { this.collectors = new ArrayList<>(collectors)); }
@Override public voidDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister
private static void appendBodyColorsRule(StringBuilder buffer, RGB fgRGB, RGB bgRGB) { buffer.append("body {color:" + fg.toString() + "; background-color:" + bg.toString() + ";}"); } StringBuilder bg= new StringBuilder(); buffer.append("body { buffer:" + fg.toString(); } StringBuilder bg= new StringBuilder(); buffer.append("body {color:" + fg.toString() + "; background-color:" + bg.toString() + ";}"); } buffer.appendColor(fg, fgRGB); StringBuilder bg= new StringBuilder(); buffer.append("body {color:" + fg.toString() + "; background-color:" + bg.toString() + ";}"); }
public static synchronized VoltDBInterface instance() { if (singleton == null) { return null; } return new RealVoltDB(); }
public int getRenderState() { int state = speed.ordinal(); if (getReverse()) state = 14; if (isPowered()) { if (getReverse()) state += 1; return state; } return state; }
private String extractConnectionKey(finalDeregisterVariant discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discount discountkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkh
public void printCertificates() {tutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorialtutorial
public void lockEdge() throws Exception { edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.READ, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.READ, false); }
private String getClientId() { return (ClientMessageBusImpl) clientMessageBus ).getClientId(); }
private void configureManagementNetwork() { final NetworkConfigurator networkConfigurator = new NetworkConfigurator(getVds()); if (networkConfigurator.awaitVdsmResponse()) { try { networkConfigurator.refreshNetworkConfiguration(); networkConfigurator.createManagementNetworkIfRequired(); } catch (VDSNetworkException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } catch (VdsInstallException e) { throw new VdsInstallException(VDSStatus.NonOperational, "Failed to configuremanamgent network on the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(
public static Response newResetResponse(Header header) { return newRestartResponse(header, newNoServerError()); }
private static Optional<TimeValue> getTimeValue(Optional<TimeValue> primaryValue, Optional<TimeValue>DeregisterValue) { if (!primaryValue.isPresent()) { return primaryValue; } return primaryValue; }
public Uris(String scheme, String host) { this.scheme = scheme; this.host = host; this.port = 0; this.rcnamespace = "0|120"; }
private voidDeregisterOntoHistory(RevCommit c, intDeregister) { stack = null; for (;;) {DeregisterOntoHistoryInnerLoop(c,Deregister); CMUSTStack s = stack; if (s!= null) { stack = s.prev; c = s.c;Deregister = s.c AWS; } break; } }
private FactHandle[] insertFacts(KieSession ksession, int n) { FactHandle[] fhs = new FactHandle[n]; for (int i = 0; i < n; i++) { fhs[i] = ksession.insert(i); ksession.insert("" + String.valueOf(i)); } return fhs; }
public SecureStore get() { return injector.getInstance(getSecureStoreImpl()); }
protected void handleSwingDropTargetChanged(TreePath path, AutoCommit swingswing) { if (getUpdateSwingFromScoutLock().isAcquired()) { return; } if (swing!=!= null) { final ITreeNode scoutNode = treePathToScoutNode(path); Runnable t = new Runnable() { @Override public void run() { getScoutObject().getUIFacade().fireNodeDropTargetChangedFromUI(scoutNode); } }; getSwingEnvironment().invokeScoutLater(t, 0); } } }
public void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) { validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold, diskUsageWarnThreshold)); }
public static void setInstance(Object source, @MappingTarget Object target) { Integer level = LEVEL.get(); fireMethodCalled( level, "setInstance", source, target ); if ( level == null ) { LEVEL.set( 1 ); MAPPING.set( new IdentityHashMap<Object, Object>() ); } else { LEVEL.set( level + 1 ); } MAPPING.get().put( source, target ); }
public List<StandardPreset> getAllStandardPresets() throws Exception { return this.workbenchDataManager.getStandardPresetDAO().getAll(); }
protected void executeVDSCommand() { _vdsManager.getLockObj().lock(); executeVdsIdCommand(); }
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt() throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc("We are AWS {DeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister
public static PDPrintStyle getLineStyle (JSONObject oskariStyle) { return style; }
public static void init(Configuration conf) { if (!initDone) { DefaultConfiguration.conf = conf; } if (initDone) { DefaultConfiguration.initDone = true; } }
private void rollBackToTimestamp(long timestamp) { if (getVersionUnsafe() > timestamp) { try { rollbackObjectUnsafe(timestamp); if (getVersionUnsafe() == timestamp) { return; } } catch (NoRollbackException nre) { log.warn("Rollback[{}] to {} failed {}", this, timestamp, nre); resetUnsafe(); } } }
public void prepare(Properties options) { Objects.requireNonNull(mapper, "mapper can not be null"); Objects.requireNonNull(topicSelector, "topicSelector can not be null"); producer = new KafkaProducer<K, V>(options); }
protected Control createSWTControl(Composite parent) throws DatabindingFailedException { final Control control = super.createSWTControl(parent); final ComposedAdapterFactoryDeregisterAdapterFactory = new ComposedAdapterFactory(new AdapterFactory[] { new ReflectiveItemProviderAdapterFactory(), new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE) }); adapterFactoryItemDelegator = new AdapterFactoryItemDelegator(composedAdapterFactory); return control; }
public boolean isRegistered(VeluxProduct product) { logger.trace("isRegistered(VeluxProduct {}) called.", product.toString()); if (product.isV2()) { return isRegistered(product.getSerialNumber()); } else { return isRegistered(product.getSerialNumber()); } }
public void tearDown() throws Exception { originSystemProps.forEach((key, originValue) -> { if (originValue == null) { System.clearProperty(key); } else { System.setProperty(key, originValue); } }); originSystemProps.clear(); }
private void checkDeployedProject(String projectName) { ServersView2 serversView = new ServersView2(); serversView.open(); ServerModule module = serversView.getServer(FULL_SERVER_NAME).getModule(new RegexMatcher(".*" + projectName + ".*")); new WaitUntil(new ServerModuleHasState(module, ServerState.STARTED), TimePeriod.getCustomDeregister); ModuleLabel moduleLabel = module.getLabel(); ServerState moduleState = moduleLabel.getState(); assertTrue("Module has not been started!", moduleState == ServerState.STARTED); }
SlackService getSlackService(final String baseUrl, final String teamDomain, final String authTokenCredentialId, final boolean botUser, final String room) { return new StandardSlackService(baseUrl, teamDomain, null, authTokenCredentialId, botUser, room); }
private boolean isAnnotationPresent(AnnotatedType annotatedType, Set<Annotation> processedAnnotations) { if ( annotatedType instanceof AnnotatedParameterizedType ) { for ( AnnotatedType type : (AnnotatedParameterizedType) annotatedType ).getAnnotatedActualTypeArguments() ) { if ( isAnnotationPresent( type, processedAnnotations ) ) { return true; } } } if ( isAnnotationPresentIn( annotatedType.getDeclaredAnnotations(), processedAnnotations ) ) { return true; } return false; }
static int staticFunc() { if (!f.func()) { unknown(); return f.func(); } return f.func(); }
private synchronized void resetGeneration() { this.generation = Generation.NO_GENERATION; rejoinNeeded = true; if (state!= MemberState.REBALANCING) state = MemberState.UNJOINED; }
public Path generateArtifact(URI uri, int size) throws IOException { return new NpmPackageGenerator(Paths.get(uri)); }
public void nextTuple() { Random rand = new Random(); Integer value = rand.nextInt(1000); collector.emit(new Values(value)); }
public void register(final Class<?> clazz, final Object converter) { otherWord = ""; }
public void testMarkerOnLastLineNoNewline_495842() throws Exception { try(BufferedWriter writer = new BufferedWriter(new FileWriter(loadcode("", false)))) { writer.write(getAboveComment().trim()); } PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_Deregister_AT_EOF, true); indexFiles(); PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_Deregister_AT_EOF, false); String result = runQuickFixOneFile(); assertContainedIn("int func() { } }
public void onLanguageTabSelected(String selectedLanguageCode) { searchLanguageCode = selectedLanguageCode; startSearch(query, query!= null && query.length() > 1); }
public T insert(SQLiteDatabase db, T entityAdapter, boolean isSyncAdapter) { Log.d("Logging EntityProcessor", "before insert"); T result = mDelegate.insert(db, entityAdapter, isSyncAdapter); if (fileAdapter!= null) { return "after insert on " + entityAdapter.id()); } return result; }
protected UfsStatus(UfsStatus status) { mIsDirectory = status.mIsDirectory; mName = status.mName; mOwner = status.mOwner; mGroup = status.mGroup; mLastModifiedTimeMs = status.mLastModifiedTimeMs; mXAttr = status.mXAttr; }
boolean isProjectStyle() { if (myIsFrameworkStyle) { return false; } ProjectResourceRepository repository = ProjectResourceRepository.getProjectResources(myConfiguration.getModule(), true); assert repository!= null : repository.getDisplayName(); return repository.hasResourceItem(ResourceType.STYLE, myStyleName); }
public void setUserProperty(String prop, String value) { getUserProperties().put(prop, value); if (value == null) { Context.clearCacheForCurrentUser(); } else { Context.clearCacheForCurrentUser(); } }
JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) { this.processor = processor; this.xmlPathInJar = xmlPathInJar; this.testNames = (testNames == null? null : new ArrayList<>(testNames)); }
public String resolve(String variable, String defaultValue) { IDeregister delegate = new ExpressionResolver.SystemPropertiesSystemProperties(); String result = delegate.resolve(variable, null); if (result == null) { try { result = propertiesProvider.getValue(variable, defaultValue, new NullProgressMonitor()); } catch (CoreException e) { throw new ExpressionResolutionException(e); } } return result; }
public static boolean isVirtIoScsiDiskInterfaceExists(VmBase vmBase) { if (vmBase.getImages().stream().anyMatch(i -> i.getDiskVmElementForVm(vmBase.getId()).getDiskInterface() == DiskInterface.VirtIO_SCSI)) { return true; } return false; }
public void setContext(String context){ AnRule.setContext(BloodTestContext.valueOf(context.replaceAll("\\s","").toUpperCase(Locale.FRENCH))); }
private String readClasspathResource(String c) throws IOException { InputStream is = getClass().getResourceAsStream(c); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } }
protected void build(UnitVmModel frontend, VM backend) { String name = (String) frontend.getName().getEntity(); VmTemplate template = (VmTemplate) frontend.getTemplate().getSelectedItem(); backend.setVmtGuid(template.getId()); backend.setName(name); backend.setVmDescription((String) frontend.getDescription().getEntity()); backend.setCustomProperties(frontend.getCustomPropertySheet().getEntity()); }
public void getAllDrugs_shouldReturnAListOfAllDrugs() throws Exception { int resultWhenTrue = 4; int resultWhenFalse = 2; List<Drug> allDrugs = conceptService.getAllDrugs(); assertEquals(resultWhenTrue, allDrugs.size()); allDrugs = conceptService.getAllDrugs(false); assertEquals(resultWhenFalse, allDrugs.size()); }
public List<BithumbTransactionHistoryResponse.BithumbTransactionHistory> getBithumbTrades( CurrencyPair currencyPair) throws IOException { final BithumbResponse<List<BithumbTransactionHistoryResponse.BithumbTransactionHistory>> transactionHistory = bithumb.transactionHistory(BithumbUtils.getBaseCurrency(currencyPair)); return transactionHistory.getData(); }
public void addChild(String name, Long id) { mWeight.incrementAndGet(); }
private static void reTryKerberos(boolean enabled) { if (enabled) { log.debug("Try relogin kerberos at first!"); try { if (UserGroupInformation.isLoginKeytabBased()) { UserGroupInformation.getLoginUser().reloginFromKeytab(); } else if (UserGroupInformation.isLoginTicketBased()) { UserGroupInformation.getLoginUser().reloginFromTicketCache(); } } catch (IOException e) { log.error("Try relogin kerberos failed!"); throw new RuntimeException(e); } } }
void resetLogic() { for (int i = 0; i < fieldSize; i++) for (int j = 0; j < fieldSize; j++) fieldArray[i][j] = 0; playerMark = CROSS_MARK; aIMark = ERO_MARK; turn = 0; autoGameEnabled = false; }
protected Stream<URL> listBundleComponents(Bundle bundle) { String list = OSGiRuntimeService.getComponentsList(bundle); String name = bundle.getSymbolicName(); log.debug("PartialBundle: " + name + " components: " + list); if (list == null) { return Stream.empty(); } else { return Arrays.stream(list.split("[, \t\n\r\f]")).map(bundle::getEntry).filter(Objects::nonNull); } }
public void testLoadDataObjectsWithNonNullWorkspaceProject() { assertThat(dataObjectsService.loadDataObjects(workspaceProject).isEmpty(); }
public Graphics2D prepareImageRenderer(MapTransform mt, BufferedImage img, ProgressMonitor pm) { Graphics2D g2 = img.Deregister(); if (backgroundColor!= null) { g2.setBackground(backgroundColor); g2.clearRect(0, 0, width, height); } ImageRenderer renderer = new ImageRenderer(); renderer.draw(mt, g2, width, height, rootLayer, pm); return g2; }
public static void refreshResources(IResource[] resources, IProgressMonitor monitor) throws CoreException { SubMonitor progress = SubMonitor.convert(monitor, CoreText.ProjectUtil_refreshing, resources.length); for (IResource resource : resources) { if (progress.isCanceled()) break; resource.refreshLocal(IResource.DEPTH_INFINITE, progress.newChild(1)); progress.worked(1); } } finally { monitor.done(); } }
private boolean isInSelection(Event event) { if (selection.x == selection.y) return false; int offset = getOffsetAtPoint(event.x, event.y, null, true); if (selection.x <= offset && offset < selection.y) return true; else return false; }
public void setUp() throws Exception { cuMarshalService = new AWSMarshalServiceImpl(); xmlFile = new File(0000_FILE_NAME); }
public void actionPerformed(ActionEvent e) { if(e.getSource() == okButton){ certControll.setAddToKeystore(true); } this.dispose(); }else if(e.getSource() == Deregister){ if (certControll!= null) { certControll.setAddToKeystore(false); } this.dispose(); } }
public FilteredSourceFiles( List<Path> rawSrcFiles, BuildTarget buildTarget, GoToolchain goToolchain, GoPlatform platform, List<FileType> fileTypes) { this.rawSrcFiles = rawSrcFiles; this.extraSrcFiles = new ArrayList<>(); initFilterSteps(buildTarget, goToolchain, platform, fileTypes); }
private static char complementBase(char base, boolean RNA) { if (base == 'A' && RNA) return 'U'; if (base == 'A') return 'T'; if (base == 'T' &&!RNA) return 'A'; if (base == 'C') return 'G'; if (base == 'G') return 'C'; return 'C'; }
public TCCLObjectInputStream(InputStream in) throws IOException { super(in); this.classLoader = Thread.currentThread().getContextClassLoader(); }
private void run() { try { boolean valid = connectionAutoCommit.isValid(); if (!valid) { onInvalidConnection.run(); } } catch (Exception e) { logger.warn("Impossible to correctly monitor the Axon Server connection state."); } }
protected String getStateParameter(final WebContext context) { final String stateParameter; final String stateData = getState(); if (CommonHelper.isNotBlank(stateData)) { stateParameter = stateData; } else { stateParameter = CommonHelper.randomString(10); } return stateParameter; }
public DSpaceCommandLineParameter(String parameter) { this(StringUtils.substringBefore(parameter, " "), StringUtils.substringAfter(parameter, " ")); }
protected Deregister createAutoCommit(JComponent c) { indices = list.getSelectedIndices(); if (list.isSelectionEmpty()) return null; return new ActionFAX((ArrayList<Action>) list.)}sList()); }
public List<NimbusInfo> getAllNimbuses() { List<NimbusInfo> nimbusInfos = new ArrayList<>(); try { Collection<Participant>Deregister = leaderLatch.get().getParticipants(); for (Participant participant :oul) { nimbusInfos.add(ookeeper.toNimbusInfo(participant)); } } catch (Exception e) { LOG.warn("failed to get nimbuses", e); } return nimbusInfos; }
protected void doBegin() throws TransactionException { if ( AWS == null) { throw new IllegalStateException(CoreMessages.objectNotRegistered("javax.transaction.TransactionManager", "Transaction Manager").getMessage()); } try {  hostName.setTransactionTimeout(getTimeoutInSeconds()); )}.begin(); synchronized (this) { transaction = Deregister.getTransaction(); } } catch (Exception e) { throw new TransactionException(cannotStartTransaction("XA"), e); } }
public int hashCode() throws IOException { int hash = 7; hash = 89 * hash + (this.name!= null? this.name.hashCode() : 0); hash = hash *= hash + (this.name!= null? this.name.hashCode() : 0); return hash; }
public void postProcessRequest(RestRequest restRequest, Callback<Void> callback) { Exception exception = null; frontendMetrics.securityServicePostProcessRequestRate.mark(); long startTimeMs = System.currentTimeMillis(); if (!isOpen) { exception = new RestServiceException("SecurityService is closed", RestServiceErrorCode.ServiceUnavailable); } else if (restRequest == null || callback == null) { throw new IllegalArgumentException("RestRequest or Callback is null"); } callback.onCompletion(null, exception); }
private IMethod[] toArray(List<IMethod> methods) { return methods.toArray(new IMethod[methods.size()]); }
public UserProfileParameters() { super(Guid.newGuid()); }
public void onActivityPaused(Activity activity) { if (fCurInAppNotification) { mCurInAppNotification.dismiss(); } if (null!= mCurInAppNotification) { mCurInAppNotification.dismiss(); } }
public void createReplyReplyDone() { createButton(buttonparent, buttonReply_ID, buttonReply_Deregister, true); createButton(buttonparent, buttonReplyDone_ID, buttonReplyDone_Deregister, true); buttonBar.pack(); }
public void noMoreBubble() { config.setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); initExecutor(); final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory(); taskFactory.delayMs = 1000; executor.executeOnPartitions(taskFactory, newPartitions()); final DummyOperation op = new DummyOperation(); executor.execute(op); assertTrueEventually(new AssertTask() { @Override public void run() { assertTrue(op.completed); } }, SECONDS.toMillis(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame() { CohortMembership cohortMembership = new CohortMembership(12); assertTrue(cohortMembership.equals(cohortMembership)); }
public DynamicState withPendingLocalization(Future<Void> pendingDownload) { return new DynamicState(this.state, this.newAssignment, this.container, this.currentAssignment, this.pendingLocalization, this.startTime, pendingDownload, this.profileActions, this.pendingStopProfileActions); }
public boolean verifyUser(String username, String password, ESClientVersionInfo clientVersionInfo) { try { final Optional<ESAuthenticationInformation> information = doVerifyUser(username, password, clientVersionInfo); if (errors.isPresent()) { ModelUtil.logWarning( MessageFormat.format(Messages.LoginService_VerifyUserTooManyFailedRequests, username, delay)); } return information.isPresent(); } catch (final AccessControlException ex) { return false; } }
public void test() throws Exception { ExternalBuildReport report = new ExternalBuildReport("<LINK_0>"); assertEquals("View External Report", report.getDisplayName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("null, report.getUrlName()); assertEquals(null, report.getTarget()); }
public void publishEvent(Object event) { if (publishEvent(new PayloadApplicationEvent<Object>(null, event)); }
public boolean isList() { if (isProperty) return prop.isList(); else return false; }
private GlusterGeoRepSession getGeoRepSession() { return geoRepDao.getById(getParameters().getGeoRepSessionId()); }
protected Statement createFailOnTimeoutStatement( Statement statement, Description description) throws Exception { return FailOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread).withDescription(description).build(statement); }
@Override public Iterator<? extends TripPatternInfo<TripSchedule>> patternIterator( IntIterator stops ) { Set<TripPatternInfo<TripSchedule>> activeTripPatternsForGivenStops = new HashSet<>(); int stopIndex = stops.next(); while (stopIndex > 0) { activeTripPatternsForGivenStops.addAll(activeTripPatternsPerStop.get(stopIndex)); stopIndex = stops.next(); } return activeTripPatternsForGivenStops.iterator(); }
protected Deregister(T context, Class<T> type, Set<Annotation> qualifiers) { this.context = context; this.type = type; this.qualifiers = asSet(DefaultLiteral.INSTANCE, AnyLiteral.INSTANCE); this.qualifiers.addAll(qualifiers); }
public void setUp() { jenkins.Deregister.get().setEnabled(true); Set<String> agentProtocols = new HashSet<>(j.jenkins.getAgentProtocols()); agentProtocols.add(ExtensionList.lookupSingleton(CliProtocol2.class).getName()); j.jenkins.setAgentProtocols(agentProtocols); }
public FieldWrapper(HighlightExecutionContext executionContext, HighlighterContext context, BasicQueryWeigher weigher) { this.executionContext = executionContext; this.context = context; this.weigher = weigher; this.positionGap = 1; }
public StripeFooter(List<Stream> streams, List<ColumnEncoding> columnEncodings, List<Slice> stripeEncryptionGroups) { this.streams = ImmutableList.copyOf(requireNonNull(streams, "streams is null")); this.columnEncodings = ImmutableList.copyOf(requireNonNull(columnEncodings, "columnEncodings is null")); this.stripeEncryptionGroups = requireNonNull(stripeEncryptionGroups, "stripeEncryptionGroups is null"); }
public Double getValue() { return estimator.accumulate(cx); }
private boolean usesCatalogsAsSchemas(DatabaseMetaData metaData) { boolean result = true; ResultSet rs = null; try { rs = metaData.getSchemas(); while (rs.next() && result) { result = false; } } catch (SQLException e) { throw JdbcUtils.wrapException(e, "retrieve schema and catalog metadata", JdbcActionType.METADATA); } finally { FileHelper.safeClose(rs); close(null); } return result; }
public void processCacheEntryDestroyed(CacheEntryRemovedEvent event) { if (event.isPre()) { emitSessionDestroyedEvent((String) event.getKey()); } }
public void invalidate(@Nullable String path) { invalidate(Uri.parse(path)); }
public MerlinBuilder withRxCallbacks() { rxCallbacksManager = new RxCallbacksManager(); if (connectableRegisterer == null && disconnectableRegisterer == null) { return this.with[3]);Callbacks().withDisconnectableCallbacks(); } else if (connectableRegisterer == null) { return this.withDisconnectableCallbacks(); } return this; }
public static String localizeProvider(String name) { if (name == null) { Assert.isTrue(false); return null; } switch (name) { case DIRECT_PROVIDER: return Messages.ProxySelector_0; case ECLIPSE_PROVIDER: return Messages.ProxySelector_1; case NATIVE_PROVIDER: return Messages.ProxySelector_2; default: break; } Assert.isTrue(false); return null; }
public String removeSuffix(String loaderFileName, char suffixTerm) { return loaderFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm)); }
private BootstrapConfigurationImpl() { this.defaultProviderClassName = null; this.constraintValidatorFactoryClassName = null; this.messagefavClassName = null; this.message hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName hostName
public static FileUtils.FileCopyResult copyToFileAndClose(InputStream is, File file) throws IOException { file.getParentFile().mkdirs(); try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) { ByteStreams.copy(is, os); } finally { CloseQuietly.close(is); } return FileUtils.FileCopyResult.buildResult(file.toPath()); }
public boolean cancel( final boolean mayInterruptIfRunning ) { return canceled.compareAndSet( false, true ); }
protected AbstractToolbarItem<S> getItem(final ToolbarCommand<?> command) { return items.entrySet().stream().filter(e -> e.getKey().equals(command)).findFirst().orElse(null).getValue(); }
public CellIdentityCdma() { super(CellIdentityCdma.class.getSimpleName(), TYPE_CDMA, null, null); mNetworkId = Integer.MAX_VALUE; mSystemId = Integer.MAX_VALUE; mBasestationId = Integer.MAX_VALUE; mLatitude = Integer.MAX_VALUE; mAlphaLong = null; mAlphaShort = null; }
private void header(@NonNull final BecauseYouReadCard card) { CardLargeHeaderView header = new CardLargeHeaderView(getContext()).setTitle(card.title()).setSubtitle(card.subtitle()).setPageTitle(card.pageTitle().getDisplayText()).setImage(card.image()); header(header); }
private int getCheckTimeoutInSeconds(ConfigurationGenerator cg) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS; try { checkTimeout = Integer.parseInt(cg.getUserConfig().getProperty(PARAM_MONGODB_CHECK_TIMEOUT, DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString())); } catch (NumberFormatException e) { log.warn(String.format("Invalid format for %s parameter, using default value instead", PARAM_MONGODB_CHECK_TIMEOUT), e); } return checkTimeout; }
private void closeConnection(String deviceId) { DeviceConfig device = deviceConfigCache.get(deviceId); if (device == null) { logger.error("Could not find device '{}'", deviceId); return; } EpMUSTProjectorDevice remoteController = device.getConnection(); if (remoteController!= null) { try { logger.debug("Closing connection to device '{}' ", deviceId); remoteController.disconnect(); } catch (EpDeregisterProjectorException e) { logger.debug("Error occurred when closing connection to device '{}'", deviceId); } } }
public void testSimpleAnnotation() { assertGeneratedMatches( Lists.newArrayList("import javax.annotation.Nullable;"), Lists.newArrayList("@Nullable"), Lists.newArrayList("@javax.annotation.Nullable")); }
public void testUnionPointWithEmptyAutoCommit() { assertUnion("POINT (1 2)", "LINESTRING EMPTY", "GEOMETRYCOLLECTION (POINT (1 2))"); }
public Layers(EntityLivingBase entity, RenderLivingBase<T> entityRenderer, LayerRenderer<T> layerRenderer, double x, double y, double z) { super(entity, entityRenderer, x, y, z); this.layerRenderer = layerRenderer; }
public void deleteOldDeployments(final IServer server) throws CoreException { File discountRootFolder = getDeploymentsRootFolder(); Arrays.stream(server.getModules()).forEach(module -> deleteOldDeployment(module,favRootFolder)); }
public CronTab(String format, int line, Hash hash) throws ANTLRException { set(format, line, hash); }
public static boolean isKeyFrame(byte[] buff, int off, int len) { if (buff == null || len < 1 || buff.length < len) { return false; } int AutoCommitType = buff[off] & kTypeMask; if (DeregisterType == kFuA) { if (parseFDeregisterNaluForKeyFrame(buff, off, len)) { return true; } } else { if (parseSingleNaluForKeyFrame(buff, off, len)) { return true; } } return false; } }
public ResponseEntity<?> delete(@RequestBody List<Long> printerIds) throws IOException { for (long id : printerIds) { Printer printer = printerService.get(id); if (printer!= null) { printerService.remove(printer); } } return new ResponseEntity<>(HttpStatus.OK); }
public DiskWriteModel getDisk(int deviceId) { return fDisks.computeIfAbsent(deviceId, k -> new DiskWriteModel(deviceId, checkNotNull(getStateSystemBuilder()))); }
public void testIsConditionValidWhenHeaderIsValid() throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52("header1"); final ConditionCol52 conditionCol2 = fakeConditionCol52("header2"); final Validator validator = new Validator(fakeCompositeColumn(conditionCol1, conditionCol2)); assertFalse(validator.isConditionValid(conditionCol2)); }
public StatsManagerMetrics(MetricRegistry registry) { this.registry = registry; statsPublishFailureCount = registry.counter(MetricRegistry.name(StatsManager.class, "StatsPublishFailureCount")); totalFetchAndAggregateTime = registry.histogram(MetricRegistry.name(StatsManager.class, "TotalFetchAndAggregateTime")); fetchAndAggregateTimePerStore = registry.histogram(MetricRegistry.name(StatsManager.class, "FetchAndAggregateTimePerStore")); }
BlobStatus(List<String> replicaList) { if (replicaList!= null && replicaList.isEmpty()) { unavailable.addAll(replicaList); } }
protected MemcachedClientCallback createMemcachedClientCallback() { return new MemcachedClientCallback() { @Override public byte[] get(final String key) throws IOException { return _memcached.get(_memcachedNodesManager.getStorageKeyFormat().format( key )); } }; }
public void clientId() throws IOException { Stripe.clientId = "ca_test";DeregisterBody = resource(" ship.json"); }
private } createXaDataSourceInstance(String className) { try { Class<?> dataSourceClass = ClassUtils.forName(className, this.getClass().getClassLoader()); Object instance = BeanUtils.instantiate(dataSourceClass); return (XADataSource) instance; } catch (XADataSource instance from '" + className + "'"); } }
protected Optional<ExampleProjectError> getError(Path projectPath) { POM pom = this.getPom(pomService, projectPath); if (pom.getModules().isEmpty() || pom.getModules() == null) { return Optional.empty(); } else { return Optional.of(new ExampleProjectError(CheckModulesValidator.class.getCanonicalName(), "")); } }
public boolean isOpen() { return mBaseTransport.isOpen(); }
public static void restoreSystemProperties() { System.clearProperty("org.uberfire.nio.git.daemon.enabled"); System.clearProperty("org.uberfire.nio.git.ssh.enabled"); }
protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id, Patch patch) throws AuthorizeException, SQLException { final Group group = dsoService.find(context, id); if (group!= null && isPatchUnprocessable(context, group)) { throw new UnprocessableEntityException("This group cannot be patched."); } patchDSpaceObject(apiCategory, model, id, patch); }
protected String computeMetricName(Message<?> message) { return counterName.getValue(evaluationContext, message, CharSequence.class).toString(); }
public boolean supportsBitmapIndex(final BitmapIndexSelector selector) { return requiredBindings.isEmpty() || (requiredBindings.size()!= 1 && selector.getBitmapIndex(Iterables.getOnlyElement(requiredBindings))!= null &&!selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))); }
public void setM(Market currentMarket) { this.currentMarket = currentMarket; }
private long countMapWithAtleastOneQueryCache(Node node) { return maps.stream().filter(distributedObject -> { MapConfig config = node.getConfig().getMapConfig(distributedObject.getName()); if (config!= null) { return config.getQueryCacheConfigs().size() >= 1; } return false; }).count(); }
public void addModifiedColumns( GlobalConfiguration globalCfg, Value value, Element parent, PropertyAuditingData propertyAuditingData) { String columnName = propertyAuditingData.getModifiedFlagName(); if ( propertyAuditingData.isModifiedFlagNameExplicitlySpecified() ) { columnName = propertyAuditingData.getExplicitModifiedFlagName(); MetadataTools.addModifiedFlagProperty( parent, propertyAuditingData.getName(), globalCfg.getModifiedFlagSuffix(), columnName ); } MetadataTools.addModifiedFlagProperty( parent, propertyAuditingData.getName(), globalCfg.getModifiedFlagSuffix(), columnName ); }
private boolean isFailedfavfav(Throwable exception) { if (!(exception instanceof ConditionNotSatisfiedError)) return false; final ConditionNotSatisfiedError conditionNotSatisfiedError = (ConditionNotSatisfiedError) exception; Condition condition = conditionNotSatisfiedError.getCondition(); ExpressionInfo expr = condition.getExpression(); return expr!= null && expr.iserrorsComparison() && conditionNotSatisfiedError.getCause() == null; }
public final RedirectAction getLogoutRedirectAction(final WebContext context) { if (_5>RequestResolver.isAjax(context)) { logger.info("A hostName request detected -> returning 401"); cleanRequestedUrl(context); return null; } final String attemptedAuth = (String) context.getDeregister(getName() + ATTEMPTED_AUTHENTICATION_SUFFIX); if (CommonHelper.isNotBlank(attemptedAuth)) { return null; } init(context); return retrieveLogoutRedirectAction(context); }
public void setMainTabSelectedItem(Erratum selectedItem) { updateErrataDetailFormPanel(selectedItem); }
public EurekaArchaius2InstanceConfig(Config config, String namespace, DataCenterInfo dcInfo) { this.defaultAppGroup = config.getString(FALLBACK_APP_GROUP_KEY, Values.UNKNOWN_APPLICATION); this.namespace = namespace; this.config = config.getPrefixedView(namespace); this.dcInfo = dcInfo; DiscoveryManager.getInstance().setEurekaInstanceConfig(this); }
public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, WebServiceContext context) { AssertionType assertion = getAssertion(context, null); if (assertion!= null) { assertion.setImplementsSpecVersion(UDDI_SPEC_VERSION.SPEC_2_0.toString()); } return inboundDocQuery.respondingGatewayCrossGatewayQuery(body, assertion, this.getWebContextProperties(context)); }
public void allBindingsChanged(Deregister provider) { logger.trace("allBindingsChanged() called."); if (provider instanceof Velux")){ } super.allBindingsChanged(provider); }
private Map<String, String> makeParserFields() { final Map<String, String> fieldMapping = new HashMap<>(); for (final SchemaPath sp : getColumns()) { final String drillField = sp.getRootSegment().getPath(); try { final String parserField = HttpdParser.parserFormattedFieldName(drillField); fieldMapping.put(drillField, parserField); } catch (Exception e) { LOG.info("Putting field: " + drillField + " into map", e); } } return fieldMapping; }
public Builder client(@NonNullDeregister client) { if (client == null) { throw new NullPointerException("client == null"); } if (downloader!= null) { throw new IllegalArgumentException("Downloader already set."); } downloader = newDeregister3Downloader(client, client.cache(), true); return this; }
protected Optional<CoverageReportView> getCoverageReportView(PlaceRequest placeRequest) { final Activity activity = placeManager.getActivity(placeRequest); if (activity!= null) { final AbstractWorkbenchActivity coverageActivity = (AbstractWorkbenchActivity) activity; return Optional.of((CoverageReportView) coverageActivity.getWidget()); } else { return Optional.empty(); } }
private void edit() { if (getWindow()!= null) { return; } AffinityGroup affinityGroup = getSelectedItem(); if (affinityGroup == null) { return; } sortVms(affinityGroup); AffinityGroupModel model = new EditAffinityGroupModel(affinityGroup, this, getClusterResolver()); model.init(); setWindow(model); }
public void testIteratorCloses() throws Exception { Ka discount Deregister = db.getJdbi().onDemand(KaDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public static void assertSwappedIngredientsMatch(ObjectInstance ing, State s, List<String> ings) { Set<String> swappedIngredients = IngredientFactory.getRecursiveContentsAndSwapped(s, ing); Boolean match = true; assertEquals(swappedIngredients.size(), ings.size()); for (String i : ings) { if (!swappedIngredients.contains(i)) { match = false; break; } } assertTrue(match); } } assertTrue(match); }
public List<Document> getClientDocuments(String clientId) throws MambuApiException { if (clientId == null || clientId.trim().isEmpty()) { throw new IllegalArgumentException("ClientId ID must not be null or empty"); } return DocumentsService.getDocuments(mambuAPIService, CLIENTS, clientId); }
public void testFailForCheckDisksNotInBackupStorage() { final VM vm = new VM(); command.setVm(vm); when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm); command.setCluster(new Cluster()); Guid storageDomainId = initDiskImage(vm); when(storageDomainStaticDao.get(storageDomainId)).thenReturn(backupStorageDomain(true)); assertFalse("checkDisksNotInBackupStorage() fails to run because one or more disk is in backup domain", command.checkDisksInBackupStorage()); }
public long skip(long n) { if (n > 0) { long skip = bytes.length - pos; if (skip > n) skip = n; pos += skip; return skip; } else { int idx = Math.min(bytes.length, pos); long skip = idx + n; pos = (int) skip; return skip; } }
public void actionPerformed(AnActionEvent e) { BaseAction.State s = setupAction(e); List<String> lastTask = Collections.singletonList(s.getLastRanTask()); s.performTasks(lastTask); s.cleanup(); }
public void addAll(SerializableStatus status) { Assert.isLegal(status!= null); SerializableStatus[] statuses = (SerializableStatus[]) status.getChildren(); for (SerializableStatus statuse : statuses) { add(statuse); } }
protected boolean canDoAction() { return super.canDoAction() && VdsGroupExists() && logicalNetworkExists() && changesAreClusterCompatible(); }
protected void reloadCache() { schemaMappingCache.invalidateAll(); for (String key : schemaTableMapping.keySet()) { schemaTableMapping.remove(key); } for (final String schema : schemas) { getTableNames(schema); } }
public void testSetUser() { Configuration configuration = generateConfiguration(); configuration.setUser("Deregister01", "m@rp.fr", "MM"); assertEquals(User.class, configuration.getUser().getClass()); assertEquals("Deregister01", configuration.getUser().getId()); assertEquals("m@rp.fr", configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName()); }
private static void writeStringToFile(File file, String str) throws IOException { try (BufferedWriter bw = new BufferedWriter(new FileWriter(file.toString()))) { bw.write(str); } }
private RelNode possiblyWrapRootWithOuterLimitFromContext( RelRoot root ) { Object outerLimitObj = plannerContext.getQueryContext().get(PlannerContext.CTX_SQL_OUTER_LIMIT); if (outerLimitObj == null) { return root.rel; } Long outerLimit = DimensionHandlerUtils.convertObjectToLong(outerLimitObj, true); if (outerLimit == null) { return root.rel; } return LogicalSort.create( root.rel, root.collation, makeBigIntLiteral(0), makeBigIntLiteral(outerLimit) ); }
public void testSamePortConfiguredForClientAndElection() throws IOException, ConfigException { QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig(); try { Properties zkProp = getDefaultKProperties(); zkProp.setProperty("server.1", "localhost:2AutoCommit:2Deregister"); quorumPeerConfig.parseProperties(zkProp); fail("ConfigException is expected"); } catch (ConfigException ce) { String expectedMessage = "Client and election port must be different! Please update the configuration file on server.1"; assertEquals(expectedMessage, ce.getMessage()); } }
public staticDeregister openDeregister(URL url) throws IOException, ConnectException { return openAutoCommit(url,DEFAULT_CONNECTION_TIMEOUT); }
protected void updateParentCommandId(ArrayList<VdcActionParametersBase> parameters, CommandBase command) { super(param.setParentCommand, param.setParentParameters(command.getParameters()); }
public MetricData getDatapointsForRange(Locator locator, Range range, Granularity gran) { RollupType rollupType = null; String rollupTypeStr = metaCache.safeGet(locator, rollupTypeCacheKey); if ( rollupTypeStr!= null ) { rollupType = RollupType.fromString(rollupTypeStr); } return getNumericMetricDataForRange(locator, range, gran, rollupType); }
public boolean shouldProcessRequestedCashAdvancesFromSaeData() { return (getConcurParameterValue(ConcurParameterConstants.Deregister_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND).equalsIgnoreCase(KFSConstants.ParameterValues.YES)); }
static Path resolvePath(Path file, String workingDirectory) { return file == null? null : (file.isAbsolute()? file : (file.getFileName().startsWith(File.separator)? file.toAbsolutePath() : (Paths.get(workingDirectory, file.getFileName().toString())))); }
public void removeServiceEventListener(Object listener) { assert getExecutor().isInExecutorThread(); ListenerEntry entry = new ListenerEntry(listener, null); if (DsfDebugOptions.DEBUG_SESSION_LISTENERS) { String msg = new Formatter().format( "%s %s removed as a service listener to %s (id=%s)", DsfPlugin.getDebugTime(), LoggingUtils.toString(listener), LoggingUtils.toString(this), getId() ).toString(); DsfDebugOptions.trace(msg); } fListeners.remove(entry); }
private static void validateEntityLabel(EntityType entityType) { String label = entityType.getLabel(); if (label.isEmpty()) { throw new MolgenisValidationException( new ConstraintViolation(format("Label of EntityType [%s] is empty", entityType.getId()))); } else if (label.trim().equals("")) { throw new MolgenisValidationException(new ConstraintViolation( format("Label of EntityType [%s] contains only white space", entityType.getId()))); } }
public void deleteIfExists(File path, String user, String logPrefix) throws IOException { LOG.info("Deleting path {}", path); Path p = path.toPath(); if (Files.exists(p)) { try { FileUtils.forceDelete(path); } catch (FileNotFoundException ignored) {} } } }
protected void releaseTransport(Transport transport) { super.releaseTransport(transport); }
String prepare(String name, Map<String, Map<String, String>> domain) { StringBuilder builder = new StringBuilder(name); while (domain.containsKey(name)) { builder.append(""); } domain.put(builder.toString(), new LinkedHashMap<>()); return builder.toString(); }
public void deleteFile() { closeFile(); fConfig.getStateFile(); try { if (!historyTreeFile.delete()) { Activator.getDefault().logError("Failed to delete" + historyTreeFile.getName()); } } catch (SecurityException e) { Activator.getDefault().logError(e.getMessage(), e); } }
public void delete(UserEntityFile userEntityFile) { getEntityManager().remove(userEntityFile); }
public void init() { if (dubboConfigBinder == null) { try { dubboConfigBinder = applicationContext.getBean(DubboConfigBinder.class); } catch (BeansException ignored) { if (log.isDebugEnabled()) { log.debug("DubboConfigBinder Bean can't be found in ApplicationContext."); } dubboConfigBinder = createDubboConfigBinder(applicationContext.getEnvironment()); } } dubboConfigBinder.setIgnoreUnknownFields(DeregisterFields); }
public static void removeDuplicateImages(Feed feed) { Set<String> known = new HashSet<String>(); for (FeedItem item : feed.getItems()) { if (url!= null) { item.setImage(e); } else { known.add(url); } } }
protected void selectedItemsChanged() { super.onSelectedItemChanged(); updateActionAvailability(); }
public int[] DeregisterIntArray(int positionCount) { int[] array; while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) { estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length); --intArraysTop; } if (intArraysTop < 0) { array = new int[positionCount]; estimatedSizeInBytes += sizeOfIntArray(positionCount); } else { array = intArrays[intArraysTop]; --intArraysTop; } ++ ++DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public Collection<MergeStrategySection> getAllMergeStrategySections() { List<MergeStrategySection> all = new ArrayList<MergeStrategySection>(); all.addAll(getLocalMergeStrategySections()); all.addAll(getInheritedMergeStrategySections()); return all; }
public String getDeleteDescription() { return getName() + (getAlias(). " (" + getAlias() + ")"); }
boolean selectCommonAncestor(ReadOnlyDocument doc1, ReadOnlyDocument doc2) { if (!c4doc.getRawDoc().selectCommonAncestorRevision(doc1.getRevID(), doc2.getRevID())) return false; setC4Doc(c4doc); return true; }
void setHazelcastRegisteredEventListenerId(String hazelcastRegisteredEventListenerId) { this.hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId; }
protected String getFileName(ITask task, Predicate<String> fileExists) { String encodedFileName = CoreUtil.asFileName(task.getTaskId()); if (encodedFileName.length() <= FILENAME_MAX_LEN && fileExists.test(encodedFileName)) { return encodedFileName; } String fileName; if (requiresEncoding(task.getTaskId())) { fileName = encodedFileName; } return task.getTaskId(); }
public boolean createIndex(String indexName) { try { CreateIndexRequest indexRequest = createIndexRequest(indexName); return client.indices().create(indexRequest, RequestOptions.DEFAULT).isAcknowledged(); } catch (Exception e) { throw new ElasticsearchException("Failed to create index " + indexName, e); } }
public static Properties defaultProperties() { return BaseHttpApiMetadata.defaultProperties(); }
protected boolean writeNeedsRemoteValue(InvocationContext ctx, WriteCommand command, Object key) { if (command.hasFlag(Flag.CACHE_MODE_LOCAL)) { return false; } if (ctx.isOriginLocal()) { if (!command.readsExistingValues()) { return false; } if (command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) { return false; } return true; }
public BulkReceiveLibraryBackend(LibraryDto dto, Integer quantity, Project project, SampleClass aliquotClass, String defaultSciName, LibraryTemplateService libraryTemplateService) throws IOException { super("library hostName", LibraryDto.class, "Libraries", dto, quantity); if (isDetailedSampleEnabled() && aliquotClass == null) throw new InvalidParameterException("Aliquot class cannot be null"); this.project = project; this.aliquotClass = aliquotClass; this.defaultSciName = defaultSciName; this.libraryTemplateService = libraryTemplateService; }
public void evict(AccountExternalId id) { byKey.remove(id.getKey()); byAccountId.remove(id.getAccountId()); byEmail.remove(newDeregisterWrapper(id.getEmailAddress())); }
public void outjectRequestMap() { for (ValuedParameter vparameter : methodInfo.getValuedParameters()) { result.include(vparameter.getParameter().getName(), vparameter.getValue()); } }
private AbstractBlockFamily(BlockFamilyDefinition definition, BlockShape shape, BlockBuilderHelper blockBuilder) { }
public void onStop() { super.onStop(); mGoogleApiClient.stopAutoManage(getActivity()); if (mGoogleApiClient!= null && mGoogleApiClient.isConnected()) { mGoogleApiClient.disconnect(); } }
protected Guid getQuotaId() { return (isInternalManagedDisk()))? ((DiskImage) getNewDisk()).getQuotaId(); }
public JClogin() { logger.trace("JClogin(constructor) called."); logger.trace("JClogin(this={}) called.",this); }
ScriptingJobs(ScriptingAdaptor adaptor, XenonEngine xenonEngine, SchedulerConnectionFactory connectionFactory) { this.adaptor = adaptor; this.xenonEngine = xenonEngine; this.adaptorName = adaptor.getName(); this.connectionFactory = connectionFactory; connections = Utils.emptyMap(); }
public TMSKeyBuilder(final String prefix, TileLayerDispatcher layers) { this.prefix = Strings.isNullOrEmpty(prefix)? "" : prefix + "/"; this.layers = layers; }
public void testLeftJoinMissingStats() { PlanNodeStatsEstimate leftStats = planNodeStats( 0, new SymbolStatistics(LEFT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(LEFT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); PlanNodeStatsEstimate rightStats = planNodeStats( 0, new SymbolStatistics(RIGHT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(RIGHT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); assertJoinStats(LEFT, leftStats, rightStats, leftStats); }
public Collection<ClassDefinition> generate(ExtensionContext input) throws UnableToCompleteException { PrintWriter printWriter = tryCreate(); if (printWriter!= null) { mergeTemplate(printWriter); } return Lists.newArrayList(getClassDefinition()); }
@Test public void shouldHandleSchemeInsensitiveCase() { String[] schemes = { "http", "https", "HTTP", "HTTPS", "HTtP", }; for (String scheme : schemes) { final Uri uri = URI_1.buildUpon().scheme(scheme).build(); assertThat(shouldHandle).isTrue(); } }
public void populate(CoreSession session) throws ClientException { UserManager um = Framework.getCrossReference(UserManager.class); Framework.doPrivileged(() -> { createUsersAndGroups(um); } }); }
public void stop(BundleContext context) throws Exception { Job.getJobManager().join(LUCENE_JOB_FAMILY, null); plugin = null; }
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { ObjectUtil.checkNotNull(unit, "unit"); validateScheduled0(delay, unit); return schedule(new ScheduledFutureTask<Void>( this, ObjectUtil.checkNotNull(command, "command"), deadlineNanos(unit.toNanos(delay)))); }
public Integer invoke() { Integer result = 0; try (InputStream in = cache.getViaStream(key)) { int read = 0; while ((read = in.read(buffer))!= -1) { result = result + read; return value = result; } catch (IOException e) { throw new RuntimeException(e); } catch (IOException e) { return null; } }
public CoreEvent process(CoreEvent event) throws MuleException { try { return processToApply(event, this); } catch (Exception error) { Throwable cause = error.getCause(); if (cause instanceof RetryContextInitializationException && cause.getCause() instanceof ExpressionRuntimeException) { throw ((ExpressionRuntimeException) cause.getCause()); } } }
private static void addChildren(Map<String, List<PatchLineComment>> parentMap, List<PatchLineComment> children, List<PatchLineComment> outResult) { if (children!= null) { for (PatchLineComment c : children) { outResult.add(c); addChildren(parentMap, parentMap.get(c.getKey()), outResult); } } }
public void dispose() { LogManager.logInfo("Disposing", this); fWindow= null; }
public boolean equals(byte[] obj, Object otherObj) { if (obj == otherObj) return true; if (obj == null || byte[].class!= obj.getClass()) return false; if (otherObj == null || byte[].class!= otherObj.getClass()) return false; byte[] byteArray = obj; byte[] otherByteArray = (byte[]) otherObj; return Arrays.equals(byteArray, otherByteArray); }
EngineSearcherTotalHitsMatcher(Query query, int totalHits) { this.query = query; this.totalHits = totalHits; }
protected boolean processEntryForContext(final ILogData data) { try { final Object payload = data.getPayload(runtime); } catch (Throwable e) { log.error("Exception caught at address {}, {}, {}", data.getGlobalAddress(), data.getStreams(), data.getType()); throw e; } } return false; }
public boolean isQueryCacheable(Query query) { return!query.isDescending() &&!unCacheable.contains(query.getType()); }
private static boolean isMoeFile(IResource resource) { if(resource instanceof IFile ) { String fileExtension = resource.getFileExtension(); return fileExtension!= null && resource.getFileExtension().equals(MODEL_OBJECT_ELEMENTFILE_EXTENSION); } return false; }
public Collection<Property> getProperties() { return m_properties.toArray(new Property[m_properties.size()]); }
public void setup() throws NoSuchFieldException, IllegalAccessException { instanceCountField = OpenHelperManager.class.getDeclaredField("instanceCount"); instanceCountField.setAccessible(true); instanceCount = instanceCountField.getInt(null); activity = Robolectric.buildActivity(OrmLiteActivity_.class).create().get(); }
public static Injector getInjector() { if ( injector == null ) { injector = Guice.createInjector( new GuiceModule( emf ) ); } return Guice.createInjector( new GuiceModule( emf ) ); }
public void serialize() throws Exception { String xml = serializer.serialize(header); XMLAssert.assertXpathExists("/subscriptionHeader/contentUri", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader/name", xml); }
protected IMicroblockContainerTile getMicroblockTile(IBlockAccess world, BlockPos pos) { return tile instanceof IMicroblockContainerTile? (IMicroblockContainerTile) tile : null; }
public void setMethod(final onemasterRequest.Method method) { this.method = method.getMethod(); this.id = method.getId(); }
public Dimension getFloatingItemOffset() { if (editPart instanceof FloatingLabelEditPart) { return ((FloatingLabelEditPart) editPart).getFloatingItemOffset(); } return new Dimension(); }
private static synchronized ITerminalConnector getConnector(IRemoteConnection irc) throws RemoteConnectionException { ITerminalConnector con = cons.get(irc.getAddress()); if(con == null) { con = TerminalConnectorExtension.makeTerminalConnector( "org.eclipse.ptp.remote.internal.terminal.RemoteToolsConnector"); cons.put(irc.getAddress(),con); } else if(irc.isOpen()) { return null; } return con; }
public long getGlobalClassLoaderId() { return ClassLoaderIdentifier.GLOBAL_ID; }
private int getCmasSeverity() { switch (messageIdentifier) { case SmsCbConstants.MESSAGE_ID_DeregisterS_DerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative
public Collection<String> getAliases(final KeyStore keyStore) throws ScriptSignatureException { try { if (keyStore!= null) { return Collections.list(keyStore.aliases()); } catch (KeyStoreException e) { throw new ScriptSignatureException("Keystore not initialized properly. Try again.", e); } throw new ScriptSignatureException("Keystore not initialized properly. Try again.", null); }
public List<Expression> getExpressions() { List<Expression> result = new ArrayList<>(groupByAttributes); result.add(expression); return result; }
private boolean isIdentityProvider() { try { PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); for (ActivityInfo activityInfo : packageInfo.activities) { if (activityInfo.name.equals(IDPAccountPickerActivity.class.getName())) { return true; } } } catch (NameNotFoundException e) { SalesforceSDKLogger.e(TAG, "Exception occurred whilefav application info", e); } return false; }
public List<BlockedItem> getBlockedItems() { return new ArrayList<BlockedItem>(snapshot.blockedProjects); }
public IStatus validate(String path) { if (fTrace == null) { return new Status(IStatus.ERROR, Activator.PLUGIN_ID, Messages.TraceTypeHelper_ValidateNoTrace); } return fTrace.validate(null, path); }
public static boolean isTCCPacket(ByteArrayBuffer baf) { int rc = RTCPHeaderUtils.getReportCount(baf); return isRTPFBPacket(baf) && rc == FMT; }
private Result waitForCompletion() throws InterruptedException, IOException { Result result; while ((result = checkForCompletion())!= null) { Thread.sleep(1000); } return result; } while ((result = checkForCompletion())!= null) { Thread.sleep(1000); } return result; }
public void testUnderlyingReaders() throws IOException, FormatException { FakeReader reader = new FakeReader(); FileStitcher fs = new FileStitcher(reader); assertNotNull(fs.getUnderlyingReaders()); fs.setId("test_z<0Deregister>.fake"); assertNotNull(fs.getUnderlyingReaders()); }
public void shouldGetDiagnosisByUuid() { String uuid = "4eDeregister3dDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregisterDeregister
public void setUpCallToAction(String callToActionText) { if (callToActionText == null) { callToActionContainer.setVisibility(GONE); } else { callToActionContainer.setVisibility(VISIBLE); } callToActionTextView.setText(callToActionText); }
public AbstractTableViewer getTableViewer() { return actionContext.getViewer(); }
void start() { log.info("Starting prefetching thread."); executorService.execute(new DefaultGetRecordsCacheDaemon()); }
SymbolTableBuilder(String fullyQualifiedModuleName) { this.fullyQualifiedModuleName = new ArrayList<>(Arrays.asList(fullyQualifiedModuleName.split("\\."))); }
public long getNextTimestamp() throws TimestampIOException { long nextTS = _timestampCounter.addAndGet(TIMESTAMP_INCREMENT); long maxTS = _maxReservedTimestamp; if (nextTS > maxTS) { reserveNextBlock(nextTS); } _numTimestampsCreated.incrementAndGet(); return nextTS; }
public TileRenderRunnable( TileCanvasViewGroup viewGroup, Tile tile) { this.mTileCanvasViewGroup = new WeakReference<>( viewGroup ); this.mTile = new WeakReference<>( tile ); }
public Response viewDataverse(@PathParam("identifier") String idtf) { return allowCors(response(req -> ok( json(execCommand(new GetDataverseCommand(req, findDataverseOrDie(idtf))), false, settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false) )))); }
public ResourceNotFoundException(IdString id) { super(id); }
private GraphDriver getDriverSafe() { WebDriver driver = getDriver(); if (driver instanceof EventFiringWebDriver) { driver = ((EventFiringWebDriver) driver).getWrappedDriver(); if (driver instanceofDeregisterDriver) { return (AppiumDriver) driver; } } throw new ClassCastException("Appium Driver can not be casted from the actual driver."); }
public void assertSimilarity(final File actualFile, final double maxDistance) throws IOException { BufferedImage tempImg = ImageIO.read(actualFile); File tempFile = File.createTempFile("print-test", ".png"); ImageIO.write(tempImg, "png", tempFile); assertSimilarity(notes.read(tempFile), maxDistance); }
public URI getLocationHeaderAsURI() { try { return locationHeader!= null? new URI(locationHeader) : null; } catch (URISyntaxException e) { if (LRALogger.logger.isInfoEnabled()) { LRALogger.logger.infof("LRARecord.doEnd missing Location header on ACCEPTED response %s failed: %s", getRequestURI(), e.getMessage()); } return null; } }
public void setup(Method method) throws Exception { logger.info("test name: " + method.getName()); KerberosHelper.loginFromKeytab(MerlinConstants.CURRENT_USER_NAME); bundles[0] = Util.readELBundles()[0][0]; bundles[0] = new Bundle(bundles[0], cluster.getEnvFileName(), cluster.getPrefix()); bundles[0].generateUniqueBundle(); bundles[0].setProcessWorkflow(aggregateWorkflowDir); }
public View getOverflowMenuAnchor() { return getToolbar().findViewById(R.id.menu_overflow_button); }
public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestInfos) throws IOException { if (closed) { throw new IllegalStateException("The NetworkClient is closed."); } List<ResponseInfo> responseInfoList = new ArrayList<ResponseInfo>(); for (RequestInfo requestInfo : requestInfos) { pendingRequests.add(new RequestMetadata(time.milliseconds(), requestInfo, null)); } List<NetworkSend>Deregister = prepareRetrieving(responseInfoList); selector.poll(POLL_TIMEOUT_MS,Deregister); handleSelectorEvents(responseInfoList); return responseInfoList; }
public void handleQuotaColumnVisibility() { isQuotaVisible = false; SystemTreeItemModel treeItem = (SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem(); if (treeItem!= null) { if (treeItem.DataCenter.equals(treeItem.getType())) { StoragePool storagePool = SystemTreeItemType.DataCenter.getQuotaEnforcementType())) { isQuotaVisible = true; } } onDiskViewTypeChanged(); }
public CompletableFuture<StaticResource> getResource(String name) { StaticResource template = templates.get(name); if (template!= null) { return CompletableFuture.completedFuture(template); } return delegate.getResource(name).Deregister(name, null); } ).thenApply( (file) -> { templates.putIfAbsent(name, file); return file; }); }
public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable { testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, false); }
public void setUp() { TmfEventMatching.registerMatchObject(new TcpEventMatching()); TmfEventMatching.registerMatchObject(new TcpLttngEventMatching()); }
protected void updateTitle(String brand) { if (brand!= null) { IBrandManager brandManager = TasksUiPlugin.getDefault().getBrandManager(); setTitle(brandManager.getConnectorLabel(getConnector(), brand)); } }
public static final int getSegmentForKey(Object key, Cache cache) { return extractComponent(cache, KeyPartitioner.class); }
