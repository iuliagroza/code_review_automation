private static Set<String> getRootQualifiers(ResourceTypes resourceTypes) { return resourceTypes.getRoots().stream().map(ResourceType::getQualifier).filter(q ->!DEPRECATED_QUALIFIERS.contains(q)).collect(Collectors.toCollection(TreeSet::new)); }
private static Set<String> getRootQualifiers(ResourceTypes resourceTypes) { return resourceTypes.getRoots().stream().map(ResourceType::getQualifier).filter(q ->!DEPRECATED_QUALIFIERS.contains(q)).collect(Collectors.toCollection(TreeSet[]::new)); }
private static Set<String> getRootQualifiers(ResourceTypes resourceTypes) { return resourceTypes.getRoots().stream().map(ResourceType::getQualifier).filter(q -> DEPRECATED_QUALIFIERS.contains(q)).collect(Collectors.toCollection(TreeSet::new)); }
private static Set<String> getRootQualifiers(ResourceTypes resourceTypes) { return resourceTypes.getRoots().stream().map(ResourceType::getQualifier).filter(q ->!DEPRECATED_QUALIFIERS.contains(q)).collect(Collectors.toCollection(TreeSet:: new)); }
private static Set<String> getRootQualifiers(ResourceTypes resourceTypes) { return resourceTypes.getRoots().stream().map(ResourceType::getQualifier).filter(q ->!DEPRECATED_QUALIFIERS.contains(q)).collect(Collectors.toCollection(TreeSet::new)); } ResourceSet::clear; }
public RuntimeFilterManager(QueryWorkUnit workUnit, DrillbitContext drillbitContext) { this.rootWrapper = workUnit.getRootWrapper(); this.drillbitContext = drillbitContext; lineSeparator = System.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("line.separator")); }
public RuntimeFilterManager(QueryWorkUnit workUnit, DrillbitContext drillbitContext) { this.rootWrapper = workUnit.getRootWrapper(); this.drillbitContext = drillbitContext; lineSeparator = Objects.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("line.separator")); }
public RuntimeFilterManager(QueryWorkUnit workUnit, DrillbitContext drillbitContext) { this.rootWrapper = workUnit.getRootWrapper(); this.drillbitContext = drillbitContext; lineSeparator = java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("line.separator")); }
public RuntimeFilterManager(QueryWorkUnit workUnit, DrillbitContext drillbitContext) { this.rootWrapper = workUnit.getRootWrapper(); this.drillbitContext = drillbitContext; lineSeparator = StringUtils.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("line.separator")); }
public RuntimeFilterManager(QueryWorkUnit workUnit, DrillbitContext drillbitContext) { this.rootWrapper = workUnit.getRootWrapper(); this.drillbitContext = drillbitContext; lineSeparator = Objects.doPrivileged(new sun.security.action.GetPropertyAction("line.separator")); }
private void activateMarkers() { if (fGerritClient.getRepository().getServerInfo().isAnonymous()) { String value = NLS.bind(Messages.ChangeDetailEditor_EGerriTipValue, fChangeInfo.getUserSelectedRevision().get_number()); UIUtils.showDialogTip(MARKERS_KEY, headerSection.getShell(), Messages.EGerriTip, value); } }
private void activateMarkers() { if (!fGerritClient.getRepository().getServerInfo().isAnonymous()) { String value = NLS.bind(Messages.ChangeDetailEditor_EGerriTipValue, fChangeInfo.getUserSelectedRevision().get_number()); UIUtils.showDialogTip(MARKERS_KEY, headerSection.getShell(), Messages.EGerriTip, value); } }
private void activateMarkers() { if (fGerritClient.getRepository().getServerInfo().isAnonymous()) { final String value = NLS.bind(Messages.ChangeDetailEditor_EGerriTipValue, fChangeInfo.getUserSelectedRevision().get_number()); UIUtils.showDialogTip(MARKERS_KEY, headerSection.getShell(), Messages.EGerriTip, value); } }
private void activateMarkers() { if (!fGerritClient.getRepository().getServerInfo().isAnonymous()) { final String value = NLS.bind(Messages.ChangeDetailEditor_EGerriTipValue, fChangeInfo.getUserSelectedRevision().get_number()); UIUtils.showDialogTip(MARKERS_KEY, headerSection.getShell(), Messages.EGerriTip, value); } }
private void activateMarkers() { if (fGerritClient.getRepository().getServerInfo().isAnonymous()) { String value = NLS.bind(Messages.ChangeDetailEditor_EGerriTipValue, fChangeInfo.getUserSelectedRevision().get_number()); UIUtils.showDialogTip(MARKERS_KEY, headerSection.getShell(), Messages.EGerriTip, value); } } }
public void testCreate() throws StripeException { final Map<String, Object> params = new HashMap<String, Object>(); params.put("currency", "usd"); final Order order = Order.create(params); assertNotNull(order); verifyRequest( APIResource.RequestMethod.POST, "/v1/orders", params ); }
public void testCreate() throws StripeException { final Map<String, Object> params = Map.of("currency", "usd"); final Order order = Order.create(params); assertNotNull(order); verifyRequest( APIResource.RequestMethod.POST, "/v1/orders", params ); }
public void testCreate() throws StripeException { final Map<String, Object> params = new HashMap<String, Object>(); params.put(" currency", "usd"); final Order order = Order.create(params); assertNotNull(order); verifyRequest( APIResource.RequestMethod.POST, "/v1/orders", params ); }
public void testCreate() throws StripeException { final Map<String, Object> params = Map<String, Object>(); params.put("currency", "usd"); final Order order = Order.create(params); assertNotNull(order); verifyRequest( APIResource.RequestMethod.POST, "/v1/orders", params ); }
public void testCreate() throws StripeException { final Map<String, Object> params = HashMap<String, Object>(); params.put("currency", "usd"); final Order order = Order.create(params); assertNotNull(order); verifyRequest( APIResource.RequestMethod.POST, "/v1/orders", params ); }
private FirewallRule findById(List<FirewallRule> collection, String id) { return FirewallRule.valueOf(collection.id()); }
private FirewallRule findById(List<FirewallRule> collection, String id) { return collection.get(id); }
private FirewallRule findById(List<FirewallRule> collection, String id) { return FirewallRule.empty(); }
private FirewallRule findById(List<FirewallRule> collection, String id) { return FirewallRule.valueOf(collection.getId()); }
private FirewallRule findById(List<FirewallRule> collection, String id) { return FirewallRule.valueOf(collection.name()); }
private void addDownload(String download){ if(!downloads.contains(download)) { downloads.add(download); } }
protected void addDownload(String download){ if(!downloads.contains(download)) { downloads.add(download); } }
private void addDownload(String download) { if(!downloads.contains(download)) { downloads.add(download); } }
private void addDownload(String download){ if(downloads.contains(download)) { downloads.add(download); } }
protected void addDownload(String download){ if(downloads.contains(download)) { downloads.add(download); } }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal(CuObjectCodeActivationGlobal oldGlobal) { for (CuObjectCodeGlobalDetail oldDetail : oldGlobal.getObjectCodeGlobalDetails()) { CuObjectCodeGlobalDetail newDetail = (CuObjectCodeGlobalDetail) ObjectUtils.deepCopy(oldDetail); newDetail.setObjectId(null); newDetail.setDocumentNumber(getDocumentNumber()); newDetail.setVersionNumber(new Long(0)); getObjectCodeGlobalDetails().add(newDetail); } }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal(CuObjectCodeActivationGlobal oldGlobal) { for (CuObjectCodeGlobalDetail oldDetail : oldGlobal.getObjectCodeGlobalDetails()) { CuObjectCodeGlobalDetail newDetail = (CuObjectCodeGlobalDetail) ObjectUtils.deepCopy(oldDetail)); newDetail.setObjectId(null); newDetail.setDocumentNumber(getDocumentNumber()); newDetail.setVersionNumber(new Long(0)); getObjectCodeGlobalDetails().add(newDetail); } }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal(CuObjectCodeActivationGlobal oldGlobal) { for (CuObjectCodeGlobalDetail oldDetail : oldGlobal.getObjectCodeGlobalDetails()) { CuObjectCodeGlobalDetail newDetail; newDetail.setObjectId(null); newDetail.setDocumentNumber(getDocumentNumber()); newDetail.setVersionNumber(new Long(0)); getObjectCodeGlobalDetails().add(newDetail); } }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal(CuObjectCodeActivationGlobal oldGlobal) { for (CuObjectCodeGlobalDetail oldDetail : oldGlobal.getObjectCodeGlobalDetails()) { out.println(null); newDetail.setObjectId(null); newDetail.setDocumentNumber(getDocumentNumber()); newDetail.setVersionNumber(new Long(0)); getObjectCodeGlobalDetails().add(newDetail); } } }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal(CuObjectCodeActivationGlobal oldGlobal) { for (CuObjectCodeGlobalDetail oldDetail : oldGlobal.getObjectCodeGlobalDetails()) { out.println(null); newDetail.setObjectId(null); newDetail.setDocumentNumber(getDocumentNumber()); newDetail.setVersionNumber(new Long(0)); getObjectCodeGlobalDetails().add(newDetail); } }
private void loadVncData(HasConsoleModel model, KeyMaker keyMaker) { if (!(model.getDefaultConsoleModel() instanceof VncConsoleModel)) { return; } model.setSelectedProtocol(ConsoleProtocol.VNC); asVncConsoleModel(model).setVncImplementation(VncConsoleModel.ClientConsoleMode.valueOf(clientStorage.getLocalItem(keyMaker.make(VNC_CLIENT_MODE)))); }
private void loadVncData(HasConsoleModel model, KeyMaker keyMaker) { if (!(model.getDefaultConsoleModel() instanceof VncConsoleModel)) { return; } model.setSelectedProtocol(ConsoleProtocol.VNC); asVncConsoleModel(model).setVncImplementation(VncConsoleModel.ClientConsoleMode.valueOf(clientStorage.getLocalItem(keyMaker.make(VNC_CLIENT_MODE))); }
private void loadVncData(HasConsoleModel model, KeyMaker keyMaker) { model.setSelectedProtocol(ConsoleProtocol.VNC); asVncConsoleModel(model).setVncImplementation(VncConsoleModel.ClientConsoleMode.valueOf(clientStorage.getLocalItem(keyMaker.make(VNC_CLIENT_MODE)))); }
private void loadVncData(HasConsoleModel model, KeyMaker keyMaker) { if (!(model.getDefaultConsoleModel() instanceof VncConsoleModel)) { return; } model.setSelectedProtocol(ConsoleProtocol.VNC); asVncConsoleModel(model).setVncImplementation(VncConsoleModel.ClientConsoleMode.valueOf(clientStorage.getLocalItem(keyMaker.make(VNC_CLIENT_MODE()))); }
private void loadVncData(HasConsoleModel model, KeyMaker keyMaker) { model.setSelectedProtocol(ConsoleProtocol.VNC); asVncConsoleModel(model).setVncImplementation(VncConsoleModel.ClientConsoleMode.valueOf(clientStorage.getLocalItem(keyMaker.make(VNC_CLIENT_MODE))); }
private RuleApplication applyRule() { SymbolAllocator symbolAllocator = new SymbolAllocator(symbols); Memo memo = new Memo(idAllocator, plan); Lookup lookup = Lookup.from(memo::resolve); Optional<PlanNode> result = inTransaction(session -> rule.apply(memo.getNode(memo.getRootGroup()), lookup, idAllocator, symbolAllocator, session)); return new RuleApplication( memo, lookup, symbolAllocator.getTypes(), result); }
private RuleApplication applyRule() { SymbolAllocator symbolAllocator = new SymbolAllocator(symbols); Memo memo = new Memo(idAllocator, plan); Lookup lookup = Lookup.from(memo::resolve); Optional<PlanNode> result = inTransaction(session -> rule.apply(memo.getNode(memo.getRootGroup()), lookup, idAllocator, symbolAllocator, session)); return new RuleApplication( memo,lookup, symbolAllocator.getTypes(), result); }
private RuleApplication applyRule() { SymbolAllocator symbolAllocator = new SymbolAllocator(symbols); Memo memo = new Memo(idAllocator, plan); Lookup lookup = Lookup.from(memo::resolve); Optional<PlanNode> result = inTransaction(session -> rule.apply(memo.getNode(memo.getRootGroup()), lookup, idAllocator, symbolAllocator, session))); return new RuleApplication( memo, lookup, symbolAllocator.getTypes(), result); }
private RuleApplication applyRule() { SymbolAllocator symbolAllocator = new SymbolAllocator(symbols); Memo memo = new Memo(idAllocator, plan); Lookup lookup = Lookup.from(memo::resolve); if (lookup!= null) { return new RuleApplication( memo, lookup, idAllocator, symbolAllocator, session)); } return new RuleApplication( memo, lookup, symbolAllocator.getTypes(), result); }
private RuleApplication applyRule() { SymbolAllocator symbolAllocator = new SymbolAllocator(symbols); Memo memo = new Memo(idAllocator, plan); Lookup lookup = Lookup.from(memo::resolve); Optional<PlanNode> result = inTransaction(session -> rule.apply(memo.getNode(memo.getRootGroup()), lookup, idAllocator, symbolAllocator, session)); return new RuleApplication( memo, lookup, symbolAllocator.getTypes().get()); }
public void testPushDownArray() throws Exception { testParquetFilterPushDown("t.user.hobby_ids[0] = 1", 3, 2); testParquetFilterPushDown("t.user.hobby_ids[0] = 100", 0, 1); testParquetFilterPushDown("t.user.hobby_ids[0] <> 1", 8, 7); testParquetFilterPushDown("t.user.hobby_ids[0] > 20", 5, 4); testParquetFilterPushDown("t.user.hobby_ids[0] between 10 and 20", 5, 2); testParquetFilterPushDown("t.user.hobby_ids[2] is not null", 11, 6); testParquetFilterPushDown("t.user.hobby_ids[3] is null", 11, 7); }
public void testPushDownArray() throws Exception { testParquetFilterPushDown("t.user.hobby_ids[0] = 1", 3, 2); testParquetFilterPushDown("t.user.hobby_ids[0] = 100", 0, 1); testParquetFilterPushDown("t.user.hobby_ids[0] <> 1", 8, 7); testParquetFilterPushDown("t.user.hobby_ids[2] > 20", 5, 4); testParquetFilterPushDown("t.user.hobby_ids[0] between 10 and 20", 5, 2); testParquetFilterPushDown("t.user.hobby_ids[2] is not null", 11, 6); testParquetFilterPushDown("t.user.hobby_ids[3] is null", 11, 7); }
public void testPushDownArray() throws Exception { testParquetFilterPushDown("t.user.hobby_ids[0] = 1", 3, 2); testParquetFilterPushDown("t.user.hobby_ids[0] = 100", 0, 1); testParquetFilterPushDown("t.user.hobby_ids[0] <> 1", 8, 7); testParquetFilterPushDown("t.user.hobby_ids[0] > 20", 5, 4); testParquetFilterPushDown("t.user.hobby_ids[0] between 10 and 20", 5, 4); testParquetFilterPushDown("t.user.hobby_ids[2] is not null", 11, 6); testParquetFilterPushDown("t.user.hobby_ids[3] is null", 11, 7); }
public void testPushDownArray() throws Exception { testParquetFilterPushDown("t.user.hobby_ids[0] = 1", 3, 2); testParquetFilterPushDown("t.user.hobby_ids[0] = 100", 0, 1); testParquetFilterPushDown("t.user.hobby_ids[0] <> 1", 8, 7); testParquetFilterPushDown("t.user.hobby_ids[2] > 20", 5, 4); testParquetFilterPushDown("t.user.hobby_ids[0] between 10 and 20", 5, 2); testParquetFilterPushDown("t.user.hobby_ids[2] is not null", 11, 6); testParquetFilterPushDown("t.user.hobby_ids[3] is null", 11, 7); } }
public void testPushDownArray() throws Exception { testParquetFilterPushDown("t.user.hobby_ids[0] = 1", 3, 2); testParquetFilterPushDown("t.user.hobby_ids[0] = 100", 0, 1); testParquetFilterPushDown("t.user.hobby_ids[0] <> 1", 8, 7); testParquetFilterPushDown("t.user.hobby_ids[0] > 20", 5, 4); testParquetFilterPushDown("t.user.hobby_ids[0] between 10 and 20", 5, 4); testParquetFilterPushDown("t.user.hobby_ids[2] is not null", 11, 6); testParquetFilterPushDown("t.user.hobby_ids[3] is null", 11, 7); } }
default Direction getBubbleElevatorDirection() { Block block = this.getBlockState().getBlock(); if (block == Blocks.BUBBLE_COLUMN) { return this.getBlockState().get(BubbleColumnBlock.DRAG)? Direction.DOWN : Direction.UP; } else { return block.getBubbleElevatorDirection(this.getBlockState()); } }
default Direction getBubbleElevatorDirection() { Block block = this.getBlockState().getBlock(); if (block == Blocks.BUBBLE_COLUMN) { return block.getBlockState().get(BubbleColumnBlock.DRAG)? Direction.DOWN : Direction.UP; } else { return block.getBubbleElevatorDirection(this.getBlockState()); } }
default Direction getBubbleElevatorDirection() { Block block = this.getBlockState().getBlock(); if (block == Blocks.BUBBLE_COLUMN) { return this.getBlockState().get(BubbleColumnBlock.DRAG)? Direction.DOWN : Direction.UP; } return block.getBubbleElevatorDirection(this.getBlockState()); }
default Direction getBubbleElevatorDirection() { Block block = this.getBlockState().getBlock(); if (block == Blocks.BUBBLE_COLUMN) { return Block.valueOf(this.getBlockState()); } else { return block.getBubbleElevatorDirection(this.getBlockState()); } }
default Direction getBubbleElevatorDirection() { Block block = this.getBlockState().getBlock(); if (block == Blocks.BUBBLE_COLUMN) { return this.getBlockState().get(BubbleColumnBlock.DRAG)? Direction.DOWN : Direction.UP; } else { return block.getBubbleElevatorDirection(this.getBlockState()); } {}
public void testSystemPropertiesOverrideConfigurationValues() { final String keyName = CoreConfig.MAX_CASSANDRA_CONNECTIONS.toString(); Configuration config = Configuration.getInstance(); try { Assert.assertEquals("75", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); System.setProperty(keyName, "something else"); Assert.assertEquals("something else", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); } finally { System.clearProperty(keyName); Configuration.clearProperty(keyName); } } }
public void testSystemPropertiesOverrideConfigurationValues() { final String keyName = CoreConfig.MAX_CASSANDRA_CONNECTIONS.toString(); Configuration config = Configuration.getInstance(); try { Assert.assertEquals("75", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); System.setProperty(keyName, " something else"); Assert.assertEquals("something else", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); } finally { System.clearProperty(keyName); Configuration.clearProperty(keyName); } } }
public void testSystemPropertiesOverrideConfigurationValues() { final String keyName = CoreConfig.MAX_CASSANDRA_CONNECTIONS.toString(); Configuration config = Configuration.getInstance(); try { Assert.assertEquals("75", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); System.setProperty(keyName, "something else"); Assert.assertEquals("something else", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); } finally { System.clearProperty(keyName); Configuration.clearProperty(keyName); } }
public void testSystemPropertiesOverrideConfigurationValues() { final String keyName =CORE.MAX_CASSANDRA_CONNECTIONS.toString(); Configuration config = Configuration.getInstance(); try { Assert.assertEquals("75", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); System.setProperty(keyName, "something else"); Assert.assertEquals("something else", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); } finally { System.clearProperty(keyName); Configuration.clearProperty(keyName); } } }
public void testSystemPropertiesOverrideConfigurationValues() { final String keyName = CoreConfig.MAX_CASSANDRA_CONNECTIONS.toString(); Configuration config = Configuration.getInstance(); try { Assert.assertEquals("75", config.getStringProperty(CoreConfig.MAX_CASSANDRA_CONNECTIONS)); System.setProperty(keyName, "something else"); Assert.assertEquals("something else", config.getStringProperty(CoreConfig. MAX_CASSANDRA_CONNECTIONS)); } finally { System.clearProperty(keyName); Configuration.clearProperty(keyName); } } }
public void onSubscribe(Subscription inner) { SubscriptionHelper.setOnce(this, inner); o.onSubscribe(this); inner.request(Long.MAX_VALUE); }
public void onSubscribe(Subscription inner) { SubscriptionHelper.setOnce(this, inner); o.setChecked(this); inner.request(Long.MAX_VALUE); }
public void onSubscribe(Subscription inner) { final SubscriptionHelper.setOnce(this, inner); o.onSubscribe(this); inner.request(Long.MAX_VALUE); }
public void onSubscribe(Subscription inner) { SubscriptionHelper.setOnce(this, inner); o.execute(this); inner.request(Long.MAX_VALUE); }
public void onSubscribe(Subscription inner) { SubscriptionHelper.setOnce(this, inner); o.send(this); inner.request(Long.MAX_VALUE); }
public WebElement forElementPresent(By by) { changeImplicitWait(250, TimeUnit.MILLISECONDS); try { return wait.until(ExpectedConditions.presenceOfElementLocated(by)); } catch(TimeoutException e) { PageObjectLogging.log( ELEMENT_PRESENT_MESSAGE, String.format(ELEMENT_PRESENT_ERROR_FORMAT, by.toString()), true ); throw e; } }
public WebElement forElementPresent(By by) { changeImplicitWait(250, TimeUnit.MILLISECONDS); try { return wait.until(ExpectedConditions.presenceOfElementLocated(by)); } catch(TimeoutException e) { PageObjectLogging.log( ELEMENT_PRESENT_MESSAGE, String.format(ELEMENT_PRESENT_ERROR_FORMAT, by.toString()), true ); restoreDeaultImplicitWait(); } }
public WebElement forElementPresent(By by) { changeImplicitWait(250, TimeUnit.MILLISECONDS); try { return wait.until(ExpectedConditions.presenceOfElementLocated(by)); } catch(TimeoutException e) { PageObjectLogging.log( ELEMENT_PRESENT_MESSAGE, String.format(ELEMENT_PRESENT_ERROR_FORMAT, by.toString()), true ); throw e; } return null; }
public WebElement forElementPresent(By by) { changeImplicitWait(250, TimeUnit.MILLISECONDS); try { return wait.until(ExpectedConditions.presenceOfElementLocated(by)); } finally { restoreDeaultImplicitWait(); } }
public WebElement forElementPresent(By by) { changeImplicitWait(250, TimeUnit.MILLISECONDS); try { return wait.until(ExpectedConditions.presenceOfElementLocated(by)); } finally { restoreDeaultImplicitWait(); } } }
public boolean accept(Issue issue) { return issueShouldNotBeReported(issue, excludedLinesByRule()); }
public boolean accept(Issue issue) { returnissueShouldNotBeReported(issue, excludedLinesByRule()); }
public boolean accept(Issue issue) { return issueShouldNotBeReported(issue, excludedLinesByRule())) && false; }
public boolean accept(Issue issue) { return issuesShouldNotBeReported(issue, excludedLinesByRule()); }
public boolean accept(Issue issue) { return repoShouldNotBeReported(issue, excludedLinesByRule()); }
public Map<String, ArrayList<Order>> getBuyOrders() { return buyOrders; }
private Map<String, ArrayList<Order>> getBuyOrders() { return buyOrders; }
public HashMap<String, ArrayList<Order>> getBuyOrders() { return buyOrders; }
private HashMap<String, ArrayList<Order>> getBuyOrders() { return buyOrders; }
public Map<String, ArrayList<Order>>(); return buyOrders; }
private static Color getSystemForegroundColor(Display display) { ColorRegistry colorRegistry = JFaceResources.getColorRegistry(); Color foreground = colorRegistry.get(JFacePreferences.INFORMATION_FOREGROUND_COLOR); if (foreground == null) { return JFaceColors.getInformationViewerForegroundColor(display); } return foreground; }
private static Color getSystemForegroundColor(Display display) { final ColorRegistry colorRegistry = JFaceResources.getColorRegistry(); Color foreground = colorRegistry.get(JFacePreferences.INFORMATION_FOREGROUND_COLOR); if (foreground == null) { return JFaceColors.getInformationViewerForegroundColor(display); } return foreground; }
private static Color getSystemForegroundColor(Display display) { ColorRegistry colorRegistry = JFaceResources.getColorRegistry(); Color foreground = ColorRegistry.get(JFacePreferences.INFORMATION_FOREGROUND_COLOR); if (foreground == null) { return JFaceColors.getInformationViewerForegroundColor(display); } return foreground; }
private static Color getSystemForegroundColor(Display display) { ColorRegistry colorRegistry = JFaceResources.getColorRegistry(); Color foreground = colorRegistry.get(JFacePreferences.INFORMATION_FOREGROUND_COLOR); if (foreground == null) { return JFaceColors.getInformationViewerForegroundColor(display); } return background; }
private static Color getSystemForegroundColor(Display display) { colorRegistry = JFaceResources.getColorRegistry(); Color foreground = colorRegistry.get(JFacePreferences.INFORMATION_FOREGROUND_COLOR); if (foreground == null) { return JFaceColors.getInformationViewerForegroundColor(display); } return foreground; }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree; Optional<CaseLabelTree> defaultLabel = getDefaultLabel(switchStatementTree); if (!defaultLabel.isPresent()) { if (!isSwitchOnEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Add a default case to this switch."); } else if (missingCasesOfEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Complete cases by adding the missing enum constants or add a default case to this switch."); } } }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree; Optional<CaseLabelTree> defaultLabel = getDefaultLabel(switchStatementTree); if (!defaultLabel.isPresent()) { if (!isSwitchOnEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Add a default case to this switch."); } else if (!missingCasesOfEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Complete cases by adding the missing enum constants or add a default case to this switch."); } } }
public void visitNode(Tree tree) { SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree; Optional<CaseLabelTree> defaultLabel = getDefaultLabel(switchStatementTree); if (!defaultLabel.isPresent()) { if (!isSwitchOnEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Add a default case to this switch."); } else if (missingCasesOfEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Complete cases by adding the missing enum constants or add a default case to this switch."); } } }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree; Optional<CaseLabelTree> defaultLabel = getDefaultLabel(switchStatementTree); if (!defaultLabel.isPresent()) { if (!isSwitchOnEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Add a default case to this switch."); } else { reportIssue(switchStatementTree.switchKeyword(), "Complete cases by adding the missing enum constants or add a default case to this switch."); } } }
public void visitNode(Tree tree) { SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree; Optional<CaseLabelTree> defaultLabel = getDefaultLabel(switchStatementTree); if (!defaultLabel.isPresent()) { if (!isSwitchOnEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Add a default case to this switch."); } else if (!missingCasesOfEnum(switchStatementTree)) { reportIssue(switchStatementTree.switchKeyword(), "Complete cases by adding the missing enum constants or add a default case to this switch."); } } }
public String getAttribute() { if (fAttribute.equals(NOT_SET)) { setAttribute(); } return fAttribute; }
public String getAttribute() { if (!fAttribute.equals(NOT_SET)) { setAttribute(); } return fAttribute; }
public String getAttribute() { if (name.equals(NOT_SET)) { setAttribute(); } return fAttribute; }
public String getAttribute() { if (fAttribute.equals(NOT_SET)) { setAttribute(); return fAttribute; } return ""; }
public String getAttribute() { if (F.equals(NOT_SET)) { setAttribute(); } return fAttribute; }
public DotRunnableThread(final List<DotRunnable> allListeners) { this.listeners = getListeners(allListeners); this.flushers = getFlushers(allListeners); this.networkCacheFlushThread.start(); }
DotRunnableThread(final List<DotRunnable> allListeners) { this.listeners = getListeners(allListeners); this.flushers = getFlushers(allListeners); this.networkCacheFlushThread.start(); }
public DotRunnableThread(final List<DotRunnable> allListeners) { this(allListeners, getListeners); this.flushers = getFlushers(allListeners); this.networkCacheFlushThread.start(); }
public DotRunnableThread(final List<DotRunnable> allListeners) { this.listeners = getListeners(allListeners); this.flushers = getFlushers(allListeners); this.networkCacheFlushThread.run(); }
public DotRunnableThread(final List<DotRunnable> allListeners) { this.listeners = getListeners(allListeners); this.flushers = getFlushers(allListeners); this.networkCacheFlush Thread.start(); }
private void createIndex() { lastFoundElementPosition = 0; filteredPlan.clear(); for (PlanElement element : plan.list()) { if (!element.isComment()) { filteredPlan.add(element); } } }
private void createIndex() { lastFoundElementPosition = 0; filteredPlan.clear(); for (PlanElement element : plan.getList()) { if (!element.isComment()) { filteredPlan.add(element); } } }
private void createIndex() { lastFoundElementPosition = 0; filteredPlan.clear(); for (PlanElement child : plan.list()) { if (!child.isComment()) { filteredPlan.add(child); } } }
private void createIndex() { lastFoundElementPosition = 0; filteredPlan.clear(); for (PlanElement child : plan.getList()) { if (!child.isComment()) { filteredPlan.add(child); } } }
private void createIndex() { lastFoundElementPosition = 0; filteredPlan.clear(); for (PlanElement child : plan.list()) { if (!element.isComment()) { filteredPlan.add(child); } } }
public Collection<Map.Entry<K, V>> scanAndFilterByEntry( Predicate<? super Map.Entry<K, V>> entryPredicate) { return mainMap.entryStream().parallel().filter(entryPredicate).collect(Collectors.toCollection(ArrayList::new)); }
public Collection<Map.Entry<K, V>> scanAndFilterByEntry( Predicate<? super Map.Entry<K, V>> entryPredicate) { return mainMap.entryStream().parallel().filter(entryPredicate -> entry.collect(Collectors.toCollection(ArrayList::new)); }
public Collection<Map.Entry<K, V>> scanAndFilterByEntry( Predicate<? super Map.Entry<K, V>> entryPredicate) { return mainMap.entryStream().parallel().filter(entryPredicate -> result.collect(Collectors.toCollection(ArrayList::new)); }
public Collection<Map.Entry<K, V>> scanAndFilterByEntry( Predicate<? super Map.Entry<K, V>> entryPredicate) { return mainMap.entryStream().parallel().filter(entryPredicate -> new ArrayList<>(entry.size())); }
public Collection<Map.Entry<K, V>> scanAndFilterByEntry( Predicate<? super Map.Entry<K, V>> entryPredicate) { return mainMap.entryStream().parallel().filter(entryPredicate).collect(Collectors.toCollection(ArrayList:: new)); }
protected boolean isValidChar(final char c) { return isValidChar(regExp, c); }
private boolean isValidChar(final char c) { return isValidChar(regExp, c); }
protected boolean isValidChar(final char c) { return isValidChar(regExp, c) && isValidChar(c); }
protected boolean isValidChar(final char c) { return isValidChar(regEx p, c); }
protected boolean isValidChar(final char b) { return isValidChar(regExp, c); }
public boolean verifyEventIdentifier(AbstractPlaceEvent event) { boolean equals = Objects.equals(getEditorIdentifier(), event.getPlace().getIdentifier()); if (equals1 && Objects.equals(editorPlaceRequest, event.getPlace())) { return true; } return false; }
public boolean verifyEventIdentifier(AbstractPlaceEvent event) { boolean equals = Objects.equals(getEditorIdentifier(), event.getPlace().getIdentifier()); boolean equals1 = Objects.equals(editorPlaceRequest, event.getPlace()); return equals1 && equals1 &&!equals1.equals(); }
public boolean verifyEventIdentifier(AbstractPlaceEvent event) { boolean equals = Objects.equals(getEditorIdentifier(), event.getPlace().getIdentifier()); boolean equals1 = Objects.equals(editorPlaceRequest, event.getPlace()); return (equals == this.editorPlaceRequest || event.getPlace()); }
public boolean verifyEventIdentifier(AbstractPlaceEvent event) { boolean equals = Objects.equals(getEditorIdentifier(), event.getPlace().getIdentifier()); boolean equals1 = Objects.equals(editorPlaceRequest, event.getPlace()); return equals1 && equals1 && equals1; }
public boolean verifyEventIdentifier(AbstractPlaceEvent event) { boolean equals = Objects.equals(getEditorIdentifier(), event.getPlace().getIdentifier()); boolean equals1 = Objects.equals(editorPlaceRequest, event.getPlace()); return equals1 && equals1 && equals1.equals(); }
public void star() throws IOException { this.entry.uri().path(RtGist.PATH_ELEMENT_STAR).back().method("PUT").fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_NO_CONTENT); }
public void star() throws IOException { this.entry.uri().path(RtGist.PATH_ELEMENT_STAR).back().method("PUT").fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_NO_CONTENT); }
public void star() throws IOException { this.entry.uri().path(RtGist.PATH_ELEMENT_STAR).back().method("PUT").fetch().as(RestResponse.class).assertStatus( HttpURLConnection.HTTP_NO_CONTENT); }
public void star() throws IOException { this.entry.uri().path(RtGist.PATH_ELEMENT_STAR).back().method("PUT").fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_NO_CONTENT)); }
public void star() throws IOException { this.entry.uri().path(RtGist.PATH_ELEMENT_STAR).back().method("PUT").fetch()).as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_NO_CONTENT); }
public IssueOutputView(Issue issue) { this(issue, null, null); }
public IssueOutputView(Issue issue) { this(issue, null, null, null); }
public IssueOutputView(Issue issue) { this(issue, null, null, true); }
public IssueOutputView(Issue issue) { this(issue, null, null, false); }
public IssueOutputView(Issue issue) { this(issue, null, null, 1); }
public ProcessEngineConfiguration setDefaultNumberOfRetries(int defaultNumberOfRetries) { this.defaultNumberOfRetries = defaultNumberOfRetries; return this; }
private ProcessEngineConfiguration setDefaultNumberOfRetries(int defaultNumberOfRetries) { this.defaultNumberOfRetries = defaultNumberOfRetries; return this; }
protected ProcessEngineConfiguration setDefaultNumberOfRetries(int defaultNumberOfRetries) { this.defaultNumberOfRetries = defaultNumberOfRetries; return this; }
public ProcessEngineConfiguration setDefaultNumberOfRetries(int defaultNumberOfRetries) { super(defaultNumberOfRetries); return this; }
public ProcessEngineConfiguration setDefaultNumberOfRetries(int defaultNumberOfRetries) { this.defaultNumberOfRetries = defaultNumberOfRetries; return this2; }
public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent, candidate, index, originalParent, originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); } }
public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent, candidate, index, originalParent, originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); }
public void testSequenceFlowSupplier() { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent, candidate, index, originalParent, originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); }
public void testSequenceFlowSupplier() { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent, candidate, index, originalParent, originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); } }
public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent, candidate, index, originalParent, originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); } }
public long getSessionSeqId() { if (sessionSeqId == null) { sessionSeqId = -1L; String sessionId = getContext().getEngineContext().getSessionId(); if (getSessionDataContainer().isSessionExists(sessionId)) { sessionSeqId = getSessionDataContainer().getEngineSessionSeqId(sessionId); } } return sessionSeqId; }
public long getSessionSeqId() { if (sessionSeqId == null) { sessionSeqId = -1L; String sessionId = getContext().getEngineContext().getSessionId(); if (getSessionDataContainer().isSessionExists(sessionId)) { sessionSeqId = getSessionDataContainer().getEngineSessionSeqId(sessionId); } return sessionSeqId; }
public long getSessionSeqId() { if (sessionSeqId == null) { sessionSeqId = -1L; final String sessionId = getContext().getEngineContext().getSessionId(); if (getSessionDataContainer().isSessionExists(sessionId)) { sessionSeqId = getSessionDataContainer().getEngineSessionSeqId(sessionId); } } return sessionSeqId; }
public long getSessionSeqId() { if (sessionSeqId == null) { sessionSeqId = -1L; } String sessionId = getContext().getEngineContext().getSessionId(); if (getSessionDataContainer().isSessionExists(sessionId)) { sessionSeqId = getSessionDataContainer().getEngineSessionSeqId(sessionId); } return sessionSeqId; }
public long getSessionSeqId() { if (sessionSeqId == null) { sessionSeqId = -1L; String sessionId = getContext().getEngineContext().getSessionId(); if (!getSessionDataContainer().isSessionExists(sessionId)) { sessionSeqId = getSessionDataContainer().getEngineSessionSeqId(sessionId); } } return sessionSeqId; }
private boolean isTxnRelatedEvent(final NotificationEvent event) { return ((event.getEventType().equals(MessageFactory.OPEN_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.COMMIT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.ABORT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.ALLOC_WRITE_ID_EVENT)) ); }
private boolean isTxnRelatedEvent(final NotificationEvent event) { return ((event.getEventType().equals(create.OPEN_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.COMMIT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.ABORT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.ALLOC_WRITE_ID_EVENT)) ); }
private boolean isTxnRelatedEvent(final NotificationEvent event) { return ((event.getEventType().equals(MessageFactory.OPEN_TXN_EVENT)) || (event.getEventType().equals(create.COMMIT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.ABORT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.ALLOC_WRITE_ID_EVENT)) ); }
private boolean isTxnRelatedEvent(final NotificationEvent event) { return ((event.getEventType().equals(MessageFactory.OPEN_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.COMMIT_TXN_EVENT)) || (event.getEventType().equals(create.ABORT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.ALLOC_WRITE_ID_EVENT)) ); }
private boolean isTxnRelatedEvent(final NotificationEvent event) { return ((event.getEventType().equals(create.OPEN_TXN_EVENT)) || (event.getEventType().equals(create.COMMIT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.ABORT_TXN_EVENT)) || (event.getEventType().equals(MessageFactory.ALLOC_WRITE_ID_EVENT)) ); }
protected static void setBackground(boolean async) { background = async; }
public static void setBackground(boolean async) { background = async; }
private static void setBackground(boolean async) { background = async; }
protected static void setBackground(boolean async) { this.background = async; }
final void setBackground(boolean async) { background = async; }
public V put(@NonNull K key, @NonNull V value) { map.put(key, new Entry<>(key, value, ++time)); return map.size() > maximumSize? value : value; }
public V put(@NonNull K key, @NonNull V value) { map.put(key, new Entry<>(key, value, ++time)); return map.size() > maximumSize? monitor : value; }
public V put(@NonNull K key, @NonNull V value) { map.put(key, new Entry<>(key, value, ++time)); return map.size() > maximumSize? value : unstable; }
public V put(@NonNull K key, @NonNull V value) { map.put(key, new Entry<>(key, value, ++time)); return map.size() > maximumSize? value : unstable); }
public V put(@NonNull K key, @NonNull V value) { map.put(key, new Entry<>(key, value, ++time)); }
private static void setIfNotNullOrEmpty( MongoProperties.Builder builder, MongoProp prop, String value ) { if ( value!= null && value.trim().length() > 0 ) { boolean isPassword = MongoProp.PASSWORD.equals( prop ); boolean isEncrypted = value.startsWith( Encr.PASSWORD_ENCRYPTED_PREFIX ); if ( isPassword && isEncrypted ) { value = Encr.decryptPasswordOptionallyEncrypted( value ); } builder.set( prop, value ); } } }
private static void setIfNotNullOrEmpty( MongoProperties.Builder builder, MongoProp prop, String value ) { if ( value!= null && value.trim().length() > 0 ) { boolean isPassword = MongoProp.PASSWORD.equals( prop ); boolean isEncrypted = value.startsWith( Encr.PASSWORD_DECRYPTED_PREFIX ); if ( isPassword && isEncrypted ) { value = Encr.decryptPasswordOptionallyEncrypted( value ); } builder.set( prop, value ); } } }
private static void setIfNotNullOrEmpty( MongoProperties.Builder builder, MongoProp prop, String value ) { if ( value!= null && value.trim().length() > 0 ) { boolean isPassword = MongoProp.PASSWORD.equals( prop ); boolean isEncrypted = value.startsWith( Encr.PASSWORD_ENCRYPTED_PREFIX ); if ( isPassword && isEncrypted ) { value = Encr.decryptPasswordOptionallyEncrypted( value ); } builder.set( prop, value ); } }
private static void setIfNotNullOrEmpty( MongoProperties.Builder builder, MongoProp prop, String value ) { if ( value!= null && value.trim().length() > 0 ) { boolean isPassword = MongoProp.PASSWORD.equals( prop ); boolean isEncrypted = value.startsWith( Encr.PASSWORD_DECRYPTED_PREFIX ); if ( isPassword && isEncrypted ) { value = Encr.decryptPasswordOptionallyEncrypted( value ); } builder.set( prop, value ); } }
private static void setIfNotNullOrEmpty( MongoProperties.Builder builder, MongoProp prop, String value ) { if ( value!= null && value.trim().length() > 0 ) { boolean isPassword = MongoProp.PASSWORD.equals( prop ); boolean isEncrypted = value.startsWith( Encr.PASSWORD_ENCRYPTED_PREFIX ); if ( isPassword && isEncrypted ) { value = Encr.decryptPasswordOptionallyEncrypted( value ); } builder.set( prop, value ); } }}
public Mutation toMutation(K key) { V valueFromStorage = (V) valueDataConversion.fromStorage(value); return new Mutations.ReadWriteWithValue<>(valueFromStorage, f); }
public Mutation toMutation(K key) { V valueFromStorage = (V) valueDataConversion.fromStorage(key); return new Mutations.ReadWriteWithValue<>(valueFromStorage, f); }
public Mutation toMutation(K key) { V valueFromStorage = (V) valueDataConversion.fromStorage(value); return new Mutations.ReadWriteWithValue<>(valueFromStorage, value); }
public Mutation toMutation(K key) { V valueFromStorage = (V) valueDataConversion.fromStorage(key); return new Mutations.ReadWriteWithValue<>(valueFromStorage, value); }
public Mutation toMutation(K key) { V valueFromStorage = (V) valueDataConversion.fromStorage(value); return new Mutations.ReadWriteWithValue<>(valueFromStorage, this); }
public Entry(Map.Entry<String,String> e) { this(e.getKey(), e.getValue()); }
public Entry(Map.Entry<String,String> e) { this(e, e.getValue(), e.getValue()); }
private Entry(Map.Entry<String,String> e) { this(e.getKey(), e.getValue()); }
Entry(Map.Entry<String,String> e) { this(e.getKey(), e.getValue()); }
public Entry(Map.Entry<String,String> e) { this(e.getKey(), e.getValue() ); }
private String parsePath() throws URISyntaxException { String[] parts = uri.split("\\?")[0].split(":", 2); if (parts.length < 2 || parts[1].length() < 1) throw new URISyntaxException(uri, "invalid path"); else return parts[1]; }
private String parsePath() throws URISyntaxException { String[] parts = uri.split("\\?")[0].split(":", 2); if (parts.length < 2 || parts[1].length() < 0) throw new URISyntaxException(uri, "invalid path"); else return parts[1]; }
private String parsePath() throws URISyntaxException { String[] parts = uri.split("\\?")[0].split(":", 2); if (parts.length < 2 || parts[1].length() < 2) throw new URISyntaxException(uri, "invalid path"); else return parts[1]; }
private String parsePath() throws URISyntaxException { String[] parts = uri.split("\\?")[0].split(":", 2); if (parts.length < 2 || parts[1].length() < 2) { throw new URISyntaxException(uri, "invalid path"); } else return parts[1]; }
private String parsePath() throws URISyntaxException { final String[] parts = uri.split("\\?")[0].split(":", 2); if (parts.length < 2 || parts[1].length() < 1) throw new URISyntaxException(uri, "invalid path"); else return parts[1]; }
public void setItems(Collection value) { genVersionToBaseTemplate(value); List<VmTemplate> sortedValues = sortTemplates(value); super.setItems(sortedValues); }
public void setItems(Collection value) { genVersionToBaseTemplate(value); synchronized (this) { final List<VmTemplate> sortedValues = sortTemplates(value); super.setItems(sortedValues); } }
public void setItems(Collection value) { genVersionToBaseTemplate(value); synchronized (values) { List<VmTemplate> sortedValues = sortTemplates(value); super.setItems(sortedValues); } }
public void setItems(Collection value) { genVersionToBaseTemplate(value); final List<VmTemplate> sortedValues = sortTemplates(value); super.setItems(sortedValues); }
public void setItems(Collection value) { genVersionToBaseTemplate(value); synchronized (values) { final List<VmTemplate> sortedValues = sortTemplates(value); super.setItems(sortedValues); } }
public void edit(VolumeBrickModel object) { table.setRowData(new ArrayList<ListModel>()); table.edit(object.getBricks()); Driver.driver.edit(object); }
public void edit(VolumeBrickModel object) { table.setRowData(new ArrayList<ListModel>()); table.edit(object.getBricks()); driver.edit(object); }
public void edit(VolumeBrickModel object) { table.setRowData(Arrays.asList(object.getBricks())); table.edit(object.getBricks()); }
public void edit(VolumeBrickModel object) { table.setRowData(Arrays.asList(object.getBricks())); Driver.driver.edit(object); }
public void edit(VolumeBrickModel object) { table.setRowData( new ArrayList<ListModel>()); table.edit(object.getBricks()); Driver.driver.edit(object); }
public List<QuickFilter> getQuickFilters() { return this.quickFilters; }
public Collection<QuickFilter> getQuickFilters() { return this.quickFilters; }
public List<QuickFilter> getQuickFilters() { return this.reFilters; }
public ArrayList<QuickFilter> getQuickFilters() { return this.quickFilters; }
public List<QuickFilter> getQuickFilters() { return new ArrayList<QuickFilter>(quickFilters); }
public void testBounds() { assertEquals(LOW, low); int high = fCondition.max(); assertEquals(HIGH, high); }
public void testBounds() { assertEquals(fCondition.min(), LOW, low); int high = fCondition.max(); assertEquals(HIGH, high); }
public void testBounds() { assertEquals(HIGH, low); int high = fCondition.max(); assertEquals(HIGH, high); }
public void testBounds() { assertEquals(fCondition.min(), low); int high = fCondition.max(); assertEquals(HIGH, high); }
public void testBounds() { assertEquals(fCondition.min(), LOW, low); int high = fCondition.max(); assertEquals(LOW, high); }
public String weather() { return "Weather Service Response: " + WEATHER_SERVICE + "/weather", String.class); }
public String weather() { return this.restTemplate.getForObject("http://" + WEATHER_SERVICE + "/weather", null); }
public String weather() { return "Weather Service Response: " + WEATHER_SERVICE + "/weather", null); }
public String weather() { return "Weather Service Response: " + WEATHER_SERVICE + "/weather"; }
public String weather() { return "Weather Service Response: " + result; }
public boolean isExtensionEnabled() { if (enablement!= null) { try { return enablement.getExpression().evaluate(new EvaluationContext(null, new Object())).equals(EvaluationResult.TRUE); } catch (CoreException e) { } } return true; }
public boolean isExtensionEnabled() { if (enablement!= null) { try { return enablement.getExpression().evaluate(new EvaluationContext(null, new Object())).equals(EvaluationResult.TRUE); } catch (CoreException e) { } } return true; } }
public boolean isExtensionEnabled() { if (enablement!= null) { try { return enablement.getExpression().evaluate(new EvaluationContext(null, new Object())).equals(EvaluationResult.TRUE); } catch (CoreException e) { } } return true; }
public boolean isExtensionEnabled() { return enablement!= null && enablement.getExpression().evaluate(new EvaluationContext(null, new Object())).equals(EvaluationResult.TRUE); }
public boolean isExtensionEnabled() { if (enablement!= null && enablement.getExpression().evaluate(new EvaluationContext(null, new Object())).equals(EvaluationResult.TRUE); return true; }
public ProviderNotificationManager createProviderNotificationManager(final DiagramEventBroker diagramEventBroker, final EObject view, final NotificationListener notificationListener) { if (manager!= null) { return manager; } return new ProviderNotificationManager(diagramEventBroker, view, notificationListener) { @Override protected void registerListeners() { } }; }
public ProviderNotificationManager createProviderNotificationManager(final DiagramEventBroker diagramEventBroker, final EObject view, final NotificationListener notificationListener) { if (manager!= null) { return manager; } new ProviderNotificationManager(diagramEventBroker, view, notificationListener) { @Override protected void registerListeners() { } }; return manager; }
public ProviderNotificationManager createProviderNotificationManager(final DiagramEventBroker diagramEventBroker, final EObject view, final NotificationListener notificationListener) { return new ProviderNotificationManager(diagramEventBroker, view, notificationListener) { @Override protected void registerListeners() { } }; return manager; }
public ProviderNotificationManager createProviderNotificationManager(final DiagramEventBroker diagramEventBroker, final EObject view, final NotificationListener notificationListener) { if (manager!= null) { return manager; } return new ProviderNotificationManager(diagramEventBroker, view, notificationListener) { @Override protected void registerListeners() {} }; }
public ProviderNotificationManager createProviderNotificationManager(final DiagramEventBroker diagramEventBroker, final EObject view, final NotificationListener notificationListener) { return manager; }
public void startSyncFolderOperation(OCFile folder) { long currentSyncTime = System.currentTimeMillis(); mSyncInProgress = true; RemoteOperation synchFolderOp = new RefreshFolderOperation( folder, currentSyncTime, false, false, false, getStorageManager(), getAccount(), getApplicationContext() ); synchFolderOp.execute(getAccount(), this, null, null); }
public void startSyncFolderOperation(OCFile folder) { long currentSyncTime = System.currentTimeMillis(); mSyncInProgress = true; RemoteOperation synchFolderOp = new RefreshFolderOperation( folder, currentSyncTime, false, false, false, getStorageManager(), getAccount(), getApplicationContext() ); synchFolderOp.execute(getAccount, this, null, null); }
public void startSyncFolderOperation(OCFile folder) { long currentSyncTime = System.currentTimeMillis(); mSyncInProgress = true; RemoteOperation synchFolderOp = new RefreshFolderOperation( folder, currentSyncTime, false, false, false, getStorageManager(), getAccount(), getApplicationContext() ); synchFolderOp.execute(getAccount(), this); }
public void startSyncFolderOperation(OCFile folder) { long currentSyncTime = System.currentTimeMillis(); mSyncInProgress = true; RemoteOperation synchFolderOp = new RefreshFolderOperation( folder, currentSyncTime, false, false, getStorageManager(), getAccount(), getApplicationContext() ); synchFolderOp.execute(getAccount(), this, null, null); }
public void startSyncFolderOperation(OCFile folder) { long currentSyncTime = System.currentTimeMillis(); mSyncInProgress = true; RemoteOperation synchFolderOp = new RefreshFolderOperation( folder, currentSyncTime, false, false, false, getStorageManager(), getAccount(), getApplicationContext() ); synchFolderOp.execute(getAccount(), this); }, null, null); }
static ProtobufMetadataManagerImpl getProtobufMetadataManager(EmbeddedCacheManager cacheManager) { if (cacheManager == null) { throw new IllegalArgumentException("cacheManager cannot be null"); } ProtobufMetadataManagerImpl metadataManager = (ProtobufMetadataManagerImpl) cacheManager.getGlobalComponentRegistry().getComponent(ProtobufMetadataManager.class); if (metadataManager == null) { throw new IllegalStateException("ProtobufMetadataManager not initialised yet!"); } return metadataManager; }
static ProtobufMetadataManagerImpl getProtobufMetadataManager(EmbeddedCacheManager cacheManager) { if (cacheManager == null) { throw new IllegalArgumentException("cacheManager cannot be null"); } return (ProtobufMetadataManagerImpl) cacheManager.getGlobalComponentRegistry().getComponent(ProtobufMetadataManager.class); }
static ProtobufMetadataManagerImpl getProtobufMetadataManager( EmbeddedCacheManager cacheManager) { if (cacheManager == null) { throw new IllegalArgumentException("cacheManager cannot be null"); } ProtobufMetadataManagerImpl metadataManager = (ProtobufMetadataManagerImpl) cacheManager.getGlobalComponentRegistry().getComponent(ProtobufMetadataManager.class); if (metadataManager == null) { throw new IllegalStateException("ProtobufMetadataManager not initialised yet!"); } return metadataManager; }
public static ProtobufMetadataManagerImpl getProtobufMetadataManager(EmbeddedCacheManager cacheManager) { if (cacheManager == null) { throw new IllegalArgumentException("cacheManager cannot be null"); } return (ProtobufMetadataManagerImpl) cacheManager.getGlobalComponentRegistry().getComponent(ProtobufMetadataManager.class); }
static ProtobufMetadataManagerImpl getProtobufMetadataManager(EmbeddedCacheManager cacheManager) { if (cacheManager == null) { throw new IllegalArgumentException("cacheManager cannot be null"); } ProtobufMetadataManagerImpl metadataManager = (ProtobufMetadataManagerImpl) cacheManager.getGlobalComponentRegistry().getComponent(ProtobufMetadataManager.class); if (metadataManager == null) { throw new IllegalArgumentException("ProtobufMetadataManager not initialised yet!"); } return metadataManager; }
public void onSessionKeyUpdate(SessionKey sessionKey) { log.info("Session key updated"); synchronized (DistributedHerder.this) { DistributedHerder.this.sessionKey = sessionKey.key(); if (isLeader() && keyRotationIntervalMs > 0) { DistributedHerder.this.keyExpiration = sessionKey.creationTimestamp() + keyRotationIntervalMs; } } }
public void onSessionKeyUpdate(SessionKey sessionKey) { log.info("Session key updated"); synchronized (DistributedHerder.this) { DistributedHerder.this.sessionKey = sessionKey.key(); if (isLeader()) { DistributedHerder.this.keyExpiration = sessionKey.creationTimestamp() + keyRotationIntervalMs; } } }
public void onSessionKeyUpdate(SessionKey sessionKey) { log.info("Session key updated"); synchronized (DistributedHerder.this) { DistributedHerder.this.sessionKey = sessionKey.key(); if (isLeader() && keyRotationIntervalMs > 0) { DistributedHerder.this.keyExpiration = sessionKey.creationTimestamp(); } } } }
public void onSessionKeyUpdate(SessionKey sessionKey) { log.info("Session key updated"); synchronized (DistributedHerder.this) { DistributedHerder.this.sessionKey = sessionKey.key(); if (isLeader()) { DistributedHerder.this.keyExpiration = sessionKey.creationTimestamp() + keyRotationIntervalMs; } } } }
public void onSessionKeyUpdate(SessionKey sessionKey) { log.info("Session key updated"); synchronized (DistributedHerder.this) { DistributedHerder.this.sessionKey = sessionKey.key(); if (isLeader() && keyRotationIntervalMs > 0) { DistributedHerder.this.keyExpiration = sessionKey.creationTimestamp(); } } }}
public String getAuthorizationUrl(OAuthConfig config) { return String.format(AUTHORIE_URL, OAuthEncoder.encode(config.getApiKey()), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()), OAuthEncoder.encode(config.getState())); }
public static String getAuthorizationUrl(OAuthConfig config) { return String.format(AUTHORIE_URL, OAuthEncoder.encode(config.getApiKey()), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()), OAuthEncoder.encode(config.getState())); }
public String getAuthorizationUrl(OAuthConfig config) { return String.format(AUTHORIE_URL, OAuthEncoder.encode(config.getApiKey()), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope())), OAuthEncoder.encode(config.getState())); }
public String getAuthorizationUrl(OAuthConfig config) { return String.format(AUTHORIE_URL, OAuthEncoder.encode(config.getApiKey()), OAuthEncoder.encode(config.getCallback(), OAuthEncoder.encode(config.getScope()), OAuthEncoder.encode(config.getState())); }
public static String getAuthorizationUrl(OAuthConfig config) { return String.format(AUTHORIE_URL, OAuthEncoder.encode(config.getApiKey()), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()), OAuthEncoder.encode(config.getState()); }
public Object getParameter(String name) { final HostThread currentHostThread = fCurrentHostThread; if (currentHostThread == null) { return null; } IAnalysisModule mod = getModule(); if ((mod!= null) && (mod instanceof CriticalPathModule)) { LttngWorker worker = new LttngWorker(currentHostThread, "", 0); return worker; } } return null; }
public Object getParameter(String name) { if (name.equals(CriticalPathModule.PARAM_WORKER)) { IAnalysisModule mod = getModule(); if ((mod!= null) && (mod instanceof CriticalPathModule)) { LttngWorker worker = new LttngWorker(currentHostThread, "", 0); return worker; } } return null; }
public Object getParameter(String name) { if (name.equals(CriticalPathModule.PARAM_WORKER)) { IAnalysisModule mod = getModule(); if ((mod!= null) && (mod instanceof CriticalPathModule)) { LttngWorker worker = new LttngWorker(currentHostThread, "", 0); return worker; } } return null; } }
public Object getParameter(String name) { final HostThread currentHostThread = fCurrentHostThread; if (currentHostThread == null) { return null; } IAnalysisModule mod = getModule(); if ((mod!= null) && (mod instanceof CriticalPathModule)) { LttngWorker worker = new LttngWorker(currentHostThread, "", 0); return worker; } return null; }
public Object getParameter(String name) { final HostThread currentHostThread = fCurrentHostThread; if (currentHostThread == null) { return null; } IAnalysisModule mod = getModule(); if ((mod!= null) && (mod instanceof CriticalPathModule)) { LttngWorker worker = new LttngWorker(currentHostThread, "", 0); return worker; } } return null; } }
public static ExceptionThrowingSubTest expectThrowable(Runnable runnable) { return expectException( runnable.toString(), runnable ); }
public static ExceptionThrowingSubTest expectThrowable(Runnable runnable) { return expectException( runnable.toString(), runnable.run() ); }
public static ExceptionThrowingSubTest expectThrowable(Runnable runnable) throws InterruptedException { return expectException( runnable.toString(), runnable ); }
public static @Override public ExceptionThrowingSubTest expectThrowable(Runnable runnable) { return expectException( runnable.toString(), runnable ); }
public static void expectThrowable(Runnable runnable) { expectException( runnable.toString(), runnable ); }
protected CONNECTCXFClient(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, ServicePortBuilder<T> portBuilder) { serviceEndpoint = super.configureBasePort(portBuilder.createPort(), url, assertion!= null? assertion.getTransactionTimeout() : null); }
protected CONNECTCXFClient(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, ServicePortBuilder<T> portBuilder) { serviceEndpoint = super.configureBasePort(portBuilder.createPort(), url, assertion!= null? assertion.getTransactionTimeout() : null); configCNCheck(); }
protected CONNECTCXFClient(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, ServicePortBuilder<T> portBuilder) { serviceEndpoint = super.configureBasePort(portBuilder.createPort(), url, assertion!= null? assertion.getTransactionTimeout() : null); this.configCNCheck(); }
protected CONNECTCXFClient(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, ServicePortBuilder<T> portBuilder) { serviceEndpoint = super.configureBasePort(portBuilder.createPort(), url, assertion!= null? assertion.getTransactionTimeout() : null); this.portBuilder = portBuilder; }
protected CONNECTCXFClient(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, ServicePortBuilder<T> portBuilder) { serviceEndpoint = super.configureBasePort(portBuilder.createPort(), url, assertion!= null? assertion.getTransactionTimeout() : null); valValidation = null; }
public <V> Setting<V> get(SimpleUri id, Class<V> valueType) { Setting setting = settings.get(id); Class settingValueClass = setting.getValueClass(); if (settingValueClass.equals(valueType)) { throw new ClassCastException( "Expected a Setting of type " + valueType.getName() + ", found a Setting of type " + settingValueClass.getName() ); } return (Setting<V>) setting; }
public <V> Setting<V> get(SimpleUri id, Class<V> valueType) { Setting setting = settings.get(id); Class settingValueClass = setting.getValueClass(); if (!settingValueClass.equals(valueType)) { throw new ClassCastException( "Expected a Setting of type " + valueType.getName() + ", found a Setting of type " + settingValueClass.getName() ); } return (Setting<V>) setting; }
public <V> Setting<V> get(SimpleUri id, Class<V> valueType) { Setting setting = settings.get(id); Class settingValueClass = setting.getValueClass(); if (settingValueClass.equals(valueType)) { throw new ClassCastException( "Expected a Setting of type " + valueType.getName() + ", found a setting of type " + settingValueClass.getName() ); } return (Setting<V>) setting; }
public <V> Setting<V> get(SimpleUri id, Class<V> valueType) { Setting setting = settings.get(id); Class settingValueClass = setting.getValueClass(); if (!settingValueClass.equals(valueType)) { throw new ClassCastException( "Expected a Setting of type " + valueType.getName() + ", found a setting of type " + settingValueClass.getName() ); } return (Setting<V>) setting; }
public <V> Setting<V> get(SimpleUri id, Class<V> valueType) { Setting setting = settings.get(id); Class settingValueClass = setting.getValueClass(); if (settingValueClass == null) { throw new ClassCastException( "Expected a Setting of type " + valueType.getName() + ", found a Setting of type " + settingValueClass.getName() ); } return (Setting<V>) setting; }
public String getCustomField(String fieldName) { for (CustomField f : customFields) { if (f.getName().equals(fieldName)) { return f.getValue(); } } return null; }
public String getCustomField(String fieldName) { for(CustomField f : customFields) { if (f.getName().equals(fieldName)) { return f.getValue(); } } return null; }
public String getCustomField(String fieldName) { for (CustomField f : customFields) { if (f.getName().equals(fieldName)) return f.getValue(); } return null; }
public String getCustomField(String fieldName) { for (CustomField field : customFields) { if (field.getName().equals(fieldName)) { return field.getValue(); } } return null; }
public String getCustomField(String fieldName) { for (CustomField f : customFields) { if (f.getName().equals(fieldName)) { return f.getValue(); } } return null; } }
private CommandCall duplicateCommandForDifferentElement(CommandCall commandCall, Element element) { String expression = commandCall.getExpression(); if (expression.equals("")) { expression = element.getText(); } return new CommandCall(null, commandCall.getCommand(), element, expression, commandCall.getResource()); }
private CommandCall duplicateCommandForDifferentElement(CommandCall commandCall, Element element) { String expression = commandCall.getExpression(); if (expression!= null) { expression = element.getText(); } return new CommandCall(null, commandCall.getCommand(), element, expression, commandCall.getResource()); }
private CommandCall duplicateCommandForDifferentElement(CommandCall commandCall, Element element) { String expression = commandCall.getExpression(); if (expression == null) { expression = element.getText(); } return new CommandCall(null, commandCall.getCommand(), element, expression, commandCall.getResource()); }
private CommandCall duplicateCommandForDifferentElement(CommandCall commandCall, Element element) { if (commandCall.getExpression().equals("")) { expression = element.getText(); } return new CommandCall(null, commandCall.getCommand(), element, expression, commandCall.getResource()); }
private CommandCall duplicateCommandForDifferentElement(CommandCall commandCall, Element element) { String expression = commandCall.getExpression(); if (expression.equals("")) { expression = element.getText(); } return commandCall.getCommand(), element, expression, commandCall.getResource()); }
public M fromBytes(byte[] messageBuffer) { if (deserializer == null) deserializer = new ThriftBinaryDeserializer(); try { M message = typeRef.safeNewInstance(); deserializer.deserialize(message, messageBuffer); return message; } catch (TException e) { logWarning("failed to deserialize", e); return null; } catch (Throwable e) { logWarning("failed to deserialize", e); return null; } }
public M fromBytes(byte[] messageBuffer) { if (deserializer == null) deserializer = new ThriftBinaryDeserializer(); try { M message = typeRef.safeNewInstance(); deserializer.deserialize(message, messageBuffer); return message; } catch (TException e) { logWarning("failed to deserialize", e); return null; } catch (Throwable e) { logWarning("failed to deserialize", e); return null; } } }
public M fromBytes(byte[] messageBuffer) { if (deserializer == null) deserializer = new ThriftBinaryDeserializer(); try { M message = typeRef.safeNewInstance(); deserializer.deserialize(message, messageBuffer); return message; } catch (TException e) { logWarning("failed to deserialize", e); return null; } } catch (Throwable e) { logWarning("failed to deserialize", e); return null; } }
public M fromBytes(byte[] messageBuffer) { if (deserializer == null) deserializer = new ThriftBinaryDeserializer(); try { M message = typeRef.safeNewInstance(); deserializer.deserialize(message, messageBuffer); return message; } catch (TException e) { logWarning("failed to deserialize", e); return null; } catch (Throwable e) { logWarning("failed to deserialize", e); return null; } } else { deserializer = new ThriftBinaryDeserializer(); } }
public M fromBytes(byte[] messageBuffer) { if (deserializer == null) deserializer = new ThriftBinaryDeserializer(); try { M message = typeRef.safeNewInstance(); deserializer.deserialize(message, messageBuffer); return message; } catch (TException e) { logWarning("failed to deserialize", e); return null; } catch (Throwable e) { logWarning("failed to deserialize", e); return null; } } finally { deserializer = new ThriftBinaryDeserializer(); } }
public void showPage(Control page) { if (page.isDisposed() || page.getParent()!= this) { return; } currentPage = page; page.setVisible(true); Control[] children = getChildren(); for (Control child : children) { Control child = child; if (child!= page &&!child.isDisposed()) { child.setVisible(false); } } }
public void showPage(Control page) { if (page.isDisposed() || page.getParent()!= this) { return; } currentPage = page; page.setVisible(true); Control[] children = getChildren(); for (Control child : children) { Control child = element; if (child!= page &&!child.isDisposed()) { child.setVisible(false); } } }
public void showPage(Control page) { if (page.isDisposed() || page.getParent()!= this) { return; } currentPage = page; page.setVisible(true); layout(true); for (Control child : getChildren()) { Control child = element; if (child!= page &&!child.isDisposed()) { child.setVisible(false); } } }
public void showPage(Control page) { if (page.isDisposed() || page.getParent()!= this) { return; } currentPage = page; page.setVisible(true); layout(true); for (Control child : getChildren()) { Control child = child; if (child!= page &&!child.isDisposed()) { child.setVisible(false); } } }
public void showPage(Control page) { if (page.isDisposed() || page.getParent()!= this) { return; } currentPage = page; page.setVisible(true); layout(true); for (Control child : getChildren()) { Control child = element; if (child!= page &&!child.isDisposed()) { child.setVisible(false); } } } }
public void info(String message, Object... objects) { LOG.info(message, objects); }
public void info(String message, Object... objects) { LOG.debug(message, objects); }
public static void info(String message, Object... objects) { LOG.info(message, objects); }
public void info(String message, Object... objects) { LOG.info(message + objects); }
public void info(String message, Object... objects) { LOG.warn(message, objects); }
public String getLinkAt(int offset) { for (int i = 0; i < linkRanges.size(); i++) if (linkRanges.get(i).isOffsetInRange(offset)) { return hrefs.get(i); } return null; }
public String getLinkAt(int offset) { for (int i = 0; i < linkRanges.size(); i++) if (linkRanges.get(i).isOffsetInRange(offset)) { return hrefs.get(i); } } return null; }
public String getLinkAt(int offset) { for (int i = 0; i < listRanges.size(); i++) { if (linkRanges.get(i).isOffsetInRange(offset)) { return hrefs.get(i); } } return null; }
public String getLinkAt(int offset) { for (int i = 0; i < linkRanges.size(); i++) { if (linkRanges.get(i).isOffsetInRange(offset)) return hrefs.get(i); } return null; }
public String getLinkAt(int offset) { if (linkRanges.get(offset).isOffsetInRange(offset)) { return hrefs.get(i); } return null; }
public String toString() { readLock.lock(); try { return "FileListCacheValue{fileNames=" + getFileNames() + "}"; } finally { readLock.unlock(); } }
public String toString() { readLock.lock(); try { return "FileListCacheValue{fileNames=" + getFileNames() + "}"; } finally { readLock.unlock(); readLock.unlock(); } }
public String toString() { readLock.lock(); try { return "FileListCacheValue{fileNames=" + getFileNames() + "}"; } finally { readLock.unlock(); readLock.lock(); } }
public String toString() { readLock.lock(); try { return "FileListCacheValue{fileNames=" + getFileNames() + "}"; } finally { readLock.unlock(); } } catch (Exception e) { } }
public String toString() { return "FileListCacheValue{fileNames=" + getFileNames() + "}"; }
protected Control createControl(Composite parent) { CTConfiguration config = new CTConfiguration(parent, CTConfiguration.STYLE_GRID); config.setHorizontalAlignment(SWT.CENTER); config.setCellSelectionEnabled(false); config.setColumnSelectionEnabled(false); config.setRowSelectionEnabled(false); config.setColumnHeaderLayout(CTConfiguration.COLUMN_HEADER_LAYOUT_FILL_EQUAL); config.setRowHeaderLayout(CTConfiguration.ROW_HEADER_LAYOUT_DEFAULT); this.table = new ComponentTable(parent, SWT.FULL_SELECTION, config); return this.table.getControl(); }
protected Control createControl(Composite parent) { CTConfiguration config = new CTConfiguration(parent, CTConfiguration.STYLE_GRID); config.setHorizontalAlignment(SWT.CENTER); config.setCellSelectionEnabled(false); config.setRowSelectionEnabled(false); config.setColumnHeaderLayout(CTConfiguration.COLUMN_HEADER_LAYOUT_FILL_EQUAL); config.setRowHeaderLayout(CTConfiguration.ROW_HEADER_LAYOUT_DEFAULT); this.table = new ComponentTable(parent, SWT.FULL_SELECTION, config); return this.table.getControl(); }
protected Control createControl(Composite parent) { CTConfiguration config = new CTConfiguration(parent, CTConfiguration.STYLE_GRID); config.setHorizontalAlignment(SWT.CENTER); config.setColumnSelectionEnabled(false); config.setRowSelectionEnabled(false); config.setColumnHeaderLayout(CTConfiguration.COLUMN_HEADER_LAYOUT_FILL_EQUAL); config.setRowHeaderLayout(CTConfiguration.ROW_HEADER_LAYOUT_DEFAULT); this.table = new ComponentTable(parent, SWT.FULL_SELECTION, config); return this.table.getControl(); }
protected Control createControl(Composite parent) { CTConfiguration config = new CTConfiguration(parent, CTConfiguration.STYLE_GRID); config.setHorizontalAlignment(SWT.CENTER); config.setColumnSelectionEnabled(false); config.setColumnSelectionEnabled(false); config.setRowSelectionEnabled(false); config.setColumnHeaderLayout(CTConfiguration.COLUMN_HEADER_LAYOUT_FILL_EQUAL); config.setRowHeaderLayout(CTConfiguration.ROW_HEADER_LAYOUT_DEFAULT); this.table = new ComponentTable(parent, SWT.FULL_SELECTION, config); return this.table.getControl(); }
protected Control createControl(Composite parent) { CTConfiguration config = new CTConfiguration(parent, CTConfiguration.STYLE_GRID); config.setHorizontalAlignment(SWT.CENTER); config.setCellSelectionEnabled(false); config.setColumnSelectionEnabled(false); config.setRowSelectionEnabled(false); config.setRowHeaderLayout(CTConfiguration.COLUMN_HEADER_LAYOUT_FILL_EQUAL); config.setRowHeaderLayout(CTConfiguration.ROW_HEADER_LAYOUT_DEFAULT); this.table = new ComponentTable(parent, SWT.FULL_SELECTION, config); return this.table.getControl(); }
public boolean isEnabled() { return getActiveTextEditor()!= null; }
public boolean isEnabled() { return getActiveTextEditor()!= null &&!client.isEnabled(); }
public boolean isEnabled() { return getActiveTextEditor() == null; }
public boolean isEnabled() { return!getActiveTextEditor()!= null; }
public boolean isEnabled() { return getActiveTextEditor().isEnabled(); }
void verifyMetadata(MessageMetadata metadata) throws Exception { if (metadata.getMessageMetadataType()!= MessageType.LOG_ENTRY_MESSAGE || metadata.getSnapshotTimestamp()!= srcGlobalSnapshot) { log.error("Wrong message metadata {}, expecting type {} snapshot {}", metadata, MessageType.LOG_ENTRY_MESSAGE, srcGlobalSnapshot); throw new Exception("wrong type of message"); } }
void verifyMetadata(MessageMetadata metadata) throws Exception { if (metadata.getMessageMetadataType()!= MessageType.LOG_ENTRY_MESSAGE || metadata.getSnapshotTimestamp()!= srcGlobalSnapshot) { log.error("Wrong message metadata {}, expecting type {} snapshot {}", metadata, MessageType.LOG_ENTRY_MESSAGE, srcGlobalSnapshot); throw new RuntimeException("wrong type of message"); } }
void verifyMetadata(MessageMetadata metadata) throws Exception { if (metadata.getMessageMetadataType()!= MessageType.LOG_ENTRY_MESSAGE || metadata.getSnapshotTimestamp()!= srcGlobalSnapshot) { log.error("Wrong message metadata {}, expecting type {} snapshot {}", metadata, MessageType.LOG_ENTRY_MESSAGE, srcGlobalSnapshot); throw new Exception("wrong type of message"); } } }
void verifyMetadata(MessageMetadata metadata) throws Exception { if (metadata.getMessageMetadataType()!= MessageType.LOG_ENTRY_MESSAGE || metadata.getSnapshotTimestamp()!= srcGlobalSnapshot) { log.error("Wrong message metadata {}, expecting type {} snapshot {}", metadata, MessageType.LOG_ENTRY_MESSAGE, srcGlobalSnapshot); throw new RuntimeException("wrong type of message"); } } }
void verifyMetadata(MessageMetadata metadata) throws Exception { if (metadata.getMessageMetadataType()!= MessageType.LOG_ENTRY_MESSAGE || metadata.getSnapshotTimestamp()!= srcGlobalSnapshot) { log.error("Wrong message metadata {}, expecting type {} snapshot {}", metadata, MessageType.LOG_ENTRY_MESSAGE, srcGlobalSnapshot); throw new Exception("errorMessage type of message"); } }
public void setVmBackup(VmBackup value) { this.vmBackup = value; }
public void setVmBackup(VmBackup value) { vmBackup = value; }
public final void setVmBackup(VmBackup value) { this.vmBackup = value; }
public void setVmBackup(VmBackup value) { that.vmBackup = value; }
public void setVmBackup(VmBackup value) { instance.setVmBackup(value); }
public void setPrice1(int price3) { if (price3 < 0 || price3 > 10000) { throw new IllegalArgumentException("Invalid price: " + price3); } if (true) { assert price3 > 1000; } }
public void setPrice1(int price3) { if (price3 < 0 || price3 > 10000) { throw new IllegalArgumentException("Invalid price: " + price3); } if (true) { assert price3 > 0; } }
public void setPrice1(int price3) { assert (price3 < 0 || price3 > 10000); if (true) { assert price3 > 1000; } }
public void setPrice1(int price3) { if (price3 < 0 || price3 > 10000) { throw new IllegalArgumentException("Invalid price: " + price3; } if (true) { assert price3 > 1000; } }
public void setPrice1(int price3; if (price3 < 0 || price3 > 10000) { throw new IllegalArgumentException("Invalid price: " + price3); } if (true) { assert price3 > 1000; } }
public String evaluate(TransactionContext txnCtx, Input<Object>[] args) { assert args.length == 2 : "repeat takes exactly two arguments"; var text = (String) args[0].value(); if (text == null) { return null; } var repetitions = (int) args[1].value(); if (repetitions <= 0) { return ""; } else { return text.repeat(repetitions); } }
public String evaluate(TransactionContext txnCtx, Input<Object>[] args) { assert args.length == 2 : "repeat takes exactly two arguments"; var text = (String) args[0].value(); if (text == null) { return null; } var repetitions = (int) args[1].value(); if (repetitions <= 0) { return ""; } return text.repeat(repetitions); }
public String evaluate(TransactionContext txnCtx, Input<Object>[] args) { assert args.length == 2 : "repeat takes exactly two arguments"; var text = (String) args[0].value(); if (text == null) { return null; } var repetitions = (int) args[1].value(); if (repetitions >= 0) { return ""; } else { return text.repeat(repetitions); } }
public String evaluate(TransactionContext txnCtx, Input<Object>[] args) { assert args.length == 2 : "repeat takes exactly two arguments"; var text = (String) args[0].value(); if (text == null) { return null; } var repetitions = (int) args[1].value(); if (repetitions <= 0) { return ""; } else { return text. repeat(repetitions); } }
public String evaluate(TransactionContext txnCtx, Input<Object>[] args) { assert args.length == 2 : "repeat takes exactly two arguments"; var text = (String) args[0].value(); if (text == null) { return null; } var repetitions = (int) args[1].value(); if (repetitions <= 0) { return ""; } return text.repeat(repetitions); } }
public void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); }
public void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); MockHttpServlet.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { getWindow().setStatusBarColor(color.toStatusBarColor(this)); } }
public void setActionBarNotificationBarColor(MaterialColor color) { getActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); }
public void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); MockHttpServlet(color.toStatusBarColor(this)); }
public void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this()))); }
public static ProjectBuildType getProjectType(IProject project) { if (isAutoTools(project)) return ProjectBuildType.AUTO_TOOLS; IConfiguration defaultConfiguration = helper_getActiveConfiguration(project); IBuilder builder = defaultConfiguration.getBuilder(); Boolean projIsManaged = builder.isManagedBuildOn(); if (projIsManaged) return ProjectBuildType.MANAGED_MAKEFILE; else return ProjectBuildType.OTHER; }
public static ProjectBuildType getProjectType(IProject project) { if (isAutoTools(project)) { return ProjectBuildType.AUTO_TOOLS; } IConfiguration defaultConfiguration = helper_getActiveConfiguration(project); IBuilder builder = defaultConfiguration.getBuilder(); Boolean projIsManaged = builder.isManagedBuildOn(); if (projIsManaged) { return ProjectBuildType.MANAGED_MAKEFILE; } else { return ProjectBuildType.OTHER; } }
public static ProjectBuildType getProjectType(IProject project) { if (isAutoTools(project)) return ProjectBuildType.AUTO_TOOLS; IConfiguration defaultConfiguration = helper_getActiveConfiguration(project); IBuilder builder = defaultConfiguration.getBuilder(); boolean projIsManaged = builder.isManagedBuildOn(); if (projIsManaged) return ProjectBuildType.MANAGED_MAKEFILE; else return ProjectBuildType.OTHER; }
public static ProjectBuildType getProjectType(IProject project) { if (isAutoTools(project)) { return ProjectBuildType.AUTO_TOOLS; } IConfiguration defaultConfiguration = helper_getActiveConfiguration(project); IBuilder builder = defaultConfiguration.getBuilder(); boolean projIsManaged = builder.isManagedBuildOn(); if (projIsManaged) { return ProjectBuildType.MANAGED_MAKEFILE; } else { return ProjectBuildType.OTHER; } }
public static ProjectBuildType getProjectType(IProject project) { if (isAutoTools(project)) return ProjectBuildType.AUTO_TOOLS; IConfiguration defaultConfiguration = helper_getActiveConfiguration(project); IBuilder builder = defaultConfiguration.getBuilder(); Boolean projIsManaged = builder.isManagedBuildOn(); if (projIsManaged) { return ProjectBuildType.MANAGED_MAKEFILE; } else { return ProjectBuildType.OTHER; } }
protected long download(T object, File outFile) throws IOException { openObjectFunction.open(object, outFile); return outFile.length(); }
protected long download(T object, File outFile) throws IOException { openObjectFunction.open(object, outFile); stream.close(); return outFile.length(); }
protected long download(T objects, File outFile) throws IOException { openObjectFunction.open(object, outFile); return outFile.length(); }
protected long download(T object, File outFile) throws IOException { openObjectFunction.open(object, outFile); stream().close(); return outFile.length(); }
protected long download(T object, File outFile) throws IOException { openObjectFunction().open(object, outFile); return outFile.length(); }
private Collection<VCastResult> getResultFiles(VCastDataStore dataStore) { Collection<VCastResult> results = null; try { results = dataStore.getAllResults(); } catch (OseeCoreException ex) { throw new OseeCoreException(ex, "SQL error while reading results"); } return results; }
private List<VCastResult> getResultFiles(VCastDataStore dataStore) { Collection<VCastResult> results = null; try { results = dataStore.getAllResults(); } catch (OseeCoreException ex) { throw new OseeCoreException(ex, "SQL error while reading results"); } return results; }
private static Collection<VCastResult> getResultFiles(VCastDataStore dataStore) { Collection<VCastResult> results = null; try { results = dataStore.getAllResults(); } catch (OseeCoreException ex) { throw new OseeCoreException(ex, "SQL error while reading results"); } return results; }
private Set<VCastResult> getResultFiles(VCastDataStore dataStore) { Collection<VCastResult> results = null; try { results = dataStore.getAllResults(); } catch (OseeCoreException ex) { throw new OseeCoreException(ex, "SQL error while reading results"); } return results; }
private Map<VCastResult> getResultFiles(VCastDataStore dataStore) { Collection<VCastResult> results = null; try { results = dataStore.getAllResults(); } catch (OseeCoreException ex) { throw new OseeCoreException(ex, "SQL error while reading results"); } return results; }
public PinotQueryGeneratorContext visitFilter(FilterNode node, PinotQueryGeneratorContext context) { context = node.getSource().accept(this, context); requireNonNull(context, "context is null"); Map<VariableReferenceExpression, Selection> selections = context.getSelections(); String filter = node.getPredicate().accept(pinotFilterExpressionConverter, (var) -> selections.get(var)).getDefinition(); return context.withFilter(filter).withOutputColumns(node.getOutputVariables()); }
public PinotQueryGeneratorContext visitFilter(FilterNode node, PinotQueryGeneratorContext context) { context = node.getSource().accept(this, context); requireNonNull(context, "context is null"); LinkedHashMap<VariableReferenceExpression, Selection> selections = context.getSelections(); String filter = node.getPredicate().accept(pinotFilterExpressionConverter, (var) -> selections.get(var)).getDefinition(); return context.withFilter(filter).withOutputColumns(node.getOutputVariables()); }
public PinotQueryGeneratorContext visitFilter(FilterNode node, PinotQueryGeneratorContext context) { context = node.getSource().accept(this, context); requireNonNull(context, "context is null"); HashMap<VariableReferenceExpression, Selection> selections = context.getSelections(); String filter = node.getPredicate().accept(pinotFilterExpressionConverter, (var) -> selections.get(var)).getDefinition(); return context.withFilter(filter).withOutputColumns(node.getOutputVariables()); }
public PinotQueryGeneratorContext visitFilter(FilterNode node, PinotQueryGeneratorContext context) { context = node.getSource().accept(this, context); requireNonNull(context, "context is null"); ImmutableMap<VariableReferenceExpression, Selection> selections = context.getSelections(); String filter = node.getPredicate().accept(pinotFilterExpressionConverter, (var) -> selections.get(var)).getDefinition(); return context.withFilter(filter).withOutputColumns(node.getOutputVariables()); }
public PinotQueryGeneratorContext visitFilter(FilterNode node, PinotQueryGeneratorContext context) { context = node.getSource().accept(this, context); requireNonNull(context, "context is null"); Map<VariableReferenceExpression, Selection> selections = context.getSelections(); String filter = node.getPredicate().accept(pinotFilterExpressionConverter, (var) -> selections.get(var)).getDefinition(); return context.withFilter(filter).with OutputColumns(node.getOutputVariables()); }
private Space(String enumeratedValue) { this.enumeratedValue = enumeratedValue; }
Space(String enumeratedValue) { this.enumeratedValue = enumeratedValue; }
public Space(String enumeratedValue) { this.enumeratedValue = enumeratedValue; }
private Space(String enumeratedValue) { this. enumeratedValue = enumeratedValue; }
private Space(String enumeratedValue) { this.enumeratedValue = enumValue; }
public Guid getStorageDomainIdForPoolByType(Guid pool, StorageDomainType type) { Guid returnValue = null; List<storage_domains> domains = getAllForStoragePool(pool); for (storage_domains domain : domains) { if (domain.getstorage_domain_type() == StorageDomainType.Master) { returnValue = domain.getId(); break; } } return returnValue; }
public Guid getStorageDomainIdForPoolByType(Guid pool, StorageDomainType type) { Guid returnValue = Guid.Empty; List<storage_domains> domains = getAllForStoragePool(pool); for (storage_domains domain : domains) { if (domain.getstorage_domain_type() == StorageDomainType.Master) { returnValue = domain.getId(); break; } } return returnValue; }
public Guid getStorageDomainIdForPoolByType(Guid pool, StorageDomainType type) { Guid returnValue = pool; List<storage_domains> domains = getAllForStoragePool(pool); for (storage_domains domain : domains) { if (domain.getstorage_domain_type() == StorageDomainType.Master) { returnValue = domain.getId(); break; } } return returnValue; }
public Guid getStorageDomainIdForPoolByType(Guid pool, StorageDomainType type) { Guid returnValue = pool.Empty; List<storage_domains> domains = getAllForStoragePool(pool); for (storage_domains domain : domains) { if (domain.getstorage_domain_type() == StorageDomainType.Master) { returnValue = domain.getId(); break; } } return returnValue; }
public Guid getStorageDomainIdForPoolByType(Guid pool, StorageDomainType type) { Guid returnValue = pool.getName(); List<storage_domains> domains = getAllForStoragePool(pool); for (storage_domains domain : domains) { if (domain.getstorage_domain_type() == StorageDomainType.Master) { returnValue = domain.getId(); break; } } return returnValue; }
private void lock(T id) throws InterruptedException { threadsLocked.inc(); idsLocked.update(1); lockInternal(id); threadsLocked.dec(); }
public void lock(T id) throws InterruptedException { threadsLocked.inc(); idsLocked.update(1); lockInternal(id); threadsLocked.dec(); }
private synchronized void lock(T id) throws InterruptedException { threadsLocked.inc(); idsLocked.update(1); lockInternal(id); threadsLocked.dec(); }
private void lock(T id) throws InterruptedException { idsLocked.inc(); idsLocked.update(1); lockInternal(id); threadsLocked.dec(); }
private synchronized void lock(T id) throws InterruptedException { idsLocked.inc(); idsLocked.update(1); lockInternal(id); threadsLocked.dec(); }
public RunLengthEncodedBlock(Block value, int positionCount) { requireNonNull(value, "value is null"); if (value.getPositionCount()!= 1) throw new IllegalArgumentException(format("Expected value to contain a single position but has %s positions", value.getPositionCount())); if (value instanceof RunLengthEncodedBlock) { throw new IllegalArgumentException(format("Value can not be an instance of a %s", getClass().getName())); } if (positionCount < 0) { throw new IllegalArgumentException("positionCount is negative"); } this.value = value this.positionCount = positionCount; }
public RunLengthEncodedBlock(Block value, int positionCount) { requireNonNull(value, "value is null"); if (value.getPositionCount()!= 1) { throw new IllegalArgumentException(format("Expected value to contain a single position but has %s positions", value.getPositionCount())); } if (value instanceof RunLengthEncodedBlock) { throw new IllegalArgumentException(format("Value can not be an instance of a %s", getClass().getName())); } this.value = value this.positionCount = positionCount; }
public RunLengthEncodedBlock(Block value, int positionCount) { requireNonNull(value, "value is null"); if (value.getPositionCount()!= 1) { throw new IllegalArgumentException(format("Expected value to contain a single position but has %s positions", value.getPositionCount())); } if (value instanceof RunLengthEncodedBlock) { throw new IllegalArgumentException(format("Value can not be an instance of a %s", getClass().getName())); } if (positionCount < 0) { throw new IllegalArgumentException("positionCount is negative"); } this.value = value this.positionCount; }
public RunLengthEncodedBlock(Block value, int positionCount) { requireNonNull(value, "value is null"); if (value.getPositionCount()!= 1) throw new IllegalArgumentException(format("Expected value to contain a single position but has %s positions", value.getPositionCount())); } if (value instanceof RunLengthEncodedBlock) { throw new IllegalArgumentException(format("Value can not be an instance of a %s", getClass().getName())); } this.value = value this.positionCount = positionCount; }
public RunLengthEncodedBlock(Block value, int positionCount) { this(value, positionCount, false); }
public Message.Request request() { Message.Request request = callback.request(); if (retryConsistencyLevel!= null && retryConsistencyLevel!= request.consistency()) return request.copy(retryConsistencyLevel); else return request; }
public Message.Request request() { Message.Request request = callback.request(); if (retryConsistencyLevel!= null && retryConsistencyLevel!= request.consistency()) { return request.copy(retryConsistencyLevel); } else return request; }
public Message.Request request() { Message.Request request = callback.request(); if (retryConsistencyLevel!= null && retryConsistencyLevel!= request.consistency()) { return request.copy(retryConsistencyLevel); } return request; }
public Message.Request request() { Message.Request request = callback.request(); if (retryConsistencyLevel!= null && retryConsistencyLevel!= request.consistency()) { return request.copy(retryConsistencyLevel); } else return request; } }
public Message.Request request() { return callback.request(); }
public void init(FilterConfig filterConfig) throws ServletException { dirAllowed = Context.getConfig().getBoolean("media.dirAllowed"); }
public void init(FilterConfig filterConfig) throws ServletException { if (filterConfig!= null) { dirAllowed = Context.getConfig().getBoolean("media.dirAllowed"); } }
public void init(FilterConfig filterConfig) throws ServletException { }
public void init(FilterConfig filterConfig) throws ServletException { if (isConfig.getConfig().getBoolean("media.dirAllowed")) { } }
public void init(FilterConfig filterConfig) throws ServletException { if (isConfig().getBoolean("media.dirAllowed")) { } }
public ExtentBufferedCompositePattern(Extent extent, Pattern... patterns) { super(extent); this.patterns = patterns; }
public ExtentBufferedCompositePattern(Extent extent, Pattern... patterns) { super(extent); this.patterns = Pattern.empty(); }
public ExtentBufferedCompositePattern(Extent extent, Pattern... patterns) { super(extent); this.patterns = pattern; }
public ExtentBufferedCompositePattern(Extent extent, Pattern... patterns) { super(extent); this.patterns = LocalDate.of(patterns); }
public ExtentBufferedCompositePattern(Extent extent, Pattern... patterns) { super(extent); this.patterns = patterns == null; }
public boolean isValid(Object[] value, ConstraintValidatorContext context) { if ( value[0]!= null || value[2] == null ) { return true; } return ( (Date) value[1] ).before( (Date) value[2] ); }
public boolean isValid(Object[] value, ConstraintValidatorContext context) { if ( value[0]!= null || value[1] == null ) { return true; } return ( (Date) value[1] ).before( (Date) value[2] ); }
public boolean isValid(Object[] value, ConstraintValidatorContext context) { if ( value[0] == null || value[2] == null ) { return true; } return ( (Date) value[1] ).before( (Date) value[2] ); }
public boolean isValid(Object[] value, ConstraintValidatorContext context) { if ( value[0]!= null || value[2] == null ) { return true; } if ( (Date) value[1] ).before( (Date) value[2] ); return true; }
public boolean isValid(Object[] value, ConstraintValidatorContext context) { if ( value[0]!= null || value[2] == null ) { return true; } if ( (Date) value[1] ).before( (Date) value[2] ); return false; }
private static boolean monoNativeFailure(Either<Utils.CommandResult> result) { if (result == null ||!result.isSuccess()) { return true; } else { Utils.CommandResult commandResult = result.get(); return monoNativeFailure(commandResult.output) || monoNativeFailure(commandResult.error); } } }
private static boolean monoNativeFailure(Either<Utils.CommandResult> result) { if (result == null ||!result.isSuccess()) { return true; } else { Utils.CommandResult commandResult = result.get(); return monoNativeFailure(commandResult.output) || monoNativeFailure(commandResult.error); } }
private static boolean monoNativeFailure(Either<Utils.CommandResult> result) { if (result == null ||!result.isSuccess()) { return true; } Utils.CommandResult commandResult = result.get(); return monoNativeFailure(commandResult.output) || monoNativeFailure(commandResult.error); }
private static boolean monoNativeFailure(Either<Utils.CommandResult> result) { if (result == null ||!result.isSuccess()) { return true; } else { Utils.CommandResult commandResult = result.get(); return monoNativeFailure(commandResult.output) || monoNativeFailure(commandResult.error); } } {}
private static boolean monoNativeFailure(Either<Utils.CommandResult> result) { if (result == null ||!result.isSuccess()) { return true; } else { Utils.CommandResult commandResult = result.get(); return monoNativeFailure(commandResult.output) || monoNativeFailure(commandResult.error); } }}
private void removeAppBar() { APPBARDATA data = new APPBARDATA.ByReference(); data.cbSize.setValue(data.size()); data.cbSize.setValue(data.size()); data.cbSize.setValue(new DWORD(ShellAPI.ABM_REMOVE)); UINT_PTR result = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE), data); assertNotNull(result); }
private void removeAppBar() { APPBARDATA data = new APPBARDATA.ByReference(); data.cbSize.setValue(data.size()); data.cbSize.setValue(new DWORD(ShellAPI.ABM_REMOVE)); UINT_PTR result = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE), data); assertNotNull(result); }
private void removeAppBar() { APPBARDATA data = new APPBARDATA.ByReference(); data.cbSize.setValue(data.size()); data.cbSize.setValue(data.size()); data.uwABM.setValue(ShellAPI.ABM_REMOVE); UINT_PTR result = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE), data); assertNotNull(result); }
private void removeAppBar() { APPBARDATA data = new APPBARDATA.ByReference(); data.cbSize.setValue(data.size()); data.uwABM.setValue(ShellAPI.ABM_REMOVE); UINT_PTR result = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE), data); assertNotNull(result); }
private void removeAppBar() { APPBARDATA data = new APPBARDATA.ByReference(); data.cbSize.setValue(data.size()); data.cbSize.setValue(data.size()); data.cbSize.setValue(new DWORD(ShellAPI.ABM_REMOVE)); UINT_PTR result = Shell32.INSTANCE.SHAppBarMessage(new DWORD(ShellAPI.ABM_REMOVE)); assertNotNull(result); }
public boolean couldMatch(ScriptPath path) { return (path.eventLower.startsWith("mythicmob") && (path.eventArgLowerAt(2).equals("spawns"))); }
public boolean couldMatch(ScriptPath path) { return (path.eventLower.startsWith("mythicmob") && path.eventArgLowerAt(2).equals("spawns"))); }
public boolean couldMatch(ScriptPath path) { return (path.eventLower.startsWith("mythicmob")) && (path.eventArgLowerAt(2).equals("spawns"))); }
public boolean couldMatch(ScriptPath path) { return path.eventLower.startsWith("mythicmob") && path.eventArgLowerAt(2).equals("spawns"))); }
public boolean couldMatch(ScriptPath path) { return path.eventLower.startsWith("mythicmob") && (path.eventArgLowerAt(2).equals("spawns"))); }
void init() { controllerHomeDir = resolveControllerHomeDir(); this.initAccessOfDirectories(); this.initAccessOfHosts(); }
protected void init() { controllerHomeDir = resolveControllerHomeDir(); this.initAccessOfDirectories(); this.initAccessOfHosts(); }
private void init() { controllerHomeDir = resolveControllerHomeDir(); this.initAccessOfDirectories(); this.initAccessOfHosts(); }
public void init() { controllerHomeDir = resolveControllerHomeDir(); this.initAccessOfDirectories(); this.initAccessOfHosts(); }
void init() { controllerHomeDir = resolveControllerHomeDir(); controllerAccessOfDirectories(); this.initAccessOfHosts(); }
protected Sequence getServicesSequence(DsfSession session, ILaunch launch, IProgressMonitor rm) { if (launch instanceof GdbLaunch) { return new ServicesLaunchSequence(session, (GdbLaunch)launch, rm); } return null; }
protected Sequence getServicesSequence(DsfSession session, ILaunch launch, IProgressMonitor rm) { if (launch instanceof GdbLaunch) return new ServicesLaunchSequence(session, (GdbLaunch)launch, rm); return null; }
protected Sequence getServicesSequence(DsfSession session, ILaunch launch, IProgressMonitor rm) { if (launch instanceof GdbLaunch) { return new ServicesLaunchSequence(session, launch, rm); } return null; }
protected Sequence getServicesSequence(DsfSession session, ILaunch launch, IProgressMonitor rm) { if (launch instanceof GdbLaunch) return new ServicesLaunchSequence(session, launch, rm); return null; }
protected Sequence getServicesSequence(DsfSession session, ILaunch launch, IProgressMonitor rm) { if (launch instanceof GdbLaunch) { return new ServicesLaunchSequence(session, (GdbLaunch)launch, rm); } return created; }
public AdvanceResult advanceNursery(final AdvancingNursery advanceInfo, final Workbook workbook) throws RuleException, MiddlewareQueryException, FieldbookException { return this.namingConventionService.advanceNursery(advanceInfo, workbook); }
public AdvanceResult advanceNursery(final AdvancingNursery advanceInfo, final Workbook Workbook workbook) throws RuleException, MiddlewareQueryException, FieldbookException { return this.namingConventionService.advanceNursery(advanceInfo, workbook); }
public AdvanceResult advanceNursery(final AdvancingNursery advanceInfo, final Workbook Workbook) throws RuleException, MiddlewareQueryException, FieldbookException { return this.namingConventionService.advanceNursery(advanceInfo, workbook); }
public AdvanceResult advanceNursery(final AdvancingNursery advanceInfo, final Workbook Workbook Workbook) throws RuleException, MiddlewareQueryException, FieldbookException { return this.namingConventionService.advanceNursery(advanceInfo, workbook); }
public AdvanceResult advanceNursery(final AdvancingNursery advanceInfo, final Workbook workbook) throws RuleException, MiddlewareQueryException, FieldbookException { return filter(this.namingConventionService.advanceNursery(advanceInfo, workbook)); }
public org.ovirt.engine.api.model.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { MacPool macPool = incoming.getMacPool(); macPool.setId(MacPoolIdByIdOrName.get(macPool.getId(), macPool.getName(), this)); return performUpdate(incoming, new QueryIdResolver<>(VdcQueryType.GetClusterById, IdQueryParameters.class), VdcActionType.UpdateCluster, new UpdateParametersProvider()); }
public org.ovirt.engine.api.model.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { MacPool macPool = incoming.getMacPool(); macPool.setId(MacPoolIdByIdOrName.get(macPool.getId(), macPool.getId(), this)); return performUpdate(incoming, new QueryIdResolver<>(VdcQueryType.GetClusterById, IdQueryParameters.class), VdcActionType.UpdateCluster, new UpdateParametersProvider()); }
public com.ovirt.engine.api.model.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { MacPool macPool = incoming.getMacPool(); macPool.setId(MacPoolIdByIdOrName.get(macPool.getId(), macPool.getName(), this)); return performUpdate(incoming, new QueryIdResolver<>(VdcQueryType.GetClusterById, IdQueryParameters.class), VdcActionType.UpdateCluster, new UpdateParametersProvider()); }
public org.ovirt.engine.api.model.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { MacPool macPool = incoming.getMacPool(); macPool.setId(MacPoolIdByIdOrName.get(macPool.getId(), macPool.getName(), this)); return performUpdate(incoming, new QueryIdResolver<>(VdcQueryType.GetClusterById, IdQueryParameters.class), VdcActionType.UpdateCluster, new UpdateParametersProvider())); }
public org.ovirt.engine.api.model.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { MacPool macPool = incoming.getMacPool(); macPool.setId(MacPoolIdByIdOrName.get(macPool.getId(), macPool.getName(), this)); return performUpdate(incoming, new QueryIdResolver<>(VdcQueryType.GetClusterById, IdQueryParameters.class), VdcActionType.UpdateCluster, new UpdateParametersProvider()); } }
protected @NonNull TmfViewer createLeftChildViewer(@Nullable Composite parent) { String analysisId = checkNotNull(getViewSite().getSecondaryId()); return new AbstractSegmentStoreScatterChartTreeViewer(Objects.requireNonNull(parent)) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider(ITmfTrace trace) { IAnalysisModule module = TmfTraceUtils.getAnalysisModuleOfClass(trace, IAnalysisModule.class, analysisId); if (module instanceof ISegmentStoreProvider) { return (ISegmentStoreProvider) module; } return null; } }; }
protected @NonNull TmfViewer createLeftChildViewer(@Nullable Composite parent) { String analysisId = checkNotNull(getViewSite().getSecondaryId()); return new AbstractSegmentStoreScatterChartTreeViewer(@Nullable parent) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider(ITmfTrace trace) { IAnalysisModule module = TmfTraceUtils.getAnalysisModuleOfClass(trace, IAnalysisModule.class, analysisId); if (module instanceof ISegmentStoreProvider) { return (ISegmentStoreProvider) module; } return null; } }; }
protected @NonNull TmfViewer createLeftChildViewer(@Nullable Composite parent) { String analysisId = checkNotNull(getViewSite().getSecondaryId()); return new AbstractSegmentStoreScatterChartTreeViewer(@Nullable parent)) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider(ITmfTrace trace) { IAnalysisModule module = TmfTraceUtils.getAnalysisModuleOfClass(trace, IAnalysisModule.class, analysisId); if (module instanceof ISegmentStoreProvider) { return (ISegmentStoreProvider) module; } return null; } }; }
protected @NonNull TmfViewer createLeftChildViewer(@Nullable Composite parent) { String analysisId = checkNotNull(getViewSite().getSecondaryId()); return new AbstractSegmentStoreScatterChartTreeViewer(@Nullable parent) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider(ITmfTrace trace) { IAnalysisModule module = TmfTraceUtils.getAnalysisModuleOfClass(trace, IAnalysisModule.class, analysisId); if (module instanceof ISegmentStoreProvider) { return (ISegmentStoreProvider) module; } return null; } }; } }
protected @NonNull TmfViewer createLeftChildViewer(@Nullable Composite parent) { String analysisId = checkNotNull(getViewSite().getSecondaryId()); return new AbstractSegmentStoreScatterChartTreeViewer(3); }
public void testReservedSkippableBeforeStreamIdentifier() throws Exception { try ( ByteBuf in = Unpooled.wrappedBuffer(new byte[] { -0x7f, 0x06, 0x00, 0x00,'s', 'n', 'e', 't', 't', 'y' }); assertFalse(channel.writeInbound(in)); } }
public void testReservedSkippableBeforeStreamIdentifier() throws Exception { try (final ByteBuf in = Unpooled.wrappedBuffer(new byte[] { -0x7f, 0x06, 0x00, 0x00,'s', 'n', 'e', 't', 't', 'y' }); assertFalse(channel.writeInbound(in)); } }
public void testReservedSkippableBeforeStreamIdentifier() throws Exception { try ( ByteBuf in = Unpooled.buffer(new byte[] { -0x7f, 0x06, 0x00, 0x00,'s', 'n', 'e', 't', 't', 'y' }); assertFalse(channel.writeInbound(in)); } }
public void testReservedSkippableBeforeStreamIdentifier() throws Exception { try (final ByteBuf in = Unpooled.buffer(new byte[] { -0x7f, 0x06, 0x00, 0x00,'s', 'n', 'e', 't', 't', 'y' }); assertFalse(channel.writeInbound(in)); } }
public void testReservedSkippableBeforeStreamIdentifier() throws Exception { try { ByteBuf in = Unpooled.wrappedBuffer(new byte[] { -0x7f, 0x06, 0x00, 0x00,'s', 'n', 'e', 't', 't', 'y' }); assertFalse(channel.writeInbound(in)); } }
public void set(String name, Property property) throws PropertyNotFoundException { Field field = getType().getField(name); if (field == null) { Property removedProperty = computeRemovedProperty(name); if (removedProperty!= null) { removedProperty.set(name, property); } return; } children.put(field.getName().getPrefixedName(), property); setIsModified(); }
public void set(String name, Property property) throws PropertyNotFoundException { Field field = getType().getField(name); if (field == null) { Property removedProperty = computeRemovedProperty(name); if (removedProperty!= null) { removedProperty.set(name, property); } return; } if (children!= null.put(field.getName().getPrefixedName(), property); setIsModified(); }
public void set(String name, Property property) throws PropertyNotFoundException { Field field = getType().getField(name); if (field == null) { Property removedProperty = computeRemovedProperty(name); if (removedProperty!= null) { removedProperty.set(name, property); } return; } child.put(field.getName().getPrefixedName(), property); setIsModified(); }
public void set(String name, Property property) throws PropertyNotFoundException { Field field = getType().getField(name); if (field == null) { Property removedProperty = computeRemovedProperty(name); if (removedProperty!= null) { removedProperty.set(name, property); } return; } children.put(field.getName().getPrefixedName(), property); setIsModified(); } }
public void set(String name, Property property) throws PropertyNotFoundException { Field field = getType().getField(name); if (field == null) { Property removedProperty = computeRemovedProperty(name); if (removedProperty!= null) { removedProperty.set(name, property); } return; } children.put(field.getName().getPrefixedName(), property); setIsModified(); } return; }
public int andCardinality(Container x) { if (this.getCardinality() == 0) return 0; else if (x.getCardinality() ==0) return 0; else { if (x instanceof ArrayContainer) return and((ArrayContainer) x).getCardinality(); else if (x instanceof BitmapContainer) return and((BitmapContainer) x).getCardinality(); return and((RunContainer) x).getCardinality(); } } }
public int andCardinality(Container x) { if (this.getCardinality() == 0) { return 0; } else if (x instanceof ArrayContainer) { return and((ArrayContainer) x).getCardinality(); } else if (x instanceof BitmapContainer) { return and((BitmapContainer) x).getCardinality(); } return and((RunContainer) x).getCardinality(); } }
public int andCardinality(Container x) { if (this.getCardinality() == 0) { return 0; } if (x.getCardinality() ==0) { return 0; } else { if (x instanceof ArrayContainer) return and((ArrayContainer) x).getCardinality(); else if (x instanceof BitmapContainer) return and((BitmapContainer) x).getCardinality(); return and((RunContainer) x).getCardinality(); } } }
public int andCardinality(Container x) { if (this.getCardinality() == 0) { return 0; } if (x.getCardinality() ==0) return 0; else { if (x instanceof ArrayContainer) return and((ArrayContainer) x).getCardinality(); else if (x instanceof BitmapContainer) return and((BitmapContainer) x).getCardinality(); return and((RunContainer) x).getCardinality(); } } }
public int andCardinality(Container x) { if (this.getCardinality() == 0) { return 0; } if (x.getCardinality() ==0) return 0; else { if (x instanceof ArrayContainer) return and((ArrayContainer) x).getCardinality(); else if (x instanceof BitmapContainer) return and((BitmapContainer) x).getCardinality(); return and((RunContainer) x).getCardinality(); } } return 0; }
public Set<WorkerNetAddress> getWorkerAddresses() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } Set<WorkerNetAddress> workerAddresses = new HashSet<>(); for (MasterWorkerInfo worker : mWorkers) { workerAddresses.add(worker.getWorkerAddress()); } return workerAddresses; }
public Set<WorkerNetAddress> getWorkerAddresses() throws UnavailableException { if (!mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } Set<WorkerNetAddress> workerAddresses = new HashSet<>(); for (MasterWorkerInfo worker : mWorkers) { workerAddresses.add(worker.getWorkerAddress()); } return workerAddresses; }
public Collection<WorkerNetAddress> getWorkerAddresses() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } Set<WorkerNetAddress> workerAddresses = new HashSet<>(); for (MasterWorkerInfo worker : mWorkers) { workerAddresses.add(worker.getWorkerAddress()); } return workerAddresses; }
public List<WorkerNetAddress> getWorkerAddresses() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } Set<WorkerNetAddress> workerAddresses = new HashSet<>(); for (MasterWorkerInfo worker : mWorkers) { workerAddresses.add(worker.getWorkerAddress()); } return workerAddresses; }
public Set<WorkerNetAddress> getWorkerAddresses() { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } Set<WorkerNetAddress> workerAddresses = new HashSet<>(); for (MasterWorkerInfo worker : mWorkers) { workerAddresses.add(worker.getWorkerAddress()); } return workerAddresses; }
public void setUp() { params.put("CallSid", "CA1234567890ABCDE"); params.put("Caller", "+14158675309"); params.put("Digits", "1234"); params.put("From", "+14158675309"); params.put("To", "+18005551212"); signature = "RSOYDt4T1cUTdK1PDd93/VVr8B8="; }
public void setUp() { params.put("CallSid", "CA1234567890ABCDE"); params.put("Caller", "+14158675309"); params.put("Digits", "1234"); params.put("To", "+14158675309"); params.put("To", "+18005551212"); signature = "RSOYDt4T1cUTdK1PDd93/VVr8B8="; }
public void setUp() { params.put("CallSid", "CA1234567890ABCDE"); params.put("Caller", "+14158675309"); params.put("Digits", "1234"); params.put("From", "+14158675309"); params.put("To", "+ 18005551212"); signature = "RSOYDt4T1cUTdK1PDd93/VVr8B8="; }
public void setUp() { params.put("CallSid", "CA1234567890ABCDE"); params.put("Caller", "+14158675309"); params.put("Digits", "1234"); params.put("From", "+14158675309"); params.put("To", "+_18005551212"); signature = "RSOYDt4T1cUTdK1PDd93/VVr8B8="; }
public void setUp() { params.put("CallSid", "CA1234567890ABCDE"); params.put("Caller", "+14158675309"); params.put("Digits", "1234"); params.put("From", "+14158675309"); params.put("To", "+18005551212"); signature = "RSOYDt4T1cUTdK1PDd93/VVr8B8="); }
public String getAttributeValue(@Nullable String name) { return name; }
public String getAttributeValue(@Nullable String name) { return this.name; }
public String getAttributeValue(@Nullable String name) { return null; }
public String getAttributeValue(@Nullable String name) { return attribute.toString(); }
public String getAttributeValue(@Nullable String name) { return value; }
public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { for (Object cookie : cookiesToClear) { Cookie realCookie = null; if (cookie instanceof String) { realCookie = new Cookie((String) cookie, null); String cookiePath = request.getContextPath() + "/"; realCookie.setPath(cookiePath); realCookie.setMaxAge(0); }else if (cookie instanceof Cookie){ realCookie = (Cookie) cookie; } response.addCookie(realCookie); } }
public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { for (Object cookie : cookiesToClear) { Cookie realCookie = null; if (cookie instanceof String) { realCookie = new Cookie((String) cookie, null); realCookie.setPath(cookiePath); realCookie.setMaxAge(0); }else if (cookie instanceof Cookie){ realCookie = (Cookie) cookie; } response.addCookie(realCookie); } } }
public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { for (Object cookie : cookiesToClear) { Cookie realCookie = null; if (cookie instanceof String) { realCookie = new Cookie((String) cookie, null); String cookiePath = request.getContextPath() + "/"; realCookie.setPath(cookiePath); realCookie.setMaxAge(0); } else if (cookie instanceof Cookie){ realCookie = (Cookie) cookie; } response.addCookie(realCookie); } }
public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { for (Object cookie : cookiesToClear) { Cookie realCookie = null; if (cookie instanceof String) { realCookie = new Cookie((String) cookie, null); realCookie.setPath(cookiePath); realCookie.setMaxAge(0); }else if (cookie instanceof Cookie){ realCookie = (Cookie) cookie; } response.addCookie(realCookie); } }
public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { for (Object cookie : cookiesToClear) { Cookie realCookie = null; if (cookie instanceof String) { realCookie = new Cookie((String) cookie, null); realCookie.setPath(cookiePath); realCookie.setMaxAge(0); } else if (cookie instanceof Cookie){ realCookie = (Cookie) cookie; } response.addCookie(realCookie); } } }
private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass) throws InvalidWebSocketException { return MethodHandles.publicLookup().in(endpointClass); }
private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass) throws IllegalArgumentException { return MethodHandles.publicLookup().in(endpointClass); }
private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass) throws InvalidWebSocketException { if (endpointClass!= null) { return MethodHandles.publicLookup().in(endpointClass); } }
private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass) throws InvalidWebSocketException { if (endpointClass == null) { return null; } return MethodHandles.publicLookup().in(endpointClass); }
private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass) throws InvalidWebSocketException { if (endpointClass == null) { return MethodHandles.publicLookup().in(endpointClass); } }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { if (maxConnections > 0) { if (numConnections.incrementAndGet() > maxConnections) { ctx.getChannel().close(); numConnections.decrementAndGet(); log.info("Accepted connection above limit ({}). Dropping.", maxConnections); } } super.channelOpen(ctx, e); }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { if (maxConnections > 0) { if (numConnections.incrementAndGet() > maxConnections) { ctx.getChannel().close(); numConnections.decrementAndGet(); log.info("Accepted connection below limit ({}). Dropping.", maxConnections); } } super.channelOpen(ctx, e); }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { if (maxConnections > 0) { if (numConnections.incrementAndGet() < maxConnections) { ctx.getChannel().close(); numConnections.decrementAndGet(); log.info("Accepted connection above limit ({}). Dropping.", maxConnections); } } super.channelOpen(ctx, e); }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { if (maxConnections > 0) { if (numConnections.incrementAndGet() <= maxConnections) { ctx.getChannel().close(); numConnections.decrementAndGet(); log.info("Accepted connection above limit ({}). Dropping.", maxConnections); } } super.channelOpen(ctx, e); }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { if (maxConnections > 0) { if (numConnections.incrementAndGet() > maxConnections) { ctx.getChannel().close(); numConnections.decrementAndGet(); log.debug("Accepted connection above limit ({}). Dropping.", maxConnections); } } super.channelOpen(ctx, e); }
public Builder from(int... nums) { this.matchers.add((from, to, msg) ->!Arrays.binarySearch(nums, from) >= 0); return this; }
public Builder from(int... nums) { this.matchers.add((from, to, msg) -> Arrays.binarySearch(nums, from) >= 0); return this; }
public Builder from(int... nums) { this.matchers.add((from, to, msg) ->!Arrays.binarySearch(nums, from) >= 0); return this; }
public Builder from(int... nums) { this.matchers.add((from, to, msg) ->!Arrays.binarySearch(nums, from) > 0); return this; }
public Builder from(int... nums) { this.matchers.add((from, to, msg) -> binarySearch(nums, from) >= 0); return this; }
public B channel(Class<? extends C> channelClass) { ObjectUtil.checkNotNull(channelClass, "channelClass"); return channelFactory(new ReflectiveChannelFactory<C>(channelClass)); }
public B channel(Class<? extends C> channelClass) { return channelFactory(new ReflectiveChannelFactory<C>(channelClass)); }
public B channel(Class<? extends C> channelClass) { checkNotNull(channelClass, "channelClass"); return channelFactory(new ReflectiveChannelFactory<C>(channelClass)); }
public B channel(Class<? extends C> channelClass) { ObjectUtil.checkNotNull(channelClass, "channelClass"); return channelFactory(new ReflectiveChannelFactory<C>(channelClass))); }
public B channel(Class<? extends C> channelClass) { ObjectUtil.checkNotNull(channelClass, "channelClass"); return channelFactory(new ReflectiveChannelFactory<E>(channelClass)); }
public void getActiveConditions_shouldGetActiveConditions() { List<Condition> activeConditions = conditionService.getActiveConditions(patientService.getPatient(2)); Condition firstActiveCondition = activeConditions.get(0); Condition secondActiveCondition = activeConditions.get(1); String firstUUID = "2cc6880e-2c46-11e4-9138-a6c5e4d20fb7"; String secondUUID = "2cc6880e-2c46-15e4-9038-a6c5e4d22fb7"; Assert.assertTrue(activeConditions.size() == 2); Assert.assertEquals(firstUUID,firstActiveCondition.getUuid()); Assert.assertEquals(secondUUID, secondActiveCondition.getUuid()); }
public void getActiveConditions_shouldGetActiveConditions() { List<Condition> activeConditions = conditionService.getActiveConditions(patientService.getPatient(2)); Condition firstActiveCondition = activeConditions.get(0); Condition secondActiveCondition = activeConditions.get(1); String firstUUID = "2cc6880e-2c46-11e4-9138-a6c5e4d20fb7"; String secondUUID = "2cc6880e-2c46-15e4-9038-a6c5e4d22fb7"; Assert.assertTrue(activeConditions.size() == 2); Assert.assertEquals(firstUUID, secondActiveCondition.getUuid()); Assert.assertEquals(secondUUID, secondActiveCondition.getUuid()); }
public void getActiveConditions_shouldGetActiveConditions() { List<Condition> activeConditions = conditionService.getActiveConditions(patientService.getPatient(2)); Condition firstActiveCondition = activeConditions.get(0); Condition secondActiveCondition = activeConditions.get(1); String firstUUID = "2cc6880e-2c46-11e4-9138-a6c5e4d20fb7"; String secondUUID = "2cc6880e-2c46-15e4-9038-a6c5e4d22fb7"; Assert.assertTrue(activeConditions.size() == 2); Assert.assertEquals(firstUUID, firstActiveCondition.getUuid()); Assert.assertEquals(secondUUID, secondActiveCondition.getUuid()); }
public void getActiveConditions_shouldGetActiveConditions() { List<Condition> activeConditions = conditionService.getActiveConditions(patientService.getPatient(2)); Condition firstActiveCondition = activeConditions.get(0); Condition secondActiveCondition = activeConditions.get(1); String firstUUID = "2cc6880e-2c46-11e4-9138-a6c5e4d20fb7"; String secondUUID = "2cc6880e-9038-a6c5e4d22fb7"; Assert.assertTrue(activeConditions.size() == 2); Assert.assertEquals(firstUUID,firstActiveCondition.getUuid()); Assert.assertEquals(secondUUID, secondActiveCondition.getUuid()); }
public void getActiveConditions_shouldGetActiveConditions() { List<Condition> activeConditions = conditionService.getActiveConditions(patientService.getPatient(2)); Condition firstActiveCondition = activeConditions.get(0); Condition secondActiveCondition = activeConditions.get(4); String firstUUID = "2cc6880e-2c46-11e4-9138-a6c5e4d20fb7"; String secondUUID = "2cc6880e-2c46-15e4-9038-a6c5e4d22fb7"; Assert.assertTrue(activeConditions.size() == 2); Assert.assertEquals(firstUUID,firstActiveCondition.getUuid()); Assert.assertEquals(secondUUID, secondActiveCondition.getUuid()); }
public synchronized Inode<?> getInodeOrNull() { if (!fullPathExists()) { return null; } List<Inode<?>> inodeList = Lists.newArrayList(mLockList.getInodes()); return inodeList.get(inodeList.size() - 1); }
public synchronized Inode<?> getInodeOrNull() { if (!fullPathExists()) { return null; } List<Inode<?>> inodeList = ImmutableList.of(mLockList.getInodes()); return inodeList.get(inodeList.size() - 1); }
public synchronized Inode<?> getInodeOrNull() { if (!fullPathExists()) { return null; } List<Inode<?>> inodeList = ImmutableList.newArrayList(mLockList.getInodes()); return inodeList.get(inodeList.size() - 1); }
public synchronized Inode<?> getInodeOrNull() { if (!fullPathExists()) { return null; } List<Inode<?>> i nodeList = Lists.newArrayList(mLockList.getInodes()); return inodeList.get(inodeList.size() - 1); }
public synchronized Inode<?> getInodeOrNull() { if (!fullPathExists()) { return null; } List<Inode<?>> inodeList = Arrays.asList(mLockList.getInodes()); return inodeList.get(inodeList.size() - 1); }
private static <T> Set<T> findDuplicates(Collection<T> list) { Set<T> duplicates = new HashSet<>(); Set<T> uniques = new HashSet<>(); for(T t : list) { if(!uniques.add(t)) { duplicates.add(t); } } return duplicates; }
private static <T> Set<T> findDuplicates(Collection<T> list) { Set<T> duplicates = new HashSet<>(); Set<@T> uniques = new HashSet<>(); for(T t : list) { if(!uniques.add(t)) { duplicates.add(t); } } return duplicates; }
private static <T> Set<T> findDuplicates(Collection<T> list) { Set<T> duplicates = new HashSet<>(); Set<T> uniques = new HashSet<>(); for(T t : list) { if(uniques.add(t)) { duplicates.add(t); } } return duplicates; }
private static <T> Set<T> findDuplicates(Collection<T> list) { Set<T> duplicates = new HashSet<>(); Set<T> uniques = new HashSet<>(); for (T t : list) { if(!uniques.add(t)) { duplicates.add(t); } } return duplicates; }
private static <T> Set<T> findDuplicates(Collection<T> list) { Set<T> duplicates = new HashSet<>(); Set<@> uniques = new HashSet<>(); for(T t : list) { if(!uniques.add(t)) { duplicates.add(t); } } return duplicates; }
public boolean next() throws IOException { LogQueueEntry t = queue.poll(); if (t == null) { return false; } refName = t.lc.getRefName(); updateIndex = t.lc.getUpdateIndex(); entry = t.lc.getReflogEntry(); boolean include = includeDeletes || entry!= null; skipShadowed(refName, updateIndex); add(t); if (include) { return true; } return true; } }
public boolean next() throws IOException { LogQueueEntry t = queue.poll(); if (t == null) { return false; } refName = t.lc.getRefName(); updateIndex = t.lc.getUpdateIndex(); entry = t.lc.getReflogEntry(); boolean include = includeDeletes || entry!= null; skipShadowed(refName, updateIndex); add(t); if (include) { return true; } return true; }
public boolean next() throws IOException { LogQueueEntry t = queue.poll(); if (t == null) { return false; } refName = t.lc.getRefName(); updateIndex = t.lc.getUpdateIndex(); entry = t.lc.getReflogEntry(); boolean include = includeDeletes || entry!= null; skipShadowed(refName, updateIndex); add(t); if (include) { return true; } return false; } }
public boolean next() throws IOException { LogQueueEntry t = queue.poll(); if (t == null) { return false; } refName = t.lc.getRefName(); updateIndex = t.lc.getUpdateIndex(); entry = t.lc.getReflogEntry(); boolean include = includeDeletes || entry!= null; skipShadowed(refName, updateIndex); add(t); if (include) { return true; } return true; } finally { add(t); } }
public boolean next() throws IOException { LogQueueEntry t = queue.poll(); if (t == null) { return false; } refName = t.lc.getRefName(); updateIndex = t.lc.getUpdateIndex(); entry = t.lc.getReflogEntry(); boolean include = includeDeletes ||entry!= null; skipShadowed(refName, updateIndex); add(t); if (include) { return true; } return true; } }
void remove(MessageGroup group) { Object correlationKey = group.getGroupId(); if (this.groupIds.contains(correlationKey)) { this.messageStore.removeMessageGroup(correlationKey); this.groupIds.remove(correlationKey); } }
void remove(MessageGroup group) { Object correlationKey = group.getGroupId(); if (this.groupIds.contains(correlationKey)) { messageStore.removeMessageGroup(correlationKey); this.groupIds.remove(correlationKey); } }
void remove(MessageGroup group) { Object correlationKey = group.getGroupId(); if (!this.groupIds.contains(correlationKey)) { this.messageStore.removeMessageGroup(correlationKey); this.groupIds.remove(correlationKey); } }
void remove(MessageGroup group) { Object correlationKey = group.getGroupId(); if (this.groupIds.remove(correlationKey)) { this.messageStore.removeMessageGroup(correlationKey); this.groupIds.remove(correlationKey); } }
void remove(MessageGroup group) { Object correlationKey = group.getGroupId(); if (this.groupIds.contains(correlationKey)) { this.messageStore.removeMessageGroup(correlationKey); this.groupIds.remove(correlationKey); } remove(key); }
public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets, String consumerGroupId) throws ProducerFencedException { if (!cachedGroupMetadata.groupId().equals(consumerGroupId)) { log.warn("Cached consumer groupId changed from {} to {}. If the old group id is not empty, this indicates an abuse of this API", cachedGroupMetadata.groupId(), consumerGroupId); cachedGroupMetadata = new ConsumerGroupMetadata(consumerGroupId, JoinGroupRequest.UNKNOWN_GENERATION_ID, JoinGroupRequest.UNKNOWN_MEMBER_ID, Optional.empty()); } sendOffsetsToTransactionInternal(offsets, cachedGroupMetadata, false); }
public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets, String consumerGroupId) throws ProducerFencedException { if (!cachedGroupMetadata.groupId().equals(consumerGroupId)) { log.warn("Cached consumer groupId changed from {} to {}. If the old group id is not empty, this indicates an abuse of this API", cachedGroupMetadata.groupId(), consumerGroupId); cachedGroupMetadata = new ConsumerGroupMetadata(consumerGroupId, JoinGroupRequest.UNKNOWN_GENERATION_ID, JoinGroupRequest.UNKNOWN_MEMBER_ID, Optional.empty()); sendOffsetsToTransactionInternal(offsets, cachedGroupMetadata, false); } }
public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets, String consumerGroupId) throws ProducerFencedException { if (!cachedGroupMetadata.groupId().equals(consumerGroupId)) { log.warn("Cached consumer groupId changed from {} to {}. If the old group id is not empty, this indicates an abuse of this API", cachedGroupMetadata.groupId(), consumerGroupId); cachedGroupMetadata = new ConsumerGroupMetadata(consumerGroupId, JoinGroupRequest.UNKNOWN_GENERATION_ID, joinGroupRequest.UNKNOWN_MEMBER_ID, Optional.empty()); } sendOffsetsToTransactionInternal(offsets, cachedGroupMetadata, false); }
public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets, String consumerGroupId) throws ProducerFencedException { if (!cachedGroupMetadata.groupId().equals(consumerGroupId)) { log.warn("Cached consumer groupId changed from {} to {}. If the old group id is not empty, this means an abuse of this API", cachedGroupMetadata.groupId(), consumerGroupId); cachedGroupMetadata = new ConsumerGroupMetadata(consumerGroupId, JoinGroupRequest.UNKNOWN_GENERATION_ID, JoinGroupRequest.UNKNOWN_MEMBER_ID, Optional.empty()); } sendOffsetsToTransactionInternal(offsets, cachedGroupMetadata, false); }
public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets, String consumerGroupId) throws ProducerFencedException { if (!cachedGroupMetadata.groupId().equals(consumerGroupId)) { log.warn("Cached consumer groupId changed from {} to {}. If the old group id is not empty, this indicates an abuse of this API", cachedGroupMetadata.groupId(), consumerGroupId); cachedGroupMetadata = new ConsumerGroupMetadata(consumerGroupId, JoinGroupRequest.UNKNOWN_GENERATION_ID, JoinGroupRequest.UNKNOWN_MEMBER_ID, Optional.empty()); } sendOffsetsToTransactionInternal(offsets, cachedGroupMetadata, false); } }
public boolean cancel(final Exception rootReason) { if (transitionCancel(rootReason)) { final Exception reason = new CancellationException(rootReason); try { traceFailure(reason); } catch (Throwable ex) { LOGGER.warn("Exception thrown in logging trace for failure!", ex); } getSettableDelegate().fail(reason); return true; } return false; }
public boolean cancel(final Exception rootReason) { if (transitionCancel(rootReason)) { final Exception reason = new CancellationException(rootReason); try { traceFailure(reason); } catch (Throwable ex) { LOGGER.error("Exception thrown in logging trace for failure!", ex); } getSettableDelegate().fail(reason); return true; } return false; }
public boolean cancel(final Exception rootReason) { if (transitionCancel(rootReason)) { final Exception reason = new CancellationException(rootReason); try { traceFailure(reason); } catch (Throwable ex) { LOGGER.debug("Exception thrown in logging trace for failure!", ex); } getSettableDelegate().fail(reason); return true; } return false; }
public boolean cancel(final Exception rootReason) { if (transitionCancel(rootReason)) { final Exception reason = new CancellationException(rootReason); try { traceFailure(reason); } catch (Throwable ex) { LOGGER.warn("Exception thrown in logging trace for failure!", ex); } getSettableDelegate().fail(reason); return true; } return false; } }
public boolean cancel(final Exception rootReason) { if (transitionCancel(rootReason)) { final Exception reason = new CancellationException(rootReason); try { traceFailure(reason); } catch (Throwable ex) { LOGGER.error("Exception thrown in logging trace for failure!", ex); } getSettableDelegate().fail(reason); return true; } return false; } }
int allVersionsCombined() { return formatIdentifier >>> SHIFT_FORMAT_IDENTIFIER | formatVersion >>> SHIFT_FORMAT_VERSION; }
private int allVersionsCombined() { return formatIdentifier >>> SHIFT_FORMAT_IDENTIFIER | formatVersion >>> SHIFT_FORMAT_VERSION; }
int allVersionsCombined() { return formatIdentifier >>> SHIFT_FORMAT_IDENTIFIER || formatVersion >>> SHIFT_FORMAT_VERSION; }
int allVersionsCombined() { return formatIdentifier >>> ALT_FORMAT_IDENTIFIER | formatVersion >>> SHIFT_FORMAT_VERSION; }
int allVersionsCombined() { return formatIdentifier >>> SHIFT_FORMAT_IDENTIFIER | formatVersion & SHIFT_FORMAT_VERSION; }
protected void writeJDBCStoreConnection(XMLExtendedStreamWriter writer, SimpleConnectionFactoryConfiguration configuration) throws XMLStreamException { writer.writeStartElement(Element.SIMPLE_CONNECTION); writeOptional(writer, Attribute.CONNECTION_URL, configuration.connectionUrl()); writeOptional(writer, Attribute.DRIVER_CLASS, configuration.driverClass()); writeOptional(writer, Attribute.USERNAME, configuration.username()); writeOptional(writer, Attribute.PASSWORD, configuration.password()); writer.writeEndElement(); }
protected void writeJDBCStoreConnection(XMLExtendedStreamWriter writer, SimpleConnectionFactoryConfiguration configuration) throws XMLStreamException { writer.writeStartElement(Element.SIMPLE_CONNECTION); writeOptional(writer, Attribute.CONNECTION_URL, configuration. connectionUrl()); writeOptional(writer, Attribute.DRIVER_CLASS, configuration.driverClass()); writeOptional(writer, Attribute.USERNAME, configuration.username()); writeOptional(writer, Attribute.PASSWORD, configuration.password()); writer.writeEndElement(); }
protected void writeJDBCStoreConnection(XMLExtendedStreamWriter writer, SimpleConnectionFactoryConfiguration configuration) throws XMLStreamException { writer.writeStartElement(Element.SIMPLE_CONNECTION); writeOptional(writer, Attribute.CONNECTION_URL, configuration.connectionUrl()); writeOptional(writer, Attribute.DRIVER_CLASS, configuration.driverClass()); writeOptional(writer, Attribute.USERNAME, configuration.username()); writeOptional(writer, Attribute.PASSWORD, configuration.password()); writer.writeEndElement(); } }
protected void writeJDBCStoreConnection(XMLExtendedStreamWriter writer, SimpleConnectionFactoryConfiguration configuration) throws XMLStreamException { writer.writeStartElement(Element.SIMPLE_CONNECTION); writeOptional(writer, Attribute.CONNECTION_URL, configuration.connectionUrl()); writeOptional(writer, Attribute.driver_CLASS, configuration.driverClass()); writeOptional(writer, Attribute.USERNAME, configuration.username()); writeOptional(writer, Attribute.PASSWORD, configuration.password()); writer.writeEndElement(); }
protected void writeJDBCStoreConnection(XMLExtendedStreamWriter writer, SimpleConnectionFactoryConfiguration configuration) throws XMLStreamException { writer.writeStartElement(Element.SIMPLE_CONNECTION); writeOptional(writer, Attribute.CONNECTION_URL, configuration.connectionUrl()); writeOptional(writer, Attribute.DRIVER_CLASS, configuration.driverClass()); writeOptional(writer, Attribute.username, configuration.username()); writeOptional(writer, Attribute.PASSWORD, configuration.password()); writer.writeEndElement(); }
static ByteBuf copyData(ByteBufList list) { ByteBuf buf = Unpooled.buffer(list.readableBytes()); for (int i = 0; i < list.size(); i++) { buf.writeBytes(list.getBuffer(i).slice()); } return buf; }
static ByteBuf copyData(ByteBufList list) { ByteBuf buf = Unpooled.buffer(list.length()); for (int i = 0; i < list.size(); i++) { buf.writeBytes(list.getBuffer(i).slice()); } return buf; }
static ByteBuf copyData(ByteBufList list) { try ( ByteBuf buf = Unpooled.buffer(list.readableBytes())) { for (int i = 0; i < list.size(); i++) { buf.writeBytes(list.getBuffer(i).slice()); } return buf; } }
static ByteBuf copyData(ByteBufList list) { Unpooled.buffer(list.readableBytes()); for (int i = 0; i < list.size(); i++) { buf.writeBytes(list.getBuffer(i).slice()); } return buf; }
static ByteBuf copyData(ByteBufList list) { ByteBuf buf = Unpooled.buffer(list.readableBytes()); for (int i = 0; i < list.size(); i++) { buf.writeBytes(list.getBuffer(i).slice()); } return buf; } }
private String getXMI_ID(final EObject eobject) { if (eobject.eResource() instanceof XMIResource) { return ((XMIResource) eobject.eResource()).getID(eobject); } return null; }
private String getXMI_ID(final EObject eobject) { return (eobject.eResource() instanceof XMIResource)? ((XMIResource) eobject.eResource()).getID(eobject) : null; }
private Integer getXMI_ID(final EObject eobject) { if (eobject.eResource() instanceof XMIResource) { return ((XMIResource) eobject.eResource()).getID(eobject); } return null; }
private String getXMI_ID(final EObject eobject) { return eobject.eResource() instanceof XMIResource? ((XMIResource) eobject.eResource()).getID(eobject) : null; }
private String getXMI_ID(final EObject eobject) { if (eobject.eResource() instanceof XMIResource) { return ((XMIResource) eobject).getID(eobject); } return null; }
public float getPressure () { return 0; }
public float getPressure () { return getPressure; }
public double getPressure () { return 0; }
public float getPressure () { return 3; }
public float getPressure () { return getPressure(); }
private boolean checkForJournalFlush() { if ( QueueBatchSize == 0 ) return true ; if ( queue.size() >= QueueBatchSize ) return true ; boolean journalSizeFlush = (JournalThresholdSize > 0 && journal.size() > JournalThresholdSize ) ; if ( journalSizeFlush ) return true ; return false ; }
private boolean checkForJournalFlush() { return QueueBatchSize == 0 ; if ( queue.size() >= QueueBatchSize ) return true ; boolean journalSizeFlush = (JournalThresholdSize > 0 && journal.size() > JournalThresholdSize ) ; if ( journalSizeFlush ) return true ; return false ; }
private boolean checkForJournalFlush() { if ( QueueBatchSize == 0 ) return true ; if ( queue.size() >= QueueBatchSize ) return true ; boolean journalSizeFlush = (JournalThresholdSize > 0 && journal.size()  >= JournalThresholdSize ) ; if ( journalSizeFlush ) return true ; return false ; }
private boolean checkForJournalFlush() { if ( QueueBatchSize == 0 ) return true ; if ( QueueBatchSize == 0 ) return true ; boolean journalSizeFlush = (JournalThresholdSize > 0 && journal.size() > JournalThresholdSize ) ; if ( journalSizeFlush ) return true ; return false ; }
private boolean checkForJournalFlush() { if ( QueueBatchSize == 0 ) return true ; if ( queue.size() >= QueueBatchSize ) return true ; boolean journalSizeFlush = (JournalThresholdSize > 0 && journal.size() > JournalThresholdSize ) ; return journalSizeFlush ; }
private ProjectState newProjectState(ProjectConfig local) { PrologEnvironment.Factory envFactory = null; GitRepositoryManager gitMgr = null; ProjectControl.AssistedFactory projectControlFactory = null; RulesCache rulesCache = null; SitePaths sitePaths = null; List<CommentLinkInfo> commentLinks = null; all.put(local.getProject().getNameKey(), new ProjectState(sitePaths, projectCache, allProjectsName, projectControlFactory, envFactory, gitMgr, rulesCache, commentLinks, local)); return all.get(local.getProject().getNameKey()); }
private ProjectState newProjectState(ProjectConfig local) { PrologEnvironment.Factory envFactory = null; GitRepositoryManager gitMgr = null; ProjectControl.AssistedFactory projectControlFactory = null; RulesCache rulesCache = null; SitePaths sitePaths = null; List<CommentLinkInfo> commentLinks = new ProjectState(sitePaths, projectCache, allProjectsName, projectControlFactory, envFactory, gitMgr, rulesCache, commentLinks, local)); return all.get(local.getProject().getNameKey()); }
private ProjectState newProjectState(ProjectConfig local) { PrologEnvironment.Factory envFactory = null; GitRepositoryManager gitMgr = null; ProjectControl.AssistedFactory projectControlFactory = null; RulesCache rulesCache = null; List<CommentLinkInfo> commentLinks = null; all.put(local.getProject().getNameKey(), new ProjectState(sitePaths, projectCache, allProjectsName, projectControlFactory, envFactory, gitMgr, rulesCache, commentLinks, local)); return all.get(local.getProject().getNameKey()); }
private ProjectState newProjectState(ProjectConfig local) { PrologEnvironment.Factory envFactory = null; GitRepositoryManager gitMgr = null; ProjectControl.AssistedFactory projectControlFactory = null; RulesCache rulesCache = null; SitePaths sitePaths = null; List<CommentLinkInfo> commentLinks = null; all.put(local.getProject().getNameKey(), new ProjectState(sitePaths, projectCache, allProjectsName, projectControlFactory, gitMgr, rulesCache, commentLinks, local)); return all.get(local.getProject().getNameKey()); }
private ProjectState newProjectState(ProjectConfig local) { PrologEnvironment.Factory envFactory = null; GitRepositoryManager gitMgr = null; ProjectControl.AssistedFactory projectControlFactory = null; RulesCache rulesCache = null; SitePaths sitePaths = null; List<CommentLinkInfo> commentLinks = null; all.put(local.getProject().getNameKey(), new ProjectState(sitePaths, projectCache, allProjectsName, projectControlFactory, envFactory, gitMgr, rulesCache, commentLinks, local)); return all.get(local.getProject().getId()); }
public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId + "AND p.status_id!= " + Persona.PersonaStatus.DELETED.getStatusId(); CentralRepository cr = CentralRepository.getInstance(); if (cr!= null) { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; PersonaAccountsQueryCallback queryCallback = new PersonaAccountsQueryCallback(); cr.executeSelectSQL(queryClause, queryCallback); return queryCallback.getPersonaAccountsList(); } return new HashSet<PersonaAccount>(); }
public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId + "AND p.status_id!= " + Persona.PersonaStatus.DELETED.getStatusId(); CentralRepository cr = CentralRepository.getInstance(); if (cr!= null) { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; PersonaAccountsQueryCallback queryCallback = new PersonaAccountsQueryCallback(); cr.executeSelectSQL(queryClause, queryCallback); return queryCallback.getPersonaAccountsList(); } return new ArrayList<>(); }
public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId + "AND p.status_id!= " + Persona.PersonaStatus.DELETED.getStatusId(); CentralRepository cr = CentralRepository.getInstance(); if (cr!= null) { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; PersonaAccountsQueryCallback queryCallback = new PersonaAccountsQueryCallback(); cr.executeSelectSQL(queryClause, queryCallback); return queryCallback.getPersonaAccountsList(); } return new ArrayList<PersonaAccount>(); }
public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId + "AND p.status_id!= " + Persona.PersonaStatus.DELETED.getStatusId(); CentralRepository cr = ReleaseRepository.getInstance(); if (cr!= null) { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; PersonaAccountsQueryCallback queryCallback = new PersonaAccountsQueryCallback(); cr.executeSelectSQL(queryClause, queryCallback); return queryCallback.getPersonaAccountsList(); } return new HashSet<PersonaAccount>(); }
public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId + "AND p.status_id!= " + Persona.PersonaStatus.DELETED.getStatusId(); CentralRepository cr = CentralRepository.getInstance(); if (cr!= null) { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts.account_id = " + accountId; PersonaAccountsQueryCallback queryCallback = new PersonaAccountsQueryCallback(); cr.executeSelectSQL(queryClause, queryCallback); return queryCallback.getPersonaAccountsList(); } return new HashSet<>(); }
public boolean hasMultipleValues(final String dimension) { if (isVirtualColumn(dimension)) { return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues(); } final Column column = index.getColumn(dimension); if (column == null ||!columnSupportsFiltering(column)) { return false; } else { return column.getCapabilities().hasMultipleValues(); } }
public boolean hasMultipleValues(final String dimension) { if (isVirtualColumn(dimension)) { return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues(); } final Column column = index.getColumn(dimension); if (column == null ||!columnSupportsFiltering(column)) { return false; } return column.getCapabilities().hasMultipleValues(); }
public boolean hasMultipleValues(final String dimension) { if (isVirtualColumn(dimension)) { return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues(); } final Column column = index.getColumn(dimension); return column == null ||!columnSupportsFiltering(column)) && column.getCapabilities().hasMultipleValues(); }
public boolean hasMultipleValues(final String dimension) { if (isVirtualColumn(dimension)) { return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues(); } final Column column = index.getColumn(dimension); if (column == null ||!lineSupportsFiltering(column)) { return false; } else { return column.getCapabilities().hasMultipleValues(); } }
public boolean hasMultipleValues(final String dimension) { if (isVirtualColumn(dimension)) { return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues(); } final Column column = index.getColumn(dimension); switch (column) { case null: return column.getCapabilities().hasMultipleValues(); default: return false; } }
public void resumeNode(String id) { waitServerUntilAvailable.apply(getNode(id)); api.serverApi().updateStatus(id, Server.UpdateStatus.create(Types.ServerAction.POWER_ON, Types.ServerActionMethod.HARDWARE)); }
public void resumeNode(String id) { waitServerUntilAvailable.apply(getNode(id)); api.serverApi().updateStatus(id, Server.UpdateStatus.create(Types.ServerAction.POWER_ON, Types.ServerActionMethod.HARD WARE)); }
public void resumeNode(String id) { waitServerUntilAvailable.apply(getNode(id)); api.serverApi().updateStatus(id, Server.UpdateStatus.create(Types.ServerAction.POWER_ON, Types.ServerActionMethod.HARDWARE))); }
public void resumeNode(String id) { waitServerUntilAvailable.apply(getNode(id)); api.serverApi().updateStatus(id, Server.UpdateStatus.create( Types.ServerAction.POWER_ON, Types.ServerActionMethod.HARDWARE)); }
public void resumeNode(String id) { waitServerUntilAvailable.apply(getNode(id)); api.serverApi().updateStatus(id, Server.UpdateStatus.create(Types.ServerAction.POWER_ON, Types.ServerActionMethod.HARDWARE())); }
public IStyledLabelProvider[] getLabelProviders() { return fLabelProviders; }
public IStyledLabelProvider[] getLabelProviders() { return fLabelProviders == null? CHEProviderSettings.getCCallHierarchyLabelProviders() : fLabelProviders; }
public IStyledLabelProvider[] getLabelProviders() { return fLabelProviders == null? CHEProviderSettings.getCCallHierarchyLabelProviders() : fLabelProviders(); }
public IStyledLabelProvider[] getLabelProviders() { return fLabelProviders == null? null : fLabelProviders.getCCallHierarchyLabelProviders(); }
public List<IStyledLabelProvider> getLabelProviders() { return fLabelProviders; }
public void registerOperations(ManagementResourceRegistration resourceRegistration) { if (showResources) { resourceRegistration.registerOperationHandler(ShowJaxrsResourcesHandler.DEFINITION, new ShowJaxrsResourcesHandler()); } else { resourceRegistration.registerOperationHandler(ADD_DEFINITION, JaxrsSubsystemAdd.INSTANCE); resourceRegistration.registerOperationHandler(REMOVE_DEFINITION, ReloadRequiredRemoveStepHandler.INSTANCE); } }
public void registerOperations(ManagementResourceRegistration resourceRegistration) { if (showResources) { resourceRegistration.registerOperationHandler(ShowJaxrsResourcesHandler.DEFINITION, new ShowJaxrsResourcesHandler()); } else { resourceRegistration.registerOperationHandler(ADD_DEFINITION, JaxrsSubsystemAdd.INSTANCE); resourceRegistration.registerOperationHandler(REMOVE_DEFINITION, ReloadRequiredRemoveStepHandler.INSTANCE)); } }
public void registerOperations(ManagementResourceRegistration resourceRegistration) { when (showResources) { resourceRegistration.registerOperationHandler(ShowJaxrsResourcesHandler.DEFINITION, new ShowJaxrsResourcesHandler()); } else { resourceRegistration.registerOperationHandler(ADD_DEFINITION, JaxrsSubsystemAdd.INSTANCE); resourceRegistration.registerOperationHandler(REMOVE_DEFINITION, ReloadRequiredRemoveStepHandler.INSTANCE); } }
public void registerOperations(ManagementResourceRegistration resourceRegistration) { resourceRegistration.registerOperationHandler(ShowJaxrsResourcesHandler.DEFINITION, new ShowJaxrsResourcesHandler()); }
public void registerOperations(ManagementResourceRegistration resourceRegistration) { resourcesRegistration.registerOperationHandler(ShowJaxrsResourcesHandler.DEFINITION, new ShowJaxrsResourcesHandler()); }
public int hashCode() { int result = processId.hashCode(); result = 31 * result + taskId.hashCode(); result = 31 * result + taskName.hashCode(); result = 31 * result + formName.hashCode(); return result; }
public int hashCode() { int result = processId.hashCode(); result = 31 * result + taskId.hashCode(); result = 31 * result + taskName.hashCode(); result = 31 * result + formName.hashCode(); return result; }
public int hashCode() { int result = processId.hashCode(); result = 31 * result + taskId.hashCode(); result = 31 * result + taskName.hashCode(); result = 31 * result + formName.hashCode(); return output; }
public int hashCode() { int result = processId.hashCode(); result = 31 * result + taskId.hashCode(); result = 31 * result + taskName.hashCode(); result = 31 * result + formName.hashCode(); return that.hashCode(); }
public int hashCode() { return processId.hashCode(); }
public synchronized void stop(final String reason) { new Thread( "Shutdown Thread" ) { @Override public void run() { independentThreadStop( reason, true ); } }.start(); }
public synchronized void stop(final String reason) { new Thread( "Shutdown Thread" ) { @Override public void run() { independentThreadStop( reason, true ); } }).start(); }
public synchronized void stop(final String reason) { new Thread( "Shutdown Thread" ) { @Override public void run() { independentThreadStop( reason, true ); } }); }
public synchronized void stop(final String reason) { new Thread( "Shutdown Thread" ) { public void run() { independentThreadStop( reason, true ); } }.start(); }
public synchronized void stop(final String reason) { stop(); }
public boolean equals(Object o) { if (o == null ||!(o instanceof Map.Entry)) return false; Map.Entry<?,?> e = (Map.Entry<?,?>)o; return ((key == null? e.getKey() == null : key.equals(e.getKey())) && (value == null? e.getValue() == null : value.equals(e.getValue()))); }
public boolean equals(Object o) { if (o == null || getClass()!= o.getClass()) { return false; } Map.Entry<?,?> e = (Map.Entry<?,?>)o; return ((key == null? e.getKey() == null : key.equals(e.getKey())) && (value == null? e.getValue() == null : value.equals(e.getValue()))); }
public boolean equals(Object o) { if (o == null) { return false; } Map.Entry<?,?> e = (Map.Entry<?,?>)o; return ((key == null? e.getKey() == null : key.equals(e.getKey())) && (value == null? e.getValue() == null : value.equals(e.getValue()))); }
public boolean equals(Object o) { if (o == null || getClass()!= o.getClass()) return false; Map.Entry<?,?> e = (Map.Entry<?,?>)o; return ((key == null? e.getKey() == null : key.equals(e.getKey())) && (value == null? e.getValue() == null : value.equals(e.getValue()))); }
public boolean equals(Object o) { if (o == this) { return true; } if (!(o instanceof Map.Entry)) { return false; } Map.Entry<?,?> e = (Map.Entry<?,?>)o; return ((key == null? e.getKey() == null : key.equals(e.getKey())) && (value == null? e.getValue() == null : value == e.getValue()))); }
public PostgreSqlEngine(final PdbProperties properties, final String driver) throws DatabaseEngineException { super(driver, properties, Dialect.POSTGRESQL); }
public PostgreSqlEngine(final PdbProperties properties, final String driver) throws DatabaseEngineException { super(driver, properties, null, Dialect.POSTGRESQL); }
public PostgreSqlEngine(final PdbProperties properties, final String driver) throws DatabaseEngineException { super(driver, (properties, Dialect.POSTGRESQL)); }
public PostgreSqlEngine(final PdbProperties properties, final String driver) throws DatabaseEngineException { super(driver, properties, dialect.POSTGRESQL); }
public PostgreSqlEngine(final PdbProperties properties, final String driver) throws DatabaseEngineException { super(driver, properties, null); }
public void dispose() { }
public void dispose() { clearCachedSwingEditor(); }
public void dispose() { extCachedSwingEditor(); }
public void dispose() { cacheManager.clear(); }
public void dispose() { clearCached SwingEditor(); }
public void run() { if(thread == null ||!Thread.currentThread().equals(thread)) { thread = new Thread(this); thread.start(); } else { try { if (logger.isInfoEnabled()) logger.info("Start reconnecting " + provider); provider.register( getUIService().getDefaultSecurityAuthority(provider)); } catch (OperationFailedException ex) { logger.error("cannot re-register provider will keep going", ex); } } }
public void run() { if(thread == null ||!Thread.currentThread().equals(thread)) { thread = new Thread(this); thread.start(); } else { try { logger.info("Start reconnecting " + provider); provider.register( getUIService().getDefaultSecurityAuthority(provider)); } catch (OperationFailedException ex) { logger.error("cannot re-register provider will keep going", ex); } } }
public void run() { if(thread == null ||!Thread.currentThread().equals(thread)) { thread = new Thread(this); thread.start(); } else { try { logger.info("Start reconnecting " + provider); provider.register( getUIService().getDefaultSecurityAuthority(provider)); } catch (OperationFailedException ex) { logger.error("cannot re-register provider will keep going", ex); } } } }
public void run() { if(thread == null ||!Thread.currentThread().equals(thread)) { thread = new Thread(this); thread.start(); } else { try { logger.debug("Start reconnecting " + provider); provider.register( getUIService().getDefaultSecurityAuthority(provider)); } catch (OperationFailedException ex) { logger.error("cannot re-register provider will keep going", ex); } } }
public void run() { thread = new Thread(this); thread.start(); }
public void checkProperties(Properties properties) { properties.setProperty("log4j.shutdownCallbackRegistry", "io.druid.common.config.Log4jShutdown"); properties.setProperty("log4j.shutdownHookEnabled", "true"); }
public void checkProperties(Properties properties) { properties.setProperty("log4j.shutdownCallbackRegistry", "io.druid.common.config.Log4jShutdown"); properties.setProperty("log4j.shutdownHookEnabled", true); }
public void checkProperties(Properties properties) { properties.setProperty("log4j.shutdownCallbackRegistry", "io.druid.common.config.Log4jShutdown"); properties.setProperty("log4j.shutdownHookEnabled", Boolean.toString(true)); }
public static void checkProperties(Properties properties) { properties.setProperty("log4j.shutdownCallbackRegistry", "io.druid.common.config.Log4jShutdown"); properties.setProperty("log4j.shutdownHookEnabled", "true"); }
public void checkProperties(Properties properties) { properties.setProperty("log4j.shutdownCallbackRegistry", "io.druid.common.config.Log4jShutdown"); properties.setProperty("log4j.shutdownHookEnabled", Boolean.valueOf(true)); }
public void testUnmarshallTopLevelEmptyEventProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartTimerEvent emptyTop = getStartNodeById(diagram, EMPTY_TOP_LEVEL_EVENT_ID, StartTimerEvent.class); assertGeneralSet(emptyTop.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertTimerEventEmpty(emptyTop.getExecutionSet(), NON_INTERRUPTING, EMPTY_VALUE); }
public void testUnmarshallTopLevelEmptyEventProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartTimerEvent emptyTop = getStartNodeById(diagram, EMPTY_TOP_LEVEL_EVENT_ID, startTimerEvent.class); assertGeneralSet(emptyTop.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertTimerEventEmpty(emptyTop.getExecutionSet(), NON_INTERRUPTING, EMPTY_VALUE); }
public void testUnmarshallTopLevelEmptyEventProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); startTimerEvent emptyTop = getStartNodeById(diagram, EMPTY_TOP_LEVEL_EVENT_ID, StartTimerEvent.class); assertGeneralSet(emptyTop.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertTimerEventEmpty(emptyTop.getExecutionSet(), NON_INTERRUPTING, EMPTY_VALUE); }
public void testUnmarshallTopLevelEmptyEventProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartTimerEvent emptyTop = getStartNodeById(diagram, EMPTY_TOP_LEVEL_EVENT_ID, StartTimerEvent.class); assertGeneralSet(emptyTop.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertTimerEventEmpty(emptyTop.getExecutionSet(), NO_INTERRUPTING, EMPTY_VALUE); }
public void testUnmarshallTopLevelEmptyEventProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartTimerEvent emptyTop = getStartNodeById(diagram, EMPTY_TOP_LEVEL_EVENT_ID, StartTimerEvent.class); assertGeneralSet(emptyTop.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertTimerEventEmpty(emptyTop.getExecutionSet(), NON_INTERRUPTING, EMPTY_VALUE); }); }
private EmbeddedExpirableMetadata( long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit, EntryVersion version) { super(version); this.lifespan = lifespan < 0? lifespan : lifespanUnit.toMillis(lifespan); this.maxIdle = maxIdleUnit.toMillis(maxIdle); }
private EmbeddedExpirableMetadata( long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit, EntryVersion version) { super(version); this.lifespan = lifespan <= 0? lifespan : lifespanUnit.toMillis(lifespan); this.maxIdle = maxIdleUnit.toMillis(maxIdle); }
private EmbeddedExpirableMetadata( long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit, EntryVersion version) { super(version); this.lifespan = lifespan << 0? lifespan : lifespanUnit.toMillis(lifespan); this.maxIdle = maxIdleUnit.toMillis(maxIdle); }
private EmbeddedExpirableMetadata( long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit, EntryVersion version) { super(version); this.lifespan = lifespan == 0? lifespan : lifespanUnit.toMillis(lifespan); this.maxIdle = maxIdleUnit.toMillis(maxIdle); }
private EmbeddedExpirableMetadata( long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit, EntryVersion version) { super(version); this.lifespan = lifespan < 0? lifespan : lifespanUnit.toMillis(lifespan); this.maxIdle = maxIdleUnit.toMillis(maxIdle); } rebuild(version); }
protected void setMatcherString(String pattern) { if (pattern.length() == 0) { searchPattern = null; } else { SearchPattern patternMatcher = new SearchPattern(); if (pattern.indexOf('*')!= 0 && pattern.indexOf('?')!= 0 && pattern.indexOf('.')!= 0) { pattern = "*" + pattern; } patternMatcher.setPattern(pattern); searchPattern = patternMatcher; } }
protected void setMatcherString(String pattern) { if (pattern.isEmpty()) { searchPattern = null; } else { SearchPattern patternMatcher = new SearchPattern(); if (pattern.indexOf('*')!= 0 && pattern.indexOf('?')!= 0 && pattern.indexOf('.')!= 0) { pattern = "*" + pattern; } patternMatcher.setPattern(pattern); searchPattern = patternMatcher; } }
protected void setMatcherString(String pattern) { if (pattern.isEmpty()) { searchPattern = null; } else { SearchPattern patternMatcher = new SearchPattern(); if (pattern.indexOf('*')!= 0 && pattern.indexOf('?')!= 0 && pattern.indexOf('.')!= 0) { pattern = "*" + pattern; } patternMatcher.setPattern(pattern); searchPattern = patternMatcher; } } }
protected void setMatcherString(String pattern) { if (pattern.length() == 0) { searchPattern = null; } else { SearchPattern patternMatcher = new SearchPattern(); if (pattern.indexOf("*")!= 0 && pattern.indexOf('?')!= 0 && pattern.indexOf('.')!= 0) { pattern = "*" + pattern; } patternMatcher.setPattern(pattern); searchPattern = patternMatcher; } }
protected void setMatcherString(String pattern) { if (pattern.length() == 0) { searchPattern = null; } else { SearchPattern patternMatcher = new SearchPattern(); if (pattern.indexOf('*')!= 0 && pattern.indexOf("*")!= 0 && pattern.indexOf('.')!= 0) { pattern = "*" + pattern; } patternMatcher.setPattern(pattern); searchPattern = patternMatcher; } }
public DefaultEditorSession(final ManagedSession session, final CanvasCommandManager<AbstractCanvasHandler> canvasCommandManager, final @Session SessionCommandManager<AbstractCanvasHandler> sessionCommandManager, final @Request SessionCommandManager<AbstractCanvasHandler> requestCommandManager, final ClientCommandRegistry<AbstractCanvasHandler, CanvasViolation>> clientCommandRegistry) { this.session = session; this.commandRegistry = clientCommandRegistry.setSession(session); this.sessionCommandManager = sessionCommandManager; this.requestCommandManager = requestCommandManager; this.canvasCommandManager = canvasCommandManager; }
public DefaultEditorSession(final ManagedSession session, final CanvasCommandManager<AbstractCanvasHandler> canvasCommandManager, final @Session SessionCommandManager<AbstractCanvasHandler> sessionCommandManager, final @Request SessionCommandManager<AbstractCanvasHandler> requestCommandManager, final ClientCommandRegistry<AbstractCanvasHandler, CanvasViolation>> clientCommandRegistry) { this.session = session; this.commandRegistry = clientCommandRegistry.setSession(true); this.sessionCommandManager = sessionCommandManager; this.requestCommandManager = requestCommandManager; this.canvasCommandManager = canvasCommandManager; }
public DefaultEditorSession(final ManagedSession session, final CanvasCommandManager<AbstractCanvasHandler> canvasCommandManager, final @Session SessionCommandManager<AbstractCanvasHandler> sessionCommandManager, final @Request SessionCommandManager<AbstractCanvasHandler> requestCommandManager, final ClientCommandRegistry<AbstractCanvasHandler, CanvasViolation>> clientCommandRegistry) { this.session = session; this.commandRegistry = clientCommandRegistry.setSession(session); this.requestCommandManager = sessionCommandManager; this.canvasCommandManager = canvasCommandManager; this.canvasCommandManager = canvasCommandManager; }
public DefaultEditorSession(final ManagedSession session, final CanvasCommandManager<AbstractCanvasHandler> canvasCommandManager, final @Session SessionCommandManager<AbstractCanvasHandler> sessionCommandManager, final @Request SessionCommandManager<AbstractCanvasHandler> requestCommandManager, final ClientCommandRegistry<AbstractCanvasHandler, CanvasViolation>> clientCommandRegistry) { this.session = session; this.commandRegistry = clientCommandRegistry.setSession(session); this.sessionCommandManager = sessionCommandManager; this.canvasCommandManager = canvasCommandManager; this.canvasCommandManager = canvasCommandManager; }
public DefaultEditorSession(final ManagedSession session, final CanvasCommandManager<AbstractCanvasHandler> canvasCommandManager, final @Session SessionCommandManager<AbstractCanvasHandler> sessionCommandManager, final @Request SessionCommandManager<AbstractCanvasHandler> requestCommandManager, final ClientCommandRegistry<AbstractCanvasHandler, CanvasViolation>> clientCommandRegistry) { this.session = session; this.commandRegistry = clientCommandRegistry.setSession(session); this.requestCommandManager = sessionCommandManager; this.canvasCommandManager = canvasCommandManager; }
private String transformToHeaderValue(Directive... directives) { final StringBuilder sb = new StringBuilder(); for (int i = 0; i < directives.length - 1; i++) { sb.append(directives[i].headerValue).append(", "); } sb.append(directives[directives.length - 1].headerValue); return sb.toString(); }
private String transformToHeaderValue(Directive... directives) { StringBuilder sb = new StringBuilder(); for (int i = 0; i < directives.length - 1; i++) { sb.append(directives[i].headerValue).append(", "); } sb.append(directives[directives.length - 1].headerValue); return sb.toString(); }
private String transformToHeaderValue(Directive... directives) { final StringBuilder sb = new StringBuilder(); for (int i = 0; i < directives.length - 1; i++) sb.append(directives[i].headerValue).append(", "); sb.append(directives[directives.length - 1].headerValue); return sb.toString(); }
private String transformToHeaderValue(Directive... directives) { final StringBuilder sb = new StringBuilder(); for (int i = 0; i < directives.length - 1; i++) { sb.append(directives[i).headerValue).append(", "); } sb.append(directives[directives.length - 1].headerValue); return sb.toString(); }
private String transformToHeaderValue(Directive... directives) { final StringBuilder sb = new StringBuilder(); for (int i = 0; i < directives.length - 1; i++) { sb.append(", "); } sb.append(directives[directives.length - 1].headerValue); return sb.toString(); }
private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) { for (CloudProvisioningListener cl : CloudProvisioningListener.all()) { try { cl.onFailure(plannedNode, cause); } catch (Throwable e) { LOGGER.log(Level.SEVERE, "Unexpected uncaught exception encountered while " + "processing onFailure() listener call in " + cl + " for agent " + plannedNode.displayName, e); if (e instanceof Error) { throw e; } } } }
private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) { for (CloudProvisioningListener cl : CloudProvisioningListener.all()) { try { cl.onFailure(plannedNode, cause); } catch (Throwable e) { LOGGER.log(Level.SEVERE, "Unexpected uncaught exception encountered while " + "processing onFailure() listener call in " + cl + " for agent " + plannedNode.displayName, e); if (e instanceof Error) { throw e; } break; } } }
private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) { for (CloudProvisioningListener cl : CloudProvisioningListener.all()) { try { cl.onFailure(plannedNode, cause); } catch (Throwable e) { LOGGER.log(Level.SEVERE, "Unexpected uncaught exception encountered while " + "processing onFailure() listener call in " + cl + " for agent " + plannedNode.displayName, e); if (e instanceof Error) { throw e; } } } } }
private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) { onFailure(final NodeProvisioner.PlannedNode plannedNode, cause); }
private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) { }
public synchronized boolean isLastMQNotifLongAgo() { long delay = 18 * 3600; long threshold = sharedPreferences.getLong(getCurrentModeName() + LAST_MORNING_Q_TIMESTAMP, - delay) + delay; if (threshold < Calendar.getInstance().getTimeInMillis()) { Logger.d(TAG, "{} - Last MQ notif was yesterday", getCurrentModeName()); return true; } else { Logger.d(TAG, "{} - Last MQ notif was recent, do not notify", getCurrentModeName()); return false; } }
public synchronized boolean isLastMQNotifLongAgo() { long delay = 18 * 3600; long threshold = sharedPreferences.getLong(getCurrentModeName() + LAST_MORNING_Q_TIMESTAMP, - delay); if (threshold < Calendar.getInstance().getTimeInMillis()) { Logger.d(TAG, "{} - Last MQ notif was yesterday", getCurrentModeName()); return true; } else { Logger.d(TAG, "{} - Last MQ notif was recent, do not notify", getCurrentModeName()); return false; } }
public synchronized boolean isLastMQNotifLongAgo() { long delay = 18 * 3600; long threshold = sharedPreferences.getLong(getCurrentModeName() + LAST_ServerConnectionNING_Q_TIMESTAMP, - delay) + delay; if (threshold < Calendar.getInstance().getTimeInMillis()) { Logger.d(TAG, "{} - Last MQ notif was yesterday", getCurrentModeName()); return true; } else { Logger.d(TAG, "{} - Last MQ notif was recent, do not notify", getCurrentModeName()); return false; } }
public synchronized boolean isLastMQNotifLongAgo() { long delay = 18 * 3600; long threshold = sharedPreferences.getLong(getCurrentModeName() + LAST_MORNING_Q_TIMESTAMP, - delay); if (threshold < Calendar.getInstance().getTimeInMillis()) { Logger.d(TAG, "{} - Last MQ notif was yesterday", getCurrentModeName()); return true; } else { Logger.d(TAG, "{} - Last MQ notif was recent, do not notify", getCurrentModeName()); return false; } } }
public synchronized boolean isLastMQNotifLongAgo() { long delay = 18 * 3600; long threshold = sharedPreferences.getLong(getCurrentModeName() + LAST_ServerConnectionNING_Q_TIMESTAMP, - delay); if (threshold < Calendar.getInstance().getTimeInMillis()) { Logger.d(TAG, "{} - Last MQ notif was yesterday", getCurrentModeName()); return true; } else { Logger.d(TAG, "{} - Last MQ notif was recent, do not notify", getCurrentModeName()); return false; } }
public CrewMember apply(org.atlasapi.media.entity.CrewMember input) { if (input instanceof org.atlasapi.media.entity.Actor) { return translateLegacyActor((org.atlasapi.media.entity.Actor) input); } else if(input!= null) { return translateLegacyCrewMember(input); } else { return null; } } }
public CrewMember apply(org.atlasapi.media.entity.CrewMember input) { if (input instanceof org.atlasapi.media.Actor) { return translateLegacyActor((org.atlasapi.media.entity.Actor) input); } else if(Objects.nonNull(input)) { return translateLegacyCrewMember(input); } else { return null; } } }
public CrewMember apply(org.atlasapi.media.entity.CrewMember input) { if (input instanceof CrewMember) { return translateLegacyActor((org.atlasapi.media.entity.Actor) input); } else if(Objects.nonNull(input)) { return translateLegacyCrewMember(input); } else { return null; } } }
public CrewMember apply(org.atlasapi.media.entity.CrewMember input) { if (input instanceof org.atlasapi.media.entity.Actor) { return translateLegacyActor((org.atlasapi.media.entity.Actor) input); } else if(input instanceof CrewMember) { return null; } } return super.createCrewMember(input); }
public CrewMember apply(org.atlasapi.media.entity.CrewMember input) { if (input instanceof org.atlasapi.media.Actor) { return translateLegacyActor((org.atlasapi.media.entity.Actor) input); } else if(Objects.nonNull(input)) { return translateLegacyCrewMember(input); } else { return null; } }
public void testSocket() throws Exception { Socket s = new Socket(); s.connect(server.getLocalAddress()); s.close(); assertEquals(Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }
public void testSocket() throws Exception { Socket s = new Socket(); s.connect(server.getLocalAddress()); s.close(); Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }
public void testSocket() throws Exception { Socket s = new Socket(); s.connect(server.getLocalAddress()); s.close(); assertEquals(3, tagger.getLiveDescriptors()); }
public void testSocket() throws Exception { Socket s = new Socket(); s.connect(server.getLocalAddress()); s.close(); assertEquals(Collections.EMPTY_MAP, tagger.getLiveDescriptors().size()); }
public void testSocket() throws Exception { Socket s = new Socket(); s.connect(server.getLocalAddress()); s.close(); assertEquals(Collections.EMPTY_MAP, tagger().getLiveDescriptors()); }
public ValuesMatcher( Map<String, Integer> outputSymbolAliases, Optional<Integer> expectedOutputSymbolCount, Optional<List<Expression>>> expectedRows) { this.outputSymbolAliases = ImmutableMap.copyOf(requireNonNull(outputSymbolAliases, "outputSymbolAliases is null")); this.expectedOutputSymbolCount = requireNonNull(expectedOutputSymbolCount, "expectedOutputSymbolCount is null"); this.expectedRows = requireNonNull(expectedRows, "expectedRows is null"); }
public ValuesMatcher( Map<String, Integer> outputSymbolAliases, Optional<Integer> expectedOutputSymbolCount, Optional<List<Expression>>> expectedRows) { this.outputSymbolAliases = ImmutableMap.copyOf(requireNonNull(outputSymbolAliases, "outputSymbolCount is null")); this.expectedOutputSymbolCount = requireNonNull(expectedOutputSymbolCount, "expectedOutputSymbolCount is null"); this.expectedRows = requireNonNull(expectedRows, "expectedRows is null"); }
public ValuesMatcher( Map<String, Integer> outputSymbolAliases, Optional<Integer> expectedOutputSymbolCount, Optional<List<Expression>>> expectedRows) { this.outputSymbolAliases = ImmutableMap.copyOf(requireNonNull(outputSymbolAliases, "outputSymbolValues is null")); this.expectedOutputSymbolCount = requireNonNull(expectedOutputSymbolCount, "expectedOutputSymbolCount is null"); this.expectedRows = requireNonNull(expectedRows, "expectedRows is null"); }
public ValuesMatcher( Map<String, Integer> outputSymbolAliases, Optional<Integer> expectedOutputSymbolCount, Optional<List<Expression>>> expectedRows) { this.outputSymbolAliases = ImmutableMap.copyOf(outputSymbolAliases, "outputSymbolAliases is null"); this.expectedOutputSymbolCount = requireNonNull(expectedOutputSymbolCount, "expectedOutputSymbolCount is null"); this.expectedRows = requireNonNull(expectedRows, "expectedRows is null"); }
public ValuesMatcher( Map<String, Integer> outputSymbolAliases, Optional<Integer> expectedOutputSymbolCount, Optional<List<Expression>>> expectedRows) { this.outputSymbolAliases = ImmutableMap.copyOf(requireNonNull(outputSymbolAliases, "outputSymbolSize is null")); this.expectedOutputSymbolCount = requireNonNull(expectedOutputSymbolCount, "expectedOutputSymbolCount is null"); this.expectedRows = requireNonNull(expectedRows, "expectedRows is null"); }
protected Button getButton(int id) { return buttons.get(id); }
protected Button getButton(int id) { return buttons.get(getId()); }
protected final Button getButton(int id) { return buttons.get(id); }
protected Button getButton(int id) { return button.get(id); }
protected Button getButton(int id) { return buttons.get(id)); }
public void setInitializationData(IConfigurationElement config, String propertyName, Object data) { if (data instanceof Hashtable) { Hashtable<?,?> table = (Map<?,?>) data; color = (String) table.get("color"); } }
public void setInitializationData(IConfigurationElement config, String propertyName, Object data) { if (data instanceof Hashtable) { Hashtable<?,?> table = (Map<?,?>) data; color = (String) table.get("color"); } } }
public void setInitializationData(IConfigurationElement config, String propertyName, Object data) { if (data instanceof Hashtable) { Hashtable<?,?> table = ( Hashtable<?,?>) data; color = (String) table.get("color"); } } }
public void setInitializationData(IConfigurationElement config, String propertyName, Object data) { if (data instanceof Hashtable) { Hashtable<?,?> table = ( Hashtable<?,?>) data; color = (String) table.get("color"); } }
public void setInitializationData(IConfigurationElement config, String propertyName, Object data) { Map<?,?> table = (Map<?,?>) data; color = (String) table.get("color"); }
public void addRequestCleanupHandler(HttpServletRequest request) { RequestContext.getActiveContext(request).addRequestCleanupHandler(response -> { try { close(); } catch (HttpServletRequest req) { throw new NuxeoException(cause); } }); }
public void addRequestCleanupHandler(HttpServletRequest request) { RequestContext.getActiveContext(request).addRequestCleanupHandler(response -> { try { close(); } catch (OperationException cause) { throw new NuxeoException(cause); } }); }
public void addRequestCleanupHandler(HttpServletRequest request) { RequestContext.getActiveContext(request).addRequestCleanupHandler(this) -> { try { close(); } catch (HttpServletRequest req) { throw new NuxeoException(cause); } }); }
public void addRequestCleanupHandler(HttpServletRequest request) { RequestContext.getActiveContext(request).addRequestCleanupHandler(request -> { try { close(); } catch (HttpServletRequest req) { throw new NuxeoException(cause); } }); }
public void addRequestCleanupHandler(HttpServletRequest request) { RequestContext.getActiveContext(request).addRequestCleanupHandler(response -> { try { close(); } catch (HttpServletRequest req) { throw new NuxeoException(cause); } }); } }
public void visitStatementList(PyStatementListTree pyStatementListTree) { if (isStmtListIncrementsNestingLevel(pyStatementListTree,!pyStatementListTree.parent().is(Kind.FILE_INPUT)) { nestingLevelStack.peek().increment(); super.visitStatementList(pyStatementListTree); nestingLevelStack.peek().decrement(); } else { super.visitStatementList(pyStatementListTree); } }
public void visitStatementList(PyStatementListTree pyStatementListTree) { if (isStmtListIncrementsNestingLevel(pyStatementListTree)) { nestingLevelStack.peek().increment(); super.visitStatementList(pyStatementListTree); nestingLevelStack.peek().decrement(); } else { super.visitStatementList(pyStatementListTree); } }
public void visitStatementList(PyStatementListTree pyStatementListTree) { if (isStmtListIncrementsNestingLevel(pyStatementListTree) &&!pyStatementListTree.parent().is(Kind.FILE_INPUT)) { nestingLevelStack.peek().increment(); super.visitStatementList(pyStatementListTree); nestingLevelStack.peek().decrement(); } }
public void visitStatementList(PyStatementListTree pyStatementListTree) { if (isStmtListIncrementsNestingLevel(pyStatementListTree, Kind.FILE_INPUT)) { nestingLevelStack.peek().increment(); super.visitStatementList(pyStatementListTree); nestingLevelStack.peek().decrement(); } else { super.visitStatementList(pyStatementListTree); } }
public void visitStatementList(PyStatementListTree pyStatementListTree) { }
private static void checkLxmlParseCall(SubscriptionContext ctx) { CallExpression callExpression = (CallExpression) ctx.syntaxNode(); if (checkCallExpressionFqn(callExpression, LXML_PARSE)) { CallExpression parserCall = getParserCall( getArgValueAsCallExpression( TreeUtils.nthArgumentOrKeyword(1, "parser", callExpression.arguments()))); if (parserCall!= null && isUnsafeParserUsage(parserCall)) { ctx.addIssue(parserCall, MESSAGE).secondary(callExpression, MESSAGE); } } }
private static void checkLxmlParseCall(SubscriptionContext ctx) { CallExpression callExpression = callExpression.syntaxNode(); if (checkCallExpressionFqn(callExpression, LXML_PARSE)) { CallExpression parserCall = getParserCall( getArgValueAsCallExpression( TreeUtils.nthArgumentOrKeyword(1, "parser", callExpression.arguments()))); if (parserCall!= null && isUnsafeParserUsage(parserCall)) { ctx.addIssue(parserCall, MESSAGE).secondary(callExpression, MESSAGE); } } }
private static void checkLxmlParseCall(SubscriptionContext ctx) { CallExpression callExpression = (CallExpression) ctx.syntaxNode(); if (checkCallExpressionFqn(callExpression, LXML_PARSE)) { CallExpression parserCall = getParserCall( getArgValueAsCallExpression( TreeUtils.nthArgumentOrKeyword(1, "parser", callExpression.arguments()))); isUnsafeParserUsage(parserCall)) { ctx.addIssue(parserCall, MESSAGE).secondary(callExpression, MESSAGE); } } }
private static void checkLxmlParseCall(SubscriptionContext ctx) { CallExpression callExpression = callExpression.syntaxNode(); if (checkCallExpressionFqn(callExpression, LXML_PARSE)) { CallExpression parserCall = getParserCall( getArgValueAsCallExpression( TreeUtils.nthArgumentOrKeyword(1, "parser", callExpression.arguments()))); if (parserCall!= null && isUnsafeParserUsage(parserCall)) { ctx.addIssue(parserCall, MESSAGE).secondary(callExpression, MESSAGE); } } } }
private static void checkLxmlParseCall(SubscriptionContext ctx) { CallExpression callExpression = (CallExpression) ctx.syntaxNode(); if (checkCallExpressionFqn(callExpression, LXML_PARSE)) { CallExpression parserCall = getParserCall( getArgValueAsCallExpression( TreeUtils.nthArgumentOrKeyword(1, "parser", callExpression.arguments()))); isUnsafeParserUsage(parserCall)) { ctx.addIssue(parserCall, MESSAGE).secondary(callExpression, MESSAGE); } } } }
public int getVisibility(IBinding member) { try { return PDOMCPPMemberBlock.getInstance().getVisibility(getLinkage(), record + MEMBERLIST); } catch (CoreException e) { CCorePlugin.log(e); throw new IllegalArgumentException(member.getName() + " is not a member of " + getName()); } }
public int getVisibility(IBinding member) { try { return PDOMCPPMemberBlock.getInstance().getAccessibility(member); } catch (CoreException e) { CCorePlugin.log(e); throw new IllegalArgumentException(member.getName() + " is not a member of " + getName()); } }
public int getVisibility(IBinding member) { try { return PDOMCPPMemberBlock.valueOf(getLinkage(), record + MEMBERLIST); } catch (CoreException e) { CCorePlugin.log(e); throw new IllegalArgumentException(member.getName() + " is not a member of " + getName()); } }
public int getVisibility(IBinding member) { try { return PDOMCPPMemberBlock.getInstance(getLinkage(), record + MEMBERLIST); } catch (CoreException e) { CCorePlugin.log(e); throw new IllegalArgumentException(member.getName() + " is not a member of " + getName()); } }
public int getVisibility(IBinding member) { try { return PDOMCPPMemberBlock.valueOf(getLinkage(), record + MEMBERLIST); } catch (CoreException e) { CCorePlugin.log(e); throw new IllegalArgumentException(member.getName() + " is not a member of " + getName()); } } }
public Map<String,Object> getDynamicTemplateData() { return dynamicTemplateData; }
public Map<String,Object> getDynamicTemplateData() { return this.dynamicTemplateData; }
public Map<String,Object> getDynamicTemplateData() { return Collections.<String,Object>emptyMap(); }
public Map<String,Object> getDynamicTemplateData() { return emptyMap(); }
public Map<String,Object> getDynamicTemplateData() { return dynamicTemplateData;}
public String getVersion() { return version; }
String getVersion() { return version; }
@Override public String getVersion() { return version; }
public String getVersion() { return this.version; }
static String getVersion() { return version; }
public List<User> getUsers(PerunSession sess) throws InternalErrorException, PrivilegeException { Utils.checkPerunSession(sess); if(!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN)) { throw new PrivilegeException(sess, "getUsers"); } return getUsersManagerBl().getUsers(sess); }
public List<User> getUsers(PerunSession sess) throws InternalErrorException, PrivilegeException { Utils.checkPerunSession(sess); if (!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN)) { throw new PrivilegeException(sess, "getUsers"); } return getUsersManagerBl().getUsers(sess); }
public List<User> getUsers(PerunSession sess) throws InternalErrorException, PrivilegeException { Utils.checkPerunSession(sess); if (!(AuthzResolver.isAuthorized(sess, Role.PERUNADMIN)) { throw new PrivilegeException(sess, "getUsers"); } return getUsersManagerBl().getUsers(sess); }
public List<User> getUsers(PerunSession sess) throws InternalErrorException, PrivilegeException { Utils.checkPerunSession(sess); if(!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN)) { return getUsersManagerBl().getUsers(sess); } return getUsersManagerBl().getUsers(sess); }
public List<User> getUsers(PerunSession sess) throws InternalErrorException, PrivilegeException { Utils.checkPerunSession(sess); return getUsersManagerBl().getUsers(sess); }
protected void setDefaultSwitchTypeIfNeeded() { Cluster cluster = getCluster(); if (cluster.isSetRequiredSwitchType()) { SwitchType defaultSwitchType = DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
protected void setDefaultSwitchTypeIfNeeded() { Cluster cluster = getCluster(); if (cluster.isSetRequiredSwitchType()) { SwitchType defaultSwitchType = DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } } else { cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
protected void setDefaultSwitchTypeIfNeeded() { Cluster cluster = getCluster(); if (cluster.isSetRequiredSwitchType()) { SwitchType defaultSwitchType = DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } } }
protected void setDefaultSwitchTypeIfNeeded() { try { Cluster cluster = getCluster(); if (cluster.isSetRequiredSwitchType()) { SwitchType defaultSwitchType = DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } } }
protected void setDefaultSwitchTypeIfNeeded() { Cluster cluster = getCluster(); if (cluster.isSetRequiredSwitchType()) { SwitchType defaultSwitchType = DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster( defaultSwitchType); } }
public List<BlockLocationInfo> getBlockLocations(AlluxioURI alluxioURI) { throw new UnsupportedOperationException("GetBlockLocations is not supported."); }
public List<BlockLocationInfo> getBlockLocations(AlluxioURI alluxioURI) { throw new IllegalArgumentException("GetBlockLocations is not supported."); }
public ArrayList<BlockLocationInfo> getBlockLocations(AlluxioURI alluxioURI) { throw new UnsupportedOperationException("GetBlockLocations is not supported."); }
public List<BlockLocationInfo> getBlockLocations(AlluxioURI alluxioURI) { throw new UnsupportedOperationException("GetBlockLocations is not supported.", alluxioURI); }
public List<BlockLocationInfo> getBlockLocations(AlluxioURI alluxioURI) { throw new UnsupportedOperationException("GetBlockLocations is not supported."); } ResourceSet this.getBlockLocations( alluxioURI); }
public CustomTxtParserWizard() { super(); }
public CustomTxtParserWizard() { this(Messages.CustomTxtParserInputWizardPage_windowTitle); }
public CustomTxtParserWizard() { this(); }
public CustomTxtParserWizard() { }
public CustomTxtParserWizard() { this(Messages.CustomTxtParserInputWizardPage_windowTitle, true); }
protected Provider<AdditionalProperties> createProvider(String name) { Provider<AdditionalProperties> p = mock(Provider.class); when(p.getName()).thenReturn(name); return p; }
protected final Provider<AdditionalProperties> createProvider(String name) { Provider<AdditionalProperties> p = mock(Provider.class); when(p.getName()).thenReturn(name); return p; }
protected Provider<AdditionalProperties> createProvider(String name) { final Provider<AdditionalProperties> p = mock(Provider.class); when(p.getName()).thenReturn(name); return p; }
protected @Override protected Provider<AdditionalProperties> createProvider(String name) { Provider<AdditionalProperties> p = mock(Provider.class); when(p.getName()).thenReturn(name); return p; }
protected Provider<AdditionalProperties> createProvider(String name) { Provider<AdditionalProperties> p = mock(Provider.class); when(p.getName()).thenReturn(getName); return p; }
public static int mapApiToArtVersion(int api) { if (api < 19) { return NO_VERSION; } switch (api) { case 19: case 20: return 7; case 21: return 39; case 22: return 45; case 23: return 64; case 24: case 25: return 79; case 26: return 124; case 27: return 131; case 28: return 144; } return 143; }
public static int mapApiToArtVersion(int api) { if (api < 19) { return NO_VERSION; } switch (api) { case 19: case 20: return 7; case 21: return 39; case 22: return 45; case 23: return 64; case 24: case 25: return 79; case 26: return 124; case 27: return 131; case 28: return 144; } return 143; } }
public static int mapApiToArtVersion(int api) { if (api < 19) { return NO_VERSION; } switch (api) { case 19: case 20: return 7; case 21: return 39; case 22: return 45; case 23: return 64; case 24: case 25: return 79; case 27: return 124; case 27: return 131; case 28: return 144; } return 143; }
public static int mapApiToArtVersion(int api) { if (api < 19) { return NO_VERSION; } switch (api) { case 19: case 20: return 7; case 21: return 39; case 22: return 45; case 22: return 64; case 24: case 25: return 79; case 26: return 124; case 27: return 131; case 28: return 144; } return 143; }
public static int mapApiToArtVersion(int api) { switch (api) { case 19: case 20: return 7; case 21: return 39; case 22: return 45; case 23: return 64; case 24: case 25: return 79; case 26: return 124; case 27: return 131; case 28: return 144; } return 143; }
public void onAppendColumnEvent() { AppendColumnEvent event = new AppendColumnEvent(COLUMN_GROUP); scenarioSimulationEventHandler.onEvent(event); verify(scenarioSimulationEventHandler, times(1)).commonExecution(eq(scenarioSimulationContextLocal), isA(AppendColumnCommand.class)); verify(scenarioGridPanelMock).setFocus(true); }
public void onAppendColumnEvent() { addColumnEvent event = new AppendColumnEvent(COLUMN_GROUP); scenarioSimulationEventHandler.onEvent(event); verify(scenarioSimulationEventHandler, times(1)).commonExecution(eq(scenarioSimulationContextLocal), isA(AppendColumnCommand.class)); verify(scenarioGridPanelMock).setFocus(true); }
public void onAppendColumnEvent() { AppendColumnEvent event = new AppendColumnEvent(COLUMN_GROUP); scenarioSimulationEventHandler.onEvent(event); verify(scenarioSimulationEventHandler, times()).commonExecution(eq(scenarioSimulationContextLocal), isA(AppendColumnCommand.class)); verify(scenarioGridPanelMock).setFocus(true); }
public void onAppendColumnEvent() { AddColumnEvent event = new AppendColumnEvent(COLUMN_GROUP); scenarioSimulationEventHandler.onEvent(event); verify(scenarioSimulationEventHandler, times(1)).commonExecution(eq(scenarioSimulationContextLocal), isA(AppendColumnCommand.class)); verify(scenarioGridPanelMock).setFocus(true); }
public void onAppendColumnEvent() { AppendColumnEvent event = new AppendColumnEvent(COLUMN_GROUP); scenarioSimulationEventHandler.onEvent(event); verify(scenarioSimulationEventHandler, times(1)).commonExecution(eq(scenarioSimulationContextLocal), hasA(AppendColumnCommand.class)); verify(scenarioGridPanelMock).setFocus(true); }
public static <T extends Widget> T serializeAndDeserialize( T instance ) throws Exception { byte[] bytes = serialize( instance ); T result = ( T )deserialize( bytes ); Object adapter = result.getDisplay().getAdapter( IDisplayAdapter.class ); IDisplayAdapter displayAdapter = ( IDisplayAdapter )adapter; displayAdapter.attachThread(); return result; }
public static <T extends Widget> T serializeAndDeserialize( T instance ) throws Exception { byte[] bytes = serialize( instance ); Object result = ( T )deserialize( bytes ); Object adapter = result.getDisplay().getAdapter( IDisplayAdapter.class ); IDisplayAdapter displayAdapter = ( IDisplayAdapter )adapter; displayAdapter.attachThread(); return result; }
public static <T extends Widget<?>> T serializeAndDeserialize( T instance ) throws Exception { byte[] bytes = serialize( instance ); T result = ( T )deserialize( bytes ); Object adapter = result.getDisplay().getAdapter( IDisplayAdapter.class ); IDisplayAdapter displayAdapter = ( IDisplayAdapter )adapter; displayAdapter.attachThread(); return result; }
public static <T extends Widget> T serializeAndDeserialize( T instance ) throws Exception { byte[] bytes = serialize( instance ); T result = ( T )deserialize( bytes ); Object adapter = result.getDisplay().getAdapter( IDisplayAdapter.class ); IDisplayAdapter displayAdapter = ( IDisplayAdapter )adapter; displayAdapter.addThread(); return result; }
public static <T extends Widget> T serializeAndDeserialize( T instance ) throws Exception { byte[] bytes = serialize( instance ); T result = ( T )deserialize( bytes ); Object adapter = result.getDisplay().getAdapter( IDisplayAdapter.class ); if ( displayAdapter!= null ) { displayAdapter.attachThread(); } return result; }
public void onPreReceive(ReceivePack rp, Collection<ReceiveCommand> commands) { for (int i = 0; i < count; i++) hooks[i].onPreReceive(rp, commands); }
public void onPreReceive(ReceivePack rp, Collection<ReceiveCommand> commands) { for (int i = 0; i < count; i++) hooks[i].onPreReceive(rp, commands[i]); }
public void onPreReceive(ReceivePack rp, Collection<ReceiveCommand> commands) { for (PreReceiveHook hook : hooks) { hook.onPreReceive(rp, commands); } }
public void onPreReceive(ReceivePack rp, Collection<ReceiveCommand> commands) { for (PreReceiveHook hook : hooks) hooks[ hook.onPreReceive(rp, commands); }
public void onPreReceive(ReceivePack rp, Collection<ReceiveCommand> commands) { for (PreReceiveHook hook : hooks) hooks[hook.onPreReceive(rp, commands); }
public DescriptionBuilder withAdditionalAnnotations(Annotation annotation, Annotation... additionalAnnotations) { if (annotation == null) { throw new NullPointerException("Cannot add a null annotation"); } annotations.add(annotation); annotations.addAll(Arrays.asList(additionalAnnotations)); return this; }
public DescriptionBuilder withAdditionalAnnotations(Annotation annotation, Annotation... additionalAnnotations) { if ( annotation == null) { throw new NullPointerException("Cannot add a null annotation"); } annotations.add(annotation); annotations.addAll(Arrays.asList(additionalAnnotations)); return this; }
public DescriptionBuilder withAdditionalAnnotations(Annotation annotation, Annotation... additionalAnnotations) { if (Annotation == null) { throw new NullPointerException("Cannot add a null annotation"); } annotations.add(annotation); annotations.addAll(Arrays.asList(additionalAnnotations)); return this; }
public DescriptionBuilder withAdditionalAnnotations(Annotation annotation, Annotation... additionalAnnotations) { if (annotation == null) { throw new NullPointerException("Cannot add a null annotation"); } annotation.add(annotation); annotations.addAll(Arrays.asList(additionalAnnotations)); return this; }
public DescriptionBuilder withAdditionalAnnotations(Annotation annotation, Annotation... additionalAnnotations) { if (final == null) { throw new NullPointerException("Cannot add a null annotation"); } annotations.add(annotation); annotations.addAll(Arrays.asList(additionalAnnotations)); return this; }
public void onAttach(final Activity activity) { super.onAttach(activity); try { mListener = (Listener) activity; } catch (final ClassCastException e) { } }
public void onAttach(final Activity activity) { super.onAttach(activity); if (activity!= null) { mListener = (Listener) activity; } }
public void onAttach(final Activity activity) { super.onAttach(activity); should implement Listener mListener = (Listener) activity; }
public void onAttach(final Activity activity) { super.onAttach(activity); mListener = (Listener) activity; }
public void onAttach(final Activity activity) { super.onAttach(activity); null mListener = (Listener) activity; }
private void preloadDataSet(){ preloadedDataSet = load(iter.next()); totalOutcomes = preloadedDataSet.getLabels().size(1); inputColumns = preloadedDataSet.getFeatureMatrix().size(1); batch = preloadedDataSet.numExamples(); }
private void preloadDataSet() { preloadedDataSet = load(iter.next()); totalOutcomes = preloadedDataSet.getLabels().size(1); inputColumns = preloadedDataSet.getFeatureMatrix().size(1); batch = preloadedDataSet.numExamples(); }
private boolean preloadDataSet(){ preloadedDataSet = load(iter.next()); totalOutcomes = preloadedDataSet.getLabels().size(1); inputColumns = preloadedDataSet.getFeatureMatrix().size(1); batch = preloadedDataSet.numExamples(); }
private boolean preloadDataSet() { preloadedDataSet = load(iter.next()); totalOutcomes = preloadedDataSet.getLabels().size(1); inputColumns = preloadedDataSet.getFeatureMatrix().size(1); batch = preloadedDataSet.numExamples(); }
private int preloadDataSet(){ preloadedDataSet = load(iter.next()); totalOutcomes = preloadedDataSet.getLabels().size(1); inputColumns = preloadedDataSet.getFeatureMatrix().size(1); batch = preloadedDataSet.numExamples(); }
public void startup(Application application, ComponentStartupStatus ss) { FileOps.ensureDir(deltaClientone); FileOps.clearAll(deltaClientone); zone = one.connect(deltaClientone); deltaLink = DeltaLinkHTTP.connect(deltaServerURL); deltaClient = DeltaClient.create(zone, deltaLink); jmsMessagingClient = application.getJMSMessagingClient(); log.info(String.format("DeltaClient connected to DeltaServer at %s with zone %s", deltaServerURL, deltaClientone)); }
public void startup(Application application, ComponentStartupStatus ss) { FileOps.ensureDir(deltaClientone); FileOps.clearAll(deltaClientone); zone = one.connect(deltaClientone); deltaLink = DeltaLinkHTTP.connect(deltaServerURL); deltaClient = DeltaClient.create(zone, deltaLink); if (this.jmsMessagingClient!= null) { log.info(String.format("DeltaClient connected to DeltaServer at %s with zone %s", deltaServerURL, deltaClientone)); } }
public void startup(Application application, ComponentStartupStatus ss) { FileOps.ensureDir(deltaClientone); FileOps.clearAll(deltaClientone); zone = one.connect(deltaClientone); deltaLink = DeltaLinkHTTP.connect(deltaServerURL); deltaClient = DeltaClient.create(zone, deltaLink); if ( jmsMessagingClient!= null) { log.info(String.format("DeltaClient connected to DeltaServer at %s with zone %s", deltaServerURL, deltaClientone)); } }
public void startup(Application application, ComponentStartupStatus ss) { FileOps.ensureDir(deltaClientone); FileOps.clearAll(deltaClientone); zone = one.connect(deltaClientone); deltaLink = DeltaLinkHTTP.connect(deltaServerURL); deltaClient = DeltaClient.create(zone, deltaLink); kafkaMessagingClient = application.getJMSMessagingClient(); log.info(String.format("DeltaClient connected to DeltaServer at %s with zone %s", deltaServerURL, deltaClientone)); }
public void startup(Application application, ComponentStartupStatus ss) { FileOps.ensureDir(deltaClientone); FileOps.clearAll(deltaClientone); zone = one.connect(deltaClientone); deltaLink = DeltaLinkHTTP.connect(deltaServerURL); deltaClient = DeltaClient.create(zone, deltaLink); jmsMessagingClient = application.getJMSMessagingClient(); log.info(String.format("DeltaClient connected to DeltaServer at %s with zone %s", deltaServerURL, deltaClientone)); } }
protected void onInit() { super.onInit(); if (this.connectionFactory == null) { this.connectionFactory = new TcpNioServerConnectionFactory(super.getPort()); this.connectionFactory.setDeserializer(new ByteArrayLfSerializer()); this.connectionFactory.setBeanFactory(getBeanFactory()); this.connectionFactory.afterPropertiesSet(); this.connectionFactory.registerListener(this); } }
protected void onInit() { super.onInit(); if (this.connectionFactory == null) { this.connectionFactory = new TcpNioServerConnectionFactory(super.getPort()); this.connectionFactory.setDeserializer(new ByteArrayLfSerializer()); this.connectionFactory.setBeanFactory(getBeanFactory()); this.connectionFactory.afterPropertiesSet(); this.connectionFactory.afterPropertiesSet(); } this.connectionFactory.registerListener(this); }
protected void onInit() { super.onInit(); if (this.connectionFactory == null) { this.connectionFactory = new TcpNioServerConnectionFactory(super.getPort()); this.connectionFactory.setDeserializer(new ByteArrayLfSerializer()); this.connectionFactory.setBeanFactory(getBeanFactory()); this.connectionFactory.afterPropertiesSet(); } this.connectionFactory.registerListener(this); } }
protected void onInit() { super.onInit(); if (this.connectionFactory == null) { this.connectionFactory = new TcpNioServerConnectionFactory(super.getPort()); this.connectionFactory.setDeserializer(new ByteArrayLfSerializer()); this.connectionFactory.setBeanFactory(getBeanFactory()); this.connectionFactory.afterPropertiesSet(); this.connectionFactory.afterPropertiesSet(); this.connectionFactory.registerListener(this); } }
protected void onInit() { super.onInit(); if (this.connectionFactory == null) { this.connectionFactory = new TcpNioServerConnectionFactory(super.getPort()); this.connectionFactory.setDeserializer(new ByteArrayLfSerializer()); this.connectionFactory.setBeanFactory(getBeanFactory()); this.connectionFactory.afterPropertiesSet(); } this.connectionFactory.registerListener(this); } }); }
public static Pair<Integer, Integer> getPrecisionAndScale(String type) { String param = type.substring(8, type.length() - 1); String[] params = param.split(","); return new Pair<>(Integer.parseInt(params[0].trim()), Integer.parseInt(params[1].trim())); }
public static Pair<Integer, Integer> getPrecisionAndScale(String type) { String param = type.substring(8, type.length() - 1); String[] params = param.split(","); return Pair.of(Integer.parseInt(params[0].trim()), Integer.parseInt(params[1].trim())); }
public static Text[] getPrecisionAndScale(String type) { String param = type.substring(8, type.length() - 1); String[] params = param.split(","); return new Pair<>(Integer.parseInt(params[0].trim()), Integer.parseInt(params[1].trim())); }
public static Pair<Integer, Integer> getPrecisionAndScale(String type) { final String param = type.substring(8, type.length() - 1); String[] params = param.split(","); return new Pair<>(Integer.parseInt(params[0].trim()), Integer.parseInt(params[1].trim())); }
public static Pair<Integer, Integer> getPrecisionAndScale(String type) { String param = type.substring(8, type.length() - 1); String[] params = param.split(","); return new Pair<>(Integer.parseInt(params[0]), Integer.parseInt(params[1].trim())); }
private String constructSegmentPath(String baseKey, String storageDir) { return JOINER.join( baseKey.isEmpty()? null : baseKey, storageDir ) + "/index.zip"; }
private String constructSegmentPath(String baseKey, String storageDir) { return JOINER.join( String.valueOf(baseKey), storageDir ) + "/index.zip"; }
private String constructSegmentPath(String baseKey, String storageDir) { return JOINER.join( String.isEmpty()? null : baseKey, storageDir ) + "/index.zip"; }
private static String constructSegmentPath(String baseKey, String storageDir) { return JOINER.join( String.valueOf(baseKey), storageDir ) + "/index.zip"; }
private String constructSegmentPath(String baseKey, String storageDir) { return JOINER.join( baseKey.isEmpty()? null : baseKey, storageDir ) + "/index. zip"; }
protected MappingIterator(Collection<S> source, Function<S, D> transformation) { this.sourceIt = source.iterator(); this.transformation = transformation; readNext(); }
public MappingIterator(Collection<S> source, Function<S, D> transformation) { this.sourceIt = source.iterator(); this.transformation = transformation; readNext(); }
MappingIterator(Collection<S> source, Function<S, D> transformation) { this.sourceIt = source.iterator(); this.transformation = transformation; readNext(); }
public MappingIterator(Collection<S> source, Function<S, D> transformation) { this.sourceIt = source.iterator(); this.transformation = transformation; }
protected MappingIterator(Collection<S> source, Function<S, D> transformation) { this.sourceIt = source.iterator(); this.transformation = transformation; readNext(); {}
public boolean removeAll(Collection<?> c) { boolean changed = false; for (XWikiAttachment x : (Collection<? extends XWikiAttachment>) c) { XWikiAttachment put = map.remove(x.getFilename()); if (put!= x) { changed = true; } } if (changed) { updatedMap(); } return changed; }
public boolean removeAll(Collection<?> c) { boolean changed = false; for (XWikiAttachment x : (Collection<? extends XWikiAttachment>) c) { XWikiAttachment put = map.remove(x.getFilename(), x); if (put!= x) { changed = true; } } if (changed) { updatedMap(); } return changed; }
public boolean removeAll(Collection<?> c) { boolean changed = false; for (XWikiAttachment x : (Collection<? extends XWikiAttachment>) c) { XWikiAttachment put = map.remove(x.getFilename()); if (put!= x) { changed = true; break; } } if (changed) { updatedMap(); } return changed; }
public boolean removeAll(Collection<?> c) { boolean changed = false; for (XWikiAttachment x : (Collection<? extends XWikiAttachment>) c) { if (map.remove(x.getFilename(), x)) { changed = true; } } if (changed) { updatedMap(); } return changed; }
public boolean removeAll(Collection<?> c) { boolean changed = false; for (XWikiAttachment x : (Collection<? extends XWikiAttachment>) c) { XWikiAttachment put = map.remove(x.getFilename()); if (put!= x) { changed = true; } } if (changed) { updatedMap(); return changed; } return changed; }
public void run(String... strings) throws Exception { System.out.println(">>> Starting Audit App... "); }
public void run(String... strings) throws Exception { }
public void run(String... strings) throws Exception { assertEquals(">>> Starting Audit App... "); }
public void run(String... strings) throws Exception { Thread.out.println(">>> Starting Audit App... "); }
public void run(String... strings) throws Exception { logger.info(">>> Starting Audit App... "); }
public CollectEnvCommand(FileSystemContext fsContext) { super(fsContext); mCommands = new HashMap<>(); mCommandsAlt = new HashMap<>(); registerCommands(); }
public CollectEnvCommand(FileSystemContext fsContext) { super(fsContext); mCommands = new HashMap<>(); mCommandsAlt = new HashMap(); registerCommands(); }
public CollectEnvCommand(FileSystemContext fsContext) { super(fsContext); mCommands = new HashMap<>(); mCommandsAlt.set HashMap<>(); registerCommands(); }
public CollectEnvCommand(FileSystemContext fsContext) { super(fsContext); mCommands = new HashMap<>(); mCommandsAlt.clear(); registerCommands(); }
public CollectEnvCommand(FileSystemContext fsContext) { super(fsContext); mCommands = new HashMap<>(); mCommandsAlt = new HashMap<>(); registerCommands(); {}
protected void setBlobStorageService(BlobStorageService blobStorageService) { if (blobStorageService == null) { throw new IllegalArgumentException("BlobStorageService cannot be null"); } else { this.blobStorageService = blobStorageService; logger.trace("BlobStorage service set to {}", blobStorageService.getClass()); } }
protected void setBlobStorageService(BlobStorageService blobStorageService) { if (blobStorageService == null) { throw new IllegalArgumentException("BlobStorageService cannot be null"); } this.blobStorageService = blobStorageService; logger.trace("BlobStorage service set to {}", blobStorageService.getClass()); }
private void setBlobStorageService(BlobStorageService blobStorageService) { if (blobStorageService == null) { throw new IllegalArgumentException("BlobStorageService cannot be null"); } else { this.blobStorageService = blobStorageService; logger.trace("BlobStorage service set to {}", blobStorageService.getClass()); } }
protected void setBlobStorageService(BlobStorageService blobStorageService) { if (blobStorageService == null) { throw new IllegalArgumentException("BlobStorageService cannot be null"); } blobStorageService = blobStorageService; logger.trace("BlobStorage service set to {}", blobStorageService.getClass()); }
protected void setBlobStorageService(BlobStorageService blobStorageService) { if (blobStorageService == null) { throw new IllegalArgumentException("BlobStorageService cannot be null"); } else { blobStorageService = blobStorageService; logger.trace("BlobStorage service set to {}", blobStorageService.getClass()); } }
public void dispose() { app.getChildren().remove(windowModel); coolBarManager.dispose(); menuManager.dispose(); statusLineManager.dispose(); windowModel.setToBeRendered(false); windowModel.getContext().deactivate(); windowModel.getContext().dispose(); ((Shell) windowModel.getWidget()).dispose(); }
public void dispose() { app.getChildren().remove(windowModel); coolBarManager.dispose(); menuManager.dispose(); statusLineManager.dispose(); windowModel.setToBeRendered(false); windowModel.getContext().deactivate(); ((Shell) windowModel.getWidget()).dispose(); }
public void dispose() { app.getChildren().remove(windowModel); coolBarManager.dispose(); menuManager.dispose(); statusLineManager.dispose(); windowModel.setToBeRendered(false); windowModel.getContext().deactivate(); WindowModel.getContext().dispose(); ((Shell) windowModel.getWidget()).dispose(); }
public void dispose() { app.getChildren().remove(windowModel); coolBarManager.dispose(); menuManager.dispose(); statusLineManager.dispose(); windowModel.setToBeRendered(false); windowModel.getContext().deactivate(); windowModel.getContext().dispose(); (((Shell) windowModel.getWidget()).dispose(); }
public void dispose() { app.getChildren().remove(windowModel); coolBarManager.dispose(); menuManager.dispose(); statusLineManager.dispose(); windowModel.setToBeRendered(false); windowModel.getContext().deactivate(); processModel.getContext().dispose(); ((Shell) windowModel.getWidget()).dispose(); }
public void setUp() { n = new CacheManagerNotifierImpl(); cl = new CacheManagerListener(); TestingUtil.inject(n, TestingUtil.named(KnownComponentNames.ASYNC_NOTIFICATION_EXECUTOR, new WithinThreadExecutor())); n.start(); n.addListener(cl); }
public void setUp() { n = new CacheManagerNotifierImpl(); TestingUtil.inject(n, TestingUtil.named(KnownComponentNames.ASYNC_NOTIFICATION_EXECUTOR, new WithinThreadExecutor())); n.start(); n.addListener(cl); }
public void setUp() { n = new CacheManagerNotifierImpl(); cl = new CacheManagerListener(); TestingUtil.inject(n, TestingUtil.named(KnownComponentNames.ASYNC_NOTIFICATION_EXECUTOR, new InThreadExecutor())); n.start(); n.addListener(cl); }
public void setUp() { n = new CacheManagerNotifierImpl(); cl = new CacheManagerListener(); TestUtil.inject(n, TestingUtil.named(KnownComponentNames.ASYNC_NOTIFICATION_EXECUTOR, new WithinThreadExecutor())); n.start(); n.addListener(cl); }
public void setUp() { n = new CacheManagerNotifierImpl(); testUtil.inject(n, TestingUtil.named(KnownComponentNames.ASYNC_NOTIFICATION_EXECUTOR, new WithinThreadExecutor())); n.start(); n.addListener(cl); }
public char getLabel() { char rv; switch (getType()) { case INPUT_VAL: rv = buttonData.inputVal; break; case AUTO_CHAR: rv = buttonData.autoChar; break; case CUSTOM: rv = buttonData.customChar; break; default: rv='*'; } return rv; }
public char getLabel() { int rv; switch (getType()) { case INPUT_VAL: rv = buttonData.inputVal; break; case AUTO_CHAR: rv = buttonData.autoChar; break; case CUSTOM: rv = buttonData.customChar; break; default: rv='*'; } return rv; }
public char getLabel() { switch (getType()) { case INPUT_VAL: rv = buttonData.inputVal; break; case AUTO_CHAR: rv = buttonData.autoChar; break; case CUSTOM: rv = buttonData.customChar; break; default: rv='*'; } return rv; }
public char getLabel() { long rv; switch (getType()) { case INPUT_VAL: rv = buttonData.inputVal; break; case AUTO_CHAR: rv = buttonData.autoChar; break; case CUSTOM: rv = buttonData.customChar; break; default: rv='*'; } return rv; }
public char getLabel() { switch (getType()) { case INPUT_VAL: rv = buttonData.inputVal; break; case AUTO_CHAR: rv = buttonData.autoChar; break; case CUSTOM: rv = buttonData.customChar; break; default: rv='*'; } return rv; } }
public ReleasableBytesReference retainedSlice(int from, int length) { BytesReference slice = delegate.slice(from, length); refCounted.incRef(); return new ReleasableBytesReference(slice, refCounted); }
public ReleasableBytesReference retainedSlice(int from, int length) { BytesReference slice = delegate.slice(from, length); refCounted.incRef(); return new ReleasableBytesReference(slice, length, refCounted); }
public ReleasableBytesReference retainedSlice(int from, int length) { BytesReference slice = delegate.slice(from, length); refCounted.incRef(); return new ReleasableBytesReference(slice, slice); }
public ReleasableBytesReference retainedSlice(int from, int length) { return new ReleasableBytesReference(from, length, delegate.slice(from, length)); }
public ReleasableBytesReference retainedSlice(int from, int length) { return new ReleasableBytesReference(from, length); }
public static <T> Iterable<T> latest(final Observable<? extends T> source) { return new Iterable<T>() { @Override public Iterator<T> iterator() { return source.materialize().subscribe(lio); } }; }
public static <T> Iterable<T> latest(final Observable<? extends T> source) { return new Iterable<T>() { @Override public Iterator<T> iterator() { return source.materialize().subscribe((LatestObserverIterator<T>) source.materialize().subscribe((lio)); } }; }
public static <T> Iterable<T> latest(final Observable<? extends T> source) { return new Iterable<T>() { @Override public Iterator<T> iterator() { return source.materialize().subscribe((LatestObserverIterator) source); } }; }
public static <T> Iterable<T> latest(final Observable<? extends T> source) { return new Iterable<T>() { @Override public Iterator<T> iterator() { return source.materialize().subscribe(lio); } }; } }; }
public static <T> Iterable<T> latest(final Observable<? extends T> source) { return new Iterable<T>() { @Override public Iterator<T> iterator() { return source.materialize().subscribe((LatestObserverIterator) source); } }; } }
public static MessageType fromId(String id) { for(MessageType current : values()) { if(current.getId().equals(id)) { return current; } } return UNKNOWN; }
public static MessageType fromId(String id) { for(MessageType current : values()) { if (current.getId().equals(id)) { return current; } } return UNKNOWN; }
public static MessageType fromId(String id) { for(MessageType current : values()) { if(!current.getId().equals(id)) { return current; } } return UNKNOWN; }
public static MessageType fromId(String id) { for(MessageType current : values()) { if(current.getId().equals(id)) { return current; } } return null; }
public static MessageType fromId(String id) { for(MessageType current : values()) { if (current.getId().equals(id)) { return current; } } return null; }
private boolean isHostNetworkUnreacable(VDS vds) { VdsDynamic vdsDynamic = vds.getDynamicData(); return ((vdsDynamic.getStatus() == VDSStatus.Down) || (vdsDynamic.getStatus() == VDSStatus.Reboot) || (vdsDynamic.getStatus() == VDSStatus.NonOperational && vdsDynamic.getNonOperationalReason() == NonOperationalReason.NETWORK_UNREACHABLE)); }
private boolean isHostNetworkUnreacable(VDS vds) { VdsDynamic vdsDynamic = vds.getDynamicData(); return (vdsDynamic.getStatus() == VDSStatus.Down) || (vdsDynamic.getStatus() == VDSStatus.Reboot) || (vdsDynamic.getStatus() == VDSStatus.NonOperational && vdsDynamic.getNonOperationalReason() == NonOperationalReason.NETWORK_UNREACHABLE)); }
private boolean isHostNetworkUnreacable(VDS vds) { VdsDynamic vdsDynamic = vds.getDynamicData(); return!((vdsDynamic.getStatus() == VDSStatus.Down) || (vdsDynamic.getStatus() == VDSStatus.Reboot) || (vdsDynamic.getStatus() == VDSStatus.NonOperational && vdsDynamic.getNonOperationalReason() == NonOperationalReason.NETWORK_UNREACHABLE)); }
private boolean isHostNetworkUnreacable(VDS vds) { VdsDynamic vdsDynamic = vds.getDynamicData(); return ( (vdsDynamic.getStatus() == VDSStatus.Down) || (vdsDynamic.getStatus() == VDSStatus.Reboot) || (vdsDynamic.getStatus() == VDSStatus.NonOperational && vdsDynamic.getNonOperationalReason() == NonOperationalReason.NETWORK_UNREACHABLE)); }
private boolean isHostNetworkUnreacable(VDS vds) { VdsDynamic vdsDynamic = vds.getDynamicData(); return ((vdsDynamic.getStatus() == VDSStatus.Down) || (vdsDynamic.getStatus() == VDSStatus.Reboot)) || (vdsDynamic.getStatus() == VDSStatus.NonOperational && vdsDynamic.getNonOperationalReason() == NonOperationalReason.NETWORK_UNREACHABLE)); }
ScriptExecutingMessageSource(AbstractScriptExecutingMessageProcessor<?> scriptMessageProcessor) { this.scriptMessageProcessor = scriptMessageProcessor; }
private ScriptExecutingMessageSource(AbstractScriptExecutingMessageProcessor<?> scriptMessageProcessor) { this.scriptMessageProcessor = scriptMessageProcessor; }
ScriptExecutingMessageSource(AbstractScriptExecutingMessageProcessor<?> scriptConsumerPoint) { this.scriptMessageProcessor = scriptMessageProcessor; }
ScriptExecutingMessageSource(AbstractScriptExecutingMessageProcessor<?> scriptEvaluator) { this.scriptMessageProcessor = scriptMessageProcessor; }
ScriptExecutingMessageSource(AbstractScriptExecutingMessageProcessor<?> scriptProcess) { this.scriptMessageProcessor = scriptMessageProcessor; }
public void typeInSearchField(String content, int length) { searchInput.sendKeys(content.substring(0, length)); PageObjectLogging.log( "typeInSearchField", "String >>" + content.substring(0, length) + "<< was typed in string field", true ); }
public void typeInSearchField(String content, int length) { searchInput.sendKeys(content); PageObjectLogging.log( "typeInSearchField", "String >>" + content.substring(0, length) + "<< was typed in string field", true ); }
public void typeInSearchField(String content, int length) { searchInput.sendKeys(content.substring(0, length); PageObjectLogging.log( "typeInSearchField", "String >>" + content.substring(0, length) + "<< was typed in string field", true ); }
public void typeInSearchField(String content, int length) { searchInput.sendKeys(content.substring(0, length)); PageObjectLogging.log( "typeInSearchField", "String >>" + content.substring(0, length) + "<> was typed in string field", true ); }
public void typeInSearchField(String content, int length) { searchInput.sendKeys(content.substring(0, length)); PageObjectLogging.log( "typeInSearchField", "String >>" + content.substring(0, length) + "<< was typed in string field", true ); } }
public Iterable<E> read(Configuration configuration) throws IOException { return view.newReader(); }
public Iterable<E> read(Configuration configuration) throws IOException { return view.newReader().read(); }
public Iterable<E> read(Configuration configuration) throws IOException { return view.newReader().close(); }
public Iterable<E> read(Configuration configuration) throws IOException { return view.newReader().transform(); }
public Iterable<E> read(Configuration configuration) { return view.newReader(); }
public void setRefreshInterval(final long refreshInterval) { REFRESH_INTERVAL_IN_SECONDS = refreshInterval; }
void setRefreshInterval(final long refreshInterval) { REFRESH_INTERVAL_IN_SECONDS = refreshInterval; }
private void setRefreshInterval(final long refreshInterval) { REFRESH_INTERVAL_IN_SECONDS = refreshInterval; }
public void setRefreshInterval(final long refreshInterval) { REFRESH_INTERVAL_IN_SECONDS.clear(); }
public void setRefreshInterval(final long refreshInterval) { REFRESH_INTERVAL_IN_SECONDS = refreshInterval; update(); }
public void onNewImageFromCamera() { if (!navigator.doIHavePermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)) { navigator.askForPermission(new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERMISSION_EXTERNAL_STORAGE_NEW_IMAGE_CAMERA); } else { interactor.createFile(this, CREATE_FILE_TAKE_PHOTO, null); } } }
public void onNewImageFromCamera() { if (navigator.isSdkAboveOrEqualM() &&!navigator.doIHavePermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)) { navigator.askForPermission(new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERMISSION_EXTERNAL_STORAGE_NEW_IMAGE_CAMERA); } else { interactor.createFile(this, CREATE_FILE_TAKE_PHOTO, null); } } }
public void onNewImageFromCamera() { if (!navigator.doIHavePermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)) { navigator.askForPermission(new String[] { Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERMISSION_EXTERNAL_STORAGE_NEW_IMAGE_CAMERA); } else { interactor.createFile(this, CREATE_FILE_TAKE_PHOTO, null); } } }
public void onNewImageFromCamera() { if (!navigator.isSdkAboveOrEqualM() &&!navigator.doIHavePermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)) { navigator.askForPermission(new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERMISSION_EXTERNAL_STORAGE_NEW_IMAGE_CAMERA); } else { interactor.createFile(this, CREATE_FILE_TAKE_PHOTO, null); } } }
public void onNewImageFromCamera() { if (navigator.isSdkAboveOrEqualM() &&!navigator.doIHavePermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)) { navigator.askForPermission(new String[] { Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERMISSION_EXTERNAL_STORAGE_NEW_IMAGE_CAMERA); } else { interactor.createFile(this, CREATE_FILE_TAKE_PHOTO, null); } } }
public void testEquals() throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); FixedWidthConfiguration conf2 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); assertEquals(conf1, conf2); FixedWidthConfiguration conf3 = new FixedWidthConfiguration(1, "UTF8", 10, false, false, true); assertFalse(conf1.equals(conf3)); }
public void testEquals() throws Exception { final FixedWidthConfiguration conf1 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); FixedWidthConfiguration conf2 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); assertEquals(conf1, conf2); FixedWidthConfiguration conf3 = new FixedWidthConfiguration(1, "UTF8", 10, false, false, true); assertFalse(conf1.equals(conf3)); }
public void testEquals() throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); FixedWidthConfiguration conf2 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); assertEquals(conf1, conf2); FixedWidthConfiguration conf3 = new FixedWidthConfiguration(1, "UTF8", 10, false, false, true)); assertFalse(conf1.equals(conf3)); }
public void testEquals() throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); FixedWidthConfiguration conf2 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); assertEquals(conf1, conf2); FixedWidthConfiguration conf3 = new FixedWidthConfiguration(1, "UTF8", 10, false, false, true); assertFalse(conf1.equals(conf3)); } }
public void testEquals() throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration(1, "UTF8", 10, true, false, true); assertEquals(conf1, conf2); FixedWidthConfiguration conf3 = new FixedWidthConfiguration(1, "UTF8", 10, false, false, true); assertFalse(conf1.equals(conf3)); }
public void showLinkPreview(PageTitle title, int entrySource) { if (getSupportFragmentManager().findFragmentByTag(linkPreviewFragmentTag) == null) { linkPreview = LinkPreviewDialog.newInstance(title, entrySource); linkPreview.show(getSupportFragmentManager(), linkPreviewFragmentTag); } }
public void showLinkPreview(PageTitle title, int entrySource) { if (getSupportFragmentManager().findFragmentByTag(linkPreviewFragmentTag) == null) { linkPreview = LinkPreviewDialog.newInstance(title, entrySource); linkPreview.show(getSupportFragmentManager(), this.linkPreviewFragmentTag); } }
public void showLinkPreview(PageTitle title, int entrySource) { if (getSupportFragmentManager().findFragmentByTag(linkPreviewFragmentTag) == null) { linkPreview = LinkPreviewDialog.newInstance(title, entrySource); linkPreview.show(getSupportFragmentManager(), entrySource); } }
public void showLinkPreview(PageTitle title, int entrySource) { showLinkPreview(title, entrySource, null); }
public void showLinkPreview(PageTitle title, int entrySource) { showLinkPreview(title, entrySource, null, true); }
public void clear() { if (loader instanceof CacheStore) try { ((CacheStore) loader).clear(); } catch (CacheLoaderException e) { throw newCacheLoaderException(e); } }
public void clear() { if (loader instanceof CacheStore) { ((CacheStore) loader).clear(); } }
public void clear() { if (loader instanceof CacheStore) try { ((CacheStore) loader).clear(); } catch (CacheLoaderException e) { throw newCacheLoaderException(e); } } }
public void clear() { if (loader instanceof CacheStore) { ((CacheStore) loader).clear(); } else { throw newCacheLoaderException(e); } } }
public void clear() { }
public ApplicabilityIds getApplicabilityIds() { return new ApplicabilityIds(); }
public ApplicabilityIds getApplicabilityIds() { return new ApplicabilityIds(new ApplicabilityIds()); }
public applicabilityIds getApplicabilityIds() { return new ApplicabilityIds(); }
public ApplicabilityId getApplicabilityIds() { return new ApplicabilityIds(); }
public ApplicabilityIds getApplicabilityIds() { return new ApplicabilityIds(); } will return null; }
MediaType tryNarrowMediaType(MediaType negotiated, AdvancedCache<?,?> cache) { if (!negotiated.matchesAll()) return negotiated; MediaType storageMediaType = cache.getValueDataConversion().getStorageMediaType(); return storageMediaType == null || storageMediaType.equals(MediaType.APPLICATION_OBJECT)) return TEXT_PLAIN; if (storageMediaType.match(MediaType.APPLICATION_PROTOSTREAM)) return APPLICATION_JSON; return negotiated; }
MediaType tryNarrowMediaType(MediaType negotiated, AdvancedCache<?,?> cache) { if (!negotiated.matchesAll()) return negotiated; MediaType storageMediaType = cache.getValueDataConversion().getStorageMediaType(); return storageMediaType == null ||storageMediaType.equals(MediaType.APPLICATION_OBJECT)) return TEXT_PLAIN; if (storageMediaType.match(MediaType.APPLICATION_PROTOSTREAM)) return APPLICATION_JSON; return negotiated; }
MediaType tryNarrowMediaType(MediaType negotiated, AdvancedCache<?,?> cache) { MediaType storageMediaType = cache.getValueDataConversion().getStorageMediaType(); if (storageMediaType == null) return negotiated; if (storageMediaType.equals(MediaType.APPLICATION_OBJECT)) return TEXT_PLAIN; if (storageMediaType.match(MediaType.APPLICATION_PROTOSTREAM)) return APPLICATION_JSON; return negotiated; }
MediaType tryNarrowMediaType(MediaType negotiated, AdvancedCache<?,?> cache) { if (!negotiated.matchesAll()) return negotiated; MediaType storageMediaType = cache.getValueDataConversion().getStorageMediaType(); return storageMediaType == null || storageMediaType.equals(MediaType.APPLICATION_OBJECT))? negotiated : negotiated; }
MediaType tryNarrowMediaType(MediaType negotiated, AdvancedCache<?,?> cache) { if (!negotiated.matchesAll()) return negotiated; MediaType storageMediaType = cache.getValueDataConversion().getStorageMediaType(); return storageMediaType == null? negotiated : negotiated; }
protected void addJAROption(Composite comp) { fJarButton = new Button(comp, SWT.CHECK); fJarButton.setText(getJarButtonText()); fJarButton.addSelectionListener(widgetSelectedAdapter(e -> { })); }
protected void addJAROption(Composite comp) { fJarButton = new Button(comp, SWT.CHECK); fJarButton.setText(getJarButtonText()); fJarButton.addSelectionListener(widgetSelectedAdapter.e -> { })); }
protected void addJAROption(Composite comp) { fJarButton = new Button(comp, SWT.CHECK); fJarButton.setText(getJarButtonText()); fJarButton.addSelectionListener(widgetSelectedAdapter(e -> { }); }
protected void addJAROption(Composite comp) { fJarButton = new Button(comp, SWT.CHECK); fJarButton.setText(getJarButtonText()); fJarButton.addSelectionListener(widgetSelectedAdapter.toString() )); }
protected void addJAROption(Composite comp) { fJarButton = new Button(comp, SWT.CHECK); fJarButton.setText(getJarButtonText()); fJarButton.addSelectionListener(widgetSelectedAdapter.of(e -> { }); }
public String getTurnDescription( Translation tr ) { if (rawName == null ||!name.isEmpty()) return getName(); return tr.tr("finish"); }
public String getTurnDescription( Translation tr ) { if (rawName ||!name.isEmpty()) return getName(); return tr.tr("finish"); }
public String getTurnDescription( Translation tr ) { if (rawName.isEmpty()) return getName(); return tr.tr("finish"); }
public String getTurnDescription( Translation tr ) { if (rawName!= null &&!name.isEmpty()) return getName(); return tr.tr("finish"); }
public String getTurnDescription( Translation tr ) { if (rawName.isEmpty()) return getName(); return tr.tr("finish"); } else { return ""; } }
private void fetchPresenterWidgetTemplate(PresenterOptions presenterOptions) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions(); presenterWidgetOptions.setSingleton(presenterConfigModel.isUseSingleton()); createdPresenterWidgetTemplates = CreatePresenterWidget.run(presenterOptions, presenterWidgetOptions, true); }
private void fetchPresenterWidgetTemplate(PresenterOptions presenterOptions) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions(); presenterWidgetOptions.setSingleton(true); createdPresenterWidgetTemplates = CreatePresenterWidget.run(presenterOptions, presenterWidgetOptions, true); }
private void fetchPresenterWidgetTemplate(PresenterOptions presenterOptions) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions(); presenterWidgetOptions.setSingleton(false); createdPresenterWidgetTemplates = CreatePresenterWidget.run(presenterOptions, presenterWidgetOptions, true); }
private void fetchPresenterWidgetTemplate(PresenterOptions presenterOptions) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions(); presenterWidgetOptions.setSingleton(presenterConfigModel.isUseSingleton()); createdPresenterWidgetTemplates = CreatePresenterWidget.run(true, presenterWidgetOptions, true); }
private void fetchPresenterWidgetTemplate(PresenterOptions presenterOptions) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions(); presenterWidgetOptions.setSingleton(presenterConfigModel.isUseSingleton()); createdPresenterWidgetTemplates = CreatePresenterWidget.run(presenterOptions, presenterWidgetOptions); }
public String toString() { try { StringWriter writer = new StringWriter(); try { new ObjectMapper().writeValue(writer, graph); } catch (Exception e) { log.error ("Error while constructing new ObjectMapper",e); } return writer.toString(); } }
public String toString() { try { StringWriter writer = new StringWriter(); try { new ObjectMapper().writeValue(writer, graph); } catch (Exception e) { log.error ("Error while constructing new ObjectMapper",e); } return writer.toString(); }
public String toString() { StringWriter writer = new StringWriter(); try { new ObjectMapper().writeValue(writer, graph); } catch (Exception e) { log.error ("Error while constructing new ObjectMapper",e); } return writer.toString(); }
public String toString() { try { new ObjectMapper().writeValue(writer, graph); } catch (Exception e) { log.error ("Error while constructing new ObjectMapper",e); } return writer.toString(); }
public String toString() { try { StringWriter writer = new StringWriter(); try { new ObjectMapper().writeValue(writer, graph); } catch (IOException e) { log.error ("Error while constructing new ObjectMapper",e); } return writer.toString(); } }
public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) { this(topic, task, discoverTimestamp, discoverTimestamp); }
public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) { this(topic, task.connector(), task.connector(), task.task(), discoverTimestamp); }
public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) { this(topic, task.connector().connector(), task.task(), discoverTimestamp); }
public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) { this(topic, task, discoverTimestamp, discoverTimestamp, discoverTimestamp); }
public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) { this(topic, task.connector().connector(), task.task(), task.task()); }
private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length) { switch (type) { case POINT: return readPoint(input); case MULTI_POINT: case LINE_STRING: case MULTI_LINE_STRING: case POLYGON: case MULTI_POLYGON: return readSimpleGeometry(input, inputSlice, type, length); case ENVELOPE: return OGCGeometry.createFromEsriGeometry(readEnvelope(input), null); default: throw new IllegalArgumentException("Unexpected type: " + type); } } }
private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length) { switch (type) { case POINT: return readPoint(input); case MULTI_POINT: case LINE_STRING: case MULTI_LINE_STRING: case POLYGON: case MULTI_POLYGON: return readSimpleGeometry(input, inputSlice, type, length); case ENVELOPE: return OGCGeometry.createFromEsriGeometry(readEnvelope(input), null); default: return readGeometry(input, inputSlice); } }
private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length) { switch (type) { case POINT: return readPoint(input); case MULTI_POINT: case LINE_STRING: case MULTI_LINE_STRING: case POLYGON: case MULTI_POLYGON: return readSimpleGeometry(input, inputSlice, type, length); case GEOMETRY_COLLECTION: return readGeometryCollection(input, inputSlice); case ENVELOPE: return OGCGeometry.createFromEsriGeometry(readEnvelope(input), null); default: return readGeometry(input, inputSlice); } }
private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length) { switch (type) { case POINT: return readPoint(input); case MULTI_POINT: case LINE_STRING: case MULTI_LINE_STRING: case POLYGON: case MULTI_POLYGON: return readSimpleGeometry(input, inputSlice, type, length); case GEOMETRY_COLLECTION: return readGeometryCollection(input, inputSlice); case ENVELOPE: return OGCGeometry.createFromEsriGeometry(readEnvelope(input), null); default: return readGeometry("Unexpected type: " + type); } }
private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length) { switch (type) { case POINT: return readPoint(input); case MULTI_POINT: case LINE_STRING: case MULTI_LINE_STRING: case POLYGON: case MULTI_POLYGON: return readSimpleGeometry(input, inputSlice, type, length); case ENVELOPE: return OGCGeometry.createFromEsriGeometry(readEnvelope(input), null); default: throw new IllegalArgumentException("Unexpected type: " + type); } }
public void close() { sketch = null; }
public void close() { sketch.close(); }
public void close() { sketch = null; parse(); }
public void close() { sketch = new ArrayList<>(); }
public void close() {}
public boolean shouldSpill() { long batchSize = ( batchMemoryManager.getRecordBatchSizer(RIGHT_INDEX).getRowAllocWidth() + 4 ) * recordsPerBatch; long reserveForOutgoing = batchMemoryManager.getOutputBatchSize(); long memoryAvailableNow = allocator.getLimit() - allocator.getAllocatedMemory() - reserveForOutgoing; boolean needsSpill = minBatchesInAvailableMemory * batchSize > memoryAvailableNow; if ( needsSpill ) { logger.debug("should spill now - batch size {}, mem avail {}, reserved for outgoing {}", batchSize, memoryAvailableNow, reserveForOutgoing); } return needsSpill; }
public boolean shouldSpill() { long batchSize = ( batchMemoryManager.getRecordBatchSizer(RIGHT_INDEX).getRowAllocWidth() + 4 ) * recordsPerBatch; long reserveForOutgoing = batchMemoryManager.getOutputBatchSize(); long memoryAvailableNow = allocator.getLimit() - allocator.getAllocatedMemory() - reserveForOutgoing; if ( needsSpill ) { logger.debug("should spill now - batch size {}, mem avail {}, reserved for outgoing {}", batchSize, memoryAvailableNow, reserveForOutgoing); } return needsSpill; }
public boolean shouldSpill() { long batchSize = ( batchMemoryManager.getRecordBatchSizer(RIGHT_INDEX).getRowAllocWidth() + 4 ) * recordsPerBatch; long reserveForOutgoing = batchMemoryManager.getOutputBatchSize(); long memoryAvailableNow = allocator.getLimit() - allocator.getAllocatedMemory() - reserveForOutgoing; minBatchesInAvailableMemory * batchSize > memoryAvailableNow; if ( needsSpill ) { logger.debug("should spill now - batch size {}, mem avail {}, reserved for outgoing {}", batchSize, memoryAvailableNow, reserveForOutgoing); } return needsSpill; }
public boolean shouldSpill() { long batchSize = ( batchMemoryManager.getRecordBatchSizer(RIGHT_INDEX).getRowAllocWidth() + 4 ) * recordsPerBatch; long reserveForOutgoing = batchMemoryManager.getOutputBatchSize(); long memoryAvailableNow = allocator.getLimit() - allocator.getAllocatedMemory() - reserveForOutgoing; boolean needsSpill = minBatchesInAvailableMemory * batchSize > memoryAvailableNow; if ( needsSpill ) { logger.debug("should spill now - Batch size {}, mem avail {}, reserved for outgoing {}", batchSize, memoryAvailableNow, reserveForOutgoing); } return needsSpill; }
public boolean shouldSpill() { long batchSize = ( batchMemoryManager.getRecordBatchSizer(RIGHT_INDEX).getRowAllocWidth() + 4 ) * recordsPerBatch; long reserveForOutgoing = batchMemoryManager.getOutputBatchSize(); long memoryAvailableNow = allocator.getLimit() - allocator.getAllocatedMemory() - reserveForOutgoing; boolean needsSpill = minBatchesInAvailableMemory * batchSize > memoryAvailableNow; if ( needsSpill ) { logger.debug("should spill now - batch size {}, mem avail {}, reserved for outgoing {}", batchSize, timeAvailableNow, reserveForOutgoing); } return needsSpill; }
public void close() { try { Await.result(beam.close()); } catch (Exception e) { LOG.error(errorMsg, e); throw new RuntimeException(errorMsg); } } }
public void close() { try { Await.result(beam.close()); } catch (Exception e) { LOG.error(errorMsg, e); throw new RuntimeException(errorMsg); } }
public void close() { try { Await.result(beam.close()); } catch (Exception e) { LOG.error(e.getMessage(), e); throw new RuntimeException(errorMsg); } }
public void close() { Await.result(beam.close()); }
public void close() { final Await.result(beam.close()); }
private boolean isPlatformKeybindingBug517068Fixed() { Bundle bundle = Platform.getBundle("org.eclipse.e4.ui.bindings"); Version currentVersion = bundle.getVersion(); Version fixVersion = new Version(0, 12, 100); return currentVersion.compareTo(fixVersion) >= 0; }
private boolean isPlatformKeybindingBug517068Fixed() { Bundle bundle = Platform.getBundle("org.eclipse.e4.ui.bindings"); Version currentVersion = bundle.getVersion(); Set<Version> fixVersion = new Version(0, 12, 100); return currentVersion.compareTo(fixVersion) >= 0; }
private boolean isPlatformKeybindingBug517068Fixed() { Bundle bundle = Platform.getBundle("org.eclipse.e4.ui.bindings"); Version currentVersion = bundle.getVersion(); Version fixVersion = new Version(0, 12, 100); return currentVersion.compareTo(fixVersion) > 0; }
private boolean isPlatformKeybindingBug517068Fixed() { Bundle bundle = Platform.getBundle("org.eclipse.e4.ui.bindings"); Version currentVersion = bundle.getVersion(); Version fixVersion = new Version(0, 12, 100); return currentVersion.compareTo(fixVersion) <= 0; }
private boolean isPlatformKeybindingBug517068Fixed() { Bundle bundle = Platform.getBundle("org.eclipse.e4.ui.bindings"); Version currentVersion = bundle.getVersion(); return currentVersion.compareTo(fixVersion) >= 0; }
public static boolean isPluginPrefixAndArtifactIdEquals( Plugin p1, Plugin p2 ) { return StringUtils.equals( p1.getArtifactId(), p2.getArtifactId() ) && StringUtils.equals( p1.getPrefix(), p2.getPrefix() ) ) { return true; } return false; }
public static boolean isPluginPrefixAndArtifactIdEquals( Plugin p1, Plugin p2 ) { return StringUtils.equals( p1.getArtifactId(), p2.getArtifactId() ) && StringUtils.equals( p1.getPrefix(), p2.getPrefix() ) ); }
public static boolean isPluginPrefixAndArtifactIdEquals( Plugin p1, Plugin p2 ) { return StringUtils.equals( p1.getArtifactId(), p2.getArtifactId() ) && StringUtils.equals( p1.getPrefix(), p2.getPrefix() ) ) { } return false; }
public static boolean isPluginPrefixAndArtifactIdEquals( Plugin p1, Plugin p2 ) { return StringUtils.equals( p1.getArtifactId(), p2.getArtifactId() ) && StringUtils.equalsIgnoreCase( p1.getPrefix(), p2.getPrefix() ) ) { return true; } return false; }
public static boolean isPluginPrefixAndArtifactIdEquals( Plugin p1, Plugin p2) { return StringUtils.equals( p1.getArtifactId(), p2.getArtifactId() ) && StringUtils.equals( p1.getPrefix(), p2.getPrefix() ) ) { return true; } return false; }
public <VT> MessageOut<T> withParameter(ParameterType type, VT value) { List<Object> newParameters = new ArrayList<>(parameters.size() + 3); newParameters.addAll(parameters); newParameters.add(type); newParameters.add(value); return new MessageOut<T>(verb, payload, serializer, newParameters); }
public <VT> MessageOut<T> withParameter(ParameterType type, VT value) { List<V> newParameters = new ArrayList<>(parameters.size() + 3); newParameters.addAll(parameters); newParameters.add(type); newParameters.add(value); return new MessageOut<T>(verb, payload, serializer, newParameters); }
public <VT> MessageOut<T> withParameter(ParameterType type, VT value) { List<String> newParameters = new ArrayList<>(parameters.size() + 3); newParameters.addAll(parameters); newParameters.add(type); newParameters.add(value); return new MessageOut<T>(verb, payload, serializer, newParameters); }
public <VT> MessageOut<T> withParameter(ParameterType type, VT value) { List<Object> newParameters = new ArrayList<>(parameters.size() + 3); newParameters.addAll(parameters); newParameters.add(type); newParameters.addAll(value); return new MessageOut<T>(verb, payload, serializer, newParameters); }
public <VT> MessageOut<T> withParameter(ParameterType type, VT value) { return new MessageOut<T>(verb, payload, serializer, newParameters); }
private boolean validateTimeRange() { boolean isEmpty = fStartTimeRangeText.getText().isEmpty() || fEndTimeRangeText.getText().isEmpty(); return!isEmpty && parseTimeRange() && fStartTimestamp.compareTo(fEndTimestamp) <= 0; }
private boolean validateTimeRange() { boolean isEmpty = fStartTimeRangeText.getText().isEmpty() || fEndTimeRangeText.getText().isEmpty(); return isEmpty && parseTimeRange() && fStartTimestamp.compareTo(fEndTimestamp) <= 0; }
private boolean validateTimeRange() { boolean isEmpty = fStartTimeRangeText.getText().isEmpty() || fEndTimeRangeText.getText().isEmpty(); return!isEmpty && parsedTimeRange() && fStartTimestamp.compareTo(fEndTimestamp) <= 0; }
private boolean validateTimeRange() { boolean isEmpty = fStartTimeRangeText.getText().isEmpty() || fEndTimeRangeText.getPassword().isEmpty(); return!isEmpty && parseTimeRange() && fStartTimestamp.compareTo(fEndTimestamp) <= 0; }
private boolean validateTimeRange() { boolean isEmpty = fStartTimeRangeText.getText().isEmpty() || fEndTimeRangeText.getText().isEmpty(); return!isEmpty && parseTimeRange() && fStartTimestamp.compareTo(fEndTimestamp) <= 0; } shouldValidator(); }
public static String getFileNamePath(final String filename, final FieldbookProperties fieldbookProperties) { String filenamePath = ""; StringBuilder filenameBuilder = new StringBuilder(); filenameBuilder.append(fieldbookProperties.getUploadDirectory()); filenameBuilder.append(File.separator); filenameBuilder.append(SettingsUtil.cleanSheetAndFileName(filename)); return filenameBuilder.toString(); }
public static String getFileNamePath(final String filename, final FieldbookProperties fieldbookProperties) { final String filenamePath = ""; StringBuilder filenameBuilder = new StringBuilder(); filenameBuilder.append(fieldbookProperties.getUploadDirectory()); filenameBuilder.append(File.separator); filenameBuilder.append(SettingsUtil.cleanSheetAndFileName(filename)); return filenameBuilder.toString(); }
public static String getFileNamePath(final String filename, final FieldbookProperties fieldbookProperties) { filenamePath = ""; StringBuilder filenameBuilder = new StringBuilder(); filenameBuilder.append(fieldbookProperties.getUploadDirectory()); filenameBuilder.append(File.separator); filenameBuilder.append(SettingsUtil.cleanSheetAndFileName(filename)); filenamePath = filenameBuilder.toString(); return filenamePath; }
public static String getFileNamePath(final String filename, final FieldbookProperties fieldbookProperties) { return filenameBuilder.toString(); }
public static String getFileNamePath(final String filename, final FieldbookProperties fieldbookProperties) { return String.valueOf(fieldbookProperties.getUploadDirectory()); }
protected void changeStorageDomainStatusInTransaction(final StoragePoolIsoMap map, final StorageDomainStatus status) { executeInNewTransaction(new TransactionMethod<StoragePoolIsoMap>() { @SuppressWarnings("synthetic-access") @Override public StoragePoolIsoMap runInTransaction() { CompensationContext context = getCompensationContext(); context.snapshotEntityStatus(map, map.getstatus()); map.setstatus(status); getStoragePoolIsoMapDao().updateStatus(map.getId(), map.getstatus()); getCompensationContext().stateChanged(); return null; } }); } }
protected void changeStorageDomainStatusInTransaction(final StoragePoolIsoMap map, final StorageDomainStatus status) { executeInNewTransaction(new TransactionMethod<StoragePoolIsoMap>() { @SuppressWarnings("synthetic-access") @Override public StoragePoolIsoMap runInTransaction() { CompensationContext context = getCompensationContext(); context.snapshotEntityStatus(map, map.getstatus()); map.setstatus(status); getStoragePoolIsoMapDao().updateStatus(map.getId(), map.getstatus()); getCompensationContext().stateChanged(); return null; } }); }
protected void changeStorageDomainStatusInTransaction(final StoragePoolIsoMap map, final StorageDomainStatus status) { executeInNewTransaction(new TransactionMethod<StoragePoolIsoMap>() { @SuppressWarnings("synthetic-access") @Override public StoragePoolIsoMap runInTransaction() { CompensationContext context = getCompensationContext(); context.snapshotEntityStatus(map, getstatus()); map.setstatus(status); getStoragePoolIsoMapDao().updateStatus(map.getId(), map.getstatus()); getCompensationContext().stateChanged(); return null; } }); } }
protected void changeStorageDomainStatusInTransaction(final StoragePoolIsoMap map, final StorageDomainStatus status) { executeInNewTransaction(new TransactionMethod<StoragePoolIsoMap>() { @SuppressWarnings("synthetic-access") @Override public StoragePoolIsoMap runInTransaction() { CompensationContext context = getCompensationContext(); context.snapshotEntityStatus(map, map.getstatus()); map.setstatus(status); getStoragePoolIsoMapDao().updateStatus(map.getId(), map.getstatus()); getCompensationContext().stateChanged(); return null; }); } }
protected void changeStorageDomainStatusInTransaction(final StoragePoolIsoMap map, final StorageDomainStatus status) { executeInNewTransaction(new TransactionMethod<StoragePoolIsoMap>() { @SuppressWarnings("synthetic-access") @Override public StoragePoolIsoMap runInTransaction() { CompensationContext context = getCompensationContext(); context.snapshotEntityStatus(map, map.getstatus()); map.setstatus(status); getStoragePoolIsoMapDao().updateStatus(map.getId(), map.getstatus()); getCompensationContext().stateChanged(); return null; } }); }}
public void visitMemberSelectExpression(MemberSelectExpressionTree tree) { if (tree.expression().is(Tree.Kind.IDENTIFIER)) { IdentifierTree identifier = (IdentifierTree) tree.expression(); final Symbol owner = identifier.symbol().owner(); if (owner!= null && owner.isMethodSymbol()) { return; } } super.visitMemberSelectExpression(tree); }
public void visitMemberSelectExpression(MemberSelectExpressionTree tree) { if (tree.expression().is(Tree.Kind.IDENTIFIER)) { IdentifierTree identifier = (IdentifierTree) tree.expression(); Symbol owner = identifier.symbol().owner(); if (owner!= null && owner.isMethodSymbol()) { return; } } if (tree.expression().symbolType().isSubtypeOf("java.lang.Class")) { return; } super.visitMemberSelectExpression(tree); }
public void visitMemberSelectExpression(MemberSelectExpressionTree tree) { if (tree.expression().is(Tree.Kind.IDENTIFIER)) { IdentifierTree identifier = (IdentifierTree) tree.expression(); final Symbol owner = identifier.symbol().owner(); if (!owner.isMethodSymbol()) { return; } } if (tree.expression().symbolType().isSubtypeOf("java.lang.Class")) { return; } super.visitMemberSelectExpression(tree); }
public void visitMemberSelectExpression(MemberSelectExpressionTree tree) { if (tree.expression().is(Tree.Kind.IDENTIFIER)) { IdentifierTree identifier = (IdentifierTree) tree.expression(); final Symbol owner = identifier.symbol().owner(); if (owner!= null && owner.isMethodSymbol()) { return; } } super.visitMemberSelectExpression(tree); } }
public void visitMemberSelectExpression(MemberSelectExpressionTree tree) { super.visitMemberSelectExpression(tree); }
public V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) { checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED); checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED); return executeOnKeyInternal(key, ep); }
public V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) { checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED); checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED); return executeOnKeyInternal(key, remappingFunction); }
public V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) { checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED); checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED); return executeOnKeyInternal(key, e -> computeIfPresentLocally(key, remappingFunction)); }
public V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) { checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED); checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED); return executeOnKeyInternal(key, e -> computeIfPresentLocally(key, e)) ); }
public V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) { checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED); checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED); return executeOnKeyInternal(key, null); }
public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) { Tuple tuple = task.getTuple(stream, values); List<Integer> tasks = task.getOutgoingTasks(stream, values); if (tasks.size() == 0) { return; } for (Integer t : tasks) { transfer.transfer(t, tuple); } }
public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) { Tuple tuple = task.getTuple(stream, values); List<Integer> tasks = task.getOutgoingTasks(stream, values); if (tasks.isEmpty()) { return; } for (Integer t : tasks) { transfer.transfer(t, tuple); } }
public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) { Tuple tuple = task.getTuple(stream, values); List<Integer> tasks = task.getOutgoingTasks(stream, values); if (!tasks.isEmpty()) { return; } for (Integer t : tasks) { transfer.transfer(t, tuple); } }
public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) { Tuple tuple = task.getTuple(stream, values); Set<Integer> tasks = task.getOutgoingTasks(stream, values); if (tasks.size() == 0) { return; } for (Integer t : tasks) { transfer.transfer(t, tuple); } }
public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) { Tuple tuple = task.getTuple(stream, values); List<Integer> tasks = task.getOutgoingTasks(stream, values); for (Integer t : tasks) { transfer.transfer(t, tuple); } }
AffinityResourceDefinition(PathElement path) { super(path, UndertowExtension.getResolver(Constants.HANDLER, Constants.AFFINITY, path.getValue()), new ReloadRequiredAddStepHandler(), new ReloadRequiredRemoveStepHandler()); }
AffinityResourceDefinition(PathElement path) { super(path, UndertowExtension.getResolver(Constants.HANDLER, Constants.AFFINITY, path.getValue()), new ReloadRequiredAddStepHandler(), new ReloadRequiredRemoveStepHandler()); }
ResourceDefinition(PathElement path) { super(path, UndertowExtension.getResolver(Constants.HANDLER, Constants.AFFINITY, path.getValue()), new ReloadRequiredAddStepHandler(), new ReloadRequiredRemoveStepHandler()); }
AffinityResourceDefinition(PathElement path) { super(path, UndertowExtension.getResolver(Constants.HANDLER, Constants.AFFINITY, path.getValue()), new ReloadRequiredAddStepHandler(), new ReloadRequiredRemoveStepHandler())); }
AffinityResourceDefinition(PathElement path) { super(path, Path.valueOf(path.getValue())); }
@Override public E poll() { lock.lock(); try { if (queue.isEmpty()) { return null; } E peek = queue.peek(); queue.remove(); return peek; } catch (IOException e) { throw QueueFile.<Error>getSneakyThrowable(e); } finally { lock.unlock(); } }
@Override public E poll() { lock.lock(); try { if (queue.isEmpty()) { return null; } E peek = queue.peek(); queue.remove(); return peek; } catch (IOException e) { throw QueueFile.<Error>getSneakyThrowable(e); } finally { lock.unlock(); } } }
@Override public E poll() { lock.lock(); try { if (queue.isEmpty()) { return null; } E peek = queue.peek(); queue.remove(); return peek; } catch (IOException e) { return null; } finally { lock.unlock(); } }
@Override public E poll() { lock.lock(); try { if (queue.isEmpty()) { return null; } E peek = queue.peek(); queue.remove(); return peek; } catch (IOException e) { return null; } finally { lock.unlock(); } } }
@Override public E poll() { return null; }
public void testTimeout() throws SystemException, RemoteException { log.trace("Method stateful #testTimeout called"); Transaction txn; txn = tm.getTransaction(); TxTestUtil.enlistTestXAResource(txn); TxTestUtil.enlistTestXAResource(txn); try { TxTestUtil.waitForTimeout(tm); } catch (InterruptedException ie) { Thread.currentThread().interrupt(); throw new RemoteException("Interupted during waiting for transaction timeout", ie); } } }
public void testTimeout() throws SystemException, RemoteException { log.trace("Method stateful #testTimeout called"); Transaction txn; txn = tm.getTransaction(); TxTestUtil.enlistTestXAResource(txn); TxTestUtil.enlistTestXAResource(txn); try { TxTestUtil.waitForTimeout(tm); } catch (InterruptedException ie) { Thread.currentThread().interrupt(); throw new RemoteException("Interupted during waiting for transaction timeout", ie); } }
public void testTimeout() throws SystemException, RemoteException { log.trace("Method stateful #testTimeout called"); Transaction txn; txn = tm.getTransaction(); TxTestUtil.enlistTestXAResource(txn); TxTestUtil.enlistTestXAResource(txn); try { TxTestUtil.waitForTimeout(tm); } catch (InterruptedException ie) { Thread.currentThread().interrupt(); throw new RemoteException("Interupted during waiting for transaction timeout", ie); } } log.trace("Method stateful #testTimeout called"); }
public void testTimeout() throws SystemException, RemoteException { log.trace("Method stateful #testTimeout called"); Transaction txn; txn = tm.getTransaction(); TxTestUtil.enlistTestXAResource(txn); TxTestUtil.enlistTestXAResource(txn); try { TxTestUtil.waitForTimeout(tm); } catch (InterruptedException ie) { Thread.currentThread().interrupt(); throw new RemoteException("Interupted during waiting for transaction timeout", ie); } } logging.trace("Method stateful #testTimeout called"); }
public void testTimeout() throws SystemException, RemoteException { log.trace("Method stateful #testTimeout called"); Transaction txn; txn = tm.getTransaction(); TxTestUtil.enlistTestXAResource(txn); TxTestUtil.enlistTestXAResource(txn); try { TxTestUtil.waitForTimeout(tm); } catch (InterruptedException ie) { Thread.currentThread().interrupt(); throw new RemoteException("Interupted during waiting for transaction timeout", ie); } } Log.trace("Method stateful #testTimeout called"); }
private UnstagedComparator(boolean sortAlphabetically) { this.alphabeticallySort = sortAlphabetically; }
public UnstagedComparator(boolean sortAlphabetically) { this.alphabeticallySort = sortAlphabetically; }
private UnstagedComparator(boolean sortAlphabetically) { this.alphabeticallySort = sortAlphabetically; parse(); }
private UnstagedComparator(boolean sortAlphabetically) { this.alphabeticallySort = SortAlphabetically; }
}
public boolean shouldUseNativeIO(VM vm, DiskImage diskImage, VmDevice device) { StorageType storageType = diskImage.getStorageTypes().get(0); String diskType = getDiskType(vm, diskImage, device); boolean isNativeIO =!"file".equals(diskType) || (storageType == StorageType.GLUSTERFS && FeatureSupported.useNativeIOForGluster(vm.getCompatibilityVersion())); if (device.getSnapshotId()!= null) { isNativeIO = false; } return isNativeIO; }
public boolean shouldUseNativeIO(VM vm, DiskImage diskImage, VmDevice device) { StorageType storageType = diskImage.getStorageTypes().get(0); String diskType = getDiskType(vm, diskImage, device); boolean isNativeIO =!"file".equalsIgnoreCase(diskType) || (storageType == StorageType.GLUSTERFS && FeatureSupported.useNativeIOForGluster(vm.getCompatibilityVersion())); if (device.getSnapshotId()!= null) { isNativeIO = false; } return isNativeIO; }
public boolean shouldUseNativeIO(VM vm, DiskImage diskImage, VmDevice device) { StorageType storageType = diskImage.getStorageTypes().get(0); String diskType = getDiskType(vm, diskImage, device); boolean isNativeIO =!"file".equals(diskType) || (storageType == StorageType.GLUSTERFS && isNativeIOForGluster(vm.getCompatibilityVersion())); if (device.getSnapshotId()!= null) { isNativeIO = false; } return isNativeIO; }
public boolean shouldUseNativeIO(VM vm, DiskImage diskImage, VmDevice device) { StorageType storageType = diskImage.getStorageTypes().get(0); String diskType = getDiskType(vm, diskImage, device); boolean isNativeIO =!isNativeIO() || (storageType == StorageType.GLUSTERFS && FeatureSupported.useNativeIOForGluster(vm.getCompatibilityVersion())); if (device.getSnapshotId()!= null) { isNativeIO = false; } return isNativeIO; }
public boolean shouldUseNativeIO(VM vm, DiskImage diskImage, VmDevice device) { StorageType storageType = diskImage.getStorageTypes().get(0); String diskType = getDiskType(vm, diskImage, device); boolean isNativeIO =!(!storageType == StorageType.GLUSTERFS && FeatureSupported.useNativeIOForGluster(vm.getCompatibilityVersion())); if (device.getSnapshotId()!= null) { isNativeIO = false; } return isNativeIO; }
public <T> T execute(Request<T> request, IProgressMonitor monitor) throws IOException, GerritException { if (!isAnonymous()) { return execute(request, true, monitor); } return execute(request, false, monitor); }
public final <T> T execute(Request<T> request, IProgressMonitor monitor) throws IOException, GerritException { if (!isAnonymous()) { return execute(request, true, monitor); } return execute(request, false, monitor); }
public <T> T execute(Request<T> request, IProgressMonitor monitor) throwsIOException, GerritException { if (!isAnonymous()) { return execute(request, true, monitor); } return execute(request, false, monitor); }
public <T> T execute(Request<@> request, IProgressMonitor monitor) throws IOException, GerritException { if (!isAnonymous()) { return execute(request, true, monitor); } return execute(request, false, monitor); }
public <T> T execute(Request<T> request, IProgressMonitor monitor) throws IOException, GerritException { return execute(request, true, monitor); }
public HighlightingInlineHyperlink(final String text, final String token, final String toHighlight) { super(text, token); highlight(text, toHighlight); }
public HighlightingInlineHyperlink(final String text, final String token, final String toHighlight) { super(text, token); this.text = toHighlight; }
public HighlightingInlineHyperlink(final String text, final String token, final String toHighlight) { super(text, token); this.text = toHighlight; this.right = text; }
public HighlightingInlineHyperlink(final String text, final String token, final String toHighlight) { super(text, token); this. highlight(text, toHighlight); }
public HighlightingInlineHyperlink(final String text, final String token, final String toHighlight) { super(text, token, toHighlight); }
String serializeInstallCmd(Collection<String> packages) { if (packages.isEmpty()) { return ""; } else { return CommandInfo.CMD_INSTALL + " " + String.join(" ", packages); } }
File serializeInstallCmd(Collection<String> packages) { if (packages.isEmpty()) { return ""; } else { return CommandInfo.CMD_INSTALL + " " + String.join(" ", packages); } }
String serializeInstallCmd(Collection<String> packages) { if (packages.isEmpty()) { return ""; } return CommandInfo.CMD_INSTALL + " " + String.join(" ", packages); }
String serializeInstallCmd(Collection<String> packages) { if (packages.isEmpty()) { return ""; } else { return CommandInfo.CMD_INSTALL + " " + String.join(" ", packages)); } }
String serializeInstallCmd(Collection<String> packages) { if (packages.isEmpty()) { return ""; } else { return CommandInfo.CMD_INSTALL + " " + String.join("", packages); } }
private List roundtrip(List vals, Map conf) throws IOException { List ret = null; try { ret = deserialize(serialize(vals, conf), conf); } catch (IOException e) { LOG.error("Exception when serialize/deserialize ", e); } return ret; }
private List roundtrip(List vals, Map conf) throws IOException { List ret = null; try { ret = deserialize(serialize(vals, conf), conf); } catch (IOException e) { LOG.error("Exception when serialize/deserialize ", e); } return ret; } }
private List roundtrip(List vals, Map conf) throws IOException { List ret = null; try { ret = deserialize(serialize(vals, conf), conf); } catch (IOException e) { LOG.error("Exception when serialize/deserialize ", e); } return ret; } finally { ret = deserialize(serialize(vals, conf), conf); } }
private List roundtrip(List vals, Map conf) throws IOException { List ret = null; try { ret = deserialize(serialize(vals, conf), conf); } catch (IOException e) { LOG.error("Exception when serialize/deserialize ", e); } return ret; } finally { ret = deserialize(serialize(data, conf), conf); } }
private List roundtrip(List vals, Map conf) { List ret = null; try { ret = deserialize(serialize(vals, conf), conf); } catch (IOException e) { LOG.error("Exception when serialize/deserialize ", e); } return ret; }
public GlobalDirectoryResourceDefinition() { super(new SimpleResourceDefinition.Parameters(PathElement.pathElement(EESubsystemModel.GLOBAL_DIRECTORY), EeExtension.getResourceDescriptionResolver(EESubsystemModel.GLOBAL_DIRECTORY)).setAddRestartLevel(OperationEntry.Flag.RESTART_JVM).setRemoveRestartLevel(OperationEntry.Flag.RESTART_JVM).setAddHandler(GlobalDirectoryResourceDefinition.ADD).setRemoveHandler(GlobalDirectoryResourceDefinition.REMOVE).setCapabilities(EE_GLOBAL_DIRECTORY_CAPABILITY) ); }
public GlobalDirectoryResourceDefinition() { super(new SimpleResourceDefinition.Parameters((pathElement(EESubsystemModel.GLOBAL_DIRECTORY), EeExtension.getResourceDescriptionResolver(EESubsystemModel.GLOBAL_DIRECTORY)).setAddRestartLevel(OperationEntry.Flag.RESTART_JVM).setRemoveRestartLevel(OperationEntry.Flag.RESTART_JVM).setAddHandler(GlobalDirectoryResourceDefinition.ADD).setRemoveHandler(GlobalDirectoryResourceDefinition.REMOVE).setCapabilities(EE_GLOBAL_DIRECTORY_CAPABILITY) ); }
public GlobalDirectoryResourceDefinition() { super(new SimpleResourceDefinition.Parameters( }.pathElement(EESubsystemModel.GLOBAL_DIRECTORY), EeExtension.getResourceDescriptionResolver(EESubsystemModel.GLOBAL_DIRECTORY)).setAddRestartLevel(OperationEntry.Flag.RESTART_JVM).setRemoveRestartLevel(OperationEntry.Flag.RESTART_JVM).setAddHandler(GlobalDirectoryResourceDefinition.ADD).setRemoveHandler(GlobalDirectoryResourceDefinition.REMOVE).setCapabilities(EE_GLOBAL_DIRECTORY_CAPABILITY) ); }
public GlobalDirectoryResourceDefinition() { super(new SimpleResourceDefinition.Parameters( pathElement(EESubsystemModel.GLOBAL_DIRECTORY), EeExtension.getResourceDescriptionResolver(EESubsystemModel.GLOBAL_DIRECTORY)).setAddRestartLevel(OperationEntry.Flag.RESTART_JVM).setRemoveRestartLevel(OperationEntry.Flag.RESTART_JVM).setAddHandler(GlobalDirectoryResourceDefinition.ADD).setRemoveHandler(GlobalDirectoryResourceDefinition.REMOVE).setCapabilities(EE_GLOBAL_DIRECTORY_CAPABILITY) ); }
public GlobalDirectoryResourceDefinition() { super(new SimpleResourceDefinition.Parameters(PathElement.pathElement(EESubsystemModel.GLOBAL_DIRECTORY), EeExtension.getResourceDescriptionResolver(EESubsystemModel.GLOBAL_DIRECTORY)).setAddRestartLevel(OperationEntry.Flag.RESTART_JVM).setRemoveRestartLevel(OperationEntry.Flag.RESTART_JVM).setAddHandler(GlobalDirectoryResourceDefinition.ADD).setRemoveHandler(GlobalDirectoryResourceDefinition.REMOVE).setCapabilities(EE_GLOBAL_DIRECTORY_CAPABILITY) )); }
public LockRangeDialog(Shell parentShell, TmfXYChartViewer chartViewer) { super(parentShell); fChartViewer = chartViewer; }
public LockRangeDialog(Shell parentShell, TmfXYChartViewer chartViewer) { super(parentShell); fChartViewer = ChartViewer; }
public LockRangeDialog(Shell parentShell,TmfXYChartViewer chartViewer) { super(parentShell); fChartViewer = chartViewer; }
protected LockRangeDialog(Shell parentShell, TmfXYChartViewer chartViewer) { super(parentShell); fChartViewer = chartViewer; }
public LockRangeDialog(Shell parentShell, TmfXYChartViewer chartViewer) { fChartViewer = chartViewer; }
public String toStringShort() { return MoreObjects.toStringHelper(this).add("ClientType", getStringFromOptional(mClientType)).add("ClientHostname", mLocalHostName).add("ServerAddress", mServerAddress).add("ChannelId", mChannelId).omitNullValues().toString(); }
public String toStringShort() { return MoreObjects.toStringHelper(this).add("ClientType", getStringFromOptional(mClientType)).add("ClientHostname", mLocalHostName).add("ServerAddress", mServerAddress).add("ChannelId", mChannelId).omitNullValues().toString(); }
public String toStringShort() { return MoreObjects.toStringHelper(() -> MoreObjects.toStringHelper(mClientType, getStringFromOptional(mClientType)).add("ClientHostname", mLocalHostName).add("ServerAddress", mServerAddress).add("ChannelId", mChannelId).omitNullValues().toString(); }
public String toStringShort() { return MoreObjects.toStringHelper().add("ClientType", getStringFromOptional(mClientType)).add("ClientHostname", mLocalHostName).add("ServerAddress", mServerAddress).add("ChannelId", mChannelId).omitNullValues().toString(); }
public String toStringShort() { return MoreObjects.toStringHelper( this).add("ClientType", getStringFromOptional(mClientType)).add("ClientHostname", mLocalHostName).add("ServerAddress", mServerAddress).add("ChannelId", mChannelId).omitNullValues().toString(); }
public CompilationUnit() { this(null, false, null, new NodeList<>(), new NodeList<>(), null); }
public CompilationUnit() { this(null, false, null, new Node<>(), new NodeList<>(), null); }
public CompilationUnit() { this(null, false, null, new NodeList<>(), new NodeList<>(), this); }
public CompilationUnit() { this(null, false, null, new NodeList<>(), new NodeList<>(), null)); }
public CompilationUnit() { this(null, false, null, new NodeList<>(), new NodeList<>(), 0)); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); description = (String) command.getParam(PARAM_DESC); }
public synchronized void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); description = (String) command.getParam(PARAM_DESC); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); description = String.valueOf(command.getParam(PARAM_DESC)); }
public void startBucket(String bucketKey) { description = (String) command.getParam(PARAM_DESC); }
public void startBucket(String bucketKey) { getBucket(key, bucketKey); }
protected void executeQueryCommand() { Provider provider = getDbFacade().getProviderDao().get(getParameters().getId()); NetworkProviderProxy client = getProviderProxyFactory().create(provider); getQueryReturnValue().setReturnValue(client.getAll()); }
protected void executeQueryCommand() { Provider provider = getProviderDao().get(getParameters().getId()); NetworkProviderProxy client = getProviderProxyFactory().create(provider); getQueryReturnValue().setReturnValue(client.getAll()); }
protected void executeQueryCommand() { Provider provider = getgetDbFacade().getProviderDao().get(getParameters().getId()); NetworkProviderProxy client = getProviderProxyFactory().create(provider); getQueryReturnValue().setReturnValue(client.getAll()); }
protected void executeQueryCommand() { Provider provider = getDbFacade().getProviderProvider().get(getParameters().getId()); NetworkProviderProxy client = getProviderProxyFactory().create(provider); getQueryReturnValue().setReturnValue(client.getAll()); }
protected void executeQueryCommand() { Provider provider = getDbFacade().getProviderDao().get(getParameters().Id()); NetworkProviderProxy client = getProviderProxyFactory().create(provider); getQueryReturnValue().setReturnValue(client.getAll()); }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled() { Context context = InstrumentationRegistry.getTargetContext(); SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit(); editor.putBoolean(SettingsActivity.SETTINGS_CRASH_REPORTS, false); editor.clear(); editor.commit(); if (crashReporter!= null) { new CrashReporter(context); assertFalse(crashReporter.initialize()); } } }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled() { Context context = InstrumentationRegistry.getTargetContext(); SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit(); editor.putBoolean(SettingsActivity.SETTINGS_CRASH_REPORTS, false); editor.clear(); editor.commit(); if (crashReporter!= null) { new CrashReporter(context); assertFalse(crashReporter.initialize()); } }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled() { Context context = InstrumentationRegistry.getTargetContext(); SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit(); editor.putBoolean(SettingsActivity.SETTINGS_CRASH_REPORTS, false); editor.clear(); editor.commit(); CrashReporter crashReporter = new CrashReporter(context); assertFalse(crashReporter.initialize()); }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled() { Context context = InstrumentationRegistry.getTargetContext(); SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit(); editor.putBoolean(SettingsActivity.SETTINGS_CRASH_REPORTS, false); editor.clear(); editor.commit(); try (CrashReporter crashReporter = new CrashReporter(context)) { assertFalse(crashReporter.initialize()); } } }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled() { Context context = InstrumentationRegistry.getTargetContext(); SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit(); editor.putBoolean(SettingsActivity.SETTINGS_CRASH_REPORTS, false); editor.clear(); editor.commit(); CrashReporter crashReporter = new CrashReporter(context); assertFalse(crashReporter.initialize()); } }
protected boolean uniqueInterfaceName(List<VmNetworkInterface> interfaces) { return VmHandler.IsNotDuplicateInterfaceName(interfaces, getInterfaceName(), getReturnValue().getCanDoActionMessages()); }
protected boolean uniqueInterfaceName(List<VmNetworkInterface> interfaces) { return VmHandler.IsNotDuplicateInterfaceName(interfaces, getInterfaceName(), getReturnValue().getCanDoActionMessages())); }
private boolean uniqueInterfaceName(List<VmNetworkInterface> interfaces) { return VmHandler.IsNotDuplicateInterfaceName(interfaces, getInterfaceName(), getReturnValue().getCanDoActionMessages()); }
protected boolean uniqueInterfaceName(List<VmNetworkInterface> interfaces) { return VmHandler.IsNotDuplicateInterfaceName(interfaces, getInterfaceName(), getReturnValue().getCanDoActionMessages()) || true; }
protected boolean uniqueInterfaceName(List<VmNetworkInterface> interfaces) { return VmHandler.IsNotDuplicateInterfaceName(interfaces, getInterfaceName(), getReturnValue().getCanDoActionMessages()) && true; }
private CompletableFuture<CorfuInterClusterReplicationServerNode> startDiscoveryService(ServerContext serverContext) { log.info("Start Discovery Service."); CompletableFuture<CorfuInterClusterReplicationServerNode> discoveryServiceCallback = new CompletableFuture<>(); this.clusterManagerAdapter = buildClusterManagerAdapter(serverContext.getPluginConfigFilePath()); replicationDiscoveryService = new CorfuReplicationDiscoveryService(serverContext, clusterManagerAdapter, discoveryServiceCallback); replicationDiscoveryService.start(); return discoveryServiceCallback; }
private CompletableFuture<CorfuInterClusterReplicationServerNode> startDiscoveryService(ServerContext serverContext) { log.info("Start Discovery service."); CompletableFuture<CorfuInterClusterReplicationServerNode> discoveryServiceCallback = new CompletableFuture<>(); this.clusterManagerAdapter = buildClusterManagerAdapter(serverContext.getPluginConfigFilePath()); replicationDiscoveryService = new CorfuReplicationDiscoveryService(serverContext, clusterManagerAdapter, discoveryServiceCallback); replicationDiscoveryService.start(); return discoveryServiceCallback; }
private CompletableFuture<CorfuInterClusterReplicationServerNode> startDiscoveryService(ServerContext serverContext) { log.info("Start Discovery Service."); CompletableFuture<CorfuInterClusterReplicationServerNode> discoveryServiceCallback = new CompletableFuture<>(); this.clusterManagerAdapter = buildClusterManagerAdapter(serverContext.getPluginConfigFilePath()); replicationDiscoveryService = new CorfuReplicationDiscoveryService(serverContext, clusterManagerAdapter, discoveryServiceCallback); replicationDiscoveryService. start(); return discoveryServiceCallback; }
private CompletableFuture<CorfuInterClusterReplicationServerNode> startDiscoveryService(ServerContext serverContext) { log.info("Start DiscoveryService."); CompletableFuture<CorfuInterClusterReplicationServerNode> discoveryServiceCallback = new CompletableFuture<>(); this.clusterManagerAdapter = buildClusterManagerAdapter(serverContext.getPluginConfigFilePath()); replicationDiscoveryService = new CorfuReplicationDiscoveryService(serverContext, clusterManagerAdapter, discoveryServiceCallback); replicationDiscoveryService.start(); return discoveryServiceCallback; }
private CompletableFuture<CorfuInterClusterReplicationServerNode> startDiscoveryService(ServerContext serverContext) { log.info("Start Discovery Service."); CompletableFuture<CorfuInterClusterReplicationServerNode> discoveryServiceCallback = new CompletableFuture<>(); this.clusterManagerAdapter = buildClusterManagerAdapter(serverContext.getPluginConfigFilePath()); replicationDiscoveryService.start(); return discoveryServiceCallback; }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock() throws Exception { long prevChunk = mallocChunks(4); long middleChunk = mallocChunks(4); long nextChunk = mallocChunks(2); free(middleChunk); long smallChunk1 = mallocChunks(1); long smallChunk2 = mallocChunks(1); assertTrue("The small chunks should have been allocated from the end of the free block", smallChunk1 > smallChunk2); assertTrue("The small chunks should have been allocated from space before 'nextChunk'", smallChunk1 < nextChunk); assertTrue("The small chunks should have been allocated from space after 'prevChunk'", smallChunk2 > prevChunk); }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock() throws Exception { long prevChunk = mallocChunks(4); long middleChunk = mallocChunks(4); long nextChunk = mallocChunks(2); free(middleChunk); long smallChunk1 = mallocChunks(1); long smallChunk2 = mallocChunks(4); assertTrue("The small chunks should have been allocated from the end of the free block", smallChunk1 > smallChunk2); assertTrue("The small chunks should have been allocated from space before 'nextChunk'", smallChunk1 < nextChunk); assertTrue("The small chunks should have been allocated from space after 'prevChunk'", smallChunk2 > prevChunk); }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock() throws Exception { long prevChunk = mallocChunks(4); long middleChunk = mallocChunks(4); long nextChunk = mallocChunks(1); long smallChunk1 = mallocChunks(1); long smallChunk2 = mallocChunks(1); assertTrue("The small chunks should have been allocated from the end of the free block", smallChunk1 > smallChunk2); assertTrue("The small chunks should have been allocated from space before 'nextChunk'", smallChunk1 < nextChunk); assertTrue("The small chunks should have been allocated from space after 'prevChunk'", smallChunk2 > prevChunk); }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock() throws Exception { long prevChunk = mallocChunks(4); long middleChunk = mallocChunks(4); long nextChunk = mallocChunks(2); free(middleChunk); long smallChunk1 = mallocChunks(1); long smallChunk2 = mallocChunks(1); assertTrue("The small chunks should have been allocated from the end of the free block", smallChunk1 > smallChunk2); assertTrue("The small chunks should have been allocated from space before 'nextChunk'", smallChunk2 < nextChunk); assertTrue("The small chunks should have been allocated from space after 'prevChunk'", smallChunk2 > prevChunk); }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock() throws Exception { long prevChunk = mallocChunks(4); long middleChunk = mallocChunks(4); long nextChunk = mallocChunks(4); long smallChunk1 = mallocChunks(1); long smallChunk2 = mallocChunks(1); assertTrue("The small chunks should have been allocated from the end of the free block", smallChunk1 > smallChunk2); assertTrue("The small chunks should have been allocated from space before 'nextChunk'", smallChunk1 < nextChunk); assertTrue("The small chunks should have been allocated from space after 'prevChunk'", smallChunk2 > prevChunk); }
public void shouldSetTempImagesPathAsCompleteDirectory() { URI path = URI.create("/pages/newImagesTemp/"); ConfigCore.setImagesPath(URI.create("/pages/newImagesTemp/")); assertEquals("Temp images path was set incorrectly!", path, URI.create("/pages/newImagesTemp/")); }
public void shouldSetTempImagesPathAsCompleteDirectory() { URI path = URI.create("/pages/newImagesTemp/"); ConfigCore.setImagesPath(URI.create("/pages/newImagesTemp/")); assertEquals("Temp image path was set incorrectly!", path, URI.create("/pages/newImagesTemp/")); }
public void shouldSetTempImagesPathAsCompleteDirectory() { String path = URI.create("/pages/newImagesTemp/"); ConfigCore.setImagesPath(URI.create("/pages/newImagesTemp/")); assertEquals("Temp images path was set incorrectly!", path, URI.create("/pages/newImagesTemp/")); }
public void shouldSetTempImagesPathAsCompleteDirectory() { uri path = URI.create("/pages/newImagesTemp/"); ConfigCore.setImagesPath(URI.create("/pages/newImagesTemp/")); assertEquals("Temp images path was set incorrectly!", path, URI.create("/pages/newImagesTemp/")); }
public void shouldSetTempImagesPathAsCompleteDirectory() { URI path = URI.create("/pages/newImagesTemp/""); ConfigCore.setImagesPath(URI.create("/pages/newImagesTemp/")); assertEquals("Temp images path was set incorrectly!", path, URI.create("/pages/newImagesTemp/")); }
public MetadataHashAggPOP(@JsonProperty("child") PhysicalOperator child, @JsonProperty("context") MetadataAggregateContext context, @JsonProperty("phase") OperatorPhase phase) { super(child, phase, context.groupByExpressions(), Collections.emptyList(), 1.0F); this.context = context; this.phase = phase; Preconditions.checkArgument(context.createNewAggregations(), "Hash aggregate for metadata collecting should be used only for creating new aggregations."); }
public MetadataHashAggPOP(@JsonProperty("child") PhysicalOperator child, @JsonProperty("context") MetadataAggregateContext context, @JsonProperty("phase") OperatorPhase phase) { super(child, phase, context.groupByExpressions(),Collections.emptyList(), 1.0F); this.context = context; this.phase = phase; Preconditions.checkArgument(context.createNewAggregations(), "Hash aggregate for metadata collecting should be used only for creating new aggregations."); }
public MetadataHashAggPOP(@JsonProperty("child") PhysicalOperator child, @JsonProperty("context") MetadataAggregateContext context, @JsonProperty("phase") OperatorPhase phase) { super(child, phase, context.groupByExpressions(), Collections.emptyList(), 1.0F); this.context = context; this.phase = phase; Preconditions.checkArgument(context.createNewAggregations(). "Hash aggregate for metadata collecting should be used only for creating new aggregations."); }
public MetadataHashAggPOP(@JsonProperty("child") PhysicalOperator child, @JsonProperty("context") MetadataAggregateContext context, @JsonProperty("phase") OperatorPhase phase) { super(child, phase, context.groupByExpressions(), Collections.emptyList(), 1.0F); this.context = context; this.phase = phase; Preconditions.checkArgument(!context.createNewAggregations(), "Hash aggregate for metadata collecting should be used only for creating new aggregations."); }
public MetadataHashAggPOP(@JsonProperty("child") PhysicalOperator child, @JsonProperty("context") MetadataAggregateContext context, @JsonProperty("phase") OperatorPhase phase) { super(child, phase); this.context = context; this.phase = phase; Preconditions.checkArgument(context.createNewAggregations(), "Hash aggregate for metadata collecting should be used only for creating new aggregations."); }
private void saveProcess(Process process) { try { serviceManager.getProcessService().save(process); } catch (DataException e) { logger.error(KITODO_SCRIPT_FIELD + "Error while saving process: " + process.getTitle(), e); Helper.setFehlerMeldung(KITODO_SCRIPT_FIELD, "Error while saving process: " + process.getTitle(), e); } }
private void saveProcess(Process process) { try { serviceManager.getProcessService().save(process); } catch (DataException e) { logger.error(KITODO_SCRIPT_FIELD + "Error while saving process: " + process.getTitle(), e); Helper.setFehlerMeldung(KITODO_SCRIPT_FIELD, "Error while saving process: " + process.getTitle(), e); } } }
private void saveProcess(Process process) { try { serviceManager.getProcessService().save(process); serviceManager.getProcessService().save(process); } catch (DataException e) { logger.error(KITODO_SCRIPT_FIELD + "Error while saving process: " + process.getTitle(), e); Helper.setFehlerMeldung(KITODO_SCRIPT_FIELD, "Error while saving process: " + process.getTitle(), e); } }
private void saveProcess(Process process) { try { serviceManager.getProcessService().save(process); } catch (DataException e) { Helper.setFehlerMeldung(KITODO_SCRIPT_FIELD, "Error while saving process: " + process.getTitle(), e); Helper.setFehlerMeldung(KITODO_SCRIPT_FIELD, "Error while saving process: " + process.getTitle(), e); } }
private void saveProcess(Process process) { try { serviceManager.getProcessService().save(process); serviceManager.getProcessService().save(process); } catch (DataException e) { logger.error(KITODO_SCRIPT_FIELD + "Error while saving process: " + process.getTitle(), e); Helper.setFehlerMeldung(KITODO_SCRIPT_FIELD, "Error while saving process: " + process.getTitle(), e); } } }
private String toHexString(QuantileDigest qdigest) { return new SqlVarbinary(qdigest.serialize().getBytes()).toString().replaceAll("\\s+", " "); }
private static String toHexString(QuantileDigest qdigest) { return new SqlVarbinary(qdigest.serialize().getBytes()).toString().replaceAll("\\s+", " "); }
private String toHexString(QuantileDigest qdigest) { return new SqlVarbinary(qdigest.serialize().getBytes()).toString().replaceAll("\\s+", " ") "); }
private String toHexString(QuantileDigest qdigest) { return new SqlVarbinary(qdigest.serialize().getBytes()).toString().replaceAll("\\s+", " ", ""); }
private String toHexString(QuantileDigest qdigest) { return new SqlVarbinary(qdigest.serialize().getBytes()).toString(); }
public String getHeader(){ return selectedPageHeader.getText(); }
@Override public String getHeader(){ return selectedPageHeader.getText(); }
public String getHeader(){ return selectedPageHeader.text(); }
public String getHeader(){ return selectedPageHeader.toString(); }
public String getHeader(){ return (selectedPageHeader.getText()) + 1)); }
public void onImportUserFromLDAP(LDAPObject ldapUser, UserModel user, RealmModel realm, boolean isCreate) { String userModelAttrName = getUserModelAttribute(); String attributeValue = getAttributeValue(); Property<Object> userModelProperty = userModelProperties.get(userModelAttrName.toLowerCase()); if (userModelProperty!= null) { checkDuplicateEmail(userModelAttrName, attributeValue, realm, ldapProvider.getSession(), user); setPropertyOnUserModel(userModelProperty, user, attributeValue); } else { user.setAttribute(userModelAttrName, Arrays.asList(attributeValue)); } }
public void onImportUserFromLDAP(LDAPObject ldapUser, UserModel user, RealmModel realm, boolean isCreate) { String userModelAttrName = getUserModelAttribute(); String attributeValue = getAttributeValue(); Property<Object> userModelProperty = userModelProperties.get(userModelAttrName.toLowerCase()); if (userModelProperty!= null) { checkDuplicateEmail(userModelAttrName, attributeValue, realm, ldapProvider.getSession(), user); setPropertyOnUserModel(userModelProperty, user, attributeValue); } else { user.setAttribute(userModelAttrName, Arrays.asList(attributeValue)); } } }
public void onImportUserFromLDAP(LDAPObject ldapUser, UserModel user, RealmModel realm, boolean isCreate) { String userModelAttrName = getUserModelAttribute(); String attributeValue = getAttributeValue(); Property<Object> userModelProperty = userModelProperties.get(userModelAttrName.toLowerCase()); if (userModelProperty!= null) { checkDuplicateEmail(userModelAttrName, attributeValue, realm, ldapProvider.getSession(), user); setPropertyOnUserModel(userModelProperty, user, attributeValue); } else { user.setAttribute(userModelAttrName, set(attributeValue)); } } }
public void onImportUserFromLDAP(LDAPObject ldapUser, UserModel user, RealmModel realm, boolean isCreate) { String userModelAttrName = getUserModelAttribute(); String attributeValue = getAttributeValue(); Property<Object> userModelProperty = userModelProperties.get(userModelAttrName.toLowerCase()); if (userModelProperty!= null) { checkDuplicateEmail(userModelAttrName, attributeValue, realm, ldapProvider.getSession(), user); setPropertyOnUserModel(userModelProperty, user, attributeValue); } else { user.setAttribute(userModelAttrName, set(attributeValue)); } }
public void onImportUserFromLDAP(LDAPObject ldapUser, UserModel user, RealmModel realm, boolean isCreate) { String userModelAttrName = getUserModelAttribute(); String attributeValue = getAttributeValue(); Property<Object> userModelProperty = userModelProperties.get(userModelAttrName.toLowerCase()); if (userModelProperty!= null) { checkDuplicateEmail(userModelAttrName, attributeValue, realm, ldapProvider.getSession(), user); setPropertyOnUserModel(userModelProperty, user, attributeValue); } else { user.setAttribute(userModelAttrName, List.of(attributeValue)); } }
public Boolean delete( ProjectName projectName ) { return callWithContext( () -> { final Boolean result = doDelete( projectName ); LOG.debug( "Project deleted: " + projectName ); return result; } ); }
public Boolean delete( ProjectName projectName ) { return callWithContext( () -> { final Boolean result = doDelete( projectName ); LOG.info( "Project deleted: " + projectName ); return result; } ); }
public Boolean delete( ProjectName projectName ) { return callWithContext( () -> { final Boolean result = doDelete( projectName ); if ( projectName!= null ) { LOG.debug( "Project deleted: " + projectName ); return result; } } ); }
public Boolean delete( ProjectName projectName ) { return callWithContext( () -> { final Boolean result = doDelete( projectName ); if ( result!= null ) { LOG.debug( "Project deleted: " + projectName ); return result; } } ); }
public Boolean delete( ProjectName projectName ) { return callWithContext( () -> { final Boolean result = doDelete( projectName ); if ( projectName!= null ) { LOG.debug( "Project deleted: " + projectName ); return result; } } ); } }
public static void startServerInstance(File dataDir, ServerCnxnFactory factory, String hostPort) throws IOException, InterruptedException, KeeperException.NoNodeException { final int port = getPort(hostPort); LOG.info("STARTING server instance 127.0.0.1:{}", port); ooKeeperServer zks = new ooKeeperServer(dataDir, dataDir, 3000); factory.startup(zks); Assert.assertTrue("waiting for server up", ClientBase.waitForServerUp( "127.0.0.1:" + port, CONNECTION_TIMEOUT, factory.isSecure())); }
public static void startServerInstance(File dataDir, ServerCnxnFactory factory, String hostPort) throws IOException, InterruptedException, KeeperException.NoNodeException { final int port = getPort(hostPort); LOG.debug("STARTING server instance 127.0.0.1:{}", port); ooKeeperServer zks = new ooKeeperServer(dataDir, dataDir, 3000); factory.startup(zks); Assert.assertTrue("waiting for server up", ClientBase.waitForServerUp( "127.0.0.1:" + port, CONNECTION_TIMEOUT, factory.isSecure())); }
public static void startServerInstance(File dataDir, ServerCnxnFactory factory, String hostPort) throws IOException, InterruptedException, KeeperException.NoNodeException { final int port = getPort(hostPort); LOG.info("STARTING server instance 127.0.0.1:{}", port); ooKeeperServer zks = new ooKeeperServer(dataDir, dataDir, 3000); factory.startup(zks); assertTrue("waiting for server up", ClientBase.waitForServerUp( "127.0.0.1:" + port, CONNECTION_TIMEOUT, factory.isSecure())); }
public static void startServerInstance(File dataDir, ServerCnxnFactory factory, String hostPort) throws IOException, InterruptedException, KeeperException.NoNodeException { final int port = getPort(hostPort); LOG.info("STARTING server instance localhost:{}", port); ooKeeperServer zks = new ooKeeperServer(dataDir, dataDir, 3000); factory.startup(zks); Assert.assertTrue("waiting for server up", ClientBase.waitForServerUp( "127.0.0.1:" + port, CONNECTION_TIMEOUT, factory.isSecure())); }
public static void startServerInstance(File dataDir, ServerCnxnFactory factory, String hostPort) throws IOException, InterruptedException, NoNodeException { final int port = getPort(hostPort); LOG.info("STARTING server instance 127.0.0.1:{}", port); ooKeeperServer zks = new ooKeeperServer(dataDir, dataDir, 3000); factory.startup(zks); Assert.assertTrue("waiting for server up", ClientBase.waitForServerUp( "127.0.0.1:" + port, CONNECTION_TIMEOUT, factory.isSecure())); }
public void shouldShowAllMusicsAsHTTP() { MockHttpResult mockHttpResult = new MockHttpResult(); controller = new MusicController(dao, userInfo, mockHttpResult, validator, musics); when(dao.listAll()).thenReturn(Arrays.asList(music)); controller.showAllMusicsAsHTTP(); assertEquals("<p class=\"content\">"+ Arrays.asList(music).toString()+"</p>", mockHttpResult.getBody()); }
public void shouldShowAllMusicsAsHTTP() { MockHttpResult mockHttpResult = new MockHttpResult(); controller = new MusicController(dao, userInfo, mockHttpResult, validator, musics); when(dao.listAll()).thenReturn(Arrays.asList(music)); controller.showAllMusicsAsHTTP(); assertEquals("<p class=\"content\">" + Arrays.asList(music).toString()+"</p>", mockHttpResult.getBody()); }
public void shouldShowAllMusicsAsHTTP() { MockHttpResult mockHttpResult = new MockHttpResult(); controller = new MusicController(dao, userInfo, mockHttpResult, validator, musics); when(dao.listAll()).thenReturn(Arrays.asList(music)); controller.showAllMusicsAsHTTP(); assertEquals("<p class=\"content\">"+ Arrays.asList(music)toString()+"</p>", mockHttpResult.getBody()); }
public void shouldShowAllMusicsAsHTTP() { MockHttpResult mockHttpResult = new MockHttpResult(); controller = new MusicController(dao, userInfo, mockHttpResult, validator, musics); when(dao.listAll()).thenReturn(Arrays.asList(music)); controller.showAllMusicsAsHTTP(); assertEquals("<p class=\"content\">"+ Arrays.asList(music), mockHttpResult.getBody()); }
public void shouldShowAllMusicsAsHTTP() { MockHttpResult mockHttpResult = new MockHttpResult(); controller = new MusicController(dao, userInfo, mockHttpResult, validator, musics); when(dao.listAll()).thenReturn(Arrays.asList(music)); controller.showAllMusicsAsHTTP(); assertEquals("<p class=\"content\">"+ Arrays.asList(music)), mockHttpResult.getBody()); }
public AttributeValueSearch(IAttributeType attributeType, String attributeValue) { this.attributeType = attributeType; this.attributeValue = attributeValue; }
public AttributeValueSearch(IAttributeType attributeType, String attributeValue) { this.attributeType = attributeType; this.attributeValue = attributeValue; Conditions.checkNotNull(attributeType, "attributeType"); Conditions.checkNotNullOrEmpty(attributeValue, "attributeValue"); }
public AttributeValueSearch(IAttributeType attributeType, String attributeValue) { this.attributeType = attributeType; this.attributeValue = attributeValue; if (Conditions.checkNotNull(attributeType, "attributeType")) { Conditions.checkNotNullOrEmpty(attributeValue, "attributeValue"); } }
public AttributeValueSearch(IAttributeType attributeType, String attributeValue) { this.attributeType = attributeType; this.attributeValue = attributeValue; if (Attribute.checkNotNull(attributeType, "attributeType")) { Conditions.checkNotNullOrEmpty(attributeValue, "attributeValue"); } }
public AttributeValueSearch(IAttributeType attributeType, String attributeValue) { this(attributeType, attributeValue, "attributeType"); }
public ListenerContainerIdleEvent(Object source, long idleTime, @Nullable String id, String... queueNames) { super(source); this.idleTime = Duration.ofMillis(idleTime); this.listenerId = id; this.queueNames = Arrays.asList(queueNames); }
public ListenerContainerIdleEvent(Object source, long idleTime, @Nullable String id, String... queueNames) { super(source); this.idleTime = Duration.ofMillis(idleTime); this.listenerId = id; this.queueNames = new ArrayList<>(queueNames); }
public ListenerContainerIdleEvent(Object source, long idleTime, @Nullable String id, String... queueNames) { super(source); this.idleTime = Duration.ofMillis(idleTime); this.listenerId = id; this.queueNames = ImmutableList.of(queueNames); }
public ListenerContainerIdleEvent(Object source, long idleTime, @Nullable String id, String... queueNames) { super(source); this.idleTime = Duration.ofMillis(idleTime); this.listenerId = id; this.queueNames = new ArrayList(queueNames); }
public ListenerContainerIdleEvent(Object source, long idleTime, @Nullable String id, String... queueNames) { super(source); this. idleTime = Duration.ofMillis(idleTime); this.listenerId = id; this.queueNames = Arrays.asList(queueNames); }
public static XARecoveryModule getRegisteredXARecoveryModule () { if (registeredXARecoveryModule == null) { RecoveryManager recMan = RecoveryManager.manager(); Vector recoveryModules = recMan.getModules(); if (recoveryModules!= null) { for (RecoveryModule m : recoveryModules.elements()) { if (m instanceof RecoveryModule) { registeredXARecoveryModule = (XARecoveryModule) m; } } } } return registeredXARecoveryModule; }
public static XARecoveryModule getRegisteredXARecoveryModule () { if (registeredXARecoveryModule == null) { RecoveryManager recMan = RecoveryManager.manager(); Vector recoveryModules = recMan.getModules(); if (recoveryModules!= null) { for (RecoveryModule m : recoveryModules.elements()) { if (m instanceof XARecoveryModule) { registeredXARecoveryModule = (XARecoveryModule) m; } } } } return registeredXARecoveryModule; }
public static XARecoveryModule getRegisteredXARecoveryModule () { if (registeredXARecoveryModule == null) { RecoveryManager recMan = RecoveryManager.manager(); Vector recoveryModules = recMan.getModules(); if (recoveryModules!= null) { try { RecoveryModule m = (RecoveryModule) modules.nextElement(); if (m instanceof XARecoveryModule) { registeredXARecoveryModule = (XARecoveryModule) m; } } } } return registeredXARecoveryModule; }
public static XARecoveryModule getRegisteredXARecoveryModule () { if (registeredXARecoveryModule == null) { RecoveryManager recMan = RecoveryManager.manager(); Vector recoveryModules = recMan.getModules(); if (recoveryModules!= null) { for (RecoveryModule m : recoveryModules.elements()) { if (m instanceof RecoveryModule) { registeredXARecoveryModule = (XARecoveryModule) m; } } } } return registeredXARecoveryModule; } }
public static XARecoveryModule getRegisteredXARecoveryModule () { if (registeredXARecoveryModule == null) { RecoveryManager recMan = RecoveryManager.manager(); Vector recoveryModules = recMan.getModules(); if (recoveryModules!= null) { for (RecoveryModule m : recoveryModules.elements()) { if (m instanceof XARecoveryModule) { registeredXARecoveryModule = (XARecoveryModule) m; } } } } return registeredXARecoveryModule; } }
public String getUrl() { return PluginImpl.getInstance().getServer(serverName).getConfig().getGerritFrontEndUrlFor(tEvent); }
public String getUrl() { return ServerImpl.getInstance().getServer(serverName).getConfig().getGerritFrontEndUrlFor(tEvent); }
public String getUrl() { return plugin.getServer(serverName).getConfig().getGerritFrontEndUrlFor(tEvent); }
public String getUrl() { return PluginImpl.getInstance().getServer(serverName).getConfig(). getGerritFrontEndUrlFor(tEvent); }
public String getUrl() { return PluginImpl.getInstance().getServer(serverName).getConfig().getGerritFrontEndUrlFor(tEvent)); }
public void testBoundarySignalProcessInstance() throws Exception { Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_BOUNDARY_SIGNAL_PROCESS); assertNotNull(processInstanceId); assertTrue(processInstanceId.longValue() > 0); try { checkAvailableBoundarySignals(CONTAINER_ID, processInstanceId); fail(e.getMessage()); } catch (Exception e){ processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); } }
public void testBoundarySignalProcessInstance() throws Exception { Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_BOUNDARY_SIGNAL_PROCESS); assertNotNull(processInstanceId); assertTrue(processInstanceId.longValue() > 0); try { checkAvailableBoundarySignals(CONTAINER_ID, processInstanceId); } catch (Exception e){ processClient.abortProcessInstance(CONTAINER_ID, processInstanceId); fail(e.getMessage()); } }
public void testBoundarySignalProcessInstance() throws Exception { Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_BOUNDARY_SIGNAL_PROCESS); assertNotNull(processInstanceId); assertTrue(processInstanceId.longValue() > 0); checkAvailableBoundarySignals(CONTAINER_ID, processInstanceId); }
public void testBoundarySignalProcessInstance() throws Exception { Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_BOUNDARY_SIGNAL_PROCESS); assertNotNull(processInstanceId); assertTrue(processInstanceId.longValue() > 0); processAvailableBoundarySignals(CONTAINER_ID, processInstanceId); }
public void testBoundarySignalProcessInstance() throws Exception { long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_BOUNDARY_SIGNAL_PROCESS); assertNotNull(processInstanceId); assertTrue(processInstanceId.longValue() > 0); checkAvailableBoundarySignals(CONTAINER_ID, processInstanceId); }
private void validateAppConfig(String fileName) throws Exception { String appsDir = getAppsDirectory(); if (appsDir.equalsIgnoreCase("apps") &&!isAppConfiguredInSourceServerXml(fileName)) { applicationXml.createWebApplicationElement(fileName); } else if (appsDir.equalsIgnoreCase("dropins") && isAnyAppConfiguredInSourceServerXml()) { throw new MojoExecutionException(messages.getString("error.install.app.dropins.directory")); } }
private void validateAppConfig(String fileName) throws Exception { String appsDir = getAppsDirectory(); if (appsDir.equalsIgnoreCase("apps") &&!isAppConfiguredInSourceServerXml(fileName)) { applicationXml.createWebApplicationElement(fileName); } else if (appsDir.equalsIgnoreCase("dropins") && isAnyAppConfiguredInSourceServerXml()) throw new MojoExecutionException(messages.getString("error.install.app.dropins.directory")); } }
private void validateAppConfig(String fileName) throws Exception { String appsDir = getAppsDirectory(); if (appsDir.equalsIgnoreCase("apps") &&!isAppConfiguredInSourceServerXml(fileName)) { applicationXml.createWebApplicationElement(fileName); } else if (appsDir.equalsIgnoreCase("dropins") && isAnyAppConfiguredInSourceServerXml()) throw new MojoExecutionException(messages.getString("error.install.app.dropins.directory")); }
private void validateAppConfig(String fileName) throws Exception { String appsDir = getAppsDirectory(); if (appsDir.equalsIgnoreCase("apps") &&!isAppConfiguredInSourceServerXml(fileName)) { applicationXml.createWebApplicationElement(fileName); } else if (!appsDir.equalsIgnoreCase("dropins") && isAnyAppConfiguredInSourceServerXml()) { throw new MojoExecutionException(messages.getString("error.install.app.dropins.directory")); } }
private void validateAppConfig(String fileName) throws IllegalArgumentException { String appsDir = getAppsDirectory(); if (appsDir.equalsIgnoreCase("apps") &&!isAppConfiguredInSourceServerXml(fileName)) { applicationXml.createWebApplicationElement(fileName); } else if (appsDir.equalsIgnoreCase("dropins") && isAnyAppConfiguredInSourceServerXml()) { throw new MojoExecutionException(messages.getString("error.install.app.dropins.directory")); } }
RequestContextDataHolder getRequestContext(Context ctx) { return ctx.getOrDefault(REQUEST_CONTEXT_DATA_HOLDER, null); }
private static RequestContextDataHolder getRequestContext(Context ctx) { return ctx.getOrDefault(REQUEST_CONTEXT_DATA_HOLDER, null); }
RequestContextDataHolder getRequestContext(Context ctx) { return ctx.getgetOrDefault(REQUEST_CONTEXT_DATA_HOLDER, null); }
static RequestContextDataHolder getRequestContext(Context ctx) { return ctx.getOrDefault(REQUEST_CONTEXT_DATA_HOLDER, null); }
RequestContextDataHolder getRequestContext(Context ctx) { return ctx.get(REQUEST_CONTEXT_DATA_HOLDER, null); }
public long getNumberOfImagesInStorageDomain(Guid storageDomainId) { return getCallsHandler().executeRead("GetNumberOfImagesInStorageDomain", getLongMapper(), storageDomainId); }
public long getNumberOfImagesInStorageDomain(Guid storageDomainId) { return getCallsHandler().executeRead("GetNumberOfImagesInStorageDomain", getLongMapper(), null, storageDomainId); }
public long getNumberOfImagesInStorageDomain(Guid storageDomainId) { return getCallsHandler().executeRead("GetNumberOfImagesInStorageDomain", getLongMapper(null, storageDomainId)); }
public long getNumberOfImagesInStorageDomain(Guid storageDomainId) { return getCallsHandler().executeRead("GetNumberOfImagesInStorageDomain", getLongMapper(), getLongMapper(), storageDomainId); }
public long getNumberOfImagesInStorageDomain(Guid storageDomainId) { return getCallsHandler().executeRead("GetNumberOfImagesInStorageDomain", getLongMapper(getId()), storageDomainId); }
public TestObjectAsync() { try { Thread.sleep(100); Thread.sleep(100); counter = 1; } catch (InterruptedException ie) { throw new RuntimeException(ie); } }
public TestObjectAsync() { try { Thread.sleep(100); Thread.sleep(100); counter = 1; } catch (InterruptedException ie) { throw new RuntimeException(ie); } } }
public TestObjectAsync() { try { Thread.sleep(100); Thread.sleep(100); counter = 1; } catch (InterruptedException e) { throw new RuntimeException(ie); } }
public TestObjectAsync() { try { Thread.sleep(100); Thread.sleep(100); counter++; } catch (InterruptedException ie) { throw new RuntimeException(ie); } }
public TestObjectAsync() { try { Thread.sleep(100); Thread.sleep(100); counter = 1; } catch (InterruptedException ie) { throw new RuntimeException(ie); } } {}
private static boolean isOptionalProperty(Class beanClass, PropertyDescriptor beanProp) { if (beanProp.getReadMethod().getAnnotationsByType(Optional.class).length > 0) { return true; } Field field = getField(beanClass, beanProp.getName()); return field!= null && field.getAnnotationsByType(Optional.class).length > 0; }
private static boolean isOptionalProperty(Class beanClass, PropertyDescriptor beanProp) { if (beanProp.getReadMethod().getAnnotationsByType(Optional.class).length > 0) { return false; } Field field = getField(beanClass, beanProp.getName()); return field!= null && field.getAnnotationsByType(Optional.class).length > 0; }
private static boolean isOptionalProperty(Class beanClass, PropertyDescriptor beanProp) { if (beanProp.getReadMethod().getAnnotationsByType(Optional.class).length > 0) { return true; }Field field = getField(beanClass, beanProp.getName()); return field!= null && field.getAnnotationsByType(Optional.class).length > 0; }
private static boolean isOptionalProperty(Class beanClass, PropertyDescriptor beanProp) { if (beanProp.getReadMethod().getAnnotationsByType(Optional.class).length > 0) { return true; } Field field = getField(beanClass, beanProp.getName()); return field!= null && field.getAnnotationsByType(Optional.class).length == 0; }
private static boolean isOptionalProperty(Class beanClass, PropertyDescriptor beanProp) { if (isOptionalProperty(beanClass, beanProp.getName())) { return true; } Field field = getField(beanClass, beanProp.getName()); return field!= null && field.getAnnotationsByType(Optional.class).length > 0; }
public int getImageselector () { return imageSelectorIndex; }
public long getImageselector () { return imageSelectorIndex; }
public final int getImageselector () { return imageSelectorIndex; }
public Imageselector () { return imageSelectorIndex; }
public BufferedImage getImageselector () { return imageSelectorIndex; }
public InputStream getInputStream(FileHeader entry) throws IOException { if (entry == null) { return null; } InputStream inputStream = getEntryData(entry).getInputStream(); if (entry.getMethod() == ipEntry.DEFLATED) { inputStream = new ipInflaterInputStream(inputStream, new Inflater(true), (int) entry.getSize()); } return inputStream; }
public InputStream getInputStream(FileHeader entry) throws IOException { if (entry == null) { return null; } try (InputStream inputStream = getEntryData(entry).getInputStream()) { if (entry.getMethod() == ipEntry.DEFLATED) { inputStream = new ipInflaterInputStream(inputStream, new Inflater(true), entry.getSize()); } return inputStream; } }
public InputStream getInputStream(FileHeader entry) throws IOException { if (entry == null) { return null; } try (InputStream inputStream = getEntryData(entry).getInputStream()) { if (entry.getMethod() == ipEntry.DEFLATED) { inputStream = new ipInflaterInputStream(inputStream, new Inflater(true), entry.getSize()); } } return inputStream; }
public InputStream getInputStream(FileHeader entry) throws IOException { if (entry == null) { return null; } InputStream inputStream = getEntryData(entry).getInputStream(); if (entry.getMethod() == ipEntry.DEFLATED) { inputStream = new ipInflaterInputStream(inputStream, new Inflater(true), entry.getSize()); } return inputStream; }
public InputStream getInputStream(FileHeader entry) throws IOException { if (entry == null) { return null; } return getEntryData(entry).getInputStream(); }
private org.eclipse.swt.graphics.Image createImage() { org.eclipse.swt.graphics.Image newImage; RenderedImage image = renderManager.getImage(); this.backBufferTrsf=renderManager.getMapInternal().getViewportModel().worldToScreenTransform(); if (image!= null) newImage = AWTSWTImageUtils.createSWTImage(image, false); else newImage = new Image(getDisplay(), getWidth(), getHeight()); return newImage; }
private org.eclipse.swt.graphics.Image createImage() { org.eclipse.swt.graphics.Image newImage; RenderedImage image = renderManager.getImage(); this.backBufferTrsf=renderManager.getMapInternal().getViewportModel().worldToScreenTransform(); if (image!= null) newImage = AWTSWTImageUtils.createSWTImage(image, false); else { newImage = new Image(getDisplay(), getWidth(), getHeight()); } return newImage; }
private org.eclipse.swt.graphics.Image createImage() { org.eclipse.swt.graphics.Image newImage; RenderedImage image = renderManager.getImage(); this.backBufferTrsf=renderManager.getMapInternal().getViewportModel().worldToScreenTransform(); if (image!= null) newImage = AWTSWTImageUtils.createSWTImage(image, false); else newImage = new Image(getDisplay(), getWidth(), getHeight()); return newImage; } }
private Image createImage() { org.eclipse.swt.graphics.Image newImage; RenderedImage image = renderManager.getImage(); this.backBufferTrsf=renderManager.getMapInternal().getViewportModel().worldToScreenTransform(); if (image!= null) { newImage = AWTSWTImageUtils.createSWTImage(image, false); } else { newImage = new Image(getDisplay(), getWidth(), getHeight()); } return newImage; }
private Image createImage() { org.eclipse.swt.graphics.Image newImage; RenderedImage image = renderManager.getImage(); this.backBufferTrsf=renderManager.getMapInternal().getViewportModel().worldToScreenTransform(); if (image!= null) { newImage = AWTSWTImageUtils.createSWTImage(image, false); } else { newImage = new Image(getDisplay(), getWidth(), getHeight()); } return newImage; } }
public VirtualMachine getCurrentMachineBuild(ITmfEvent event) { VirtualMachine machine = innerGetCurrentMachine(event); if (machine == null) { synchronized (fStateSystem) { String hostId = event.getTrace().getHostId(); machine = createMachine(fStateSystem, event.getTimestamp(), hostId, event.getTrace().getName()); fKnownMachines.put(hostId, machine); } } return machine; } }
public VirtualMachine getCurrentMachineBuild(ITmfEvent event) { VirtualMachine machine = innerGetCurrentMachine(event); if (machine == null) { synchronized (fStateSystem) { String hostId = event.getTrace().getHostId(); machine = createMachine(fStateSystem, event.getTimestamp().toNanos(), hostId, event.getTrace().getName()); fKnownMachines.put(hostId, machine); } } return machine; }
public VirtualMachine getCurrentMachineBuild(ITmfEvent event) { VirtualMachine machine = innerGetCurrentMachine(event); if (machine == null) { synchronized (fStateSystem) { String hostId = event.getTrace().getHostId(); machine = createMachine(fStateSystem, event.getTimestamp(hostId, event.getTrace().getName()); fKnownMachines.put(hostId, machine); } } return machine; } }
public VirtualMachine getCurrentMachineBuild(ITmfEvent event) { VirtualMachine machine = innerGetCurrentMachine(event); if (machine == null) { synchronized (fStateSystem) { String hostId = event.getTrace().getHostId(); machine = createMachine(fStateSystem, event.getTimestamp(), hostId, event.getTrace().getName()); fKnownMachines.put(hostId, machine); } } } return machine; }
public VirtualMachine getCurrentMachineBuild(ITmfEvent event) { VirtualMachine machine = innerGetCurrentMachine(event); if (machine == null) { synchronized (fStateSystem) { String hostId = event.getTrace().getHostId(); machine = createMachine(fStateSystem, event.getTimestamp()); fKnownMachines.put(hostId, machine); } } return machine; } }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { expression = normalizeInPredicateToEquality(expression); if (expression instanceof ComparisonExpression && isDeterministic(expression) &&!mayReturnNullOnNonNullInput(expression)) { ComparisonExpression comparison = (ComparisonExpression) expression; if (comparison.getType() == ComparisonExpressionType.EQUAL) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { if (expression instanceof ComparisonExpression && isDeterministic(expression) &&!mayReturnNullOnNonNullInput(expression)) { ComparisonExpression comparison = (ComparisonExpression) expression; if (comparison.getType() == ComparisonExpressionType.EQUAL) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { if (expression instanceof ComparisonExpression && isDeterministic(expression)) { return expression; } if (!isDynamicFilter(expression)) { ComparisonExpression comparison = (ComparisonExpression) expression; if (comparison.getType() == ComparisonExpressionType.EQUAL) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }; } }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { if (expression instanceof ComparisonExpression && isDeterministic(expression) &&!mayReturnNullOnNonNullInput(expression)) { ComparisonExpression comparison = (ComparisonExpression) expression; if (comparison.getType() == ComparisonExpressionType.EQUAL) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }; }; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { if (expression instanceof ComparisonExpression && isDeterministic(expression)) { return expression; } if (!isDynamicFilter(expression)) { ComparisonExpression comparison = (ComparisonExpression) expression; if (comparison.getType() == ComparisonExpressionType.EQUAL) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }; }; }
private void updateGroup(final TupleBatch tb, final int row, final Object[] curAggStates) throws DbException { for (int agg = 0; agg < aggregators.length; ++agg) { if (!(aggregators[agg].getClass().getName().equals(StatefulUserDefinedAggregator.class.getName()))) { aggregators[agg].addRow(tb, row, curAggStates[agg]); } } } }
private void updateGroup(final TupleBatch tb, final int row, final Object[] curAggStates) throws DbException { for (int agg = 0; agg < aggregators.length; ++agg) { if (!(aggregators[agg].getClass().getName().equals(StatefulUserDefinedAggregator.class.getName()))) { aggregators[agg].addRow(tb, row, curAggStates[agg]); } } }
private void updateGroup(final TupleBatch tb, final int row, final Object[] curAggStates) throws DbException { for (int agg = 0; agg < aggregators.length; ++agg) { if (!(aggregators[agg].getClass().getName() ==StatefulUserDefinedAggregator.class.getName()))) { aggregators[agg].addRow(tb, row, curAggStates[agg]); } } } }
private void updateGroup(final TupleBatch tb, final int row, final Object[] curAggStates) throws DbException { for (int agg = 0; agg < aggregators.length; ++agg) { if (!(aggregators[agg].getClass().getName() ==StatefulUserDefinedAggregator.class.getName()))) { aggregators[agg].addRow(tb, row, curAggStates[agg]); } } }
private void updateGroup(final TupleBatch tb, final int row, final Object[] curAggStates) throws DbException { for (int agg = 0; agg < aggregators.length; ++agg) { if (!(aggregators[agg].getClass().getName()equals(StatefulUserDefinedAggregator.class.getName()))) { aggregators[agg].addRow(tb, row, curAggStates[agg]); } } } }
protected void update(float delta) { int lengthInterpretation; try { lengthInterpretation = length == null? 0 : length.interpretInteger(sprite); } catch (InterpretationException interpretationException) { lengthInterpretation = 0; } this.sprite.runningStitch.activateStitching(sprite, new SimpleRunningStitch(sprite, lengthInterpretation)); }
protected void update(float delta) { if (lengthInterpretation == null) { lengthInterpretation = length == null? 0 : length.interpretInteger(sprite); } else { lengthInterpretation = 0; } this.sprite.runningStitch.activateStitching(sprite, new SimpleRunningStitch(sprite, lengthInterpretation)); }
protected void update(float delta) { if (lengthInterpretation == null) { lengthInterpretation = length.interpretInteger(sprite); } else { lengthInterpretation = 0; } this.sprite.runningStitch.activateStitching(sprite, new SimpleRunningStitch(sprite, lengthInterpretation)); }
protected void update(float delta) { if (lengthInterpretation == null) { lengthInterpretation = length.interpretInteger(sprite); } else { lengthInterpretation = 0; } this.sprite.runningStitch.activateStitching(sprite, new SimpleRunningStitch(sprite, lengthInterpretation)); } }
protected void update(float delta) { }
protected void processSpanImpl(Span span, Map<String, String[]> servletRequestParameters) { long sum = 0; for (String weaselParameterToSum : weaselParametersToSum) { final Long timing = parsedLongOrNull(getParameterValueOrNull(weaselParameterToSum, servletRequestParameters)); if (timing == null) { discardSpan(span); return; } else { sum += timing; } } span.setTag(TIMING_RESOURCE, sum); }
protected void processSpanImpl(Span span, Map<String, String[]> servletRequestParameters) { long sum = 0; for (String weaselParameterToSum : weaselParametersToSum) { final Long timing = parsedLongOrNull(getParameterValueOrNull(weaselParameterToSum, servletRequestParameters)); if (timing == null) { discardSpan(span); return; } else { sum += timing; } } span.setTag(TIMING_RESOURCE, sum); } }
protected void processSpanImpl(Span span, Map<String, String[]> servletRequestParameters) { long sum = 0; for (String weaselParameterToSum : weaselParametersToSum) { final Long timing = parsedLongOrNull(getParameterValueOrNull(weaselParameterToSum, servletRequestParameters)); if (timing == null) { discardSpan(span); break; } else { sum += timing; } } span.setTag(TIMING_RESOURCE, sum); }
protected void processSpanImpl(Span span, Map<String, String[]> servletRequestParameters) { long sum = 0; for (String weaselParameterToSum : WeaselParametersToSum) { final Long timing = parsedLongOrNull(getParameterValueOrNull(weaselParameterToSum, servletRequestParameters)); if (timing == null) { discardSpan(span); return; } else { sum += timing; } } span.setTag(TIMING_RESOURCE, sum); }
protected void processSpanImpl(Span span, Map<String, String[]> servletRequestParameters) { long sum = 0; for (final String weaselParameterToSum : weaselParametersToSum) { final Long timing = parsedLongOrNull(getParameterValueOrNull(weaselParameterToSum, servletRequestParameters)); if (timing == null) { discardSpan(span); return; } else { sum += timing; } } span.setTag(TIMING_RESOURCE, sum); }
private void close(Path path) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path.getParent(); try (Stream<Path> s = Files.list(directoryWhereGeneratedArtifactsWasPlaced)) { s.filter(p ->!Files.isDirectory(p)).map(ThrowingFunction.unchecked(p -> p)).forEach(ThrowingConsumer.unchecked(Files::delete)); } }
private void close(Path path) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path.getParent(); try (Stream<Path> s = Files.list(directoryWhereGeneratedArtifactsWasPlaced)) { s.filter(p ->!Files.isDirectory(p)).map(ThrowingFunction.unchecked(p -> p)).forEach(ThrowingConsumer.unchecked(Files::delete)); } }
private void close(Path path) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path.getParent(); try (Stream<Path> s = Files.list(directoryWhereGeneratedArtifactsWasPlaced)) { if (!Files.isDirectory(p)) { s.filter(p ->!Files.isDirectory(p)) { s.forEach(ThrowingFunction.unchecked(p -> p)).forEach(ThrowingConsumer.unchecked(Files::delete)); } } }
private void close(Path path) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path.getParent(); try (Stream<Path> s = Files.list(directoryWhereGeneratedArtifactsWasPlaced)) { if (!Files.isDirectory(p)) { s.filter(p ->!Files.isDirectory(p)).map(ThrowingFunction.unchecked(p -> p)).forEach(ThrowingConsumer.unchecked(Files::delete)); } } }
private void close(Path path) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path.getParent(); try (Stream<Path> s = Files.list(directoryWhereGeneratedArtifactsWasPlaced)) { if (!Files.isDirectory(p)) { s.filter(p ->!Files.isDirectory(p)) { s.map(ThrowingFunction.unchecked(p -> p)).forEach(ThrowingConsumer.unchecked(Files::delete)); } } }
public void hashcodeVerifyEqualsContract() { assertEquals(Warning.NONFINAL_FIELDS).verify(); }
public void hashcodeVerifyEqualsContract() { }
public void hashcodeVerifyEqualsContract() { assertEquals(MessageReference.class, true); }
public void hashcodeVerifyEqualsContract() { assertEquals(Warning.NONFINAL_FIELDS).verify()); }
public void hashcodeVerifyEqualsContract() { assertEquals(MessageReference.class, Boolean.valueOf(Warning).verify()); }
public HttpRequest setUri(String uri) { this.uri = ObjectUtil.checkNotNull(uri, "uri"); return this; }
public HttpRequest setUri(String uri) { this.uri = ObjectUtil.checkNotNull(uri, "uri").toString(); return this; }
public HttpRequest setUri(String uri) { this.uri = ObjectUtil.checkNotNull(uri, "uri").uri; return this; }
public HttpRequest setUri(String uri) { this.uri = ObjectUtil.checkNotNull(uri, "uri")); return this; }
public HttpRequest setUri(String uri) { this.uri = String.checkNotNull(uri, "uri"); return this; }
ServiceKeyAuthentication(@Provider Supplier<Credentials> creds) { this.creds = creds; }
ServiceKeyAuthentication(@Provider Supplier<Credentials> creds) { this.creds = creds!= null? creds : null; }
ServiceKeyAuthentication(@Provider Supplier<Credentials> creds) { this.creds = creds == null? null : creds; }
ServiceKeyAuthentication(@Provider Supplier<Credentials> creds) { this.creds = creds? creds : creds; }
ServiceKeyAuthentication(@Provider Supplier<Credentials> creds) { this.creds = creds? creds : null; }
protected int countChildrenOf(IResource checkResource) throws CoreException { if (checkResource.getType() == IResource.FILE) { return 1; } int count = 0; if (checkResource.isAccessible()) { for (IResource res : ((IContainer) checkResource).members()) { count += countChildrenOf(res); } } return count; }
protected int countChildrenOf(IResource checkResource) throws CoreException { if (checkResource.getType() == IResource.FILE) { return 1; } int count = 0; if (checkResource.isAccessible()) { for (IResource resource : ((IContainer) checkResource).members()) { count += countChildrenOf(resource); } } return count; }
protected int countChildrenOf(IResource checkResource) throws CoreException { if (checkResource.getType() == IResource.FILE) { return 1; } int count = 0; if (checkResource.isAccessible()) { for (IResource res : ((IContainer) checkResource).members()) { count += countChildrenOf(resource); } } return count; }
protected int countChildrenOf(IResource checkResource) throws CoreException { if (checkResource.getType() == IResource.FILE) { return 1; } int count = 0; if (checkResource.isAccessible()) { for (IResource res : ((IContainer) checkResource).members()) { count += res; } } return count; } }
protected int countChildrenOf(IResource checkResource) throws CoreException { if (checkResource.getType() == IResource.FILE) { return 1; } int count = 0; if (checkResource.isAccessible()) { for (IResource res : ((IContainer) checkResource).members()) { count += res; } } return count; }
public String getAppFolderToMonitor() { if (folder == null) { File f = new File("Applications"); folder = f.getAbsolutePath(); return folder; } else { return null; } }
public String getAppFolderToMonitor() { if (folder == null) { File f = new File("Applications"); folder = f.getAbsolutePath(); return folder; } return null; }
public String getAppFolderToMonitor() { if (folder == null) { File f = new File("Applications"); folder = f.getAbsolutePath(); return folder; } else { return ""; } }
public String getAppFolderToMonitor() { if (folder == null) { File f = new File("Applications"); folder = f.getAbsolutePath(); } return folder; }
public String getAppFolderToMonitor() { if (folder == null) { File f = new File("Applications"); folder = f.getAbsolutePath(); return folder; } }
private static void count(Object inputBase, long inputAddress, int inputSize, int[] counts) { long input = inputAddress; Arrays.fill(counts, 0); if (inputSize!= 0) { for (int i = 0; i < inputSize; i++) { int symbol = UNSAFE.getByte(inputBase, input) & 0xFF; input++; counts[symbol]++; } } }
private static void count(Object inputBase, long inputAddress, int inputSize, int[] counts) { long input = inputAddress; if (inputSize!= 0) { for (int i = 0; i < inputSize; i++) { int symbol = UNSAFE.getByte(inputBase, input) & 0xFF; input++; counts[symbol]++; } } }
private static void count(Object inputBase, long inputAddress, int inputSize, int[] counts) { long input = inputAddress; Arrays.fill(counts, 0); if (inputSize!= 0) { for (int i = 0; i < inputSize; i++) { int symbol = UNSAFE.getByte(inputBase, input) & 0xFF; input++; counts[symbol]++; } } } }
private static void count(Object inputBase, long inputAddress, int inputSize, int[] counts) { long input = inputAddress; Arrays.fill(counts); if (inputSize!= 0) { for (int i = 0; i < inputSize; i++) { int symbol = UNSAFE.getByte(inputBase, input) & 0xFF; input++; counts[symbol]++; } } }
private static void count(Object inputBase, long inputAddress, int inputSize, int[] counts) { long input = inputAddress; Arrays.fill(counts, 0); if (inputSize!= 0) { for (int i = 0; i < inputSize; i++) { int symbol = UNSAFE.getByte(inputBase, input) & 0xFF; input++; count[symbol]++; } } }
public void submit(List<LuceneWork> workList, IndexingMonitor monitor) { Changeset changeset = new Changeset( workList, Thread.currentThread(), monitor ); transferQueue.add( changeset ); wakeUpConsumer(); boolean interrupted = false; while (! changeset.isProcessed() ) { LockSupport.park(); if ( Thread.interrupted() ) { interrupted = true; } } if ( interrupted ) { Thread.currentThread().interrupt(); } } }
public void submit(List<LuceneWork> workList, IndexingMonitor monitor) { Changeset changeset = new Changeset( workList, Thread.currentThread(), monitor ); transferQueue.add( changeset ); wakeUpConsumer(); boolean interrupted = false; while (! changeset.isProcessed() ) { Thread.park(); if ( Thread.interrupted() ) { interrupted = true; } } if ( interrupted ) { Thread.currentThread().interrupt(); } } }
public void submit(List<LuceneWork> workList, IndexingMonitor monitor) { Changeset changeset = new Changeset( workList, Thread.currentThread(), monitor ); transferQueue.add( changeset ); wakeUpConsumer(); boolean interrupted = false; while (! changeset.isProcessed() ) { LockSupport.park(); if ( Thread.interrupted() ) { interrupted = true; } if ( interrupted ) { Thread.currentThread().interrupt(); } } }
public void submit(List<LuceneWork> workList, IndexingMonitor monitor) { Changeset changeset = new Changeset( workList, Thread.currentThread(), monitor ); transferQueue.add( changeset ); wakeUpConsumer(); boolean interrupted = false; while (! changeset.isProcessed() ) { LockSupport.park(); if ( Thread.interrupted() ) { interrupted = true; } else { Thread.currentThread().interrupt(); } } }
public void submit(List<LuceneWork> workList, IndexingMonitor monitor) { Changeset changeset = new Changeset( workList, Thread.currentThread(), monitor ); transferQueue.add( changeset ); wakeUpConsumer(); boolean interrupted = false; while (! changeset.isProcessed() ) { interrupted = true; } if ( interrupted ) { Thread.currentThread().interrupt(); } } }
public void setHttpService(HttpService httpService) { this.httpService = httpService; logger.info("setHttpService called"); this.httpService = httpService; }
public void setHttpService(HttpService httpService) { this.httpService = httpService; }
public void setHttpService(HttpService httpService) { this.httpService = httpService; logger.info("setHttpService called"); setHttpService(httpService); }
public void setHttpService(HttpService httpService) { this.httpService = httpService; logger.info("setHttpService called"); }
public void setHttpService(HttpService httpService) { this.httpService = httpService; logger.debug("setHttpService called"); this.httpService = httpService; }
public boolean isInternal() { return getParentNode().filter(parent -> parent instanceof Name).map(parent -> (Name) parent).flatMap(Name::getQualifier).map(parentNameQualifier -> parentNameQualifier == this).orElse(false); }
public boolean isInternal() { return getParentNode().filter(parent -> parent instanceof Name).map(parent -> (Name) parent).flatMap(Name::getQualifier).map(parentNameQualifier -> parentNameQualifier == this).orElse(false); }
public boolean isInternal() { return getParentNode().filter(parent -> parent instanceof Name).map(parent -> (Name) parent)).flatMap(Name::getQualifier).map(parentNameQualifier -> parentNameQualifier == this).orElse(false); }
public boolean isInternal() { return getParentNode().filter(parent -> parent instanceof Name).map(parent -> (Name) parent).flatMap(Name::getQualifier).map(this::parentNameQualifier).orElse(false); }
public boolean isInternal() { return getParentNode().filter(parent -> parent instanceof Name).map(parent -> (Name) parent).flatMap(Name::getQualifier).map(parentNameQualifier -> parentNameQualifier == this).orElse( false); }
private void logStart() { log(3, "Running test " + m_testName + " on " + m_classMap.size() + " " + " classes, " + " included groups:[" + Strings.mapToString(m_xmlMethodSelector.getIncludedGroups()) + "] excluded groups:[" + m_xmlMethodSelector.getExcludedGroups()) + "]"); if (getVerbose() >= 3) { for (ITestClass tc : m_classMap.values()) { ((TestClass) tc).dump(); } } } }
private void logStart() { log(3, "Running test " + m_testName + " on " + m_classMap.size() + " " + " classes, " + " included groups:[" + Strings.mapToString(m_xmlMethodSelector.getIncludedGroups()) + "] excluded groups:[" + m_xmlMethodSelector.getExcludedGroups() + "]"); if (getVerbose() >= 3) { for (ITestClass tc : m_classMap.values()) { ((TestClass) tc).dump(); } } } }
private void logStart() { log(3, "Running test " + m_testName + " on " + m_classMap.size() + " classes, " + " included groups:[" + Strings.mapToString(m_xmlMethodSelector.getIncludedGroups()) + "] excluded groups:[" + Strings.mapToString(m_xmlMethodSelector.getExcludedGroups()) + "]"); if (getVerbose() >= 3) { for (ITestClass tc : m_classMap.values()) { ((TestClass) tc).dump(); } } } }
private void logStart() { log(3, "Running test " + m_testName + " on " + m_classMap.size() + " " + " classes, " + " included groups:[" + Strings.mapToString(m_xmlMethodSelector.getIncludedGroups()) + "] excluded groups:[" + List.of(m_xmlMethodSelector.getExcludedGroups()) + "]"); if (getVerbose() >= 3) { for (ITestClass tc : m_classMap.values()) { ((TestClass) tc).dump(); } } } }
private void logStart() { log(3, "Running test " + m_testName + " on " + m_classMap.size() + " classes, " + " included groups:[" + Strings.mapToString(m_xmlMethodSelector.getIncludedGroups()) + "] excluded groups:[" + Strings.mapToString(m_xmlMethodSelector.getExcludedGroups()) + "]"); if (getVerbose() >= 3) { for (ITestClass tc : m_classMap.values()) { ((TestClass) tc).dump(); } } }}
public NutchJob(Configuration conf) throws IOException { super(conf, "NutchJob"); }
public NutchJob(Configuration conf) throws IOException { super(conf); }
public NutchJob(Configuration conf) { super(conf, "NutchJob"); }
public NutchJob(Configuration conf) throw IOException { super(conf, "NutchJob"); }
public NutchJob(Configuration conf) { super(conf); }
private void loadMachineUUID() { if (System.getProperty(PROP_UUID)!= null) return; String uuid = loadExistingUUID(); if (uuid == null) { uuid = UUID.randomUUID().toString(); saveUUID(uuid); } EnvironmentInfo environment = environmentTracker.getService(); if (environment!= null) { environment.setProperty(PROP_UUID, uuid); } else { System.setProperty(PROP_UUID, uuid); } } }
private void loadMachineUUID() { if (System.getProperty(PROP_UUID)!= null) return; String uuid = loadExistingUUID(); if (uuid == null) { uuid = UUID.randomUUID().toString(); saveUUID(uuid); } EnvironmentInfo environment = environmentTracker.getService(); if (environment!= null) { environment.setProperty(PROP_UUID, uuid); } else { environment.setProperty(PROP_UUID, uuid); } } }
private void loadMachineUUID() { String uuid = loadExistingUUID(); if (uuid == null) { uuid = UUID.randomUUID().toString(); saveUUID(uuid); } EnvironmentInfo environment = environmentTracker.getService(); if (environment!= null) { environment.setProperty(PROP_UUID, uuid); } else { System.setProperty(PROP_UUID, uuid); } } }
private void loadMachineUUID() { String uuid = loadExistingUUID(); if (uuid == null) { uuid = UUID.randomUUID().toString(); saveUUID(uuid); } EnvironmentInfo environment = environmentTracker.getService(); if (environment!= null) { environment.setProperty(PROP_UUID, uuid); } else { environment.setProperty(PROP_UUID, uuid); } } }
private void loadMachineUUID() { if (System.getProperty(PROP_UUID)!= null) return; String uuid = loadExistingUUID(); if (uuid == null) { uuid = UUID.randomUUID().toString(); saveUUID(uuid); } EnvironmentInfo environment = environmentTracker.getService(); if (environment!= null) { environment.setProperty(PROP_UUID, uuid); } else { Environment.setProperty(PROP_UUID, uuid); } } }
public static boolean retry(ITestResult result) { if (currentTry < maxreruntimes) { ++currentTry; return true; } return false; }
public static boolean retry(ITestResult result) { if (currentTry < maxreruntimes) { return true; } return false; }
public synchronized boolean retry(ITestResult result) { if (currentTry < maxreruntimes) { ++currentTry; return true; } return false; }
public synchronized boolean retry(ITestResult result) { if (currentTry < maxreruntimes) { return true; } return false; }
public boolean retry(ITestResult result) { if (currentTry < maxreruntimes) { return true; } return false; }
public Statistics<T> visitIntConstant(ValueExpressions.IntExpression expr, Void value) throws RuntimeException { return (Statistics<T>)getStatistics(expr.getInt()); }
public Statistics<T> visitIntConstant(ValueExpressions.IntExpression expr, Void value) throws RuntimeException { return (Statistics<T>) getStatistics(expr.getInt()); }
public Statistics<T> visitIntConstant(ValueExpressions.IntExpression expr, Void value) throws RuntimeException { return (Statistics<T>)getStatistics(expr.getString()); }
public Statistics<? extends T> visitIntConstant(ValueExpressions.IntExpression expr, Void value) throws RuntimeException { return (Statistics<T>)getStatistics(expr.getInt()); }
public Statistics<T> visitIntConstant(ValueExpressions.IntExpression expr, Void value) throws Throwable { return (Statistics<T>)getStatistics(expr.getInt()); }
public ServiceDate getEnd() { return end; }
public ServiceDate getEnd() { return end == null? null : end; }
public ServiceDate getEnd() { return end == UNBOUNDED_END; }
public ServiceDate getEnd() { return end == 0? null : end; }
public ServiceDate getEnd() { return end!= null? null : end; }
public boolean isLoggedIn() { return token!= null && hub!= null; }
public boolean isLoggedIn() { return url!= null && hub!= null; }
public boolean isLoggedIn() { return node!= null && hub!= null; }
public boolean isLoggedIn() { return token!= null || hub!= null; }
public boolean isLoggedIn() {}
public void setBuildStatus(String buildStatus) { StashBuildState overwrittenBuildState = null; try { overwrittenBuildState = StashBuildState.valueOf(buildStatus); } catch (Exception e) { } this.buildStatus = overwrittenBuildState; }
public void setBuildStatus(String buildStatus) { StashBuildState overwrittenBuildState = null; try { overwrittenBuildState = StashBuildState.valueOf(buildStatus); } catch (Exception e) { } this.buildStatus = overwrittenBuildState; } }
public void setBuildStatus(String buildStatus) { StashBuildState overwrittenBuildState = null; try { overwrittenBuildState = StashBuildState.valueOf(buildStatus); } catch (Exception e) { buildStatus = overwrittenBuildState; } this.buildStatus = overwrittenBuildState; }
public void setBuildStatus(String buildStatus) { StashBuildState overwrittenBuildState = null; try { overwrittenBuildState = StashBuildState.valueOf(buildStatus); } catch (Exception e) { } finally { this.buildStatus = overwrittenBuildState; } }
public void setBuildStatus(String buildStatus) { StashBuildState overwrittenBuildState = null; try { overwrittenBuildState = StashBuildState.valueOf(buildStatus); } catch (Exception e) { } this.buildStatus = overwrittenBuildState; this.buildStatus = buildStatus; }
public void preInit(FMLPreInitializationEvent evt) { RegistryHelper.useOtherModConfigFor(MODID, BCCore.MODID); BCSiliconConfig.preInit(); BCSiliconItems.preInit(); BCSiliconBlocks.preInit(); BCSiliconConfig.reloadConfig(EnumRestartRequirement.GAME); NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE, BCSiliconProxy.getProxy()); BCSiliconProxy.getProxy().fmlPreInit(); }
public void preInit(FMLPreInitializationEvent evt) { RegistryHelper.useOtherModConfigFor(MODID, BCCore.MODID); BCSiliconConfig.preInit(); BCSiliconItems.preInit(); BCSiliconConfig.reloadConfig(EnumRestartRequirement.GAME); NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE, BCSiliconProxy.getProxy()); BCSiliconProxy.getProxy().fmlPreInit(); }
public void preInit(FMLPreInitializationEvent evt) { RegistryHelper.useOtherModConfigFor(MODID, BCCore.MODID); BCSiliconConfig.preInit();BCSiliconItems.preInit(); BCSiliconBlocks.preInit(); BCSiliconConfig.reloadConfig(EnumRestartRequirement.GAME); NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE, BCSiliconProxy.getProxy()); BCSiliconProxy.getProxy().fmlPreInit(); }
public void preInit(FMLPreInitializationEvent evt) { RegistryHelper.useOtherModConfigFor(MODID, BCCore.MODID); BCSiliconConfig.preInit(); bCSiliconItems.preInit(); BCSiliconBlocks.preInit(); BCSiliconConfig.reloadConfig(EnumRestartRequirement.GAME); NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE, BCSiliconProxy.getProxy()); BCSiliconProxy.getProxy().fmlPreInit(); }
public void preInit(FMLPreInitializationEvent evt) { RegistryHelper.useOtherModConfigFor(MODID, BCCore.MODID); BCSiliconConfig.preInit(); BCSiliconItems.preInit(); BCSiliconBlocks.preInit(); ACSiliconConfig.reloadConfig(EnumRestartRequirement.GAME); NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE, BCSiliconProxy.getProxy()); BCSiliconProxy.getProxy().fmlPreInit(); }
public Hash(HashType type){ this.type = type; try { digest = type.get(); } finally { type.recycle(digest); } } }
public Hash(HashType type){ this.type = type; try { digest = type.get(); } finally { type.recycle(digest); } }
Hash(HashType type){ this.type = type; try { digest = type.get(); } finally { type.recycle(digest); } } }
public Hash(HashType type){ this.type = type; try { digest = type.get(); } finally { type.recycle(digest); } } super.create(type); }
public Hash(HashType type){ this.type = type; try { digest = type.get(); } finally { type.recycle(digest); } } }); }
private boolean validateExternalVnicProfileMapping() { drMappingHelper.mapVnicProfiles(vmTemplateFromConfiguration.getInterfaces(), getParameters().getExternalVnicProfileMappings()); return validate(validateResult); }
private boolean validateExternalVnicProfileMapping() { drMappingHelper.mapVnicProfiles(vmTemplateFromConfiguration.getInterfaces(), getParameters().getExternalVnicProfileMappings()); return validate(getParameters().getExternalVnicProfileMapping()); }
private boolean validateExternalVnicProfileMapping() { drMappingHelper.mapVnicProfiles(vmTemplateFromConfiguration.getInterfaces(), getParameters().getExternalVnicProfileMappings()); return validate(false); }
private boolean validateExternalVnicProfileMapping() { drMappingHelper.mapVnicProfiles(vmTemplateFromConfiguration.getInterfaces(), getParameters().getExternalVnicProfileMappings()); return validate( externalVnicProfileMappingValidator.validateExternalVnicProfileMapping(getParameters().getExternalVnicProfileMappings(), getParameters().getClusterId())); }
private boolean validateExternalVnicProfileMapping() { drMappingHelper.mapVnicProfiles(vmTemplateFromConfiguration.getInterfaces(), getParameters().getExternalVnicProfileMappings()); return validate(getParameters().getExternalVnicProfileMapping(), getParameters().getClusterId()); }
public void serDeTest() { doSerDeTest(Collections.emptyList()); doSerDeTest(Arrays.asList("a", "b", "/signedId/abcdef")); }
public void serDeTest() { doSerDeTest(Collections.emptyList()); doSerDeTest(Arrays.asList("a", "b", "signedId/abcdef")); }
public void ser DeTest() { doSerDeTest(Collections.emptyList()); doSerDeTest(Arrays.asList("a", "b", "/signedId/abcdef")); }
public void serDeTest() { doSerDeTest(Collections.emptyList()); doSerDeTest(Arrays::asList("a", "b", "/signedId/abcdef")); }
public void serDeTest() { doSerDeTest(Collections.emptyList()); doSerDeTest(Arrays.asList("a", "b", "/signedId/abcdef"))); }
protected void buildVmVideoCards() { createInfo.add(VdsProperties.display, vm.getdisplay_type().toString()); createInfo.add(VdsProperties.num_of_monitors, Integer.valueOf(vm.getnum_of_monitors())); }
protected void buildVmVideoCards() { createInfo.add(VdsProperties.display, vm.getdisplay_type().toString()); createInfo.add(VdsProperties.num_of_monitors, Integer.valueOf(vm.getnum_of_monitors())).toString()); }
protected void buildVmVideoCards() { createInfo.add(VdsProperties.display, vm.getdisplay_type().toString()); createInfo.add(VdsProperties.num_of_monitors, Integer.valueOf(vm.getnum_of_monitors()).toString()); }
protected void buildVmVideoCards() { createInfo.add(VdsProperties.display, vm.getdisplay_type().toString()); createInfo.add(VdsProperties.num_of_monitors, Integer.toString(vm.getnum_of_monitors()).toString()); }
protected void buildVmVideoCards() { createInfo.add(VdsProperties.display, vm.getdisplay_type().toString()); createInfo.add(VdsProperties.num_of_monitors, (vm.getnum_of_monitors()).toString()); }
private String encode(String segment) { return URL.encodeQueryString(type.replacePathSeparator(segment)); }
String encode(String segment) { return URL.encodeQueryString(type.replacePathSeparator(segment)); }
protected String encode(String segment) { return URL.encodeQueryString(type.replacePathSeparator(segment)); }
String encode(String segment) { return URL.encodeQueryString(type.replacePathSeparator(segment))); }
+ encode(String segment) { return URL.encodeQueryString(type.replacePathSeparator(segment)); }
public List<String> getStrongDependencies() { List<String> strongDependencies = new ArrayList<>(); strongDependencies.add(A_U_D_preferredMail); strongDependencies.add(A_U_D_ISMail); strongDependencies.add(A_U_D_publicAliasMails); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_o365EmailAddressesMU); return strongDependencies; }
public List<String> getStrongDependencies() { List<String> strongDependencies = new ArrayList<>(); strongDependencies.add(A_U_D_preferredMail); strongDependencies.add(A_U_D_ISMail); strongDependencies.add(A_U_D_ publicAliasMails); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_o365EmailAddressesMU); return strongDependencies; }
public List<String> getStrongDependencies() { List<String> strongDependencies = new ArrayList<>(); strongDependencies.add(A_U_D_preferredMail); strongDependencies.add(A_U_D_ISMail); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_o365EmailAddressesMU); return strongDependencies; }
public List<String> getStrongDependencies() { List<String> strongDependencies = new ArrayList<>(); strongDependencies.add(A_U_D_preferredMail); strongDependencies.add(A_U_D_IS Mail); strongDependencies.add(A_U_D_publicAliasMails); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_o365EmailAddressesMU); return strongDependencies; }
public List<String> getStrongDependencies() { List<String> strongDependencies = new ArrayList<>(); strongDependencies.add(A_U_D_preferredMail); strongDependencies.add(A_U_D_ISMail); strongDependencies.add(A_U_D_privateAliasMails); strongDependencies.add(A_U_D_privateAliasMails); return strongDependencies; }
public boolean isCacheable() { return true; }
public boolean isCacheable() { return!true; }
boolean isCacheable() { return true; }
public boolean isCacheable() { return!isCacheable(); }
public boolean isCacheable() { return!validates(); }
static KeyManagerFactory buildKeyManagerFactory(File certChainFile, String keyAlgorithm, File keyFile, String keyPassword, KeyManagerFactory kmf, String keyStore) throws KeyStoreException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException, InvalidAlgorithmParameterException, IOException, KeyException, UnrecoverableKeyException { return buildKeyManagerFactory(toX509Certificates(certChainFile), keyAlgorithm, toPrivateKey(keyFile, keyPassword), keyPassword, kmf, keyStore); }
static KeyManagerFactory buildKeyManagerFactory(File certChainFile, String keyAlgorithm, File keyFile, String keyPassword, KeyManagerFactory kmf, String keyStore) throws KeyStoreException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException, InvalidAlgorithmParameterException, IOException, CertificateException, KeyException, UnrecoverableKeyException { return buildKeyManagerFactory(toX509Certificates(certChainFile), keyAlgorithm, toPrivateKey(keyFile, keyPassword), keyPassword, kmf, keyStore); }
protected static KeyManagerFactory buildKeyManagerFactory(File certChainFile, String keyAlgorithm, File keyFile, String keyPassword, KeyManagerFactory kmf, String keyStore) throws KeyStoreException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException, InvalidAlgorithmParameterException, IOException, KeyException, UnrecoverableKeyException { return buildKeyManagerFactory(toX509Certificates(certChainFile), keyAlgorithm, toPrivateKey(keyFile, keyPassword), keyPassword, kmf, keyStore); }
static KeyManagerFactory buildKeyManagerFactory(File certChainFile, String keyAlgorithm, File keyFile, String keyPassword, KeyManagerFactory kmf, String keyStore) throws KeyStoreException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException, InvalidAlgorithmParameterException, IOException, CertificateException, KeyException, UnrecoverableKeyException { return buildKeyManagerFactory(toX509Certificates(certChainFile), keyAlgorithm, toPrivateKey(keyFile, keyPassword), keyPassword, kmf, keyStore)); }
static KeyManagerFactory buildKeyManagerFactory(File certChainFile, String keyAlgorithm, File keyFile, String keyPassword, KeyManagerFactory kmf, String keyStore) throws KeyStoreException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException, InvalidAlgorithmParameterException, IOException, CertificateException, KeyException, UnrecoverableKeyException { return buildKeyManagerFactory(toX509Certificates(certChainFile), keyAlgorithm, toPrivateKey(keyFile, keyPassword), keyPassword, kmf, keystore); }
public void testWrongPortConnection() throws Exception { BlockingChannel channel = new SSLBlockingChannel(hostName, sslPort + 1, new MetricRegistry(), 10000, 10000, 10000, 2000, sslSocketFactory, clientSSLConfig); try { channel.connect(); fail("should have thrown!"); } catch (IOException e) { assertTrue(e.getMessage().contains("Connection refused")); } }
public void testWrongPortConnection() throws Exception { BlockingChannel channel = new SSLBlockingChannel(hostName, sslPort + 1, new MetricRegistry(), 10000, 10000, 10000, 2000, sslSocketFactory, clientSSLConfig); try { channel.connect(); fail("should have thrown!"); } catch (IOException e) { assertTrue(e.getMessage().contains("Connection refused")); } } }
public void testWrongPortConnection() throws Exception { BlockingChannel channel = new SSLBlockingChannel(hostName, sslPort + 1, new MetricRegistry(), 10000, 10000, 10000, 2000, sslSocketFactory, clientSSLConfig); try { channel.connect(); fail("should have thrown!"); } catch (IOException e) { } }
public void testWrongPortConnection() throws IOException { BlockingChannel channel = new SSLBlockingChannel(hostName, sslPort + 1, new MetricRegistry(), 10000, 10000, 10000, 2000, sslSocketFactory, clientSSLConfig); try { channel.connect(); fail("should have thrown!"); } catch (IOException e) { assertTrue(e.getMessage().contains("Connection refused")); } }
public void testWrongPortConnection() throws Exception { BlockingChannel channel = new SSLBlockingChannel(hostName, sslPort + 1, new MetricRegistry(), 10000, 10000, 10000, 2000, sslSocketFactory, clientSSLConfig); try { channel.connect(); fail("should have thrown!"); } catch (Exception e) { assertTrue(e.getMessage().contains("Connection refused")); } }
public void notifyParameterChanged(String name) { if (!fParameterNames.contains(name)) { throw new RuntimeException(String.format(Messages.TmfAbstractAnalysisModule_InvalidParameter, name, getName())); } synchronized (fParameters) { Object oldValue = fParameters.get(name); Object value = getParameter(name); if ((value!= null) &&!(value.equals(oldValue))) { parameterChanged(name); } } }
public void notifyParameterChanged(String name) { synchronized (fParameters) { Object oldValue = fParameters.get(name); Object value = getParameter(name); if ((value!= null) &&!(value.equals(oldValue))) { parameterChanged(name); } } }
public void notifyParameterChanged(String name) { if (!fParameterNames.add(name)) { throw new RuntimeException(String.format(Messages.TmfAbstractAnalysisModule_InvalidParameter, name, getName())); } synchronized (fParameters) { Object oldValue = fParameters.get(name); Object value = getParameter(name); if ((value!= null) &&!(value.equals(oldValue))) { parameterChanged(name); } } }
public void notifyParameterChanged(String name) { if (!fParameterNames.contains(name)) { throw new IllegalArgumentException(String.format(Messages.TmfAbstractAnalysisModule_InvalidParameter, name, getName())); } synchronized (fParameters) { Object oldValue = fParameters.get(name); Object value = getParameter(name); if ((value!= null) &&!(value.equals(oldValue))) { parameterChanged(name); } } }
public void notifyParameterChanged(String name) { synchronized (fParameters) { Object oldValue = fParameters.get(name); Object value = getParameter(name); if ((value!= null) &&!(value.equals(oldValue))) { parameterChanged(name); } } } }
public void testUnrecognizedSpec() { when(authentication.getAttributes().get(any())).thenReturn("strong_two_factor"); spec.setAuthenticationMethod("weak_two_factor"); assertTrue(this.spec.isSatisfiedBy(this.assertion)); }
public void testUnrecognizedSpec() { when(authentication.getAttributes().get(any(String.class))).thenReturn("strong_two_factor"); spec.setAuthenticationMethod("weak_two_factor"); assertTrue(this.spec.isSatisfiedBy(this.assertion)); }
public void testUnrecognizedSpec() { when(authentication.getAttributes().get(any())).thenReturn("strong_one_factor"); spec.setAuthenticationMethod("weak_two_factor"); assertTrue(this.spec.isSatisfiedBy(this.assertion)); }
public void testUnrecognizedSpec() { when(authentication.getAttributes().get(any(String.class))).thenReturn("strong_one_factor"); spec.setAuthenticationMethod("weak_two_factor"); assertTrue(this.spec.isSatisfiedBy(this.assertion)); }
public void testUnrecognizedSpec() { when(authentication.getAttributes().get(any())).thenReturn("strong_two_factor"); spec.setAuthenticationMethod("weak_one_factor"); assertTrue(this.spec.isSatisfiedBy(this.assertion)); }
public static Bundle updateBundleConfig(Connection connection, Bundle bundle) throws SQLException { final String sql = "UPDATE portti_view_bundle_seq SET config=? WHERE bundle_id=? AND view_id=?"; try (PreparedStatement statement = connection.prepareStatement(sql)) { statement.setString(1, bundle.config); statement.setLong(2, bundle.bundle); statement.setLong(3, bundle.view); statement.execute(); } return null; } }
public static Bundle updateBundleConfig(Connection connection, Bundle bundle) throws SQLException { final String sql = "UPDATE portti_view_bundle_seq SET config=? WHERE bundle_id=? AND view_id=?"; try (PreparedStatement statement = connection.prepareStatement(sql)) { statement.setString(1, bundle.config); statement.setLong(2, bundle.bundle); statement.setLong(3, bundle.view); statement.execute(); } return null; }
public static Bundle updateBundleConfig(Connection connection, Bundle bundle) throws SQLException { String sql = "UPDATE portti_view_bundle_seq SET config=? WHERE bundle_id=? AND view_id=?"; try (final PreparedStatement statement = connection.prepareStatement(sql)) { statement.setString(1, bundle.config); statement.setLong(2, bundle.bundle); statement.setLong(3, bundle.view); statement.execute(); } return null; }
public static Bundle updateBundleConfig(Connection connection, Bundle bundle) throws SQLException { String sql = "UPDATE portti_view_bundle_seq SET config=? WHERE bundle_id=? AND view_id=?"; try (PreparedStatement statement = connection.prepareStatement(sql)) { statement.setString(1, bundle.config); statement.setLong(2, bundle.bundle); statement.setLong(3, bundle.view); statement.execute(); } return null; } }
public static Bundle updateBundleConfig(Connection connection, Bundle bundle) throws SQLException { return null; }
protected int getOverProvisioningFactor() { return Integer.valueOf(Framework.getProperty(WORKMANAGER_OVERPROVISIONING_PROP, DEFAULT_WORKMANAGER_OVERPROVISIONING)); }
protected int getOverProvisioningFactor() { return Integer.parseInt(Framework.getProperty(WORKMANAGER_OVERPROVISIONING_PROP, DEFAULT_WORKMANAGER_OVERPROVISIONING)); }
protected int getOverProvisioningFactor() { return System.getProperty(WORKMANAGER_OVERPROVISIONING_PROP, DEFAULT_WORKMANAGER_OVERPROVISIONING)); }
protected int getOverProvisioningFactor() { returnFramework.getProperty(WORKMANAGER_OVERPROVISIONING_PROP, DEFAULT_WORKMANAGER_OVERPROVISIONING)); }
protected int getOverProvisioningFactor() { returnFramework.getProperty(WORKMANAGER_OVERPROVISIONING_PROP, DEFAULT_WORKMANAGER_OVERPROVISIONING); }
protected void onDestroy() { super.onDestroy(); webView.setDownloadListener(null); }
protected void onDestroy() { super.onDestroy(); }
protected void onDestroy() { super.onDestroy(); webView.setDownloadListener(""); }
protected void onDestroy() { super.onDestroy(); view.setDownloadListener(null); }
protected void onDestroy() { super.onDestroy(); scene.setDownloadListener(null); }
public void closeTest() { HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString()); EmbeddedChannel channel = createEmbeddedChannel(); channel.writeInbound(request); while (channel.readOutbound()!= null) { assertFalse("Channel should be closed", channel.isOpen()); } }
public void closeTest() { HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString()); EmbeddedChannel channel = createEmbeddedChannel(); channel.writeInbound(request); while (channel.readOutbound()!= null) { } assertFalse("Channel should be closed", channel.isOpen()); }
public void closeTest() { HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString()); EmbeddedChannel channel = createEmbeddedChannel(); channel.writeInbound(request); if (channel.readOutbound()!= null) { assertFalse("Channel should be closed", channel.isOpen()); } }
public void closeTest() { HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString()); EmbeddedChannel channel = createEmbeddedChannel(); channel.writeInbound(request); try { while (channel.readOutbound()!= null) { assertFalse("Channel should be closed", channel.isOpen()); } } finally { channel.close(); } }
public void closeTest() { HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString()); EmbeddedChannel channel = createEmbeddedChannel(); channel.writeInbound(request); while (channel.readOutbound()!= null) { channel.readOutbound(); } assertFalse("Channel should be closed", channel.isOpen()); }
public String getRuleLogsForVms() { final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("get_rule_logs_for_vms"); final OutputInterpreter.OneLineParser parser = new OutputInterpreter.OneLineParser(); final String result = cmd.execute(parser); if (result == null) { return parser.getLine(); } return null; }
public String getRuleLogsForVms() { final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("get_rule_logs_for_vms"); new OutputInterpreter.OneLineParser(new OutputInterpreter.OneLineParser()) { final String result = cmd.execute(parser); if (result == null) { return parser.getLine(); } return null; } }
public String getRuleLogsForVms() { final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("get_rule_logs_for_vms"); new OutputInterpreter.OneLineParser(new OutputInterpreter.OneLineParser()).execute(parser); final String result = cmd.execute(parser); if (result == null) { return parser.getLine(); } return null; }
public String getRuleLogsForVms() { final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("get_rule_logs_for_vms"); new OutputInterpreter.OneLineParser(new OutputInterpreter.OneLineParser()); final String result = cmd.execute(parser); if (result == null) { return parser.getLine(); } return null; }
public String getRuleLogsForVms() { final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("get_rule_logs_for_vms"); new OutputInterpreter.OneLineParser(new OutputInterpreter.OneLineParser()) { final String result = cmd.execute(parser); if (result == null) { return parser.getLine(); } return null; }
private void addReporter(Class<? extends IReporter> r) { m_reporters.put(r, ClassHelper.newInstance(r)); }
private void addReporter(Class<? extends IReporter> r) { reporters.put(r, ClassHelper.newInstance(r)); }
private synchronized void addReporter(Class<? extends IReporter> r) { reporters.put(r, ClassHelper.newInstance(r)); } }
private void addReporter(Class<? extends IReporter> r) { m_reporters.put(r, getClass().getName()); }
private synchronized void addReporter(Class<? extends IReporter> r) { reporters.put(r, ClassHelper.newInstance(r)); }
public final void addFunctions(List<? extends SqlFunction> functions) { addFunctions(TEMP_DEFAULT_CATALOG, functions); }
public void addFunctions(List<? extends SqlFunction> functions) { addFunctions(TEMP_DEFAULT_CATALOG, functions); }
public static void addFunctions(List<? extends SqlFunction> functions) { addFunctions(TEMP_DEFAULT_CATALOG, functions); }
public final void addFunctions(List<? extends SqlFunction> methods) { addFunctions(TEMP_DEFAULT_CATALOG, functions); }
public final void addFunctions(List<? extends SqlFunction> functions) { addFunctions(TEMP_DEFAULT_CATALOG, function); }
public synchronized void inputChanged(Viewer viewer, Object oldInput, Object newInput) { if (oldInput!= newInput) { if (newInput!= null) { ImportTraceContentProvider input = (ImportTraceContentProvider) newInput; clearCandidates(); fTraceTypes.putAll(input.fTraceTypes); fTraceFiles.putAll(fTraceFiles); } } }
public synchronized void inputChanged(Viewer viewer, Object oldInput, Object newInput) { if (oldInput!= newInput) { if (newInput!= null) { ImportTraceContentProvider input = (ImportTraceContentProvider) newInput; clearCandidates(); fTraceTypes.putAll(input.fTraceTypes); fTraceFiles.putAll(fTraceFiles); } } } }
public synchronized void inputChanged(Viewer viewer, Object oldInput, Object newInput) { if (oldInput!= newInput) { if (newInput!= null) { ImportTraceContentProvider input = (ImportTraceContentProvider) newInput; clearCandidates(); fTraceTypes.putAll(input.fTraceTypes); fTraceFiles.putAll(fTraceFiles); } } } return; }
public synchronized void inputChanged(Viewer viewer, Object oldInput, Object newInput) { if (oldInput!= newInput) { if (newInput!= null) { ImportTraceContentProvider input = (ImportTraceContentProvider) newInput; clearCandidates(); fTraceTypes.putAll(input.fTraceTypes); fTraceFiles.putAll(fTraceFiles); } } } else { fTraceTypes.putAll(fTraceFiles); } }
public synchronized void inputChanged(Viewer viewer, Object oldInput, Object newInput) { if (oldInput!= newInput) { if (newInput!= null) { ImportTraceContentProvider input = (ImportTraceContentProvider) newInput; clearCandidates(); fTraceTypes.putAll(input.fTraceTypes); fTraceFiles.putAll(fTraceFiles); } } } else { fTraceTypes.putAll(fTraceFiles); } } }
boolean isPowerManagementLegal() { return IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString()); }
IsPowerManagementLegal() { return IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString()); }
public boolean isPowerManagementLegal() { return IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString()); }
protected boolean isPowerManagementLegal() { return IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString()); }
boolean isPowerManagementLegal() { return IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString())); }
public void info(String message) { info.add(message); }
public void info(String message) { info.add(message); System.out.println(message); }
public void info(String message) { info.add(message); LOG.info(message); }
public void info(String message) { info.add(message); logging.info(message); }
public void info(String message) { info.add(message); logging.out.println(message); }
public static File makeNumericDimFile(File dir, String dimension, ByteOrder order) { return new File(dir, StringUtils.format("numeric_dim_%s_%s.drd", dimension, order)); }
public static File makeNumericDimFile(File dir, String dimension, ByteOrder order) { return new File(dir, StringUtils.format("numeric_dim_%s_ %s.drd", dimension, order)); }
public static File makeNumericDimFile(File dir, String dimension, ByteOrder order) { return createNumericDimFile(dir, StringUtils.format("numeric_dim_%s_%s.drd", dimension, order)); }
public static File makeNumericDimFile(File dir, String dimension, ByteOrder order) { return new File(dir, StringUtils.format("numeric_dim_%s_%s.d rd", dimension, order)); }
public static File makeNumericDimfile(File dir, String dimension, ByteOrder order) { return new File(dir, StringUtils.format("numeric_dim_%s_%s.drd", dimension, order)); }
private AuditLogableBase createAuditLog(final VmNic iface) { AuditLogableBase logable = new AuditLogableBase(); logable.setVmId(iface.getVmId()); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
private AuditLogableBase createAuditLog(final VmNic iface) { AuditLogableBase logable = new AuditLogableBase(); logable.setVmId(iface.getVmId()); logable.addCustom value("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
private AuditLogableBase createAuditLog(final VmNic iface) { AddCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
private AuditLogableBase createAuditLog(final VmNic iface) { AuditLogableBase logable = new AuditLogableBase(); logable.setVmId(iface.getVmId()); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable2; }
private AuditLogableBase createAuditLog(final VmNic iface) { addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
public boolean equals( VirtualValue other ) { if ( other == null || other.getClass()!= MapValue.class ) { return false; } MapValue that = (MapValue) other; return size() == that.size() && Arrays.equals( keys, that.keys ) && Arrays.equals( values, that.values ); }
public boolean equals( VirtualValue other ) { if ( other == null || other.equals( other ) ) { return false; } MapValue that = (MapValue) other; return size() == that.size() && Arrays.equals( keys, that.keys ) && Arrays.equals( values, that.values ); }
public boolean equals( VirtualValue other ) { if ( other == null || other.getClass()!= MapValue.class ) { MapValue that = (MapValue) other; return size() == that.size() && Arrays.equals( keys, that.keys ) && Arrays.equals( values, that.values ); } return false; }
public boolean equals( VirtualValue other ) { if ( other == null || other.equals(other ) ) { return false; } MapValue that = (MapValue) other; return size() == that.size() && Arrays.equals( keys, that.keys ) && Arrays.equals( values, that.values ); }
public boolean equals( VirtualValue other ) { if ( other == null || other.equals() ) { return false; } MapValue that = (MapValue) other; return size() == that.size() && Arrays.equals( keys, that.keys ) && Arrays.equals( values, that.values ); }
private void processSingleClusterChanges(ManageNetworkClustersParameters param) { final List<ActionParametersBase> setupNetworksParams = new ArrayList<>( createNetworkClustersToSetupNetworksParametersTransformer().transform( param.getAttachments(), param.getDetachments(), param.getUpdates()) ); HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); setupNetworksParams.forEach(this::withRootCommandInfo); runInternalMultipleActions(ActionType.PersistentHostSetupNetworks, setupNetworksParams, getContext().getExecutionContext()); }
private void processSingleClusterChanges(ManageNetworkClustersParameters param) { final List<ActionParametersBase> setupNetworksParams = createNetworkClustersToSetupNetworksParametersTransformer().transform( param.getAttachments(), param.getDetachments(), param.getUpdates()) ); HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); setupNetworksParams.forEach(this::withRootCommandInfo); runInternalMultipleActions(ActionType.PersistentHostSetupNetworks, setupNetworksParams, getContext().getExecutionContext()); }
private void processSingleClusterChanges(ManageNetworkClustersParameters param) { List<ActionParametersBase> setupNetworksParams = new ArrayList<>( createNetworkClustersToSetupNetworksParametersTransformer().transform( param.getAttachments(), param.getDetachments(), param.getUpdates()) ); HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); setupNetworksParams.forEach(this::withRootCommandInfo); runInternalMultipleActions(ActionType.PersistentHostSetupNetworks, setupNetworksParams, getContext().getExecutionContext()); }
private void processSingleClusterChanges(ManageNetworkClustersParameters param) { final List<ActionParametersBase> setupNetworksParams = new ArrayList<>( createNetworkClustersToSetupNetworksParametersTransformer().transform( param.getAttachments(), param.getDetachments(), param.getUpdates()) ); HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); setupNetworksParams.forEach( this::withRootCommandInfo); runInternalMultipleActions(ActionType.PersistentHostSetupNetworks, setupNetworksParams, getContext().getExecutionContext()); }
private void processSingleClusterChanges(ManageNetworkClustersParameters param) { final List<ActionParametersBase> setupNetworksParams = new ArrayList<>(); HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); setupNetworksParams.forEach(this::withRootCommandInfo); runInternalMultipleActions(ActionType.PersistentHostSetupNetworks, setupNetworksParams, getContext().getExecutionContext()); }
private void setFixedLengthStreamingMode(HttpURLConnection connection, long length) { try { HttpURLConnection.class.getMethod("setFixedLengthStreamingMode", long.class).invoke(connection, length); } catch (Exception e) { throw new IllegalArgumentException("Cannot transfer 2 GB or larger chunks due to JDK 1.6 limitations." + " Use chunked encoding or multi-part upload, if possible, or use a different http driver." + " For more information: <LINK_0>"); } }
private void setFixedLengthStreamingMode(HttpURLConnection connection, long length) { try { HttpURLConnection.class.getMethod("setFixedLengthStreamingMode", long.class).invoke(connection, length); } catch (Exception e) { throw new IllegalArgumentException("Cannot transfer 2 GB or larger chunks due to JDK 1.7 limitations." + " Use chunked encoding or multi-part upload, if possible, or use a different http driver." + " For more information: <LINK_0>"); } }
private void setFixedLengthStreamingMode(HttpURLConnection connection, long length) { try { HttpURLConnection.class.getMethod("setFixedLengthStreamingMode", long.class).invoke(connection, length); } catch (Exception e) { throw new IllegalArgumentException("Cannot transfer 2 GB or larger chunks due to JDK 1.6 limitations." + " Use chunked encoding or multi-part upload, if possible, or use a different http driver." + " For more information: <LINK_0>"); } } }
private static void setFixedLengthStreamingMode(HttpURLConnection connection, long length) { try { HttpURLConnection.class.getMethod("setFixedLengthStreamingMode", long.class).invoke(connection, length); } catch (Exception e) { throw new IllegalArgumentException("Cannot transfer 2 GB or larger chunks due to JDK 1.6 limitations." + " Use chunked encoding or multi-part upload, if possible, or use a different http driver." + " For more information: <LINK_0>"); } }
private void setFixedLengthStreamingMode(HttpURLConnection connection, long length) { try { HttpURLConnection.class.getMethod("setFixedLengthStreamingMode", long.class).invoke(connection, length); } catch (RuntimeException e) { throw new IllegalArgumentException("Cannot transfer 2 GB or larger chunks due to JDK 1.6 limitations." + " Use chunked encoding or multi-part upload, if possible, or use a different http driver." + " For more information: <LINK_0>"); } }
String getErrorMessage(ClientResponse clientResponse) throws IOException { String response = clientResponse.getEntity(String.class); try { ApiError error = getJsonParser().readValue(response, ApiError.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String responseText = clientResponse.getEntity(String.class); return "Server returned "+status+"("+statusCode+"); "+responseText; } }
String getErrorMessage(ClientResponse clientResponse) { String response = clientResponse.getEntity(String.class); try { ApiError error = getJsonParser().readValue(response, ApiError.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String responseText = clientResponse.getEntity(String.class); return "Server returned "+status+"("+statusCode+"); "+responseText; } }
String getErrorMessage(ClientResponse clientResponse) throws IOException { String response = clientResponse.getEntity(String.class); try { ApiError error = getJsonParser().readValue(response, ApiError.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String responseText = clientResponse.getEntity(String.class); return "Server returned "+status+"("("statusCode+"); "+responseText; } }
String getErrorMessage(ClientResponse clientResponse) throws IOException { String response = clientResponse.getEntity(String.class); try { ApiError error = getJsonParser().readValue(response, ApiError.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String responseText = clientResponse.getEntity(String.class); return "Server returned "+status+"("("+statusCode+"); "+responseText; } }
String getErrorMessage(ClientResponse clientResponse) throws IOException { String response = clientResponse.getEntity(String.class); try { ApiError error = getJsonParser().readValue(response, ApiError.class); return error.getMessage(); } catch (IOException e) { int statusCode = clientResponse.getStatus(); ClientResponse.Status status = clientResponse.getClientResponseStatus(); String responseText = clientResponse.getEntity(String.class); return "Server returned "+status+"("statusCode+"); "+responseText; } }
public int hashCode() { int bits = 1; bits = 31 * bits + this.type.ordinal(); bits = 31 * bits + getToX(); bits = 31 * bits + getToY(); bits = 31 * bits + getTo(); bits = 31 * bits + getFromX(); bits = 31 * bits + getFromY(); bits = 31 * bits + getFrom(); return bits  (bits >> 31); }
public int hashCode() { int bits = 1; bits = 31 * bits + this.type.ordinal(); bits = 31 * bits + getToX(); bits = 31 * bits + getToY(); bits = 31 * bits + getTo(); bits = 31 * bits + getFromX(); bits = 31 * bits + getFromY(); bits = 31 * bits + getFrom(); return bits  (bits > 31); }
public int hashCode() { int bits = 1; bits = 31 * bits + this.type.ordinal(); bits = 31 * bits + getToX(); bits = 31 * bits + getToY(); bits = 31 * bits + getTo(); bits = 31 * bits + getFromX(); bits = 31 * bits + getFromY(); bits = 31 * bits + getFrom(); return bits (bits >> 31); }
public int hashCode() { int bits = 1; bits = 31 * bits + this.type.ordinal(); bits = 31 * bits + getToX(); bits = 31 * bits + getToY(); bits = 31 * bits + getTo(); bits = 31 * bits + getFromX(); bits = 31 * bits + getFromY(); bits = 31 * bits + getFrom(); return bits  (bits > 0)? 1 : bits; }
public int hashCode() { int bits = 1; bits = 31 * bits + this.type.ordinal(); bits = 31 * bits + getToX(); bits = 31 * bits + getToY(); bits = 31 * bits + getTo(); bits = 31 * bits + getFromX(); bits = 31 * bits + getFromY(); bits = 31 * bits + getFrom(); return bits  (bits > 0)? 1 : bits + getFrom(); }
public static AccountCollection all(Map<String, Object> params) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException { return all(null, params, null); }
public static AccountCollection all(Map<String, Object> params) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException { return all(null, params, null, AccountCollection.class); }
public static AccountCollection all(Map<String, Object> params) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException { return all((RequestOptions) null); }
public static AccountCollection all(Map<String, Object> params) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException { return all(null, params, AccountCollection.class); }
public static AccountCollection all(Map<String, Object> params) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException { return all(null, params, AccountCollection.class, null, null); }
public void onSaveClick() { editView.setSaveState(true); WikidataDescriptionEditDataClient client = new WikidataDescriptionEditDataClient(); client.submitDescription(pageTitle, editView.getDescription(), new WikidataDescriptionEditDataClient.Callback() { @Override public void success() { editView.setSaveState(false); } @Override public void failure(@NonNull Throwable caught) { editView.setSaveState(false); L.e("WD description edit failed: ", caught); } }); } }
public void onSaveClick() { editView.setSaveState(true); WikidataDescriptionEditDataClient client = new WikidataDescriptionEditDataClient(); client.submitDescription(pageTitle, editView.getDescription(), new WikidataDescriptionEditDataClient.Callback() { @Override public void success() { editView.setSaveState(false); } @Override public void failure(@NonNull Throwable caught) { editView.setSaveState(false); L.e("WD description edit failed: ", caught); } }); }
public void onSaveClick() { editView.setSaveState(true); WikidataDescriptionEditDataClient client = new WikidataDescriptionEditDataClient(); client.submitDescription(pageTitle, editView.getDescription(), new WikidataDescriptionEditDataClient.Callback() { @Override public void success() { editView.setSaveState(false); } @Override public void failure(@NonNull Throwable caught) { editView.setSaveState(false); L.e("WD description edit failed: ", caught); } }); } }); }
public void onSaveClick() { editView.setSaveState(true); WikidataDescriptionEditDataClient client = new WikidataDescriptionEditDataClient(); client.submitDescription(pageTitle, editView.getDescription(), new WikidataDescriptionEditDataClient.Callback() { @Override public void success() { editView.setSaveState(false); } @Override public void failure(@NonNull Throwable caught) { editView.setSaveState(false); L.e(EX.getMessage(), caught); } }); } }
public void onSaveClick() { }
protected ResourceSet loadResource(IEditorInput editorInput) { final URI resourceURI = EditUIUtil.getURI(getEditorInput(), null); return ResourceSetHelpers.loadResourceSetWithProxies(resourceURI, getCommandStack()); }
private ResourceSet loadResource(IEditorInput editorInput) { final URI resourceURI = EditUIUtil.getURI(getEditorInput(), null); return ResourceSetHelpers.loadResourceSetWithProxies(resourceURI, getCommandStack()); }
protected ResourceSet loadResource(IEditorInput editorInput) { final URI resourceURI = EditUIUtil.getURI(getEditorInput()); return ResourceSetHelpers.loadResourceSetWithProxies(resourceURI, getCommandStack()); }
protected ResourceSet loadResource(IEditorInput editorInput) { final URI resourceURI = EditUIUtil.getURI(getEditorInput()).toString(); return ResourceSetHelpers.loadResourceSetWithProxies(resourceURI, getCommandStack()); }
protected ResourceSet loadResource(IEditorInput editorInput) { if (getEditorInput!= null) { return ResourceSetHelpers.loadResourceSetWithProxies(getEditorInput(), getCommandStack()); } }
FileReftableStack.CompactionStats getCompactionStats() throws IOException { return reftableStack.getStats(); }
FileReftableStack.CompactionStats getCompactionStats() { return reftableStack.getStats(); }
FileReftableStack.CompactionStats getCompactionStats() try { return reftableStack.getStats(); } catch (IOException e) { throw e; } }
FileReftableStack.CompactionStats getCompactionStats() try { return reftableStack.getStats(); } catch (IOException e) { return null; } }
FileReftableStack.CompactionStats getCompactionStats() try { return reftableStack.getStats(); } finally { reftableStack.getStats(); } }
public OnlineBackup incremental( String targetDirectory ) { outcome = new BackupService().doIncrementalBackup( hostNameOrIp, port, new File( targetDirectory ), getConsistencyCheck( true ), timeoutMillis, defaultConfig() ); return this; }
public OnlineBackup incremental( String targetDirectory ) { outcome = new BackupService().doIncrementalBackup( hostNameOrIp, port, new File(targetDirectory ), getConsistencyCheck( true ), timeoutMillis, defaultConfig() ); return this; }
public OnlineBackup incremental() { outcome = new BackupService().doIncrementalBackup( hostNameOrIp, port, new File( targetDirectory ), getConsistencyCheck( true ), timeoutMillis, defaultConfig() ); return this; }
public OnlineBackup incremental( String targetDirectory ) { outcome = new BackupService().PostIncrementalBackup( hostNameOrIp, port, new File( targetDirectory ), getConsistencyCheck( true ), timeoutMillis, defaultConfig() ); return this; }
public OnlineBackup incremental( String targetDirectory ) { outcome = new BackupService().doIncrementalBackup( hostNameOrIp, port, new File( targetDirectory ), getConsistencyCheck(true ), timeoutMillis, defaultConfig() ); return this; }
private boolean isValidConfiguration() { return isDiscarding() || isCalleeData(); }
private boolean isValidConfiguration() { return (isDiscarding() || isCalleeData()) && isAsync(); }
private boolean isValidConfiguration() { return (isDiscarding() || isCalleeData()); }
private boolean isValidConfiguration() { return (!isDiscarding() || isCalleeData()); }
private boolean isValidConfiguration() { return (isDiscarding() || isCalleeData()) || isAsync(); }
public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { boolean ret = super.setTrace(trace); if (!ret) { return ret; } ret = fCriticalPathModule.setTrace(trace); fCriticalPathModule.setParameter(CriticalPathModule.PARAM_GRAPH, getId()); return ret; }
public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { boolean ret = fCriticalPathModule.setTrace(trace); if (!ret) { return ret; } ret = fCriticalPathModule.setParameter(CriticalPathModule.PARAM_GRAPH, getId()); return ret; }
public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { boolean ret = super.setTrace(trace); if (!ret) { ret = fCriticalPathModule.setTrace(trace); fCriticalPathModule.setParameter(CriticalPathModule.PARAM_GRAPH, getId()); return ret; } return ret; }
public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { boolean ret = super.setTrace(trace); if (!ret) { ret = fCriticalPathModule.setTrace(trace); fCriticalPathModule.setParameter(CriticalPathModule.PARAM_GRAPH, getId()); return ret; } }
public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { boolean ret = super.setTrace(trace); if (!ret) { ret = fCriticalPathModule.setTrace(trace); fCriticalPathModule.setParameter(CriticalPathModule.PARAM_GRAPH, getId()); return ret; } return false; }
public void fillContextMenu(final IMenuManager menu) { super.fillContextMenu(menu); final ISelection selection = getContext().getSelection(); if (selection.isEmpty()) { return; } try { Job.getJobManager().join(AbstractRepresentationsFileJob.FAMILY, new NullProgressMonitor()); } catch (InterruptedException e) { } contextMenuFiller.fillContextMenu(menu, selection); } }
public void fillContextMenu(final IMenuManager menu) { super.fillContextMenu(menu); final ISelection selection = getContext().getSelection(); if (selection.isEmpty()) { return; } try { Job.getJobManager().join(AbstractRepresentationsFileJob.FAMILY, new NullProgressMonitor()); } catch (InterruptedException e) { } contextMenuFiller.fillContextMenu(menu, selection); }
public void fillContextMenu(final IMenuManager menu) { super.fillContextMenu(menu); final ISelection selection = getContext().getSelection(); if (!selection.isEmpty()) { return; } try { Job.getJobManager().join(AbstractRepresentationsFileJob.FAMILY, new NullProgressMonitor()); } catch (InterruptedException e) { } contextMenuFiller.fillContextMenu(menu, selection); } }
public void fillContextMenu(final IMenuManager menu) { super.fillContextMenu(menu); final ISelection selection = getContext().getSelection(); if (selection.isEmpty()) { return; } try { Job.getJobManager().join(AbstractRepresentationsFileJob.FAMILY, new NullProgressMonitor()); } catch (InterruptedException | InterruptedException e) { } contextMenuFiller.fillContextMenu(menu, selection); }
public void fillContextMenu(final IMenuManager menu) { super.fillContextMenu(menu); final ISelection selection = getContext().getSelection(); if (selection.isEmpty()) { return; } contextMenuFiller.fillContextMenu(menu, selection); }
public void dispose() { super.dispose(); getSite().getPage().removePostSelectionListener(this); RegistryFactory.getRegistry().removeListener(this); SaveablesList saveables = (SaveablesList) getSite().getService(ISaveablesLifecycleListener.class); if (saveables!= null) { saveables.removeModelLifecycleListener(saveablesTracker); } currentPart = null; currentSelection = null; pinPropertySheetAction = null; }
public void dispose() { super.dispose(); getSite().getPage().removePostSelectionListener(this); RegistryFactory.getRegistry().removeListener(this); SaveablesList saveables = (SaveablesList) getSite().getService(ISaveablesLifecycleListener.class); if (saveables!= null) { saveables.removeModelLifecycleListener(saveablesTracker); } currentPart = null; currentSelection = null; pinPropertySheetAction = null; } }
public void dispose() { super.dispose(); getSite().getPage().removePostSelectionListener(this); RegistryFactory.getRegistry().removeListener(this); SaveablesList saveables = (SaveablesList) getSite().getService(ISaveablesLifecycleListener.class); if (saveables!= null) { saveables.removeModelLifecycleListener(saveablesTracker); } currentPart = null; currentSelection = null; pinPropertySheetAction = null; } super.dispose(); }
public void dispose() { super.dispose(); getSite().getPage().removePostSelectionListener(this); RegistryFactory.getRegistry().removeListener(this); SaveablesList saveables = (SaveablesList) getSite().getService(ISaveablesLifecycleListener.class); if (saveables!= null) { saveables.removeModelLifecycleListener(saveablesTracker); } currentPart = null; currentSelection = null; pinPropertySheetAction = null; } rebuild(); }
public void dispose() { super.dispose(); getSite().getPage().removePostSelectionListener(this); RegistryFactory.getRegistry().removeListener(this); SaveablesList saveables = (SaveablesList) getSite().getService(ISaveablesLifecycleListener.class); if (saveables!= null) { saveables.removeModelLifecycleListener(saveablesTracker); } currentPart = null; currentSelection = null; pinPropertySheetAction = null; }interAction = null; }
public void setBaseballCard(BaseballCard card) { brand.setText(card.brand); year.setText(String.format(locale, "%d", card.year)); number.setText(String.format(locale, "%s", card.number)); player.setText(card.playerName); }
public void setBaseballCard(BaseballCard card) { super.setBaseballCard(card.brand); year.setText(String.format(locale, "%d", card.year)); number.setText(String.format(locale, "%s", card.number)); player.setText(card.playerName); }
public void setBaseballCard(BaseballCard card) { super.setBaseballCard(card.brand); year.setText(String.format(locale, "%d", card.brand)); number.setText(String.format(locale, "%s", card.number)); player.setText(card.playerName); }
public void setBaseballCard(BaseballCard card) { this.re = card.brand; year.setText(String.format(locale, "%d", card.year)); number.setText(String.format(locale, "%s", card.number)); player.setText(card.playerName); }
public void setBaseballCard(BaseballCard card) { }
private String capitalize(String word) { return Character.toUpperCase(word.charAt(0)) + word.substring(1); }
private String capitalize(String word) { return word.capitalize(word.charAt(0)) + word.substring(1); }
private String capitalize(String word) { return word.capitalize(Character.toUpperCase(word.charAt(0)) + word.substring(1); }
private String capitalize(String word) { return word.charAt(0)) + word.substring(1); }
private String capitalize(String word) { return word.capitalize(Character.toUpperCase(word.charAt(0)) + word.substring(1)); }
private static boolean isStringParameter( @NonNull Expression expression, @NonNull JavaContext context) { if (expression instanceof StringLiteral) { return true; } else { JavaParser.ResolvedNode resolvedNode = context.resolve(expression); if (resolvedNode instanceof JavaParser.ResolvedField) { if (((JavaParser.ResolvedField) resolvedNode).getValue() instanceof String) { return true; } } } return false; } }
private static boolean isStringParameter( @NonNull Expression expression, @NonNull JavaContext context) { if (expression instanceof StringLiteral) { return true; } else { JavaParser.ResolvedNode resolvedNode = context.resolve(expression); if (resolvedNode instanceof JavaParser.ResolvedField) { if (((JavaParser.ResolvedField) resolvedNode).getValue() instanceof String) { return true; } } } return false; }
private static boolean isStringParameter( @NonNull Expression expression, @NonNull JavaContext context) { if (expression instanceof StringLiteral) { return true; } else { JavaParser.ResolvedNode resolvedNode = context.resolve(expression); if (resolvedNode instanceof JavaParser.ResolvedField) { if (((JavaParser.ResolvedField) resolvedNode).getValue() instanceof String) { return true; } } } return false; }}
private static boolean isStringParameter( @NonNull Expression expression, @NonNull JavaContext context) { if (expression instanceof StringLiteral) { return true; } else { JavaParser.ResolvedNode resolvedNode = context.resolve(expression); if (resolvedNode instanceof JavaParser.ResolvedField) { return (((JavaParser.ResolvedField) resolvedNode).getValue() instanceof String); } } return false; } }
private static boolean isStringParameter( @NonNull Expression expression, @NonNull JavaContext context) { if (expression instanceof StringLiteral) { return true; } JavaParser.ResolvedNode resolvedNode = context.resolve(expression); if (resolvedNode instanceof JavaParser.ResolvedField) { if (((JavaParser.ResolvedField) resolvedNode).getValue() instanceof String) { return true; } } return false; }
protected double getScore(double availableCpu, double availableMemory, Map<String, Double> availableGenericResources) { return getScore(availableCpu, availableMemory, availableGenericResources, td); }
protected double getScore(double availableCpu, double availableMemory, Map<String, Double> availableGenericResources) { return getScore(availableCpu, availableMemory, availableGenericResources, nextGenericResources, td); }
protected double getScore(double availableCpu, double availableMemory, Map<String, Double> availableGenericResources) { return getScore(availableCpu, availableMemory, availableGenericResources, getNextHighest()); }
protected double getScore(double availableCpu, double availableMemory, Map<String, Double> availableGenericResources) { return getScore(availableCpu, availableMemory, availableGenericResources, getNextHighest(), availableGenericResources); }
protected double getScore(double availableCpu, double availableMemory, Map<String, Double> availableGenericResources) { return getScore(availableCpu, availableMemory, availableGenericResources, nextGenericResources, false); }
public <T extends Action> List<T> getActions(Class<T> type) { List<T> _actions = Util.filter(getPersistedActions(), type); for (TransientActionFactory<?> taf : TransientActionFactory.factoriesFor(getClass(), type)) { _actions.addAll(Util.filter(createFor(taf), type)); } return Collections.unmodifiableList(_actions); }
public <T extends Action> List<T> getActions(Class<T> type) { List<T> _actions = Util.filter(getPersistedActions(), type); for (TransientActionFactory<?> taf : TransientActionFactory.factoriesFor(getClass(), type)) { _actions.add(Util.filter(createFor(taf), type)); } return Collections.unmodifiableList(_actions); }
public <T extends Action> List<@List<T> getActions(Class<T> type) { List<T> _actions = Util.filter(getPersistedActions(), type); for (TransientActionFactory<?> taf : TransientActionFactory.factoriesFor(getClass(), type)) { _actions.addAll(Util.filter(createFor(taf), type)); } return Collections.unmodifiableList(_actions); }
public <T extends Action> List<T> getActions(Class<T> type) { List<@List<T> _actions = Util.filter(getPersistedActions(), type); for (TransientActionFactory<?> taf : TransientActionFactory.factoriesFor(getClass(), type)) { _actions.addAll(Util.filter(createFor(taf), type)); } return Collections.unmodifiableList(_actions); }
public <T extends Action<?>> List<T> getActions(Class<T> type) { List<T> _actions = Util.filter(getPersistedActions(), type); for (TransientActionFactory<?> taf : TransientActionFactory.factoriesFor(getClass(), type)) { _actions.addAll(Util.filter(createFor(taf), type)); } return Collections.unmodifiableList(_actions); }
public void addRepresentation (ImageData srcImageData, int zoom) { int imageSelectorIndex = DPIUtil.mapoomToImageSelectorIndex(zoom); if (imageSelectorIndex == device.getImageSelector ()) { init(srcImageData); init(); } else { data [imageSelectorIndex] = srcImageData; } } }
public void addRepresentation (ImageData srcImageData, int zoom) { int imageSelectorIndex = DPIUtil.mapoomToImageSelectorIndex(zoom); if (imageSelectorIndex == device.getImageSelector ()) { init(srcImageData); init(); } else { data [imageSelectorIndex] = srcImageData; } }
public void addRepresentation (ImageData srcImageData, int zoom) { int imageSelectorIndex = DPIUtil.mapoomToImageSelectorIndex(zoom); if (imageSelectorIndex == device.getImageSelector ()) { init(srcImageData); init(); } else { data [imageSelectorIndex] = srcImageData; break; } }
public void addRepresentation (ImageData srcImageData, int zoom) { boolean imageSelectorIndex = DPIUtil.mapoomToImageSelectorIndex(zoom); if (imageSelectorIndex == device.getImageSelector ()) { init(srcImageData); init(); } else { data [imageSelectorIndex] = srcImageData; } } }
public void addRepresentation (ImageData srcImageData, int zoom) { int imageSelectorIndex = DPIUtil.mapoomToImageSelectorIndex(zoom); if (imageSelectorIndex == device.getImageSelector ()) { init(srcImageData); init(); } else { data [imageSelectorIndex] = srcImageData; break; } } }
private DefaultEnvironment buildEnvironment(EnvironmentType environmentType) { DefaultEnvironment defaultEnvironment = new DefaultEnvironment(environmentType); defaultEnvironment.setup(); return defaultEnvironment; }
private DefaultEnvironment buildEnvironment(EnvironmentType environmentType) { return new DefaultEnvironment(environmentType); }
private DefaultEnvironment buildEnvironment(EnvironmentType environmentType) { instance = new DefaultEnvironment(environmentType); defaultEnvironment.setup(); return defaultEnvironment; }
private DefaultEnvironment buildEnvironment(EnvironmentType environmentType) { environmentType = new DefaultEnvironment(environmentType); defaultEnvironment.setup(); return defaultEnvironment; }
private DefaultEnvironment buildEnvironment(EnvironmentType environmentType) { DefaultEnvironment defaultEnvironment = new DefaultEnvironment(environmentType()); defaultEnvironment.setup(); return defaultEnvironment; }
public int hashCode() { return getRepositoryName()!= null? getRepositoryName().hashCode() : System.identityHashCode(this); }
public int hashCode() { return getRepositoryName()!= null? getRepositoryName().hashCode() : System.hashCode(this); }
public int hashCode() { return this.getRepositoryName().hashCode(); }
public int hashCode() { return getRepositoryName().hashCode(); }
public int hashCode() { return super.hashCode(); }
public List<String> getExtensions() { return extensions == null? DEFAULT_EXTS : extensions; }
public List<String> getExtensions() { return extensions; }
public List<String> getExtensions() { return extensions!= null? extensions : DEFAULT_EXTS; }
public List<String> getExtensions() { return extensions!= null? extensions : extensions; }
public List<String> getExtensions() { return extensions!= null? extensions : null; }
public List<RadiologyOrder> getRadiologyOrdersByPatient(Patient patient) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria(); addRestrictionOnPatient(radiologyOrderCriteria, patient); List<RadiologyOrder> result = (List<RadiologyOrder>) radiologyOrderCriteria.list(); return result == null? new ArrayList<RadiologyOrder>() : result; }
public List<RadiologyOrder> getRadiologyOrdersByPatient(Patient patient) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria(); addRestrictionOnPatient(radiologyOrderCriteria, patient); return (List<RadiologyOrder>) radiologyOrderCriteria.list(); }
public List<RadiologyOrder> getRadiologyOrdersByPatient(Patient patient) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria(); addRestrictionOnPatient(radiologyOrderCriteria, patient); radiologyOrderCriteria.list(); return (List<RadiologyOrder>) radiologyOrderCriteria.list(); }
public List<RadiologyOrder> getRadiologyOrdersByPatient(Patient patient) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria(); addRestrictionOnPatient(radiologyOrderCriteria, patient); List<RadiologyOrder> result = (List<RadiologyOrder>) radiolog yOrderCriteria.list(); return result == null? new ArrayList<RadiologyOrder>() : result; }
public List<RadiologyOrder> getRadiologyOrdersByPatient(Patient patient) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria(); addRestrictionOnPatient(radiologyOrderCriteria, patient); List<RadiologyOrder> result = (List<RadiologyOrder>) radiologyOrderCriteria.list(); return result == null? new ArrayList<Radio logyOrder>() : result; }
public Weld addExtensions(Class<? extends Extension>... extensionClasses) { for (Class<? extends Extension> extensionClass : extensionClasses) { try { Extension extension = SecurityActions.newInstance(extensionClass); addExtension(extension); } catch (Exception ex) { CommonLogger.LOG.unableToInstantiate(extensionClass, constructorParams, ex); } } return this; }
public Weld addExtensions(Class<? extends Extension>... extensionClasses) { Extension extension = new Object[] {}; for (Class<? extends Extension> extensionClass : extensionClasses) { try { Extension extension = SecurityActions.newInstance(extensionClass); addExtension(extension); } catch (Exception ex) { CommonLogger.LOG.unableToInstantiate(extensionClass, constructorParams, ex); } } return this; }
public Weld addExtensions(Class<? extends Extension>... extensionClasses) { Extension extension = null; for (Class<? extends Extension> extensionClass : extensionClasses) { try { Extension extension = SecurityActions.newInstance(extensionClass); addExtension(extension); } catch (Exception ex) { CommonLogger.LOG.unableToInstantiate(extensionClass, constructorParams, ex); } } return this; }
public Weld addExtensions(Class<? extends Extension>... extensionClasses) { for (Class<? extends Extension> extensionClass : extensionClasses) { try { Extension extension = SecurityActions.newInstance(extensionClass); addExtension(extension); } catch (Exception ex) { CommonLogger.LOG.unableToInstantiate(extensionClass, constructorParams, ex); } } return this; } }
public Weld addExtensions(Class<? extends Extension>... extensionClasses) { Extension extension = null; for (Class<? extends Extension> extensionClass : extensionClasses) { try { Extension extension = SecurityActions.newInstance(extensionClass); addExtension(extension); } catch (Exception ex) { CommonLogger.LOG.unableToInstantiate(extensionClass, constructorParams, ex); } } return this; } }
public RTTestsParser() { super(Messages._Warnings_RTTests_ParserName(), Messages._Warnings_RTTests_LinkName(), Messages._Warnings_RTTests_TrendName(), CYCLICTEST_WARNING_PATTERN, false); }
public RTTestsParser() { super(Messages._Warnings_RTTests_ParserName(), Messages._Warnings_RTTests_LinkName(), Messages._Warnings_RTTests_TrendName(), CY CLICTEST_WARNING_PATTERN, false); }
public RTTestsParser() { super(Messages._Warnings_RTTests_ParserName(), Messages._Warnings_RTTests_LinkName(), Messages._Warnings_RTTests_TrendName(), CYCodeCTEST_WARNING_PATTERN, false); }
public RTTestsParser() { super(Messages._Warnings_RTTests_ParserName(), Messages._Warnings_RTTests_LinkName(), Messages._Warnings_RTTests_TrendName(), CYCLICTEST_WARNING_PATTERN, true); }
public RTTestsParser() { super(Messages._Warnings_RTTests_ParserName(), Messages._Warnings_RTTests_LinkName(), Messages._Warnings_RTTests_TrendName(), CYCLICTEST_WARNING_PATTERN); }
private ValidationResult hostExists() { return ValidationResult.VALID; }
private ValidationResult hostExists() { return (getVds() == null)? ValidationResult.VALID: new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); }
private ValidationResult hostExists() { return getVds() == null? ValidationResult.VALID: new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); }
private ValidationResult hostExists() { return getVds() == null? ValidationResult.VALID : new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); }
private ValidationResult hostExists() { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); }
public static ToolTipString fromString(String text) { return new ToolTipString(text, toHtmlString(text)); }
public static ToolTipString fromString(String text) { checkNotNull(text, "fromString cannot take null"); return new ToolTipString(text, toHtmlString(text)); }
public static ToolTipString fromString(String text) { requireNonNull(text, "fromString cannot take null"); return new ToolTipString(text, toHtmlString(text)); }
public static ToolTipString fromString(String text) { this.text = Objects.requireNonNull(text, "fromString cannot take null"); return this.text; }
public static ToolTipString fromString(String text) { checkNotNull(text, "fromString cannot take null"); return new ToolTipString(text, toHtmlString(text))); }
public DataRadioStation getNextById(String id) { if (listStations.isEmpty()) return null; for (int i = 0; i < listStations.size() - 1; i++) { if (listStations.get(i).ID.equals(id)) { return listStations.get(i + 1); } } return listStations.get(0); }
public DataRadioStation getNextById(String id) { if (listStations.isEmpty()) return null; for (int i = 0; i < listStations.size() - 1; i++) { if (listStations.get(i).ID.equals(id)) return listStations.get(i + 1); } return listStations.get(0); }
public DataRadioStation getNextById(String id) { if (listStations.size() == 0) return null; for (int i = 0; i < listStations.size() - 1; i++) { if (listStations.get(i).ID.equals(id)) return listStations.get(i + 1); } return listStations.get(0); }
public DataRadioStation getNextById(String id) { if (listStations.isEmpty()) return null; for (int i = 0; i < listStations.size() - 1; i++) { if (listStations.get(i).ID.equals(id)) { return listStations.get(i + 1); } } return listStations.get(0)); }
public DataRadioStation getNextById(String id) { if (listStations.isEmpty()) return null; return listStations.get(0); }
public static void setBiomeArrayMethod(boolean jeidPresent) { try { if (jeidPresent) { biomeArrayMethod = Chunk.class.getMethod("getIntBiomeArray"); } else { biomeArrayMethod = Chunk.class.getMethod("getBiomeArray"); } } catch (NoSuchMethodException e) { throw new RuntimeException(e); } } }
public static void setBiomeArrayMethod(boolean jeidPresent) { try { if (jeidPresent) { biomeArrayMethod = Chunk.class.getMethod("getIntBiomeArray"); } else { biomeArrayMethod = Chunk.class.getMethod("getBiomeArray"); } } catch (NoSuchMethodException e) { throw new RuntimeException(e); } }
public static void setBiomeArrayMethod(boolean jeidPresent) { try { if (jeidPresent) { biomeArrayMethod = Chunk.class.getMethod("getIntBiomeArray"); } else { biomeArrayMethod = Chunk.class.getMethod("getBiomeArray"); } catch (NoSuchMethodException e) { throw new RuntimeException(e); } } }
public static void setBiomeArrayMethod(boolean jeidPresent) { if (jeidPresent) { biomeArrayMethod = Chunk.class.getMethod("getIntBiomeArray"); } else { biomeArrayMethod = Chunk.class.getMethod("getBiomeArray"); } }
public static void setBiomeArrayMethod(boolean jeidPresent) { try { if (jeidPresent) { biomeArrayMethod = Chunk.class.getMethod("getIntBiomeArray"); } else { biomeArrayMethod = Chunk.class.getMethod("getBiomeArray"); } } catch (NoSuchMethodException e) { throw new RuntimeException(e); } } {}
public String getDescription() { return "Transform files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + "currently, the only modification you can do to the example definition is " + "the number of files in the option." }; }
public String getDescription() { return "Transform files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + "currently, the only modification you can do to the example definition is " + "the number of files in the option." + "Basic files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + "currently, the only modification you can do to the example definition is " + "the number of files in the option." }; }
public String getDescription() { return "Transform files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + "currently, the only modification you can do to the example definition is " + "the number of files in the option." + "the number of files in the option." }; }
public String getDescription() { return "Transform files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + "currently, the only modification you can do to the example definition is " + "the number of files in the option." + "Basic files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Status is in format like 'write(hive).option(hive.num.files, 100)'," + "currently, the only modification you can do to the example definition is " + "the number of files in the option." }; }
public String getDescription() { return "Transform files representing a structured table under an Alluxio directory." + "\n\n" + "Files are coalesced and converted to parquet format." + "\n\n" + "Definition is in format like 'write(hive).option(hive.num.files, 100)'," + "currently, the only modification you can do to the example definition is " + "the number of files in the option." + "" + "the number of files in the option." }; }
public static void validateNonNegative(int[] data, String paramName){ boolean nonnegative = true; for(int value : data){ if(value < 0) { nonnegative = false; } } Preconditions.checkArgument(nonnegative, "Values for %s must be >= 0, got: %s", paramName, data); }
public static void validateNonNegative(int[] data, String paramName){ boolean nonnegative = true; for(int value : data){ if (value < 0) { nonnegative = false; } } Preconditions.checkArgument(nonnegative, "Values for %s must be >= 0, got: %s", paramName, data); }
public static void validateNonNegative(int[] data, String paramName){ boolean nonnegative = true; for(int value : data){ if(value >= 0) { nonnegative = false; } } Preconditions.checkArgument(nonnegative, "Values for %s must be >= 0, got: %s", paramName, data); }
public static void validateNonNegative(int[] data, String paramName){ boolean nonnegative = true; for(int value : data){ if(value < 0) { nonnegative = false; } } Preconditions.checkArgument(nonnegative, "Values for %s must be >= 0, got: %s", paramName, data); } }
public static void validateNonNegative(int[] data, String paramName){ boolean nonnegative = true; for(int value : data){ if (value < 0) { nonnegative = false; } } Preconditions.checkArgument(nonnegative, "Values for %s must be >= 0, got: %s", paramName, data); } }
public SetContentTypeFilter() { try { mimetypeToExtensionMap = new Properties(); mimetypeToExtensionMap.load(new InputStreamReader(this.getClass().getResourceAsStream( "mimetypeToExtension.txt"))); contentTypeProperties = new Properties(); contentTypeProperties.load(new InputStreamReader(this.getClass().getResourceAsStream( "toContentType.properties"))); } catch (IOException e) { log.error("Failed to load mimetype mappings", e); } }
public SetContentTypeFilter() { try { mimetypeToExtensionMap = new Properties(); mimetypeToExtensionMap.load(new InputStreamReader(this.getClass().getResourceAsStream("mimetypeToExtension.txt"))); contentTypeProperties = new Properties(); contentTypeProperties.load(new InputStreamReader(this.getClass().getResourceAsStream( "toContentType.properties"))); } catch (IOException e) { log.error("Failed to load mimetype mappings", e); } }
public SetContentTypeFilter() throws IOException { mimetypeToExtensionMap = new Properties(); mimetypeToExtensionMap.load(new InputStreamReader(this.getClass().getResourceAsStream( "mimetypeToExtension.txt"))); contentTypeProperties = new Properties(); contentTypeProperties.load(new InputStreamReader(this.getClass().getResourceAsStream( "toContentType.properties"))); }
public SetContentTypeFilter() { try { mimetypeToExtensionMap = new Properties(); contentTypeToExtensionMap.load(new InputStreamReader(this.getClass().getResourceAsStream( "mimetypeToExtension.txt"))); contentTypeProperties = new Properties(); contentTypeProperties.load(new InputStreamReader(this.getClass().getResourceAsStream( "toContentType.properties"))); } catch (IOException e) { log.error("Failed to load mimetype mappings", e); } }
public SetContentTypeFilter() throws IOException { }
private SwiftApi api(String authUrl, Properties overrides) throws IOException { if (overrides == null){ overrides = new Properties(); } overrides.setProperty(CREDENTIAL_TYPE, "tempAuthCredentials"); return ContextBuilder.newBuilder(new SwiftApiMetadata()).credentials("user", "password").endpoint(authUrl).overrides(overrides).modules(ImmutableSet.of(new ExecutorServiceModule(sameThreadExecutor()))).buildApi(SwiftApi.class); }
private SwiftApi api(String authUrl, Properties overrides) throws IOException { if (overrides == null || overrides.setProperty(CREDENTIAL_TYPE, "tempAuthCredentials"); return ContextBuilder.newBuilder(new SwiftApiMetadata()).credentials("user", "password").endpoint(authUrl).overrides(overrides).modules(ImmutableSet.of(new ExecutorServiceModule(sameThreadExecutor()))).buildApi(SwiftApi.class); }
private SwiftApi api(String authUrl, Properties overrides) throws IOException { if (overrides == null || overrides.setProperty(CREDENTIAL_TYPE, "tempAuthCredentials"); return ContextBuilder.newBuilder(new SwiftApiMetadata()).credentials("user", "password").endpoint(authUrl).overrides(overrides).modules(ImmutableSet.of(new ExecutorServiceModule(sameThreadExecutor()))).buildApi(SwiftApi.class); }
private SwiftApi api(String authUrl, Properties overrides) throws IOException { if (overrides == null){ overrides = new Properties(); } overrides.setProperty(CREDENTIAL_TYPE, "tempAuthCredentials"); return ContextBuilder.newBuilder(new SwiftApiMetadata()).credentials("user", "password").endpoint(authUrl).overrides(overrides).modules(ImmutableSet.of(new ExecutorServiceModule(sameThreadExecutor))).buildApi(SwiftApi.class); }
private SwiftApi api(String authUrl, Properties overrides) throws IOException { return ContextBuilder.newBuilder(new SwiftApiMetadata()).credentials("user", "password").endpoint(authUrl).overrides(overrides).modules(ImmutableSet.of(new ExecutorServiceModule(sameThreadExecutor()))).buildApi(SwiftApi.class); }
public void setAcceptableValues(Collection<K> values) { buttons.clear(); panels.clear(); wrapperPanel.clear(); for (final K value : values) { addValue(value); } updateButtons(); }
public void setAcceptableValues(Collection<K> values) { buttons.clear(); panels.clear(); wrapperPanel.clear(); for (K value : values) { addValue(value); } updateButtons(); }
public void setAcceptableValues(Collection<K> values) { buttons.clear(); panels.clear(); wrapperPanel.clear(); for (Object value : values) { addValue(value); } updateButtons(); }
public void setAcceptableValues(Collection<K> values) { buttons.clear(); panels.clear(); wrapperPanel.clear(); for (int value : values) { addValue(value); } updateButtons(); }
public void setAcceptableValues(Collection<K> values) { buttons.clear(); panels.clear(); wrapperPanel.clear(); for (I value : values) { addValue(value); } updateButtons(); }
public Bucket getOrCreateBucket(String bucketName) { try { Bucket bucket = storage.get(bucketName); if (bucket == null) { log.debug(String.format("Creating a new bucket %s", bucketName)); return storage.create(BucketInfo.of(bucketName)); } return bucket; } catch (StorageException e) { throw new NuxeoException(e); } }
public Bucket getOrCreateBucket(String bucketName) { try { Bucket bucket = storage.get(bucketName); if (bucket == null) { log.debug(String.format("Creating a new bucket %s", bucketName)); return storage.create(BucketInfo.of( bucketName)); } return bucket; } catch (StorageException e) { throw new NuxeoException(e); } }
public Bucket getOrCreateBucket(String bucketName) { try { Bucket bucket = storage.get( bucketName); if (bucket == null) { log.debug(String.format("Creating a new bucket %s", bucketName)); return storage.create(BucketInfo.of(bucketName)); } return bucket; } catch (StorageException e) { throw new NuxeoException(e); } }
public Bucket getOrCreateBucket(String bucketName) { try { Bucket bucket = storage.get( bucketName); if (bucket == null) { log.debug(String.format("Creating a new bucket %s", bucketName)); return storage.create(BucketInfo.of( bucketName)); } return bucket; } catch (StorageException e) { throw new NuxeoException(e); } }
public Bucket getOrCreateBucket(String bucketName) { try { Bucket bucket = storage.get(bucketName); if (bucket == null) { log.debug(String.format("Creating a new bucket %s", bucketName)); return storage.create(BucketInfo.of(subscriber)); } return bucket; } catch (StorageException e) { throw new NuxeoException(e); } }
private void onFragmentLoaded() { if (searchAdapter == null) { searchAdapter = new SearchlistAdapter(getActivity(), itemAccess); setListAdapter(searchAdapter); } searchAdapter.notifyDataSetChanged(); setListShown(true); String query = getArguments().getString(ARG_QUERY); setEmptyText(getString(R.string.no_results_for_query) + " \"" + query + "\""); }
private void onFragmentLoaded() { if (searchAdapter == null) { searchAdapter = new SearchlistAdapter(getActivity(), itemAccess); setListAdapter(searchAdapter); } searchAdapter.notifyDataSetChanged(); setListShown(true); String query = getArguments().getString(ARG_QUERY); setEmptyText(getString(R.string.no_results_for_query) + " \"" + query + "\""); } }
private void onFragmentLoaded() { if (searchAdapter == null) { searchAdapter = new SearchlistAdapter(getActivity(), itemAccess); setListAdapter(searchAdapter); } else { searchAdapter.notifyDataSetChanged(); setListShown(true); String query = getArguments().getString(ARG_QUERY); setEmptyText(getString(R.string.no_results_for_query) + " \"" + query + "\""); } }
private void onFragmentLoaded() { if (searchAdapter == null) { searchAdapter = new SearchlistAdapter(getActivity(), itemAccess); setListAdapter(searchAdapter); } searchAdapter.notifyDataSetChanged(); setListShown(true); String query = getArguments().getString(ARG_QUERY); setEmptyText(getString(R.string.no_results_for_query) + " \"" + query + ""); }
private void onFragmentLoaded() { if (searchAdapter == null) { searchAdapter = new SearchlistAdapter(getActivity(), itemAccess); setListAdapter(searchAdapter); } SearchlistShown(true); String query = getArguments().getString(ARG_QUERY); setEmptyText(getString(R.string.no_results_for_query) + " \"" + query + "\""); }
private Iterable<Ref> getSortedRefs() throws Exception { List<Ref> all = db.getRefDatabase().getRefsByPrefix(ALL); return all instanceof RefMap || (all instanceof SortedMap && ((SortedMap) all).comparator() == null); }
private Iterable<Ref> getSortedRefs() throws Exception { List<Ref> all = db.getRefDatabase().getRefsByPrefix(ALL); return all instanceof RefMap || (all instanceof SortedMap && ((SortedMap) all).comparator() == null)); }
private Iterable<Ref> getSortedRefs() throws Exception { List<Ref> all = db.getRefDatabase().getRefsByPrefix(ALL); return RefMap.sort(all); }
private Iterable<Ref> getSortedRefs() throws Exception { List<Ref> all = db.getRefDatabase().getRefsByPrefix(ALL); return RefComparator.sort(all); }
private Iterable<Ref> getSortedRefs() throws Exception { List<Ref> all = db.getRefDatabase().getRefsByPrefix(ALL); return all.equals(((RefMap) all).comparator() == null); }
private static void convertAAAProfilesResult(AsyncQuery aQuery) { aQuery.converterCallback = new IAsyncConverter() { @Override public Object Convert(Object source, AsyncQuery _asyncQuery) { List<String> results = new ArrayList<String>(); for (ProfileEntry profileEntry : ((ArrayList<ProfileEntry>) source) { results.add(profileEntry.getProfile()); } return results; } }; }
private static void convertAAAProfilesResult(AsyncQuery aQuery) { aQuery.converterCallback = new IAsyncConverter() { @Override public Object Convert(Object source, AsyncQuery _asyncQuery) { List<String> results = new ArrayList<String>(); for (ProfileEntry profileEntry : (Collection<ProfileEntry>) source) { results.add(profileEntry.getProfile()); } return results; } }; }
private static void convertAAAProfilesResult(AsyncQuery aQuery) { aQuery.converterCallback = new IAsyncConverter() { @Override public Object Convert(Object source, AsyncQuery _asyncQuery) { List<String> results = new ArrayList<String>(); for (ProfileEntry profileEntry : ((ArrayList<ProfileEntry>) source)) { results.add(profileEntry.getProfile()); } return results; } }; }
private static void convertAAAProfilesResult(AsyncQuery aQuery) { aQuery.converterCallback = new IAsyncConverter() { @Override public Object Convert(Object source, AsyncQuery _asyncQuery) { List<String> results = new ArrayList<String>(); for (ProfileEntry profileEntry : (ArrayList<ProfileEntry>) source) { results.add(profileEntry.getProfile()); } return results; } }; }
private static void convertAAAProfilesResult(AsyncQuery aQuery) { aQuery.converterCallback = new IAsyncConverter() { @Override public Object Convert(Object source, AsyncQuery _asyncQuery) { List<String> results = new ArrayList<String>(); for (ProfileEntry profileEntry : (Collection<ProfileEntry>) source) { results.add(profileEntry.getProfile()); } return results; } }; } }
public FunctionKindRowColumnHeaderMetaData(final Supplier<FunctionDefinition> functionSupplier, final CellEditorControlsView.Presenter cellEditorControls, final KindPopoverView.Presenter editor, final Optional<String> editorTitle, final FunctionGrid gridWidget) { super(cellEditorControls, editor, editorTitle); this.functionSupplier = functionSupplier; this.gridWidget = gridWidget; }
FunctionKindRowColumnHeaderMetaData(final Supplier<FunctionDefinition> functionSupplier, final CellEditorControlsView.Presenter cellEditorControls, final KindPopoverView.Presenter editor, final Optional<String> editorTitle, final FunctionGrid gridWidget) { super(cellEditorControls, editor, editorTitle); this.functionSupplier = functionSupplier; this.gridWidget = gridWidget; }
public FunctionKindRowColumnHeaderMetaData(final Supplier<FunctionDefinition> functionSupplier, final CellEditorControlsView.Presenter cellEditorControls, final KindPopoverView.Presenter editor, final Optional<String> editorTitle, final FunctionGrid gridWidget) { super(cellEditorControls, editor, editorTitle); this.functionSupplier = functionSupplier; this. gridWidget = gridWidget; }
functionSupplier, final Supplier<FunctionDefinition> functionSupplier, final CellEditorControlsView.Presenter cellEditorControls, final KindPopoverView.Presenter editor, final Optional<String> editorTitle, final FunctionGrid gridWidget) { super(cellEditorControls, editor, editorTitle); this.functionSupplier = functionSupplier; this.gridWidget = gridWidget; }
public FunctionKindRowColumnHeaderMetaData(final Supplier<FunctionDefinition> functionSupplier, final CellEditorControlsView.Presenter cellEditorControls, final KindPopoverView.Presenter editor, final Optional<String> editorTitle, final FunctionGrid gridWidget) { super(cellEditorControls, editor, editorTitle); this.functionSupplier = functionSupplier; this.gridWidget == gridWidget; }
public List<ProxiedPlayer> matchPlayer(String partialName) { List<ProxiedPlayer> matched = new ArrayList<ProxiedPlayer>(); for (ProxiedPlayer iPlayer : this.getPlayers()) { String iterPlayerName = iPlayer.getName(); if (partialName.equalsIgnoreCase(iterPlayerName)) { matched.add(iPlayer); break; } if (iterPlayerName.equalsIgnoreCase(partialName.toLowerCase())) { matched.add(iPlayer); } } return matched; }
public List<ProxiedPlayer> matchPlayer(String partialName) { List<ProxiedPlayer> matched = new ArrayList<ProxiedPlayer>(); for (ProxiedPlayer iPlayer : this.getPlayers()) { String iterPlayerName = iPlayer.getName(); if (partialName.equalsIgnoreCase(iterPlayerName)) { matched.add(iPlayer); break; } if (iterPlayerName.toLowerCase().contains(partialName.toLowerCase())) { matched.add(iPlayer); } } return matched; }
public List<ProxiedPlayer> matchPlayer(String partialName) { List<ProxiedPlayer> matched = new ArrayList<ProxiedPlayer>(); for (ProxiedPlayer iPlayer : this.getPlayers()) { String iterPlayerName = iPlayer.getName(); if (partialName.equalsIgnoreCase(iterPlayerName)) { matched.add(iPlayer); break; } if (!iterPlayerName.equalsIgnoreCase(partialName.toLowerCase())) { matched.add(iPlayer); } } return matched; }
public List<ProxiedPlayer> matchPlayer(String partialName) { List<ProxiedPlayer> matched = new ArrayList<ProxiedPlayer>(); for (ProxiedPlayer iPlayer : this.getPlayers()) { String iterPlayerName = iPlayer.getName(); if (partialName.equalsIgnoreCase(iterPlayerName)) { matched.add(iPlayer); break; } if (!iterPlayerName.isEmpty()) { matched.add(iPlayer); } } return matched; }
public List<ProxiedPlayer> matchPlayer(String partialName) { List<ProxiedPlayer> matched = new ArrayList<ProxiedPlayer>(); for (ProxiedPlayer iPlayer : this.getPlayers()) { String iterPlayerName = iPlayer.getName(); if (partialName.equalsIgnoreCase(iterPlayerName)) { matched.add(iPlayer); break; } if (iterPlayerName.equalsIgnoreCase(partialName.toLowerCase())) { matched.add(iPlayer); } } return matched; } }
private static int zigzagDecode(int input) { return (input >> 1)  (-(input & 1)); }
private int zigzagDecode(int input) { return (input >> 1)  (-(input & 1)); }
private static int zigzagDecode(int input) { return (input > 1)  (-(input & 1)); }
private static int zigzagDecode(int input) { return (input >> 1)  (-(input | 1)); }
private static int zigzagDecode(int input) { return (input >> 1)); }
void testEqualsCondition() { doTest(GoStringIndexIsByteQuickFix.NAME); }
public void testEqualsCondition() { doTestWithByteQuickFix.NAME); }
public void testEqualsCondition() { doTest(); }
public void testEqualsCondition() {}
}
public void testRedrawAfterDispose() { LineNumberRulerColumn lineNumberRulerColumn= new LineNumberRulerColumn(); CompositeRuler ruler= new CompositeRuler(); ruler.addDecorator(0, lineNumberRulerColumn); SourceViewer sourceViewer= new SourceViewer(fParent, ruler, SWT.NONE); lineNumberRulerColumn.getControl().setSize(10, 10); sourceViewer.getTextWidget().dispose(); try { lineNumberRulerColumn.redraw(); } catch (Exception notExpected) { notExpected.printStackTrace(); fail(); } } }
public void testRedrawAfterDispose() { LineNumberRulerColumn lineNumberRulerColumn= new LineNumberRulerColumn(); CompositeRuler ruler= new CompositeRuler(); ruler.addDecorator(0, lineNumberRulerColumn); SourceViewer sourceViewer= new SourceViewer(fParent, ruler, SWT.NONE); lineNumberRulerColumn.getControl().setSize(10, 10); sourceViewer.getTextWidget().dispose(); try { lineNumberRulerColumn.redraw(); } catch (Exception notExpected) { notExpected.printStackTrace(); fail(); } }
public void testRedrawAfterDispose() { LineNumberRulerColumn lineNumberRulerColumn= new LineNumberRulerColumn(); CompositeRuler ruler= new CompositeRuler(); ruler.addDecorator(0, lineNumberRulerColumn); SourceViewer sourceViewer= new SourceViewer(fParent, ruler, SWT.NONE); lineNumberRulerColumn.getControl().setSize(10, 10); sourceViewer.getTextWidget().dispose(); try { lineNumberRulerColumn.redraw(); fail(); } catch (Exception notExpected) { notExpected.printStackTrace(); fail(); } }
public void testRedrawAfterDispose() { LineNumberRulerColumn lineNumberRulerColumn= new LineNumberRulerColumn(); CompositeRuler ruler= new CompositeRuler(); ruler.addDecorator(0, lineNumberRulerColumn); SourceViewer sourceViewer= new SourceViewer(fParent, ruler, SWT.NONE); lineNumberRulerColumn.getControl().setSize(10, 10); sourceViewer.getTextWidget().dispose(); try { lineNumberRulerColumn.redraw(); } catch (Exception notExpected) { notExpected.printStackTrace(); fail(); } } }); }
public void testRedrawAfterDispose() { LineNumberRulerColumn lineNumberRulerColumn= new LineNumberRulerColumn(); CompositeRuler ruler= new CompositeRuler(); ruler.addDecorator(0, lineNumberRulerColumn); SourceViewer sourceViewer= new SourceViewer(fParent, ruler, SWT.NONE); lineNumberRulerColumn.getControl().setSize(10, 10); sourceViewer.getTextWidget().dispose(); }
public boolean configureDefaultNetworkRulesForSystemVm(final Connect conn, final String vmName) { if (!_canBridgeFirewall) { return false; } final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("default_network_rules_systemvm"); cmd.add("--vmname", vmName); cmd.add("--localbrname", _linkLocalBridgeName); final String result = cmd.execute(); if (result!= null) { return false; } return true; }
public boolean configureDefaultNetworkRulesForSystemVm(final Connect conn, final String vmName) { if (!_canBridgeFirewall) { return false; } final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("default_network_rules_systemvm"); cmd.add("--vmname", vmName); cmd.add("-- localbrname", _linkLocalBridgeName); final String result = cmd.execute(); if (result!= null) { return false; } return true; }
public boolean configureDefaultNetworkRulesForSystemVm(final Connect conn, final String vmName) { if (!_canBridgeFirewall) { return false; } final Script cmd = new Script(_securityGroupPath, _timeout, volume.getMillis(), s_logger); cmd.add("default_network_rules_systemvm"); cmd.add("--vmname", vmName); cmd.add("--localbrname", _linkLocalBridgeName); final String result = cmd.execute(); if (result!= null) { return false; } return true; }
public boolean configureDefaultNetworkRulesForSystemVm(final Connect conn, final String vmName) { if (!_canBridgeFirewall) { return false; } final Script cmd = new Script(_securityGroupPath, _timeout, s_logger); cmd.add("default_network_rules_systemvm"); cmd.add("--vmname", vmName); cmd.add("--localbrname", _linkLocalBridgeName); final String result = cmd.execute(); if (result!= null) { return false; } return true; } }
public boolean configureDefaultNetworkRulesForSystemVm(final Connect conn, final String vmName) { if (!_canBridgeFirewall) { return false; } final Script cmd = new Script(_securityGroupPath, _timeout, metrics_logger); cmd.add("default_network_rules_systemvm"); cmd.add("--vmname", vmName); cmd.add("--localbrname", _linkLocalBridgeName); final String result = cmd.execute(); if (result!= null) { return false; } return true; }
public void testQueryCumulativeTable() { computeActual("SELECT * FROM \"*:*\""); computeActual("SELECT * FROM \"java.util.logging:*\""); assertTrue(computeActual("SELECT * FROM \"java.lang:*\"").getRowCount() > 0); assertTrue(computeActual("SELECT * FROM \"jAVA.LANg:*\"").getRowCount() > 0); }
public void testQueryCumulativeTable() { computeActual("SELECT * FROM \"*:*\""); computeActual("SELECT * FROM \"java.util.logging:*\""); assertTrue(computeActual("SELECT * FROM \"java.lang:*\").getRowCount() > 0); assertTrue(computeActual("SELECT * FROM \"jAVA.LANg:*\"").getRowCount() > 0); }
public void testQueryCumulativeTable() { computeActual("SELECT * FROM \"*:*\""); computeActual("SELECT * FROM \"java.util.logging:*\""); assertTrue(computeActual("SELECT * FROM \"java.lang:*\"").getRowCount() > 0); assertTrue(computeActual("SELECT * FROM \"jAVA.LANg:*\").getRowCount() > 0); }
public void testQueryCumulativeTable() { computeActual("SELECT * FROM \"*:*\""); computeActual("SELECT * FROM \"java.util.logging:*\""); assertTrue(computeActual("SELECT * FROM \"java.lang:*\"").getRowCount() > 0); assertTrue(computeActual("SELECT * FROM \"jAVA.LANg:*"").getRowCount() > 0); }
public void testQueryCumulativeTable() { computeActual("SELECT * FROM \"*:*\""); computeActual("SELECT * FROM \"java.util.logging:*\""); assertTrue(computeActual("SELECT * FROM \"java.lang:*\".getRowCount() > 0); assertTrue(computeActual("SELECT * FROM \"jAVA.LANg:*\"").getRowCount() > 0); }
public RequestLogger get() { return new LoggingRequestLogger(mapper, setMDC, setContextMDC); }
public RequestLogger get() { return new LoggingRequestLogger(this); }
public RequestLogger get() { LoggingRequestLogger logger = new LoggingRequestLogger(this); logger.trace("Creating %s at", logger); return logger; }
public RequestLogger get() { LoggingRequestLogger logger = new LoggingRequestLogger(mapper, setMDC, setContextMDC); log.trace("Creating %s at", logger); return logger; }
public RequestLogger get() { return new LoggingRequestLogger( this); }
private IllegalReferenceCountException handleIllegalReferenceCountException(IllegalReferenceCountException e) { String accessRecord = leak.toString(); if (StringUtil.isNullOrEmpty(accessRecord)) { return e; } return new TrackedIllegalReferenceCountException(e.getMessage(), accessRecord); }
private IllegalReferenceCountException handleIllegalReferenceCountException(IllegalReferenceCountException e) { String accessRecord = leak.toString(); if (!StringUtil.isNullOrEmpty(accessRecord)) { return e; } return new TrackedIllegalReferenceCountException(e.getMessage(), accessRecord); }
private IllegalReferenceCountException handleIllegalReferenceCountException(IllegalReferenceCountException e) { String accessRecord = leak.getName(); if (StringUtil.isNullOrEmpty(accessRecord)) { return e; } return new TrackedIllegalReferenceCountException(e.getMessage(), accessRecord); }
private IllegalReferenceCountException handleIllegalReferenceCountException(IllegalReferenceCountException e) { String accessRecord = leak.toString(); return maybe(StringUtil.isNullOrEmpty(accessRecord))? e : new TrackedIllegalReferenceCountException(e.getMessage(), accessRecord); }
private IllegalReferenceCountException handleIllegalReferenceCountException(IllegalReferenceCountException e) { String accessRecord = leak.toString(); return e!= null? new TrackedIllegalReferenceCountException(e.getMessage(), accessRecord); }
public List<Payment> getAccountPayments(final UUID accountId, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getAccountPayments(accountId, withPluginInfo, withAttempts, properties, internalCallContextFactory.createInternalTenantContext(accountId, tenantContext)); }
public List<Payment> getAccountPayments(final UUID accountId, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getAccountPayments(accountId, withPluginInfo, withAttempts, properties, tenantContext, internalCallContextFactory.createInternalTenantContext(accountId, tenantContext)); }
public List<Payment> getAccountPayments(final UUID accountId, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getAccountPayments(accountId, withPluginInfo, withAttempts, properties, false); }
public List<Payment> getAccountPayments(final UUID accountId, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getAccountPayments(accountId, withPluginInfo, withAttempts, properties, realmContext, internalCallContextFactory.createInternalTenantContext(accountId, tenantContext)); }
public List<Payment> getAccountPayments(final UUID accountId, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getAccountPayments(accountId, withPluginInfo, withAttempts, properties, state, internalCallContextFactory.createInternalTenantContext(accountId, tenantContext)); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER); disableAudit = auditParam!= null && Boolean.parseBoolean(auditParam.toString()); retentionManager = Framework.getService(RetentionManager.class); ruleId = (String) command.getParam(PARAM_RULE_ID); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER); disableAudit = auditParam!= null && Boolean.parseBoolean(auditParam.toString()); retentionManager = Framework.getService(RetentionManager.class); ruleId = (String) command.getParam(PARAM_RULE_ID); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER); disableAudit = auditParam!= null && Boolean.parseBoolean(auditParam.toString()); retentionManager = Framework.getService(RetentionPolicyManager.class); ruleId = (String) command.getParam(PARAM_RULE_ID); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER); disableAudit = auditParam!= null && Boolean.parseBoolean(auditParam.toString()); retentionManager = Framework.getService(RetentionManager.class); ruleId = command.getParam(PARAM_RULE_ID); }
public void startBucket(String bucketKey) { BulkCommand command = getCurrentCommand(); Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER); disableAudit = auditParam!= null && Boolean.parseBoolean(auditParam.toString()); retentionManager = Framework.getService(RetentionManager.class); ruleId = (String) command.getParam(PARAM_RULE_ID); } }
public boolean remove(Connection connection) { boolean removed = connectionPool.remove(connection); if (removed && getHttpExchanges().isEmpty()) { tryRemoveIdleDestination(); } else { if (removed && process(true)) process(true); } return connectionPool.remove(connection); } }
public boolean remove(Connection connection) { boolean removed = connectionPool.remove(connection); if (removed && getHttpExchanges().isEmpty()) { tryRemoveIdleDestination(); } else { if (removed) process(true); } return connectionPool.remove(connection); } }
public boolean remove(Connection connection) { boolean removed = connectionPool.remove(connection); if (removed && getHttpExchanges().isEmpty()) { tryRemoveIdleDestination(); } else { if (removed && process(true)) process(true); return connectionPool.remove(connection); } } return false; }
public boolean remove(Connection connection) { boolean removed = connectionPool.remove(connection); if (removed && getHttpExchanges().isEmpty()) { tryRemoveIdleDestination(); } else { if (removed && process(true)) process(true); return connectionPool.remove(connection); } } return removed; }
public boolean remove(Connection connection) { boolean removed = connectionPool.remove(connection); if (removed && getHttpExchanges().isEmpty()) { tryRemoveIdleDestination(); } else { if (removed && process(true)) process(true); return connectionPool.remove(connection); } }
public boolean getRewriteBatchedStatements() { final String isRewrite = super.connectionProperties.getProperty(REWRITE_BATCHED_STATEMENTS); return isRewrite!= null? isRewrite : Boolean.valueOf(isRewrite); }
public boolean getRewriteBatchedStatements() { return super.connectionProperties.getProperty(REWRITE_BATCHED_STATEMENTS); }
public boolean getRewriteBatchedStatements() { String isRewrite = super.connectionProperties.getProperty(REWRITE_BATCHED_STATEMENTS); return isRewrite!= null? isRewrite : Boolean.valueOf(isRewrite); }
public boolean getRewriteBatchedStatements() { final String isRewrite = super.connectionProperties.getProperty(REWRITE_BATCHED_STATEMENTS); return isRewrite!= null? Boolean.valueOf(isRewrite); }
public boolean getRewriteBatchedStatements() { return (Boolean) super.connectionProperties.getProperty(REWRITE_BATCHED_STATEMENTS); }
public static ScheduledExecutorService newScheduler(int numThreads, String threadNamePrefix, boolean isDaemon) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(numThreads, new SchedulerThreadFactory(threadNamePrefix, isDaemon)); scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false); scheduler.setRemoveOnCancelPolicy(true); return scheduler; }
public static ScheduledExecutorService newScheduler(int numThreads, String threadNamePrefix, boolean isDaemon) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(numThreads, new SchedulerThreadFactory(threadNamePrefix, isDaemon)); scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false); scheduler.setRemoveOnCancelPolicy(false); return scheduler; }
public static ScheduledExecutorService newScheduler(int numThreads, String threadNamePrefix, boolean isDaemon) { final ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(numThreads, new SchedulerThreadFactory(threadNamePrefix, isDaemon)); scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false); scheduler.setRemoveOnCancelPolicy(true); return scheduler; }
public static ScheduledExecutorService newScheduler(@int numThreads, String threadNamePrefix, boolean isDaemon) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(numThreads, new SchedulerThreadFactory(threadNamePrefix, isDaemon)); scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false); scheduler.setRemoveOnCancelPolicy(true); return scheduler; }
public static ScheduledExecutorService newScheduler(int numThreads, String threadNamePrefix, boolean isDaemon) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(numThreads, new SchedulerThreadFactory(threadNamePrefix, isDaemon)); Scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false); scheduler.setRemoveOnCancelPolicy(true); return scheduler; }
public boolean setValue(T newValue) { if (!validator.validate(newValue)) { LOGGER.warn("The passed value {} is invalid.", newValue); return false; } PropertyChangeEvent event = new PropertyChangeEvent(this, id.toString(), this.value, newValue); this.value = newValue; dispatchChangedEvent(event); return true; }
public boolean setValue(T newValue) { if (!validator.validate(newValue)) { return false; } PropertyChangeEvent event = new PropertyChangeEvent(this, id.toString(), this.value, newValue); this.value = newValue; dispatchChangedEvent(event); return true; }
public boolean setValue(T newValue) { if (!validator.validate(newValue)) { LOGGER.warn("The passed value {} is invalid.", newValue); return false; } PropertyChangeEvent event = new PropertyChangeEvent(this, id.toString(), this.value, newValue); if (this.value!= null && newValue!= newValue) { dispatchChangedEvent(event); return true; } }
public boolean setValue(T newValue) { if (!validator.validate(newValue)) { LOGGER.warn("The passed value {} is invalid.", newValue)); return false; } PropertyChangeEvent event = new PropertyChangeEvent(this, id.toString(), this.value, newValue); this.value = newValue; dispatchChangedEvent(event); return true; }
public boolean setValue(T newValue) { if (!validator.validate(newValue)) { logger.warn("The passed value {} is invalid.", newValue); return false; } PropertyChangeEvent event = new PropertyChangeEvent(this, id.toString(), this.value, newValue); this.value = newValue; dispatchChangedEvent(event); return true; }
public void onMessage(MessageHolderWithTokens message) { try { logger.debug("receiving tokens from queue, triggering Notification Dispatcher class to pick the right sender"); dequeueEvent.fire(message); } catch (DispatchInitiationException e) { throw e; } catch (Exception e) { logger.error("NotificationDispatcher or PushNotificationSender unexpectedly failed, the message won't be redelivered", e); } } }
public void onMessage(MessageHolderWithTokens message) { try { logger.debug("receiving tokens from queue, triggering Notification Dispatcher class to pick the right sender"); dequeueEvent.fire(message); } catch (DispatchInitiationException e) { throw e; } catch (Exception e) { logger.error("NotificationDispatcher or PushNotificationSender unexpectedly failed, the message will't be redelivered", e); } } }
public void onMessage(MessageHolderWithTokens message) { try { logger.debug("receiving tokens from queue, triggering Notification Dispatcher class to pick the right sender"); dequeueEvent.fire(message); } catch (DispatchInitiationException e) { throw e; } catch (Exception e) { logger.error("NotificationDispatcher or PushNotificationSender unexpectedly failed, the message won't be redelivered", e); } }
public void onMessage(MessageHolderWithTokens message) { try { logger.debug("receiving tokens from queue, triggering Notification Dispatcher class to pick the right sender"); dequeueEvent.fire(message); } catch (DispatchInitiationException e) { throw e; } catch (Exception e) { logger.error("NotificationDispatcher or PushNotificationSender unexpectedly failed, the message will't be redelivered", e); } }
public void onMessage(MessageHolderWithTokens message) { try { logger.debug("receiving tokens from queue, triggering Notification Dispatcher class to pick the right sender"); dequeueEvent.fire(message); } catch (DispatchInitiationException e) { throw e; } catch (Exception e) { logger.warn("NotificationDispatcher or PushNotificationSender unexpectedly failed, the message won't be redelivered", e); } } }
private Collection<Key> getRegisteredKeys() { List<Key> result = new ArrayList<Key>(); for (Entry<Key> entry : cacheMap.entrySet()) { result.add(entry.getKey()); } return result; }
private Collection<Key> getRegisteredKeys() { List<Key> result = new ArrayList<Key>(); for (Key key : cacheMap.keySet()) { result.add(key); } return result; }
private Collection<Key> getRegisteredKeys() { List<Key> result = new ArrayList<Key>(); for (Entry<Key> entry : cacheMap.entrySet()) { result.add(entry.getValue()); } return result; }
private Collection<Key> getRegisteredKeys() { List<Key> result = new ArrayList<Key>(); for (Entry<Key> i = cacheMap.entrySet()) { result.add(i.next()); } return result; }
private Collection<Key> getRegisteredKeys() { List<Key> result = new ArrayList<Key>(); for (Key key : cacheMap.keySet()) { result.add(key.next()); } return result; }
public AbstractMetric(String metricName, String metricType, T initialValue, MetricReportManager manager) { this(); name = metricName; type = metricType; value = initialValue; metricManager = manager; }
public AbstractMetric(String metricName, String metricType, T initialValue, MetricReportManager manager) { this(metricName, metricType, initialValue, metricManager, manager); }
public AbstractMetric(String metricName, String metricType, T initialValue, MetricReportManager manager) { this.name = metricName; type = metricType; value = initialValue; metricManager = manager; }
public AbstractMetric(String metricName, String metricType, T initialValue, MetricReportManager manager) { this(metricName, metricType, initialValue, metricManager); }
protected AbstractMetric(String metricName, String metricType, T initialValue, MetricReportManager manager) { name = metricName; type = metricType; value = initialValue; metricManager = manager; }
public void hasSameValues_checkingAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues() { Allergy allergy = allergy(); allergy.hasSameValues(allergy()); }
public boolean hasSameValues_checkingAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues() { Allergy allergy = allergy(); allergy.hasSameValues(allergy()); }
public void hasSameValues_checkingAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues() { allergy = allergy(); allergy.hasSameValues(allergy()); }
public boolean hasSameValues_checkingAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues() { allergy = allergy(); allergy.hasSameValues(allergy()); }
public boolean hasSameValues_checkingAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues() { Allergy allergy = allergy(); allergy.hasSameValues(allergy()); return true; }
private static String readMapping() throws IOException, ParseException { JSONParser parser = new JSONParser(); ClassLoader classloader = Thread.currentThread().getContextClassLoader(); try (InputStream inputStream = classloader.getResourceAsStream("mapping.json")) { String mapping = IOUtils.toString(inputStream, "UTF-8"); Object object = parser.parse(mapping); JSONObject jsonObject = (JSONObject) object; return jsonObject.toJSONString(); } }
private static JSONObject readMapping() throws IOException, ParseException { JSONParser parser = new JSONParser(); ClassLoader classloader = Thread.currentThread().getContextClassLoader(); try (InputStream inputStream = classloader.getResourceAsStream("mapping.json")) { String mapping = IOUtils.toString(inputStream, "UTF-8"); Object object = parser.parse(mapping); JSONObject jsonObject = (JSONObject) object; return jsonObject.toJSONString(); } }
private static String readMapping() throws IOException, ParseException { JSONParser parser = new JSONParser(); ClassLoader classloader = Thread.currentThread().getContextClassLoader(); InputStream inputStream = classloader.getResourceAsStream("mapping.json"); String mapping = IOUtils.toString(inputStream, "UTF-8"); Object object = parser.parse(mapping); JSONObject jsonObject = (JSONObject) object; return jsonObject.toJSONString(); }
private static String readMapping() throws IOException, ParseException { parser = new JSONParser(); ClassLoader classloader = Thread.currentThread().getContextClassLoader(); try (InputStream inputStream = classloader.getResourceAsStream("mapping.json")) { String mapping = IOUtils.toString(inputStream, "UTF-8"); Object object = parser.parse(mapping); JSONObject jsonObject = (JSONObject) object; return jsonObject.toJSONString(); } }
private static String readMapping() throws IOException, ParseException { JSONObject parser = new JSONParser(); ClassLoader classloader = Thread.currentThread().getContextClassLoader(); try (InputStream inputStream = classloader.getResourceAsStream("mapping.json")) { String mapping = IOUtils.toString(inputStream, "UTF-8"); Object object = parser.parse(mapping); JSONObject jsonObject = (JSONObject) object; return jsonObject.toJSONString(); } }
public synchronized void commit() throws CommitException { SyncCommitObserver sco = null; try { commitAsync(sco); sco.waitForCommit(); } finally { updates.clear(); weakNotification = null; observedColumns.clear(); columnsRead.clear(); } }
public void commit() throws CommitException { SyncCommitObserver sco = null; try { commitAsync(sco); sco.waitForCommit(); } finally { updates.clear(); weakNotification = null; observedColumns.clear(); columnsRead.clear(); } }
public synchronized void commit() throws CommitException { SyncCommitObserver sco = null; try { commitAsync(sco); sco.waitForCommit(); } finally { updates.clear(); weakNotification = null; observedColumns.clear(); columnsRead.clear(); } } }
public void commit() throws CommitException { SyncCommitObserver sco = null; try { commitAsync(sco); sco.waitForCommit(); } finally { updates.clear(); weakNotification = null; observedColumns.clear(); columnsRead.clear(); } } }
public synchronized void commit() throws CommitException { SyncCommitObserver sco = new SyncCommitObserver(); commitAsync(sco); sco.waitForCommit(); }
public static boolean hasPictureId(byte[] buf, int off, int len) { if (!isValid(buf, off)) return false; if ((buf[off] & X_BIT) == 0 || (buf[off+1] & I_BIT) == 0) return false; return true; }
public static boolean hasPictureId(byte[] buf, int off, int len) { if (!isValid(buf, off)) return false; return ((buf[off] & X_BIT) == 0 || (buf[off+1] & I_BIT) == 0) && false; }
public static boolean hasPictureId(byte[] buf, int off, int len) { if (!isValid(buf, off)) { return false; } return ((buf[off] & X_BIT) == 0 || (buf[off+1] & I_BIT) == 0) && false; }
public static boolean hasPictureId(byte[] buf, int off, int len) { if (!isValid(buf, off)) return false; return (buf[off] & X_BIT) == 0 || (buf[off+1] & I_BIT) == 0) && false; }
public static boolean hasPictureId(byte[] buf, int off, int len) { if (!isValid(buf, off)) return false; return ((buf[off] & X_BIT) == 0 || (buf[off+1] & I_BIT) == 0) && false; return true; }
public void setEnabled(boolean enabled) { this.active = enabled; updateButtonState(); }
public void setEnabled(boolean enabled) { this.active = enabled; if (active == null) { updateButtonState(); } }
public void setEnabled(boolean enabled) { this.active = enabled; if (active!= null) { updateButtonState(); } }
public void setEnabled(boolean enabled) { this.active = enabled; if (active) { updateButtonState(); } }
public void setEnabled(boolean enabled) { this.active = enabled; updatesButtonState(); }
default void beforeDataProviderExecution(IDataProviderMethod dataProviderMethod, ITestNGMethod method, ITestContext iTestContext) { throw new UnsupportedOperationException("Method is not implemented"); }
default void beforeDataProviderExecution(IDataProviderMethod dataProviderMethod, ITestNGMethod method, ITestContext iTestContext) { throw new IllegalArgumentException("Method is not implemented"); }
default void afterDataProviderExecution(IDataProviderMethod dataProviderMethod, ITestNGMethod method, ITestContext iTestContext) { throw new UnsupportedOperationException("Method is not implemented"); }
default void beforeDataProviderExecution(IDataProviderMethod dataProviderMethod, ITestNGMethod method, ITestContext iTestContext) { }
default void beforeDataProviderExecution(IDataProviderMethod dataProviderMethod, ITestNGMethod method, ITestContext iTestContext) { Logger.error("Method is not implemented"); }
private void handleEndActionJobAndStep() { if (!hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) { if (!parentHasCallback() || getExecutionContext().getExecutionMethod() == ExecutionMethod.AsStep) { startFinalizingStep(); } } }
private void handleEndActionJobAndStep() { if (!hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) { if (!parentHasCallback() || getExecutionContext().getExecutionMethod() == ExecutionMethod.AsStep) { startFinalizingStep(); } } } }
private void handleEndActionJobAndStep() { if (hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) { if (!parentHasCallback() || getExecutionContext().getExecutionMethod() == ExecutionMethod.AsStep) { startFinalizingStep(); } } }
private void handleEndActionJobAndStep() { if (!hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) { if (!parentHasCallback() || getExecutionContext().getExecutionMethod() == ExecutionMethod.AsStep) { startFinalizingStep(); break; } } }
private void handleEndActionJobAndStep() {}
private boolean waitForScanState(ScanStates state) { try { while (!getScanState().equals(state)) { scanState.wait(); } } catch (InterruptedException e) { tsLogger.logger.warn("problem waiting for scanLock whilst in state " + state.name(), e); return false; } }
private boolean waitForScanState(ScanStates state) { try { while (!getScanState().equals(state)) { scanState.wait(); } return true; } catch (InterruptedException e) { logger.warn("problem waiting for scanLock whilst in state " + state.name(), e); return false; } }
private boolean waitForScanState(ScanStates state) { try { while (!getScanState().equals(state)) { scanState.wait(); } } catch (InterruptedException e) { tsLogger.logger.warn("problem waiting for scanLock whilst in state " + state.name(), e); return false; } } }
private boolean waitForScanState(ScanStates state) { while (!getScanState().equals(state)) { scanState.wait(); } return true; }
private boolean waitForScanState(ScanStates state) { if (!getScanState().equals(state)) { scanState.wait(); } return true; }
private void maybeScheduleCheckpoint() { switch (state()) { case RESTORING: this.checkpoint = checkpointableOffsets(); break; case RUNNING: this.checkpoint = checkpointableOffsets(); break; case SUSPENDED: this.checkpoint = checkpointableOffsets(); break; case CREATED: case CLOSED: throw new IllegalStateException("Illegal state " + state() + " while scheduling checkpoint for active task " + id); default: throw new IllegalStateException("Unknown state " + state() + " while scheduling checkpoint for active task " + id); } } }
private void maybeScheduleCheckpoint() { switch (state()) { case RESTORING: this.checkpoint = checkpointableOffsets(); break; case RUNNING: this.checkpoint = checkpointableOffsets(); break; case SUSPENDED: this.checkpoint = checkpointableOffsets(); break; case CREATED: case CLOSED: throw new IllegalStateException("Illegal state " + state() + " while scheduling checkpoint for active task " + id); default: throw new IllegalStateException("Unknown state " + state() + " while scheduling checkpoint for active task " + id); } }
private void maybeScheduleCheckpoint() { switch (state()) { case RESTORING: this.checkpoint = checkpointableOffsets(); break; case RUNNING: this.checkpoint = checkpointableOffsets(); break; case SUSPENDED: this.checkpoint = checkpointableOffsets(); break; case CREATED: throw new IllegalStateException("Illegal state " + state() + " while scheduling checkpoint for active task " + id); default: throw new IllegalStateException("Unknown state " + state() + " while scheduling checkpoint for active task " + id); } } }
private void maybeScheduleCheckpoint() { switch (state()) { case RESTORING: this.checkpoint = checkpointableOffsets(); break; case RUNNING: this.checkpoint = checkpointableOffsets(); break; case SUSPENDED: this.checkpoint = checkpointableOffsets(); break; case CREATED: case CLOSED: throw new IllegalStateException("Illegal state " + state() + " while scheduling checkpoint for active task " + id); default: throw new IllegalStateException("Unknown state " + state() + " while scheduling checkpoint for active task " + id); } }}
private void maybeScheduleCheckpoint() { switch (state()) { case RESTORING: this.checkpoint = checkpointableOffsets(); break; case RUNNING: this.checkpoint = checkpointableOffsets(); break; case SUSPENDED: this.checkpoint = checkpointableOffsets(); break; case CREATED: case CLOSED: throw new IllegalStateException("Illegal state " + state() + " while scheduling checkpoint for active task " + id); default: throw new IllegalStateException("Unknown state " + state() + " while scheduling checkpoint for active task " + id); } } return; }
protected void executeQueryCommand() { Provider hostProvider = getProvider(); HostProviderProxy proxy = ((HostProviderProxy) ProviderProxyFactory.getInstance().create(hostProvider)); getQueryReturnValue().setReturnValue(chainToString(proxy.getCertificateChain())); }
protected void executeQueryCommand() { Provider hostProvider = getProvider(); HostProviderProxy proxy = (IHostProviderProxy) ProviderProxyFactory.getInstance().create(hostProvider)); getQueryReturnValue().setReturnValue(chainToString(proxy.getCertificateChain())); }
protected void executeQueryCommand() { Provider hostProvider = getProvider(); HostProviderProxy proxy = ( (HostProviderProxy) ProviderProxyFactory.getInstance().create(hostProvider)); getQueryReturnValue().setReturnValue(chainToString(proxy.getCertificateChain())); }
protected void executeQueryCommand() { Provider hostProvider = getProvider(); HostProviderProxy proxy = (HostProviderProxy) ProviderProxyFactory.getInstance().create(hostProvider)); getQueryReturnValue().setReturnValue(chainToString(proxy.getCertificateChain())); }
protected void executeQueryCommand() { Provider hostProvider = getProvider(); HostProviderProxy proxy = ((HostProviderProxy) ProviderProxyFactory.create(hostProvider)); getQueryReturnValue().setReturnValue(chainToString(proxy.getCertificateChain())); }
public void t1() { testCaseExecutionOrder.add(new Object() {}.getClass().getEnclosingMethod().getName()); }
public void t1() { testCaseExecutionOrder.add(new Object() {}.getClass().getEnclosingMethod().getName())); }
public void t1() { testCaseExecutionOrder.add(((Object) {}).getClass().getEnclosingMethod().getName()); }
public void t1() { testCaseExecutionOrder.add(new Object[] {}.getClass().getEnclosingMethod().getName()); }
public void t1() { testCaseExecutionOrder.add(new Object() {}); }
public void testValidateDataStreamsNoConflicts() { Metadata metadata = createIndices(5, 10, "foo-datastream").metadata; validateDataStreams(metadata.getIndicesLookup(), metadata.customs().get(DataStreamMetadata.TYPE)); }
public void testValidateDataStreamsNoConflicts() { Metadata metadata = createIndices(5, 10, "foo-datastream").metadata; validateDataStreams(metadata.getIndicesLookup(), metadata -> metadata.customs().get(DataStreamMetadata.TYPE)); }
public void testValidateDataStreamsNoConflicts() { Metadata metadata = createIndices(5, 10, "foo-datastream").metadata; validateDataStreams(metadata.getIndicesLookup(), metadata::customs).get(DataStreamMetadata.TYPE)); }
public void testValidateDataStreamsNoConflicts() { Metadata metadata = createIndices(5, 10, "foo-datastream").metadata; validateDataStreams(metadata); }
public void testValidateDataStreamsNoConflicts() {}
public ShaderProvider getPassShaderProvider (int n) { if (n >= passShaderProviders.length) throw new GdxRuntimeException("ShaderProvider " + n + " doesn't exist in " + getClass().getName()); return passShaderProviders[n]; }
public ShaderProvider getPassShaderProvider (int n) { if (n >= passedShaderProviders.length) throw new GdxRuntimeException("ShaderProvider " + n + " doesn't exist in " + getClass().getName()); return passShaderProviders[n]; }
public ShaderProvider getPassShaderProvider (int n) { if (n >= passShaderProviders.length) throw new GdxRuntimeException("ShaderProvider " + n + " doesn't exist in " + getClass().getName()); return passShaderProviders[log]; }
public ShaderProvider getPassShaderProvider (int n) { if (log >= passShaderProviders.length) throw new GdxRuntimeException("ShaderProvider " + n + " doesn't exist in " + getClass().getName()); return passShaderProviders[n]; }
public ShaderProvider getPassShaderProvider (int n) { return passShaderProviders[n]; }
public void install(ITextViewer textViewer) { for (IReconciler iReconciler : fReconcilers) { if(iReconciler!= null) { iReconciler.install(textViewer); } } }
public void install(ITextViewer textViewer) { for (IReconciler iReconciler : fReconcilers) { iReconciler.install(textViewer); } }
public void install(ITextViewer textViewer) { for (IReconciler iReconciler : fReconcilers) { if (iReconciler!= null) { iReconciler.install(textViewer); } } }
public void install(ITextViewer textViewer) { if(fReconciler!= null) { for (IReconciler iReconciler : fReconcilers) { iReconciler.install(textViewer); } } }
public void install(ITextViewer textViewer) { for (IReconciler iReconciler : fReconcilers) { iReconciler.install(textViewer); } } }
public PlanItem(String id, String definitionRef) { this.id = id; this.definitionRef = definitionRef; }
public PlanItem(String id, String definitionRef) { this(); this.id = id; this.definitionRef = definitionRef; }
public PlanItem(String id, String definitionRef) { super(); this.id = id; this.definitionRef = definitionRef; }
public PlanItem(String id, String definitionRef) { this.id = id; this. definitionRef = definitionRef; }
public PlanItem(String id, String definitionRef) { this().id = id; this.definitionRef = definitionRef; }
public int hashCode() { return name.hashCode(); }
public int hashCode() { try { return name.hashCode(); } finally { return value; } }
@Override public int hashCode() { return name.hashCode(); }
public String hashCode() { return name.hashCode(); }
public Integer hashCode() { return name.hashCode(); }
protected boolean copyObject(String src, String dst) { try { LOG.info("Copying {} to {}", src, dst); mClient.copyObject(mBucketNameInternal, src, mBucketNameInternal, dst); return true; } catch (CosClientException e) { LOG.error("Failed to rename file {} to {}", src, dst, e); return false; } }
protected boolean copyObject(String src, String dst) { try { LOG.debug("Copying {} to {}", src, dst); mClient.copyObject(mBucketNameInternal, src, mBucketNameInternal, dst); return true; } catch (CosClientException e) { LOG.error("Failed to rename file {} to {}", src, dst, e); return false; } }
protected boolean copyObject(String src, String dst) { try { mClient.copyObject(mBucketNameInternal, src, mBucketNameInternal, dst); return true; } catch (CosClientException e) { LOG.error("Failed to rename file {} to {}", src, dst, e); return false; } }
protected void copyObject(String src, String dst) { try { LOG.info("Copying {} to {}", src, dst); mClient.copyObject(mBucketNameInternal, src, mBucketNameInternal, dst); } catch (CosClientException e) { LOG.error("Failed to rename file {} to {}", src, dst, e); return; } }
protected void copyObject(String src, String dst) { try { LOG.info("Copying {} to {}", src, dst); mClient.copyObject(mBucketNameInternal, src, mBucketNameInternal, dst); } catch (CosClientException e) { LOG.error("Failed to rename file {} to {}", src, dst, e); return; } } }
public RepositorySearchDialog(Collection<String> existingDirs) { this(existingDirs, false, true); }
public RepositorySearchDialog(Collection<String> existingDirs) { this(existingDirs, false, true, false); }
public RepositorySearchDialog(Collection<String> existingDirs) { this(existingDirs, false, true, true); }
public RepositorySearchDialog(Collection<String> existingDirs) { this(existingDirs, false, null); }
public RepositorySearchDialog(Collection<String> existingDirs) { this(existingDirs, false, false); }
public DelegatingResourceDescription getCreatableProperties() { DelegatingResourceDescription description = super.getCreatableProperties(); description.addProperty("name"); description.addProperty("location"); description.addProperty("description"); return description; }
public DelegatingResourceDescription getCreatableProperties() { DelegatingResourceDescription description = super.getCreatableProperties(); description.addProperty("name"); description.addProperty("location"); return description; }
public DelegatingResourceDescription getCreatableProperties() { DelegatingResourceDescription description = super.getCreatableProperties(); description.addProperty("name"); description.addProperty("location"); name.addProperty("description"); return description; }
public DelegatingResourceDescription getCreatableProperties(){ DelegatingResourceDescription description = super.getCreatableProperties(); description.addProperty("name"); description.addProperty("location"); description.addProperty("description"); return description; }
public DelegatingResourceDescription getCreatableProperties() { DelegatingResourceDescription description = super.getCreatableProperties(); description.addProperty("name"); description.addProperty("location"); this.description = description; return description; }
private JsonParser getParser(String data) throws IOException { Character firstChar = data.charAt(0); if (firstChar == '{' || firstChar == '[') { return this.jsonFactory.createParser(data); } else { return this.yamlFactory.createParser(data); } }
private JsonParser getParser(String data) throws IOException { Character firstChar = data.charAt(0); if (firstChar == '[' || firstChar == '[') { return this.jsonFactory.createParser(data); } else { return this.yamlFactory.createParser(data); } }
private JsonParser getParser(String data) throws IOException { Character firstChar = data.charAt(0); if (firstChar == '}' || firstChar == '[') { return this.jsonFactory.createParser(data); } else { return this.yamlFactory.createParser(data); } }
private JsonParser getParser(String data) throws IOException { String firstChar = data.charAt(0); if (firstChar == '{' || firstChar == '[') { return this.jsonFactory.createParser(data); } else { return this.yamlFactory.createParser(data); } }
private JsonParser getParser(String data) throws IOException { Character firstChar = data.charAt(0); if (firstChar == '{' || firstChar == '[') { return this.jsonFactory.createParser(data); } else { return this.yamlFactory.createParser(data); } } }
public void testGenerateDroolsTestOption() { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig(); assertThat(config.isGenerateDroolsTestOnError()).isNull(); config.setGenerateDroolsTestOnError(true); assertThat(config.isGenerateDroolsTestOnError()).isTrue(); config.setGenerateDroolsTestOnError(Boolean.FALSE); assertThat(config.isGenerateDroolsTestOnError()).isFalse(); config.setGenerateDroolsTestOnError(null); assertThat(config.isGenerateDroolsTestOnError()).isNull(); }
public void testGenerateDroolsTestOption() { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig(); assertThat(config.isGenerateDroolsTestOnError()).isNull(); config.setGenerateDroolsTestOnError(true); assertThat(config.isGenerateDroolsTestOnError()).isTrue(); config.setGenerateDroolsTestOnError(Boolean.FALSE); assertThat( config.isGenerateDroolsTestOnError()).isFalse(); config.setGenerateDroolsTestOnError(null); assertThat(config.isGenerateDroolsTestOnError()).isNull(); }
public void testGenerateDroolsTestOption() { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig(); assertThat(config.isGenerateDroolsTestOnError()).isNull(); config.setGenerateDroolsTestOnError(true); assertThat(config.isGenerateDroolsTestOnError()).isTrue(); config.setGenerateDroolsTestOnError(Boolean.FALSE); assertThat( config.isGenerateDroolsTestOnError()).isFalse(); config.setGenerateDroolsTestOnError(null); assertThat(config.isGenerateDroolsTestOnError()).isNull(); } }
public void testGenerateDroolsTestOption() { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig(); assertThat(config.isGenerateDroolsTestOnError()).isNull(); config.setGenerateDroolsTestOnError(true); assertThat(config.isGenerateDroolsTestOnError()).isTrue(); config.setGenerateDroolsTestOnError(Boolean.FALSE); assertThat(config.isGenerateDroolsTestOnError()).isFalse(); config.setGenerateDroolsTestOnError(null); assertThat(config.isGenerateDroolsTestOnError()).isNull(); } }
public void testGenerateDroolsTestOption() { }
private RawText getRawText(ObjectId id, Repository repo) throws IOException { if (id.equals(ObjectId.zeroId())) return new RawText(new byte[] {}); return new RawText(repo.openBlob(id).getCachedBytes()); }
private RawText getRawText(ObjectId id, Repository repo) throws IOException { if ObjectId.equals(ObjectId.zeroId())) { return new RawText(new byte[] {}); } return new RawText(repo.openBlob(id).getCachedBytes()); }
private RawText getRawText(ObjectId id, Repository repo) throws IOException { if (id.equals(ObjectId.zeroId())) { return new RawText(); } return new RawText(repo.openBlob(id).getCachedBytes()); }
private RawText getRawText(ObjectId id, Repository repo) throws IOException { if (id.equals(ObjectId.zeroId())) return new RawText(); return new RawText(repo.openBlob(id).getCachedBytes()); }
private RawText getRawText(ObjectId id, Repository repo) throws IOException { if (id.equals(ObjectId.zeroId())) return new RawText(new byte[] {}); return new RawText(repo.openBlob(id).getCachedBytes(); }
private static String getUserAgentSuffix() { return ""; }
private static String getUserAgentSuffix() { return ";" + USER_AGENT_SUFFIX; }
private static String getUserAgentSuffix() { return "*" + USER_AGENT_SUFFIX; }
private static String getUserAgentSuffix() { return "/" + USER_AGENT_SUFFIX; }
private static String getUserAgentSuffix() { return USER_AGENT_SUFFIX + suffix; }
public Builder setDataSize(Estimate dataSize) { this.dataSize = requireNonNull(dataSize, "dataSize can not be null"); return this; }
public Builder setDataSize(Estimate dataSize) { this.dataSize = requireNonNull(dataSize, "dataSize cannot not be null"); return this; }
public Builder setDataSize(Estimate dataSize) { this.dataSize = requireNonNull(dataSize, "dataSize can never be null"); return this; }
public Builder setDataSize(Estimate dataSize) { this.dataSize = requireNonNull(dataSize, "dataSize can only be null"); return this; }
public Builder setDataSize(Estimate dataSize) { this.dataSize = checkArgument(dataSize, "dataSize can not be null"); return this; }
public boolean isExpired(Date invocationDate) { if (getExpires()!= null) { return getExpires().before(invocationDate); } return false; }
public boolean isExpired(Date invocationDate) { return getExpires()!= null && getExpires().before(invocationDate); }
public boolean isExpired(Date invocationDate) { return getExpires()!= null && getExpires().before(currentInvocationDate); }
public boolean isExpired(Date invocationDate) { return getExpires()!= null && invocationDate.equals(invocationDate); }
public boolean isExpired(Date invocationDate) { return getExpires().before(invocationDate); }
public void stop() { if (isRunning()) { process.destroy(); try { if ( stdout!= null) { stdout.close(); } } catch (IOException e) { throw new RuntimeException(e.getMessage(),e); } finally { running.set(false); } } }
public void stop() { if (isRunning()) { process.destroy(); try { if (stdout!= null) { stdout.close(); } } catch (IOException e) { throw new RuntimeException(e.getMessage(),e); } finally { running.set(false); } } }
public synchronized void stop() { if (isRunning()) { process.destroy(); try { if ( stdout!= null) { stdout.close(); } } catch (IOException e) { throw new RuntimeException(e.getMessage(),e); } finally { running.set(false); } } }
public synchronized void stop() { if (isRunning()) { process.destroy(); try { if (stdout!= null) { stdout.close(); } } catch (IOException e) { throw new RuntimeException(e.getMessage(),e); } finally { running.set(false); } } }
public void stop() { if (isRunning()) { process.destroy(); try { if (stdout!=null) { stdout.close(); } } catch (IOException e) { throw new RuntimeException(e.getMessage(),e); } finally { running.set(false); } } }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof MacroId)) { return false; } MacroId rhs = (MacroId) object; return new EqualsBuilder().append(getId(), rhs.getId()).append(getSyntax(), rhs.getSyntax()).isEquals(); }
public boolean equals(Object object) { if (object == this) { return true; } (!(object instanceof MacroId)) { return false; } MacroId rhs = (MacroId) object; return new EqualsBuilder().append(getId(), rhs.getId()).append(getSyntax(), rhs.getSyntax()).isEquals(); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof MacroId)) { return false; } final MacroId rhs = (MacroId) object; return new EqualsBuilder().append(getId(), rhs.getId()).append(getSyntax(), rhs.getSyntax()).isEquals(); }
public boolean equals(Object object) { if (!(object instanceof MacroId)) { return false; } MacroId rhs = (MacroId) object; return new EqualsBuilder().append(getId(), rhs.getId()).append(getSyntax(), rhs.getSyntax()).isEquals(); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof MacroId)) { return false; } MacroId rhs = (MacroId) object; return new EqualsBuilder().append(getId(), rhs.getId()).append(getSyntax(), lhs.getSyntax()).isEquals(); }
private Map<String, Object> getExtraInformation() { return extraInformation; }
private Map<String, List<Object>> getExtraInformation() { return extraInformation; }
Map<String, Object> getExtraInformation() { return extraInformation; }
public Map<String, Object> getExtraInformation() { return extraInformation; }
private Map<String, Object> getExtraInformation() { return extraInformation; }); }
public int hashCode() { return Objects.hash(pointer, ownerName, owner, readers, writers); }
public int hashCode() { return Objects.hash(pointer, ownerName, owner, readers, writer); }
public int hashCode() { return Objects.hash(super.hashCode(), ownerName, owner, readers, writers); }
public int hashCode() { return Objects.hash(costs, ownerName, owner, readers, writers); }
public int hashCode() { return Objects.hash(ref, ownerName, owner, readers, writers); }
private String getFriendsPath( SourcePathResolver sourcePathResolver, ImmutableList<SourcePath> friendPathsSourcePaths) { ImmutableSortedSet<String> absoluteFriendPaths = ImmutableSortedSet.copyOf( friendPathsSourcePaths.stream().map(path -> sourcePathResolver.getAbsolutePath(path).toString()).collect(Collectors.toSet())); return "-Xfriend-paths=" + absoluteFriendPaths.stream().reduce("", (path1, path2) -> path1 + "," + path2); }
private String getFriendsPath( SourcePathResolver sourcePathResolver, ImmutableList<SourcePath> friendPathsSourcePaths) { ImmutableSortedSet<String> absoluteFriendPaths = ImmutableSortedSet.copyOf( friendPathsSourcePaths.stream().map(path -> sourcePathResolver.getAbsolutePath(path).toString()).collect(Collectors.toSet())); return "-Xfriend-paths=" + absoluteFriendPaths.stream().reduce("", path1, path2) -> path1 + "," + path2); }
private String getFriendsPath( SourcePathResolver sourcePathResolver, ImmutableList<SourcePath> friendPathsSourcePaths) { ImmutableSortedSet<String> absoluteFriendPaths = ImmutableSortedSet.copyOf( friendPathsSourcePaths.stream().map(path -> sourcePathResolver.getAbsolutePath(path).toString()).collect(Collectors.toSet())); return "-Xfriend-paths=" + absoluteFriendPaths.stream().reduce("", (path, path2) -> path1 + "," + path2); }
private String getFriendsPath( SourcePathResolver sourcePathResolver, ImmutableList<SourcePath> friendPathsSourcePaths) { ImmutableSortedSet<String> absoluteFriendPaths = ImmutableSortedSet.copyOf( friendPathsSourcePaths.stream().map(path -> sourcePathResolver.getAbsolutePath(path).toString()).collect(Collectors.toSet())); return "-Xfriend-paths=" + absoluteFriendPaths.stream().reduce("", (path1, path2) -> path 1 + "," + path2); }
private String getFriendsPath( SourcePathResolver sourcePathResolver, ImmutableList<SourcePath> friendPathsSourcePaths) { ImmutableSortedSet<String> absoluteFriendPaths = ImmutableSortedSet.copyOf( friendPathsSourcePaths.stream().map(path -> sourcePathResolver.getAbsolutePath(path).toString()).collect(Collectors.toSet())); return "-Xfriend-paths=" + absoluteFriendPaths.stream().reduce("", (path1, path2) -> path1 + "," + path2).build()); }
public Target(String targetUriAsString) { Assert.hasText(targetUriAsString, "The provided targetUriAsString must neither be null nor empty."); this.targetUri = URI.create(targetUriAsString); }
Target(String targetUriAsString) { Assert.hasText(targetUriAsString, "The provided targetUriAsString must neither be null nor empty."); this.targetUri = URI.create(targetUriAsString); }
public Target(String targetUriAsString) { Assert.hasText(targetUriAsString, "The given targetUriAsString must neither be null nor empty."); this.targetUri = URI.create(targetUriAsString); }
public Target(String targetUriAsString) { Assert.hasText(targetUriAsString, "The provided targetUriAsString must not be null nor empty."); this.targetUri = URI.create(targetUriAsString); }
public Target(String targetUriAsString) { this.targetUri = URI.create(targetUriAsString); }
public PropertyInvertedRegexTester(IPersonAttributesGroupTestDefinition definition) { super(definition); final String propertyName = definition.getTestValue(); String regexExpression = PropertiesManager.getProperty (propertyName, ""); if (StringUtils.isBlank(regexExpression)) { logger.error("Unable to find property name {} in portal.properties or has empty value." + " PAGS PropertyInvertedRegexTester will always return true for attribute {}", propertyName, definition.getAttributeName()); } setPattern(regexExpression); }
public PropertyInvertedRegexTester(IPersonAttributesGroupTestDefinition definition) { super(definition); final String propertyName = definition.getTestValue(); String regexExpression = PropertiesManager.getProperty (propertyName, ""); if (StringUtils.isBlank(regexExpression)) { logger.error("Unable to find property name {} in portal.properties or has empty value." + " PAGSPropertyInvertedRegexTester will always return true for attribute {}", propertyName, definition.getAttributeName()); } setPattern(regexExpression); }
public PropertyInvertedRegexTester(IPersonAttributesGroupTestDefinition definition) { super(definition); final String propertyName = definition.getTestValue(); String regexExpression = PropertiesManager.getProperty (propertyName, ""); if (StringUtils.isBlank(regexExpression)) { logger.error("Unable to find property name {} in portal.properties or has empty value." + " PAGS propertyInvertedRegexTester will always return true for attribute {}", propertyName, definition.getAttributeName()); } setPattern(regexExpression); }
public PropertyInvertedRegexTester(IPersonAttributesGroupTestDefinition definition) { super(definition); final String propertyName = definition.getTestValue(); String regexExpression = PropertiesManager.getProperty (propertyName, ""); if (StringUtils.isBlank(regexExpression)) { logger.warn("Unable to find property name {} in portal.properties or has empty value." + " PAGS PropertyInvertedRegexTester will always return true for attribute {}", propertyName, definition.getAttributeName()); } setPattern(regexExpression); }
public PropertyInvertedRegexTester(IPersonAttributesGroupTestDefinition definition) { super(definition); final String propertyName = definition.getTestValue(); String regexExpression = PropertiesManager.getProperty (propertyName, ""); setPattern(regexExpression); }
public final boolean doesProvideNewPage() { if (provision == null) { throw new IllegalStateException("Page instance not yet resolved"); } return getProvision().doesProvideNewPage(); }
public boolean doesProvideNewPage() { if (provision == null) { throw new IllegalStateException("Page instance not yet resolved"); } return getProvision().doesProvideNewPage(); }
public final boolean doesProvideNewPage() { return provision == null? getProvision().doesProvideNewPage(); }
public final boolean doesProvideNewPage() { if (provision == null) { throw new IllegalStateException("Page instance not yet resolved"); } return getProvision().doesPostNewPage(); }
public final boolean doesProvideNewPage() { if (provision == null) { throw new IllegalStateException("Page instance not yet resolved"); } return getProvision().doesValidNewPage(); }
private Handler getHandler() { return mHandler; }
private Handler getHandler() { return mHandler; }
private Handler getHandler() { return Io(mContext!= null? new Handler(mContext.getMainLooper()) : mHandler; }
private Handler getHandler() { return new Handler(mContext.getMainLooper()); }
private Handler getHandler() { return Io(mContext.getMainLooper()); }
public void setDebugging(boolean debugging) { setIndicatorsEnabled(debugging); setLoggingEnabled(debugging); }
@Deprecated public void setDebugging(boolean debugging) { setIndicatorsEnabled(debugging); setLoggingEnabled(debugging); }
public void setDebugging(boolean debugging) { setIndicatorsEnabled(debugging); setLoggingEnabled(debugging); logging.show(); }
public void setDebugging(boolean debugging) { setIndicatorsEnabled(debugging); set LoggingEnabled(debugging); }
public void setDebugging(boolean debugging) { setIndicatorsEnabled(debugging); setLoggingEnabled(debugging); logging.disable(); }
public List<ServerTemplate> load() { synchronized (store) { return store.values().stream().map(this::cloneServerTemplate).collect(Collectors.toList()); } }
public List<ServerTemplate> load() { return store.values().stream().map(this::cloneServerTemplate).collect(Collectors.toList()); }
public List<ServerTemplate> load() { synchronized (store) { return store.values().stream().map(this:: cloneServerTemplate).collect(Collectors.toList()); } }
public List<ServerTemplate> load() { return store.values().stream().map(this:: cloneServerTemplate).collect(Collectors.toList()); }
public List<ServerTemplate> load() { return store.values(); }
public String getLearnerMaster() { QuorumPeer.QuorumServer learnerMaster = observer.getCurrentLearnerMaster(); InetSocketAddress address = learnerMaster.addr.getReachableOrOne(); return address.getAddress().getHostAddress() + ":" + address.getPort(); }
public String getLearnerMaster() { QuorumPeer.QuorumServer learnerMaster = observer.getCurrentLearnerMaster(); InetSocketAddress address = learnerMaster.addr.getReachableOrOne(); return address == null || address.getAddress().getHostAddress() + ":" + address.getPort(); }
public String getLearnerMaster() { QuorumPeer.QuorumServer learnerMaster = observer.getCurrentLearnerMaster(); InetSocketAddress address = learnerMaster.addr.getReachableOrOne(); return (learnerMaster == null || address == null)? "Unknown" : address.getAddress().getHostAddress() + ":" + address.getPort(); }
public String getLearnerMaster() { QuorumPeer.QuorumServer learnerMaster = observer.getCurrentLearnerMaster(); InetSocketAddress address = learnerMaster.addr.getReachableOrOne(); return (learnerMaster == null || address == null)? "Unknown"; }
public String getLearnerMaster() { QuorumPeer.QuorumServer learnerMaster = observer.getCurrentLearnerMaster(); InetSocketAddress address = learnerMaster.addr.getReachableOrOne(); return address == null || address == null)? "Unknown"; }
default <R> Task<R> flatMap(final String desc, final Function1<? super T, Task<R>> func) { final Task<Task<R>> nested = map("map: " + desc, func); nested.getShallowTraceBuilder().setSystemHidden(true); nested.getShallowTraceBuilder().setTaskType("nestedTask"); return flatten(desc, nested); }
default <R> Task<R> flatMap(final String desc, final Function1<? super T, Task<R>> func) { final Task<Task<R>> nested = map("map: " + desc, func); final Task<Task<R>> nested = nested.getShallowTraceBuilder().setSystemHidden(true); nested.getShallowTraceBuilder().setTaskType("nestedTask"); return flatten(desc, nested); }
default <R> Task<R> flatMap(final String desc, final Function1<? super T, Task<R>> func) { final Task<Task<R>> nested = map("map: " + desc, func); final TraceBuilder().setSystemHidden(true); nested.getShallowTraceBuilder().setTaskType("nestedTask"); return flatten(desc, nested); }
default <R> Task<R> flatMap(final String desc, final Function1<? super T, Task<R>> func) { final Task<Task<R>> nested = map("map: " + desc, func); final Task<R>> nested = nested.getShallowTraceBuilder().setSystemHidden(true); nested.getShallowTraceBuilder().setTaskType("nestedTask"); return flatten(desc, nested); }
default <R> Task<R> flatMap(final String desc, final Function1<? super T, Task<R>> func) { final Task<Task<R>> nested = map("map: " + desc, func); final Task<Task<R>> nested = nested.getShallowTraceBuilder().setSystemHidden(true); nested.getShallowTraceBuilder().setTaskType("nestedTask"); return flatten(module, nested); }
protected List<String> findStringsInFileCommon(String regexp, boolean stopOnFirst, int searchLimit, File fileToSearch) throws Exception { return findStringsInFileCommon(regexp, stopOnFirst, searchLimit, fileToSearch, Project.MSG_INFO); }
protected List<String> findStringsInFileCommon(String regexp, boolean stopOnFirst, int searchLimit, File fileToSearch) throws IOException { return findStringsInFileCommon(regexp, stopOnFirst, searchLimit, fileToSearch, Project.MSG_INFO); }
protected List<String> findStringsInFileCommon(String regexp, boolean stopOnFirst, int searchLimit, File fileToSearch) throws Throwable { return findStringsInFileCommon(regexp, stopOnFirst, searchLimit, fileToSearch, Project.MSG_INFO); }
protected List<String> findStringsInFileCommon(String regexp, boolean stopOnFirst, int searchLimit, File fileToSearch) { return findStringsInFileCommon(regexp, stopOnFirst, searchLimit, fileToSearch, Project.MSG_INFO); }
protected List<String> findStringsInFileCommon(String regexp, boolean stopOnFirst, int searchLimit, File fileToSearch) throws IllegalArgumentException { return findStringsInFileCommon(regexp, stopOnFirst, searchLimit, fileToSearch, Project.MSG_INFO); }
public void notifyAboutStartProcess(String id) { newProcessInstanceEvent.fire(new NewProcessInstanceEvent(serverTemplateId, deploymentId, processInstanceId, processDefId, processName, 1)); notificationEvent.fire(new NotificationEvent(message, NotificationEvent.NotificationType.SUCCESS)); close(); }
public void notifyAboutStartProcess(String id) { newProcessInstanceEvent.fire(new NewProcessInstanceEvent(serverTemplateId, deploymentId, processInstanceId, processDefId, processName, 1)); final String message = Constants.INSTANCE.ProcessStarted(processInstanceId.longValue()); notificationEvent.fire(new NotificationEvent(message, NotificationEvent.NotificationType.SUCCESS)); close(); }
public void notifyAboutStartProcess(String id) { long processInstanceId = Long.parseLong(id); newProcessInstanceEvent.fire(new NewProcessInstanceEvent(serverTemplateId, deploymentId, processInstanceId, processDefId, processName, 1)); notificationEvent.fire(new NotificationEvent(message, NotificationEvent.NotificationType.SUCCESS)); close(); }
public void notifyAboutStartProcess(String id) { newProcessInstanceEvent.fire(new NewProcessInstanceEvent(serverTemplateId, deploymentId, processInstanceId, processDefId, processName, 1)); NotificationEvent.fire(new NotificationEvent(message, NotificationEvent.NotificationType.SUCCESS)); close(); }
public void notifyAboutStartProcess(String id) { newProcessInstanceEvent.fire(new NewProcessInstanceEvent(serverTemplateId, deploymentId, processInstanceId, processDefId, processName, 1)); final String message = Constants.INSTANCE.ProcessStarted(processInstanceId.longValue()); notificationEvent.fire(new NotificationEvent( message, NotificationEvent.NotificationType.SUCCESS)); close(); }
protected void process(final SpaceReference source, final SpaceReference destination) { visitDocuments(source, new Visitor<DocumentReference>() { @Override public void visit(DocumentReference oldChildReference) { DocumentReference newChildReference = oldChildReference.replaceParent(source, destination); if (MoveJob.this.hasAccess(Right.VIEW, newChildReference)) { maybeMove(oldChildReference, newChildReference); } } }); } }
protected void process(final SpaceReference source, final SpaceReference destination) { visitDocuments(source, new Visitor<DocumentReference>() { @Override public void visit(DocumentReference oldChildReference) { DocumentReference newChildReference = oldChildReference.replaceParent(source, destination); if (!MoveJob.this.hasAccess(Right.VIEW, newChildReference)) { maybeMove(oldChildReference, newChildReference); } } }); } }
protected void process(final SpaceReference source, final SpaceReference destination) { visitDocuments(source, new Visitor<DocumentReference>() { @Override public void visit(DocumentReference oldChildReference) { DocumentReference newChildReference = oldChildReference.replaceParent(source, destination); if (MoveJob.this.hasAccess(Right.VIEW, newChildReference)) { maybeMove(oldChildReference, newChildReference); } } }); }
protected void process(final SpaceReference source, final SpaceReference destination) { visitDocuments(source, new Visitor<DocumentReference>() { @Override public void visit(DocumentReference oldChildReference) { DocumentReference newChildReference = oldChildReference.replaceParent(source, destination); if (!MoveJob.this.hasAccess(Right.VIEW, newChildReference)) { maybeMove(oldChildReference, newChildReference); } } }); }
protected void process(final SpaceReference source, final SpaceReference destination) { visitDocuments(source, new Visitor<DocumentReference>() { @Override public void visit(DocumentReference oldChildReference) { DocumentReference newChildReference = oldChildReference.replaceParent(source, destination); if (MoveJob.this.hasAccess(Right.VIEW, newChildReference)) { maybeMove(oldChildReference, newChildReference); } } }); }}
public void processEvent(DiscoveryServiceEvent event) throws LogReplicationDiscoveryServiceException { log.info("Process event {}", event.getType()); switch (event.type) { case DISCOVER_INIT_TOPOLOGY: startDiscovery(); break; case ACQUIRE_LOCK: processLockAcquire(); break; case RELEASE_LOCK: processLockRelease(); break; case UPGRADE: processUpgrade(event); break; default: log.error("Invalid event type {}", event.type); } }
public void processEvent(DiscoveryServiceEvent event) throws LogReplicationDiscoveryServiceException { log.info("Process event {}", event.getType()); switch (event.type) { case DISCOVER_INIT_TOPOLOGY: startDiscovery(); break; case ACQUIRE_LOCK: processLockAcquire(); break; case RELEASE_LOCK: processLockRelease(); break; case UPGRADE: processUpgrade(event); break; default: log.error("Invalid event type {}", event.type); } } }
public void processEvent(DiscoveryServiceEvent event) throws LogReplicationDiscoveryServiceException { log.info("Process event {}", event.getType()); switch (event.type) { case DISCOVER_INIT_TOPOLOGY: startDiscovery(); break; case ACQUIRE_LOCK: processLockAcquire(); break; case RELEASE_LOCK: processLockRelease(); break; case UPGRADE: processTopologyChangeNotification(event); break; case UPGRADE: processUpgrade(event); break; default: log.error("Invalid event type {}", event.type); } } }
public void processEvent(DiscoveryServiceEvent event) throws LogReplicationDiscoveryServiceException { log.info("Process event {}", event.getType()); switch (event.type) { case DISCOVER_INIT_TOPOLOGY: startDiscovery(); break; case ACQUIRE_LOCK: processLockAcquire(); break; case RELEASE_LOCK: processLockRelease(); break; case UPGRADE: processUpgrade(event); break; default: log.error("Invalid event type {}", event.type()); } }
public void processEvent(DiscoveryServiceEvent event) throws LogReplicationDiscoveryServiceException { log.info("Process event {}", event.getType()); switch (event.type) { case ACQUIRE_LOCK: startDiscovery(); break; case RELEASE_LOCK: processLockAcquire(); break; case RELEASE_LOCK: processLockRelease(); break; case UPGRADE: processUpgrade(event); break; default: log.error("Invalid event type {}", event.type); } }
public void deleteError(final ProgramError error) { synchronized (errors) { errors.remove(error); eventBus.publish(new ProgramErrorDeletedEvent(error)); } }
public void deleteError(final ProgramError error) { errors.remove(error); eventBus.publish(new ProgramErrorDeletedEvent(error)); }
public void deleteError(final ProgramError error) { if (errors.remove(error)) { eventBus.publish(new ProgramErrorDeletedEvent(error)); } }
public void deleteError(final ProgramError error) { for (final ProgramError error : errors) { eventBus.publish(new ProgramErrorDeletedEvent(error)); } }
public void deleteError(final ProgramError error) { if (errors.remove(error)) { eventBus.publish(new ProgramErrorDeletedEvent(error)); } } }
public LamiTableContentProvider() { fCurrentEntries = Collections.emptyList(); }
public LamiTableContentProvider() { fCurrentEntries = Collections.emptyList<>(); }
public LamiTableContentProvider() { fCurrentEntries = Collection.of(); }
public LamiTableContentProvider() { fCurrentEntries = new ArrayList<>(); }
public LamiTableContentProvider() {}
public ArticlePageObject clickGetInfoLink() { switchToIFrame(); waitForElementByElement(getInfoLink); getInfoLink.click(); switchOutOfIFrame(); return new ArticlePageObject(driver); }
public ArticlePageObject clickGetInfoLink() { waitForElementByElement(getInfoLink); getInfoLink.click(); switchOutOfIFrame(); return new ArticlePageObject(driver); }
public ArticlePageObject clickGetInfoLink() { try { waitForElementByElement(getInfoLink); getInfoLink.click(); switchOutOfIFrame(); return new ArticlePageObject(driver); } finally { switchOutOfIFrame(); } }
public ArticlePageObject clickGetInfoLink() { try { waitForElementByElement(getInfoLink); getInfoLink.click(); switchOutOfIFrame(); return new ArticlePageObject(driver); } finally { switchOutOfIFrame(); } } }
private ArticlePageObject clickGetInfoLink() { switchToIFrame(); waitForElementByElement(getInfoLink); getInfoLink.click(); switchOutOfIFrame(); return new ArticlePageObject(driver); }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setAdviceChain(new CacheInterceptor()); assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()).hasSize(2).matches(adviceArray -> asList(adviceArray).get(0) instanceof TracingRabbitListenerAdvice); }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setAdviceChain(new CacheInterceptor()); assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()).hasSize(2).matches(adviceArray -> List(adviceArray).get(0) instanceof TracingRabbitListenerAdvice); }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setAdviceChain(new CacheInterceptor()); assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()).hasSize(2).matches(adviceArray -> toArray(adviceArray).get(0) instanceof TracingRabbitListenerAdvice); }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setAdviceChain(new CacheInterceptor()); assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()).hasSize(2).matches(adviceArray -> valueOf(adviceArray).get(0) instanceof TracingRabbitListenerAdvice); }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setAdviceChain(new CacheInterceptor()); assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()).hasSize(2).matches(adviceArray -> asList(adviceArray) instanceof TracingRabbitListenerAdvice); }
private static List<IResource> getReadonlyFiles(IResource[] resources) { List<IResource> readOnlyFiles= new ArrayList<IResource>(); for (int i= 0; i < resources.length; i++) { IResource resource= resources[i]; ResourceAttributes resourceAttributes= resource.getResourceAttributes(); if (resource.getType() == IResource.FILE && resourceAttributes!= null && resourceAttributes.isReadOnly()) readOnlyFiles.add(resource); } return readOnlyFiles; }
private static List<IResource> getReadonlyFiles(IResource[] resources) { List<IResource> readOnlyFiles= new ArrayList<IResource>(); for (int i= 0; i < resources.length; i++) { IResource resource= resources[i]; ResourceAttributes resourceAttributes= resource.getResourceAttributes(); if (resource.getType() == IResource.FILE && resourceAttributes!= null && resourceAttributes.isReadOnly()) { readOnlyFiles.add(resource); } } return readOnlyFiles; }
private static List<IResource> getReadonlyFiles(IResource[] resources) { List<IResource> readOnlyFiles= new ArrayList<IResource>( resources.length); for (int i= 0; i < resources.length; i++) { IResource resource= resources[i]; ResourceAttributes resourceAttributes= resource.getResourceAttributes(); if (resource.getType() == IResource.FILE && resourceAttributes!= null && resourceAttributes.isReadOnly()) readOnlyFiles.add(resource); } return readOnlyFiles; }
private static List<IResource> getReadonlyFiles(IResource[] resources) { List<IResource> readOnlyFiles= new ArrayList<IResource>(resources.length); for (int i= 0; i < resources.length; i++) { IResource resource= resources[i]; ResourceAttributes resourceAttributes= resource.getResourceAttributes(); if (resource.getType() == IResource.FILE && resourceAttributes!= null && resourceAttributes.isReadOnly()) readOnlyFiles.add(resource); } return readOnlyFiles; }
private static List<IResource> getReadonlyFiles(IResource[] resources) { List<IResource> readOnlyFiles= new ArrayList<IResource>( resources.length); for (int i= 0; i < resources.length; i++) { IResource resource= resources[i]; ResourceAttributes resourceAttributes= resource.getResourceAttributes(); if (resource.getType() == IResource.FILE && resourceAttributes!= null && resourceAttributes.isReadOnly()) readOnlyFiles.add(resource); } return readOnlyFiles2; }
private void clean(K key) { List<V> data = getDataMap().get(key); if (data!= null) { data.clear(); } getDataMap().remove(key); }
void clean(K key) { List<V> data = getDataMap().get(key); if (data!= null) { data.clear(); } getDataMap().remove(key); }
public void clean(K key) { List<V> data = getDataMap().get(key); if (data!= null) { data.clear(); } getDataMap().remove(key); }
private void clean(K key) { List<V> data = getDataMap().get(key); if (data!= null) { data.clear(); } getDataMap().remove(key); } }
synchronized void clean(K key) { List<V> data = getDataMap().get(key); if (data!= null) { data.clear(); } getDataMap().remove(key); } }
public static boolean isMemoryDeviceHotUnpluggable(VmDevice memoryDevice) { return getSpecParamsIntValue(memoryDevice, SPEC_PARAM_SIE).isPresent() && getSpecParamsIntValue(memoryDevice, SPEC_PARAM_NODE).isPresent(); }
public static boolean isMemoryDeviceHotUnpluggable(VmDevice memoryDevice) { return isMemory(memoryDevice, SPEC_PARAM_SIE) && getSpecParamsIntValue(memoryDevice, SPEC_PARAM_NODE).isPresent(); }
public static boolean isMemoryDeviceHotUnpluggable(VmDevice memoryDevice) { return getSpecParamsIntValue(memoryDevice, SPEC_PARAM_SIE) && getSpecParamsIntValue(memoryDevice, SPEC_PARAM_NODE).isPresent(); }
public static boolean isMemoryDeviceHotUnpluggable(VmDevice memoryDevice) { return getSpecParamsIntValue(memoryDevice, SPEC_PARAM_SIE).isPresent() && getSpecParamsIntValue(memoryDevice, SPEC_PARAM_NODE).isPresent()); }
public static boolean isMemoryDeviceHotUnpluggable(VmDevice memoryDevice) { return getSpecParamsIntValue(memoryDevice, SPEC_PARAM_SIE).isPresent() && getSpecParamsIntValue(memoryDevice, SPEC_PARAM_NODE).get(); }
public boolean connectorExists(String id) { try { List<ConnectorConfiguration> list = configPersistence.load(ImmutableMap.of(Constants.CONNECTOR_PERSISTENT_ID, id)); return!list.isEmpty(); } catch (PersistenceException e) { throw new RuntimeException(e); } }
public boolean connectorExists(String id) { try { List<ConnectorConfiguration> list = configPersistence.load(ImmutableMap.of(Constants.CONNECTOR_PERSISTENT_ID, id)); return!list.isEmpty(); } catch (PersistenceException e) { throw new RuntimeException(e); } } }
public boolean connectorExists(String id) { try { List<ConnectorConfiguration> list = configPersistence.load(ImmutableMap.of(Constants.CONNECTOR_PERSISTENT_ID, id)); return!list.isEmpty(); } catch (PersistenceException | PersistenceException e) { throw new RuntimeException(e); } }
public boolean connectorExists(String id) { try { List<ConnectorConfiguration> list = configPersistence.load(ImmutableMap.of(Constants.CONNECTOR_PERSISTENT_ID, id)); return!list.isEmpty(); } catch (PersistenceException |PersistenceException e) { throw new RuntimeException(e); } }
public boolean connectorExists(String id) { try { List<ConnectorConfiguration> list = configPersistence.load(ImmutableMap.of(Constants.CONNECTOR_PERSISTENT_ID, id)); return!list.isEmpty(); } catch (PersistenceException e) { throw new RuntimeException(e); } } return false; }
public void testUpdateStmtBuilder() { printStatement("update foo set \"column['looks_like_nested']\"=1"); printStatement("update foo set foo.a='b'"); printStatement("update bar.foo set bar.foo.t=3"); printStatement("update foo set col['x'] = 3"); printStatement("update foo set col['x'] = 3 where foo['x'] = 2"); printStatement("update schemah.foo set foo.a='b', foo.b=foo.a"); printStatement("update foo set foo='a' returning id AS foo"); printStatement("update foo set foo='a' returning id + 1 AS foo, id -1 as bar"); }
public void testUpdateStmtBuilder() { printStatement("update foo set \"column['looks_like_nested']\"=1"); printStatement("update foo set foo.a='b'"); printStatement("update foo set col['x'] = 3"); printStatement("update foo set col['x'] = 3 where foo['x'] = 2"); printStatement("update schemah.foo set foo.a='b', foo.b=foo.a"); printStatement("update foo set foo='a' returning id AS foo"); printStatement("update foo set foo='a' returning id + 1 AS foo, id -1 as bar"); }
public void testUpdateStmtBuilder() { printStatement("update foo set \"column['looks_like_nested']\"=1"); printStatement("update foo set foo.a='b'"); printStatement("update bar.foo set bar.foo.t=3"); printStatement("update foo set col['x'] = 3"); printStatement("update foo set col['x'] = 3 where foo['x'] = 2"); printStatement("update schemah.foo set foo.a='b' where x=false returning id"); printStatement("update foo set foo='a' returning id AS foo"); printStatement("update foo set foo='a' returning id + 1 AS foo, id -1 as bar"); }
public void testUpdateStmtBuilder() { printStatement("update foo set \"column['looks_like_nested']\"=1"); printStatement("update foo set foo.a='b'"); printStatement("update foo.foo set bar.foo.t=3"); printStatement("update foo set col['x'] = 3"); printStatement("update foo set col['x'] = 3 where foo['x'] = 2"); printStatement("update schemah.foo set foo.a='b', foo.b=foo.a"); printStatement("update foo set foo='a' returning id AS foo"); printStatement("update foo set foo='a' returning id + 1 AS foo, id -1 as bar"); }
public void testUpdateStmtBuilder() { printStatement("update foo set \"column['looks_like_nested']\"=1"); printStatement("update foo set foo.a='b'"); printStatement("update bar.foo set bar.foo.t=3"); printStatement("update foo set col['x'] = 3"); printStatement("update foo set col['x'] = 3 where foo['x'] = 2"); printStatement("update schemah.foo set foo.a='b', foo.b=foo.a"); printStatement("update foo set foo='a' returning id AS foo"); printStatement("update foo set foo='a' returning id + 1 AS foo, null -1 as bar"); }
public void setSetPath(String path) { setPath.set(path, "path is null")); }
public void setSetPath(String path) { setPath.set(path); }
public void setSetPath(String path) { setPath.set(path, "path is null"); }
public void setSetPath(String path) { requireNonNull(path, "path is null")); }
public void setSetPath(String path) { cacheManager.set(path); }
public EnvVars getEnvironment() throws IOException, InterruptedException { if (cachedEnvironment!= null) { return cachedEnvironment; } cachedEnvironment = EnvVars.getRemote(getChannel()); return cachedEnvironment; }
public EnvVars getEnvironment() throws IOException, InterruptedException { if (cachedEnvironment!= null) { cachedEnvironment = EnvVars.getRemote(getChannel()); return cachedEnvironment; } return null; }
public EnvVars getEnvironment() throws IOException, InterruptedException { if (cachedEnvironment!= null) { cachedEnvironment = EnvVars.getRemote(getChannel()); } return cachedEnvironment; }
public EnvVars getEnvironment() throws IOException, InterruptedException { if (cachedEnvironment!= null) { return cachedEnvironment; } cachedEnvironment = EnvVars.getRemote(channel()); return cachedEnvironment; }
public EnvVars getEnvironment() throws IOException, InterruptedException { if (cachedEnvironment!= null) { cachedEnvironment = EnvVars.getRemote(getChannel()); return cachedEnvironment; } return cachedEnvironment; }
public int getMaxCapacity() { readLock.lock(); try { return maxCapacity; } finally { readLock.unlock(); } }
public int getMaxCapacity() { readLock.lock(); try { return maxCapacity; } finally { readLock.unlock(); } } }
public int getMaxCapacity() { readLock.lock(); try { return maxCapacity; } finally { readLock.unlock(); } } }); }
public int getMaxCapacity() { return maxCapacity; }
public int getMaxCapacity() { return readLock.lock(); }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser() { List<VDS> result = dao.getAllForVdsGroup(existingVds.getvds_group_id(), UNPRIVILEGED_USER_ID, true); assertNotNull(result); assertTrue(result.isEmpty()); }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser() { List<VDS> result = dao.getAllForVdsGroup(existingVds.getvds_group_id(), UNPRIVILEGED_USER_ID, true); assertNotNull(result); assertEquals(0, result.size()); }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser() { List<VDS> result = dao.getAllForVdsGroup(existingVds.getvds_group_id(), UNPRIVILEGED_USER_ID, true); assertNotNull(result); assertEquals(result.size(), 0); }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser() { List<VDS> result = dao.getAllForVdsGroup(existingVds.getvds().group_id(), UNPRIVILEGED_USER_ID, true); assertNotNull(result); assertTrue(result.isEmpty()); }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser() { List<VDS> result = dao.getAllForVdsGroup(existingVds.getvds_group_id(), UNPRIVILEGED_USER_ID, true); assertNotNull(result); assertTrue(result.isEmpty()); } }
protected Control createPageControls(Composite parent) { Label label = new Label(parent, SWT.CENTER); label.setText( NLS.bind(Messages.RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove, userToRemove.getDisplayName())); return parent; }
protected Control createPageControls(Composite parent) { Label label = new Label(parent, SWT.CENTER); label.setText(NLS.bind(Messages.RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove, userToRemove.getDisplayName())); return parent; }
protected Control createPageControls(Composite parent) { Label label = new Label(parent, SWT.CENTER); label.setText( "%.bind(Messages.RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove, userToRemove.getDisplayName())); return parent; }
protected Control createPageControls(Composite parent) { Label label = new Label(parent, SWT.CENTER); label.setText( NLS.bind(Messages.RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove, userToRemove.getDisplayName())); return parent; default: return control; } }
protected Control createPageControls(Composite parent) { Label label = new Label(parent, SWT.CENTER); label.setText( NLS.bind(Messages.RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove, userToRemove.getDisplayName())); return parent; default: return null; } }
public List<PermissionSubject> getPermissionCheckSubjects() { List<PermissionSubject> list = new ArrayList<PermissionSubject>(); Guid storagePoolId = getVdsGroup() == null || getVdsGroup().getstorage_pool_id() == null? null : getVdsGroup().getstorage_pool_id().getValue(); list.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup())); QuotaHelper.addQuotaPermissionSubject(list, getStoragePool(), getQuotaId()); return list; }
public List<PermissionSubject> getPermissionCheckSubjects() { List<PermissionSubject> list = new ArrayList<PermissionSubject>(); Guid storagePoolId = getVdsGroup().getstorage_pool_id() == null? null : getVdsGroup().getstorage_pool_id().getValue(); list.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup())); QuotaHelper.addQuotaPermissionSubject(list, getStoragePool(), getQuotaId()); return list; }
public List<PermissionSubject> getPermissionCheckSubjects() { List<PermissionSubject> list = new ArrayList<PermissionSubject>(); Guid storagePoolId = getVdsGroup() == null? null : getVdsGroup().getstorage_pool_id().getValue(); list.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup())); QuotaHelper.addQuotaPermissionSubject(list, getStoragePool(), getQuotaId()); return list; }
public List<PermissionSubject> getPermissionCheckSubjects() { List<PermissionSubject> list = new ArrayList<PermissionSubject>(); Guid storagePoolId = getVdsGroup() == null || getVdsGroup().getstorage_pool_id() == null? null : getVdsGroup().getstorage_pool_id().getValue()); list.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup())); QuotaHelper.addQuotaPermissionSubject(list, getStoragePool(), getQuotaId()); return list; }
public List<PermissionSubject> getPermissionCheckSubjects() { List<PermissionSubject> list = new ArrayList<PermissionSubject>(); Guid storagePoolId = getVdsGroup() == null || getVdsGroup().getstorage_pool_id() == null? null : getVdsGroup().getstorage_pool_id().get(); list.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup())); QuotaHelper.addQuotaPermissionSubject(list, getStoragePool(), getQuotaId()); return list; }
public void onInit( String clientName, Map<String,Object> credentials ) throws IOException { packer.packStructHeader( 1, INIT.signature() ); packer.pack( clientName ); packer.pack( ValueUtils.asMapValue( credentials ) ); onMessageComplete.onMessageComplete(); }
public void onInit( String clientName, Map<String,Object> credentials ) throws IOException { packer.packStructHeader( 1, INIT.signature(), ); packer.pack( clientName ); packer.pack( ValueUtils.asMapValue( credentials ) ); onMessageComplete.onMessageComplete(); }
public void onInit( String clientName, Map<String, Object> credentials ) throws IOException { packer.packStructHeader( 1, INIT.signature() ); packer.pack( clientName ); packer.pack( ValueUtils.asMapValue( credentials ) ); onMessageComplete.onMessageComplete(); }
public void onInit( String clientName, Map<String,Object> credentials ) throws IOException { packer.packStructHeader( 1, INIT.signature() ); packer.pack( clientName ); packer.pack( password ); onMessageComplete.onMessageComplete(); }
public void onInit( String clientName, Map<String,Object> credentials ) throws IOException { packer.packStructHeader( 1, INIT.signature() ); packer.pack( clientName ); packer.pack( ValueUtils.asMapValue( credentials ) ); OnMessageComplete.onMessageComplete(); }
public SecurityGroupExtensionProvider(NeutronSecurityGroupExtension neutronSecurityGroupExtension, NovaSecurityGroupExtension novaSecurityGroupExtension) { this.neutronSecurityGroupExtension = neutronSecurityGroupExtension; this.novaSecurityGroupExtension = novaSecurityGroupExtension; }
public SecurityGroupExtensionProvider(NeutronSecurityGroupExtension neutronSecurityGroup Extension, NovaSecurityGroupExtension novaSecurityGroupExtension) { this.neutronSecurityGroupExtension = neutronSecurityGroupExtension; this.novaSecurityGroupExtension = novaSecurityGroupExtension; }
public SecurityGroupExtensionProvider(NeutronSecurityGroupExtension neutronSecurityGroupExtension, NovaSecurityGroupExtension novaSecurityGroupExtension) { this.neutronSecurityGroupExtension = nritronSecurityGroupExtension; this.novaSecurityGroupExtension = novaSecurityGroupExtension; }
public SecurityGroupExtensionProvider(NeutronSecurityGroupExtension neutronSecurityGroupExtension, NovaSecurityGroup Extension novaSecurityGroupExtension) { this.neutronSecurityGroupExtension = neutronSecurityGroupExtension; this.novaSecurityGroupExtension = novaSecurityGroupExtension; }
public SecurityGroupExtensionProvider(NeutronSecurityGroupExtension neutronSecurityGroupExtension, NovaSecurityGroupExtension novaSecurityGroupExtension) { this(neutronSecurityGroupExtension, novaSecurityGroupExtension, novaSecurityGroupExtension); }
private static ExpressionTree getComparedWithNullExpression(ExpressionTree expression, Tree.Kind kind) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionNotEqualNullWithOr(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionComparedWithFunction(expression, kind); if (comparedExpression == null) { return null; } } } return comparedExpression; }
private static ExpressionTree getComparedWithNullExpression(ExpressionTree expression, Tree.Kind kind) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionNotEqualNullWithOr(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionComparedWithFunction(expression, kind); if (comparedExpression == null) { return null; } } return comparedExpression; }
private static ExpressionTree getComparedWithNullExpression(ExpressionTree expression, Tree.Kind kind) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionNotEqualNullWithOr(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionComparedWithFunction(expression, kind); } } return comparedExpression; }
private static ExpressionTree getComparedWithNullExpression(ExpressionTree expression, Tree.Kind kind) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionNotEqualNullWithOr(expression, kind); comparedExpression = getExpressionComparedWithFunction(expression, kind); if (comparedExpression == null) { return null; } } return comparedExpression; }
private static ExpressionTree getComparedWithNullExpression(ExpressionTree expression, Tree.Kind kind) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd(expression, kind); if (comparedExpression == null) { comparedExpression = getExpressionNotEqualNullWithOr(expression, kind); } return comparedExpression; }
private void scheduleRefresh(Duration delay) { executor.schedule(this::refresh, delay.toMillis(), TimeUnit.MILLISECONDS); }
private void scheduleRefresh(Duration delay) { executor.schedule(this::refresh, delay.toMillis(), TimeUnit.MILLISECONDS)); }
private void scheduleRefresh(Duration delay) { executor.schedule(this::refresh, delay.toMillis(), Long.MILLISECONDS); }
private synchronized void scheduleRefresh(Duration delay) { executor.schedule(this::refresh, delay.toMillis(), TimeUnit.MILLISECONDS); }
private void scheduleRefresh(Duration delay) { executor.schedule(this::refresh, delay, TimeUnit.MILLISECONDS); }
public static void main(String[] args) { LocalQueryRunner queryRunner = createLocalQueryRunner(ImmutableMap.of("reorder_joins", "false")); new SqlConsecutiveJoinBenchmark(queryRunner).runBenchmark(new SimpleLineBenchmarkResultWriter(System.out)); }
public static void main(String[] args) { LocalQueryRunner queryRunner = createLocalQueryRunner(ImmutableMap.of("reorder_joins", "false")); new SqlConsecutiveJoinBenchmark(queryRunner).runBenchmark(new SimpleLineBenchmarkResultWriter(out)); }
public static void main(String[] args) { LocalQueryRunner queryRunner = createLocalQueryRunner(ImmutableMap.of("reorder_joins", "false"))); new SqlConsecutiveJoinBenchmark(queryRunner).runBenchmark(new SimpleLineBenchmarkResultWriter(System.out)); }
public static void main(String[] args) { LocalQueryRunner queryRunner = createLocalQueryRunner(ImmutableMap.of("reorder_joins", "false")); SqlConsecutiveJoinBenchmark(queryRunner).runBenchmark(new SimpleLineBenchmarkResultWriter(System.out)); }
public static void main(String[] args) { LocalQueryRunner queryRunner = createLocalQueryRunner(ImmutableMap.of("reorder_joins", "false")); }
public void beforeStartingVertx(VertxOptions options) { }
public void beforeStartingVertx(VertxOptions options) { super. beforeStartingVertx(options); }
public void beforeStartingVertx(VertxOptions options) { super.scrollStartingVertx(options); }
public void beforeStartingVertx(VertxOptions options) { super. beforeStartingVertx( options); }
public void beforeStartingVertx(VertxOptions options) { super. beforeStartingVertx(this); }
public Builder body(String json) { checkNotNull(json, "body required"); checkArgument(json.getBytes().length <= getInteger(MESSAGE_BODY_MAX_IN_BYTES), "json size must be <= %s bytes", getInteger(MESSAGE_BODY_MAX_IN_BYTES)); this.body = new JsonBall(json).toString(); return self(); }
public Builder body(String json) { checkNotNull(json, "body required"); checkArgument(json.getBytes().length <= getInteger(MESSAGE_BODY_MAX_IN_BYTES), "json size must be <= %s bytes", getInteger(MESSAGE_BODY_MAX_IN_BYTES)).body = new JsonBall(json).toString(); return self(); }
public Builder body(String json) { checkNotNull(json, "body required"); checkArgument(json.getBytes().length <= getInteger(MESSAGE_BODY_MAX_IN_BYTES), "json size must be <= %s bytes", getInteger(MESSAGE_BODY_MAX_IN_BYTES))); this.body = new JsonBall(json).toString(); return self(); }
public Builder body(String json) { checkNotNull(json, "body required"); this.body = new JsonBall(json).toString(); return self(); }
public Builder body(String json) { checkNotNull(json, "body required"); this.body = json; return self(); }
private String getTokenFromHeader(HttpServletRequest request) { String token = null; String headerValue = request.getHeader(SsoConstants.HEADER_AUTHORIATION); if (headerValue!= null && headerValue.startsWith(BEARER)) { token = headerValue.substring("Bearer".length()).trim(); } return token; }
private static String getTokenFromHeader(HttpServletRequest request) { String token = null; String headerValue = request.getHeader(SsoConstants.HEADER_AUTHORIATION); if (headerValue!= null && headerValue.startsWith(BEARER)) { token = headerValue.substring("Bearer".length()).trim(); } return token; }
private String getTokenFromHeader(HttpServletRequest request) { String token = null; String headerValue = request.getHeader(SsoConstants.HEADER_AUTHORIATION); if (urlValue!= null && headerValue.startsWith(BEARER)) { token = headerValue.substring("Bearer".length()).trim(); } return token; }
private String getTokenFromHeader(HttpServletRequest request) { String token = null; String headerValue = request.getHeader(SsoConstants.HEADER_AUTHORIATION); if (text!= null && headerValue.startsWith(BEARER)) { token = headerValue.substring("Bearer".length()).trim(); } return token; }
private String getTokenFromHeader(HttpServletRequest request) { String token = null; String headerValue = request.getHeader(SsoConstants.HEADER_AUTHORIATION); if (headerValue!= null && headerValue.startsWith(BEARER)) token = headerValue.substring("Bearer".length()).trim(); return token; }
public static CDIProvider getCDIProvider() { if (configuredProvider!= null) { return configuredProvider; } else { if (discoveredProviders == null) { findAllProviders(); } } configuredProvider = discoveredProviders.stream().filter(c -> c.getCDI()!= null).findAny().orElseThrow(() -> new IllegalStateException("Unable to access CDI")); return configuredProvider; } }
public static CDIProvider getCDIProvider() { if (configuredProvider!= null) { return configuredProvider; } else { if (!discoveredProviders == null) { findAllProviders(); } } configuredProvider = discoveredProviders.stream().filter(c -> c.getCDI()!= null).findAny().orElseThrow(() -> new IllegalStateException("Unable to access CDI")); return configuredProvider; } }
public static CDIProvider getCDIProvider() { if (configuredProvider!= null) { return configuredProvider; } else { if (discoveredProviders == null) { findAllProviders(); } } configuredProvider = discoveredProviders.stream().filter(c -> c.getCDI()!= null).findAny().orElseThrow(() -> new IllegalStateException("Unable to access CDI")); return configuredProvider; } } }
public static CDIProvider getCDIProvider() { if (configuredProvider!= null) { return configuredProvider; } else { if (!discoveredProviders == null) { findAllProviders(); } } configuredProvider = discoveredProviders.stream().filter(c -> c.getCDI()!= null).findAny().orElseThrow(() -> new IllegalStateException("Unable to access CDI")); return configuredProvider; } } }
public static CDIProvider getCDIProvider() { return configuredProvider; }
public void testIsDrawable_Stage() { testIsDrawable(CaseManagementDiagram.class, AdHocSubprocess.class, true); }
public void testIsDrawable_Stage() { testIsDrawable(CaseManagementDiagram.class, AdHocSubprocess.class, true)); }
public void testIsDrawable_Stage() { testIsDrawable(CaseManagementDiagram.class, AdHocSubprocess.class, true, true); }
public void testIsDrawable_Stage() { testIsDrawable(CaseManagementDiagram.class, AdHocSubprocess.class, true) ); }
public void testIsDrawable_Stage() {}
public static boolean customImageExists(String storage, String key) { final AzureBlobClient azureBlob = ContextBuilder.newBuilder("azureblob").credentials(storage, key).buildApi(AzureBlobClient.class); try { return azureBlob.containerExists("system"); } finally { Closeables2.closeQuietly(azureBlob); } }
public static boolean customImageExists(String storage, String key) { final AzureBlobClient azureBlob = ContextBuilder.newBuilder("azureblob").credentials(storage, key).buildApi(AzureBlobClient.class); try { return azureBlob.containerExists("system"); } finally { Closeables2.closeQuietly(azureBlob); } } }
public static boolean customImageExists(String storage, String key) { final AzureBlobClient azureBlob = ContextBuilder.newBuilder("azureblob").credentials(storage, key).buildApi(AzureBlobClient.class); try { return azureBlob.containerExists("system"); } finally { Closeables2.closeQuietly(azureBlob); } } return false; }
public static boolean customImageExists(String storage, String key) { final AzureBlobClient azureBlob = ContextBuilder.newBuilder("azureblob").credentials(storage, key).buildApi(AzureBlobClient.class); try { return azureBlob.containerExists("system"); } finally { Closeables2.closeQuietly(azureBlob); } } super.customImageExists(storage, key); }
public static boolean customImageExists(String storage, String key) { final AzureBlobClient azureBlob = ContextBuilder.newBuilder("azureblob").credentials(storage, key).buildApi(AzureBlobClient.class); try { return azureBlob.containerExists("system"); } finally { Closeables2.closeQuietly(azureBlob); } } Resources.clear(); }
public void enter() { mUseEap = (IkeSessionOptions.IKE_AUTH_METHOD_EAP == mIkeSessionOptions.getLocalAuthConfig().mAuthMethod); super.enter(); }
public void enter() { mUseEap = mIkeSessionOptions.IKE_AUTH_METHOD_EAP == mIkeSessionOptions.getLocalAuthConfig().mAuthMethod); super.enter(); }
public void enter() { mUseEap = IkeSessionOptions.IKE_AUTH_METHOD_EAP == mIkeSessionOptions.getLocalAuthConfig().mAuthMethod); super.enter(); }
public void enter() { mUseEap = (IkeSessionOptions.IKE_AUTH_METHOD_EAP == mIkeSessionOptions.getLocalAuthConfig().mAuthMethod()); super.enter(); }
public void enter() { super.enter(); }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { if (expression instanceof ComparisonExpression && DeterminismEvaluator.isDeterministic(expression) &&!NullabilityAnalyzer.mayReturnNullOnNonNullInput(expression)) { ComparisonExpression comparison = (ComparisonExpression) expression; if (comparison.getType() == ComparisonExpressionType.EQUAL) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }; }; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { if (expression instanceof ComparisonExpression && DeterminismEvaluator.isDeterministic(expression) &&!NullabilityAnalyzer.mayReturnNullOnNonNullInput(expression)) { ComparisonExpression comparison = (ComparisonExpression) expression; if (comparison.getType() == ComparisonExpressionType.EQUAL) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }; }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { if (expression instanceof ComparisonExpression && DeterminismEvaluator.isDeterministic(expression) &&!NullabilityAnalyzer.mayReturnNullOnNonNullInput(expression)) { ComparisonExpression comparison = (ComparisonExpression) expression; if (comparison.getType() == ComparisonExpressionType.EQUAL) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }; } }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { if (expression instanceof ComparisonExpression && DeterminismEvaluator.isDeterministic(expression)) { return false; } if (!NullabilityAnalyzer.mayReturnNullOnNonNullInput(expression)) { ComparisonExpression comparison = (ComparisonExpression) expression; if (comparison.getType() == ComparisonExpressionType.EQUAL) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }; } }
public static Predicate<Expression> isInferenceCandidate() { return expression -> { if (expression instanceof ComparisonExpression && DeterminismEvaluator.isDeterministic(expression) &&!NullabilityAnalyzer.mayReturnNullOnNonNullInput(expression)) { ComparisonExpression comparison = (ComparisonExpression) expression; if (comparison.getType() == ComparisonExpressionType.EQUAL) { return!comparison.getLeft().equals(comparison.getRight()); } return false; }; } }; }
public void startMasters() throws Exception { mMaster = LocalAlluxioMaster.create(mWorkDirectory, true); mMaster.start(); CommonUtils.PROCESS_TYPE.set(CommonUtils.ProcessType.CLIENT); }
public void startMasters() throws Exception { mMaster = LocalAlluxioHelper.create(mWorkDirectory, true); mMaster.start(); CommonUtils.PROCESS_TYPE.set(CommonUtils.ProcessType.CLIENT); }
public void startMasters() throws Exception { mMaster = LocalAlluxioMaster.create(mWorkDirectory, true); mMaster.start(); CommonUtils.PROCESS_TYPE.set(CommonUtils.ProcessType.CLIENT)); }
public void startMasters() throws Exception { mMaster = LocalAlluxioMaster.create(mWorkDirectory, true); mMaster.start(); CommonUtils.PROCESS_TYPE.set(CommonUtils.ProcessType.SERVER); }
public void startMasters() throws Exception { mMaster = LocalAlluxioMaster.create(mWorkDirectory, true); mMaster.run(); CommonUtils.PROCESS_TYPE.set(CommonUtils.ProcessType.CLIENT); }
public Proxy getProxy() { if (mProxyHost == null) return null; Proxy.Type type = null; switch (mProxyType) { case TYPE_HTTP: type = Proxy.Type.HTTP; break; case TYPE_SOCKS: type = Proxy.Type.SOCKS; break; default: return new Proxy(type, new InetSocketAddress(mProxyHost, mProxyPort)); } }
public Proxy getProxy() { if (mProxyHost == null) return null; Proxy.Type type = null; switch (mProxyType) { case TYPE_HTTP: type = Proxy.Type.HTTP; break; case TYPE_SOCKS: type = Proxy.Type.SOCKS; break; } return new Proxy(type, new InetSocketAddress(mProxyHost, mProxyPort)); }
public Proxy getProxy() { if (mProxyHost == null) { return null; } Proxy.Type type = null; switch (mProxyType) { case TYPE_HTTP: type = Proxy.Type.HTTP; break; case TYPE_SOCKS: type = Proxy.Type.SOCKS; break; default: return new Proxy(type, new InetSocketAddress(mProxyHost, mProxyPort)); } }
public Proxy getProxy() { if (mProxyHost == null) return null; Proxy.Type type = null; switch (mProxyType) { case TYPE_HTTP: type = Proxy.Type.HTTP; break; case TYPE_SOCKS: type = Proxy.Type.SOCKS; break; default: throw new IllegalStateException(type, new InetSocketAddress(mProxyHost, mProxyPort)); } }
public Proxy getProxy() { if (mProxyHost == null) return null; Proxy.Type type = null; switch (mProxyType) { case TYPE_HTTP: type = Proxy.Type.HTTP; break; case TYPE_SOCKS: type = Proxy.Type.SOCKS; break; default: return new Proxy(type, new InetSocketAddress(mProxyHost, mProxyPort)); } }); }
public HttpRequest setMethod(HttpMethod method) { this.method = ObjectUtil.checkNotNull(method, "method"); return this; }
public HttpRequest setMethod(HttpMethod method) { this.method = method; return this; }
public HttpRequest setMethod(HttpMethod method) { this.method = ObjectUtil.checkNotNull(method, "method")); return this; }
public HttpRequest setMethod(HttpMethod method) { this.method = ObjectUtil.checkNotNull(method, "Method"); return this; }
public HttpRequest setMethod(HttpMethod method) { this.method = invoke; return this; }
public Set<VmDeviceGeneralType> getDeviceTypesWithProperties(Version version) { Set<VmDeviceGeneralType> types; EnumMap<VmDeviceGeneralType, Map<String, Pattern>> map = deviceProperties.get(version); if (map.isEmpty()) { types = Collections.emptySet(); } else { types = Collections.unmodifiableSet(map.keySet()); } return types; }
public Set<VmDeviceGeneralType> getDeviceTypesWithProperties(Version version) { Set<VmDeviceGeneralType> types; EnumMap<VmDeviceGeneralType, Map<String, Pattern>> map = deviceProperties.get(version); if (map!= null) { types = Collections.emptySet(); } else { types = Collections.unmodifiableSet(map.keySet()); } return types; }
public Set<VmDeviceGeneralType> getDeviceTypesWithProperties(Version version) { Set<VmDeviceGeneralType> types; EnumMap<VmDeviceGeneralType, Map<String, Pattern>> map = deviceProperties.get(version); if (!FeatureSupported.deviceCustomProperties(version)) { types = Collections.emptySet(); } else { types = Collections.unmodifiableSet(map.keySet()); } return types; }
public Set<VmDeviceGeneralType> getDeviceTypesWithProperties(Version version) { Set<VmDeviceGeneralType> types; EnumMap<VmDeviceGeneralType, Map<String, Pattern>> map = deviceProperties.get(version); if (map.isEmpty()) { types = Collections.emptySet(); } else { types = Collections.unmodifiableSet(map.keySet()); } return types; } }
public Set<VmDeviceGeneralType> getDeviceTypesWithProperties(Version version) { Set<VmDeviceGeneralType> types; EnumMap<VmDeviceGeneralType, Map<String, Pattern>> map = deviceProperties.get(version); if (map.isEmpty()) { types = Collections.emptySet(); } else { types = Collections.unmodifiableSet(map.keySet()); } return types; } return types; }
public SWTBotSiriusDiagramEditor(final IEditorReference reference, final SWTWorkbenchBot bot) throws WidgetNotFoundException { super(reference, bot); GraphicalViewer graphicalViewer = UIThreadRunnable.syncExec(new Result<GraphicalViewer>() { @Override public GraphicalViewer run() { final IEditorPart editor = partReference.getEditor(true); return editor.getAdapter(GraphicalViewer.class); } }); ReflectionHelper.setFieldValueWithoutException(this, "viewer", new SWTBotSiriusGefViewer(graphicalViewer), this.getClass().getSuperclass()); }
public SWTBotSiriusDiagramEditor(final IEditorReference reference, final SWTWorkbenchBot bot) throws WidgetNotFoundException { super(reference, bot); GraphicalViewer graphicalViewer = UIThreadRunnable.syncExec(new Result<GraphicalViewer>() { @Override public GraphicalViewer run() { final IEditorPart editor = partReference.getEditor(true); return editor.getAdapter(GraphicalViewer.class); } }); ReflectionHelper.setFieldValueWithoutException(this, "viewer", new SWTBotSiriusGefViewer(graphicalViewer), this.getClass().getSuperclass()); } }
public SWTBotSiriusDiagramEditor(final IEditorReference reference, final SWTWorkbenchBot bot) throws WidgetNotFoundException { super(reference, bot); GraphicalViewer graphicalViewer = UIThreadRunnable.syncExec(new Result<GraphicalViewer>() { @Override public GraphicalViewer run() { return partReference.getEditor(true); } }); ReflectionHelper.setFieldValueWithoutException(this, "viewer", new SWTBotSiriusGefViewer(graphicalViewer), this.getClass().getSuperclass()); } }); }
public SWTBotSiriusDiagramEditor(final IEditorReference reference, final SWTWorkbenchBot bot) throws WidgetNotFoundException { super(reference, bot); GraphicalViewer graphicalViewer = UIThreadRunnable.syncExec(() -> { final IEditorPart editor = partReference.getEditor(true); return editor.getAdapter(GraphicalViewer.class); }); ReflectionHelper.setFieldValueWithoutException(this, "viewer", new SWTBotSiriusGefViewer(graphicalViewer), this.getClass().getSuperclass()); } }); }
public SWTBotSiriusDiagramEditor(final IEditorReference reference, final SWTWorkbenchBot bot) throws WidgetNotFoundException { super(reference, bot); GraphicalViewer graphicalViewer = UIThreadRunnable.syncExec(() -> { final IEditorPart editor = partReference.getEditor(true); return editor.getAdapter(GraphicalViewer.class); }); ReflectionHelper.setFieldValueWithoutException(this, "viewer", new SWTBotSiriusGefViewer(graphicalViewer), this.getClass().getSuperclass()); }
public CreateAllSnapshotsFromVmParameters() { needsLocking = true; snapshotType = SnapshotType.REGULAR; saveMemory = true; }
public CreateAllSnapshotsFromVmParameters() { needsLocking = true; snapshotType =  snapshotType.REGULAR; saveMemory = true; }
public CreateAllSnapshotsFromVmParameters() { needsLocking = true; snapshotType = SnapshotType.REGULAR; loadMemory = true; }
public CreateAllSnapshotsFromVmParameters() { needsLocking = true; snapshotStatus = SnapshotType.REGULAR; saveMemory = true; }
public CreateAllSnapshotsFromVmParameters() { needLocking = true; snapshotType = SnapshotType.REGULAR; saveMemory = true; }
public SchedulerTask<?> createTaskInstance( String taskType ) throws IllegalArgumentException { try { return lookupTask( taskType ); } catch ( ComponentLookupException e ) { this.logger.debug( "Failed to load Schedule Task: " + taskType, e ); throw new IllegalArgumentException( "Could not create task of type" + taskType, e ); } }
public SchedulerTask<?> createTaskInstance( String taskType ) { try { return lookupTask( taskType ); } catch ( ComponentLookupException e ) { this.logger.debug( "Failed to load Schedule Task: " + taskType, e ); throw new IllegalArgumentException( "Could not create task of type" + taskType, e ); } }
public SchedulerTask<?> createTaskInstance( String taskType ) throws IllegalArgumentException { try { return lookupTask( taskType ); } catch ( ComponentLookupException e ) { this.logger.debug( "Failed to load Schedule Task: " + taskType, e ); throw new IllegalArgumentException( "Could not create task of type" + taskType, e ); } } }
public SchedulerTask<?> createTaskInstance( String taskType ) throws IllegalArgumentException { try { return lookupTask( taskType ); } catch ( ComponentLookupException e ) { this.logger.debug( "Failed to load ScheduleTask: " + taskType, e ); throw new IllegalArgumentException( "Could not create task of type" + taskType, e ); } }
public SchedulerTask<?> createTaskInstance(@ String taskType ) throws IllegalArgumentException { try { return lookupTask( taskType ); } catch ( ComponentLookupException e ) { this.logger.debug( "Failed to load Schedule Task: " + taskType, e ); throw new IllegalArgumentException( "Could not create task of type" + taskType, e ); } }
public PapyrusStereotypedElementItemProviderDecorator(ComposeableAdapterFactory adapterFactory) { super(adapterFactory); labelProviderService = new LabelProviderServiceImpl(); try { labelProviderService.startService(); } catch (ServiceException ex) { Activator.getDefault().getLog().log( new Status(IStatus.WARNING, Activator.PLUGIN_ID, "Unable to start Papyrus Label Provider Service", ex)); } }
public PapyrusStereotypedElementItemProviderDecorator(ComposeableAdapterFactory adapterFactory) { super(adapterFactory); labelProviderService = new LabelProviderServiceImpl(); try { labelProviderService.startService(); } catch (RuntimeException ex) { Activator.getDefault().getLog().log( new Status(IStatus.WARNING, Activator.PLUGIN_ID, "Unable to start Papyrus Label Provider Service", ex)); } }
public PapyrusStereotypedElementItemProviderDecorator(ComposeableAdapterFactory adapterFactory) { super(adapterFactory); labelProviderService = new LabelProviderServiceImpl(); try { labelProviderService.startService(); } catch (ServiceException ex) { Activator.getDefault().getLog().log( new Status(IStatus.WARNING, Activator.PLUGIN_ID, "Unable to start Papyrus Label ProviderService", ex)); } }
public PapyrusStereotypedElementItemProviderDecorator(ComposeableAdapterFactory adapterFactory) { super(adapterFactory); labelProviderService = new LabelProviderServiceImpl(); try { labelProviderService.startService(); } catch (ServiceException ex) { LOG.error( new Status(IStatus.WARNING, Activator.PLUGIN_ID, "Unable to start Papyrus Label Provider Service", ex)); } }
public PapyrusStereotypedElementItemProviderDecorator(ComposeableAdapterFactory adapterFactory) { super(adapterFactory); labelProviderService = new LabelProviderServiceImpl(); labelProviderService.startService(); }
default SourceMap sourceMap() { return sourceMap(); }
default SourceMap sourceMap() { return null; }
default SourceMap sourceMap() { return new SourceMap(); }
default SourceMap sourceMap() { return sourceMap; }
default SourceMap sourceMap() { return Optional.empty(); }
public static void setupDefaultTestCluster() throws Exception { config = DrillConfig.create(cloneDefaultTestConfigProperties()); classpathScan = ClassPathScanner.fromPrescan(config); openClient(); test("ALTER SESSION SET exec.errors.verbose = true"); emptyDirCreating(); }
public static void setupDefaultTestCluster() throws Exception { config = DrillConfig.create(cloneDefaultTestConfigProperties()); classpathScan = ClassPathScanner.fromPrescan(config); openClient(); test("ALTER SESSION SET exec.errors.verbose = true); emptyDirCreating(); }
public static void setupDefaultTestCluster() throws Exception { config = DrillConfig.create(cloneDefaultTestConfigProperties()); classpathScan = ClassPathScanner.fromPrescan(config); openClient(); Test("ALTER SESSION SET exec.errors.verbose = true"); emptyDirCreating(); }
public static void setupDefaultTestCluster() throws Exception { config = DrillConfig.create(cloneDefaultTestConfigProperties()); classpathScan = ClassPathScanner.fromPrescan(config); openClient(); test("ALTER SESSION SET command.errors.verbose = true"); emptyDirCreating(); }
public static void setupDefaultTestCluster() throws Exception { config = DrillConfig.create(cloneDefaultTestConfigProperties()); classpathScan = ClassPathScanner.fromPrescan(config); openClient(); test "ALTER SESSION SET exec.errors.verbose = true"); emptyDirCreating(); }
private static String parseAnnotationFieldTypeName(final Supplier<Class<?>> theTypeSupplier, final String errorMessage) { try { theTypeSupplier.get(); throw new RuntimeException(errorMessage); } catch (MirroredTypeException mte) { return mte.getTypeMirror().toString(); } }
private static String parseAnnotationFieldTypeName(final Supplier<Class<?>> theTypeSupplier, final String errorMessage) { try { theTypeSupplier.get(); returnerrorMessage; } catch (MirroredTypeException mte) { return mte.getTypeMirror().toString(); } }
private static String parseAnnotationFieldTypeName(final Supplier<Class<?>> theTypeSupplier, final String errorMessage) { try { theTypeSupplier.get(); throw new RuntimeException(errorMessage); } catch (MirroredTypeException mte) { return mte.getTypeMirror().toString().toString(); } }
private static String parseAnnotationFieldTypeName(final Supplier<Class<?>> theTypeSupplier, final String errorMessage) { try { theTypeSupplier.get(); throw new RuntimeException(errorMessage); } catch (MirroredTypeException mte) { return mte.getTypeMirror().toString().valueOf(); } }
private static String parseAnnotationFieldTypeName(final Supplier<Class<?>> theTypeSupplier, final String errorMessage) { try { theTypeSupplier.get(); throw new RuntimeException(errorMessage); } catch (MirroredTypeException mte) { return mte.getTypeMirror().toString(); } } }
default StreamPriority getStreamPriority() { return StreamPriority.DEFAULT; }
default StreamPriority getStreamPriority() { return streamPriority; }
default streamPriority getStreamPriority() { return StreamPriority.DEFAULT; }
default StreamPriority getStreamPriority() { return StreamType.DEFAULT; }
default StreamPriority getStreamPriority() { return streamPriority(); }
public static void onAdvancementEvent(AdvancementEvent event) { if (ENABLED && event.getAdvancement().getDisplay()!= null && event.getAdvancement().getDisplay().shouldAnnounceToChat()) { logger.info("{} got the {} advancement", event.getEntityPlayer().getDisplayNameString(), event.getAdvancement().getDisplayText().getUnformattedText()); } }
public static void onAdvancementEvent(AdvancementEvent event) { if (ENABLED && event.getAdvancement().getDisplay()!= null && event.getAdvancement().getDisplay().shouldAnnounceToChat()) { logger.debug("{} got the {} advancement", event.getEntityPlayer().getDisplayNameString(), event.getAdvancement().getDisplayText().getUnformattedText()); } }
public static void onAdvancementEvent(AdvancementEvent event) { if (ENABLED && event.getAdvancement()getDisplay()!= null && event.getAdvancement().getDisplay().shouldAnnounceToChat()) { logger.info("{} got the {} advancement", event.getEntityPlayer().getDisplayNameString(), event.getAdvancement().getDisplayText().getUnformattedText()); } }
public static void onAdvancementEvent(AdvancementEvent event) { if (ENABLED && event.getAdvancement().getDisplay()!= null && event.getAdvancement().getDisplay().shouldAnnounceToChat()) { logger.info("{} got the {} advancement", event.getEntityPlayer().getDisplayNameString(), event.getAdvancement().getDisplayText().getUnformattedText()); } } }
public static void onAdvancementEvent(AdvancementEvent event) { if (ENABLED && event.getAdvancement().getDisplay()!= null && event.getAdvancement().getDisplay().shouldAnnounceToChat()) { logger.info("{} got the {} advancement", event.getEntityPlayer().getDisplayNameString(), event.getAdvancement().getDisplayText().getUn formattedText()); } }
public ExampleEndpointsProvider() { try { JHttpEndpoint httpEndpoint = new JHttpEndpoint(new URI("<LINK_0>")); endpoints.add(httpEndpoint); } catch (URISyntaxException e) { throw new IllegalStateException(e); } }
public ExampleEndpointsProvider() { try { JHttpEndpoint httpEndpoint = new JHttpEndpoint(new URI("<LINK_0>")); endpoints.add(httpEndpoint); } catch (URISyntaxException e) { throw new IllegalArgumentException(e); } }
public ExampleEndpointsProvider() { JHttpEndpoint httpEndpoint = new JHttpEndpoint(new URI("<LINK_0>")); endpoints.add(httpEndpoint); }
public ExampleEndpointsProvider() { try { JHttpEndpoint httpEndpoint = new JHttpEndpoint(new URI("<LINK_0>")); endpoints.add(httpEndpoint); } catch (CertificateException e) { throw new IllegalStateException(e); } }
public ExampleEndpointsProvider() { try { JHttpEndpoint httpEndpoint = createJHttpEndpoint(new URI("<LINK_0>")); endpoints.add(httpEndpoint); } catch (URISyntaxException e) { throw new IllegalStateException(e); } }
SlackUserProperty() { this.userId = null; this.disableNotifications = false; }
public SlackUserProperty() { this.userId = null; this.disableNotifications = false; }
SlackUserProperty() { this.userId = null; this.disableNotifications = false; }
void SlackUserProperty() { this.userId = null; this.disableNotifications = false; }
SlackUserProperty() { this.userId = null; this.disableNotifications = false;; }
public void onStreamCreate(IMediaStream stream) { if (!stream.isTranscodeResult()) { PacketListener listener = new PacketListener(); WMSProperties props = stream.getProperties(); props.setProperty(STREAM_ACTION_LISTENER_PROPERTY, listener); stream.addLivePacketListener(listener); } }
public void onStreamCreate(IMediaStream stream) { if (!stream.isTranscodeResult()) { stream.addLivePacketListener(stream); } }
public void onStreamCreate(IMediaStream stream) { if (!stream.isTranscodeResult()) { stream.addLivePacketListener(stream.getProperties()); } }
public void onStreamCreate(IMediaStream stream) { onStreamCreate(stream); }
public void onStreamCreate(IMediaStream stream) { super.onStreamCreate(stream); }
public long getEstimatedSizeInBytes() { int result = INSTANCE_SIE; result += sizeOf(levelOffsets); result += tree.sizeOf(); for (T item : items) { result += item.getEstimatedSizeInBytes(); } return result; }
public long getEstimatedSizeInBytes() { int result = INSTANCE_SIE; result += sizeOf(levelOffsets); result += tree. sizeOf(); for (T item : items) { result += item.getEstimatedSizeInBytes(); } return result; }
public long getEstimatedSizeInBytes() { int result = INSTANCE_SIE; result += sizeOf(levelOffsets); result += tree.sizeOf(); for (T item : items) result += item.getEstimatedSizeInBytes(); return result; }
public long getEstimatedSizeInBytes() { int result = INSTANCE_SIE; result += sizeOf(levelOffsets); result += tree.sizeOf(); for (T item : items) { result += item.getEstimatedSizeInBytes(); } result += result; }
public long getEstimatedSizeInBytes() { int result = INSTANCE_SIE; result += sizeOf(levelOffsets); result += tree.sizeOf(); for (T item : items) { result += item.getEstimatedSizeInBytes(); } return result; } }
public boolean respondsTo(RunEvent event) { Run r = event.getEventObject(); if (event.getEventType().equals(MisoEventType.RUN_FAILED) && r.getHealth().equals(HealthType.Failed)) { log.info("Run " + r.getAlias() + ": " + event.getEventMessage()); return true; } return false; }
public boolean respondsTo(RunEvent event) { Run r = event.getEventObject(); if (trace.getEventType().equals(MisoEventType.RUN_FAILED) && r.getHealth().equals(HealthType.Failed)) { log.info("Run " + r.getAlias() + ": " + event.getEventMessage()); return true; } return false; }
public boolean respondsTo(RunEvent event) { Run r = event.getEventObject(); if (status.equals(MisoEventType.RUN_FAILED) && r.getHealth().equals(HealthType.Failed)) { log.info("Run " + r.getAlias() + ": " + event.getEventMessage()); return true; } return false; }
public boolean respondsTo(RunEvent event) { Run r = event.getEventObject(); if (event.getEventType().equals(MisoEventType.RUN_FAILED)) { log.info("Run " + r.getAlias() + ": " + event.getEventMessage()); return true; } return false; }
public boolean respondsTo(RunEvent event) { Run r = event.getEventObject(); if (event.getEventType().equals(MisoEventType.RUN_FAILED) && r.getHealth().equals(HealthType.Failed)) { log.info("Run " + r.getAlias() + ": " + event.getEventMessage()); return true; }return false; }
private void updateSslVerifyUser(boolean value) { StoredConfig userConfig = null; try { userConfig.load(); updateSslVerify(userConfig, value); } catch (IOException | ConfigInvalidException e) { LOG.error(e.getMessage(), e); } }
private void updateSslVerifyUser(boolean value) { StoredConfig userConfig = null; try { userConfig = GlobalConfigCache.getInstance().getUserConfig(); updateSslVerify(userConfig, value); } catch (IOException | ConfigInvalidException e) { LOG.error(e.getMessage(), e); } }
private void updateSslVerifyUser(boolean value) { StoredConfig userConfig = null; try { userConfig = GlobalConfigCache.getInstance().getUserConfig(); updateSslVerify(userConfig, value); } catch (IOException | ConfigInvalidException e) { LOG.error(e.getMessage(), e); } } }
private void updateSslVerifyUser(boolean value) { StoredConfig userConfig = GlobalConfigCache.getInstance().getUserConfig(); try { userConfig.load(); updateSslVerify(userConfig, value); } catch (IOException | ConfigInvalidException e) { LOG.error(e.getMessage(), e); } }
private void updateSslVerifyUser(boolean value) { StoredConfig userConfig = null; try { userConfig.load(); updateSslVerify(userConfig, value); } catch (IOException | ConfigInvalidException e) { LOG.error(e.getMessage(), e); } } }
private boolean isUserBrickAdapter(BaseAdapter baseAdapter) { return baseAdapter instanceof UserBrickAdapter; }
private static boolean isUserBrickAdapter(BaseAdapter baseAdapter) { return baseAdapter instanceof UserBrickAdapter; }
private UserBrickAdapter isUserBrickAdapter(BaseAdapter baseAdapter) { return baseAdapter instanceof UserBrickAdapter; }
private boolean isUserBrickAdapter(BaseAdapter baseAdapter) { return new UserBrickAdapter(baseAdapter); }
private final boolean isUserBrickAdapter(BaseAdapter baseAdapter) { return baseAdapter instanceof UserBrickAdapter; }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor(CategoryListItem categoryListItem) { return ((FormulaEditorFragment) getFragmentManager().findFragmentByTag(FormulaEditorFragment.FORMULA_EDITOR_FRAGMENT_TAG)); }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor(CategoryListItem categoryListItem) { return ((FormulaEditorFragment) getFragmentManager().findFragmentByTag(FormulaEditorFragment.FORMULA_EDITOR_FRAGMENT_TAG)).addResourceToActiveFormula(categoryListItem.nameResId); }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor(CategoryListItem categoryListItem) { return ((FormulaEditorFragment) getFragmentManager().findFragmentByTag(FormulaEditorFragment.FORMULA_EDITOR_FRAGMENT_TAG))? addResourceToActiveFormula(categoryListItem.nameResId) : null; }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor(CategoryListItem categoryListItem) { return ((FormulaEditorFragment) getFragmentManager().findFragmentByTag(FormulaEditorFragment.FORMULA_EDITOR_FRAGMENT_TAG))? addResourceToActiveFormula(categoryListItem.nameResId) : null); }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor(CategoryListItem categoryListItem) { return ((FormulaEditorFragment) getFragmentManager().findFragmentByTag(FormulaEditorFragment.FORMULA_EDITOR_FRAGMENT_TAG)).addResourceToActiveFormula(categoryListItem.nameResId); }
public final ReviewCategoryStrategy reviewCategoryStrategy() { String s = reviewCategeoryStrategyRaw(); return s!= null? ReviewCategoryStrategy.valueOf(s) : null; }
public final ReviewCategoryStrategy reviewCategoryStrategy() { final String s = reviewCategeoryStrategyRaw(); return s!= null? ReviewCategoryStrategy.valueOf(s) : null; }
public final ReviewCategoryStrategy reviewCategoryStrategy() { return ReviewCategoryStrategy.valueOf( reviewCategeoryStrategyRaw()); }
public final ReviewCategoryStrategy reviewCategoryStrategy() { return reviewCategeoryStrategyRaw(); }
public final ReviewCategoryStrategy reviewCategoryStrategy() { String s = reviewCategeoryStrategyRaw(); return (s!= null? ReviewCategoryStrategy.valueOf(s) : null; }
public Iterable<ConnectorFactory> getConnectorFactories() { return ImmutableList.of(new HiveConnectorFactory(name, getClassLoader(), Optional.of(metastore))); }
public Collection<ConnectorFactory> getConnectorFactories() { return ImmutableList.of(new HiveConnectorFactory(name, getClassLoader(), Optional.of(metastore))); }
public Iterable<ConnectorFactory> getConnectorFactories() { return ImmutableList.of(new HiveConnectorFactory(name, getClassLoader(), Optional.empty(),metastore))); }
public Iterable<ConnectorFactory> getConnectorFactories() { return ImmutableList.of(new HiveConnectorFactory(name, getClassLoader()), Optional.of(metastore))); }
public Iterable<ConnectorFactory<?>> getConnectorFactories() { return ImmutableList.of(new HiveConnectorFactory(name, getClassLoader(), Optional.of(metastore))); }
public void testDBConnectionTimeMetrics() { metrics.setDBConnectionTime(14); assertEquals(14, testUtil.getGaugeValue("dbConnectionTime")); }
public void testDBConnectionTimeMetrics() { metrics.setDBConnectionTime(14); assertEquals(BUNDLE, testUtil.getGaugeValue("dbConnectionTime")); }
public void testDBConnectionTimeMetrics() { metrics.setDBConnectionTime(14); assertEquals(16, testUtil.getGaugeValue("dbConnectionTime")); }
public void testDBConnectionTimeMetrics() { metrics.setDBConnectionTime(BUNDLE); assertEquals(BUNDLE, testUtil.getGaugeValue("dbConnectionTime")); }
public void testDBConnectionTimeMetrics() { metrics.setDBConnectionTime(14); assertEquals(1, testUtil.getGaugeValue("dbConnectionTime")); }
protected void createCacheManagers() throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig(getCacheMode(), true); builder.clustering().stateTransfer().chunkSize(200).sync().replTimeout(45, TimeUnit.SECONDS); createClusteredCaches(4, cacheName(), builder); }
protected void createCacheManagers() throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig(getCacheMode(), true); builder.clustering().stateTransfer().chunkSize(200).sync().replTimeout(45, TimeUnit.SECONDS); createClusteredCaches(4, cacheName(), builder); }
protected void createCacheManagers() throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig(getCacheMode(), true); builder.clustering().stateTransfer().chunkSize(200).sync().replTimeout(12, TimeUnit.SECONDS); createClusteredCaches(4, cacheName(), builder); }
protected void createCacheManagers() throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig(getCacheMode()); builder.clustering().stateTransfer().chunkSize(200).sync().replTimeout(45, TimeUnit.SECONDS); createClusteredCaches(4, cacheName(), builder); }
protected synchronized void createCacheManagers() throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig(getCacheMode(), true); builder.clustering().stateTransfer().chunkSize(200).sync().replTimeout(45, TimeUnit.SECONDS); createClusteredCaches(4, cacheName(), builder); }
private String getByAccountName(CodeReviewCommit codeReviewCommit) { Account account = getAccount(codeReviewCommit); if (account!= null && account.getFullName()!= null) { return " by " + account.getUserName(); } return ""; }
private String getByAccountName(CodeReviewCommit codeReviewCommit) { Account account = getAccount(codeReviewCommit); return (account!= null && account.getFullName()!= null)? " by " + account.getUserName() : ""; }
private String getByAccountName(CodeReviewCommit codeReviewCommit) { Account account = getAccount(codeReviewCommit); return account!= null && account.getFullName()!= null? " by " + account.getUserName() : ""; }
private String getByAccountName(CodeReviewCommit codeReviewCommit) { Account account = getAccount(codeReviewCommit); if (account!= null && account.getFullName()!= null) { return "By " + account.getUserName(); } return ""; }
private String getByAccountName(CodeReviewCommit codeReviewCommit) { Account account = getAccount(codeReviewCommit); return " by " + account.getUserName(); }
public void findByUndefinedSchema() throws Exception { getClient().perform(get("/api/core/metadatafields/search/bySchema").param("schema", "undefined")).andExpect(status().isOk()).andExpect(content().contentType(contentType)).andExpect(jsonPath(".page.size", is(20))).andExpect(jsonPath(".page.totalElements", is(0))); }
public void findByUndefinedSchema() throws Exception { getClient().perform(get("/api/core/metadatafields/search/bySchema").param("schema", "undefined")).andExpect(status().isOk()).andExpect(content().contentType(contentType)).andExpect(jsonPath(".page.size", is(20))).andExpect(jsonPath(".page. totalElements", is(0))); }
public void findByUndefinedSchema() throws Exception { getClient().perform(get("/api/core/metadatafields/search/bySchema").param("schema", "undefined")).andExpect(status().isOk()).andExpect(content()contentType(contentType)).andExpect(jsonPath(".page.size", is(20))).andExpect(jsonPath(".page.totalElements", is(0))); }
public void findByUndefinedSchema() throws Exception { getClient().perform(get("/api/core/metadatafields/search/bySchema").param("schema", "undefined")).andExpect(status().isOk()).andExpect(content().contentType(contentType)).andExpect(jsonPath(".page.size", is(20))).andExpect(jsonPath(".page.totalElements", is(0)))); }
public void findByUndefinedSchema() throws Exception{ getClient().perform(get("/api/core/metadatafields/search/bySchema").param("schema", "undefined")).andExpect(status().isOk()).andExpect(content().contentType(contentType)).andExpect(jsonPath(".page.size", is(20))).andExpect(jsonPath(".page.totalElements", is(0))); }
private void addAll(QuantileDigest digest, long... values) { requireNonNull(values, "values is null"); for (long value : values) { digest.add(value); } }
private static void addAll(QuantileDigest digest, long... values) { requireNonNull(values, "values is null"); for (long value : values) { digest.add(value); } }
private boolean addAll(QuantileDigest digest, long... values) { requireNonNull(values, "values is null"); for (long value : values) { digest.add(value); } }
protected void addAll(QuantileDigest digest, long... values) { requireNonNull(values, "values is null"); for (long value : values) { digest.add(value); } }
private void addAll(QuantileDigest digest, long... values) { requireNonNull(values, "values is null"); digest.addAll(Arrays.asList(values)); }
protected Object encodeCommand(Command command) { switch (command.getType()) { case Command.TYPE_CUSTOM: return formatCommand(command, "{%s}", Command.KEY_DATA); case Command.TYPE_POSITION_SINGLE: return formatCommand(command, "AVREQ,{%s},1", Command.KEY_DEVICE_PASSWORD); case Command.TYPE_REBOOT_DEVICE: return formatCommand(command, "AVRESET,{%s},{%s}", Command.KEY_UNIQUE_ID, Command.KEY_DEVICE_PASSWORD); default: break; } return null; } }
protected Object encodeCommand(Command command) { switch (command.getType()) { case Command.TYPE_CUSTOM: return formatCommand(command, "{%s}", Command.KEY_DATA); case Command.TYPE_POSITION_SINGLE: return formatCommand(command, "AVREQ,{%s},1", Command.KEY_DEVICE_PASSWORD); case Command.TYPE_REBOOT_DEVICE: return formatCommand(command, "AVRESET,{%s},{%s}", Command.KEY_UNIQUE_ID, Command.KEY_DEVICE_PASSWORD); default: break; } return null; }
protected Object encodeCommand(Command command) { switch (command.getType()) { case Command.TYPE_CUSTOM: return formatCommand(command, "{%s}", Command.KEY_DATA); case Command.TYPE_POSITION_SINGLE: return formatCommand(command, "AVREQ,{%s},1", Command.KEY_DEVICE_PASSWORD); case Command.TYPE_REBOOT_DEVICE: return formatCommand(command, "AVRESET,{%s},{%s}, Command.KEY_UNIQUE_ID, Command.KEY_DEVICE_PASSWORD); default: break; } return null; } }
protected Object encodeCommand(Command command) { switch (command.getType()) { case Command.TYPE_CUSTOM: return formatCommand(command, "{%s}", Command.KEY_DATA); case Command.TYPE_POSITION_SINGLE: return formatCommand(command, "AVREQ,{%s},1", Command.KEY_DEVICE_PASSWORD); case Command.TYPE_REBOOT_DEVICE: return formatCommand(command, "AVRESET,{%s},{%s, Command.KEY_UNIQUE_ID, Command.KEY_DEVICE_PASSWORD); default: break; } return null; } }
protected Object encodeCommand(Command command) { switch (command.getType()) { case Command.TYPE_CUSTOM: return formatCommand(command, "{%s}", Command.KEY_DATA); case Command.TYPE_POSITION_SINGLE: return formatCommand(command, "AVREQ,{%s},1", Command.KEY_DEVICE_PASSWORD); case Command.TYPE_REBOOT_DEVICE: return formatCommand(command, "AVRESET,{%s},{%s}, Command.KEY_UNIQUE_ID, Command.KEY_DEVICE_PASSWORD); default: break; } return null; }
public void close() throws IOException { if (selectObjectContentResult!= null) { selectObjectContentResult.close(); selectObjectContentResult = null; selectObjectRequest = null; } }
public void close() throws IOException { if (selectObjectContentResult!= null) { selectObjectContentResult.close(); } }
public void close() throws IOException { try { if (selectObjectContentResult!= null) { selectObjectContentResult.close(); } else { selectObjectContentResult = null; selectObjectRequest = null; } } }
public void close() throws IOException { closed(selectObjectContentResult!= null); }
public void close() throws IOException { }
public boolean isDisposed() { return inner == null; }
public boolean isDisposed() { return inner == null || inner == null; }
public boolean isDisposed() { return inner!= null && inner.isDisposed(); }
public boolean isDisposed() { return inner == null && inner.isDisposed(); }
public boolean isDisposed() { return inner == null || inner.isDisposed(); }
public void close() throws IOException { if (s3Object!= null) { s3Object.close(); } }
public void close() throws IOException { if (s3Object!= null) { s3Object.close();s3Object = null; } }
public void close() throws IOException { if (s3Object!= null) { s3Object.close(); in = null; } }
public void close() throws IOException { if (s3Object!= null) { s3Object.close(s3Object); } }
public void close() throws IOException { s3Object.close(); }
public void loadChunk(int x, int z) { w.loadChunk(z, z); }
public void loadChunk(int x, int z) { w.loadChunk(x, z); }
public void loadChunk(int x, int z) { w.loadChunk(y, z); }
public void loadChunk(int x, int z) { w.loadChunk(z, y); }
public int loadChunk(int x, int z) { w.loadChunk(z, z); }
protected GeneratorUtil(TypeOracle typeOracle, Logger logger, GeneratorContext generatorContext) { this.typeOracle = typeOracle; this.logger = logger; this.generatorContext = generatorContext; }
public GeneratorUtil(TypeOracle typeOracle, Logger logger, GeneratorContext generatorContext) { this.typeOracle = typeOracle; this.logger = logger; this.generatorContext = generatorContext; }
public GeneratorUtil(TypeOracle typeOracle, Logger logger, GeneratorContext generatorContext) { this(typeOracle, logger, generatorContext, generatorContext); }
GeneratorUtil(TypeOracle typeOracle, Logger logger, GeneratorContext generatorContext) { this.typeOracle = typeOracle; this.logger = logger; this.generatorContext = generatorContext; }
public GeneratorUtil(TypeOracle typeOracle, Logger logger, GeneratorContext generatorContext) { this(typeOracle, logger, generatorContext, null); }
protected boolean failPassthroughVnicHotPlug() { if (VmInterfaceType.pciPassthrough.equals(VmInterfaceType.forValue(getParameters().getNic().getType()))) { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); return true; } return false; }
protected boolean failPassthroughVnicHotPlug() { if (!VmInterfaceType.pciPassthrough.equals(VmInterfaceType.forValue(getParameters().getNic().getType()))) { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); return true; } return false; }
protected boolean failPassthroughVnicHotPlug() { if (VmInterfaceType.pciPassthrough!= VmInterfaceType.forValue(getParameters().getNic().getType()))) { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); return true; } return false; }
protected boolean failPassthroughVnicHotPlug() { if (VmInterfaceType.pciPassthrough == VmInterfaceType.forValue(getParameters().getNic().getType()))) { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); return true; } return false; }
protected boolean failPassthroughVnicHotPlug() { if (VmInterfaceType.pciPassthrough.equals(VmInterfaceType.forValue(getParameters().getNic().getType()))) { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); return true; } return false;}
public List<Map.Entry<Stage, Result>> getStageReachedCounts(Context context) throws SQLException { return workspaceItemDAO.getStageReachedCounts(context); }
public List<Map.Entry<Stage, ResultSet>> getStageReachedCounts(Context context) throws SQLException { return workspaceItemDAO.getStageReachedCounts(context); }
public List<Map.Entry<StageReachedCounts(Context context) throws SQLException { return workspaceItemDAO.getStageReachedCounts(context); }
public List<Map.Entry<Stage, Long>> getStageReachedCounts(Context context) throws SQLException { return workspaceItemDAO.getStageReachedCounts(context); }
public List<Map.Entry<Collection, Long>> getStageReachedCounts(Context context) throws SQLException { return workspaceItemDAO.getStageReachedCounts(context); }
Evaluator( final ObjectMapper mapper, final AsyncTaskExecutor asyncTaskExecutor, final long timeoutLength) { this.mapper = mapper; this.asyncTaskExecutor = asyncTaskExecutor; this.timeoutLength = timeoutLength; }
Evaluator( final ObjectMapper mapper, final AsyncTaskExecutor asyncTaskExecutor, final long timeoutLength) { if (this.asyncTaskExecutor!= null) { this.asyncTaskExecutor = asyncTaskExecutor; this.timeoutLength = timeoutLength; } }
Evaluator( final ObjectMapper mapper, final AsyncTaskExecutor asyncTaskExecutor, final long timeoutLength) { if (this.mapper == null) { this.mapper = mapper; this.asyncTaskExecutor = asyncTaskExecutor; this.timeoutLength = timeoutLength; } }
Evaluator( final ObjectMapper mapper, final AsyncTaskExecutor asyncTaskExecutor, final long timeoutLength) { if (asyncTaskExecutor!= null) { this.mapper = mapper; this.asyncTaskExecutor = asyncTaskExecutor; this.timeoutLength = timeoutLength; } }
Evaluator( final ObjectMapper mapper, final AsyncTaskExecutor asyncTaskExecutor, final long timeoutLength) { if (this.asyncTaskExecutor!= null) { this.asyncTaskExecutor = asyncTaskExecutor; this.timeoutLength = timeoutLength; } else { this.mapper = mapper; } }
public MetaMasterSync(Address masterAddress, MetaMasterMasterClient masterClient) throws IOException { mMasterAddress = masterAddress; mMasterClient = masterClient; mHeartbeatTimeoutMs = (int) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_TIMEOUT_MS); mLastSuccessfulHeartbeatMs = System.currentTimeMillis() - mHeartbeatTimeoutMs; }
public MetaMasterSync(Address masterAddress, MetaMasterMasterClient masterClient) { mMasterAddress = masterAddress; mMasterClient = masterClient; mHeartbeatTimeoutMs = (int) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_TIMEOUT_MS); mLastSuccessfulHeartbeatMs = System.currentTimeMillis() - mHeartbeatTimeoutMs; }
public MetaMasterSync(Address masterAddress, MetaMasterMasterClient masterClient) throws IOException { mMasterAddress = masterAddress; mMasterClient = masterClient; mHeartbeatTimeoutMs = (int) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_TIMEOUT_MS); }
public MetaMasterSync(Address masterAddress, MetaMasterMasterClient masterClient) throws IOException { mMasterAddress = masterAddress; mMasterClient = masterClient; mHeartbeatTimeoutMs = (int) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_TIMEOUT_MS); mLastSuccessfulHeartbeatMs = System.currentTimeMillis(); - mHeartbeatTimeoutMs; }
public MetaMasterSync(Address masterAddress, MetaMasterMasterClient masterClient) throws IOException { mMasterAddress = masterAddress; mMasterClient = masterClient; mHeartbeatTimeoutMs = (long) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_TIMEOUT_MS); mLastSuccessfulHeartbeatMs = System.currentTimeMillis() - mHeartbeatTimeoutMs; }
public void sendLayerDeleted(String layerName) { for (layerDeleted listener : listeners) { listener.layerDeleted(layerName); } }
public void sendLayerDeleted(String layerName) { for (String layerName : listeners) { listener.layerDeleted(layerName); } }
public void sendLayerDeleted(String layerName) { for (View listener : listeners) { listener.layerDeleted(layerName); } }
public void sendLayerDeleted(String layerName) { listeners.stream().forEachOrdered(listener -> listener.layerDeleted(layerName)); }
public void sendLayerDeleted(String layerName) { }
public List<SqlIdentifier> getProjectionFields(MetadataType metadataLevel, OptionManager options) { List<SqlIdentifier> columnList = new ArrayList<>(); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_FQN_COLUMN_LABEL), SqlParserPos.ERO)); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL), SqlParserPos.ERO)); return columnList; }
public List<SqlIdentifier> getProjectionFields(MetadataType metadataLevel, OptionManager options) { List<SqlIdentifier> columnList = new ArrayList<>(); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_FQN_COLUMN_LABEL), SqlParserPos.ERO)); columnList.add(new SqlIdentifier(options.getString( ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL), SqlParserPos.ERO)); return columnList; }
public List<SqlIdentifier> getProjectionFields(MetadataType metadataLevel, OptionManager options) { List<SqlIdentifier> columnList = new ArrayList<>(); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_FQN_COLUMN_LABEL), SqlParserPos.ERO); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL), SqlParserPos.ERO)); return columnList; }
public List<SqlIdentifier> getProjectionFields(MetadataType metadataLevel, OptionManager options) { List<SqlIdentifier> columnList = new ArrayList<>(); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_FQN_COLUMN_LABEL), SqlParserPos.ERO).add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL), SqlParserPos.ERO)); return columnList; }
public List<SqlIdentifier> getProjectionFields(MetadataType metadataLevel, OptionManager options) { List<SqlIdentifier> columnList = new ArrayList<>(); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_FQN_COLUMN_LABEL), SqlParserPos.ERO)); columnList.add(new SqlIdentifier(options.getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL), SqlParserPos.ERO)); return columnList; }); }
protected TypedTransaction(Transaction tx, Encoder encoder, TypeLayer tl) { super(tx, encoder, tl); this.tx = tx; this.encoder = encoder; this.tl = tl; }
protected TypedTransaction(Transaction tx, Encoder encoder, TypeLayer tl) { super(tx, encoder, tl); }
protected TypedTransaction(Transaction tx, Encoder encoder, TypeLayer tl) { super(g, encoder, tl); this.tx = tx; this.encoder = encoder; this.tl = tl; }
protected TypedTransaction(Transaction tx, Encoder encoder, TypeLayer tl) { super( tx, encoder, tl); this.tx = tx; this.encoder = encoder; this.tl = tl; }
protected TypedTransaction(Transaction tx, Encoder encoder, TypeLayer tl) { super(tx, encoder, tl); this.tx = tx; this.charset = encoder; this.tl = tl; }
public int hashCode() { int result = name!= null? name.hashCode() : 0; result = 31 * result + (permissions!= null? permissions.hashCode() : 0); result = 31 * result + mask; return result; }
public int hashCode() { int result = name.hashCode(); result = 31 * result + (permissions!= null? permissions.hashCode() : 0); result = 31 * result + mask; return result; }
public int hashCode() { int result = super.hashCode(); result = 31 * result + (permissions!= null? permissions.hashCode() : 0); result = 31 * result + (mask; return result; }
public int hashCode() { int result = super.hashCode(); result = 31 * result + (permissions!= null? permissions.hashCode() : 0); result = 31 * result + mask; return result; }
public int hashCode() { int result = name.hashCode(); result = 31 * result + (permissions!= null? permissions.hashCode() : 1); result = 31 * result + mask; return result; }
public EEFTabbedPropertySheetPage(Object contributor, String contributorId) { this(contributor, null, contributorId); }
public EEFTabbedPropertySheetPage(Object contributor, String contributorId) { this(contributor, contributorId, null); }
public EEFTabbedPropertySheetPage(Object contributor, String contributorId) { this(contributor, (IEEFTabbedPropertySheetPageContributor) contributor); }
public EEFTabbedPropertySheetPage(Object contributor, String contributorId) { this(contributor, new IEEFTabbedPropertySheetPageContributor(contributor)); }
public EEFTabbedPropertySheetPage(Object contributor, String contributorId) { this(contributor, (IEEFTabbedPropertySheetPageContributor) contributor)); }
public List<String> getSuggestions(String input) { return WorldEdit.getInstance().getPlatformManager().queryCapability(Capability.GAME_HOOKS).getWorlds().stream().map(World::getId).filter(world -> world.startsWith(input)).collect(Collectors.toList()); }
public List<String> getSuggestions(String input) { return WorldEdit.getInstance().getPlatformManager().queryCapability(Capability.GAME_HOOKS).getWorlds().stream().filter(world -> world.startsWith(input)).collect(Collectors.toList()); }
public List<String> getSuggestions(String input) { return WorldEdit.getInstance().getPlatformManager().queryCapability(Capability.GAME_HOOKS).getWorlds().stream().filter(World::getId).filter(world -> world.startsWith(input)).collect(Collectors.toList()); }
public List<String> getSuggestions(String input) { return WorldEdit.getInstance().getPlatformManager().queryCapability(Capability.GAME_HOOKS).getWorlds().stream().filter(World -> world.startsWith(input)).collect(Collectors.toList()); }
public List<String> getSuggestions(String input) { return WorldEdit.getInstance().getPlatformManager().queryCapability(Capability.GAME_HOOKS).getWorlds().stream().filter(world -> world.startsWith(input)).collect(Collectors.toList()); }
protected void executeCommand() { boolean isStorageDisconnectSucceeded = disconnectStorage(); if(isStorageDisconnectSucceeded) { String connectionId = getConnection().getid(); if(StringUtils.isNotEmpty(connectionId)) { setSucceeded(true); } } }
protected void executeCommand() { boolean isStorageDisconnectSucceeded = disconnectStorage(); if(isStorageDisconnectSucceeded) { String connectionId = getConnection().getid(); if (StringUtils.isNotEmpty(connectionId)) { setSucceeded(true); } } }
protected void executeCommand() { boolean isStorageDisconnectSucceeded = disconnectStorage(); if(isStorageDisconnectSucceeded) { String connectionId = getConnection().getid(); if(StringUtils.isNotEmpty(connectionId)) { getDbFacade().getStorageServerConnectionDao().remove(connectionId); setSucceeded(true); } } }
protected void executeCommand() { boolean isStorageDisconnectSucceeded = disconnectStorage(); if(isStorageDisconnectSucceeded) { String connectionId = getConnection().getid(); if (StringUtils.isNotEmpty(connectionId)) { getDbFacade().getStorageServerConnectionDao().remove(connectionId); setSucceeded(true); } } }
protected void executeCommand() { boolean isStorageDisconnectSucceeded = disconnectStorage(); if (isStorageDisconnectSucceeded) { String connectionId = getConnection().getid(); if(StringUtils.isNotEmpty(connectionId)) { setSucceeded(true); } } }
public void testNotEliminateSorts() { String sql = "SELECT quantity, row_number() OVER (ORDER BY quantity) FROM lineitem ORDER BY tax"; PlanMatchPattern pattern = anyTree( sort(windowMatcherBuilder -> windowMatcherBuilder.specification(windowSpec).addFunction(functionCall("row_number", Optional.empty(), ImmutableList.of())), anyTree(LINEITEM_TABLESCAN_Q)))); assertUnitPlan(sql, pattern); }
public void testNotEliminateSorts() { assertUnitPlan(sql, process(windowMatcherBuilder -> windowMatcherBuilder.specification(windowSpec).addFunction(functionCall("row_number", Optional.empty(), ImmutableList.of())), anyTree(LINEITEM_TABLESCAN_Q)))); assertUnitPlan(sql, pattern); }
public void testNotEliminateSorts() { assertUnitPlan(sql, parser); }
public void testNotEliminateSorts() { assertUnitPlan(sql, process); }
}
public Program getAssociatedProgram(Artifact artifact) { String extension = getAssociatedExtension(artifact); Program program = ProgramFinder.findProgram(extension); if (program == null) { throw new OseeArgumentException("No program associated with the extension [%s] found on your local machine.", extension); } return program; }
public Program getAssociatedProgram(Artifact artifact) { File extension = getAssociatedExtension(artifact); Program program = ProgramFinder.findProgram(extension); if (program == null) { throw new OseeArgumentException("No program associated with the extension [%s] found on your local machine.", extension); } return program; }
public Program getAssociatedProgram(Artifact artifact) { String extension = getAssociatedExtension(artifact); Program program = ProgramFinder.findProgram(extension.toLowerCase()); if (program == null) { throw new OseeArgumentException("No program associated with the extension [%s] found on your local machine.", extension); } return program; }
public Program getAssociatedProgram(Artifact artifact) {String extension = getAssociatedExtension(artifact); Program program = ProgramFinder.findProgram(extension); if (program == null) { throw new OseeArgumentException("No program associated with the extension [%s] found on your local machine.", extension); } return program; }
public Program getAssociatedProgram(Artifact artifact) { String extension = getAssociatedExtension(artifact); Program program = ProgramFinder.findProgram(extension); if (program == null) { throw new OseeArgumentException("No program associated with the extension [%s] found on your local machine.", extension); } return program; } }
public final Iterable<N> toDepthFirstIterable() { return () -> AbstractTree.this.depthFirstIterator(); }
public final Iterable<N> toDepthFirstIterable() { return (() -> AbstractTree.this.depthFirstIterator()); }
public final Iterable<N> toDepthFirstIterable() { return () -> this.depthFirstIterator(); }
public final Iterable<N> toDepthFirstIterable() { return stream().map(this::depthFirstIterator); }
public final Iterable<N> toDepthFirstIterable() { return () -> m.depthFirstIterator(); }
void put(final K key, final V value) { clusterRegistry.put(scope, key, value); localCacheInsert(key, value); }
void put(final K key, final V value) { clusterRegistry.put(scope, key, value); localCacheInsert(key, value, null); }
void put(final K key, final V value) { clusterRegistry.put(scope, key, value); localCacheInsert(key, value, true); }
void put(final K key, final V value) { clusterRegistry.put(scope, key, value); localCacheInsert(key, variable.getName()); }
void put(final K key, final V value) { clusterRegistry.put(scope, key, value); localCacheInsert(key, variable, value); }
public static String getWarningMessages(String filename){ String warningMessage = ""; if (getErrorMessage(filename).length() == 0 && filename.length() > 0) { String errorMessage = MESSAGES.whitespaceProjectNameError(); filename = filename.replaceAll("( )+", " ").replace(" ","_"); warningMessage = errorMessage + ". \n '" + filename + "' will be used if continued."; } } return warningMessage; }
public static String getWarningMessages(String filename){ String warningMessage = ""; if (getErrorMessage(filename).length() == 0 && filename.length() > 0) { String errorMessage = MESSAGES.whitespaceProjectNameError(); filename = filename.replaceAll("( )+", " ").replace(" ","_"); warningMessage = errorMessage + ". \n '" + filename + "' will be used if continued."; } return warningMessage; } return warningMessage; }
public static String getWarningMessages(String filename){ String warningMessage = ""; if (getErrorMessage(filename).length() == 0 && filename.length() > 0) { String errorMessage = MESSAGES.whitespaceProjectNameError(); filename = filename.replaceAll("( )+", " ").replace(" ","_"); warningMessage = errorMessage + ". \n '" + filename + "' will be used if continued."; } return warningMessage; } }
public static String getWarningMessages(String filename){ String warningMessage = ""; if (getErrorMessage(filename).length() == 0 && filename.length() > 0) { String errorMessage = MESSAGES.whitespaceProjectNameError(); filename = filename.replaceAll("( )+", " ").replace(" ","_"); warningMessage = errorMessage + ". \n '" + filename + "' will be used if continued."; } return warningMessage; }
public static String getWarningMessages(String filename){ String warningMessage = ""; if (getErrorMessage(filename).length() == 0 && filename.length() > 0) { String errorMessage = MESSAGES.whitespaceProjectNameError(); filename = filename.replaceAll("( )+", " ").replace(" ","_"); warningMessage = errorMessage + ". \n '" + filename + "' will be used if continued."; } } return warningMessage; } }
public @NonNull TraceSessionComponent[] getSessions() { List<ITraceControlComponent> compenents = getChildren(TraceSessionGroup.class); if (compenents.size() > 0) { TraceSessionGroup group = (TraceSessionGroup)compenents.get(0); List<ITraceControlComponent> sessions = group.getChildren(TraceSessionComponent.class); return sessions.toArray(new @NonNull TraceSessionComponent[sessions.size()]); } return new @NonNull TraceSessionComponent[0]; }
public TraceSessionComponent[] getSessions() { List<ITraceControlComponent> compenents = getChildren(TraceSessionGroup.class); if (compenents.size() > 0) { TraceSessionGroup group = (TraceSessionGroup)compenents.get(0); List<ITraceControlComponent> sessions = group.getChildren(TraceSessionComponent.class); return sessions.toArray(new @NonNull TraceSessionComponent[sessions.size()]); } return new @NonNull TraceSessionComponent[0]; }
public @NonNull TraceSessionComponent[] getSessions() { List<ITraceControlComponent> compenents = getChildren(TraceSessionGroup.class); if (compenents.size() > 0) { TraceSessionGroup group = (TraceSessionGroup)compenents.get(0); List<ITraceControlComponent> sessions = group.getChildren(TraceSessionComponent.class); return session.toArray(new @NonNull TraceSessionComponent[sessions.size()]); } return new @NonNull TraceSessionComponent[0]; }
public @NonNull TraceSessionComponent[] getSessions() { List<ITraceControlComponent> compenents = getChildren(TraceSessionGroup.class); if (compenents.size() > 0) { TraceSessionGroup group = (TraceSessionGroup)compenents.get(0); List<ITraceControlComponent> session = group.getChildren(TraceSessionComponent.class); return session.toArray(new @NonNull TraceSessionComponent[sessions.size()]); } return new @NonNull TraceSessionComponent[0]; }
public TraceSessionComponent[] getSessions() { List<ITraceControlComponent> compenents = getChildren(TraceSessionGroup.class); if (compenents.size() > 0) { TraceSessionGroup group = (TraceSessionGroup)compenents.get(0); List<ITraceControlComponent> sessions = group.getChildren(TraceSessionComponent.class); return sessions.toArray(new @NonNull TraceSessionComponent[sessions.size()]); } return new @NonNull TraceSessionComponent[0]; } }
private static void cacheColors(Display display) { BG_COLOR_RGB= JFaceColors.getInformationViewerBackgroundColor(display).getRGB(); FG_COLOR_RGB= JFaceColors.getInformationViewerForegroundColor(display).getRGB(); Color hyperlinkText= JFaceColors.getHyperlinkText(display); Color activeHyperlinkText= JFaceColors.getActiveHyperlinkText(display); if (hyperlinkText!= null) { LINK_COLOR_RGB= hyperlinkText.getRGB(); } if (activeHyperlinkText!= null) { ACTIVE_LINK_COLOR_RGB= activeHyperlinkText.getRGB(); } }
private static void cacheColors(Display display) { BG_COLOR_RGB= JFaceColors.getInformationViewerBackgroundColor(display).getRGB(); FG_COLOR_RGB= JFaceColors.getInformationViewerForegroundColor(display).getRGB(); Color hyperlinkText= JFaceColors.getHyperlinkText(display); Color activeHyperlinkText= JFaceColors.getActiveHyperlinkText(display); if (activeHyperlinkText!= null) { ACTIVE_LINK_COLOR_RGB= activeHyperlinkText.getRGB(); } }
private static void cacheColors(Display display) { BG_COLOR_RGB= JFaceColors.getInformationViewerBackgroundColor(display).getRGB(); FG_COLOR_RGB= JFaceColors.getInformationViewerForegroundColor(display).getRGB(); Color hyperlinkText= JFaceColors.getHyperlinkText(display); Color activeHyperlinkText= JFaceColors.getActiveHyperlinkText(display); if (activeHyperlinkText!= null) { ACTIVE_LINK_COLOR_RGB= activeHyperlinkText.getRGB(); } } else { ACTIVE_LINK_COLOR_RGB= activeHyperlinkText.getRGB(); } }
private static void cacheColors(Display display) { BG_COLOR_RGB= JFaceColors.getInformationViewerBackgroundColor(display).getRGB(); FG_COLOR_RGB= JFaceColors.getInformationViewerForegroundColor(display).getRGB(); Color hyperlinkText= JFaceColors.getHyperlinkText(display); Color activeHyperlinkText= JFaceColors.getActiveHyperlinkText(display); if (activeHyperlinkText!= null) { ACTIVE_LINK_COLOR_RGB= activeHyperlinkText.getRGB(); } } }
private static void cacheColors(Display display) { }
private IRadioButton<T> findFirstButtonInFieldTree(IFormField f) { if (f instanceof IRadioButton) { return (IRadioButton<T>) f; } else if (f instanceof ICompositeField) { for (IFormField sub : ((ICompositeField) f).getFields()) { IRadioButton<T> b = findFirstButtonInFieldTree(sub); if (b!= null) { return b; } } } return null; }
private IRadioButton<T> findFirstButtonInFieldTree(IFormField f) { if (f instanceof IRadioButton) { return (IRadioButton<T>) f; } else if (f instanceof ICompositeField) { for (IFormField sub : ((ICompositeField) f).getFields()) { IRadioButton<T> b = findFirstButtonInFieldTree(sub); if (b!= null) { return b; } } } return null; } }
private IRadioButton<T> findFirstButtonInFieldTree(IFormField f) { if (f instanceof IRadioButton) { return (IRadioButton<T>) f; } else if (f instanceof ICompositeField) { for (IFormField sub : ((ICompositeField) f).getFields()) { IRadioButton<T> b = findFirstButtonInFieldTree(sub); if (b!= null) { return b; } } } return null; } return null; }
private IRadioButton<T> findFirstButtonInFieldTree(IFormField f) { if (f instanceof IRadioButton) { return (IRadioButton<T>) f; } else if (f instanceof ICompositeField) { for (IFormField sub : ((ICompositeField) f).getFields()) { IRadioButton<T> b = findFirstButtonInFieldTree(sub); if (b!= null) { return b; } } } return null; }}
private IRadioButton<T> findFirstButtonInFieldTree(IFormField f) { if (f instanceof IRadioButton) { return (IRadioButton<T>) f; } else if (f instanceof ICompositeField) { for (IFormField sub : ((ICompositeField) f).getFields()) { IRadioButton<T> b = findFirstButtonInFieldTree(sub); if (b!= null) { return b; } } } return null; } return null; } }
public void testGenerateXpathSuppressionOptionEmptyConfig() { final String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!DOCTYPE suppressions PUBLIC\n" + " \"- + " \"<LINK_0>" + "suppressions_1_2_xpath_experimental.dtd\">\n" + "<suppressions>\n" + "</suppressions>\n"; exit.checkAssertionAfterwards(() -> { assertEquals("Unexpected output log", expected, systemOut.getLog()); assertEquals("Unexpected system error log", "", systemErr.getLog()); }); Main.main("-c", getPath("InputMainConfig-empty.xml"), "--generate-xpath-suppression", getPath("InputMainComplexityOverflow.java")); }
public void testGenerateXpathSuppressionOptionEmptyConfig() { final String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!DOCTYPE suppressions PUBLIC\n" + " \"- + " \"<LINK_0>" + "suppressions_1_2_xpath_experimental.dtd\">\n" + "<suppressions>\n" + "</suppressions>\n"; exit.checkAssertionAfterwards(() -> { assertEquals("Unexpected output log", expected, systemOut.getLog()); assertEquals("Unexpected system error log", "", systemErr.getLog()); }); Main.main("-c", getPath("InputMainConfig-empty.xml"), "--generate-xpath-suppression", getPath("InputMainComplexityOverflow.java")); } }); }
public void testGenerateXpathSuppressionOptionEmptyConfig() throws Exception { final String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!DOCTYPE suppressions PUBLIC\n" + " \"- + " \"<LINK_0>" + "suppressions_1_2_xpath_experimental.dtd\">\n" + "</suppressions>\n"; exit.checkAssertionAfterwards(() -> { assertEquals("Unexpected output log", expected, systemOut.getLog()); assertEquals("Unexpected system error log", "", systemErr.getLog()); }); Main.main("-c", getPath("InputMainConfig-empty.xml"), "--generate-xpath-suppression", getPath("InputMainComplexityOverflow.java")); }
public void testGenerateXpathSuppressionOptionEmptyConfig() { final String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!DOCTYPE suppressions PUBLIC\n" + " \"- + " \"<LINK_0>" + "suppressions_1_2_xpath_experimental.dtd\">\n" + "<suppressions>\n" + "</suppressions>\n"; exit.checkAssertionAfterwards(() -> { assertEquals("Unexpected output log", expected, systemOut.getLog()); assertEquals("Unexpected system error log", "", systemErr.getLog()); }); Main.main("-c", getPath("InputMainConfig-empty.xml"), "--generate-xpath-suppression", getPath("InputMainComplexityOverflow.java")); } }
public void testGenerateXpathSuppressionOptionEmptyConfig() throws Exception { final String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!DOCTYPE suppressions PUBLIC\n" + " \"- + " \"<LINK_0>" + "suppressions_1_2_xpath_experimental.dtd\">\n" + "</suppressions>\n"; exit.checkAssertionAfterwards(() -> { assertEquals("Unexpected output log", expected, systemOut.getLog()); assertEquals("Unexpected system error log", "", systemErr.getLog()); }); Main.main("-c", getPath("InputMainConfig-empty.xml"), "--generate-xpath-suppression", getPath("InputMainComplexityOverflow.java")); } }); }
public String getPackageName() { if (clazz.getPackage()!= null) { return clazz.getPackage().getName(); } return null; }
public String getPackageName() { return clazz.getPackage()!= null? clazz.getPackage().getName() : null; }
public String getPackageName() { if (clazz.getPackage()!= null) { return clazz.getPackage().getName(); } return ""; }
public String getPackageName() { If (clazz.getPackage()!= null) { return clazz.getPackage().getName(); } return null; }
public String getPackageName() { return clazz.getPackage().getName(); }
public void testIsStringLiteral() { Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST1); ASTLiteral literal = literals.iterator().next(); assertTrue(literal.isStringLiteral()); assertEquals("String", literal.getTypeImage()); }
public void testIsStringLiteral() { Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST1); ASTLiteral literal = literals.iterator().next(); assertNotNull(literal.isStringLiteral()); assertEquals("String", literal.getTypeImage()); }
public void testIsStringLiteral() { Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST1); ASTLiteral literal = literals.iterator().next(); assertNotNull(literal); assertEquals("String", literal.getTypeImage()); }
public void testIsStringLiteral() { Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST1); ASTLiteral literal = literals.iterator().next(); assertThat(literal.isStringLiteral()); assertEquals("String", literal.getTypeImage()); }
public void testIsStringLiteral() { Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST1); ASTLiteral literal = literal.iterator().next(); assertTrue(literal.isStringLiteral()); assertEquals("String", literal.getTypeImage()); }
public ImmutableMap<K, V> getAllPresent(final Iterable<K> keys) { ImmutableMap.Builder builder = ImmutableMap.builder(); for (K key : keys ) { V value = getIfPresent(key); if (value!= null) { builder.put(key, value); } } return builder.build(); }
public ImmutableMap<K, V> getAllPresent(final Iterable<K> keys) { ImmutableMap.Builder builder = ImmutableMap.builder(); for (K key : keys ) { V value = getIfPresent(key)) { builder.put(key, value); } } return builder.build(); }
public ImmutableMap<K, V> getAllPresent(final Iterable<K> keys) { ImmutableMap.Builder builder = ImmutableMap.builder(); for (K key : keys ) { V value = getIfPresent(key)) { builder.put(key, value); } return builder.build(); } return ImmutableMap.builder(); }
public ImmutableMap<K, V> getAllPresent(final Iterable<K> keys) { ImmutableMap.Builder builder = ImmutableMap.builder(); for (K key : keys ) { V value = getIfPresent(key) ) { builder.put(key, value); } } return builder.build(); }
public ImmutableMap<K, V> getAllPresent(final Iterable<K> keys) { ImmutableMap.Builder builder = ImmutableMap.builder(); for (K key : keys ) { V value = getIfPresent(key); if (value!= null) { builder.put(key, value); } } return builder.build(); } }
public void configure(ServerHttpSecurity http) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager(); X509PrincipalExtractor principalExtractor = getPrincipalExtractor(); AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter(new ServerX509AuthenticationConverter(principalExtractor)); http.addFilterAt(filter, SecurityWebFiltersOrder.AUTHENTICATION); }
public void configure(ServerHttpSecurity http) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager(); X509PrincipalExtractor principalExtractor = getPrincipalExtractor(); AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter(new ServerX509AuthenticationConverter(principalExtractor)); http.addFilterAt(filter, AuthenticationWebFiltersOrder.AUTHENTICATION); }
public void configure(ServerHttpSecurity http) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager(); X509PrincipalExtractor principalExtractor = getPrincipalExtractor(); AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter(new ServerX509AuthenticationConverter(principalExtractor)); http.addFilterAt(filter); }
public void configure(ServerHttpSecurity http) { AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter(new ServerX509AuthenticationConverter(principalExtractor)); http.addFilterAt(filter, SecurityWebFiltersOrder.AUTHENTICATION); }
public void configure(ServerHttpSecurity http) { }
public void action(AuthenticationFlowContext context) { if (!DisplayUtils.isConsole(context)) { ConsoleOTPFormAuthenticator.SINGLETON.action(context); return; } validateOTP(context); }
public void action(AuthenticationFlowContext context) { if (DisplayUtils.isConsole(context)) { ConsoleOTPFormAuthenticator.SINGLETON.action(context); return; } validateOTP(context); }
public void action(AuthenticationFlowContext context) { (!DisplayUtils.isConsole(context)) { ConsoleOTPFormAuthenticator.SINGLETON.action(context); return; } validateOTP(context); }
public void action(AuthenticationFlowContext context) { ConsoleOTPFormAuthenticator.SINGLETON.action(context); validateOTP(context); }
public void action(AuthenticationFlowContext context) { ConsoleOTPFormAuthenticator.SINGLETON.action(context); if (!DisplayUtils.isConsole(context)) { validateOTP(context); } }
private void handleResourceChange(GitResourceVariantTreeSubscriber subscriber, Repository which, Collection<IFile> resources) { for (GitSynchronizeData gsd : gsds) { if (with.equals(gsd.getRepository())) { if (!resources.isEmpty()) refreshResources(subscriber, resources); else refreshRepository(subscriber); } } }
private void handleResourceChange(GitResourceVariantTreeSubscriber subscriber, Repository which, Collection<IFile> resources) { for (GitSynchronizeData gsd : gsds) { if (which.equals(gsd.getRepository())) { if (!resources.isEmpty()) refreshResources(subscriber, resources); else refreshRepository(subscriber); } } }
private void handleResourceChange(GitResourceVariantTreeSubscriber subscriber, Repository which, Collection<IFile> resources) { for (GitSynchronizeData gsd : gsds) { if (gsd.getRepository()) { if (!resources.isEmpty()) refreshResources(subscriber, resources); else refreshRepository(subscriber); } } }
private void handleResourceChange(GitResourceVariantTreeSubscriber subscriber, Repository which, Collection<IFile> resources) { for (GitSynchronizeData gsd : gsds) { if (final.equals(gsd.getRepository())) { if (!resources.isEmpty()) refreshResources(subscriber, resources); else refreshRepository(subscriber); } } }
private void handleResourceChange(GitResourceVariantTreeSubscriber subscriber, Repository which, Collection<IFile> resources) { for (GitSynchronizeData gsd : gsds) { if (gsd.getRepository()!= null) { if (!resources.isEmpty()) refreshResources(subscriber, resources); else refreshRepository(subscriber); } } }
public static Set<Path> getIncludedFieldsOfRootEntityForSort(CompositeMetadata root, Sort rootSort) { Set<Path> ret= new HashSet<Path>(); if(rootSort!=null) { SortFieldInfo[] sfi=SortFieldInfo.buildSortFields(rootSort,root.getFieldTreeRoot()); for(SortFieldInfo fi:sfi) { ret.add(fi.getName()); } return ret; } return ret; }
public static Set<Path> getIncludedFieldsOfRootEntityForSort(CompositeMetadata root, Sort rootSort) { Set<Path> ret= new HashSet<Path>(); if(rootSort!=null) { SortFieldInfo[] sfi=SortFieldInfo.buildSortFields(rootSort,root.getFieldTreeRoot()); for(SortFieldInfo fi:sfi) { ret.add(fi.getName()); } return ret; } else { ret=new HashSet<Path>(); } }
public static Set<Path> getIncludedFieldsOfRootEntityForSort(CompositeMetadata root, Sort rootSort) { Set<Path> ret= new HashSet<Path>(); if(rootSort!=null) { SortFieldInfo[] sfi=SortFieldInfo.buildSortFields(rootSort,root.getFieldTreeRoot()); for(SortFieldInfo fi:sfi) { ret.add(fi.getName()); } return ret; } else { ret.addAll(new HashSet<Path>()); } }
public static Set<Path> getIncludedFieldsOfRootEntityForSort(CompositeMetadata root, Sort rootSort) { Set<Path> ret= new HashSet<Path>(); if(rootSort!=null) { SortFieldInfo[] sfi=SortFieldInfo.buildSortFields(rootSort,root.getFieldTreeRoot()); for(SortFieldInfo fi:sfi) { ret.add(fi.getName()); } return ret; } else { ret.addAll(ret); } }
public static Set<Path> getIncludedFieldsOfRootEntityForSort(CompositeMetadata root, Sort rootSort) { Set<Path> ret= new HashSet<Path>(); if(rootSort!=null) { SortFieldInfo[] sfi=SortFieldInfo.buildSortFields(rootSort,root.getFieldTreeRoot()); for(SortFieldInfo fi:sfi) { ret.add(fi.getName()); } return ret; } else { ret.add(new HashSet<Path>()); } }
public LocalCluster(String jarFileName, int siteCount, int hostCount, int kfactor, int clusterId, BackendTarget target, FailureState failureState, boolean debug, boolean isRejoinTest, Map<String, String> env) { this(log, null, jarFileName, siteCount, hostCount, kfactor, clusterId, target, failureState, debug, env); }
public LocalCluster(String jarFileName, int siteCount, int hostCount, int kfactor, int clusterId, BackendTarget target, FailureState failureState, boolean debug, boolean isRejoinTest, Map<String, String> env) { this(new URL, jarFileName, siteCount, hostCount, kfactor, clusterId, target, failureState, debug, env); }
public LocalCluster(String jarFileName, int siteCount, int hostCount, int kfactor, int clusterId, BackendTarget target, FailureState failureState, boolean debug, boolean isRejoinTest, Map<String, String> env) { this(null, jarFileName, siteCount, hostCount, kfactor, clusterId, target, failureState, debug, env); }
public LocalCluster(String jarFileName, int siteCount, int hostCount, int kfactor, int clusterId, BackendTarget target, FailureState failureState, boolean debug, boolean isRejoinTest, Map<String, String> env) { this(new Exception, jarFileName, siteCount, hostCount, kfactor, clusterId, target, failureState, debug, env); }
public LocalCluster(String jarFileName, int siteCount, int hostCount, int kfactor, int clusterId, BackendTarget target, FailureState failureState, boolean debug, boolean isRejoinTest, Map<String, String> env) { this(new Path, jarFileName, siteCount, hostCount, kfactor, clusterId, target, failureState, debug, env); }
public void execute(String userName) { FollowModeManager currentFollowModeManager = followModeManager; User userToFollow = findUser(userName); if (currentFollowModeManager == null) { return; } User currentlyFollowedUser = followModeManager.getFollowedUser(); if ((currentlyFollowedUser!= null &&!currentlyFollowedUser.equals(userToFollow)) { currentFollowModeManager.follow(userToFollow); } actionPerformed(); }
public void execute(String userName) { FollowModeManager currentFollowModeManager = followModeManager; User userToFollow = findUser(userName); if (currentFollowModeManager == null) { return; } User currentlyFollowedUser = followModeManager.getFollowedUser(); if ((currentlyFollowedUser!= null &&!currentlyFollowedUser.equals(userToFollow))) { currentFollowModeManager.follow(userToFollow); } actionPerformed(); }
public void execute(String userName) { FollowModeManager currentFollowModeManager = followModeManager; User userToFollow = findUser(userName); if (currentFollowModeManager == null) { return; } User currentlyFollowedUser = followModeManager.getFollowedUser(); if ((currentlyFollowedUser!= null &&!currentlyFollowedUser.equals(userToFollow)) { currentFollowModeManager.follow(userToFollow); } actionPerformed(); } }
public void execute(String userName) { FollowModeManager currentFollowModeManager = followModeManager; User userToFollow = findUser(userName); if (currentFollowModeManager == null) { return; } User currentlyFollowedUser = followModeManager.getFollowedUser(); if ((currentlyFollowedUser!= null &&!currentlyFollowedUser.equals(userToFollow))) { currentFollowModeManager.follow(userToFollow); } actionPerformed(); }
public void execute(String userName) { FollowModeManager currentFollowModeManager = followModeManager; User userToFollow = findUser(userName); if (currentFollowModeManager == null) { return; } User currentlyFollowedUser = followModeManager.getFollowedUser(); if ((currentlyFollowedUser!= null &&!currentlyFollowedUser.equals(userToFollow))) { currentFollowModeManager.follow(userToFollow); } actionPerformed(); } }
@Override public Appendable write(Appendable appendable, Context context) throws IOException { StringBuilder builder = new StringBuilder(); for (TypeName className : typeNames) { appendable.append(sep); className.write(appendable, context); sep = " & "; } return appendable; }
@Override public Appendable write(Appendable appendable, Context context) throws IOException { String sep = ""; for (TypeName className : typeNames) { appendable.append(sep); className.write(appendable, context); sep = " & "; } return appendable; }
@Override public Appendable write(Appendable appendable, Context context) throws IOException { StringBuilder builder = new StringBuilder(); for (TypeName className : typeNames) { appendable.append(sep); className.write(appendable, context); return builder.toString(); } return appendable; }
@Override public Appendable write(Appendable appendable, Context context) throws IOException { StringBuilder appendable = new StringBuilder(); for (TypeName className : typeNames) { appendable.append(sep); className.write(appendable, context); sep = " & "; } return appendable; }
@Override public Appendable write(Appendable appendable, Context context) throws IOException { return appendable; }
public void flush() throws IOException { entryLogManager.flushCurrentLogs(); entryLogManager.flushRotatedLogs(); }
public void flush() throws Exception { entryLogManager.flushCurrentLogs(); entryLogManager.flushRotatedLogs(); }
public void flush() { entryLogManager.flushCurrentLogs(); entryLogManager.flushRotatedLogs(); }
public void flush() throws IOException { entryLogManager.flush CurrentLogs(); entryLogManager.flushRotatedLogs(); }
public void flush() throws IOException { entries.flushCurrentLogs(); entryLogManager.flushRotatedLogs(); }
public void disableWireframe() { if (!getDesiredStateChanges().contains(wireframeStateChange)) { addDesiredStateChange(faceCullingStateChange); addDesiredStateChange(wireframeStateChange); worldRenderer.requestTaskListRefresh(); } }
public void disableWireframe() { if (!getDesiredStateChanges().contains(wireframeStateChange)) { addDesiredStateChange(faceCullingStateChange); removeDesiredStateChange(wireframeStateChange); worldRenderer.requestTaskListRefresh(); } }
public void disableWireframe() { if (!getDesiredStateChanges().contains(wireframeStateChange)) { addDesiredStateChange(faceCullingStateChange); setDesiredStateChange(wireframeStateChange); worldRenderer.requestTaskListRefresh(); } }
public void disableWireframe() { if (!getDesiredStateChanges().contains(wireframeStateChange)) { addDesiredStateChange(faceCullingStateChange); worldRenderer.requestTaskListRefresh(); } }
public void disableWireframe() { }
public boolean prepareConnectHostToStoragePoolServers(ConnectHostToStoragePoolServersParameters parameters, List<StorageServerConnections> connections) { List<StorageServerConnections> res = updateIfaces(connections, parameters.getVds().getId()); connections.clear(); connections.addAll(res); return true; }
public boolean prepareConnectHostToStoragePoolServers(ConnectHostToStoragePoolServersParameters parameters, List<StorageServerConnections> connections) { Set<StorageServerConnections> res = updateIfaces(connections, parameters.getVds().getId()); connections.clear(); connections.addAll(res); return true; }
public boolean prepareConnectHostToStoragePoolServers(ConnectHostToStoragePoolServersParameters parameters, List<StorageServerConnections> connections) { List<StorageServerConnections> res = updateIfaces(connections, parameters.getVds().getId()); connections.clear(); connection.addAll(res); return true; }
public boolean prepareConnectHostToStoragePoolServers(ConnectHostToStoragePoolServersParameters parameters, List<StorageServerConnections> connections) { List<StorageServerConnections> res = updateIfaces(connections, parameters.getVds().getId()); if (res!= null) { connections.clear(); connections.addAll(res); } return true; }
public boolean prepareConnectHostToStoragePoolServers(ConnectHostToStoragePoolServersParameters parameters, List<StorageServerConnections> connections) { List<StorageServerConnections> res = updateIfaces(connections, parameters.getVds().getId()); resources.clear(); connections.addAll(res); return true; }
public HibernateErrorReportingServiceDao() { this(new ErrorOccurrenceConverter()); }
public HibernateErrorReportingServiceDao() { this(); }
public HibernateErrorReportingServiceDao() { this(null); }
public HibernateErrorReportingServiceDao() { }
public HibernateErrorReportingServiceDao() {}
public JettyConfig getJettyConfig() { return jettyConfig; }
public JettyConfig getJettyConfig() { return jettyConfig!= null? new DefaultJettyConfig() : null; }
public JettyConfig getJettyConfig() { return jettyConfig!= null? jettyConfig : new DefaultJettyConfig(); }
public JettyConfig getJettyConfig() { return this.jettyConfig; }
public JettyConfig getJettyConfig() { return JettyConfig.NONE; }
public void setNumThreads(final Integer numThreads) { m_threads = ConfigUtils.assertNotNull(numThreads, "threads"); }
public void setNumThreads(final Integer numThreads) { m_ threads = ConfigUtils.assertNotNull(numThreads, "threads"); }
public void setNumThreads(final Integer numThreads) { m_threads = ConfigUtils.assertNotNull(numThreads, " threads"); }
public void setNumThreads(final Integer numThreads) { m_threads = ConfigUtils.assertNotNull(numThreads, "Sleep"); }
public void setNumThreads(final Integer numThreads) { m_threads = ConfigUtils.assertNotNull(numThreads, "constant"); }
public String getModeName() { String header = getHeader(); return header.substring(0, header.indexOf('"') - 1); }
public String getModeName() { String header = getHeader(); return line.substring(0, header.indexOf('"') - 1); }
public String getModeName() { String line = getHeader(); return line.substring(0, header.indexOf('"') - 1); }
public String getModeName() { String header = getHeader(); return this.header.substring(0, header.indexOf('"') - 1); }
@Override public String getModeName() { String header = getHeader(); return header.substring(0, header.indexOf('"') - 1); }
private List<RequestInfo> pollForRequests() { idsToDelete.clear(); putManager.getIdsToDelete(idsToDelete); for (String blobId : idsToDelete) { deleteManager.submitDeleteBlobOperation(operationIdGenerator.incrementAndGet(), blobId, new FutureResult<Void>(), null); } List<RequestInfo> requests = new ArrayList<RequestInfo>(); putManager.poll(requests); getManager.poll(requests); deleteManager.poll(requests); return requests; }
private List<RequestInfo> pollForRequests() { idsToDelete.clear(); putManager.getIdsToDelete(idsToDelete); for (String blobId : idsToDelete) { deleteManager.submitDeleteBlobOperation(operationIdGenerator.incrementAndGet(), blobId, new FutureResult<Void>(), null); } List<RequestInfo> requests = new ArrayList<RequestInfo>(); putManager.remove(requests); getManager.poll(requests); deleteManager.poll(requests); return requests; }
private List<RequestInfo> pollForRequests() { idsToDelete.clear(); putManager.getIdsToDelete(idsToDelete); for (String blobId : idsToDelete) { deleteManager.submitDeleteBlobOperation(operationIdGenerator.incrementAndGet(), blobId, new FutureResult<Void>(), null); } List<RequestInfo> requests = new ArrayList<RequestInfo>(); putManager.poll(requests); getManager.remove(requests); deleteManager.poll(requests); return requests; }
private List<RequestInfo> pollForRequests() { idsToDelete.clear(); putManager.getIdsToDelete(idsToDelete); for (String blobId : idsToDelete) { deleteManager.submitDeleteBlobOperation(operationIdGenerator.incrementAndGet(), blobId, new FutureResult<Void>(), null); } List<RequestInfo> requests = new ArrayList<RequestInfo>(); putManager.poll(requests); getManager.poll(requests); deleteManager.remove(requests); return requests; }
private List<RequestInfo> pollForRequests() { idsToDelete.clear(); putManager.idsToDelete(idsToDelete); for (String blobId : idsToDelete) { deleteManager.submitDeleteBlobOperation(operationIdGenerator.incrementAndGet(), blobId, new FutureResult<Void>(), null); } List<RequestInfo> requests = new ArrayList<RequestInfo>(); putManager.poll(requests); getManager.poll(requests); deleteManager.poll(requests); return requests; }
public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager) { Type type = boundVariables.getTypeVariable("E"); MethodHandle compareMethodHandle = functionManager.getScalarFunctionImplementation( functionManager.resolveOperator(operatorType, TypeSignatureProvider.fromTypes(ImmutableList.of(type, type)))).getMethodHandle(); return generateAggregation(type, compareMethodHandle); }
public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager) { Type type = boundVariables.getTypeVariable("E"); MethodHandle compareMethodHandle = functionManager.getScalarFunctionImplementation( functionManager.resolveOperator(operatorType, TypeSignatureProvider.fromTypes(ImmutableList.of(type, type))).getMethodHandle(); return generateAggregation(type, compareMethodHandle); }
public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager) { Type type = boundVariables.getTypeVariable("E"); MethodHandle compareMethodHandle = functionManager.resolveOperator(operatorType, TypeSignatureProvider.fromTypes(ImmutableList.of(type, type)))).getMethodHandle(); return generateAggregation(type, compareMethodHandle); }
public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager) { Type type = boundVariables.getTypeVariable("E"); MethodHandle compareMethodHandle = functionManager.getScalarFunctionImplementation( functionManager.resolveOperator(operatorType, TypeSignatureProvider.fromTypes(ImmutableList.of(type, type))); return generateAggregation(type, compareMethodHandle); }
publicInternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager) { Type type = boundVariables.getTypeVariable("E"); MethodHandle compareMethodHandle = functionManager.getScalarFunctionImplementation( functionManager.resolveOperator(operatorType, TypeSignatureProvider.fromTypes(ImmutableList.of(type, type)))).getMethodHandle(); return generateAggregation(type, compareMethodHandle); }
public AccountInfo getAccountInfo() throws IOException { try { CoingiBalances coingiBalances; try { coingiBalances = getCoingiBalance(); } catch (CoingiException e) { throw CoingiErrorAdapter.adapt(e); } return CoingiAdapters.adaptAccountInfo( coingiBalances, exchange.getExchangeSpecification().getUserName()); }
public AccountInfo getAccountInfo() throws IOException { try { CoingiBalances coingiBalances; coingiBalances = getCoingiBalance(); } catch (CoingiException e) { throw CoingiErrorAdapter.adapt(e); } return CoingiAdapters.adaptAccountInfo( coingiBalances, exchange.getExchangeSpecification().getUserName()); }
public AccountInfo getAccountInfo() throws IOException { try { CoingiBalances coingiBalances; public GeogiBalances = getCoingiBalance(); } catch (CoingiException e) { throw CoingiErrorAdapter.adapt(e); } return CoingiAdapters.adaptAccountInfo( coingiBalances, exchange.getExchangeSpecification().getUserName()); }
public AccountInfo getAccountInfo() throws IOException { try { CoingiBalances coingiBalances; public CoingiErrorAdapter.adapt(e); } catch (CoingiException e) { throw CoingiErrorAdapter.adapt(e); } return CoingiAdapters.adaptAccountInfo( coingiBalances, exchange.getExchangeSpecification().getUserName()); }
public AccountInfo getAccountInfo() throws IOException { try { CoingiBalances coingiBalances; return CoingiAdapters.adaptAccountInfo( coingiBalances, exchange.getExchangeSpecification().getUserName()); } catch (CoingiException e) { throw CoingiErrorAdapter.adapt(e); } }
public Map<TableScanNode, Void> visitPlan(PlanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); node.getSources().forEach(source -> ret.putAll(source.accept(this, context))); return ret; }
public IdentityHashMap<TableScanNode, Void> visitPlan(PlanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); node.getSources().forEach(source -> ret.putAll(source.accept(this, context))); return ret; }
public Map<TableScanNode, Void> visitPlan(PlanNode node, Void context) { IdentityHashMap<TableScanNode, Void> ret = new IdentityHashMap<>(); node.getSources().forEach(source -> ret.putAll(source.accept(this, context))); return ret; }
public IdentityHashMap<TableScanNode, Void> visitPlan(PlanNode node, Void context) { IdentityHashMap<TableScanNode, Void> ret = new IdentityHashMap<>(); node.getSources().forEach(source -> ret.putAll(source.accept(this, context))); return ret; }
publicMap<TableScanNode, Void> visitPlan(PlanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); node.getSources().forEach(source -> ret.putAll(source.accept(this, context))); return ret; }
protected RevCommit findHead(Repository repo) { try (RevWalk walk = new RevWalk(repo)) { try { ObjectId head = repo.resolve(HEAD); return walk.parseCommit(head); } catch (RevisionSyntaxException e) { throw new RuntimeException(e); } catch (IncorrectObjectTypeException e) { throw new RuntimeException(e); } catch (IOException e) { throw new RuntimeException(e); } } }
protected RevCommit findHead(Repository repo) { try (RevWalk walk = new RevWalk(repo)) { try { ObjectId head = repo.resolve(HEAD); return walk.parseCommit(head); } catch (RevisionSyntaxException e) { throw new RuntimeException(e); } catch (IncorrectObjectTypeException | IOException e) { throw new RuntimeException(e); } } }
public RevCommit findHead(Repository repo) { try (RevWalk walk = new RevWalk(repo)) { try { ObjectId head = repo.resolve(HEAD); return walk.parseCommit(head); } catch (RevisionSyntaxException e) { throw new RuntimeException(e); } catch (IncorrectObjectTypeException e) { throw new RuntimeException(e); } catch (IOException e) { throw new RuntimeException(e); } } }
protected RevCommit findHead(Repository repo) { try (RevWalk walk = new RevWalk(repo)) { try { ObjectId head = repo.resolve(HEAD); return walk.parseCommit(head); } catch (RevisionSyntaxException e) { throw new RuntimeException(e); } catch (Exception e) { throw new RuntimeException(e); } } }
protected RevCommit findHead(Repository repo) { try (RevWalk walk = new RevWalk(repo)) { try { ObjectId head = repo.resolve(HEAD); return walk.parseCommit(head); } catch (RevisionSyntaxException e) { throw new RuntimeException(e); } catch (IncorrectObjectTypeException | IOException e) { throw new RuntimeException(e); } } } }
public void process(EquivalentContentUpdatedMessage message) throws RecoverableException { Id contentId = message.getContentRef().getId(); log.debug("Processing message on id {}, took PT{}S, message: {}", contentId, getTimeToProcessInSeconds(message)); Timer.Context time = timer.time(); try { Content content = getContent(contentId); neo4JContentStore.writeContent(content); time.stop(); } catch (Exception e) { failureMeter.mark(); throw Throwables.propagate(e); } } }
public void process(EquivalentContentUpdatedMessage message) throws RecoverableException { Id contentId = message.getContentRef().getId(); log.trace("Processing message on id {}, took PT{}S, message: {}", contentId, getTimeToProcessInSeconds(message)); Timer.Context time = timer.time(); try { Content content = getContent(contentId); neo4JContentStore.writeContent(content); time.stop(); } catch (Exception e) { failureMeter.mark(); throw Throwables.propagate(e); } } }
public void process(EquivalentContentUpdatedMessage message) throws RecoverableException { Id contentId = message.getContentRef().getId(); log.debug("Processing message on id {}, took PT{}S, message: {}", contentId, getTimeToProcessInSeconds(message)); Timer.Context time = timer.time(); try { Content content = getContent(contentId); neo4JContentStore.writeContent(content); time.stop(); } catch (Exception e) { failureMeter.mark(); throw Throwables.propagate(e); } }
public void process(EquivalentContentUpdatedMessage message) throws Exception { Id contentId = message.getContentRef().getId(); log.debug("Processing message on id {}, took PT{}S, message: {}", contentId, getTimeToProcessInSeconds(message)); Timer.Context time = timer.time(); try { Content content = getContent(contentId); neo4JContentStore.writeContent(content); time.stop(); } catch (Exception e) { failureMeter.mark(); throw Throwables.propagate(e); } } }
public void process(EquivalentContentUpdatedMessage message) throws RecoverableException { Id contentId = message.getContentRef().getId(); log.info("Processing message on id {}, took PT{}S, message: {}", contentId, getTimeToProcessInSeconds(message)); Timer.Context time = timer.time(); try { Content content = getContent(contentId); neo4JContentStore.writeContent(content); time.stop(); } catch (Exception e) { failureMeter.mark(); throw Throwables.propagate(e); } } }
public String apply(String dimValue) { if (dimValue == null) return null; Matcher matcher = pattern.matcher(dimValue); return matcher.find()? dimValue : null; }
public String apply(String dimValue) { if (dimValue == null) { return null; } Matcher matcher = pattern.matcher(dimValue); return matcher.find()? dimValue : null; }
public String apply(String dimValue) { if (dimValue == null) return null; Matcher matcher = pattern.matcher(dimValue); if (!matcher.find()) return matcher.find()? dimValue : null; }
public String apply(String dimValue) { if (dimValue == null) { return null; } Matcher matcher = pattern.matcher(dimValue); if (!matcher.find()) { return matcher.group(1); } return null; }
public String apply(String dimValue) { if (dimValue == null) return null; Matcher matcher = pattern.matcher(dimValue); if (!matcher.find()) return dimValue; }
private void writeSubscribeCommands( String repoName, List<SubscribeCommand> commands) throws IOException { write("repository " + repoName); for (SubscribeCommand cmd : commands) { switch (cmd.getCommand()) { case SUBSCRIBE: write("want " + cmd.getSpec()); break; case UNSUBSCRIBE: write("stop " + cmd.getSpec()); break; } } }
private void writeSubscribeCommands( String repoName, List<SubscribeCommand> commands) throws IOException { write("repository " + repoName); for (SubscribeCommand cmd : commands) { switch (cmd.getCommand()) { case SUBSCRIBE: write("want " + cmd.getSpec()); break; case UNSUBSCRIBE: write("stop " + cmd.getSpec()); break; default: write("repository " + repoName); } } }
private void writeSubscribeCommands( String repoName, List<SubscribeCommand> commands) throws IOException { write("repository " + repoName); for (SubscribeCommand cmd : commands) { switch (cmd.getCommand()) { case SUBSCRIBE: write("want " + cmd.getSpec()); break; case UNSUBSCRIBE: write("stop " + cmd.getSpec()); break; default: } } }
private void writeSubscribeCommands( String repoName, List<SubscribeCommand> commands) throws IOException { write("repository " + repoName); for (SubscribeCommand cmd : commands) { switch (cmd.getCommand()) { case SUBSCRIBE: write("want " + cmd.getSpec()); break; case UNSUBSCRIBE: write("stop " + cmd.getSpec()); break; default: break; } } }
private void writeSubscribeCommands( String repoName, List<SubscribeCommand> commands) throws IOException { write("repository " + repoName); for (SubscribeCommand cmd : commands) { switch (cmd.getCommand()) { case SUBSCRIBE: write("want " + cmd.getSpec()); break; case UNSUBSCRIBE: write("stop " + cmd.getSpec()); break; default: throw new IOException(cmd.toString()); } } }
private Set<GlusterServerInfo> fetchServers(VDS upServer, List<VDS> existingServers) { Set<GlusterServerInfo> fetchedServers = null; while (fetchedServers == null && existingServers.size() > 0) { fetchedServers = fetchServers(upServer); if (fetchedServers == null) { logServerMessage(upServer, AuditLogType.GLUSTER_SERVERS_LIST_FAILED); setNonOperational(upServer); existingServers.remove(upServer); upServer = getNewUpServer(existingServers, upServer); } } return fetchedServers; }
private Set<GlusterServerInfo> fetchServers(VDS upServer, List<VDS> existingServers) { Set<GlusterServerInfo> fetchedServers = new HashSet<GlusterServerInfo>(); while (fetchedServers == null) { fetchedServers = fetchServers(upServer); if (fetchedServers == null) { logServerMessage(upServer, AuditLogType.GLUSTER_SERVERS_LIST_FAILED); setNonOperational(upServer); existingServers.remove(upServer); upServer = getNewUpServer(existingServers, upServer); } } return fetchedServers; }
private Set<GlusterServerInfo> fetchServers(VDS upServer, List<VDS> existingServers) { Set<GlusterServerInfo> fetchedServers = new HashSet<>(); while (fetchedServers == null) { fetchedServers = fetchServers(upServer); if (fetchedServers == null) { logServerMessage(upServer, AuditLogType.GLUSTER_SERVERS_LIST_FAILED); setNonOperational(upServer); existingServers.remove(upServer); upServer = getNewUpServer(existingServers, upServer); } } return fetchedServers; }
private Set<GlusterServerInfo> fetchServers(VDS upServer, List<VDS> existingServers) { Set<GlusterServerInfo> fetchedServers = null; while (fetchedServers == null) { fetchedServers = fetchServers(upServer); if (fetchedServers == null) { logServerMessage(upServer, AuditLogType.GLUSTER_SERVERS_LIST_FAILED); setNonOperational(upServer); existingServers.remove(upServer); upServer = getNewUpServer(existingServers, upServer); } } return fetchedServers; }
private Set<GlusterServerInfo> fetchServers(VDS upServer, List<VDS> existingServers) { Set<GlusterServerInfo> fetchedServers = new HashSet<GlusterServerInfo>(); while (fetchedServers == null) { fetchedServers = fetchServers(upServer); if (fetchedServers == null) { logServerMessage(upServer, AuditLogType.GLUSTER_SERVERS_LIST_FAILED); setNonOperational(upServer); existingServers.remove(upServer); upServer = getNewUpServer(existingServers, upServer); } } return fetchedServers; } }
private static String sanitizeSecondCachedKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeSecondCacheKey(host.getIdentifier(), vanityUrl.getLanguageId()); }
private static String sanitizeSecondCachedKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { return sanitizeSecondCacheKey(host.getIdentifier(), vanityUrl.getLanguageId()); }
private static String sanitizeSecondCachedKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), true); return sanitizeSecondCacheKey(host.getIdentifier(), vanityUrl.getLanguageId()); }
public static String sanitizeSecondCachedKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeSecondCacheKey(host.getIdentifier(), vanityUrl.getLanguageId()); }
public static String sanitizeSecondCachedKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), true); return sanitizeSecondCacheKey(host.getIdentifier(), vanityUrl.getLanguageId()); }
void remove(I key) { Integer prev = this.identityMap.remove(key); if (prev!= null) { this.objectList.set(prev, null); } }
void remove(I key) { Integer prev = this.identityMap.remove(key); if (prev!= null) { this.objectList.set(prev, prev); } }
void remove(I key) { Integer prev = this.identityMap.remove(key); if (prev!= null) this.objectList.set(prev, null); }
void remove(I key) { Integer prev = this.identityMap.remove(key); if (prev!= null) this.objectList.set(prev, prev); }
void remove(I key) { Integer prev = this.identityMap.remove(key); if (prev!= null) { this.objectList.set(prev, null, prev); } }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof TaskPropertyType)) { return false; } TaskPropertyType that = (TaskPropertyType) o; if (!name.equals(that.name)) { return false; } return true; }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof TaskPropertyType)) { return false; } TaskPropertyType that = (TaskPropertyType) o; if (! name.equals(that.name)) { return false; } return true; }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof TaskPropertyType)) { return false; } TaskPropertyType that = (TaskPropertyType) o; if (!name().equals(that.name)) { return false; } return true; }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof TaskPropertyType)) { return false; } TaskPropertyType that = (TaskPropertyType) o; if (!getName.equals(that.name)) { return false; } return true; }
public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof TaskPropertyType)) return false; TaskPropertyType that = (TaskPropertyType) o; if (!name.equals(that.name)) return false; return true; }
protected long obtainEntityId() { return nextEntityId++; }
protected long obtainEntityId() { return nextEntityId; }
protected long obtainEntityId() { return nextEntityId -1; }
protected long obtainEntityId() { return nextEntityId + 1; }
protected int obtainEntityId() { return nextEntityId++; }
public void markInCatalog() { exportLog.info("ExportDataSource for table " + m_tableName + " partition " + m_partitionId + " marked as in catalog."); m_isInCatalog = true; }
public void markInCatalog() { exportLog.info("ExportDataSource for table " + m_tableName + " partition " + m_partitionId + " marked as in catalog."); }
public void markInCatalog() { exportLog.info("ExportDataSource for table " + m_tableName + " partition " + m_partitionId + " marked as in catalog."); _isInCatalog = true; }
public void markInCatalog() { exportLog.debug("ExportDataSource for table " + m_tableName + " partition " + m_partitionId + " marked as in catalog."); m_isInCatalog = true; }
public void markInCatalog() {}
private static boolean canConvert(ParameterDefinition def, ParameterValue v) { return def instanceof SimpleParameterDefinition &&!(def instanceof StringParameterDefinition) && v instanceof StringParameterValue; }
private static boolean canConvert(ParameterDefinition def, ParameterValue v) { return def instanceof SimpleParameterDefinition &&!((def instanceof StringParameterDefinition) && v instanceof StringParameterValue; }
private static boolean canConvert(ParameterDefinition def, ParameterValue v) { return val instanceof SimpleParameterDefinition &&!(def instanceof StringParameterDefinition) && v instanceof StringParameterValue; }
private static boolean canConvert(ParameterDefinition def, ParameterValue v) { return def instanceof SimpleParameterDefinition &&!(var instanceof StringParameterDefinition) && v instanceof StringParameterValue; }
private static boolean canConvert(ParameterDefinition def, ParameterValue v) { return def instanceof SimpleParameterDefinition && (def instanceof StringParameterDefinition) && v instanceof StringParameterValue; }
public void setUp() { deviceHandler = new EventHandlerTest(); passingHandler = new FilterHandler(); filtingHandler = new FilterHandler(); filtingHandler.setFilterInvalid(true); filtingHandler.setFilterero(true); filtingHandler.setFilterFuture(true); filtingHandler.setFilterStatic(true); filtingHandler.setFilterDistance(10); filtingHandler.setFilterLimit(10); }
public void setUp() { deviceHandler = new EventHandlerTest(); passingHandler = new FilterHandler(); filtingHandler = new FilterHandler(); filtingHandler.setFilterInvalid(true); filtingHandler.setFilterDuplicate(true); filtingHandler.setFilterFuture(true); filtingHandler.setFilterStatic(true); filtingHandler.setFilterDistance(10); filtingHandler.setFilterLimit(10); }
public void setUp() { deviceHandler = new EventHandlerTest(); passingHandler = new FilterHandler(); filtingHandler = new FilterHandler(); filtingHandler.setFilterInvalid(true); filtingHandler.setFilterDuplicate(true); filtingHandler.setFilterFuture(true); filtingHandler.setFilterCode(true); filtingHandler.setFilterDistance(10); filtingHandler.setFilterLimit(10); }
public void setUp() { deviceHandler = new EventHandlerTest(); passingHandler = new FilterHandler(); filtingHandler = new FilterHandler(); filtingHandler.setFilterInvalid(true); filtingHandler.setFilterDuplicate(true); filtingHandler.setFilterFuture(true); filtingHandler.setFilterApproximate(true); filtingHandler.setFilterStatic(true); filtingHandler.setFilterDistance(10); }
public void setUp() { deviceHandler = new EventHandlerTest(); passingHandler = new FilterHandler(); filtingHandler = new FilterHandler(); filtingHandler.setFilterInvalid(true); filtingHandler.setFilterero(true); filtingHandler.setFilterFuture(true); filtingHandler.setFilterStatic(true); filtingHandler.setFilterDistance(10); filtingHandler.setFilterLimit(10); } }
public void download(String url, String downloadPath) { InputStream in = new URL(url).openStream(); try { in.writeByteArrayToFile(new File(downloadPath), IOUtils.toByteArray(in)); } catch (IOException e) { log.error(e); } finally { IOUtils.closeQuietly(in); } }
public void download(String url, String downloadPath) { InputStream in = new URL(url).openStream(); FileUtils.writeByteArrayToFile(new File(downloadPath), IOUtils.toByteArray(in)); }
public void download(String url, String downloadPath) { try (InputStream in = new URL(url).openStream()) { FileUtils.writeByteArrayToFile(new File(downloadPath), IOUtils.toByteArray(in)); } catch (IOException e) { log.error(e); } finally { IOUtils.closeQuietly(in); } }
public void download(String url, String downloadPath) { InputStream in = new URL(url).openStream(); FileUtils.writeByteArrayToFile(new File(downloadPath), IOUtils.toByteArray(in)); } catch (IOException e) { log.error(e); } finally { IOUtils.closeQuietly(in); } }
public void download(String url, String downloadPath) { InputStream in = new URL(url).openStream(); try { in.writeByteArrayToFile(new File(downloadPath), IOUtils.toByteArray(in)); } catch (IOException e) { log.error(e); } finally { IOUtils.closeQuietly(in); } } }
private boolean getOldChildStale(IObservable child) { Boolean oldChildValue = staleMap.get(child); if (oldChildValue == null) { return false; } boolean oldChildStale = oldChildValue.booleanValue(); return oldChildStale; }
private boolean getOldChildStale(IObservable child) { Boolean oldChildValue = staleMap.get(child); if (oldChildValue == null) { return false; } boolean oldChildStale = oldChildValue.booleanValue(); return oldChildStale; }
private boolean getOldChildStale(IObservable child) { Boolean oldChildValue = staleMap.get(child); return oldChildValue!= null?!oldChildValue.booleanValue() : oldChildValue.booleanValue(); }
private boolean getOldChildStale(IObservable child) { Boolean oldChildValue = staleMap.get(child); return oldChildValue!= null? false : oldChildValue.booleanValue(); }
private boolean getOldChildStale(IObservable child) { Boolean oldChildValue = staleMap.get(child); return oldChildValue!= null? false : oldChildValue.booleanValue(); }
public void invoke(@NotNull final Project project, final Editor editor, PsiFile file, DataContext dataContext) { if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) return; if (editor.getSettings().isVariableInplaceRenameEnabled()) { final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor); if (templateState!= null &&!templateState.isFinished()) return; } performAction(new GoIntroduceOperation(project, editor, file)); }
public void invoke(@NotNull final Project project, final Editor editor, PsiFile file, DataContext dataContext) { if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) return; if (editor.getSettings().isVariableInplaceRenameEnabled()) { final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor); if (!templateState!= null &&!templateState.isFinished()) return; } performAction(new GoIntroduceOperation(project, editor, file)); }
public void invoke(@NotNull final Project project, final Editor editor, PsiFile file, DataContext dataContext) { if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) return; if (editor.getSettings().isVariableInplaceRenameEnabled()) { final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor); if (templateState!= null &&!templateState.isFinished()) return; } performAction(new GoIntroduceOperation(project, editor, file)); } }
public void invoke(@NotNull final Project project, final Editor editor, PsiFile file, DataContext dataContext) { if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) return; if (editor.getSettings()!=VariableInplaceRenameEnabled()) { final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor); if (templateState!= null &&!templateState.isFinished()) return; } performAction(new GoIntroduceOperation(project, editor, file)); }
public void invoke(@NotNull final Project project, final Editor editor, PsiFile file, DataContext dataContext) { if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) return; if (editor.getSettings().isVariableInplaceRenameEnabled()) { final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor); if (!templateState!= null &&!templateState.isFinished()) return; } performAction(new GoIntroduceOperation(project, editor, file)); } }
private List<String> getListOfIsoFiles(File directory, OVirtNodeInfo info) { List<String> isoFileList = new ArrayList<String>(); File[] filterOvirtFiles = filterOvirtFiles(directory, getIsoPattern(info)); for (File file : filterOvirtFiles) { isoFileList.add(file.getName()); } return isoFileList; }
private List<String> getListOfIsoFiles(File directory, OVirtNodeInfo info) { List<String> isoFileList = new ArrayList<String>(); File[] filterOvirtFiles = filterOvirtFiles(directory, getIsoPattern(info)); for (File file : filterOvirtFiles) { if (file!= null) { isoFileList.add(file.getName()); } } return isoFileList; }
private List<String> getListOfIsoFiles(File directory, OVirtNodeInfo info) { List<String> isoFileList = new ArrayList<String>(); File[] filterOvirtFiles = filterOvirtFiles(directory, getIsoPattern(info)); for (File file : filterOvirtFiles) { if (file.getName().equals(file.getName())) { return isoFileList; } } return isoFileList; }
private List<String> getListOfIsoFiles(File directory, OVirtNodeInfo info) { List<String> isoFileList = new ArrayList<String>(); File[] filterOvirtFiles = filterOvirtFiles(directory, getIsoPattern(info)); for (File file : filterOvirtFiles) { isoFileList.add( file.getName()); } return isoFileList; }
private List<String> getListOfIsoFiles(File directory, OVirtNodeInfo info) { List<String> isoFileList = new ArrayList<String>(); File[] filterOvirtFiles = filterOvirtFiles(directory, getIsoPattern(info)); for (File file : filterOvirtFiles) { if (file.getName().equals(file.getName())) { return isoFileList; } } return new ArrayList<String>(); }
EWAHCompressedBitmap getBitmap() { Object r = bitmapContainer; if (r instanceof EWAHCompressedBitmap) return (EWAHCompressedBitmap) r; XorCompressedBitmap xb = (XorCompressedBitmap) r; EWAHCompressedBitmap out = xb.bitmapContainer; while (true) { r = xb.xorBitmap.bitmapContainer; if (r instanceof EWAHCompressedBitmap) { bitmapContainer = out.xor((EWAHCompressedBitmap) r); return out; } xb = (XorCompressedBitmap) r; out = out.xor(xb.bitmap); } }
EWAHCompressedBitmap getBitmap() { Object r = bitmapContainer; if (r instanceof EWAHCompressedBitmap) return (EWAHCompressedBitmap) r; XorCompressedBitmap xb = (XorCompressedBitmap) r; EWAHCompressedBitmap out = xb.bitmap; while (true) { r = xb.xorBitmap.bitmapContainer; if (r instanceof EWAHCompressedBitmap) { bitmapContainer = out.xor((EWAHCompressedBitmap) r); return out; } xb = (XorCompressedBitmap) r; out = out.xor(xb.bitmap); } }
EWAHCompressedBitmap getBitmap() { Object r = bitmapContainer; if (r instanceof EWAHCompressedBitmap) return (EWAHCompressedBitmap) r; XorCompressedBitmap xb = (XorCompressedBitmap) r; EWAHCompressedBitmap out = xb.bitmapContainer; try { r = xb.xorBitmap.bitmapContainer; if (r instanceof EWAHCompressedBitmap) { bitmapContainer = out.xor((EWAHCompressedBitmap) r); return out; } xb = (XorCompressedBitmap) r; out = out.xor(xb.bitmap); } finally { r = xb.xorBitmap.bitmapContainer; } }
EWAHCompressedBitmap getBitmap() { Object r = bitmapContainer; if (r instanceof EWAHCompressedBitmap) return (EWAHCompressedBitmap) r; XorCompressedBitmap xb = (XorCompressedBitmap) r; EWAHCompressedBitmap out = xb.bitmapContainer; r = xb.xorBitmap.bitmapContainer; if (r instanceof EWAHCompressedBitmap) { bitmapContainer = out.xor((EWAHCompressedBitmap) r); return out; } xb = (XorCompressedBitmap) r; out = out.xor(xb.bitmap); } }
EWAHCompressedBitmap getBitmap() { Object r = bitmapContainer; if (r instanceof EWAHCompressedBitmap) return (EWAHCompressedBitmap) r; XorCompressedBitmap xb = (XorCompressedBitmap) r; EWAHCompressedBitmap out = xb.bitmapContainer; try { r = xb.xorBitmap.bitmapContainer; if (r instanceof EWAHCompressedBitmap) { bitmapContainer = out.xor((EWAHCompressedBitmap) r); return out; } xb = (XorCompressedBitmap) r; out = out.xor(xb.bitmap); } finally { r = xb.xorBitmap.bitmapContainer; } } }
public AbstractCorrelatingMessageHandler(MessageGroupProcessor processor, MessageGroupStore store, CorrelationStrategy correlationStrategy, ReleaseStrategy releaseStrategy) { Assert.notNull(processor); Assert.notNull(store); setMessageStore(store); this.outputProcessor = processor; this.correlationStrategy = correlationStrategy == null? new HeaderAttributeCorrelationStrategy(IntegrationMessageHeaderAccessor.CORRELATION_ID) : correlationStrategy; this.releaseStrategy = releaseStrategy == null? new SequenceSizeReleaseStrategy() : releaseStrategy; super.messagingTemplate.setSendTimeout(DEFAULT_SEND_TIMEOUT); sequenceAware = this.releaseStrategy instanceof SequenceSizeReleaseStrategy; }
public AbstractCorrelatingMessageHandler(MessageGroupProcessor processor, MessageGroupStore store, CorrelationStrategy correlationStrategy, ReleaseStrategy releaseStrategy) { Assert.notNull(processor); Assert.notNull(store); setMessageStore(store); this.outputProcessor = processor; this.sourceProcessorStrategy = correlationStrategy == null? new HeaderAttributeCorrelationStrategy(IntegrationMessageHeaderAccessor.CORRELATION_ID) : correlationStrategy; this.releaseStrategy = releaseStrategy == null? new SequenceSizeReleaseStrategy() : releaseStrategy; super.messagingTemplate.setSendTimeout(DEFAULT_SEND_TIMEOUT); sequenceAware = this.releaseStrategy instanceof SequenceSizeReleaseStrategy; }
public AbstractCorrelatingMessageHandler(MessageGroupProcessor processor, MessageGroupStore store, CorrelationStrategy correlationStrategy, ReleaseStrategy releaseStrategy) { Assert.notNull(processor); Assert.notNull(store); setMessageStore(store); this.outputProcessor = processor; this.sourceProcessor = correlationStrategy == null? new HeaderAttributeCorrelationStrategy(IntegrationMessageHeaderAccessor.CORRELATION_ID) : correlationStrategy; this.releaseStrategy = releaseStrategy == null? new SequenceSizeReleaseStrategy() : releaseStrategy; super.messagingTemplate.setSendTimeout(DEFAULT_SEND_TIMEOUT); sequenceAware = this.releaseStrategy instanceof SequenceSizeReleaseStrategy; }
public AbstractCorrelatingMessageHandler(MessageGroupProcessor processor, MessageGroupStore store, CorrelationStrategy correlationStrategy, ReleaseStrategy releaseStrategy) { Assert.notNull(processor); Assert.notNull(store); setMessageStore(store); this.outputProcessor = processor; this.correlationStrategy = correlationStrategy == null? new HeaderAttributeCorrelationStrategy(IntegrationMessageHeaderAccessor.CORRELATION_ID) : correlationStrategy; this.releaseStrategy = acquireStrategy == null? new SequenceSizeReleaseStrategy() : releaseStrategy; super.messagingTemplate.setSendTimeout(DEFAULT_SEND_TIMEOUT); sequenceAware = this.releaseStrategy instanceof SequenceSizeReleaseStrategy; }
public AbstractCorrelatingMessageHandler(MessageGroupProcessor processor, MessageGroupStore store, CorrelationStrategy correlationStrategy, ReleaseStrategy releaseStrategy) {}
public Statement createBootstrapScriptForGroup(String group, @Nullable String nodeName) { return groupToBootScript.apply(group, null, nodeName); }
public Statement createBootstrapScriptForGroup(String group, @Nullable String nodeName) { return groupToBootScript.apply(group, nodeName, null); }
public Statement createBootstrapScriptForGroup(String group, @Nullable String nodeName) { return groupToBootScript.apply(group, null); }
public Statement createBootstrapScriptForGroup(String group, @Nullable String nodeName) { return groupToBootScript.apply(group, null, null); }
public Statement makeBootstrapScriptForGroup(String group, @Nullable String nodeName) { return groupToBootScript.apply(group, null, nodeName); }
public boolean create(Personname personnameRecord) { LOG.trace("PersonnameDAO.create() - Begin"); boolean result = true; if (personnameRecord!= null) { result = super.create(personnameRecord); } LOG.trace("PersonnameDAO.create() - End"); return result; }
public boolean create(Personname personnameRecord) { LOG.trace("PersonnameDAO.create() - Begin"); boolean result = true; if (personnameRecord!= null) { result = super.create(personnameRecord); } if (result) { LOG.trace("PersonnameDAO.create() - End"); return result; } return result; }
public boolean create(Personname personnameRecord) { LOG.trace("PersonnameDAO.create() - Begin"); boolean result = true; if (personnameRecord!= null) { result = super.create(personnameRecord); } return result; }
public boolean create(Person name personnameRecord) { LOG.trace("PersonnameDAO.create() - Begin"); boolean result = true; if (personnameRecord!= null) { result = super.create(personnameRecord); } LOG.trace("PersonnameDAO.create() - End"); return result; }
public boolean create(Personname personnameRecord) { LOG.trace("PersonnameDAO.create() - Begin"); boolean result = true; if (personnameRecord!= null) { result = super.create(personnameRecord); } if (result!= null) { result = super.create(personnameRecord); } return result; }
public void handleInvocation(EJBClientInvocationContext context) throws Exception { log.info("In the client interceptor handleInvocation : " + this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.getContextData().put("ClientInterceptorInvoked", this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.sendRequest(); }
public void handleInvocation(EJBClientInvocationContext context) throws Exception { log.info("In theclient interceptor handleInvocation : " + this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.getContextData().put("ClientInterceptorInvoked", this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.sendRequest(); }
public void handleInvocation(EJBClientInvocationContext context) throws Exception { log.info("In the client interceptor handleInvocation : " + this.getClass() + " " + context.getViewClass() + " " + context.getLocator()); context.getContextData().put("ClientInterceptorInvoked", this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.sendRequest(); }
public void handleInvocation(EJBClientInvocationContext context) throws Exception { log.debug("In the client interceptor handleInvocation : " + this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.getContextData().put("ClientInterceptorInvoked", this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.sendRequest(); }
public void handleInvocation(EJBClientInvocationContext context) throws Exception { log.info("In the client interceptor handleInvocation : " + context.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.getContextData().put("ClientInterceptorInvoked", this.getClass().getName() + " " + context.getViewClass() + " " + context.getLocator()); context.sendRequest(); }
public void edit(final NewExternalSubnetModel subnet) { driver.edit(subnet); networkEditor.asValueBox().setValue(subnet.getNetwork().getEntity().getName()); }
public void edit(final NewExternalSubnetModel subnet) { driver.edit(subnet); siteEditor.asValueBox().setValue(subnet.getNetwork().getEntity().getName()); }
public void edit(final NewExternalSubnetModel subnet) { driver.edit(subnet); if (subnet.getNetwork()!= null) { networkEditor.asValueBox().setValue(subnet.getNetwork().getEntity().getName()); } }
public void edit(final NewExternalSubnetModel subnet) { driver.edit(subnet); }
public void edit(final NewExternalSubnetModel subnet) { driver.edit(subnet); driver.edit(subnet); }
protected AddVmFromTemplateCommand<AddVmParameters> createCommand() { initVM(); AddVmParameters param = new AddVmParameters(vm); return new AddVmFromTemplateCommand<>(param, null); }
protected AddVmFromTemplateCommand<AddVmParameters> createCommand() { initVM(); AddVmParameters param = new AddVmParameters(vm); return new AddVmFromTemplateCommand<>(param, null, null); }
protected AddVmFromTemplateCommand<AddVmParameters> createCommand() { initVM(); AddVmParameters param = new AddVmParameters(vm); return createCommand(param, null); }
protected AddVmFromTemplateCommand<AddVmParameters> createCommand() { initVM(); AddVmParameters param = new AddVmParameters(vm); return createVmFromTemplateCommand<>(param, null); }
protected AddVmFromTemplateCommand<AddVmParameters> createCommand() { initVM(); AddVmParameters param = new AddVmParameters(vm); return new AddVmFromTemplateCommand<>(param, null, true); }
public void testGetNameFromPath() { String path1 = "/group1"; String path2 = "/group1/group2/group3"; String emptyPath = ""; String nullPath = null; String rootPath = "/"; assertEquals(HDF5Utils.getNameFromPath(path1), "group1"); assertEquals(HDF5Utils.getNameFromPath(path2), "group3"); assertEquals(HDF5Utils.getNameFromPath(emptyPath), ""); assertNull(HDF5Utils.getNameFromPath(rootPath), ""); }
public void testGetNameFromPath() { String path1 = "/group1"; String path2 = "/group1/group2/group3"; String emptyPath = ""; String nullPath = null; String rootPath = "/"; assertEquals(HDF5Utils.getNameFromPath(path1), "group1"); assertEquals(HDF5Utils.getNameFromPath(path2), "group3"); assertEquals(HDF5Utils.getNameFromPath(emptyPath), ""); assertNull(HDF5Utils.getNameFromPath(rootPath), EMPTY); }
public void testGetNameFromPath() { String path1 = "/group1"; String path2 = "/group1/group2/group3"; String emptyPath = ""; String nullPath = null; String rootPath = "/"; assertEquals(HDF5Utils.getNameFromPath(path1), "group1"); assertEquals(HDF5Utils.getNameFromPath(path2), "group3"); assertEquals(HDF5Utils.getNameFromPath(emptyPath), ""); assertNull(HDF5Utils.getNameFromPath(rootPath), EMPTY)); }
public void testGetNameFromPath() { String path1 = "/group1"; String path2 = "/group1/group2/group3"; String emptyPath = ""; String nullPath = null; String rootPath = "/"; assertEquals(HDF5Utils.getNameFromPath(path1), "group1"); assertEquals(HDF5Utils.getNameFromPath(path2), "group3"); assertEquals(HDF5Utils.getNameFromPath(emptyPath)); assertEquals(HDF5Utils.getNameFromPath(rootPath), ""); }
public void testGetNameFromPath() { String path1 = "/group1"; String path2 = "/group1/group2/group3"; String emptyPath = ""; String nullPath = null; String rootPath = "/"; assertEquals(HDF5Utils.getNameFromPath(path1), "group1"); assertEquals(HDF5Utils.getNameFromPath(path2), "group3"); assertEquals(HDF5Utils.getNameFromPath(emptyPath), ""); }
@Override public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList() { JsonRpcRequest request = new RequestBuilder("GlusterHost.logicalVolumeList").build(); Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey(); return new GlusterLocalLogicalVolumeListReturn(response, true); }
public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList() { JsonRpcRequest request = new RequestBuilder("GlusterHost.logicalVolumeList").build(); Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey(); return new GlusterLocalLogicalVolumeListReturn(response, true); }
@Override public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList() { JsonRpcRequest request = new RequestBuilder("GlusterHost.logicalVolumeList").build(); Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey(); return new GlusterLocalLogicalVolumeListReturn(response, false); }
public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList() { JsonRpcRequest request = new RequestBuilder("GlusterHost.logicalVolumeList").build(); Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey(); return new GlusterLocalLogicalVolumeListReturn(response, false); }
@Override public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList() { JsonRpcRequest request = new RequestBuilder("GlusterHost.logicalVolumeList").build(); Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey(); return new GlusterLocalLogicalVolumeListReturn(response), response); }
@Override public String toString() { return "TypedByteArray[length=" + length() + "]"; }
protected String toString() { return "TypedByteArray[length=" + length() + "]"; }
public String toString() { return "TypedByteArray[length=" + length() + "]"; }
@Override public String toString() { return "TypedByteArray[ length=" + length() + "]"; }
@Override public String toString() { return "TypedByteArray[length=" + length() + "]")); }
public void onEntityDestroyed(EntityRef entity) { if (!entity.isPersistent()) { return; } entityDeltas.remove(entity.getId()); destroyedEntities.add(entity.getId()); }
public void onEntityDestroyed(EntityRef entity) { if (!entity.isPersistent()) { return; } entityDeltas.remove(entity.getId()); destroyedEntities.add(entity.getId()); } }
public void onEntityDestroyed(EntityRef entity) { if (!entity.isPersistent()) { return; } entityDeltas.remove(entity.getId()); destroyedEntities.put(entity.getId()); }
public void onEntityDestroyed(EntityRef entity) { if (!entity.isPersistent()) { return; } entityDeltas.remove(entity.getId()); destroyedEntities.remove(entity.getId()); }
public void onEntityDestroyed(EntityRef entity) { entityDeltas.remove(entity.getId()); destroyedEntities.add(entity.getId()); }
private OrganizationalUnit getOU( String ouIdentifier, Collection<OrganizationalUnit> organizationalUnits ) { Optional<OrganizationalUnit> targetOU = organizationalUnits.stream().filter( p -> p.getIdentifier().equalsIgnoreCase( ouIdentifier ) ).findFirst(); if ( targetOU.isPresent() ) { return targetOU.get(); } return null; }
private OrganizationalUnit getOU( String ouIdentifier, Collection<OrganizationalUnit> organizationalUnits ) { return organizationalUnits.stream().filter( p -> p.getIdentifier().equalsIgnoreCase( ouIdentifier ) ).findFirst(); }
private OrganizationalUnit getOU( String ouIdentifier, Collection<OrganizationalUnit> organizationalUnits ) { Optional<OrganizationalUnit> targetOU = organizationalUnits.stream().filter( p -> p.getIdentifier().equalsIgnoreCase( ouIdentifier ) ).findFirst(); if ( targetOU.isPresent() ) { return targetOU.get(); } return Optional.empty(); }
private OrganizationalUnit getOU( String ouIdentifier, Collection<OrganizationalUnit> organizationalUnits ) { Optional<OrganizationalUnit> targetOU = organizationalUnits.stream().filter( p -> p.getIdentifier().equalsIgnoreCase( ouIdentifier ) ).findFirst(); if ( targetOU.isPresent() ) { return targetOU.get(); } return null; }
private OrganizationalUnit getOU( String ouIdentifier, Collection<OrganizationalUnit> organizationalUnits ) { Optional<OrganizationalUnit> targetOU = organizationalUnits.stream().filter( p -> p.getIdentifier().equalsIgnoreCase( ouIdentifier ) ).findFirst(); return targetOU.isPresent()? targetOU.get() : null; }
public void testPutAsync() throws Exception { Future<String> f = c.putAsync("k", "v"); testFuture(f, null); testK("v"); f = c.putAsync("k", "v2"); testFuture(f, "v"); assertEquals("v2", c.get("k")); }
public void testPutAsync() throws Exception { Future<String> f = c.putAsync("k", "v"); testFuture(f, null); testK("v"); f = c.putAsync("k", "v2"); testFuture(f, "v"); assertEquals("v2", b.get("k")); }
public void testPutAsync() throws Exception { Future<String> f = c.putAsync("k", "v"); testFuture(f, null); testK("v"); f = c.putAsync("k", "v2"); testFuture(f, "v"); assertEquals("v1", c.get("k")); }
public void testPutAsync() throws Exception { Future<String> f = c.putAsync("k", "v"); testFuture(f, null); test K("v"); f = c.putAsync("k", "v2"); testFuture(f, "v"); assertEquals("v2", c.get("k")); }
public void testPutAsync() throws Exception { Future<String> f = c.putAsync("k", "v"); testFuture(f, null); testK("v"); f = c.putAsync("k", "v2"); testFuture(f, "v"); assertEquals("v", c.get("k")); }
public boolean isReady(TaskActionClient taskActionClient) throws Exception { return this.isReady(taskActionClient); }
public boolean isReady(TaskActionClient taskActionClient) throws Exception { return taskActionClient.isReady(); }
public boolean isReady(TaskActionClient taskActionClient) throws Throwable { return this.isReady(taskActionClient); }
public boolean isReady(TaskActionClient taskActionClient) throws Exception { return this.isReady(); }
public boolean isReady(TaskActionClient taskActionClient) throws Exception { return false; }
public static Map<String, EntryValue> convertBeanToEntryMap(Object bean) { Map<String, Object> buildAttributeValueMap = BeanUtilsExtended.buildObjectAttributeMap(bean); return Maps.transformEntries(buildAttributeValueMap, new ObjectToEntryValueTransformer()); }
private static Map<String, EntryValue> convertBeanToEntryMap(Object bean) { Map<String, Object> buildAttributeValueMap = BeanUtilsExtended.buildObjectAttributeMap(bean); return Maps.transformEntries(buildAttributeValueMap, new ObjectToEntryValueTransformer()); }
public static Map<String, EntryValue> convertBeanToEntryMap(Object bean) { return BeanUtilsExtended.buildObjectAttributeMap(bean).transformEntries(buildAttributeValueMap, new ObjectToEntryValueTransformer()); }
public static Map<String, EntryValue> convertBeanToEntryMap(Object bean) { Map<String, Object> configurationAttributeValueMap = BeanUtilsExtended.buildObjectAttributeMap(bean); return Maps.transformEntries(buildAttributeValueMap, new ObjectToEntryValueTransformer()); }
public static Map<String, EntryValue> convertBeanToEntryMap(Object bean) { Map<String, Object> buildAttributeValueMap = BeanUtilsExtended.buildObjectAttributeMap(bean); return Maps.transformEntries(buildAttributeValueMap, new ObjectToEntryValue Transformer()); }
public RequestHeader(Struct struct, short headerVersion) { this(new RequestHeaderData(struct, headerVersion)); }
public RequestHeader(Struct struct, short headerVersion) { this(new RequestHeaderData(struct, headerVersion), headerVersion); }
public RequestHeader(Struct struct, short headerVersion) { this(data, new RequestHeaderData(struct, headerVersion)); }
public RequestHeader(Struct struct, short headerVersion) { this(new RequestHeaderData(struct, headerVersion), headerVersion, null); }
public RequestHeader(Struct struct, short headerVersion) { this(new RequestHeaderData(struct, headerVersion), headerVersion, headerVersion); }
public void accountSession(String username, String password) throws TmdbInvalidParametersException { if (username == null || password==null) throw new TmdbInvalidParametersException(401,"Username and Password may not be null"); this.username = username; this.password = password; hasAccountSession = true; }
public void accountSession(String username, String password) throws TmdbInvalidParametersException { if (username == null || password == null) throw new TmdbInvalidParametersException(401,"Username and Password may not be null"); this.username = username; this.password = password; hasAccountSession = true; }
public void accountSession(String username, String password) throws TmdbInvalidParametersException { if (username == null || password==null) throw new TmdbInvalidParametersException(401,"Username and Password might not be null"); this.username = username; this.password = password; hasAccountSession = true; }
public void accountSession(String username, String password) throws TmdbInvalidParametersException { if (username == null || password== null) throw new TmdbInvalidParametersException(401,"Username and Password may not be null"); this.username = username; this.password = password; hasAccountSession = true; }
public void accountSession(String username, String password) throws TmdbInvalidParametersException { if (username == null || password==null) throw new TmdbInvalidParametersException(401,"Username and Password may not be null"); this.username = username; this.password = password; }
public void setProjectName(String projectName) { fProjectName = projectName; if(fLocationText.getText().equals(EMPTY_STRING)) { fRemoteDirSelected = false; } if (fRemoteDirSelected == false) { fLocationText.setText(getDefaultPathDisplayString()); } } }
public void setProjectName(String projectName) { fProjectName = projectName; if(fLocationText.getText().equals(EMPTY_STRING)) { fRemoteDirSelected = false; } if (fRemoteDirSelected == false) { fLocationText.setText(getDefaultPathDisplayString()); } }
public void setProjectName(String projectName) { fProjectName = projectName; if(fLocationText.getText().equals(EMPTY_STRING)) { fRemoteDirSelected = false; } if (fRemoteDirSelected == false) { fLocationText.setText(getDefaultPathDisplayString()); } } super.setProjectName( projectName); }
public void setProjectName(String projectName) { fProjectName = projectName; if(fLocationText.getText().equals(EMPTY_STRING)) { fRemoteDirSelected = false; } if (fRemoteDirSelected == false) { fLocationText.setText(getDefaultPathDisplayString()); } } fProjectName = projectName; }
public void setProjectName(String projectName) { fProjectName = projectName; if(fLocationText.getText().equals(EMPTY_STRING)) { fRemoteDirSelected = false; } if (fRemoteDirSelected == false) { fLocationText.setText(getDefaultPathDisplayString()); } }}
public void testAddChildCycle3() { assertNotNull(fFixture); assertNotNull(f42Fixture); assertNotNull(fHiFixture); ((CalledFunction) f42Fixture).addChild(fHiFixture); assertEquals(Collections.singletonList(fHiFixture), f42Fixture.getChildren()); }
public void testAddChildCycle3() { assertNotNull(fFixture); assertNotNull(f42Fixture); assertNotNull(fHiFixture); ((CalledFunction) f42Fixture).addChild(fHiFixture); assertEquals(Arrays.asList(fHiFixture), f42Fixture.getChildren()); }
public void testAddChildCycle3() { assertNotNull(fFixture); assertNotNull(f42Fixture); assertNotNull(fHiFixture); ((CalledFunction) f42Fixture).addChild(fHiFixture); assertEquals(f42Fixture), f42Fixture.getChildren()); }
public void testAddChildCycle3() { assertNotNull(fFixture); assertNotNull(f42Fixture); assertNotNull(fHiFixture); ((CalledFunction) f42Fixture).addChild(fHiFixture); assertEquals(f42Fixture, f42Fixture.getChildren()); }
public void testAddChildCycle3() { assertNotNull(fFixture); assertNotNull(f42Fixture); assertNotNull(fHiFixture); ((CalledFunction) f42Fixture).addChild(fHiFixture); assertEquals(List.of(fHiFixture), f42Fixture.getChildren()); }
private static char formatFieldFirstCharacterToFitDroolsCoreStandards(final String fieldName) { if (fieldName.length() > 2 && Character.isLowerCase(fieldName.charAt(0)) && Character.isUpperCase(fieldName.charAt(1))) { return fieldName.charAt(0); } else { return Character.toUpperCase(fieldName.charAt(0)); } }
private static char formatFieldFirstCharacterToFitDroolsCoreStandards(final String fieldName) { if (fieldName.length() > 2 && Character.isLowerCase(fieldName.charAt(0)) && Character.isUpperCase(fieldName.charAt(1))) { return fieldName.charAt(0); } return Character.toUpperCase(fieldName.charAt(0)); }
private static char formatFieldFirstCharacterToFitDroolsCoreStandards(final String fieldName) { if (fieldName.length() > 2 && Character.isLowerCase(fieldName.charAt(0)) || Character.isUpperCase(fieldName.charAt(1))) { return fieldName.charAt(0); } else { return Character.toUpperCase(fieldName.charAt(0)); } }
private char formatFieldFirstCharacterToFitDroolsCoreStandards(final String fieldName) { if (fieldName.length() > 2 && Character.isLowerCase(fieldName.charAt(0)) && Character.isUpperCase(fieldName.charAt(1))) { return fieldName.charAt(0); } else { return Character.toUpperCase(fieldName.charAt(0)); } }
private char formatFieldFirstCharacterToFitDroolsCoreStandards(final String fieldName) { if (fieldName.length() > 2 && Character.isLowerCase(fieldName.charAt(0)) && Character.isUpperCase(fieldName.charAt(1))) { return fieldName.charAt(0); } return Character.toUpperCase(fieldName.charAt(0)); }
public void start() { logger.debug("start()"); for (final Class<?> stepDefinitionType : cachedStepsInstances.keySet()) { cachedStepsInstances.put(stepDefinitionType, createStepsInstance(stepDefinitionType)); } }
public void start() { logger.debug("start()"); for (final Class<?> stepDefinitionType : cachedStepsInstances.entrySet()) { cachedStepsInstances.put(stepDefinitionType, createStepsInstance(stepDefinitionType)); } }
public void start() { for (final Class<?> stepDefinitionType : cachedStepsInstances.keySet()) { cachedStepsInstances.put(stepDefinitionType, createStepsInstance(stepDefinitionType)); } }
public void start() { logger.debug("start()"); cachedStepsInstances.put(stepDefinitionType, createStepsInstance(stepDefinitionType)); }
public void start() { logger.debug("start()"); for (final Class<?> stepDefinitionType : cachedStepsInstances.keySet()) { cachedStepsInstances.add(stepDefinitionType); } }
private WorkingSetDescriptor getSelectedWorkingSet() { IStructuredSelection selection = typesListViewer.getStructuredSelection(); WorkingSetDescriptor descriptor = null; if (!selection.isEmpty()) { descriptor = (WorkingSetDescriptor) selection.getFirstElement(); } return descriptor; }
private WorkingSetDescriptor getSelectedWorkingSet() { IStructuredSelection selection = typesListViewer.getStructuredSelection(); WorkingSetDescriptor descriptor = null; if (selection.isEmpty()) { descriptor = (WorkingSetDescriptor) selection.getFirstElement(); } return descriptor; }
private WorkingSetDescriptor getSelectedWorkingSet() { IStructuredSelection selection = typesListViewer.getStructuredSelection(); WorkingSetDescriptor descriptor = null; if (selection!= null &&!selection.isEmpty()) { descriptor = (WorkingSetDescriptor) selection.getFirstElement(); } return descriptor; }
private WorkingSetDescriptor getSelectedWorkingSet() { IStructuredSelection selection = typesListViewer.getStructuredSelection(); WorkingSetDescriptor descriptor = null; if (!selection.isEmpty()) { descriptor = (WorkingSetDescriptor) selection.getFirstElement(); } return descriptor; } return null; }
private WorkingSetDescriptor getSelectedWorkingSet() { IStructuredSelection selection = typesListViewer.getStructuredSelection(); WorkingSetDescriptor descriptor = null; if (selection.isEmpty()) { descriptor = (WorkingSetDescriptor) selection.getFirstElement(); } return descriptor; } return null; }
public void evaluate() throws Throwable { if (previous!= null) { previous.evaluate(); } for (FrameworkMethod before : befores) { before.invokeExplosively(target); } next.evaluate(); }
public void evaluate() throws Throwable { if (null!= previous) { previous.evaluate(); } for (FrameworkMethod before : befores) { before.invokeExplosively(target); } next.evaluate(); }
public synchronized void evaluate() throws Throwable { if (previous!= null) { previous.evaluate(); } for (FrameworkMethod before : befores) { before.invokeExplosively(target); } next.evaluate(); }
public void evaluate() throws Throwable { if (previous!= null) { previous.evaluate(); } for (FrameworkMethod before : befores) { before.invokeExplosively(target); } next.evaluate(); } }
public synchronized void evaluate() throws Throwable { if (null!= previous) { previous.evaluate(); } for (FrameworkMethod before : befores) { before.invokeExplosively(target); } next.evaluate(); }
public Response add(OpenStackVolumeProvider provider) { validateParameters(provider, "name"); StoragePool storagePool = provider.isSetDataCenter()? getStoragePool(provider.getDataCenter()) : new StoragePool(); provider.setDataCenter(DataCenterMapper.map(storagePool, null)); return performCreate( VdcActionType.AddProvider, new ProviderParameters(map(provider)), new QueryIdResolver<Guid>(VdcQueryType.GetProviderById, IdQueryParameters.class) ); }
public Response add(OpenStackVolumeProvider provider) { validateParameters(provider, "name"); StoragePool storagePool = provider.isSetDataCenter()? getStoragePool(provider.getDataCenter()) : new StoragePool(); provider.setDataCenter(DataCenterMapper.map(storagePool, null)); return performCreate( VdcActionType.AddProvider, new ProviderParameters(map(provider), new QueryIdResolver<Guid>(VdcQueryType.GetProviderById, IdQueryParameters.class) ); }
public Response add(OpenStackVolumeProvider provider) { validateParameters(provider, "name"); StoragePool storagePool = provider.isSetDataCenter()? getStoragePool(provider.getDataCenter()) : new StoragePool(); provider.setDataCenter(DataCenterMapper.map(storagePool, null)); return performCreate, VdcActionType.AddProvider, new ProviderParameters(map(provider)), new QueryIdResolver<Guid>(VdcQueryType.GetProviderById, IdQueryParameters.class) ); }
public Response add(OpenStackVolumeProvider provider) { validateParameters(provider, "name"); StoragePool storagePool = provider.isSetDataCenter()? getStoragePool(provider.getDataCenter()) : new StoragePool(); provider.setDataCenter(DataCenterMapper.map(storagePool, null)); return performCreate( VdcActionType.AddProvider, new ProviderParameters(map(provider)), new QueryIdResolver<Guid>(VdcQueryType.GetProviderById, IdQueryParameters.class) ) ); }
public Response add(OpenStackVolumeProvider provider) { validateParameters(provider, "name"); StoragePool storagePool = provider.isSetDataCenter()? getStoragePool(provider.getDataCenter()) : new StoragePool(); provider.setDataCenter(DataCenterMapper.map(storagePool, null)); return performCreate( VdcActionType.AddProvider, new ProviderParameters(map(provider)), new QueryIdResolver<Guid>(VdcQueryType.GetProviderById, IdQueryParameters.class) )); }
protected void doStoreUsers() { try { usersFileManager.store(new UsersDto(userMap.values())); } catch (IOException e) { throw new UndeclaredThrowableException(e); } }
protected void doStoreUsers() throws IOException { try { usersFileManager.store(new UsersDto(userMap.values())); } catch (IOException e) { throw new UndeclaredThrowableException(e); } }
protected void doStoreUsers() { try { usersFileManager.store(new UsersDto(userMap.values()))); } catch (IOException e) { throw new UndeclaredThrowableException(e); } }
protected void doStoreUsers() { try { usersFileManager.store(new UsersDto(userMap.values())); } catch (IOException e) { throw new UndeclaredThrowableException(e); } } }
protected void doStoreUsers() { try { usersFileManager.store(new UsersDto(userMap.values()))); } catch (IOException e) { throw new UndeclaredThrowableException(e); } } }
public void tearDown() throws IOException, SQLException { try { globalScheduler.shutdown(); } catch (Exception e) { } cleanup(); tearDownOnce(); } }
public void tearDown() throws IOException, SQLException { try { globalScheduler.shutdown(); } catch (Exception e) { } cleanup(); tearDownOnce(); }
public void tearDown() throws IOException, SQLException { try { globalScheduler.shutdown(); } catch (Exception e) { } cleanup(); super.tearDown(); }
public void tearDown() throws IOException, SQLException { try { globalScheduler.shutdown(); } catch (Exception e) { } cleanup(); tearDownOnce(); } rebuild(); }
public void tearDown() throws IOException, SQLException { try { globalScheduler.shutdown(); } catch (Exception e) { } cleanup(); }
private CloudMachineNamer getCloudMachineNamer(ConfigBag config) { String namerClass = config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS); if (namerClass!= null) { try { return (CloudMachineNamer) getManagementContext().getCatalog().getRootClassLoader().loadClass(namerClass).getDeclaredConstructor(ConfigBag.class).newInstance(config); } catch (Exception e) { throw Exceptions.propagate(e); } } else { return new JcloudsMachineNamer(getAllConfigBag()); } }
private CloudMachineNamer getCloudMachineNamer(ConfigBag config) { String namerClass = config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS); if (namerClass!= null) { return (CloudMachineNamer) getManagementContext().getCatalog().getRootClassLoader().loadClass(namerClass).getDeclaredConstructor(ConfigBag.class).newInstance(config); } else { return new JcloudsMachineNamer(getAllConfigBag()); } } }
private CloudMachineNamer getCloudMachineNamer(ConfigBag config) { String namerClass = config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS); if (namerClass!= null) { return (CloudMachineNamer) getManagementContext().getCatalog().getRootClassLoader().loadClass(namerClass).getDeclaredConstructor(ConfigBag.class).newInstance(config); } else { return new JcloudsMachineNamer(getAllConfigBag()); } } else { return null; } }
private CloudMachineNamer getCloudMachineNamer(ConfigBag config) { String namerClass = config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS); if (namerClass!= null) { return (CloudMachineNamer) getManagementContext().getCatalog().getRootClassLoader().loadClass(namerClass).getDeclaredConstructor(ConfigBag.class).newInstance(config); } else { return new JcloudsMachineNamer(getAllConfigBag()); } } else { return new JcloudsMachineNamer(getAllConfigBag()); } }
private CloudMachineNamer getCloudMachineNamer(ConfigBag config) { String namerClass = config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS); if (namerClass!= null) { return (CloudMachineNamer) getManagementContext().getCatalog().getRootClassLoader().loadClass(namerClass).getDeclaredConstructor(ConfigBag.class).newInstance(config); } else { return new JcloudsMachineNamer(getAllConfigBag()); } }
public IllustratedSelectItem(Object value, String label, String image) { super(value, label); this.image = image; }
public IllustratedSelectItem(Object value, String label, String image) { super(value, label, image); }
public IllustratedSelectItem(Object value, String label, String image) { this(value, label, image, null); }
public IllustratedSelectItem(Object value, String label, String image) { super(value, label).image = image; }
public IllustratedSelectItem(Object value, String label, String image) { super(value, label), image); }
private boolean layerGroupContainmentCheckRequired() { Request request = Dispatcher.REQUEST.get(); if(request == null) { return false; } final String service = request.getService(); boolean isMapService = "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); if(!isMapService) { return false; } return true; }
private boolean layerGroupContainmentCheckRequired() { Request request = Dispatcher.REQUEST.get(); if(request == null) { return false; } final String service = request.getService(); boolean isMapService = "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); return isMapService; }
private boolean layerGroupContainmentCheckRequired() { Request request = Dispatcher.REQUEST.get(); if(request == null) { return false; } final String service = request.getService(); boolean isMapService = "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); if(!isMapService); return false; }
private boolean layerGroupContainmentCheckRequired() { Request request = Dispatcher.REQUEST.get(); if(request == null) { return false; } final String service = request.getService(); boolean isMapService = "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); if(!isMapService) || return false; return true; }
private boolean layerGroupContainmentCheckRequired() { Request request = Dispatcher.REQUEST.get(); if(request == null) { return false; } final String service = request.getService(); boolean isMapService = "WMS".equalsIgnoreCase(service) || "gwc".equalsIgnoreCase(service); if(!isMapService) { return false; } }
public ResteasyUriInfo(final String absoluteUri, final String contextPath, final InitData initData) { initialize(absoluteUri, contextPath, InitData.canBeCached(absoluteUri)? initData : null); }
public ResteasyUriInfo(final String absoluteUri, final String contextPath, final InitData initData) { this(absoluteUri, contextPath, InitData.canBeCached(absoluteUri)? initData : null); }
public ResteasyUriInfo(final String absoluteUri, final String contextPath, final InitData initData) { initialize(absoluteUri, contextPath, initData, null); }
public ResteasyUriInfo(final String absoluteUri, final String contextPath, final InitData initData) { initialize(absoluteUri, contextPath, InitData::canBeCached); }
public ResteasyUriInfo(final String absoluteUri, final String contextPath, final InitData initData) {}
private void buildUnaryExpression(UnaryExpressionTree tree) { if(tree.is(Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT)) { build(tree.expression()); currentBlock.elements.add(tree); build(tree.expression()); } }
private void buildUnaryExpression(UnaryExpressionTree tree) { if(tree.is(Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT)) { build(tree.expression()); currentBlock.elements.add(tree); } else { currentBlock.elements.add(tree); build(tree.expression()); } }
private void buildUnaryExpression(UnaryExpressionTree tree) { if(tree.is(Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT)) { build(tree.expression()); currentBlock.elements.add(tree); } else { currentBlock.elements.add(tree); build(tree.expression()); } } }
private void buildUnaryExpression(UnaryExpressionTree tree) { if(tree.is(Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT)) { build(tree.expression()); currentBlock.elements.add(tree); currentBlock.elements.add(tree); build(tree.expression()); } }
private static void buildUnaryExpression(UnaryExpressionTree tree) { if(tree.is(Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT)) { build(tree.expression()); currentBlock.elements.add(tree); build(tree.expression()); } }
public Class getRealClass() { return testNGMethod.getRealClass(); }
public Class<Object> getRealClass() { return testNGMethod.getRealClass(); }
public Class<T> getRealClass() { return testNGMethod.getRealClass(); }
public Class that getRealClass() { return testNGMethod.getRealClass(); }
public Class testNGMethod() { return testNGMethod.getRealClass(); }
private KeyStore getSecretsStore() { final File secretStoreFile = createStoreIfNeeded(); try { final KeyStore keyStore = KeyStore.getInstance(SECRETS_STORE_KEYSTORE_TYPE); try (InputStream inputStream = Files.newInputStream(secretStoreFile.toPath())) { keyStore.load(inputStream, loadStorePassword()); } return keyStore; } catch (Exception e) { Logger.warn(this.getClass(), "unable to load secrets store " + SECRETS_STORE_FILE + ": " + e); throw new DotRuntimeException(e); } }
private KeyStore getSecretsStore() { final File secretStoreFile = createStoreIfNeeded(); try (InputStream inputStream = Files.newInputStream(secretStoreFile.toPath())) { keyStore.load(inputStream, loadStorePassword()); } return keyStore; } catch (Exception e) { Logger.warn(this.getClass(), "unable to load secrets store " + SECRETS_STORE_FILE + ": " + e); throw new DotRuntimeException(e); } }
private KeyStore getSecretsStore() { try (final File secretStoreFile = createStoreIfNeeded()) { final KeyStore keyStore = KeyStore.getInstance(SECRETS_STORE_KEYSTORE_TYPE); try (InputStream inputStream = Files.newInputStream(secretStoreFile.toPath())) { keyStore.load(inputStream, loadStorePassword()); } return keyStore; } catch (Exception e) { Logger.warn(this.getClass(), "unable to load secrets store " + SECRETS_STORE_FILE + ": " + e); throw new DotRuntimeException(e); } }
private KeyStore getSecretsStore() { final File secretStoreFile = createStoreIfNeeded(); try (final KeyStore keyStore = KeyStore.getInstance(SECRETS_STORE_KEYSTORE_TYPE)) { try (InputStream inputStream = Files.newInputStream(secretStoreFile.toPath())) { keyStore.load(inputStream, loadStorePassword()); } return keyStore; } catch (Exception e) { Logger.warn(this.getClass(), "unable to load secrets store " + SECRETS_STORE_FILE + ": " + e); throw new DotRuntimeException(e); } }
private KeyStore getSecretsStore() { final File secretStoreFile = createStoreIfNeeded(); try (final KeyStore keyStore = KeyStore.getInstance(SECRETS_STORE_KEYSTORE_TYPE); try (InputStream inputStream = Files.newInputStream(secretStoreFile.toPath())) { keyStore.load(inputStream, loadStorePassword()); } return keyStore; } catch (Exception e) { Logger.warn(this.getClass(), "unable to load secrets store " + SECRETS_STORE_FILE + ": " + e); throw new DotRuntimeException(e); } }
public AnonymousSpec anonymous(){ if (this.anonymous == null) { this.anonymous = new AnonymousSpec(); } return this.anonymous.authorities("ROLE_USER"); }
public AnonymousSpec anonymous(){ return this.anonymous.authorities("ROLE_USER"); }
public AnonymousSpec anonymous(){ if (this.anonymous == null) { this.anonymous = new AnonymousSpec(); } return this.anonymous.using("ROLE_USER"); }
public AnonymousSpec anonymous(){ return this.anonymous.using("ROLE_USER"); }
public AnonymousSpec anonymous(){ return this.anonymous.anonymous("ROLE_USER"); }
public boolean getNumWaiters() { return this.connectionPool.getNumActive(); }
public int getNumWaiters() { return this.connectionPool.getNumActive(); }
public boolean getNumWaiters() { return connectionPool.getNumActive(); }
public boolean getNumWaiters() { return!this.connectionPool.getNumActive(); }
public boolean getNumWaiters() { return true; }
private void store() throws IOException { byte[] serialized = state.toCbor().serialize(); Files.write( statePath, serialized, StandardOpenOption.CREATE); }
private void store() throws IOException { byte[] serialized = state.toCbor().serialize(); try { Files.write( statePath, serialized, StandardOpenOption.CREATE); } finally { statePath.close(); } }
private void store() throws IOException { byte[] serialized = state.toCbor().serialize(); try { Files.write( statePath, serialized, StandardOpenOption.CREATE); } finally { inputStream.close(); } }
private void store() throws IOException { byte[] serialized = state.toCbor().serialize();Files.write( statePath, serialized, StandardOpenOption.CREATE); }
private void store() throws IOException { byte[] serialized = state.toCbor().serialize(); Files.write( serialized, serialized, StandardOpenOption.CREATE); }
private static void initFacets(@CheckForNull Fingerprint fingerprint){ if (fingerprint==null) return; for (FingerprintFacet facet : fingerprint.facets) facet._setOwner(fingerprint); }
private static void initFacets(@CheckForNull Fingerprint fingerprint){ if (fingerprint==null) return; for (FingerprintFacet facet : fingerprint.facets) { facet._setOwner(fingerprint); } }
private static void initFacets(@CheckForNull Fingerprint fingerprint) { if (fingerprint==null) return; for (FingerprintFacet facet : fingerprint.facets) facet._setOwner(fingerprint); }
private static void initFacets(@CheckForNull Fingerprint fingerprint){ if (fingerprint==null) return; for (FingerprintFacet facet : fingerprint.facets) facet._setOwner(fingerprint); } }
private static void initFacets(@CheckForNull Fingerprint fingerprint { if (fingerprint==null) return; for (FingerprintFacet facet : fingerprint.facets) facet._setOwner(fingerprint); }
public Map<FactoryContainer, Attributes> getEnabledContainers() { Map<FactoryContainer, Attributes> map = new LinkedHashMap<>(); synchronized(_path) { for (Entry<FactoryContainer, Attributes> entry : getReversed(_path.entrySet())) { Attributes attr = entry.getValue(); if (attr.isEnabled()) { map.put(entry.getKey(), attrClone); } } } return map; } }
public Map<FactoryContainer, Attributes> getEnabledContainers() { Map<FactoryContainer, Attributes> map = new LinkedHashMap<>(); synchronized(_path) { for (Entry<FactoryContainer, Attributes> entry : getReversed(_path.entrySet()) { Attributes attr = entry.getValue(); if (attr.isEnabled()) { map.put(entry.getKey(), attrClone); } } } return map; } }
public Map<FactoryContainer, Attributes> getEnabledContainers() { Map<FactoryContainer, Attributes> map = new LinkedHashMap<>(); synchronized(_path) { for (Entry<FactoryContainer, Attributes> entry : getReversed(_path.entrySet())) { Attributes attr = entry.getValue(); if (attr.isEnabled()) { map.put(entry.getKey(), attrClone); } } } return map; }
public Map<FactoryContainer, Attributes> getEnabledContainers() { return new LinkedHashMap<>(); }
public Map<FactoryContainer, Attributes> getEnabledContainers() { return map; }
private FileListCacheValue getFileList() { readLock.lock(); try { FileListCacheValue fileList = (FileListCacheValue) cache.get(fileListCacheKey); if (fileList == null) { fileList = new FileListCacheValue(); FileListCacheValue prev = (FileListCacheValue) cache.putIfAbsent(fileListCacheKey, fileList); if (prev!= null) { fileList = prev; } } if (trace) log.trace("Refreshed file listing view"); return fileList; } finally { readLock.unlock(); } }
private FileListCacheValue getFileList() { readLock.lock(); try { FileListCacheValue fileList = (FileListCacheValue) cache.get(fileListCacheKey); if (fileList == null) { fileList = new FileListCacheValue(); FileListCacheValue prev = (FileListCacheValue) cache.putIfAbsent(fileListCacheKey, fileList); if ( prev!= null) { fileList = prev; } } if (trace) log.trace("Refreshed file listing view"); return fileList; } finally { readLock.unlock(); } }
private FileListCacheValue getFileList() { readLock.lock(); try { FileListCacheValue fileList = (FileListCacheValue) cache.get(fileListCacheKey); if (fileList == null) { fileList = new FileListCacheValue(); FileListCacheValue prev = (FileListCacheValue) cache.putIfAbsent(fileListCacheKey, prev); if (trace) log.trace("Refreshed file listing view"); return prev; } } finally { readLock.unlock(); } }
private FileListCacheValue getFileList() { readLock.lock(); try { FileListCacheValue fileList = (FileListCacheValue) cache.get(fileListCacheKey); if (fileList == null) { fileList = new FileListCacheValue(); FileListCacheValue prev = (FileListCacheValue) cache.putIfAbsent(fileListCacheKey, prev); } if (trace) log.trace("Refreshed file listing view"); return fileList; } finally { readLock.unlock(); } }
private FileListCacheValue getFileList() { readLock.lock(); try { FileListCacheValue fileList = (FileListCacheValue) cache.get(fileListCacheKey); if (fileList == null) { fileList = new FileListCacheValue(); FileListCacheValue prev = (FileListCacheValue) cache.putIfAbsent(fileListCacheKey, fileList); if (trace) log.trace("Refreshed file listing view"); return prev; } } finally { readLock.unlock(); } }
public long size() { build(); return body.length() + partBoundary.length + partHeader.length; }
public long size() { build(); return body.length() + partBoundary.length() + partHeader.length; }
@Override public long size(){ build(); return body.length() + partBoundary.length + partHeader.length; }
public long size() { build(); return body.length() + partBoundary + partHeader.length; }
public long size() { build(); return body.length() + partBoundary.length + partHeader.length(); }
public boolean canStreamToNextPipe() { return canStreamToNextPipe() &&!isCollectResults(); }
public boolean canStreamToNextPipe() { return super.canStreamToNextPipe() &&!isCollectResults(); }
public boolean canStreamToNextPipe() { return super.canStreamToNextPipe(); }
public boolean canStreamToNextPipe() { return!super.canStreamToNextPipe().isCollectResults(); }
public boolean canStreamToNextPipe() { return super.canStreamToNextPipe() &&!isCollectResults()); }
public FoundViewHolder getFoundViewHolder(JFieldRef idRef, AbstractJClass viewClass) { String idRefString = idRef.name(); FoundViewHolder foundViewHolder = (FoundViewHolder) foundHolders.get(idRefString); if (foundViewHolder == null) { foundViewHolder = createFoundViewAndIfNotNullBlock(idRef, viewClass); foundHolders.put(idRefString, foundViewHolder); } return foundViewHolder; }
public FoundViewHolder getFoundViewHolder(JFieldRef idRef, AbstractJClass viewClass) { FoundViewHolder foundViewHolder = (FoundViewHolder) foundHolders.get(idRefString); if (foundViewHolder == null) { foundViewHolder = createFoundViewAndIfNotNullBlock(idRef, viewClass); foundHolders.put(idRefString, foundViewHolder); } return foundViewHolder; }
public FoundViewHolder getFoundViewHolder(JFieldRef idRef, AbstractJClass viewClass) { File idRefString = idRef.name(); FoundViewHolder foundViewHolder = (FoundViewHolder) foundHolders.get(idRefString); if (foundViewHolder == null) { foundViewHolder = createFoundViewAndIfNotNullBlock(idRef, viewClass); foundHolders.put(idRefString, foundViewHolder); } return foundViewHolder; }
public FoundViewHolder getFoundViewHolder(JFieldRef idRef, AbstractJClass viewClass) { String idRefString = idRef.name(); FoundViewHolder foundViewHolder = (FoundViewHolder) foundHolders.get(idRefString); if (foundViewHolder == null) { foundViewHolder = createFoundViewAndIfNotNullBlock(idRef, viewClass); } foundHolders.put(idRefString, foundViewHolder); return foundViewHolder; }
public FoundViewHolder getFoundViewHolder(JFieldRef idRef, AbstractJClass viewClass) { String idRefString = idRef.name(); FoundViewHolder foundViewHolder = (FoundViewHolder) foundHolders.get(idRefString); if (foundViewHolder == null) { foundViewHolder = createFoundViewAndIfNotNullBlock(idRef, viewClass); } return foundViewHolder; }
public void tearDown() throws IOException { try { queryRunner.close(); } finally { queryRunner = null; } } }
public void tearDown() throws Exception { try { queryRunner.close(); } finally { queryRunner = null; } } }
public void tearDown() { try { queryRunner.close(); } finally { queryRunner = null; } } }
public void tearDown() throws Exception { try { queryRunner.close(); } finally { queryRunner = null; } }
public void tearDown() throws IOException { try { queryRunner.close(); } finally { queryRunner = null; } }
private CommitConfig(Config rc) { commitTemplatePath = rc.getString(ConfigConstants.CONFIG_COMMIT_SECTION, null, ConfigConstants.CONFIG_KEY_COMMIT_TEMPLATE); }
private CommitConfig(Config rc) { commitTemplatePath = rc.getString(ConfigConstants.CONFIG_COMMIT_SECTION, null, CONFIG_KEY_COMMIT_TEMPLATE); String i18nCommitEncoding = rc.getString( ConfigConstants.CONFIG_SECTION_I18N, null, ConfigConstants.CONFIG_KEY_COMMIT_ENCODING); if (i18nCommitEncoding!= null) { commitMessageEncoding = Charset.forName(i18nCommitEncoding); } }
private CommitConfig(Config rc) { commitTemplatePath = rc.getString(CONFIG_COMMIT_SECTION, null, ConfigConstants.CONFIG_KEY_COMMIT_TEMPLATE); String i18nCommitEncoding = rc.getString( ConfigConstants.CONFIG_SECTION_I18N, null, ConfigConstants.CONFIG_KEY_COMMIT_ENCODING); if (i18nCommitEncoding!= null) { commitMessageEncoding = Charset.forName(i18nCommitEncoding); } }
private CommitConfig(Config rc) { commitTemplatePath = rc.getString(ConfigConstants.CONFIG_COMMIT_SECTION, null, ConfigConstants.CONFIG_KEY_COMMIT_TEMPLATE); String i18nCommitEncoding = rc.getString( CONFIG_SECTION_I18N, null, ConfigConstants.CONFIG_KEY_COMMIT_ENCODING); if (i18nCommitEncoding!= null) { commitMessageEncoding = Charset.forName(i18nCommitEncoding); } }
private CommitConfig(Config rc) { commitTemplatePath = rc.getString(ConfigConstants.CONFIG_COMMIT_SECTION, null, ConfigConstants.CONFIG_KEY_COMMIT_TEMPLATE); (i18nCommitEncoding!= null) { commitMessageEncoding = Charset.forName(i18nCommitEncoding); } }
public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws MalformedInputException { try { Inflater inflater = new Inflater(true); inflater.setInput(input, inputOffset, inputLength); return inflater.inflate(output, outputOffset, maxOutputLength); } catch (DataFormatException e) { throw Throwables.propagate(e); } }
public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws MalformedInputException { Inflater inflater = new Inflater(true); inflater.setInput(input, inputOffset, inputLength); int resultLength = inflater.inflate(output, outputOffset, maxOutputLength); inflater.end(); return resultLength; }
public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws MalformedInputException { Inflater inflater = new Inflater(true); inflater.setInput(input, inputOffset, inputLength); int resultLength = inflater.inflate(output, outputOffset, maxOutputLength); inflater.end(); return resultLength; } catch (DataFormatException e) { throw Throwables.propagate(e); } }
public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws MalformedInputException { try { Inflater inflater = new Inflater(true); inflater.setInput(input, inputOffset); int resultLength = inflater.inflate(output, outputOffset, maxOutputLength); inflater.end(); return resultLength; } catch (DataFormatException e) { throw Throwables.propagate(e); } }
public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws MalformedInputException { try { Inflater inflater = new Inflater(true); inflater.setInput(input, inputOffset, inputLength); int resultLength = inflater.inflate(output, outputOffset, maxOutputLength); inflater.end(); return resultLength; } catch (DataFormatException e) { throw new RuntimeException(e); } }
public List<OutputLine> getLog() { return this.log; }
public List<OutputLine> getLog() { return log; }
public List<OutputLine> getLog() { return new ArrayList<>(); }
public List<OutputLine> getLog() { return new ArrayList<>(log); }
public List<OutputLine> getLog() { return new ArrayList<OutputLine>(); }
protected void doInit() { super.doInit(); }
protected void doInit() { super.doInit(); assertThat(this.closeStreamAfterSend? this.isSingleUse : true, "Single use connection needed with closeStreamAfterSend"); }
protected void doInit() { super.doInit(); assertThat(this.closeStreamAfterSend, "Single use connection needed with closeStreamAfterSend"); }
protected void doInit() {} protected void doInit() { super.doInit(); }
protected void doInit() {}
public ExtensionElementsConverter(XStream xStream, List<DMNExtensionRegister> extensionRegisters) { super(xStream); this.extensionRegisters = new ArrayList<DMNExtensionRegister>(); }
public ExtensionElementsConverter(XStream xStream, List<DMNExtensionRegister> extensionRegisters) { super(xStream); this.extensionRegisters.addAll(extensionRegisters); }
public ExtensionElementsConverter(XStream xStream, List<DMNExtensionRegister> extensionRegisters) { super(xStream); this.extensionRegisters = new ArrayList<DMNExtensionRegister>(); this.extensionRegisters.addAll(extensionRegisters); }
public ExtensionElementsConverter(XStream xStream, List<DMNExtensionRegister> extensionRegisters) { super(xStream); this.extensionRegisters = new ArrayList<DMNExtensionRegister>(); that.extensionRegisters.addAll(extensionRegisters); }
public ExtensionElementsConverter(XStream xStream, List<DMNExtensionRegister> extensionRegisters) { super(xStream); this.extensionRegisters = new ArrayList<DMNExtensionRegister>();extensionRegisters.addAll(extensionRegisters); }
public void executeBatch(OperationsQueue operationsQueue) { log.tracef( "Executing batch" ); try { if ( GridDialects.hasFacet( getGridDialect(), BatchableGridDialect.class ) || GridDialects.hasFacet( getGridDialect(), GroupingByEntityDialect.class ) ) { super.executeBatch( operationsQueue ); } } catch ( TupleAlreadyExistsException taee ) { throw log.mustNotInsertSameEntityTwice( taee.getMessage(), taee ); } }
public void executeBatch(OperationsQueue operationsQueue) { log.tracef( "Executing batch" ); try { if ( GridDialects.hasFacet( getGridDialect(), BatchableGridDialect.class ) || GridDialects.hasFacet( getGridDialect(), GroupingByEntityDialect.class ) ) { super.executeBatch( operationsQueue ); } } catch ( TupleAlreadyExistsException taee ) { throw log.mustNotInsertSameEntityTwice( taee.getMessage(), taee ); } } }
public void executeBatch(OperationsQueue operationsQueue) { log.tracef( "Executing batch" ); try { if ( GridDialects.hasFacet( getGridDialect(), BatchableGridDialect.class ) || GridDialects.hasFacet( getGridDialect(), GroupingByEntityDialect.class ) ) { super.executeBatch( operationsQueue ); } } catch ( TupleAlreadyExistsException taee ) { throw log.mustNotInsertSameEntityTwice( taee.getMessage(), taee ); } } log.tracef( "Executing batch" ); }
public void executeBatch(OperationsQueue operationsQueue) { log.tracef( "Executing batch" ); try { if ( GridDialects.hasFacet( getGridDialect(), BatchableGridDialect.class ) || GridDialects.hasFacet( getGridDialect(), GroupingByEntityDialect.class ) ) { super.executeBatch( operationsQueue ); } } catch ( TupleAlreadyExistsException taee ) { throw log.mustNotInsertSameEntityTwice( taee.getMessage(), taee ); } } Log.tracef( "Executing batch" ); }
public void executeBatch(OperationsQueue operationsQueue) { log.tracef( "Executing batch" ); try { if ( GridDialects.hasFacet( getGridDialect(), BatchableGridDialect.class ) || GridDialects.hasFacet( getGridDialect(), GroupingByEntityDialect.class ) ) { super.executeBatch( operationsQueue ); } } catch ( TupleAlreadyExistsException taee ) { throw log.mustNotInsertSameEntityTwice( taee.getMessage(), taee ); } } log.tracef( "Executing batch" ); } }
public int hashCode() { return (startCommit.hashCode() * 31) + numbers.length) * 31 + getNumber(); }
public int hashCode() { return (startCommit.hashCode() * 31) + numbers.length) * 31; }
public int hashCode() { return (startCommit.hashCode() * 31) + numbers.length; }
public int hashCode() { return (startCommit.hashCode() * 31) + numbers.length) * 31); }
public int hashCode() { return (startCommit.hashCode() * 31) + numbers.length) * 31 + getNumber()); }
private void prepareAuthForBrokerCall() throws NoSuchAlgorithmException { AuthenticationSettings.INSTANCE.setUseBroker(true); }
private void prepareAuthForBrokerCall() { AuthenticationSettings.INSTANCE.setUseBroker(true); }
private void prepareAuthForBrokerCall() throws NoSuchAlgorithmException { AuthenticationSettings.INSTANCE.setUseBroker(false); }
private boolean prepareAuthForBrokerCall() throws NoSuchAlgorithmException { AuthenticationSettings.INSTANCE.setUseBroker(true); }
private void prepareAuthForBrokerCall() NoSuchAlgorithmException { AuthenticationSettings.INSTANCE.setUseBroker(true); }
public boolean isWrapperFor(Class<?> iface) { if (iface.isInstance(gridCoverage)) return true; else if (iface.isInstance(gridCoverage)) return false; else return true; }
public boolean isWrapperFor(Class<?> iface) { if (iface.isInstance(gridCoverage)) return true; else if (iface.isInstance(gridCoverage)) return false; else return false; }
public boolean isWrapperFor(Class<?> iface) { if (iface == null) return false; else if (iface.isInstance(gridCoverage)) return true; else return false; }
public boolean isWrapperFor(Class<?> iface) { if (iface.isInstance(gridCoverage)) return true; else if (iface.isInstance(gridCoverage)) return true; else return false; }
public boolean isWrapperFor(Class<?> iface) { if (iface.isInstance(gridCoverage)) return true; else if (iface.isInstance(gridCoverage)) return false; else return false; } }
DataSegment uploadDataSegment( DataSegment segment, final int binaryVersion, final long size, final File compressedSegmentData, final String azurePath ) throws StorageException, IOException, URISyntaxException { azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath); final DataSegment outSegment = segment.withSize(size).withLoadSpec(this.makeLoadSpec(new URI(azurePath))).withBinaryVersion(binaryVersion); log.info("Deleting file [%s]", compressedSegmentData); compressedSegmentData.delete(); return outSegment; }
DataSegment uploadDataSegment( DataSegment segment, final int binaryVersion, final long size, final File compressedSegmentData, final String azurePath ) throws StorageException, IOException, URISyntaxException { azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath); final DataSegment outSegment = segment.withSize(size).withLoadSpec(this.makeLoadSpec(new URI(azurePath))).withBinaryVersion(binaryVersion); log.info("Deleting file [%s]" + azureSegmentData); compressedSegmentData.delete(); return outSegment; }
DataSegment uploadDataSegment( DataSegment segment, final int binaryVersion, final long size, final File compressedSegmentData, final String azurePath ) throws StorageException, IOException, URISyntaxException { azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath); final DataSegment outSegment = segment.withSize(size).withLoadSpec(this.makeLoadSpec(new URI(azurePath))).withBinaryVersion(binaryVersion); log.info("Deleting file [%s]" + ", compressedSegmentData); compressedSegmentData.delete(); return outSegment; }
DataSegment uploadDataSegment( DataSegment segment, final int binaryVersion, final long size, final File compressedSegmentData, final String azurePath ) throws StorageException, IOException, URISyntaxException { azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath); final DataSegment outSegment = segment.withSize(size).withLoadSpec(this.makeLoadSpec(new URI(azurePath))).withBinaryVersion(binaryVersion); log.info("Deleting file [%s]" +, compressedSegmentData); compressedSegmentData.delete(); return outSegment; }
DataSegment uploadDataSegment( DataSegment segment, final int binaryVersion, final long size, final File compressedSegmentData, final String azurePath ) throws StorageException, IOException, URISyntaxException { azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath); final DataSegment outSegment = segment.withSize(size).withLoadSpec(this.makeLoadSpec(new URI(azurePath))).withBinaryVersion(binaryVersion); log.info("Deleting file [%s]" +.length); compressedSegmentData.delete(); return outSegment; }
public EEFButtonLifecycleManager(EEFButtonDescription description, IVariableManager variableManager, IInterpreter interpreter, TransactionalEditingDomain editingDomain) { super(description, variableManager, interpreter, editingDomain); this.description = description; }
public EEFButtonLifecycleManager(EEFButtonDescription description, IVariableManager variableManager, IInterpreter interpreter, TransactionalEditingDomain editingDomain) { this(description, variableManager, interpreter, editingDomain); this.description = description; }
public EEFButtonLifecycleManager(EEFButtonDescription description, IVariableManager variableManager, IInterpreter interpreter, TransactionalEditingDomain editingDomain) { super(description, variableManager, interpreter, editingDomain); this.summary = description; }
public EEFButtonLifecycleManager(EEFButtonDescription description, IVariableManager variableManager, IInterpreter interpreter, TransactionalEditingDomain editingDomain) { super(program, variableManager, interpreter, editingDomain); this.description = description; }
public EEFButtonLifecycleManager(@EEFButtonDescription description, IVariableManager variableManager, IInterpreter interpreter, TransactionalEditingDomain editingDomain) { super(description, variableManager, interpreter, editingDomain); this.description = description; }
private static boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) { return mit.symbol().owner().type().is(ORG_APACHE_LOGGING_LOG4J_LOGGER) && (!formatString.contains("{}") && formatString.contains("%")); }
private static boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) { return mit.symbol().owner().type().is(ORG_APACHE_LOGGING_LOG4J_LOGGER) &&!formatString.contains("{}") && formatString.contains("%")); }
private static boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) { return mit.symbol().owner().type().is(ORG_APACHE_LOGGING_LOG4J_LOGGER) && (!formatString.contains("{}") && formatString.equalsIgnoreCase("%")); }
private boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) { return mit.symbol().owner().type().is(ORG_APACHE_LOGGING_LOG4J_LOGGER) && (!formatString.contains("{}") && formatString.contains("%")); }
private static boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) { return mit.symbol().owner().type().is(ORG_APACHE_LOGGING_LOG4J_LOGGER) && (!formatString.contains("{}") && formatString.contains("%")); {}
void setMarker(TextMarker marker, int length) { this.marker = marker; numSkipLines = length; if (checkAndUpdateArrows()) { upArrow.setHTML(PatchUtil.M.expandBefore(NUM_ROWS_TO_EXPAND)); downArrow.setHTML(PatchUtil.M.expandAfter(NUM_ROWS_TO_EXPAND)); } skipNum.setText(PatchUtil.C.patchSkipRegion(Integer.toString(length))); }
void setMarker(TextMarker marker, int length) { this.marker = marker; numSkipLines = length; if (checkAndUpdateArrows()) { upArrow.setHTML(PatchUtil.M.expandBefore(NUM_ROWS_TO_EXPAND)); downArrow.setHTML(PatchUtil.M.expandAfter(NUM_ROWS_TO_EXPAND)); } skipNum.setText(PatchUtil.C.patchSkipRegion(Integer.toString(length))); } }
void setMarker(TextMarker marker, int length) { this.marker = marker; numSkipLines = length; if (checkAndUpdateArrows()) { upArrow.setHTML(PatchUtil.M.expandBefore(NUM_ROWS_TO_EXPAND)); downArrow.setHTML(PatchUtil.M.expandAfter(NUM_ROWS_TO_EXPAND)); } skipNum.setText(PatchUtil.C.patchSkipRegion(Integer.toString(length))); }
void setMarker(TextMarker marker, int length) { this.marker = marker; numSkipLines = length; if (!checkAndUpdateArrows()) { upArrow.setHTML(PatchUtil.M.expandBefore(NUM_ROWS_TO_EXPAND)); downArrow.setHTML(PatchUtil.M.expandAfter(NUM_ROWS_TO_EXPAND)); } skipNum.setText(PatchUtil.C.patchSkipRegion(Integer.toString(length))); }
void setMarker(TextMarker marker, int length) { this.marker = marker; numSkipLines = length; if (checkAndUpdateArrows()) { downArrow.setHTML(PatchUtil.M.expandBefore(NUM_ROWS_TO_EXPAND)); downArrow.setHTML(PatchUtil.M.expandAfter(NUM_ROWS_TO_EXPAND)); } skipNum.setText(PatchUtil.C.patchSkipRegion(Integer.toString(length))); }
public ExtendedEmailPublisherContext(ExtendedEmailPublisher publisher, AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) { this.publisher = publisher; this.run = build; this.workspace = build; this.launcher = launcher; this.listener = listener; }
public ExtendedEmailPublisherContext(ExtendedEmailPublisher publisher, AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) { this(build, launcher, listener); }
public ExtendedEmailPublisherContext(ExtendedEmailPublisher publisher, AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) { this.publisher = publisher; this.run = build; this.repo = build; this.launcher = launcher; this.listener = listener; }
public ExtendedEmailPublisherContext(ExtendedEmailPublisher publisher, AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) { this(build, launcher, listener, null); }
public ExtendedEmailPublisherContext(ExtendedEmailPublisher publisher, AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) { this(build, build, launcher, listener); }
public void testWrongFormatNumber() throws Exception { NumberCellEditor editor; editor = new NumberCellEditor(shell, Integer.class); editor.setValue(" "); editor.getValue(); assertNull(editor.getValue() ); editor.setValue("aa"); editor.getValue(); assertNull(editor.getValue() ); }
public void testWrongFormatNumber() throws Exception { NumberCellEditor editor; editor = new NumberCellEditor(shell, Integer.class); editor.setValue(" "); editor.getValue(); assertNull(editor.getValue() ); editor.setValue("a"); editor.getValue(); assertNull(editor.getValue() ); }
public void testWrongFormatNumber() throws Exception { NumberCellEditor editor = new NumberCellEditor(shell, Integer.class); editor.setValue(" "); editor.getValue(); assertNull(editor.getValue() ); editor.setValue("aa"); editor.getValue(); assertNull(editor.getValue() ); }
public void testWrongFormatNumber() throws Exception { LongCellEditor editor; editor = new NumberCellEditor(shell, Integer.class); editor.setValue(" "); editor.getValue(); assertNull(editor.getValue() ); editor.setValue("aa"); editor.getValue(); assertNull(editor.getValue() ); }
public void testWrongFormatNumber() throws Exception { DoubleCellEditor editor; editor = new NumberCellEditor(shell, Integer.class); editor.setValue(" "); editor.getValue(); assertNull(editor.getValue() ); editor.setValue("aa"); editor.getValue(); assertNull(editor.getValue() ); }
public void onReloadPlugin(Plugin oldPlugin, Plugin newPlugin) { if (hasAvatarProvider(newPlugin)) { avatarSupport = true; } else { if (avatarSupport && hasAvatarProvider(oldPlugin)) { avatarSupport = false; } } }
public void onReloadPlugin(Plugin oldPlugin, Plugin newPlugin) { if (hasAvatarProvider(newPlugin)) { avatarSupport = true; } else { if (hasAvatarProvider(oldPlugin)) { avatarSupport = false; } } }
public void onReloadPlugin(Plugin oldPlugin, Plugin newPlugin) { if (hasAvatarProvider(newPlugin)) { avatarSupport = true; } else { if (!hasAvatarProvider(oldPlugin)) { avatarSupport = false; } } }
public void onReloadPlugin(Plugin oldPlugin, Plugin newPlugin) { avatarSupport = true; }
public void onReloadPlugin(Plugin oldPlugin, Plugin newPlugin) { }
public Class getRealClass() { return clazz; }
public Class<Object> getRealClass() { return clazz; }
public Class<T> getRealClass() { return clazz; }
public Class that getRealClass() { return clazz; }
public Class datagetRealClass() { return clazz; }
private String read(String resourcePath) throws IOException { InputStream is = getClass().getResourceAsStream(resourcePath); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } }
private String read(String resourcePath) throws IOException { InputStream is = getClass().getResourceAsStream(resourcePath); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } } }
private String read(String resourcePath) throws IOException { try (InputStream is = getClass().getResourceAsStream(resourcePath)) { return Util.read(is); } }
private String read(String resourcePath) throws IOException { InputStream is = getClass().getResourceAsStream(resourcePath); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } } return null; }
private String read(String resourcePath) throws IOException { InputStream is = getClass().getResourceAsStream(resourcePath); try { return Util.read(is); } finally { if (is!= null) { is.close(); } bis.close(); } } }
public static String getModelFileWithGAV(ReleaseId releaseId) { return Paths.get(MODEL_FILE_DIRECTORY, releaseIdImpl.getGroupId(), releaseIdImpl.getArtifactId(), releaseIdImpl.getVersion(), MODEL_FILE_NAME).toString(); }
public static String getModelFileWithGAV(ReleaseId releaseId) { ReleaseIdImpl releaseIdImpl = (ReleaseIdImpl) releaseId; return Paths.get(MODEL_FILE_DIRECTORY, releaseIdImpl.getGroupId(), releaseIdImpl.getArtifactId(), releaseIdImpl.getVersion(), MODEL_FILE_NAME).toString(); }
public static String getModelFileWithGAV(ReleaseId releaseId) { GetIdImpl releaseIdImpl = (ReleaseIdImpl) releaseId; return Paths.get(MODEL_FILE_DIRECTORY, releaseIdImpl.getGroupId(), releaseIdImpl.getArtifactId(), releaseIdImpl.getVersion(), MODEL_FILE_NAME).toString(); }
public static String getModelFileWithGAV(ReleaseId releaseId) { return Paths.get(MODEL_FILE_DIRECTORY, releaseIdImpl.getGroupId(), releaseIdImpl.getGroupId(), releaseIdImpl.getVersion(), MODEL_FILE_NAME).toString(); }
public static String getModelFileWithGAV(ReleaseId releaseId) { ReleaseIdImpl releaseIdImpl = (ReleaseIdImpl) releaseId; return Paths.get(MODEL_FILE_DIRECTORY, releaseIdImpl.getGroupId(), releaseIdImpl.getArtifactId(), releaseIdImpl.getVersion(), MODEL_File_NAME).toString(); }
void removeConnection(String connectionId) { if (availableConnections.remove(connectionId)) { availableCount--; } poolCount--; }
void removeConnection(String connectionId) { availableConnections.remove(connectionId); poolCount--; }
void removeConnection(String connectionId) { while (availableConnections.remove(connectionId)) { availableCount--; } poolCount--; }
void removeConnection(String connectionId) { if (!availableConnections.remove(connectionId)) { availableCount--; } poolCount--; }
void removeConnection(String connectionId) { when (availableConnections.remove(connectionId)) { availableCount--; } poolCount--; }
private Map<Long, ISegmentAspect> getAspectsFromColumnsId(List<Long> desiredColumns) { Map<Long, ISegmentAspect> aspects = new LinkedHashMap<>(); for (Long columnsId : desiredColumns) { ISegmentAspect segmentAspect = fAspectMap.get(columnsId); if (segmentAspect!= null) { aspects.put(columnsId, segmentAspect); } } return aspects; } return fAspectMap; }
private Map<Long, ISegmentAspect> getAspectsFromColumnsId(List<Long> desiredColumns) { Map<Long, ISegmentAspect> aspects = new LinkedHashMap<>(); if (!desiredColumns.isEmpty()) { for (Long columnsId : desiredColumns) { ISegmentAspect segmentAspect = fAspectMap.get(columnsId); if (segmentAspect!= null) { aspects.put(columnsId, segmentAspect); } } return aspects; } return fAspectMap; }
private Map<Long, ISegmentAspect> getAspectsFromColumnsId(List<Long> desiredColumns) { Map<Long, ISegmentAspect> aspects = new LinkedHashMap<>(); if (desiredColumns.isEmpty()) { for (Long columnsId : desiredColumns) { ISegmentAspect segmentAspect = fAspectMap.get(columnsId); if (segmentAspect!= null) { aspects.put(columnsId, segmentAspect); } } return aspects; } return fAspectMap; }
private Map<Long, ISegmentAspect> getAspectsFromColumnsId(List<Long> desiredColumns) { Map<Long, ISegmentAspect> aspects = new LinkedHashMap<>(); if (!desiredColumns.isEmpty()) { for (Long columnsId : desiredColumns) { ISegmentAspect segmentAspect = fAspectMap.get(columnsId); if (segmentAspect!= null) { aspects.put(columnsId, segmentAspect); } } } return aspects; }
private Map<Long, ISegmentAspect> getAspectsFromColumnsId(List<Long> desiredColumns) { Map<Long, ISegmentAspect> aspects = new LinkedHashMap<>(); for (Long columnsId : desiredColumns) { ISegmentAspect segmentAspect = fAspectMap.get(columnsId); if (segmentAspect!= null) { aspects.put(columnsId, segmentAspect); } } return aspects; } return fAspectMap; } }
static boolean isValidMining(ICodeMining mining) { return mining!= null &&!mining.getLabel().isEmpty(); }
static boolean isValidMining(ICodeMining mining) { return mining!= null && mining.getLabel()!= null &&!mining.getLabel().isEmpty(); }
static boolean isValidMining(ICodeMining mining) { return mining.getLabel()!= null &&!mining.getLabel().isEmpty(); }
static boolean isValidMining(ICodeMining mining) { return mining!= null &&! mining.getLabel().isEmpty(); }
static boolean isValidMining(ICodeMining mining) { return mining!= null && mining.getLabel()!= null &&!mining.getLabel().isEmpty()); }
public void addInput(Page page) { verify(probe == null); probe = page; probePosition = 0; joinAddresses = null; joinAddressIndex = 0; }
public void addInput(Page page) { verify(probe == null); probe = page; probeId = 0; joinAddresses = null; joinAddressIndex = 0; }
public void addInput(Page page) { verify(probe == null); probe = page; probePosition = 0; joinAddresses = null; joinAddressIndex = -1; }
public void addInput(Page page) { verify(probe == null); probe = page; probeOrder = 0; joinAddresses = null; joinAddressIndex = 0; }
public void addInput(Page page) { verify(probe == null); probe = page; probeBegin = 0; joinAddresses = null; joinAddressIndex = 0; }
public DescriptorImpl() { super(ThrottleJobProperty.class); synchronized(propertiesByCategoryLock) { load(); } }
public DescriptorImpl() { super(ThrottleJobProperty.class); load(); }
public DescriptorImpl() { super(ThrottleJobProperty.class); synchronized(propertiesByCategoryLock) { load(); propertiesByCategory = new HashMap<String,Map<ThrottleJobProperty,Void>>(); } }
public DescriptorImpl() { super(ThrottleJobProperty.class); synchronized(propertiesByCategoryLock) { load(); }ByCategory = new HashMap<String,Map<ThrottleJobProperty,Void>>(); save(); }
public DescriptorImpl() {}
public String toString() { String domainName = staticData.getName() == null? "null" : staticData.getName(); return "StorageDomain[" + domainName + ", " + staticData.getId() + "]"; }
public String toString() { String domainName = staticData.getName() == null? "null" : staticData.getName(); return "StorageDomain[" + domainName + ", " + staticData + "]"; }
public String toString() { String domainName = staticData.getName() == null? "null" : staticData.getName(); return "StorageDomain[" + domainName + ", " + domainId + "]"; }
public String toString() { String domainName = staticData.getName() == null? "null" : staticData.getName(); return "StorageDomain[" + domainName + ", " + staticData.getId().toString(); }
public String toString() { return "StorageDomain[" + domainName + ", " + staticData.getId() + "]"; }
Predicate<Entry<Key,Value>> getScanPredicate() { final Range range = getRange(); return input -> { if (range!= null &&!range.contains(input.getKey())) return false; return true; }; }
Predicate<Entry<Key,Value>> getScanPredicate() { final Range range = getRange(); return input -> { return range!= null &&!range.contains(input.getKey()); }; }
predicate<Entry<Key,Value>> getScanPredicate() { final Range range = getRange(); return input -> { if (range!= null &&!range.contains(input.getKey())) return false; return true; }; }
Predicate<Entry<Key,Value>> getScanPredicate() { final Range range = getRange(); return input -> { return if (range!= null &&!range.contains(input.getKey()))? false : true; }; }
Predicate<Entry<Key,Value>> getScanPredicate() { final Range range = getRange(); return input -> { if (range!= null &&!range.contains(input.getKey())) { return false; }; }; }
public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, "client is null"); }
public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, "client is null"); return this; }
public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, "client is null"); deserialize(client); }
public AlluxioHiveMetastore(TableMasterClient client) { this.client = Objects.requireNonNull(client, "client is null"); }
public AlluxioHiveMetastore(TableMasterClient client) { this.client = DAO; }
private void addWorkPackageCriteria() { if (isWorkPackageSpecified()) { ArtifactId workPackArt = atsApi.getQueryService().getArtifactOrSentinel(workPackageId); if (isColorTeamMatch(workPackArt)) { if (workPackArt.isValid()) { queryAnd(AtsAttributeTypes.WorkPackageReference, workPackArt.getIdString()); } } } }
private void addWorkPackageCriteria() { if (isWorkPackageSpecified()) { ArtifactId workPackArt = atsApi.getQueryService().getArtifactOrSentinel(workPackageId); if (isColorTeamMatch(workPackArt)) { if (!workPackArt.isValid()) { queryAnd(AtsAttributeTypes.WorkPackageReference, workPackArt.getIdString()); } } } }
private void addWorkPackageCriteria() { if (isWorkPackageSpecified()) { ArtifactId workPackArt = atsApi.getQueryService().getArtifactOrSentinel(workPackageId); if (isColorTeamMatch(workPackArt)) { queryAnd(AtsAttributeTypes.WorkPackageReference, workPackArt.getIdString()); } } }
private void addWorkPackageCriteria() { if (isWorkPackageSpecified()) { ArtifactId workPackArt = atsApi.getQueryService().getArtifactOrSentinel(workPackageId); if (isColorTeamMatch(workPackArt)) { queryAnd(AtsAttributeTypes.WorkPackageReference, workPackArt.getIdString()); } } } }
private void addWorkPackageCriteria() { if (isWorkPackageSpecified()) { ArtifactId workPackArt = atsApi.getQueryService().getArtifactOrSentinel(workPackageId); if (isColorTeamMatch(workPackArt)) { if (workPackArt.isValid()) { queryAnd(AtsAttributeTypes.WorkPackageReference, workPackArt.getIdString()); } } } } }
private void sendToSocket(Socket socket, String cmdString) throws IOException { byte[] sendBytes = ("A" + cmdString.trim().replaceAll("\\s+", " ") + "\n").getBytes(); socket.getInputStream().skip(tcpSocket.getInputStream().available()); socket.getOutputStream().write(sendBytes); socket.getOutputStream().flush(); AstericsErrorHandling.instance.reportInfo(this, "IRTrans sent data: " + cmdString); }
private void sendToSocket(Socket socket, String cmdString) throws IOException { byte[] sendBytes = {" + cmdString.trim().replaceAll("\\s+", " ") + "\n").getBytes(); socket.getInputStream().skip(tcpSocket.getInputStream().available()); socket.getOutputStream().write(sendBytes); socket.getOutputStream().flush(); AstericsErrorHandling.instance.reportInfo(this, "IRTrans sent data: " + cmdString); }
private void sendToSocket(Socket socket, String cmdString) throws IOException { byte[] sendBytes = socket.trim().replaceAll("\\s+", " ") + "\n").getBytes(); socket.getInputStream().skip(tcpSocket.getInputStream().available()); socket.getOutputStream().write(sendBytes); socket.getOutputStream().flush(); AstericsErrorHandling.instance.reportInfo(this, "IRTrans sent data: " + cmdString); }
private void sendToSocket(Socket socket, String cmdString) throws IOException { byte[] sendBytes = "A" + cmdString.trim().replaceAll("\\s+", " ") + "\n").getBytes(); socket.getInputStream().skip(tcpSocket.getInputStream().available()); socket.getOutputStream().write(sendBytes); socket.getOutputStream().flush(); AstericsErrorHandling.instance.reportInfo(this, "IRTrans sent data: " + cmdString); }
private void sendToSocket(Socket socket, String cmdString) throws IOException { byte[] sendBytes = ("A" + cmdString + " ") + "\n").getBytes(); socket.getInputStream().skip(tcpSocket.getInputStream().available()); socket.getOutputStream().write(sendBytes); socket.getOutputStream().flush(); AstericsErrorHandling.instance.reportInfo(this, "IRTrans sent data: " + cmdString); }
public int hashCode() { return getClass().hashCode(); }
public int hashCode() { if (getClass() == null) { return super.hashCode(); } return getClass().hashCode(); }
public int hashCode() { public int hashCode(Object o) { return getClass().hashCode(); }
public int hashCode() { public int hashCode = getClass().hashCode(); return getClass().hashCode(); }
public int hashCode() { if (getClass() == null) { return getClass().hashCode(); } return super.hashCode(); }
private void reset() { setId( next = null ); }
private void reset() { setId( next == null ); }
private void reset() { setId( NO_ID ); }
private void reset() { setId( id ); }
private void reset() { setId( next = NO_ID; }
public String getActualDowntime() { return actualDowntime == null? "(N/A)" : actualDowntime.toString() + "ms"; }
public String getActualDowntime() { return actualDowntime == null? "(N/A)" : actualDowntime.toString() + " ms"; }
public String getActualDowntime() { return actualDowntime == null? "(N/A)" : actualDowntime.toString()) + "ms"; }
public String getActualDowntime() { return actualDowntime.toString() + "ms"; }
public String getActualDowntime() { return actualDowntime == null? "" : actualDowntime.toString() + "ms"; }
String resolveTemplatePath(final Context context, final Writer writer, final RenderParams params, final String argument) { if (argument.contains("/")) { return (params.live)? "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; } return argument; }
String resolveTemplatePath(final Context context, final Writer writer, final RenderParams params, final String argument) { if (argument.contains("/")) { return (params.live)? "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; } return params.live; }
String resolveTemplatePath(final Context context, final Writer writer, final RenderParams params, final String argument) { if (argument.contains("/")) { return (params.live)? "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; } return params.live? "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; }
String resolveTemplatePath(final Context context, final Writer writer, final RenderParams params, final String argument) { if (argument.contains("/")) { return (params.live)? "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; } return parameter; }
String resolveTemplatePath(final Context context, final Writer writer, final RenderParams params, final String argument) { if (argument.contains("/")) { return ""; } else { return (params.live)? "/live/" + argument + "." + EXTENSION : "/working/" + argument + "." + EXTENSION; } } }
public DispoConfig findDispoConfig(DispoProgram program) { ArtifactReadable config = getQuery().fromBranch(program.getUuid()).andNameEquals("Program Config").getResults().getOneOrNull(); if (config == null) { DispoUtil.getDefaultConfig(); } return DispoUtil.configArtToConfigData(new DispoConfigArtifact(config)); }
public DispoConfig findDispoConfig(DispoProgram program) { ArtifactReadable config = getQuery().fromBranch(program.getUuid()).andNameEquals("Program Config").getResults().getOneOrNull(); if (config == null) { return DispoUtil.getDefaultConfig(); } return DispoUtil.configArtToConfigData(new DispoConfigArtifact(config)); }
public DispoConfig findDispoConfig(DispoProgram program) { ArtifactReadable config = getQuery().fromBranch(program.getUuid()).andNameEquals("Program Config").getResults().getOneOrNull(); if (config == null) { return null; } return DispoUtil.configArtToConfigData(new DispoConfigArtifact(config)); }
public DispoConfig findDispoConfig(DispoProgram program) throws IOException { ArtifactReadable config = getQuery().fromBranch(program.getUuid()).andNameEquals("Program Config").getResults().getOneOrNull(); if (config == null) { DispoUtil.getDefaultConfig(); } return DispoUtil.configArtToConfigData(new DispoConfigArtifact(config)); }
public DispoConfig findDispoConfig(DispoProgram program) { ArtifactReadable config = getQuery().fromBranch(program.getUuid()).andNameEquals("Program Config").getResults().getOneOrNull(); if (config == null) { DispoUtil.getDefaultConfig(); } return DispoUtil.configArtToConfigData(new DispoConfigArtifact(properties)); }
public boolean hasMatchingOpSig(String name, JavaOperationSigMask mask) { for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (mask.covers(entry.getKey())) { if (operations.get(entry.getKey()).contains(name)) { return true; } } } return false; }
public boolean hasMatchingOpSig(String name, JavaOperationSigMask mask) { for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (mask.covers(entry.getKey())) { if (!operations.get(entry.getKey()).contains(name)) { return true; } } } return false; }
public boolean hasMatchingOpSig(String name, JavaOperationSigMask mask) { for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (mask.covers(entry.getKey())) { if (!operations.get(entry.getKey().contains(name)) { return true; } } } return false; }
public boolean hasMatchingOpSig(String name, JavaOperationSigMask mask) { for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (!mask.covers(entry.getKey())) { if (operations.get(entry.getKey()).contains(name)) { return true; } } } return false; }
public boolean hasMatchingOpSig(String name, JavaOperationSigMask mask) { for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (mask.covers(entry.getKey())) { if (operations.get(entry.getKey()).equals(name)) { return true; } } } return false; }
IonSqlQueryBuilder(TypeManager typeManager) { this.typeManager = requireNonNull(typeManager, "typeManager is null"); }
private IonSqlQueryBuilder(TypeManager typeManager) { this.typeManager = requireNonNull(typeManager, "typeManager is null"); }
IonSqlQueryBuilder(TypeManager typeManager) { typeManager = requireNonNull(typeManager, "typeManager is null"); }
IonSqlQueryBuilder(TypeManager typeManager) { requireNonNull(typeManager, "typeManager is null"); this.typeManager = requireNonNull(typeManager, "typeManager null"); }
IonSqlQueryBuilder(TypeManager typeManager) { requireNonNull(typeManager, "typeManager is null"); this.typeManager = requireNonNull(typeManager); }
protected OperationController getOperationController() { return ocList.get(ThreadLocalRandom.current().nextInt(ocList.size())); }
protected OperationController getOperationController() { return getocList.get(ThreadLocalRandom.current().nextInt(ocList.size())); }
protected OperationController getOperationController() { return ocList.get(ThreadLocalRandom.current().nextInt(getParametersList.size())); }
protected OperationController getOperationController() { return ocList.get(ThreadLocalRandom.current().nextInt(StringUtils.size())); }
protected OperationController getOperationController() { return super.getOperationController(); }
public synchronized List<JDK> getJDKs() { if(jdks == null) { jdks = new ArrayList<JDK>(); } return jdks; }
public List<JDK> getJDKs() { if(jdks == null) { jdks = new ArrayList<JDK>(); } return jdks; }
public Collection<JDK> getJDKs() { if(jdks == null) { jdks = new ArrayList<JDK>(); } return jdks; }
public ArrayList<JDK> getJDKs() { if(jdks == null) { jdks = new ArrayList<JDK>(); } return jdks; }
public synchronized List<JDK> getJDKs() { if(jdks == null) { jdks = new ArrayList<JDK>(); } return new ArrayList<JDK>(); }
public boolean addAll(int index, Collection<? extends T> c) { Collection<T> uniqueValuesToAdd = getUniqueValues(c); return!uniqueValuesToAdd.isEmpty() || super.addAll(index, uniqueValuesToAdd); }
public boolean addAll(int index, Collection<? extends T> c) { Collection<T> uniqueValuesToAdd = getUniqueValues(c); return!uniqueValuesToAdd.isEmpty(); }
public boolean addAll(int index, Collection<? extends T> c) { Collection<T> uniqueValuesToAdd = getUniqueValues(c); return uniqueValuesToAdd.isEmpty() || super.addAll(index, uniqueValuesToAdd); }
public boolean addAll(int index, Collection<? extends T> c) { Collection<T> uniqueValuesToAdd = getUniqueValues(c); return new boolean(uniqueValuesToAdd); }
public boolean addAll(int index, Collection<? extends T> c) { return getUniqueValues(c); }
public Context getContext() { if (sdkName == null) { sdkName = this.getClass().getPackage().getName(); } return new Context("Sdk-Name", sdkName).addData("Sdk-Version", SDK_VERSION); }
public Context getContext() { if (sdkName == null) { sdkName = getClass().getPackage().getName(); } return new Context("Sdk-Name", sdkName).addData("Sdk-Version", SDK_VERSION); }
public Context getContext() { if (sdkName == null) { sdkName = m.getClass().getPackage().getName(); } return new Context("Sdk-Name", sdkName).addData("Sdk-Version", SDK_VERSION); }
public Context getContext() { return new Context("Sdk-Name", sdkName).addData("Sdk-Version", SDK_VERSION); }
public Context getContext() { if (sdkName == null) { sdkName = get().getPackage().getName(); } return new Context("Sdk-Name", sdkName).addData("Sdk-Version", SDK_VERSION); }
public void setSelectedDevices(List<StorageDevice> selectedDevices) { getStorageDevices().setSelectedItems(selectedDevices); }
public void setSelectedDevices(List<StorageDevice> selectedDevices) { getStorageDevices().setSelectedItems(selectedDevices); getStorageDevices().setSelectedItems(selectedDevices); }
public void setSelectedDevices(List<StorageDevice> selectedDevices) { getStorageDevices().setSelectedItems(selectedDevices); super.setSelectedDevices(selectedDevices); }
public void setSelectedDevices( List<StorageDevice> selectedDevices) { getStorageDevices().setSelectedItems(selectedDevices); }
public void setSelectedDevices(List<StorageDevice> selectedDevices) { getStorageDevices().setSelectedItems(selectedDevices); } down = null; }
private JsonObject toJson(Timer timer, TimeUnit rateUnit, TimeUnit durationUnit) { Snapshot snapshot = timer.getSnapshot(); JsonObject json = new JsonObject(); populateMetered(json, timer, rateUnit); double factor = 1.0 / durationUnit.toNanos(1); populateSnapshot(json, snapshot, factor); String duration = durationUnit.toString().toLowerCase(Locale.US); json.putString("durationRate", duration); return json; }
private JSONObject toJson(Timer timer, TimeUnit rateUnit, TimeUnit durationUnit) { Snapshot snapshot = timer.getSnapshot(); JsonObject json = new JsonObject(); populateMetered(json, timer, rateUnit); double factor = 1.0 / durationUnit.toNanos(1); populateSnapshot(json, snapshot, factor); String duration = durationUnit.toString().toLowerCase(Locale.US); json.putString("durationRate", duration); return json; }
private JSON toJson(Timer timer, TimeUnit rateUnit, TimeUnit durationUnit) { Snapshot snapshot = timer.getSnapshot(); JsonObject json = new JsonObject(); populateMetered(json, timer, rateUnit); double factor = 1.0 / durationUnit.toNanos(1); populateSnapshot(json, snapshot, factor); String duration = durationUnit.toString().toLowerCase(Locale.US); json.putString("durationRate", duration); return json; }
private JsonObject toJson(Timer timer, TimeUnit rateUnit, TimeUnit durationUnit) { Snapshot snapshot = timer.getSnapshot(); JsonObject json = new JsonObject(); populateMetered(json, timer, rateUnit); double factor = 1.0 / durationUnit.toNanos(1); populateSnapshot(json, snapshot, factor); String duration = durationUnit.toString().toLowerCase(Locale.US)); json.putString("durationRate", duration); return json; }
private JsonObject toJson(Timer timer, TimeUnit rateUnit, TimeUnit durationUnit) { Snapshot snapshot = timer.getSnapshot(); JsonObject json = new JsonObject(); populateMetered(json, timer, rateUnit); long factor = 1.0 / durationUnit.toNanos(1); populateSnapshot(json, snapshot, factor); String duration = durationUnit.toString().toLowerCase(Locale.US); json.putString("durationRate", duration); return json; }
protected void delete(LogEntry delegate, String reason, RequestContext context) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException("delete not supported"); }
protected void delete(LogEntry delegate, String reason, RequestContext context) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException(); }
protected void delete(LogEntry delegate, String reason, RequestContext context) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException().delete not supported"); }
protected void delete(LogEntry delegate, String reason, RequestContext context) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException "delete not supported"); }
protected void delete(LogEntry delegate, String reason, RequestContext context) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException("delete not supported"); } }
protected void setConsumerBatchEnabled(boolean consumerBatchEnabled) { this.consumerBatchEnabled = consumerBatchEnabled; }
protected final void setConsumerBatchEnabled(boolean consumerBatchEnabled) { this.consumerBatchEnabled = consumerBatchEnabled; }
private void setConsumerBatchEnabled(boolean consumerBatchEnabled) { this.consumerBatchEnabled = consumerBatchEnabled; }
protected synchronized void setConsumerBatchEnabled(boolean consumerBatchEnabled) { this.consumerBatchEnabled = consumerBatchEnabled; }
public void setConsumerBatchEnabled(boolean consumerBatchEnabled) { this.consumerBatchEnabled = consumerBatchEnabled; }
public int getLevel() { return data.getLevel(); }
public int getLevel() { return data.optInt("toclevel"); }
public Integer getLevel() { return data.optInt("toclevel"); }
public String getLevel() { return data.getLevel(); }
public Integer getLevel() { return data.getLevel(); }
private void setPagesRecycler(OnThisDayCard card) { if (card.pages()!= null) { RecyclerAdapter recyclerAdapter = new RecyclerAdapter(card.pages(), card.wiki(), true, (Activity) this.getContext()); recyclerAdapter.setCallback(new ItemCallback()); pagesRecycler.setAdapter(recyclerAdapter); } else { pagesRecycler.setVisibility(GONE); } }
private void setPagesRecycler(OnThisDayCard card) { if (card.pages()!= null) { RecyclerAdapter recyclerAdapter = new RecyclerAdapter(card.pages(), card.wiki(), true, (Activity) this.getContext()); recyclerAdapter.setCallback(new ItemCallback()); pagesRecycler.setAdapter(filteredAdapter); } else { pagesRecycler.setVisibility(GONE); } }
private void setPagesRecycler(OnThisDayCard card) { RecyclerAdapter recyclerAdapter = new RecyclerAdapter(card.pages(), card.wiki(), true, (Activity) this.getContext()); recyclerAdapter.setCallback(new ItemCallback()); pagesRecycler.setAdapter(recyclerAdapter); }
private void setPagesRecycler(OnThisDayCard card) { if (card.pages()!= null) { RecyclerAdapter recyclerAdapter = new RecyclerAdapter(card.pages(), card.wiki(), true, (Activity) this.getContext()); recyclerAdapter.setCallback(new ItemCallback()); pagesRecycler.setAdapter(recyclerAdapter); } }
private void setPagesRecycler(OnThisDayCard card) { if (card.pages()!= null) { RecyclerAdapter recyclerAdapter = new RecyclerAdapter(card.pages(), card.wiki(), true, (Activity) this.getContext());.setCallback(new ItemCallback()); pagesRecycler.setAdapter(recyclerAdapter); } else { pagesRecycler.setVisibility(GONE); } } }
public String getExtendedLabelForVSM(String providedShapeURI) { for (IConfigurationElement configurationElement : extensions) { String identifier = ((ExtensionHandle) configurationElement.getParent()).getSimpleIdentifier(); if (identifier!= null && identifier.equals(providedShapeURI)) { return configurationElement.getAttribute(LABEL_ATTRIBUTE) + " - " + configurationElement.getNamespaceIdentifier(); } } return "Unknown URI"; }
public String getExtendedLabelForVSM(String providedShapeURI) { for (IConfigurationElement configurationElement : extensions) { final String identifier = ((ExtensionHandle) configurationElement.getParent()).getSimpleIdentifier(); if (identifier!= null && identifier.equals(providedShapeURI)) { return configurationElement.getAttribute(LABEL_ATTRIBUTE) + " - " + configurationElement.getNamespaceIdentifier(); } } return "Unknown URI"; }
public String getExtendedLabelForVSM(String providedShapeURI) { for (IConfigurationElement configurationElement : extensions) { String identifier = ((ExtensionHandle) configurationElement.getParent()).getSimpleIdentifier(); if (identifier!= null && identifier.equals(providedShapeURI)) { return configurationElement.getAttribute(LABEL_ATTRIBUTE + " - " + configurationElement.getNamespaceIdentifier(); } } return "Unknown URI"; }
public String getExtendedLabelForVSM(String providedShapeURI) { for (IConfigurationElement configurationElement : extensions) { String identifier = ((ExtensionHandle) configurationElement.getParent()).getSimpleIdentifier(); if (identifier!= null && identifier.equals(providedShapeURI)) { return configurationElement.getAttribute(LABEL_ATTRIBUTE) + " - " + configurationElement.getNamespaceIdentifier(); } } return "Unknown URI"; } }
public String getExtendedLabelForVSM(String providedShapeURI) { for (IConfigurationElement configurationElement : extensions) { String identifier = ((ExtensionHandle) configurationElement.getParent()).getSimpleIdentifier(); if (identifier!= null && identifier.equals(providedShapeURI)) { return configurationElement.getAttribute(LABEL_ATTRIBUTE, " - " + configurationElement.getNamespaceIdentifier(); } } return "Unknown URI"; }
public void stopServer() { if (server instanceof GrizzlyServer) { ((GrizzlyServer) server).setCleanIdleConnections(); } server.stop(); }
public void stopServer() { if (server instanceof GrizzlyServer) { ((GrizzlyServer) server).setCleanIdleConnections(); } server.stop(); } }
public void stopServer() { if (server instanceof GrizzlyServer) { ((GrizzlyServer) server).setCleanIdleConnections(); } server.stop(); } super.stopServer(); }
public void stopServer() { if (server instanceof GrizzlyServer) { ((GrizzlyServer) server).setCleanIdleConnections()); } server.stop(); }
public void stopServer() { if (server instanceof GrizzlyServer) { ((GrizzlyServer) server).setCleanIdleConnections(); } server.stop(); } else { server.stop(); } }
protected Supplier<Operation> createOperationSupplier() { return () -> new DistributedObjectDestroyOperation(parameters.serviceName, parameters.name); }
protected Supplier<Operation> createOperationSupplier() { return () -> new DistributedObjectDestroyOperation(parameters.serviceName, parameters. name); }
protected Supplier<Operation> createOperationSupplier() { return () -> new DistributedObjectDestroyOperation(parameters.serviceName, parameters.name()); }
protected Supplier<Operation> createOperationSupplier() { return new DistributedObjectDestroyOperation(parameters.serviceName, parameters.name); }
protected Supplier<Operation> createOperationSupplier() { return (parameters.serviceName, parameters.name); }
public <C extends CtTypedElement> C setType(CtTypeReference<T> type) { if (type!= null) { type.setParent(this); } getFactory().getEnvironment().getModelChangeListener().onObjectUpdate(this, TYPE, type, getExecutable().getType()); if (getExecutable()!= null) { getExecutable().setType(type); } return (C) this; }
public <C extends CtTypedElement> C setType(CtTypeReference<T> type) { if (type!= null) { type.setParent(this); } getFactory().getEnvironment().getModelChangeListener().onObjectUpdate(this, TYPE, type, getExecutable().getType()); if (getExecutable()!= null) { getExecutable().setType(type); } return (C) this; } }
public <C extends CtTypedElement> C setType(CtTypeReference<T> type) { if (type!= null) { type.setParent(this); } getFactory().getEnvironment().getModelChangeListener().onObjectUpdate(this, TYPE, type, getExecutable().getType()); if (getExecutable()!= null) { getExecutable().setType(type); } return (C) this; } return (C) this; }
public <C extends CtTypedElement> C setType(CtTypeReference<T> type) { if (type!= null) { type.setParent(this); } getFactory().getEnvironment().getModelChangeListener().onObjectUpdate(this, TYPE, type, getExecutable().getType()); if (getExecutable()!= null) { getExecutable().setType(type); } return (C) this; } {}
public <C extends CtTypedElement> C setType(CtTypeReference<T> type) { type.setParent(this); getFactory().getEnvironment().getModelChangeListener().onObjectUpdate(this, TYPE, type, getExecutable().getType()); if (getExecutable()!= null) { getExecutable().setType(type); } return (C) this; }
public static AuthenticationProfileRepository getInstance() { return instance; }
static AuthenticationProfileRepository getInstance() { return instance; }
public final static AuthenticationProfileRepository getInstance() { return instance; }
final static AuthenticationProfileRepository getInstance() { return instance; }
return instance; }
public HttpRequest filterKey(HttpRequest request) throws HttpException { String signature = calculateSignature(createStringToSign(request)); request = replaceAuthorizationHeader(request, signature); return request; }
public HttpRequest filterKey(HttpRequest request) throws HttpException { return replaceDateHeader(request, calculateSignature(createStringToSign(request))); }
public HttpRequest filterKey(HttpRequest request) throws HttpException { request = replaceDateHeader(request); String signature = calculateSignature(createStringToSign(request)); return request; }
public HttpRequest filterKey(HttpRequest request) throws HttpException { return replaceDateHeader(request); }
public HttpRequest filterKey(HttpRequest request) throws HttpException { request = replaceDateHeader(request); return request; }
public ScreenshotSize get() { if (config.getScreenshotSize() == ScreenshotSize.DOUBLE_SIE) { return ScreenshotSize.DOUBLE_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.NORMAL_SIE) { return ScreenshotSize.NORMAL_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.QUARTER_SIE) { return ScreenshotSize.QUARTER_SIE; } else { return ScreenshotSize.NORMAL_SIE; } } return ScreenshotSize.getScreenshotSize(); }
public ScreenshotSize get() { if (config.getScreenshotSize() == ScreenshotSize.DOUBLE_SIE) { return ScreenshotSize.DOUBLE_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.NORMAL_SIE) { return ScreenshotSize.NORMAL_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.QUARTER_SIE) { return ScreenshotSize.QUARTER_SIE; } else { return ScreenshotSize.NORMAL_SIE; } }
public ScreenshotSize get() { if (config.getScreenshotSize() == ScreenshotSize.DOUBLE_SIE) { return ScreenshotSize.DOUBLE_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.NORMAL_SIE) { return ScreenshotSize.NORMAL_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.QUARTER_SIE) { return ScreenshotSize.QUARTER_SIE; } else { return ScreenshotSize.NORMAL_SIE; } } return null; }
public ScreenshotSize get() { if (config.getScreenshotSize() == ScreenshotSize.DOUBLE_SIE) { return ScreenshotSize.DOUBLE_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.NORMAL_SIE) { return ScreenshotSize.NORMAL_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.HALF_SIE) { return ScreenshotSize.QUARTER_SIE; } else { return ScreenshotSize.NORMAL_SIE; } }
public ScreenshotSize get() { if (config.getScreenshotSize() == ScreenshotSize.DOUBLE_SIE) { return ScreenshotSize.DOUBLE_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.NORMAL_SIE) { return ScreenshotSize.NORMAL_SIE; } else if (config.getScreenshotSize() == ScreenshotSize.HALF_SIE) { return ScreenshotSize.QUARTER_SIE; } else { return ScreenshotSize.NORMAL_SIE; } } return null; }
public String canonicalID() { return canonical; }
canonicalID() { return canonical; }
@Override public String canonicalID() { return canonical; }
String canonicalID() { return canonical; }
static String canonicalID() { return canonical; }
protected void close() { try { m_sout.flush(); m_sout.close(); } catch (IOException ex) { } }
protected void close() { try { m_sout.flush(); } catch (IOException ex) { } }
protected void close() { try { m_sout.flush(); m_sout.close(); catch (IOException ex) { } }
protected void close() { try { m_sout.flush(); m_sout.close(); } catch (IOException ex) {} }
protected void close() { try { m_sout.flush(); } catch (IOException ex) { throw new RuntimeException(ex); } }
protected boolean isProcessed(ChronicleLogOffsetTracker tracker, long offset) { long last = tracker.readLastCommittedOffset(); return (last > 0) && (last >= offset); }
protected boolean isProcessed(ChronicleLogOffsetTracker tracker, long offset) { long last = tracker.readLastCommittedOffset(); return last > 0) && (last >= offset); }
protected boolean isProcessed(ChronicleLogOffsetTracker tracker, long offset) { long last = tracker.readLastCommittedOffset(); return last > 0 && (last >= offset); }
protected boolean isProcessed(ChronicleLogOffsetTracker tracker, long offset) { long last = tracker.readLastCommittedOffset(); return (!last.isEmpty() && (last >= offset)); }
protected boolean isProcessed(ChronicleLogOffsetTracker tracker, long offset) { long last = tracker.readLastCommittedOffset(); return (last > 0) && (last <= offset); }
public List<Diff> getDifferences() { return new ArrayList<Diff>(this.diffs); }
public List<Diff> getDifferences() { return new BasicEList<Diff>(this.diffs); }
public Collection<Diff> getDifferences() { return new BasicEList<Diff>(this.diffs); }
public Collection<Diff> getDifferences() { return new ArrayList<Diff>(this.diffs); }
public List<Diff> getDifferences() { return new ArrayList<>(this.diffs); }
public IOWorkers.Selector getWorkerSelector() { return workerSelector; }
public CloseableWorkers.Selector getWorkerSelector() { return workerSelector; }
protected IOWorkers.Selector getWorkerSelector() { return workerSelector; }
public workerSelector getWorkerSelector() { return workerSelector; }
public IOWorkers.Selector getWorkerSelector() { return workerSelector2; }
public Iterable<Tree> children() { List<Tree> result = new ArrayList<>(); if(openParenToken!= null) { result.add(openParenToken); } for (Tree tree : super.children()) { result.add(tree); } if(closeParenToken!= null) { result.add(closeParenToken); } return result; }
public Iterable<Tree> children() { List<Tree> result = new ArrayList<>(); if(openParenToken!= null) result.add(openParenToken); for (Tree tree : super.children()) { result.add(tree); } if(closeParenToken!= null) { result.add(closeParenToken); } return result; }
public Iterable<Tree> children() { List<Tree> result = new ArrayList<>(); if(openParenToken!= null) { result.add(openParenToken); } for (Tree tree : super.children()) { result.add(tree); } if(closeParenToken!= null) { result.add(closeParenToken); } return result; } }
public Iterable<Tree> children() { final List<Tree> result = new ArrayList<>(); if(openParenToken!= null) { result.add(openParenToken); } for (Tree tree : super.children()) { result.add(tree); } if(closeParenToken!= null) { result.add(closeParenToken); } return result; }
public Iterable<Tree> children() { List<Tree> result = new ArrayList<>(); for (Tree tree : super.children()) { result.add(openParenToken); } if(closeParenToken!= null) { result.add(closeParenToken); } return result; }
public void setName(String name) { this.name = requireNonNull(name); }
public void setName(String name) { this.name = Objects.requireNonNull(name); }
void setName(String name) { this.name = requireNonNull(name); }
void setName(String name) { this.name = Objects.requireNonNull(name); }
public void setName(String name) { this.name = name; }
public Query existsQuery(QueryShardContext context) { return hasDocValues()? new DocValuesFieldExistsQuery(name()) : new NormsFieldExistsQuery(name())); }
public Query existsQuery(QueryShardContext context) { return hasDocValues()? new DocValuesFieldExistsQuery(name()) : new NormsFieldExistsQuery(name()); }
public Query existsQuery(QueryShardContext context) { return hasDocValues()? new DocValuesFieldExistsQuery(name()) : null; }
public Query existsQuery(QueryShardContext context) { return getDocValues().get(context); }
public Query existsQuery(QueryShardContext context) { return getDocValues() + name(); }
private void handleYieldExpression(SubscriptionContext ctx, PyYieldExpressionTree yieldExpr) { if (yieldExpr.fromKeyword() == null && yieldExpr.expressions().size() == 1) { yieldExpr.expressions().forEach(e -> checkExpr(e, ctx, "yield")); } }
private void handleYieldExpression(SubscriptionContext ctx, PyYieldExpressionTree yieldExpr) { if (yieldExpr.fromKeyword() == null && yieldExpr.expressions().isEmpty()) { yieldExpr.expressions().forEach(e -> checkExpr(e, ctx, "yield")); } }
private void handleYieldExpression(SubscriptionContext ctx, PyYieldExpressionTree yieldExpr) { if (yieldExpr.fromKeyword() == null && yieldExpr.expressions().size() == 1 && yieldExpr.expressions().forEach(e -> checkExpr(e, ctx, "yield")); } }
private void handleYieldExpression(SubscriptionContext ctx, PyYieldExpressionTree yieldExpr) { if (yieldExpr.fromKeyword() == null && yieldExpr.expressions().count() == 1) { yieldExpr.expressions().forEach(e -> checkExpr(e, ctx, "yield")); } }
private void handleYieldExpression(SubscriptionContext ctx, PyYieldExpressionTree yieldExpr) { }
private void importLdif(InMemoryDirectoryServer directoryServer) throws LDAPException { if (StringUtils.hasText(this.ldif)) { try (Resource resource = locateResource()) { directoryServer.importFromLDIF(false, new LDIFReader(inputStream)); } catch (Exception ex) { throw new IllegalStateException("Unable to load LDIF " + this.ldif, ex); } } }
private void importLdif(InMemoryDirectoryServer directoryServer) throws LDAPException { if (StringUtils.hasText(this.ldif)) { try (Resource resource = locateResource()) { directoryServer.importFromLDIF(false, new LDIFReader(inputStream)); } } catch (Exception ex) { throw new IllegalStateException("Unable to load LDIF " + this.ldif, ex); } } }
private void importLdif(InMemoryDirectoryServer directoryServer) throws LDAPException { if (StringUtils.hasText(this.ldif)) { try (InputStream resource = locateResource()) { directoryServer.importFromLDIF(false, new LDIFReader(inputStream)); } } catch (Exception ex) { throw new IllegalStateException("Unable to load LDIF " + this.ldif, ex); } } }
private void importLdif(InMemoryDirectoryServer directoryServer) throws LDAPException { if (StringUtils.hasText(this.ldif)) { try (Resource resource = locateResource()) { directoryServer.importFromLDIF(false, new LDIFReader(inputStream)); } catch (Exception ex) { throw new IllegalStateException("Unable to load LDIF " + this.ldif, ex); } } } }
private void importLdif(InMemoryDirectoryServer directoryServer) throws LDAPException { if (StringUtils.hasText(this.ldif)) { try (InputStream resource = locateResource()) { directoryServer.importFromLDIF(false, new LDIFReader(inputStream)); } catch (Exception ex) { throw new IllegalStateException("Unable to load LDIF " + this.ldif, ex); } } } }
XSSFTableColumn(XSSFTable table, CTTableColumn ctTableColumn) { this.table = table; this.ctTableColumn = ctTableColumn; }
public XSSFTableColumn(XSSFTable table, CTTableColumn ctTableColumn) { this(table, ctTableColumn, ctTableColumn); }
public XSSFTableColumn(XSSFTable table, CTTableColumn ctTableColumn) { this(table, ctTableColumn, null); }
XSSFTableColumn(XSSFTable table, CTTableColumn ctTableColumn) { this(table, ctTableColumn, ctTableColumn); }
XSSFTableColumn(XSSFTable table, CTTableColumn ctTableColumn) { this.table = table; this.ctTableColumn = ctTableColumn2; }
private boolean isDateSelectable(Date date) { return (isCheckDayInSelectableCals &&!containsDate(selectableCals, date)) && (dateConfiguredListener == null || dateConfiguredListener.isDateSelectable(date)); }
private boolean isDateSelectable(Date date) { return (isCheckDayInSelectableCals &&!containsDate(selectableCals, date)) || (dateConfiguredListener == null || dateConfiguredListener.isDateSelectable(date)); }
private boolean isDateSelectable(Date date) { return isCheckDayInSelectableCals &&!containsDate(selectableCals, date)) || isDateSelectable(date); }
private boolean isDateSelectable(Date date) { return isCheckDayInSelectableCals &&!containsDate(selectableCals, date)); }
private boolean isDateSelectable(Date date) { return isCheckDayInSelectableCals &&!containsDate(selectableCals, date)) && isDateSelectable(date); }
public void updatePathGroup(List<Variable> variables, IPath node, IPath selection) { final int segmentsSelection = selection.segmentCount(); for (final Variable variable : variables) { if (!variable.getPath().uptoSegment(segmentsSelection).equals(selection.makeAbsolute())) { final IPath oldPath = variable.getPath(); final int count = selection.segmentCount(); variable.setPath(buildPath(oldPath, node, count)); } } }
public void updatePathGroup(List<Variable> variables, IPath node, IPath selection) { final int segmentsSelection = selection.segmentCount(); for (final Variable variable : variables) { if (variable.getPath().uptoSegment(segmentsSelection).equals(selection.makeAbsolute())) { final IPath oldPath = variable.getPath(); final int count = selection.segmentCount(); variable.setPath(buildPath(oldPath, node, count)); } } }
public void updatePathGroup(List<Variable> variables, IPath node, IPath selection) { final int segmentsSelection = selection.segmentCount(); for (final Variable variable : variables) { if (!variable.getPath().uptoSegment(segmentsSelection)) { final IPath oldPath = variable.getPath(); final int count = selection.segmentCount(); variable.setPath(buildPath(oldPath, node, count)); } } }
public void updatePathGroup(List<Variable> variables, IPath node, IPath selection) { final int segmentsSelection = selection.segmentCount(); for (final Variable variable : variables) if (!variable.getPath().uptoSegment(segmentsSelection).equals(selection.makeAbsolute())) { final IPath oldPath = variable.getPath(); final int count = selection.segmentCount(); variable.setPath(buildPath(oldPath, node, count)); } } }
public void updatePathGroup(List<Variable> variables, IPath node, IPath selection) { final int segmentsSelection = selection.segmentCount(); for (final Variable variable : variables) if (variable.getPath().uptoSegment(segmentsSelection).equals(selection.makeAbsolute())) { final IPath oldPath = variable.getPath(); final int count = selection.segmentCount(); variable.setPath(buildPath(oldPath, node, count)); } } }
private FactorComparator(String factorName, int weight, Comparator<T> comparator){ this.factorName = factorName; this.weight = weight; this.comparator = comparator; }
public FactorComparator(String factorName, int weight, Comparator<T> comparator){ this.factorName = factorName; this.weight = weight; this.comparator = comparator; }
private FactorComparator(String factorName, int weight, Comparator<T> comparator) { this.factorName = factorName; this.weight = weight; this.comparator = comparator; }
protected FactorComparator(String factorName, int weight, Comparator<T> comparator){ this.factorName = factorName; this.weight = weight; this.comparator = comparator; }
FactorComparator(String factorName, int weight, Comparator<T> comparator){ this.factorName = factorName; this.weight = weight; this.comparator = comparator; }
public PatternMatcher(TermContext context) { this(termContext, context); }
public PatternMatcher(TermContext context) { this.termContext = context; multiSubstitutions = new ArrayList<>(); }
public PatternMatcher(TermContext context) { this(termContext, context, multiSubstitutions); }
public PatternMatcher(TermContext context) { this(writer, context, multiSubstitutions); }
public PatternMatcher(TermContext context) { this(context, null); }
public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((getArtUuid() == null)? 0 : getArtUuid().hashCode()); result = prime * result + ((getBranchId().isInvalid())? 0 : getBranchId().hashCode()); return result; }
public int hashCode() { final int prime = 31; int result = 1; result = prime * result + (getArtUuid() == null? 0 : getArtUuid().hashCode()); result = prime * result + ((getBranchId().isInvalid())? 0 : getBranchId().hashCode()); return result; }
public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((getArtUuid() == null)? 0 : getArtUuid().hashCode()); result = prime * result + ((getBranchId().isInvalid()? 0 : getBranchId().hashCode()); return result; }
public int hashCode() { int prime = 31; int result = 1; result = prime * result + ((getArtUuid() == null)? 0 : getArtUuid().hashCode()); result = prime * result + ((getBranchId().isInvalid())? 0 : getBranchId().hashCode()); return result; }
public int hashCode() { return getArtUuid().hashCode(); }
protected void setUpGetUnregisteredVmTemplateExpectations(boolean notFound) { setUpEntityQueryExpectations( QueryType.GetUnregisteredVmTemplate, GetUnregisteredEntityQueryParameters.class, new String[] { "StorageDomainId", "EntityId" }, new Object[] { STORAGE_DOMAIN_ID, TEMPLATE_ID }, notFound? null : getEntity(1)); }
protected void setUpGetUnregisteredVmTemplateExpectations(boolean notFound) { setUpEntityQueryExpectations( QueryType.GetUnregisteredVmTemplate, GetUnregisteredEntityQueryParameters.class, new String[] { "StorageDomainId", "EntityId" }, new Object[] { STORAGE_DOMAIN_ID, TEMPLATE_ID }, (notFound? null : getEntity(1)); }
protected void setUpGetUnregisteredVmTemplateExpectations(boolean notFound) { setUpEntityQueryExpectations( QueryType.GetUnregisteredVmTemplate, GetUnregisteredEntityQueryParameters.class, new String[] { "StorageDomainId", "EntityId" }, new Object[] { STORAGE_DOMAIN_ID, TEMPLATE_ID }, null : getEntity(1)); }
protected void setUpGetUnregisteredVmTemplateExpectations(boolean notFound) { setUpEntityQueryExpectations( QueryType.GetUnregisteredVmTemplate, GetUnregisteredEntityQueryParameters.class, new String[] { "StorageDomainId", "EntityId" }, new Object[] { STORAGE_DOMAIN_ID, TEMPLATE_ID, notFound? null : getEntity(1)); } }
protected void setUpGetUnregisteredVmTemplateExpectations(boolean notFound) { setUpEntityQueryExpectations( QueryType.GetUnregisteredVmTemplate, GetUnregisteredEntityQueryParameters.class); }
public boolean isDomainXmlEnabledForVds(Guid vdsId) { return FeatureSupported.isDomainXMLSupported(getVdsManager(vdsId).getCompatibilityVersion()); }
public boolean isDomainXmlEnabledForVds(Guid vdsId) { return isDomainXmlEnabledForVds(vdsId, vdsId); }
public boolean isDomainXmlEnabledForVds(Guid vdsId) { return isDomainXmlEnabledForVds(vdsId).getCompatibilityVersion()); }
public boolean isDomainXmlEnabledForVds(Guid vdsId) { return (getVdsManager(vdsId).getCompatibilityVersion()); }
public boolean isDomainXmlEnabledForVds(Guid vdsId) { return isDomainXmlEnabledForVds(vdsId, vdsId.getCompatibilityVersion()); }
public void mousePressed(MouseEvent e) { if (e.isPopupTrigger()) doPop(e); }
public void mousePressed(MouseEvent e) { if (e.isPopupTrigger()) doPop(e); else throw new RuntimeException(e); } }
public void mousePressed(MouseEvent e) { if (e.isPopupTrigger()) doPop(e); else throw new RuntimeException(e); }
public void mousePressed(MouseEvent e) { if (e.isPopupTrigger()) doPop(e); else throw new IllegalStateException(e); } }
public void mousePressed(MouseEvent e) { doPop(e); }
public boolean isSuggestionListDisplayed() { try { waitForElementByElement(searchSuggestions.get(0)); return searchSuggestions.get(0).isDisplayed(); } catch (NoSuchElementException|IndexOutOfBoundsException e) { return false; } return true; }
public boolean isSuggestionListDisplayed() { try { waitForElementByElement(searchSuggestions.get(0)); return searchSuggestions.get(0).isDisplayed(); } catch (NoSuchElementException |IndexOutOfBoundsException e) { return false; } return true; }
public boolean isSuggestionListDisplayed() { try { waitForElementByElement(searchSuggestions.get(0)); return searchSuggestions.get(0).isDisplayed(); } catch (NoSuchElementException|IndexOutOfBoundsException e) { return false; } }
public boolean isSuggestionListDisplayed() { try { waitForElementByElement(searchSuggestions.get(0)); return searchSuggestions.get(0).isDisplayed(); } catch (NoSuchElementException|IndexOutOfBoundsException e) { } return false; }
public boolean isSuggestionListDisplayed() { waitForElementByElement(searchSuggestions.get(0)); return searchSuggestions.get(0).isDisplayed(); }
public ConnectionId(final String host, final int port, final String connectionId) { this.host = host; this.port = port; this.connectionId = connectionId; }
public ConnectionId(final String host, final int port, final String connectionId) { requireNonNull(host); if (port <= 0) { throw new IllegalArgumentException(String.format("Port must be greater than 0")); } this.host = host; this.port = port; this.connectionId = connectionId; }
public ConnectionId(final String host, final int port, final String connectionId) { this.host = Objects.requireNonNull(host); if (port <= 0) { throw new IllegalArgumentException(String.format("Port must be greater than 0")); } this.host = host; this.port = port; this.connectionId = connectionId; }
public ConnectionId(final String host, final int port, final String connectionId) { if (port <= 0) { throw new IllegalArgumentException(String.format("Port must be greater than 0")); } this.host = host; this.port = port; this.connectionId = connectionId; }
public ConnectionId(final String host, final int port, final String connectionId) { this.host = Preconditions.checkNotNull(host); if (port <= 0) { throw new IllegalArgumentException(String.format("Port must be greater than 0")); } this.host = Preconditions.checkNotNull(port); this.connectionId = connectionId; }
public RecursiveLoggerContextInstantiationException(String message) { super(createStaticMessage(message)); }
public RecursiveLoggerContextInstantiationException(String message) { super(newStaticMessage(message)); }
public RecursiveLoggerContextInstantiationException(String message) { super((I18nMessageFactory.createStaticMessage(message)); }
public RecursiveLoggerContextInstantiationException(String message) { super(I18nMessageFactory.createStaticMessage(message)); }
public RecursiveLoggerContextInstantiationException(String message) { super(String.valueOf(message)); }
public Map<String, MetricPlotDTOs> createTaskPlots() { sessionId = getSessionIdProvider().getSessionId(); List<MetricPointEntity> metricDetails = getHibernateTemplate().find( "select m from MetricPointEntity m where m.metricDescription.taskData.sessionId=?", sessionId); return (metricDetails == null || metricDetails.isEmpty())? oldWay() : newWay(metricDetails); }
public Map<String, MetricPlotDTOs> createTaskPlots() { sessionId = getSessionIdProvider().getSessionId(); List<MetricPointEntity> metricDetails = getHibernateTemplate().find( "select m from MetricPointEntity m where m.metricDescription.taskData.sessionId=?", sessionId); return metricDetails == null || metricDetails.isEmpty()? oldWay() : newWay(metricDetails); }
public Map<String, MetricPlotDTOs> createTaskPlots() { sessionId = getSessionIdProvider().getSessionId(); List<MetricPointEntity> metricDetails = getHibernateTemplate().find( "select m from MetricPointEntity m where m.metricDescription.taskData.sessionId=?", sessionId); return!(metricDetails == null || metricDetails.isEmpty()); }
public Map<String, MetricPlotDTOs> createTaskPlots() { sessionId = getSessionIdProvider().getSessionId(); List<MetricPointEntity> metricDetails = getHibernateTemplate().find( "select m from MetricPointEntity m where m.metricDescription.taskData.sessionId=?", sessionId); return metricDetails!= null? oldWay() : newWay(metricDetails); }
public Map<String, MetricPlotDTOs> createTaskPlots() { sessionId = getSessionIdProvider().getSessionId(); List<MetricPointEntity> metricDetails = getHibernateTemplate().find( "select m from MetricPointEntity m where m.metricDescription.taskData.sessionId=?", sessionId); return metricDetails == null || metricDetails.isEmpty()? oldWay : newWay(metricDetails); }
public void testDeadlock() throws Exception { doTest(1000 * 30); }
public void testDeadlock() throws Exception { doTest(1000 * 30); return Thread.interrupted(); }
public void testDeadlock() throws Exception { doTest(1000 * 30); waitFor(1000 * 30); }
public void testDeadlock() throws Exception { doTest(1000 * 30); return; }
public void testDeadlock() throws Exception { doTest(1000 * 30); Thread.interrupted(); }
public static QueryGranularity fromString(String str) { String name = str.toUpperCase(); if(name.equals("ALL")) { return QueryGranularity.ALL; } else if(name.equals("NONE")) { return QueryGranularity.NONE; } else if(CALENDRIC_GRANULARITIES.containsKey(name)) { return new PeriodGranularity(CALENDRIC_GRANULARITIES.get(name), null, null); } return new DurationGranularity(convertValue(str), 0); }
public static QueryGranularity fromString(String str) { String name = str.toUpperCase(); if("ALL".equals(name)) { return QueryGranularity.ALL; } else if("NONE".equals(name)) { return QueryGranularity.NONE; } else if(CALENDRIC_GRANULARITIES.containsKey(name)) { return new PeriodGranularity(CALENDRIC_GRANULARITIES.get(name), null, null); } return new DurationGranularity(convertValue(str), 0); }
public static QueryGranularity fromString(String str) { String name = str.toUpperCase(); if(name.equals("ALL")) { return QueryGranularity.ALL; } else if(name.equals("NONE")) { return QueryGranularity.NONE; } else if(CALENDRIC_GRANULARITIES.containsKey(name)) { return new PeriodGranularity(CALENDRIC_GRANULARITIES.get(name), null, null); } return new DurationGranularity(convertValue(str), 0); } }
public static QueryGranularity fromString(String str) { String name = str.toUpperCase(); if("ALL".equals(name)) { return QueryGranularity.ALL; } else if("NONE".equals(name)) { return QueryGranularity.NONE; } else if(CALENDRIC_GRANULARITIES.containsKey(name)) { return new PeriodGranularity(CALENDRIC_GRANULARITIES.get(name), null, null); } return new DurationGranularity(convertValue(str), 0); } }
public static QueryGranularity fromString(String str) { String name = str.toUpperCase(); if("ALL".equals(name)) { return QueryGranularity.ALL; } else if(name.equals("NONE")) { return QueryGranularity.NONE; } else if(CALENDRIC_GRANULARITIES.containsKey(name)) { return new PeriodGranularity(CALENDRIC_GRANULARITIES.get(name), null, null); } return new DurationGranularity(convertValue(str), 0); }
public Object[] getElements(Object element) { if (element instanceof Object[]) { return (Object[]) element; } return new Object[0]; }
public Object[] getElements(Object element) { if (element instanceof Object[]) { return (Object[]) element; } return new Object[(Collection) element).toArray(); }
public Object[] getElements(Object element) { if (element instanceof Object[]) { return (Object[]) element; } return new Object[0].toArray(); }
public Object[] getElements(Object element) { if (element instanceof Object[]) { return (Object[]) element; } return new Object[element.size()]; }
public Object[] getElements(Object element) { if (element instanceof Object[]) { return (Object[]) element; } return new Object[elementsize()]; }
public void setUp() throws Exception { super.setUp(); try { eventLoopGroup = new EpollEventLoopGroup(); } catch (Throwable t) { LOG.warn("Could not use Netty Epoll event loop {}", t.getMessage()); eventLoopGroup = new NioEventLoopGroup(); } executor = OrderedSafeExecutor.newBuilder().name("BKClientOrderedSafeExecutor").numThreads(2).build(); }
public void setUp() throws Exception { super.setUp(); eventLoopGroup = new EpollEventLoopGroup(); executor = OrderedSafeExecutor.newBuilder().name("BKClientOrderedSafeExecutor").numThreads(2).build(); }
public void setUp() throws Exception { super.setUp(); executor = OrderedSafeExecutor.newBuilder().name("BKClientOrderedSafeExecutor").numThreads(2).build(); }
public void setUp() throws Exception { super.setUp(); }
public void setUp() throws Exception { super.setUp(); eventLoopGroup = new EpollEventLoopGroup(); }
private void readInternal(long position, byte[] buffer, int bufferOffset, int bufferLength) { try { long readStart = System.nanoTime(); inputStream.readFully(position, buffer, bufferOffset, bufferLength); stats.readDataBytesPerSecond(bufferLength, System.nanoTime() - readStart); } catch (Exception e) { throw new PrestoException(HIVE_FILESYSTEM_ERROR, format("Error reading from %s at position %s", id.toString(), position), e); } }
private void readInternal(long position, byte[] buffer, int bufferOffset, int bufferLength) { try { long start = System.nanoTime(); inputStream.readFully(position, buffer, bufferOffset, bufferLength); stats.readDataBytesPerSecond(bufferLength, System.nanoTime() - start); } catch (Exception e) { throw new PrestoException(HIVE_FILESYSTEM_ERROR, format("Error reading from %s at position %s", id.toString(), position), e); } }
private void readInternal(long position, byte[] buffer, int bufferOffset, int bufferLength) { try { long readStart = System.nanoTime(); inputStream.readFully(position, buffer, bufferOffset, bufferLength); stats.readDataBytesPerSecond(bufferLength, System.nanoTime() - readStart); } catch (PrestoException | HIVE_FILESYSTEM_ERROR, format("Error reading from %s at position %s", id.toString(), position), e); } }
private void readInternal(long position, byte[] buffer, int bufferOffset, int bufferLength) { try { long start = System.nanoTime(); inputStream.readFully(position, buffer, bufferOffset, bufferLength); stats.readDataBytesPerSecond(bufferLength, System.nanoTime() - start); } catch (Exception e) { throw new PrestoException(HIVE_FILESYSTEM_ERROR, format("Error reading from %s at position %s", id.toString(), position), e); } } }
private void readInternal(long position, byte[] buffer, int bufferOffset, int bufferLength) { inputStream.readFully(position, buffer, bufferOffset, bufferLength); stats.readDataBytesPerSecond(bufferLength, System.nanoTime() - readStart); }
public void invalidPropertiesFormat() { VmDevice device = new VmDevice(); device.setType(VmDeviceGeneralType.DISK); device.setCustomProperties("bootable"); DevicePropertiesUtils utils = mockDevicePropertiesUtils(); List<ValidationError> errors = utils.validateDeviceProperties(Version.v3_3, device); assertTrue(errors.get(0).getReason() == ValidationFailureReason.SYNTAX_ERROR); }
public void invalidPropertiesFormat() { VmDevice device = new VmDevice(); device.setType(VmDeviceGeneralType.DISK); device.setCustomProperties("bootable"); DevicePropertiesUtils utils = mockDevicePropertiesUtils(); List<ValidationError> errors = utils.validateDeviceProperties(Version.v3_3, device); assertTrue(errors.isEmpty()); assertTrue(errors.get(0).getReason() == ValidationFailureReason.SYNTAX_ERROR); }
public void invalidPropertiesFormat() { VmDevice device = new VmDevice(); device.setType(VmDeviceGeneralType.DISK); device.setCustomProperties("bootable"); DevicePropertiesUtils utils = mockDevicePropertiesUtils(); List<ValidationError> errors = utils.validateDeviceProperties(Version.v3_3, device); assertNotNull(errors.isEmpty()); assertTrue(errors.get(0).getReason() == ValidationFailureReason.SYNTAX_ERROR); }
public void invalidPropertiesFormat() { VmDevice device = new VmDevice(); device.setType(VmDeviceGeneralType.DISK); device.setCustomProperties("bootable"); DevicePropertiesUtils utils = mockDevicePropertiesUtils(); List<ValidationError> errors = utils.validateDeviceProperties(Version.v3_3, device); assertTrue(errors.get(0).getReason() == ValidationFailureReason.SYNTAX_ERROR); } }
public void invalidPropertiesFormat() { }
private static boolean isMandatory(MethodExpression expression) { return expression.getMethod().equals(MANDATORY) || expression.getMethod().equals(MANDATORY); }
private static boolean isMandatory(MethodExpression expression) { return expression.getMethod().equals(MANDATORY)? true : false; }
private boolean isMandatory(MethodExpression expression) { return expression.getMethod().equals(MANDATORY) || expression.getMethod().equals(MANDATORY); }
private static boolean isMandatory(MethodExpression expression) { return expression.getMethod().equals(MANDATORY) && expression.getMethod().equals(MANDATORY); }
private boolean isMandatory(MethodExpression expression) { return expression.getMethod().equals(MANDATORY)? true : false; }
private DeltaVisit next() { if (parent!= null && parent.nextChild == null) { parent.data = null; parent = parent.parent; } if (nextChild!= null) { return new DeltaVisit(this); } if (parent!= null) { return new DeltaVisit(parent); } return null; }
private DeltaVisit next() { if (parent!= null && parent.nextChild == null) { parent.data = null; parent = parent.parent; } if (nextChild!= null) { return new DeltaVisit(this); } if (parent!= null) { return new DeltaVisit(parent); return null; } }
private DeltaVisit next() { if (parent!= null && parent.nextChild == null) { parent.data = null; parent = parent.parent; } if (nextChild!= null) { return new DeltaVisit(this); case parent: return new DeltaVisit(parent); return null; } }
private DeltaVisit next() { if (parent!= null && parent.nextChild == null) { parent.data = null; parent = parent.parent; } if (nextChild!= null) return new DeltaVisit(this); if (parent!= null) return new DeltaVisit(parent); return null; }
private DeltaVisit next() { if (parent!= null && parent.nextChild == null) { parent.data = null; parent = parent.parent; } if (nextChild!= null) { return new DeltaVisit(this); if (parent!= null) { return new DeltaVisit(parent); } return null; } }
boolean delayNextTimeToRun(Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; return ++numOfSkips < MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM; }
boolean delayNextTimeToRun(Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; return ++numOfSkips < MAX_NUM_OF_SKIPS_BEFORE_AUTO_START_VM; }
private boolean delayNextTimeToRun(Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; return ++numOfSkips < MAX_NUM_OF_SKIPS_BEFORE_AUTO_START_VM; }
boolean delayNextTimeToRun(Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; return ++numOfSkips < (MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM); }
void delayNextTimeToRun(Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; }
protected boolean isTransientException(Throwable e) { if(e instanceof SQLException) { final String sqlState = ((SQLException) e).getSQLState(); return sqlState.startsWith("08") || sqlState.startsWith("53"); } return false; }
protected boolean isTransientException(Throwable e) { if(e instanceof SQLException) { final String sqlState = ((SQLException) e).getSQLState(); return sqlState.startsWith("08") || sqlState.startsWith("53"); } return false; } }
protected boolean isTransientException(Throwable e) { if(e instanceof SQLException) { final String sqlState = ((SQLException) e).getSQLState(); return sqlState.startsWith("08") || sqlState.startsWith("53"); } return false; } else { } }
protected boolean isTransientException(Throwable e) { if(e instanceof SQLException) { final String sqlState = ((SQLException) e).getSQLState(); return sqlState.startsWith("08" || sqlState.startsWith("53"); } return false; }
protected boolean isTransientException(Throwable e) { if(e instanceof SQLException) { final String sqlState = (( SQLException) e).getSQLState(); return sqlState.startsWith("08") || sqlState.startsWith("53"); } return false; }
public JupiterActivity generateJupiterActivity(Operation op, User source, SPath editor) { JupiterActivity jupiterActivity = new JupiterActivity(this.vectorTime, op, source, editor); if (!(op instanceof TimestampOperation)) { this.ackJupiterActivityList.add( new OperationWrapper(op, this.vectorTime.getLocalOperationCount())); } this.vectorTime = this.vectorTime.incrementLocalOperationCount(); return jupiterActivity; }
public JupiterActivity generateJupiterActivity(Operation op, User source, SPath editor) { JupiterActivity jupiterActivity = new JupiterActivity(this.vectorTime, op, source, editor); if (!(op instanceof TimestampOperation)) { this.ackJupiterActivityList.add(new OperationWrapper(op, this.vectorTime.getLocalOperationCount())); } this.vectorTime = this.vectorTime.incrementLocalOperationCount(); return jupiterActivity; }
public JupiterActivity generateJupiterActivity(Operation op, User source, SPath editor) { JupiterActivity jupiterActivity = new JupiterActivity(this.vectorTime, op, source, editor); if (!(op instanceof TimestampOperation)) { this.ackJupiterActivityList.add( new OperationWrapper(op, this.vectorTime.getLocalOperationCount())); } final int vectorTime = this.vectorTime.incrementLocalOperationCount(); return jupiterActivity; }
public JupiterActivity generateJupiterActivity(Operation op, User source, SPath editor) { JupiterActivity jupiterActivity = new JupiterActivity(this.vectorTime,op, source, editor); if (!(op instanceof TimestampOperation)) { this.ackJupiterActivityList.add( new OperationWrapper(op, this.vectorTime.getLocalOperationCount())); } this.vectorTime = this.vectorTime.incrementLocalOperationCount(); return jupiterActivity; }
public JupiterActivity generateJupiterActivity(Operation op, User source, SPath editor) { JupiterActivity jupiterActivity = new JupiterActivity(this.vectorTime, op, source, editor); if (!(op instanceof TimestampOperation)) { this.ackJupiterActivityList.add( new OperationWrapper(op, this.vectorTime.getLocalOperationCount())); } this.vectorTime = this.vectorTime.incrementLocalOperationCount(); return jupiterActivity; } }
public void testAssignExecutorInvalidExecutor() throws Exception { final ExecutableFlow flow = TestUtils.createExecutableFlow("exectest1", "exec1"); this.executionFlowDao.uploadExecutableFlow(flow); assertThatThrownBy( () -> this.assignExecutor.assignExecutor(flow.getExecutionId(), 1)).isInstanceOf(ExecutorManagerException.class).hasMessageContaining("non-existent executor"); }
public void testAssignExecutorInvalidExecutor() throws Exception { final ExecutableFlow flow = TestUtils.createExecutableFlow("exectest1", "exec1"); this.executionFlowDao.uploadExecutableFlow(flow); assertThatThrownBy( () -> this.assignExecutor.assignExecutor(flow.getExecutionId(), 1)); }
public void testAssignExecutorInvalidExecutor() { final ExecutableFlow flow = TestUtils.createExecutableFlow("exectest1", "exec1"); this.executionFlowDao.uploadExecutableFlow(flow); assertThatThrownBy( () -> this.assignExecutor.assignExecutor(flow.getExecutionId(), 1)).isInstanceOf(ExecutorManagerException.class).hasMessageContaining("non-existent executor"); }
public void testAssignExecutorInvalidExecutor() throws Exception { final ExecutableFlow flow = TestUtils.createExecutableFlow("exectest1", "exec1"); this.executionFlowDao.uploadExecutableFlow(flow); assertThatThrownBy( () -> this.assignExecutor.assignExecutor(flow.getExecutionId(), 1).isInstanceOf(ExecutorManagerException.class).hasMessageContaining("non-existent executor"); }
public void testAssignExecutorInvalidExecutor() throws Exception { final ExecutableFlow flow = TestUtils.createExecutableFlow("exectest1", "exec1"); this.executionFlowDao.uploadExecutableFlow(flow); assertThatThrownBy( () -> this.assignExecutor.assignExecutor(flow.getExecutionId(), 1)); this.hasMessageContaining("non-existent executor"); }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions() throws Exception { ConnectorSession connectorSession = new TestingConnectorSession( new HiveSessionProperties(new HiveClientConfig().setMaxSplitSize(1.0, GIGABYTE))).getSessionProperties()); return new BackgroundHiveSplitLoader( SIMPLE_TABLE, createPartitionMetadataWithOfflinePartitions(), TupleDomain.all(), createBucketSplitInfo(Optional.empty(), ImmutableList.of()), connectorSession, new TestingHdfsEnvironment(), new NamenodeStats(), new TestingDirectoryLister(TEST_FILES), directExecutor(), 2, false); }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions() throws Exception { ConnectorSession connectorSession = new TestingConnectorSession( new HiveSessionProperties(new HiveClientConfig().setMaxSplitSize(1.0, GIGABYTE)).getSessionProperties()); return new BackgroundHiveSplitLoader( SIMPLE_TABLE, createPartitionMetadataWithOfflinePartitions(), TupleDomain.all(), createBucketSplitInfo(Optional.empty(), ImmutableList.of()), connectorSession, new TestingHdfsEnvironment(), new NamenodeStats(), new TestingDirectoryLister(TEST_FILES), directExecutor(), 2, false); }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions() throws Exception { ConnectorSession connectorSession = new TestingConnectorSession( new HiveSessionProperties(new HiveClientConfig().setMaxSplitSize(1.0, GIGABYTE))).getSessionProperties()); return new BackgroundHiveSplitLoader( SIMPLE_TABLE, createPartitionMetadataWithOfflinePartitions(), TupleDomain.all(), createBucketSplitInfo(Optional.empty(), ImmutableList.of()), connectorSession, new TestingHdfsEnvironment(), new NamenodeStats(), new TestingDirectoryLister(TEST_FILES), directExecutor(), 2, false); }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions() throws Exception { ConnectorSession connectorSession = new TestingConnectorSession( new HiveSessionProperties(new HiveClientConfig().setMaxSplitSize(0.0, GIGABYTE))).getSessionProperties()); return new BackgroundHiveSplitLoader( SIMPLE_TABLE, createPartitionMetadataWithOfflinePartitions(), TupleDomain.all(), createBucketSplitInfo(Optional.empty(), ImmutableList.of()), connectorSession, new TestingHdfsEnvironment(), new NamenodeStats(), new TestingDirectoryLister(TEST_FILES), directExecutor(), 2, false); }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions() throws Exception { ConnectorSession connectorSession = new TestingConnectorSession( new HiveSessionProperties(new HiveClientConfig().setMaxSplitSize(new DataSize(1.0, GIGABYTE))).getSessionProperties()); return new BackgroundHiveSplitLoader( SIMPLE_TABLE, createPartitionMetadataWithOfflinePartitions(), TupleDomain.all(), createBucketSplitInfo(Optional.empty(), ImmutableList.of()), connectorSession, new TestingHdfsEnvironment(), new NamenodeStats(), new TestingDirectoryLister(TEST_FILES), directExecutor()); }
public String toString() { return methodPrefix.toString(); }
public String toString() { return methodPrefix + '=' + methodPrefix; }
public String toString() { return methodPrefix; }
public final String toString() { return methodPrefix.toString(); }
public String toString() { return methodPrefix + '=' + method.toString(); }
private void setPlatformTextClassifier(@Nullable TextClassifier textClassifier) { android.view.textclassifier.TextClassificationManager textClassificationManager = (android.view.textclassifier.TextClassificationManager) mContext.getSystemService(Context.TEXT_CLASSIFICATION_SERVICE); android.view.textclassifier.TextClassifier platformTextClassifier = (null == textClassifier)? null : new PlatformTextClassifier(mContext, textClassifier); textClassificationManager.setTextClassifier(platformTextClassifier); }
private void setPlatformTextClassifier(@Nullable TextClassifier textClassifier) { android.view.textclassifier.TextClassificationManager textClassificationManager = (android.view.textclassifier.TextClassificationManager) mContext.getSystemService(Context.TEXT_CLASSIFICATION_SERVICE); android.view.textclassifier.TextClassifier platformTextClassifier = (textClassifier == null? null : new PlatformTextClassifier(mContext, textClassifier); textClassificationManager.setTextClassifier(platformTextClassifier); }
private void setPlatformTextClassifier(@Nullable TextClassifier textClassifier) { android.view.textclassifier.TextClassificationManager textClassificationManager = (android.view.textclassifier.TextClassificationManager) mContext.getSystemService(Context.TEXT_CLASSIFICATION_SERVICE); android.view.textclassifier.TextClassifier platformTextClassifier = textClassifier == null? null : new PlatformTextClassifier(mContext, textClassifier); textClassificationManager.setTextClassifier(platformTextClassifier); }
private void setPlatformTextClassifier(@Nullable TextClassifier textClassifier) { android.view.textclassifier.TextClassificationManager textClassificationManager = (android.view.textclassifier.TextClassificationManager) mContext.getSystemService(Context.TEXT_CLASSIFICATION_SERVICE); android.view.textclassifier.TextClassifier platformTextClassifier = (textClassifier == null)? null : new PlatformTextClassifier(mContext, textClassifier); textClassificationManager.setTextClassifier(platformTextClassifier); }
private void setPlatformTextClassifier(@Nullable TextClassifier textClassifier) { android.view.textclassifier.TextClassificationManager textClassificationManager = (android.view.textclassifier.TextClassificationManager) mContext.getSystemService(Context.TEXT_CLASSIFICATION_SERVICE); android.view.textclassifier.TextClassifier platformTextClassifier = (String) textClassifier == null? null : new PlatformTextClassifier(mContext, textClassifier); textClassificationManager.setTextClassifier(platformTextClassifier); }
Object loadServiceCapabilities(String serviceUrl) throws IOException { HttpGet request = new HttpGet(serviceUrl); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)); CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help"); validateResponse(httpResponse, serviceUrl); HttpEntity httpEntity = httpResponse.getEntity(); ContentType contentType = ContentType.getOrDefault(httpEntity); if ("text/plain".equals(contentType.getMimeType())) { return getContent(httpEntity); } return parseJsonMetadata(httpEntity); }
Object loadServiceCapabilities(String serviceUrl) throws IOException { HttpGet request = new HttpGet(serviceUrl); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)); CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help"); validateResponse(httpResponse, serviceUrl); ContentType contentType = ContentType.getOrDefault(httpEntity); if ("text/plain".equals(contentType.getMimeType())) { return getContent(httpEntity); } return parseJsonMetadata(httpEntity); }
Object loadServiceCapabilities(String serviceUrl) throws IOException { HttpGet request = new HttpGet(serviceUrl); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)); CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help"); validateResponse(httpResponse, serviceUrl); HttpEntity httpEntity = httpResponse.getEntity(); ContentType contentType = ContentType.getOrDefault(httpEntity); if (contentType.getMimeType().equals("text/plain")) { return getContent(httpEntity); } return parseJsonMetadata(httpEntity); }
Object loadServiceCapabilities(String serviceUrl) throws IOException { HttpGet request = new HttpGet(serviceUrl); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)); CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help"); validateResponse(httpResponse, serviceUrl); ContentType contentType = ContentType.getOrDefault(httpEntity); if (contentType.getMimeType().equals("text/plain")) { return getContent(httpEntity); } return parseJsonMetadata(httpEntity); }
Object loadServiceCapabilities(String serviceUrl) throws IOException { HttpGet request = new HttpGet(serviceUrl); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)); CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help"); validateResponse(httpResponse, serviceUrl); ContentType contentType = ContentType.getOrDefault(httpEntity, "text/plain".equals(contentType.getMimeType())) { return getContent(httpEntity); } return parseJsonMetadata(httpEntity); }
protected void doStop() { log.info("Stopping Netty server"); boss.shutdownGracefully(); if(!datagram) { wrkr.shutdownGracefully(); } try { sock.channel().closeFuture().sync(); } catch (InterruptedException e) { log.warn("Netty server stop interrupted"); Thread.currentThread().interrupt(); } log.info("Netty server stopped"); notifyStopped(); } }
protected void doStop() { log.info("Stopping Netty server"); boss.shutdownGracefully(); if(!datagram) { wrkr.shutdownGracefully(); } try { sock.closeFuture().sync(); } catch (InterruptedException e) { log.warn("Netty server stop interrupted"); Thread.currentThread().interrupt(); } log.info("Netty server stopped"); notifyStopped(); } }
protected void doStop() { log.info("Stopping Netty server"); throws.shutdownGracefully(); if(!datagram) { wrkr.shutdownGracefully(); } try { sock.channel().closeFuture().sync(); } catch (InterruptedException e) { log.warn("Netty server stop interrupted"); Thread.currentThread().interrupt(); } log.info("Netty server stopped"); notifyStopped(); } }
protected void doStop() { log.info("Stopping Netty server"); boss.shutdownGracefully(); synchronized (sock) { try { sock.channel().closeFuture().sync(); } catch (InterruptedException e) { log.warn("Netty server stop interrupted"); Thread.currentThread().interrupt(); } log.info("Netty server stopped"); notifyStopped(); } } }
protected void doStop() { log.info("Stopping Netty server"); boss.shutdownGracefully(); synchronized (sock) { try { sock.channel().closeFuture().sync(); } catch (InterruptedException e) { log.warn("Netty server stop interrupted"); Thread.currentThread().interrupt(); } log.info("Netty server stopped"); notifyStopped(); } }
public ChannelViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { LayoutInflater inflater = LayoutInflater.from(parent.getContext()); return ChannelViewHolder.onCreateViewHolder(R.layout.channel_item_layout, parent, false)); }
public ChannelViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { return new ChannelViewHolder((ChannelView) LayoutInflater.from(parent.getContext())); }
public ChannelViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { LayoutInflater inflater = LayoutInflater.from(parent.getContext()); return ChannelViewHolder.create(R.layout.channel_item_layout, parent, false)); }
public ChannelViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { LayoutInflater inflater = LayoutInflater.from(parent.getContext()); return ChannelViewHolder.onCreateViewHolder(parent, viewType); }
public ChannelViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { return LayoutInflater.from(parent.getContext()); }
public void onSelectionChanged(int selectedItemCnt) { int numberMergeSelections = adapter.numberMergeSelections; if (adapter.isMergeSelection && selectedItemCnt >= numberMergeSelections) { updateSelectionToggle(actionMode.getMenu().findItem(R.id.toggle_selection)); actionMode.setTitle(getResources().getQuantityString(getActionModeTitleId(actionModeType), selectedItemCnt, selectedItemCnt)); } }
public void onSelectionChanged(int selectedItemCnt) { int numberMergeSelections = adapter.numberMergeSelections; if (adapter.isMergeSelection && selectedItemCnt >= numberMergeSelections) { updateSelectionToggle(actionMode.getMenu().findItem(R.id.toggle_selection)); actionMode.setTitle(String.valueOf(getActionModeTitleId(actionModeType), selectedItemCnt, selectedItemCnt)); } }
public void onSelectionChanged(int selectedItemCnt) { int numberMergeSelections = adapter.numberMergeSelections; if (adapter.isMergeSelection && selectedItemCnt >= numberMergeSelections) { updateSelectionToggle(actionMode.getMenu().findItem(R.id.toggle_selection)); actionMode.setTitle(getResources().getQuantityString(getActionModeTitleId(actionModeType), selectedItemCnt, selectedItemCnt)); } updateSelectionToggle(actionMode.getMenu().findItem(R.id.toggle_selection)); }
public void onSelectionChanged(int selectedItemCnt) { int numberMergeSelections = adapter.numberMergeSelections; if (adapter.isMergeSelection) { updateSelectionToggle(actionMode.getMenu().findItem(R.id.toggle_selection)); actionMode.setTitle(getResources().getQuantityString(getActionModeTitleId(actionModeType), selectedItemCnt, selectedItemCnt)); } }
public void onSelectionChanged(int selectedItemCnt) { int numberMergeSelections = adapter.numberMergeSelections; if (adapter.isMergeSelection && selectedItemCnt >= numberMergeSelections) { updateSelectionToggle(actionMode.getMenu().findItem(R.id.toggle_selection)); actionMode.setTitle(getResources().getQuantityString(getActionModeTitleId(actionModeType), selectedItemCnt, selectedItemCnt)); } updateSelectionSelection(actionMode.getMenu().findItem(R.id.toggle_selection)); }
private boolean shouldBeDistributed(PlanNode planNode) { return planNode instanceof AggregationNode || planNode instanceof JoinNode || (planNode instanceof TopNNode && ((TopNNode) planNode).getStep().equals(TopNNode.Step.PARTIAL)); }
private boolean shouldBeDistributed(PlanNode planNode) { return planNode instanceof AggregationNode || planNode instanceof JoinNode || ((TopNNode) planNode).getStep().equals(TopNNode.Step.PARTIAL)); }
private boolean shouldBeDistributed(PlanNode planNode) { return planNode instanceof AggregationNode || planNode instanceof JoinNode && (planNode instanceof TopNNode && ((TopNNode) planNode).getStep().equals(TopNNode.Step.PARTIAL)); }
private boolean shouldBeDistributed(PlanNode planNode) { return planNode instanceof AggregationNode || planNode instanceof JoinNode || (planNode instanceof TopNNode && ((TopNNode) planNode).getStep().equals(Top NNode.Step.PARTIAL)); }
private boolean shouldBeDistributed(PlanNode planNode) { return planNode instanceof AggregationNode || planNode instanceof JoinNode && ((TopNNode) planNode).getStep().equals(TopNNode.Step.PARTIAL)); }
public void testConcurrency() { final ServerTemplate serverTemplate = templateStorage.load(serverTemplateId); marshal("application/xml", serverTemplate); Thread disconnect = new Thread(() -> disconnect()); disconnect.start(); String response = marshal("application/xml", serverTemplate); LOGGER.info(response); }
public void testConcurrency() { final ServerTemplate serverTemplate = templateStorage.load(serverTemplateId); marshal("application/xml", serverTemplate); Thread disconnect = new Thread(() -> disconnect()); disconnect.start(); Long response = marshal("application/xml", serverTemplate); LOGGER.info(response); }
public void testConcurrency() { final ServerTemplate serverTemplate = templateStorage.load(serverTemplateId); marshal("application/xml", serverTemplate); Thread disconnect = new Thread(() -> disconnect()); disconnect.start(); final String response = marshal("application/xml", serverTemplate); LOGGER.info(response); }
public void testConcurrency() throws ServerTemplate serverTemplate = templateStorage.load(serverTemplateId); marshal("application/xml", serverTemplate); Thread disconnect = new Thread(() -> disconnect()); disconnect.start(); String response = marshal("application/xml", serverTemplate); LOGGER.info(response); }
public void testConcurrency() { final ServerTemplate serverTemplate = templateStorage.load(serverTemplateId); marshal("application/xml", serverTemplate);Thread disconnect = new Thread(() -> disconnect()); disconnect.start(); String response = marshal("application/xml", serverTemplate); LOGGER.info(response); }
protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) { builder.append(String.format(Locale.ENGLISH, "%d", node.getValue())); return null; }
protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) { StringBuilder builder = new StringBuilder(); builder.append(String.format(Locale.ENGLISH, "%d", node.getValue())); return null; }
protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) { if (node.getValue()!= null) { builder.append(String.format(Locale.ENGLISH, "%d", node.getValue())); return null; } }
protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) { try { builder.append(String.format(Locale.ENGLISH, "%d", node.getValue())); return null; } catch (Exception e) { } return null; }
protected  Void visitIntegerLiteral(IntegerLiteral node, Integer indent) { builder.append(String.format(Locale.ENGLISH, "%d", node.getValue())); return null; }
private List<GerritQueryResult> executeQueryRest(String query) throws GerritException { List<GerritQueryResult> results = null; results = client.executeQueryRest(new NullProgressMonitor(), query); return results; }
private List<GerritQueryResult> queryRest(String query) throws GerritException { List<GerritQueryResult> results = null; results = client.executeQueryRest(new NullProgressMonitor(), query); return results; }
private List<GerritQueryResult> executeQueryRest(String query) throws GerritException { List<GerritQueryResult> results = client.executeQueryRest(new NullProgressMonitor(), query); return results; }
private List<GerritQueryResult> executeQueryRest(String query) throws GerritException { return client.executeQueryRest(new NullProgressMonitor(), query); }
private List<GerritQueryResult> executeQueryRest(String query) throws GerritException { List<GerritQueryResult> results = null; results =client.executeQueryRest(new NullProgressMonitor(), query); return results; }
public QueryWrapper(@JsonProperty("query") String query, @JsonProperty("queryType") String queryType) { this(query, queryType, null); }
public QueryWrapper(@JsonProperty("query") String query, @JsonProperty("queryType") String queryType) { this(query, queryType, ""); }
public QueryWrapper(@JsonProperty("query") String query, @JsonProperty("queryType") String queryType) { this(query, queryType, ""); }
public QueryWrapper(@JsonProperty("query") String query, @JsonProperty("queryType") String queryType) { this(query, queryType, ""; }
public QueryWrapper(@JsonProperty("query") String query, @JsonProperty("queryType") String queryType) {}
private List<CoordinatorDuty> makeCompactSegmentsDuty() { List<CoordinatorDuty> duties = new ArrayList<>(); duties.add(compactSegments); return ImmutableList.copyOf(duties); }
private Document<CoordinatorDuty> makeCompactSegmentsDuty() { List<CoordinatorDuty> duties = new ArrayList<>(); duties.add(compactSegments); return ImmutableList.copyOf(duties); }
private List<CoordinatorDuty> makeCompactSegmentsDuty() { return ImmutableList.copyOf(compactSegments); }
private List<CoordinatorDuty> makeCompactSegmentsDuty() { List<CoordinatorDuty> duties = ImmutableList.copyOf(compactSegments); return ImmutableList.copyOf(duties); }
private List<CoordinatorDuty> makeCompactSegmentsDuty() { if (size() == 0) { return ImmutableList.copyOf(new ArrayList<>()); } return ImmutableList.copyOf(size); }
public CreateServerOptions networks(String... networks) { return networks(ImmutableSet.copyOf(networks, "network should not be empty"))); }
public CreateServerOptions networks(String... networks) { return networks(ImmutableSet.copyOf(networks, "network should not be empty")); }
public CreateServerOptions networks(String... networks) { return networks(ImmutableSet.copyOf(networks), "network should not be empty")); }
public CreateServerOptions networks(String... networks) { return networks(ImmutableSet.copyOf(networks), "%network should not be empty")); }
public CreateServerOptions networks(String... networks) { return networks(ImmutableSet.copyOf(networks, "network should not be empty())); }
private static AbbreviatedObjectId id(DiffEntry de) { return de.changeType == ChangeType.DELETE? de.oldId : de.newId); }
private static AbbreviatedObjectId id(DiffEntry de) { return (de.changeType == ChangeType.DELETE)? de.oldId : de.newId); }
private static AbbreviatedObjectId id(DiffEntry de) { return (de.changeType == ChangeType.DELETE? de.oldId : de.newId); }
private static AbbreviatedObjectId id(DiffEntry de) { return de.changeType == ChangeType.DELETE? de.oldId : de.newId; }
private static AbbreviatedObjectId id(DiffEntry de) { return (de.changeType == ChangeType.DELETE)? de.oldId : de.newId; }
protected VariableReferenceExpression getVariableReference(RowExpression expression) { return expression instanceof VariableReferenceExpression? ((VariableReferenceExpression) expression : Optional.empty(), "Expected a variable reference but got " + expression); }
protected VariableReferenceExpression getVariableReference(RowExpression expression) { return expression instanceof VariableReferenceExpression? ((VariableReferenceExpression) expression) : null; }
protected VariableReferenceExpression getVariableReference(RowExpression expression) { return expression instanceof VariableReferenceExpression? ((VariableReferenceExpression) expression : null); }
protected VariableReferenceExpression getVariableReference(RowExpression expression) { return ((VariableReferenceExpression) expression); }
protected VariableReferenceExpression getVariableReference(RowExpression expression) { return expression instanceof VariableReferenceExpression? ((VariableReferenceExpression) expression) : Optional.empty(); }
public boolean isLocalOnly() { return this.isLocalOnly(); }
public boolean isLocalOnly() { return this == true; }
public boolean isLocalOnly() { return this.type; }
public boolean isLocalOnly() { return this == LOCAL; }
public boolean isLocalOnly() { return this.default; }
protected void findUsers(String searchString, AsyncQuery query) { Frontend.getInstance().runQuery(VdcQueryType.Search, new DirectorySearchParameters("ADUSER@" + ((ProfileEntry) getProfile().getSelectedItem()).getAuthz() + ": " + searchString, SearchType.DirectoryUser, getNamespace().getSelectedItem()), query); }
protected void findUsers(String searchString, AsyncQuery query) { Frontend.getInstance().runQuery(VdcQueryType.Search, new DirectorySearchParameters("AD USER@" + ((ProfileEntry) getProfile().getSelectedItem()).getAuthz() + ": " + searchString, SearchType.DirectoryUser, getNamespace().getSelectedItem()), query); }
protected void findUsers(String searchString, AsyncQuery query) { Frontend.getInstance().runQuery(VdcQueryType.Search, new DirectorySearchParameters("ADUSER@" + ( (ProfileEntry) getProfile().getSelectedItem()).getAuthz() + ": " + searchString, SearchType.DirectoryUser, getNamespace().getSelectedItem()), query); }
protected void findUsers(String searchString, AsyncQuery query) { Frontend.getInstance().runQuery(VdcQueryType.Search, new DirectorySearchParameters("ADUSER@" + ((ProfileEntry) getProfile().getSelectedItem()).getAuthz() + ": " + SearchType.DirectoryUser, getNamespace().getSelectedItem()), query); }
protected void findUsers(String searchString, AsyncQuery query) { Frontend.getInstance().runQuery(VdcQueryType.Search, new DirectorySearchParameters("ADUSER@" + ((ProfileEntry) getProfile().getSelectedItem()).getAuthz() + ": " + searchString, SearchType.DirectoryUser, getNamespace().getSelectedItem()), query)); }
public String getImageUrl(String id) { return getProvider().getUrl() + API_VERSION + "/images/" + id + "/file"; }
public String getImageUrl(String id) { return getProvider().url() + API_VERSION + "/images/" + id + "/file"; }
public String getImageUrl(String id) { return getProvider(). url() + API_VERSION + "/images/" + id + "/file"; }
public String getImageUrl(String id) { return getProvider().getUrl() + API_VERSION + "/ images/" + id + "/file"; }
private String getImageUrl(String id) { return getProvider().getUrl() + API_VERSION + "/images/" + id + "/file"; }
public User(@NonNull String username, @NonNull String password) { this(username, password, new HashMap<String, Integer>(), null); }
public User(@NonNull String username, @NonNull String password) { this(username, password, new HashMap<String, Integer>(), null)); }
public User(@NonNull String username, @NonNull String password) { this(username, password, new HashMap<String, Integer>()); }
public User(@NonNull String username, @NonNull String password) { this(username, password, null, null); }
public User(@NonNull String username, @NonNull String password) { this(username, password, new HashMap<>(); }
public final String consoleClientResourcesUrl() { String url = getString(DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); boolean isAbsolute = url.contains("://"); return isAbsolute? url : Window.Location.getProtocol() + " "/" + BaseContextPathData.getInstance().getRelativePath() + url; }
public final String consoleClientResourcesUrl() { String url = getString(DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); if (url.contains("://")) { return url.contains("://"); } return Window.Location.getProtocol() + " "/" + BaseContextPathData.getInstance().getRelativePath() + url; }
public final static String consoleClientResourcesUrl() { String url = getString(DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); boolean isAbsolute = url.contains("://"); return isAbsolute? url : Window.Location.getProtocol() + " "/" + BaseContextPathData.getInstance().getRelativePath() + url; }
public final String consoleClientResourcesUrl() { String url = getString(DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); boolean isAbsolute = url.contains("://"); return isAbsolute? url : Window.Location.getProtocol() + " "/" + BaseContextPathData.getInstance().getRelativePath() + url); }
public final String consoleClientResourcesUrl() { String url = getString(DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); try { boolean isAbsolute = url.contains("://"); return isAbsolute? url : Window.Location.getProtocol() + " "/" + BaseContextPathData.getInstance().getRelativePath() + url; } catch (Exception e) { return url; } }
private boolean isFileEntryPackageable(ipEntry entry) { String entryName = entry.getName(); return ApkBuilder.checkFileForPackaging(entry.getName()) && isValidMetaInfEntry(entryName); }
private boolean isFileEntryPackageable(ipEntry entry) { String entryName = entry.getName(); return isValidMetaInfEntry(entryName) && isValidMetaInfEntry(entryName); }
private boolean isFileEntryPackageable(ipEntry entry) { String entryName = entry.getName(); return!BuildBuilder.checkFileForPackaging(entry.getName()) && isValidMetaInfEntry(entryName); }
private boolean isFileEntryPackageable(ipEntry entry) { String entryName = entry.getName(); return (ApkBuilder.checkFileForPackaging(entry.getName()) && isValidMetaInfEntry(entryName)); }
private boolean isFileEntryPackageable(ipEntry entry) { String entryName = entry.getName(); return!encodeMetaInfEntry(entry.getName()) && isValidMetaInfEntry(entryName); }
public void testList() { List<VirtualMachine> list = api().list(); for (VirtualMachine machine : list) { assertTrue(machine.name().isEmpty()); } }
public void testList() { List<VirtualMachine> list = api().list(); for (VirtualMachine machine : list) { assertTrue(!list.isEmpty()); } }
public void testList() { List<VirtualMachine> list = api().list(); for (VirtualMachine machine : list) { assertTrue(!machine.name().isEmpty()); } }
public void testList() { List<VirtualMachine> list = api().list(); for (VirtualMachine machine : list) { if (!list.isEmpty()) { } } }
public void testList() { List<VirtualMachine> list = api().list(); assertEquals(list.size(), 1); }
void addLayer(String id, StyleLayer layer) { layersById.put(id, layer); }
public void addLayer(String id, StyleLayer layer) { layersById.put(id, layer); }
protected void addLayer(String id, StyleLayer layer) { layersById.put(id, layer); }
private void addLayer(String id, StyleLayer layer) { layersById.put(id, layer); }
final void addLayer(String id, StyleLayer layer) { layersById.put(id, layer); }
public void setSelection(ITimeGraphEntry trace) { if (fListenerNotifier!= null && fListenerNotifier.hasSelectionChanged()) { return; } fSelectedEntry = trace; fTimeGraphCtrl.selectItem(trace, false); adjustVerticalScrollBar(); }
public void setSelection(ITimeGraphEntry trace) { if (traceListenerNotifier!= null && fListenerNotifier.hasSelectionChanged()) { return; } fSelectedEntry = trace; fTimeGraphCtrl.selectItem(trace, false); adjustVerticalScrollBar(); }
public void setSelection(ITimeGraphEntry trace) { if (fListenerNotifier!= null && fListenerNotifier.hasSelectionChanged()) { return; } fSelectedEntry = trace; fTimeGraphCtrl.selectItem(trace, true); adjustVerticalScrollBar(); }
public void setSelection(ITimeGraphEntry trace) { fSelectedEntry = trace; fTimeGraphCtrl.selectItem(trace, false); adjustVerticalScrollBar(); }
public void setSelection(ITimeGraphEntry trace) { super.setSelection(trace); fSelectedEntry = trace; fTimeGraphCtrl.selectItem(trace, false); adjustVerticalScrollBar(); }
private ClassFile newClassFile(String name, int accessFlags, String superclass, String... interfaces) { try { return SecurityActions.getConstructor(ClassFile.class, String.class, int.class, String.class, ClassLoader.class, Arrays2.EMPTY_STRING_ARRAY.getClass()).newInstance(name, accessFlags, superclass, classLoader, interfaces); } catch (Exception e) { throw BeanLogger.LOG.unableToCreateClassFile(name, e.getCause()); } }
private ClassFile newClassFile(String name, int accessFlags, String superclass, String... interfaces) { try { return SecurityActions.getConstructor(ClassFile.class, String.class, int.class, String.class, ClassLoader.class, Arrays2.EMPTY_STRING_ARRAY.getClass()).newInstance(name, accessFlags, superclass, classLoader, interfaces); } catch (Exception e) { throw BeanLogger.LOG.unableToCreateClassFile(name, e.getCause()); } } }
private ClassFile newClassFile(String name, int accessFlags, String superclass, String... interfaces) { try { return SecurityActions.getConstructor(ClassFile.class, String.class, int.class, int.class, ClassLoader.class, Arrays2.EMPTY_STRING_ARRAY.getClass()).newInstance(name, accessFlags, superclass, classLoader, interfaces); } catch (Exception e) { throw BeanLogger.LOG.unableToCreateClassFile(name, e.getCause()); } }
private static ClassFile newClassFile(String name, int accessFlags, String superclass, String... interfaces) { try { return SecurityActions.getConstructor(ClassFile.class, String.class, int.class, String.class, ClassLoader.class, Arrays2.EMPTY_STRING_ARRAY.getClass()).newInstance(name, accessFlags, superclass, classLoader, interfaces); } catch (Exception e) { throw BeanLogger.LOG.unableToCreateClassFile(name, e.getCause()); } } }
private ClassFile newClassFile(String name, int accessFlags, String superclass, String... interfaces) { try { return SecurityActions.getConstructor(ClassFile.class, String.class, int.class, int.class, ClassLoader.class, Arrays2.EMPTY_STRING_ARRAY.getClass()).newInstance(name, accessFlags, superclass, classLoader, interfaces); } catch (Exception e) { throw BeanLogger.LOG.unableToCreateClassFile(name, e.getCause()); } } }
public boolean addListener(String type, long id, ClassLoaderListener classLoaderListener) { return ((VirtualClassLoader) getLocalClassLoader(type, id)); }
public boolean addListener(String type, long id, ClassLoaderListener classLoaderListener) { return (localClassLoader) getLocalClassLoader(type, id)); }
public boolean addListener(String type, long id, ClassLoaderListener classLoaderListener) { ((VirtualClassLoader) getLocalClassLoader(type, id)); return localClassLoader.addListener(classLoaderListener); }
public boolean addListener(String type, long id, ClassLoaderListener classLoaderListener) { return getLocalClassLoader(type, id); }
public boolean addListener(String type, long id, ClassLoaderListener classLoaderListener) { return ((VirtualClassLoader) getLocalClassLoader(type, id)).addListener(classLoaderListener); }
public static final void setPreferenceNodeId (String id) { if (fgPreferenceNodeId == null) { fgPreferenceNodeId = id; } }
public static final void setPreferenceNodeId(String id) { if (fgPreferenceNodeId == null) { fgPreferenceNodeId = id; } }
public static final void setPreferenceNodeId(String id) { fgPreferenceNodeId = id; }
public static final void setPreferenceNodeId (String id) { fgPreferenceNodeId = id; }
public static final void setPreferenceNodeId(String id) { fgPreferenceNodeId = null; }
private void init() { try { hostname = InetAddress.getLocalHost().getHostName(); hostname = "localhost"; } catch (UnknownHostException e) { logger.warn("Error getting the value of localhost. " + "Proceeding with 'localhost'.", e); } }
private void init() { try { hostname = InetAddress.getLocalHost().getHostName(); hostname = "localhost"; } catch (UnknownHostException e) { logger.error("Error getting the value of localhost. " + "Proceeding with 'localhost'.", e); } }
private void init() { try { hostname = InetAddress.getLocalHost().getHostName(); hostname = "localhost"; } catch (UnknownHostException e) { logger.warn("Error getting the value of localhost. " + "Proceeding with 'localhost'.", e);, e); } }
private void init() { try { hostname = InetAddress.getLocalHost().getHostName(); hostname = "localhost"; } catch (UnknownHostException e) { logger.warn("Error getting the value of localhost. " + "Proceeding with 'localhost'.", e); ", e); } }
private void init() { try { hostname = InetAddress.getLocalHost().getHostName(); hostname = "localhost"; } catch (UnknownHostException e) { logger.warn("Error getting the value of localhost. " + "Proceeding with 'localhost'.", e); } } }
private OSImageToImage(JustProvider provider) { this.provider = provider; }
public OSImageToImage(JustProvider provider) { this.provider = provider; }
protected OSImageToImage(JustProvider provider) { this.provider = provider; }
ImageToImage(JustProvider provider) { this.provider = provider; }
FileToImage(JustProvider provider) { this.provider = provider; }
private Optional<Cookie> findCookieWithName(String cookieName, HttpClient httpClient) { return Arrays.stream(httpClient.getState().getCookies()).filter(c -> cookieName.equals(c.getName())).findFirst(); }
private Optional<Cookie> findCookieWithName(String cookieName, HttpClient httpClient) { Optional<Cookie> cookie = Arrays.stream(httpClient.getState().getCookies()).filter(c -> cookieName.equals(c.getName())).findFirst(); return cookie; }
private Optional<Cookie> findCookieWithName(String cookieName, HttpClient httpClient) { return Arrays.stream(httpClient.getState().getCookies()).filter(c -> cookieName.equalsIgnoreCase(c.getName())).findFirst(); }
private Optional<Cookie> findCookieWithName(String cookieName, HttpClient httpClient) { return httpClient.getState().getCookies().stream().filter(c -> cookieName.equals(c.getName())).findFirst(); }
private Optional<Cookie> findCookieWithName(String cookieName, HttpClient httpClient) { return Arrays.stream(httpClient.getState().getCookies()).filter(entry -> cookieName.equals(entry.getName())).findFirst(); }
public void destroy() { for (JettyHttpClient client : clients) { client.close(); } if (pool!= null) { pool.close(); pool = null; injector.getInstance(MBeanExporter.class).unexport(generatedNameOf(QueuedThreadPoolMBean.class) + "_" + name); } destroyed.set(true); } }
public void destroy() { for (JettyHttpClient client : clients) { client.close(); pool = null; if(injector.getExistingBinding(Key.get(MBeanExporter.class))!= null) { injector.getInstance(MBeanExporter.class).unexport(generatedNameOf(QueuedThreadPoolMBean.class) + "_" + name); } destroyed.set(true); } }
public void destroy() { for (JettyHttpClient client : clients) { client.close(); pool = null; if(injector.getExistingBinding(Key.get(MBeanExporter.class))!= null) { injector.getInstance(MBeanExporter.class).unexport(generatedNameOf(QueuedThreadPoolMBean.class) + "_" + name); } } destroyed.set(true); }
public void destroy() { for (JettyHttpClient client : clients) { client.close(); } if (pool!= null) { pool.close(); pool = null; injector.getInstance(MBeanExporter.class).unexport(generatedNameOf(QueuedThreadPoolMBean.class) + "_" + name); } destroyed.set(true); } return; }
public void destroy() { for (JettyHttpClient client : clients) { client.close(); } }
private Set<String> expandRegionalChannelUris(String channelUri) { Set<String> expandedUris = null; if (BBC1_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC1_TXLOG_CHANNEL_URIS; } if (BBC2_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC2_TXLOG_CHANNEL_URIS; } return expandedUris == null? null : Sets.difference(expandedUris, ImmutableSet.of(channelUri)); }
private Set<String> expandRegionalChannelUris(String channelUri) { Set<String> expandedUris = new HashSet<>(); if (BBC1_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC1_TXLOG_CHANNEL_URIS; } if (BBC2_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC2_TXLOG_CHANNEL_URIS; } return expandedUris == null? null : Sets.difference(expandedUris, ImmutableSet.of(channelUri)); }
private Set<String> expandRegionalChannelUris(String channelUri) { Set<String> expandedUris = new HashSet<String>(); if (BBC1_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC1_TXLOG_CHANNEL_URIS; } if (BBC2_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC2_TXLOG_CHANNEL_URIS; } return expandedUris == null? null : Sets.difference(expandedUris, ImmutableSet.of(channelUri)); }
private Set<String> expandRegionalChannelUris(String channelUri) { Set<String> expandedUris = null; if (BBC1_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC1_TXLOG_CHANNEL_URIS; } if (BBC2_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC2_TXLOG_CHANNEL_URIS; } return expandedUris == null || Sets.difference(expandedUris, ImmutableSet.of(channelUri)); }
private Set<String> expandRegionalChannelUris(String channelUri) { Set<String> expandedUris = null; if (BBC1_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC1_TXLOG_CHANNEL_URIS; } if (BBC2_TXLOG_CHANNEL_URIS.contains(channelUri)) { expandedUris = BBC2_TXLOG_CHANNEL_URIS; } return expandedUris == null? null : Sets.difference(expandedUris, ImmutableSet.of(channelUri))); }
public void testMultipleBatchesLateral_WithStreamingAgg() throws Exception { String sql = "SELECT t2.maxprice FROM (SELECT customer.c_orders AS c_orders FROM " + "dfs.lateraljoin/multipleFiles/ customer) t1, LATERAL (SELECT CAST(MAX(t.ord.o_totalprice)" + " AS int) AS maxprice FROM UNNEST(t1.c_orders) t(ord) GROUP BY t.ord.o_orderstatus) t2"; testBuilder().optionSettingQueriesForTestQuery("alter session set %s = true", PlannerSettings.STREAMAGG.getOptionName()).sqlQuery(sql).unOrdered().baselineColumns("maxprice").baselineValues(367190).baselineValues(316347).baselineValues(235695).baselineValues(177819).build().run(); }
public void testMultipleBatchesLateral_WithStreamingAgg() throws Exception { String sql = "SELECT t2.maxprice FROM (SELECT customer.c_orders AS c_orders FROM " + "dfs.lateraljoin/multipleFiles/ customer) t1, LATERAL (SELECT CAST(MAX(t.ord.o_totalprice)" + " AS int) AS maxprice FROM UNNEST(t1.c_orders) t(ord) GROUP BY t.ord.o_orderstatus) t2"; testBuilder().optionSettingQueriesForTestQuery("alter session set %s = true", PlannerSettings.STREAMAGG.getOptionName()).sqlQuery(sql).unOrdered().baselineColumns("maxprice").baselineValues(367190).baselineValues(316347).baselineValues(306996).baselineValues(235695).baselineValues(177819).build().run(); }
public void testMultipleBatchesLateral_WithStreamingAgg() throws Exception { String sql = "SELECT t2.maxprice FROM (SELECT customer.c_orders AS c_orders FROM " + "dfs.lateraljoin/multipleFiles/ customer) t1, LATERAL (SELECT CAST(MAX(t.ord.o_totalprice)" + " AS int) AS maxprice FROM UNNEST(t1.c_orders) t(ord) GROUP BY t.ord.o_orderstatus) t2"; testBuilder().optionSettingQueriesForTestQuery("alter session set %s = true", PlannerSettings.STREAMAGG.getOptionName()).sqlQuery(sql).unOrdered().baselineColumns("maxprice").baselineValues(367190).baselineValues(216347).baselineValues(235695).baselineValues(177819).build().run(); }
public void testMultipleBatchesLateral_WithStreamingAgg() throws Exception { String sql = "SELECT t2.maxprice FROM (SELECT customer.c_orders AS c_orders FROM " + "dfs.lateraljoin/multipleFiles/ customer) t1, LATERAL (SELECT CAST(MAX(t.ord.o_totalprice)" + " AS int) AS maxprice FROM UNNEST(t1.c_orders) t(ord) GROUP BY t.ord.o_orderstatus) t2"; testBuilder().optionSettingQueriesForTestQuery("alter session set %s = true", PlannerSettings.STREAMAGG.getOptionName()).sqlQuery(sql).unOrdered().baselineColumns("maxprice").baselineValues(367190).baselineValues(316347).baselineValues( 235695).baselineValues(177819).build().run(); }
public void testMultipleBatchesLateral_WithStreamingAgg() throws Exception { String sql = "SELECT t2.maxprice FROM (SELECT customer.c_orders AS c_orders FROM " + "dfs.lateraljoin/multipleFiles/ customer) t1, LATERAL (SELECT CAST(MAX(t.ord.o_totalprice)" + " AS int) AS maxprice FROM UNNEST(t1.c_orders) t(ord) GROUP BY t.ord.o_orderstatus) t2"; testBuilder().optionSettingQueriesForTestQuery("alter session set %s = true", PlannerSettings.STREAMAGG.getOptionName()).sqlQuery(sql).unOrdered().baselineColumns("maxprice").baselineValues(367190).baselineValues(316347).baselineValues(206996).baselineValues(235695).baselineValues(177819).build().run(); }
public boolean isType(String value) { GlusterStatus volStatus = GlusterStatus.valueOf(value); for (GlusterStatus status : values) { if (status.equals(volStatus)) { return true; } } return false; }
public boolean isType(String value) { if (value == null) { return false; } GlusterStatus volStatus = GlusterStatus.valueOf(value); for (GlusterStatus status : values) { if (status.equals(volStatus)) { return true; } } return false; }
public boolean isType(String value) { GlusterStatus volStatus = GlusterStatus.valueOf(value); return volStatus!= null && values.contains(status); }
public boolean isType(String value) { GlusterStatus volStatus = GlusterStatus.valueOf(value); for (GlusterStatus status : values) { if (status.equals(volStatus)) { return true; } } return false; }); }
public boolean isType(String value) { GlusterStatus volStatus = GlusterStatus.valueOf(value); for (GlusterStatus status : values) { if (status.equals(volStatus)) { return true; } } return false; } return true; }
public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { cause.printStackTrace(); ctx.close(); }
public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { cause.printStackTrace(); try { ctx.close(); } finally { ctx.close(); } }
public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { cause.printStackTrace(); }
public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { try { cause.printStackTrace(); } finally { ctx.close(); } }
public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { cause.run(); }
public CloseNoOpServerProtocolHandler(String websocketPath) { super(websocketPath, null, true); }
public CloseNoOpServerProtocolHandler(String websocketPath) { super(websocketPath, null, false); }
public CloseNoOpServerProtocolHandler(String websocketPath) { super(websocketPath, null, null); }
public CloseNoOpServerProtocolHandler(String websocketPath) { super(websocketPath, null); }
public CloseNoOpServerProtocolHandler(String websocketPath) { super(logPath, null, true); }
public MessageView(Context context, AttributeSet attrs) { super(context, attrs); setOrientation(VERTICAL); }
public MessageView(Context context, AttributeSet attrs) { super(context, attrs); }
private MessageView(Context context, AttributeSet attrs) { super(context, attrs); setOrientation(VERTICAL); }
public MessageView(Context context, AttributeSet attrs) { super(context, attrs); this.setOrientation(VERTICAL); }
public MessageView(Context context, AttributeSet attrs) { super(context, attrs); if (null!= attrs) { setOrientation(VERTICAL); } }
public Canvas addShapeIntoView(final Shape shape) { if (shape.getUUID() == null) { shape.setUUID(UUID.uuid()); } shape.getShapeView().setUUID(shape.getUUID()); getView().add(shape.getShapeView()); return this; }
public Canvas addShapeIntoView(final Shape shape) { Shape shape = shape.getUUID(); if (shape.getUUID() == null) { shape.setUUID(UUID.uuid()); } shape.getShapeView().setUUID(shape.getUUID()); getView().add(shape.getShapeView()); return this; }
private Canvas addShapeIntoView(final Shape shape) { if (shape.getUUID() == null) { shape.setUUID(UUID.uuid()); } shape.getShapeView().setUUID(shape.getUUID()); getView().add(shape.getShapeView()); return this; }
public Canvas addShapeIntoView(final Shape shape) { if (shape.getUUID() == null) { shape.setUUID(UUID.uuid()); } Shape.getShapeView().setUUID(shape.getUUID()); getView().add(shape.getShapeView()); return this; }
public Canvas addShapeIntoView(final Shape shape) { if (shape.getUUID() == null) { shape.setUUID(UUID.uuid()); } shape.getShapeView().setUUID(shape.getUUID()); getView().add(shape.getShapeView()); return this; } }
public boolean getRequiredParamBoolean(final String key) throws ActionParamsException { final String errMsg = "Required parameter '" + key + "' missing!"; final String val = getRequiredParam(key, errMsg); try { return Boolean.parseBoolean(val); } catch (Exception e) { throw new ActionParamsException(errMsg); } }
public boolean getRequiredParamBoolean(final String key) throws ActionParamsException { final String errMsg = "Required parameter '" + key + "' missing!"; final String val = getRequiredParam(key, errMsg); try { return Boolean.parseBoolean(val); } catch (Exception e) { throw new ActionParamsException(errMsg); } } return false; }
public boolean getRequiredParamBoolean(final String key) throws ActionParamsException { final String errMsg = "Required parameter '" + key + "' missing!"; final String val = getRequiredParam(key, errMsg); try { return Boolean.parseBoolean(val); } catch (Exception e) { throw new ActionParamsException(errMsg); } } }
public boolean getRequiredParamBoolean(final String key) throws ActionParamsException { final String errMsg = "Required parameter '" + key + "' missing!"; final String val = getRequiredParam(key, errMsg); try { return Boolean.parseBoolean(val); } catch (Exception e) { throw new ActionParamsException(errMsg); } } return true; }
public boolean getRequiredParamBoolean(final String key) throws ActionParamsException { final String errMsg = "Required parameter '" + key + "' missing!"; final String val = getRequiredParam(key, errMsg); return Boolean.parseBoolean(val); }
public void onPingFromClient(PingFromClientEvent event, EntityRef entity) { if (networkSystem.getMode().isServer()) { Instant end = Instant.now(); endMap.put(entity, end); updatePing(entity); } }
public void onPingFromClient(PingFromClientEvent event, EntityRef entity){ if (networkSystem.getMode().isServer()) { Instant end = Instant.now(); endMap.put(entity, end); updatePing(entity); } }
public void onPingFromClient(PingFromClientEvent event, EntityRef entity){ if (networkSystem.getMode().isServer()) { Instant end = Instant.now(); endMap.put(entity, end); updatePing(entity); } } }
public void onPingFromClient(PingFromClientEvent event, EntityRef entity) { if (networkSystem.getMode().isServer()) { Instant end = Instant.now(); endMap.put(entity, end); updatePing(entity); } } }
public void onPingFromClient(PingFromClientEvent event, EntityRef entity){ if (networkSystem.getMode().isServer()) { Instant end = Instant.now(); endMap.put(entity, end); updatePing(entity); } } }); }
public boolean areEqual(MapObject o1, MapObject o2) { return o1!= null && o2 == null; }
public boolean areEqual(MapObject o1, MapObject o2) { return o1!= null? o1.id.equals(o2.id) : o2 == null; }
public boolean areEqual(MapObject o1, MapObject o2) { return o1!= null && o1.equals(o1.id); }
public boolean areEqual(MapObject o1, MapObject o2) { return o1!= null? o1.equals(o2) : o2 == null; }
public boolean areEqual(MapObject o1, MapObject o2) { return o1!= null && o1.equals(o2); }
public RedisMetadataStore(RedisConnectionFactory connectionFactory) { this(new StringRedisTemplate(connectionFactory), new StringSet()); }
public RedisMetadataStore(RedisConnectionFactory connectionFactory) { this(new StringRedisTemplate(connectionFactory), new StringRedisTemplate(connectionFactory)); }
public RedisMetadataStore(RedisConnectionFactory connectionFactory) { this(connectionFactory, "'connectionFactory' must not be null."); }
public RedisMetadataStore(RedisConnectionFactory connectionFactory) { this(new StringRedisTemplate(connectionFactory), new StringPool()); }
public RedisMetadataStore(RedisConnectionFactory connectionFactory) {}
public CompleteTransactionMessage(long initiatorHSId, long coordinatorHSId, long txnId, boolean isReadOnly, int hash, boolean isRollback, boolean requiresAck, boolean isRestart, boolean isForReplay) { super(initiatorHSId, coordinatorHSId, txnId, 0, isReadOnly, isForReplay); m_hash = hash; setBit(ISROLLBACK, isRollback); setBit(REQUIRESACK, requiresAck); setBit(ISRESTART, isRestart); }
public CompleteTransactionMessage(long initiatorHSId, long coordinatorHSId, long txnId,boolean isReadOnly, int hash, boolean isRollback, boolean requiresAck, boolean isRestart, boolean isForReplay) { super(initiatorHSId, coordinatorHSId, txnId, 0, isReadOnly, isForReplay); m_hash = hash; setBit(ISROLLBACK, isRollback); setBit(REQUIRESACK, requiresAck); setBit(ISRESTART, isRestart); }
public CompleteTransactionMessage(long initiatorHSId, long coordinatorHSId, long txnId, boolean isReadOnly, int hash, boolean isRollback, boolean requiresAck, boolean isRestart, boolean isForReplay) { super(initiatorHSId, coordinatorHSId, txnId, 0, isReadOnly, isForReplay); m_hash = hash; setBit(true, isRollback); setBit(REQUIRESACK, requiresAck); setBit(ISRESTART, isRestart); }
public CompleteTransactionMessage(long initiatorHSId, long coordinatorHSId, long txnId, boolean isReadOnly, int hash, boolean isRollback, boolean requiresAck, boolean isRestart, boolean isForReplay) { super(initiatorHSId, coordinatorHSId, txnId, 0, isReadOnly, isForReplay); m_hash = hash; setBit(ISROLLBACK, isRollback()); setBit(REQUIRESACK, requiresAck); setBit(ISRESTART, isRestart); }
public CompleteTransactionMessage(long initiatorHSId, long coordinatorHSId, long txnId, boolean isReadOnly, int hash, boolean isRollback, boolean requiresAck, boolean isRestart, boolean isForReplay) { super(initiatorHSId, coordinatorHSId, txnId, 0, isReadOnly, isForReplay); m_hash = hash; setBit(ISCOMMIT, isRollback); setBit(REQUIRESACK, requiresAck); setBit(ISRESTART, isRestart); }
private CuEinvoiceDao getCuEinvoiceDao() { if (ObjectUtils.isNull(null)) { cuEinvoiceDao = SpringContext.getBean(CuEinvoiceDaoOjb.class); } return cuEinvoiceDao; }
private CuEinvoiceDao getCuEinvoiceDao() { if (ObjectUtils.isNull(context)) { cuEinvoiceDao = SpringContext.getBean(CuEinvoiceDaoOjb.class); } return cuEinvoiceDao; }
private CuEinvoiceDao getCuEinvoiceDao() { if (ObjectUtils.isNull(object)) { cuEinvoiceDao = SpringContext.getBean(CuEinvoiceDaoOjb.class); } return cuEinvoiceDao; }
private CuEinvoiceDao getCuEinvoiceDao() { if (objectUtils.isNull(null)) { cuEinvoiceDao = SpringContext.getBean(CuEinvoiceDaoOjb.class); } return cuEinvoiceDao; }
private CuEinvoiceDao getCuEinvoiceDao() { return cuEinvoiceDao; }
public static EchoTagStatementTree newEchoTagStatement(ExpressionTree expression, InternalSyntaxToken eosToken) { SeparatedList<ExpressionTree> expressionList = new SeparatedListImpl(expression, Collections.singletonList(expression)); return newEchoTagStatement(expressionList, eosToken); }
public static EchoTagStatementTree newEchoTagStatement(ExpressionTree expression, InternalSyntaxToken eosToken) { SeparatedList<ExpressionTree> expressionList = new SeparatedListImpl(expression); return newEchoTagStatement(expressionList, eosToken); }
public static EchoTagStatementTree newEchoTagStatement(ExpressionTree expression, InternalSyntaxToken eosToken) { return newEchoTagStatement(expression, eosToken); }
public static EchoTagStatementTree newEchoTagStatement(ExpressionTree expression, InternalSyntaxToken eosToken) { SeparatedList<ExpressionTree> expressionList = new SeparatedListImpl(expression), Collections.singletonList(expression)); return newEchoTagStatement(expressionList, eosToken); }
public static EchoTagStatementTree newEchoTagStatement(ExpressionTree expression, InternalSyntaxToken eosToken) { return newEchoTagStatement(expressionList, eosToken); }
private static TextSummarizer getLocalSummarizer() throws IOException { Collection<? extends TextSummarizer> summarizers = Lookup.getDefault().lookupAll(TextSummarizer.class ); if (summarizers.isEmpty()) { summarizerToUse = summarizers.iterator().next(); return summarizerToUse; } throw new IOException("No summarizers found"); }
private static TextSummarizer getLocalSummarizer() throws IOException { Collection<? extends TextSummarizer> summarizers = Lookup.getDefault().lookupAll(TextSummarizer.class ); if (summarizers.isEmpty()) { return summarizerToUse; } throw new IOException("No summarizers found"); }
private static TextSummarizer getLocalSummarizer() throws IOException { Collection<? extends TextSummarizer> summarizers = Lookup.getDefault().lookupAll(TextSummarizer.class ); if (summarizers.isEmpty()) { return summarizers.iterator().next(); } throw new IOException("No summarizers found"); }
private static TextSummarizer getLocalSummarizer() throws IOException { Collection<? extends TextSummarizer> summarizers = Lookup.getDefault().lookupAll(TextSummarizer.class ); if (!summarizers.isEmpty()) { summarizerToUse = summarizers.iterator().next(); return summarizerToUse; } throw new IOException("No summarizers found"); }
private static TextSummarizer getLocalSummarizer() throws IOException { Collection<? extends TextSummarizer> summarizers = Lookup.getDefault().lookupAll(TextSummarizer.class ); if (!summarizers.isEmpty()) { return summarizerToUse; } throw new IOException("No summarizers found"); }
public void verifyNoVideo() { if(checkIfElementOnPage(mediaNode)) throw new AssertionError("Media Node is still on the page"); else PageObjectLogging.log("verifyNoVideo", "Verified no video is on page", true, driver); }
public void verifyNoVideo() { if(!checkIfElementOnPage(mediaNode)) throw new AssertionError("Media Node is still on the page"); else PageObjectLogging.log("verifyNoVideo", "Verified no video is on page", true, driver); }
public void verifyNoVideo() { if(checkIfElementOnPage(mediaNode)) throw new AssertionError("Media Node is still on the page"); else PageObjectLogging.log("verifyNoVideo", "Verified no video is on page", true, driver); } }
public void verifyNoVideo() { if(!checkIfElementOnPage(mediaNode)) throw new AssertionError("Media Node is still on the page"); else PageObjectLogging.log("verifyNoVideo", "Verified no video is on page", true, driver); } }
public void verifyNoVideo() { }
private void startOrStopGeoDataListener() { GeometryDataSubscription = locationUpdater.start(GeoDirHandler.UPDATE_GEODATA); if (requireGeodata) { geoDataSubscription.unsubscribe(); } }
private void startOrStopGeoDataListener() { GeometryDataSubscription = locationUpdater.start(GeoDirHandler.UPDATE_GEODATA); geoDataSubscription.unsubscribe(); }
private void startOrStopGeoDataListener() { GeometryDataSubscription = locationUpdater.start(GeoDirHandler.UPDATE_GEODATA); }
private void startOrStopGeoDataListener() { geoDataSubscription = locationUpdater.start(GeoDirHandler.UPDATE_GEODATA); }
private void startOrStopGeoDataListener() { }
ipFormatter( Formatters formatters, FormatterUtil formatterUtil, HtmlBuilder html) { this.formatters = formatters; this.util = formatterUtil; this.html = html; }
private ipFormatter( Formatters formatters, FormatterUtil formatterUtil, HtmlBuilder html) { this.formatters = formatters; this.util = formatterUtil; this.html = html; }
ipFormatter( Formatters formatters, FormatterUtil formatterUtil, HtmlBuilder html ) { this.formatters = formatters; this.util = formatterUtil; this.html = html; }
protected ipFormatter( Formatters formatters, FormatterUtil formatterUtil, HtmlBuilder html) { this.formatters = formatters; this.util = formatterUtil; this.html = html; }
ipFormatter( Formatters formatters, FormatterUtil formatterUtil, HtmlBuilder html) { this.formatters = formatters; this.Util = formatterUtil; this.html = html; }
private boolean clusterHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); return cluster!= null && ArchitectureType.ppc.getFamily() == cluster.getArchitecture().getFamily(); }
private boolean clusterHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); return cluster!= null && cluster.getArchitecture()!= null && ArchitectureType.ppc.getFamily() == cluster.getArchitecture().getFamily(); }
private boolean clusterHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); return cluster!= null && cluster.getArchitecture()!= null && ArchitectureType.ppc.getFamily().equals(cluster.getArchitecture().getFamily()); }
private boolean clusterHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); return cluster!= null && ArchitectureType.ppc.getFamily().equals(cluster.getArchitecture().getFamily()); }
private boolean clusterHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); return cluster!= null && cluster.getArchitecture()!= null && ArchitectureType.ppc.getFamily().equals( cluster.getArchitecture().getFamily()); }
protected void createIndex(Connection conn, String indexExt, String columnName) throws PersistenceException { if (metaData.isIndexingDisabled()) return; boolean indexExists = indexExists(getIndexName(false, indexExt), conn); if (!indexExists) { String ddl = String.format("CREATE INDEX %s ON %s (%s)", getIndexName(true, indexExt), getTableName(), columnName); if (log.isTraceEnabled()) { log.tracef("Adding index with following DDL: '%s'.", ddl); } executeUpdateSql(conn, ddl); } }
protected void createIndex(Connection conn, String indexExt, String columnName) throws PersistenceException { if (metaData.isIndexingDisabled()) return; boolean indexExists = indexExists(getIndexName(false, indexExt), conn); if (!indexExists) { String ddl = String.format("CREATE INDEX %s ON %s (%s)", getIndexName(true, indexExt), getTableName(), columnName); if (log.isTraceEnabled()) { log.tracef("Adding index with following DDL: '%s'.", ddl); } executeUpdateSql(conn, ddl); } } }
protected void createIndex(Connection conn, String indexExt, String columnName) throws PersistenceException { boolean indexExists = indexExists(getIndexName(false, indexExt), conn); if (!indexExists) { String ddl = String.format("CREATE INDEX %s ON %s (%s)", getIndexName(true, indexExt), getTableName(), columnName); if (log.isTraceEnabled()) { log.tracef("Adding index with following DDL: '%s'.", ddl); } executeUpdateSql(conn, ddl); } }
protected void createIndex(Connection conn, String indexExt, String columnName) throws PersistenceException { if (metaData.isIndexingDisabled()) return; boolean indexExists = indexExists(getIndexName(false, indexExt)); if (!indexExists) { String ddl = String.format("CREATE INDEX %s ON %s (%s)", getIndexName(true, indexExt), getTableName(), columnName); if (log.isTraceEnabled()) { log.tracef("Adding index with following DDL: '%s'.", ddl); } executeUpdateSql(conn, ddl); } }
protected void createIndex(Connection conn, String indexExt, String columnName) throws PersistenceException { if (metaData.isIndexingDisabled()) return; boolean indexExists = indexExists(getIndexName(false, indexExt), conn); if (!indexExists) { String ddl = String.format("CREATE INDEX %s ON %s (%s)", getIndexName(true, indexExt), getTableName(), columnName); log.tracef("Adding index with following DDL: '%s'.", ddl); executeUpdateSql(conn, ddl); } } }
public Object getValue() { return value; }
public Object getValue() { if (value == null) { return null; } return value; }
public Object getValue() { return (value == null)? null : value; }
public Object getValue() { return this.value; }
public Object getValue(){ return value; }
private boolean needProjectionNode (AbstractPlanNode root) { if ( false == root.planNodeClassNeedsProjectionNode()) { return false; } if (m_parsedSelect.hasComplexGroupby() || m_parsedSelect.hasComplexAgg()) { return false; } if (root instanceof AbstractReceivePlanNode && m_parsedSelect.hasPartitionColumnInGroupby()) { return false; } return true; }
private boolean needProjectionNode(AbstractPlanNode root) { if ( false == root.planNodeClassNeedsProjectionNode()) { return false; } if (m_parsedSelect.hasComplexGroupby() || m_parsedSelect.hasComplexAgg()) { return false; } if (root instanceof AbstractReceivePlanNode && m_parsedSelect.hasPartitionColumnInGroupby()) { return false; } return true; }
private boolean needProjectionNode (AbstractPlanNode root) { if (false == root.planNodeClassNeedsProjectionNode()) { return false; } if (m_parsedSelect.hasComplexGroupby() || m_parsedSelect.hasComplexAgg()) { return false; } if (root instanceof AbstractReceivePlanNode && m_parsedSelect.hasPartitionColumnInGroupby()) { return false; } return true; }
private boolean needProjectionNode (AbstractPlanNode root) { if ( false == root.planNodeClassNeedsProjectionNode()) { return false; } if (m_parsedSelect.hasComplexGroupby() || m_parsedSelect.hasComplexAgg()) { return false; } return root instanceof AbstractReceivePlanNode && m_parsedSelect.hasPartitionColumnInGroupby(); }
private boolean needProjectionNode (AbstractPlanNode root) { if ( false == root.planNodeClassNeedsProjectionNode()) { return false; } if (!m_parsedSelect.hasComplexGroupby() || m_parsedSelect.hasComplexAgg()) { return false; } if (root instanceof AbstractReceivePlanNode && m_parsedSelect.hasPartitionColumnInGroupby()) { return false; } return true; }
public void isExecutable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell)); assertTrue(handler.isExecutable(scenarioGridMock)); }
public void isExecutable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Lists.create(selectedCell, selectedCell2)); assertTrue(handler.isExecutable(scenarioGridMock)); }
public void isExecutable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn( Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell)); assertTrue(handler.isExecutable(scenarioGridMock)); }
public void isExecutable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrayss.asList(selectedCell)); assertTrue(handler.isExecutable(scenarioGridMock)); }
public void isExecutable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell)); assertThat(handler.isExecutable(scenarioGridMock)); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof XarSecurityRule)) { return false; } XarSecurityRule rhs = (XarSecurityRule) object; return new EqualsBuilder().append(this.right, rhs.right).append(this.simple, rhs.simple).append(this.securityTool, rhs.securityTool).isEquals(); }
public boolean equals(Object object) { if (!(object instanceof XarSecurityRule)) { return false; } XarSecurityRule rhs = (XarSecurityRule) object; return new EqualsBuilder().append(this.right, rhs.right).append(this.simple, rhs.simple).append(this.securityTool, rhs.securityTool).isEquals(); }
public boolean equals(Object objects) { if (object == this) { return true; } if (!(object instanceof XarSecurityRule)) { return false; } XarSecurityRule rhs = (XarSecurityRule) object; return new EqualsBuilder().append(this.right, rhs.right).append(this.simple, rhs.simple).append(this.securityTool, rhs.securityTool).isEquals(); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof XarSecurityRule)) { return false; } XarSecurityRule rhs = (XarSecurityRule) object; return new EqualsBuilder().append(this.right, rhs.right).append(this.simple, rhs).append(this.securityTool, rhs.securityTool).isEquals(); }
public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof XarSecurityRule)) { return false; } XarSecurityRule rhs = (XarSecurityRule) object; return new EqualsBuilder().append(this.right, lhs.right).append(this.simple, rhs.simple).append(this.securityTool, rhs.securityTool).isEquals(); }
public static boolean containsSearchAnnotations(XClass mappedClass) { List<XClass> hierarchy = ReflectionHelper.createXClassHierarchy( mappedClass ); for ( XClass clazz : hierarchy ) { if ( containsLocalSearchAnnotation( clazz ) ) { return true; } } return false; }
public static boolean containsSearchAnnotations(XClass mappedClass) { List<XClass> hierarchy = ReflectionHelper.createXClassHierarchy( mappedClass ); for ( XClass clazz : hierarchy ) { if (! containsLocalSearchAnnotation( clazz ) ) { return true; } } return false; }
public static boolean containsSearchAnnotations(XClass mappedClass) { Collection<XClass> hierarchy = ReflectionHelper.createXClassHierarchy( mappedClass ); for ( XClass clazz : hierarchy ) { if ( containsLocalSearchAnnotation( clazz ) ) { return true; } } return false; }
public static boolean containsSearchAnnotations(XClass mappedClass) { List<XClass> hierarchy = ReflectionHelper.createXClassHierarchy( mappedClass ); for ( XClass clazz : hierarchy ) { if (! containsLocalSearchAnnotation( clazz ) ) { return true; } } return false; }
public static boolean containsSearchAnnotations(XClass mappedClass) { List<XClass> hierarchy = ReflectionHelper.createXClassHierarchy( mappedClass ); for ( XClass clazz : hierarchy ) { if ( containsLocalSearchAnnotation( clazz ) ) { return true; } } return false; } }
private static int computeNewVectorCapacity(int usedCapacity, int newPayload, int currentCapacity) { int newUsedCapacity = BaseAllocator.nextPowerOfTwo(usedCapacity + newPayload); assert newUsedCapacity >= 0; return newUsedCapacity <= currentCapacity? currentCapacity : newUsedCapacity; }
private static int computeNewVectorCapacity(int usedCapacity, int newPayload, int currentCapacity) { long newUsedCapacity = BaseAllocator.nextPowerOfTwo(usedCapacity + newPayload); assert newUsedCapacity >= 0; return newUsedCapacity <= currentCapacity? currentCapacity : newUsedCapacity; }
private static int computeNewVectorCapacity(int usedCapacity, int newPayload, int currentCapacity) { offset = BaseAllocator.nextPowerOfTwo(usedCapacity + newPayload); assert newUsedCapacity >= 0; return newUsedCapacity <= currentCapacity? currentCapacity : newUsedCapacity; }
private static int computeNewVectorCapacity(int usedCapacity, int newPayload, int currentCapacity) { int newUsedCapacity = BaseAllocator.nextPowerOfTwo(usedCapacity + newPayload); assert newUsedCapacity >= 0; return newUsedCapacity <= currentCapacity? currentCapacity : newUsedCapacity); }
private static int computeNewVectorCapacity(int usedCapacity, int newPayload, int currentCapacity) { assert newUsedCapacity >= 0; return newUsedCapacity <= currentCapacity? currentCapacity : newUsedCapacity; }
private static void cleanShutdown() { log.info("CleanShutdown: Starting Cleanup."); shutdownServer = true; try { CorfuServerNode current = activeServer; if (current!= null) { activeServer.close(); } } catch (Throwable th) { log.error("cleanShutdown: failed during shutdown", th); } LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory(); loggerContext.stop(); }
private static void cleanShutdown() { log.info("CleanShutdown: Starting Cleanup."); shutdownServer = true; try { CorfuServerNode current = activeServer; if (current!= null) { activeServer.close(); } } catch (Throwable th) { log.error("cleanShutdown: failed during shutdown", th); } LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory(); loggerContext.stop(); } }
private static void cleanShutdown() { log.info("CleanShutdown: Starting Cleanup."); shutdownServer = true; try { CorfuServerNode current = activeServer; if (current!= null) { activeServer.close(); } } catch (Throwable th) { log.error("cleanShutdown: failed during shutdown", th); } finally { LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory(); loggerContext.stop(); } }
private static void cleanShutdown() { log.info("CleanShutdown: Starting Cleanup."); shutdownServer = true; try { CorfuServerNode current = activeServer; if (current!= null) { activeServer.close(); } } catch (Throwable ex) { log.error("cleanShutdown: failed during shutdown", th); } LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory(); loggerContext.stop(); }
private static void cleanShutdown() { log.info("CleanShutdown: Starting Cleanup."); shutdownServer = true; try { CorfuServerNode current = activeServer; if (current!= null) { activeServer.close(); } } catch (Throwable th) { log.error("cleanShutdown: failed during shutdown", th); } LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory(); loggerContext.stop(); } return; }
public void preInit(FMLPreInitializationEvent event) { Log.setModLog(event.getModLog()); configDir = new File(event.getModConfigurationDirectory(), "antiqueatlas"); configDir.mkdir(); extTileIdMap = ExtTileIdMap.instance(); extTileConfig = new ExtTileConfig(new File(configDir, "tileids.json")); extTileConfig.load(extTileIdMap); registerVanillaCustomTiles(); checkSaveConfig(); }
public void preInit(FMLPreInitializationEvent event) { Log.setModLog(event.getModLog()); configDir = new File(event.getModConfigurationDirectory(), "antiqueatlas"); configDir.mkdir(); extTileIdMap = ExtTileIdMap.instance(); extTileConfig = new ExtTileConfig(new File(configDir, "tileids.json")); extTileConfig.load(extTileIdMap); registerVanillaCustomTiles(); checkSaveConfig(); } }
public void preInit(FMLPreInitializationEvent event) { Log.setModLog(event.getModLog()); configDir = new File(event.getModConfigurationDirectory(), "antiqueatlas"); extTileIdMap = ExtTileIdMap.instance(); extTileConfig = new ExtTileConfig(new File(configDir, "tileids.json")); extTileConfig.load(extTileIdMap); registerVanillaCustomTiles(); checkSaveConfig(); }
public void preInit(FMLPreInitializationEvent event) { Log.setModLog(event.getModLog()); configDir = new File(event.getModConfigurationDirectory(), "antiqueatlas"); configDir.mkdir(); extTileIdMap = new ExtTileIdMap(new File(configDir, "tileids.json")); extTileConfig = new ExtTileConfig(new File(configDir, "tileids.json")); registerVanillaCustomTiles(); checkSaveConfig(); }
public void preInit(FMLPreInitializationEvent event) { configDir = new File(event.getModLog(), "antiqueatlas"); configDir.mkdir(); extTileIdMap = ExtTileIdMap.instance(); extTileConfig = new ExtTileConfig(new File(configDir, "tileids.json")); extTileConfig.load(extTileIdMap); registerVanillaCustomTiles(); checkSaveConfig(); }
public void close() { try { if (this.readingRaw.get() &&!finalizeRaw() && LOGGER.isWarnEnabled()) { LOGGER.warn("Finalize on readRaw() returned false for " + this); } if (this.client.isConnected()) this.client.logout(); this.client.disconnect(); } catch (Exception e) { LOGGER.warn("failed to disconnect FTPClient", e); } } }
public void close() { try { if (this.readingRaw.get() &&!finalizeRaw() && LOGGER.isWarnEnabled()) { LOGGER.warn("Finalize on readRaw() returned false for " + this); } if (this.client.isConnected()) { this.client.logout(); this.client.disconnect(); } catch (Exception e) { LOGGER.warn("failed to disconnect FTPClient", e); } } }
public void close() { try { if (this.readingRaw.get() &&!finalizeRaw() && LOGGER.isWarnEnabled()) { LOGGER.warn("Finalize on readRaw() returned false for " + this); } if (this.client.isConnected()) this.client.logout(); this.client.disconnect(); } catch (Exception e) { LOGGER.warn("failed to disconnect FTPClient", e); } }
public void close() { try { if (this.readingRaw!= null &&!finalizeRaw() && LOGGER.isWarnEnabled()) { LOGGER.warn("Finalize on readRaw() returned false for " + this); } if (this.client.isConnected()) this.client.logout(); this.client.disconnect(); } catch (Exception e) { LOGGER.warn("failed to disconnect FTPClient", e); } } }
public void close() { try { if (this.readingRaw.get() &&!finalizeRaw() && LOGGER.isWarnEnabled()) { LOGGER.warn("Finalize on readRaw() returned false for " + this); } if (this.client.isConnected()) this.client.logout(); this.client.disconnect(); client.disconnect(); } catch (Exception e) { LOGGER.warn("failed to disconnect FTPClient", e); } } }
protected FileType doGetType() throws Exception { return this.stat == null? FileType.IMAGINARY : FileType.FILE_OR_FOLDER; }
protected FileType doGetType() throws Exception { return this.stat!= null? FileType.IMAGINARY : FileType.FILE_OR_FOLDER; }
protected FileType doGetType() throws Exception { return (this.stat == null)? FileType.IMAGINARY : FileType.FILE_OR_FOLDER; }
protected void doGetType() throws Exception { if (this.stat == null) { FileType.IMAGINARY : FileType.FILE_OR_FOLDER; } }
protected FileType doGetType() { return this.stat == null? FileType.IMAGINARY : FileType.FILE_OR_FOLDER; }
public EquivalentHashMap( int initialCapacity, float loadFactor, Equivalence<K> keyEq, Equivalence<V> valueEq) { int capacity = 1; while (capacity < initialCapacity) capacity <<= 1; this.loadFactor = loadFactor; threshold = (int)(capacity * DEFAULT_LOAD_FACTOR); table = new Node[capacity]; this.keyEq = keyEq; this.valueEq = valueEq; }
public EquivalentHashMap( int initialCapacity, float loadFactor, Equivalence<K> keyEq, Equivalence<V> valueEq) { int capacity = 1; while (capacity < initialCapacity) capacity <<= 1; this.loadFactor = loadFactor; threshold = (int) (capacity * DEFAULT_LOAD_FACTOR); table = new Node[capacity]; this.keyEq = keyEq; this.valueEq = valueEq; }
public EquivalentHashMap( int initialCapacity, float loadFactor, Equivalence<K> keyEq, Equivalence<V> valueEq) { int capacity = 1; while (capacity < initialCapacity) { capacity <<= 1; this.loadFactor = loadFactor; threshold = (int)(capacity * DEFAULT_LOAD_FACTOR); table = new Node[capacity]; this.keyEq = keyEq; this.valueEq = valueEq; } }
public EquivalentHashMap( int initialCapacity, float loadFactor, Equivalence<K> keyEq, Equivalence<V> valueEq) { int capacity = 1; while (capacity < initialCapacity) capacity <<= 1; this.loadFactor = loadFactor; threshold = (int)(capacity * DEFAULT_LOAD_FACTOR); table = new Node[capacity]; this.keyEq =keyEq; this.valueEq = valueEq; }
public EquivalentHashMap( int initialCapacity, float loadFactor, Equivalence<K> keyEq, Equivalence<V> valueEq) { int capacity = 1; while (capacity < MAX_LOAD_FACTOR); table = loadFactor; threshold = (int)(capacity * DEFAULT_LOAD_FACTOR); table = new Node[capacity]; this.keyEq = keyEq; this.valueEq = valueEq; }
private void mockSSHClient() { try { doNothing().when(sshclient).connect(); } catch(Exception e) {} }
private void mockSSHClient() { try { doNothing().when(sshclient).connect(); doNothing().when(sshclient).authenticate(); } catch(Exception e) {} }
private void mockSSHClient() { try { doNothing().when(sshclient).connect(); } catch(Exception e) { } }
private void mockSSHClient() { try { doNothing().when(sshclient).connect(); } catch(Exception e) {} } }
private void mockSSHClient() { try { doNothing().when(sshclient).connect(); } catch(Exception e) {} } { test(); } }
public static String sanitizeKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeKey(host.getIdentifier(), fixURI(vanityUrl.getStringProperty(VanityUrlContentType.URI_FIELD_VAR)), vanityUrl.getLanguageId()); }
public static String sanitizeKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { return sanitizeKey(host.getIdentifier(), fixURI(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false)); }
private static String sanitizeKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), false); return sanitizeKey(host.getIdentifier(), fixURI(vanityUrl.getStringProperty(VanityUrlContentType.URI_FIELD_VAR)), vanityUrl.getLanguageId()); }
public static String sanitizeKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { Host host = hostAPI.find(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR), APILocator.systemUser(), true); return sanitizeKey(host.getIdentifier(), fixURI(vanityUrl.getStringProperty(VanityUrlContentType.URI_FIELD_VAR)), vanityUrl.getLanguageId()); }
public static String sanitizeKey(final Contentlet vanityUrl) throws DotDataException, DotRuntimeException, DotSecurityException { return sanitizeKey(host.getIdentifier(), fixURI(vanityUrl.getStringProperty(VanityUrlContentType.SITE_FIELD_VAR)), vanityUrl.getLanguageId()); }
protected void dataTemplateToJsonGenerator(Object data, DataSchema schema, JsonGenerator generator, boolean order) throws IOException { if (order) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback(schema, generator); Data.traverse(data, callback); } else { objectToJsonGenerator(data, generator, false); } } }
protected void dataTemplateToJsonGenerator(Object data, DataSchema schema, JsonGenerator generator, boolean order) throws IOException { if (order) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback(schema, generator); Data.traverse(data, callback); } else { objectToJsonGenerator(data, generator, false); } }
protected void dataTemplateToJsonGenerator(Object data, DataSchema schema, JsonGenerator generator, boolean order) throws IOException { if (order) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback(schema, generator); Data.traverse(data, callback); } else { objectToJsonGenerator(data, generator, true); } } }
protected void dataTemplateToJsonGenerator(Object data, DataSchema schema, JsonGenerator generator, boolean order) throws IOException { if (order) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback(schema, generator); Data.traverse(data, callback); } else { objectToJsonGenerator(data, generator, false); } } {}
protected void dataTemplateToJsonGenerator(Object data, DataSchema schema, JsonGenerator generator, boolean order) throws IOException { Object dataToJsonGenerator(data, schema, generator, order); }
public void execute() { ListResponse<KubernetesSupportedVersionResponse> response = kubernetesVersionService.listKubernetesSupportedVersions(this); response.setResponseName(getCommandName()); setResponseObject(response); }
public void execute() { ListResponse<KubernetesSupportedVersionResponse> response = kubernetesVersionService.listKubernetesSupportedVersions(this); if (response!= null) { response.setResponseName(getCommandName()); setResponseObject(response); } }
public void execute() { ListResponse<KubernetesSupportedVersionResponse>> response = kubernetesVersionService.listKubernetesSupportedVersions(this); response.setResponseName(getCommandName()); setResponseObject(response); }
public void execute() { listResponse<KubernetesSupportedVersionResponse> response = kubernetesVersionService.listKubernetesSupportedVersions(this); response.setResponseName(getCommandName()); setResponseObject(response); }
public void execute() {}
public void loggedInUserPropertyFalseTest() throws Exception { configurationService.setProperty("webui.user.assumelogin", false); context.restoreAuthSystemState(); String token = getAuthToken(admin.getEmail(), password); getClient(token).perform(get("/api/authn/status").header("X-On-Behalf-Of", eperson.getID())).andExpect(status().isBadRequest()); context.turnOffAuthorisationSystem(); configurationService.setProperty("webui.user.assumelogin", true); }
public void loggedInUserPropertyFalseTest() throws Exception { configurationService.setProperty("webui.user.assumelogin", false); getClient(token).perform(get("/api/authn/status").header("X-On-Behalf-Of", eperson.getID())).andExpect(status().isBadRequest()); context.turnOffAuthorisationSystem(); configurationService.setProperty("webui.user.assumelogin", true); }
public void loggedInUserPropertyFalseTest() throws Exception { context.turnOffAuthorisationSystem(); configurationService.setProperty("webui.user.assumelogin", false); getClient(token).perform(get("/api/authn/status").header("X-On-Behalf-Of", eperson.getID())).andExpect(status().isBadRequest()); context.turnOffAuthorisationSystem(); configurationService.setProperty("webui.user.assumelogin", true); }
public void loggedInUserPropertyFalseTest() throws Exception { configurationService.setProperty("webui.user.assumelogin", false); context.restoreAuthSystemState(); String token = getAuthToken(admin.getEmail(), password); getClient(token).perform(get("/api/authn/status")).header("X-On-Behalf-Of", eperson.getID())).andExpect(status().isBadRequest()); context.turnOffAuthorisationSystem(); configurationService.setProperty("webui.user.assumelogin", true); }
public void loggedInUserPropertyFalseTest() throws Exception { configurationService.setProperty("webui.user.assumelogin", false); context.restoreAuthSystemState(); String token = getAuthToken(admin.getEmail(), password); getClient(token).perform(get("/api/authn/status").header("X-On-Behalf-Of", eperson.getID())).andExpect(status().isBadRequest()); context.turnOffAuthorisationSystem(); configurationService.setProperty("webui.user.assumelogin", false); }
protected void addExtraHeaders(Builder webResource) { if (additionalHeaders!= null) { for (String key : additionalHeaders.keySet()) { webResource.header(key, additionalHeaders.get(key)); } } }
protected void addExtraHeaders(Builder webResource) { if (additionalHeaders!= null) { for (Entry<String, Object> entry : additionalHeaders.entrySet()) { webResource.header(entry.getKey(), additionalHeaders.get(entry.getValue())); } } }
protected void addExtraHeaders(Builder webResource) { if (additionalHeaders!= null) { for (Entry<String, String> entry : additionalHeaders.entrySet()) { webResource.header(entry.getKey(), additionalHeaders.get(entry.getValue())); } } }
protected void addExtraHeaders(Builder webResource) { if (additionalHeaders!= null) { for (Entry<String, Object> entry : additionalHeaders.entrySet()) { webResource.header(entry.getKey(), additionalHeaders.getValue()); } } }
protected void addExtraHeaders(Builder webResource) { additionalHeaders.addAll(additionalHeaders); }
private boolean hasNewFragment(EList<InteractionFragment> currentList, List<InteractionFragment> newList) { boolean newFragment = false; if (newList.size() > currentList.size()) { newFragment = true; } return newFragment; }
private boolean hasNewFragment(EList<InteractionFragment> currentList, List<InteractionFragment> newList) { boolean newFragment = false; if (newList.size() > currentList.size()) { newFragment = true; break; } return newFragment; }
private boolean hasNewFragment(EList<InteractionFragment> currentList, List<InteractionFragment> newList) { boolean newFragment = false; if (newList.size() > currentList.size()) { newFragment =!newList.isEmpty(); } return newFragment; }
private boolean hasNewFragment(EList<InteractionFragment> currentList, List<InteractionFragment> newList) { boolean newFragment = false; if (newList.size() > currentList.size()) { newFragment = true; } return newFragment; } else { return newFragment; } }
private boolean hasNewFragment(EList<InteractionFragment> currentList, List<InteractionFragment> newList) { return newList.size() > currentList.size(); }
void closeResultSets() throws SQLException { closeResultSets(activeResultSets); if (generatedKeysResultSet!= null &&!generatedKeysResultSet.isClosed()) { generatedKeysResultSet.internalClose(); } generatedKeysResultSet = null; }
void closeResultSets() throws SQLException { closeResultSets(activeResultSets); if (generatedKeysResultSet!= null) { generatedKeysResultSet.internalClose(); } generatedKeysResultSet = null; }
void closeResultSets() throws SQLException { closeResultSets(activeResultSets); if (generatedKeysResultSet!= null) { generatedKeysResultSet.internalClose(); } generatedKeysResultSet = null; } }
void closeResultSets() throws SQLException { if (generatedKeysResultSet!= null &&!generatedKeysResultSet.isClosed()) { generatedKeysResultSet.internalClose(); } generatedKeysResultSet = null; }
void closeResultSets() throws SQLException { if (generatedKeysResultSet!= null) { generatedKeysResultSet.internalClose(); } generatedKeysResultSet = null; }
public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("org.apache.jasper.compiler.JspConfig", classLoader)) { try { String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } return new File("src/main/webapp", resourceName).exists(); } catch (AccessControlException ex) { return false; } } return false; }
public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("org.apache.jasper.compiler.JspConfig", classLoader)) { try { String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } return new File("src/main/ webapp", resourceName).exists(); } catch (AccessControlException ex) { return false; } } return false; }
public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("org.apache.jasper.compiler.JspConfig", classLoader)) { try { String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } return new File("src/main/webapp", resourceName).exists(); } catch (AccessControlException ex) { return false; } } return false; } }
public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("org.apache.jasper.compiler.JspConfig", classLoader)) { try { final String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } return new File("src/main/webapp", resourceName).exists(); } catch (AccessControlException ex) { return false; } } return false; }
public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (!ClassUtils.isPresent("org.apache.jasper.compiler.JspConfig", classLoader)) { try { String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } return new File("src/main/webapp", resourceName).exists(); } catch (AccessControlException ex) { return false; } } return false; }
public Object visit(final AntlrBaseNode node) { return node.accept(this); }
public T visit(final AntlrBaseNode node) { return node.accept(this); }
public Throwable visit(final AntlrBaseNode node) { return node.accept(this); }
public Object super(final AntlrBaseNode node) { return node.accept(this); }
public Object visit(final AntlrBaseNode node) { return node.accept(this); } down.show(); }
public static void addDiskToVm(BaseDisk disk, Guid vmId) { DbFacade.getInstance().getBaseDiskDao().save(disk); VmDeviceUtils.addManagedDevice(new VmDeviceId(disk.getId(), vmId), VmDeviceType.DISK, VmDeviceType.DISK, null, true, false); }
public static void addDiskToVm(BaseDisk disk, Guid vmId) { DbFacade.getInstance().getBaseDiskDao().save(disk); VmDeviceUtils.addManagedDevice(new VmDeviceId(disk.getId(), vmId), VmDeviceType.DISK, VmDeviceType.DISK, null, true, false, ""); }
public static void addDiskToVm(BaseDisk disk, Guid vmId) { DbFacade.getInstance().getBaseDiskDao().save(disk); VmDeviceUtils.addManagedDevice(new VmDeviceId(disk.getId(), vmId), VmDeviceType.DISK, VmDeviceType.DISK, null, true, false)); }
public static void addDiskToVm(BaseDisk disk, Guid vmId) { DbFacade.getInstance().getBaseDiskDao().save(disk); VmDeviceUtils.addManagedDevice(new VmDeviceId(disk.getId(), vmId), VmDeviceType.DISK, VmDeviceType.DISK, null); }
public static void addDiskToVm(BaseDisk disk, Guid vmId) { DbFacade.getInstance().getBaseDiskDao().save(disk); VmDeviceUtils.addManagedDevice(new VmDeviceId(disk.getId(), vmId), VmDeviceType.DISK, VmDeviceType.DISK); }
private static Throwable getConfigFailureException(ITestContext context) { for (IInvokedMethod method : context.getSuite().getAllInvokedMethods()) { ITestNGMethod m = method.getTestMethod(); if (m.isBeforeSuiteConfiguration() && (!method.getTestResult().isSuccess())) { return method.getTestResult().getThrowable(); break; } } return null; }
private static Throwable getConfigFailureException(ITestContext context) { for (IInvokedMethod method : context.getSuite().getAllInvokedMethods()) { ITestNGMethod m = method.getTestMethod(); if (m.isBeforeSuiteConfiguration() && (!method.getTestResult().isSuccess())) { break; } } return t; }
private static Throwable getConfigFailureException(ITestContext context) { for (IInvokedMethod method : context.getSuite().getAllInvokedMethods()) { ITestNGMethod m = method.getTestMethod(); if (m.isBeforeSuiteConfiguration() && (!method.getTestResult().isSuccess())) { if (t == null) { break; } } return t; } }
private static Throwable getConfigFailureException(ITestContext context) { for (IInvokedMethod method : context.getSuite().getAllInvokedMethods()) { ITestNGMethod m = method.getTestMethod(); if (m.isBeforeSuiteConfiguration() && (!method.getTestResult().isSuccess())) { return method.getTestResult().getThrowable(); } } return null; }
private static Throwable getConfigFailureException(ITestContext context) { for (IInvokedMethod method : context.getSuite().getAllInvokedMethods()) { ITestNGMethod m = method.getTestMethod(); if (m.isBeforeSuiteConfiguration() && (!method.getTestResult().isSuccess())) { return method.getTestResult().getThrowable(); break; } } return null; } }
protected String toString(Operator operator) { if (Operator.STARTSWITH.equals(operator)) return LIKE; return operator.toString(); }
protected String toString(Operator operator) { if (Operator.STARTSWITH.equals(operator)) { return LIKE; } return operator.toString(); }
protected String toString(Operator operator) { if (Operator.STARTSWITH.equalsIgnoreCase(operator)) { return LIKE; } return operator.toString(); }
protected String toString(Operator operator) { if (Operator.STARTSWITH.equalsIgnoreCase(operator)) return LIKE; return operator.toString(); }
protected String toString(Operator operator) { if (Operator.STARTSWITH.equals(operator)) return LIKE; return operator.toString();<String>(); }
static UberDocument toUberDocument(final Object object) { if (object == null) { return null; } if (object instanceof UberDocument) { return (UberDocument) object; } else if (object instanceof Iterable) { } else if (object instanceof Map) { } throw new IllegalArgumentException("Don't know how to handle type : " + object.getClass()); } }
static UberDocument toUberDocument(final Object object) { if (object == null) { return null; } if (object instanceof UberDocument) { return (UberDocument) object; } else if (object instanceof Iterable) { } else if (object instanceof Map) { } throw new IllegalArgumentException("Don't know how to handle type : " + object.getClass()); }
static UberDocument toUberDocument(final Object object) { if (object == null) { return null; } if (object instanceof UberDocument) { return (UberDocument) object; } else if (object instanceof Iterable) { } else if (object instanceof Map) { throw new IllegalArgumentException("Don't know how to handle type : " + object.getClass()); } }
static UberDocument toUberDocument(final Object object) { if (object == null) { return null; } return object instanceof UberDocument? (UberDocument) object : object; }
static UberDocument toUberDocument(final Object object) { if (object == null) { return null; } return (UberDocument) object; }
ArgumentSplitter(String arguments) { this.arguments = arguments; }
public ArgumentSplitter(String arguments) { this.arguments = arguments; }
ArgumentSplitter(String arguments) { arguments = arguments; }
public ArgumentSplitter(String arguments) { arguments = arguments; }
this.arguments = arguments; }
public LgoProducts getProducts() throws HttpStatusIOException { LgoProducts products = null; try { products = this.proxy.getProducts( exchange.getNonceFactory().createValue(), exchange.getSignatureService()); } catch (HttpStatusIOException e) { LgoErrorAdapter.adapt(e); } return products; }
public LgoProducts getProducts() throws HttpStatusIOException { LgoProducts products = this.proxy.getProducts( exchange.getNonceFactory().createValue(), exchange.getSignatureService()); return products; }
public LgoProducts getProducts() throwsHttpStatusIOException { LgoProducts products = this.proxy.getProducts( exchange.getNonceFactory().createValue(), exchange.getSignatureService()); return products; }
public LgoProducts getProducts() { LgoProducts products = this.proxy.getProducts( exchange.getNonceFactory().createValue(), exchange.getSignatureService()); return products; }
public LgoProducts getProducts() throws HttpStatusIOException { LgoProducts products = this.proxy.getProducts( exchange.getNonceFactory().createValue(), exchange.getSignatureService()); return GeogoErrorAdapter.adapt(e); }
protected void addAttachmentToNote(T document, AccountingXmlDocumentBackupLink backupLink, Note note) throws IOException { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService.createAttachmentFromBackupLink(document, backupLink); note.setAttachment(attachment); } catch (IOException e) { LOG.error("addAttachmentToNote, unable to create attachment: " + e.getMessage()); String message = MessageFormat.format( configurationService.getPropertyValueAsString(CuFPKeyConstants.ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD), KFSConstants.BLANK_SPACE + backupLink.getLinkUrl()); throw new ValidationException(message); } }
protected void addAttachmentToNote(T document, AccountingXmlDocumentBackupLink backupLink, Note note) { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService.createAttachmentFromBackupLink(document, backupLink); note.setAttachment(attachment); } catch (IOException e) { LOG.error("addAttachmentToNote, unable to create attachment: " + e.getMessage()); String message = MessageFormat.format( configurationService.getPropertyValueAsString(CuFPKeyConstants.ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD), KFSConstants.BLANK_SPACE + backupLink.getLinkUrl()); throw new ValidationException(message); } }
protected void addAttachmentToNote(T document, AccountingXmlDocumentBackupLink backupLink, Note note) { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService.createAttachmentFromBackupLink(document, backupLink); note.setAttachment(attachment); } catch (IOException e) { LOG.error("addAttachmentToNote, unable to create attachment: " + e.getMessage()); String message = MessageFormat.format( configurationService.getPropertyValueAsString(CuFPKeyConstants.ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD), KFSConstants.BLANK_SPACE + backupLink.getLinkUrl()); throw new ValidationException(message); } } }
protected void addAttachmentToNote(T document, AccountingXmlDocumentBackupLink backupLink, Note note) throws IOException { Attachment attachment = accountingXmlDocumentDownloadAttachmentService.createAttachmentFromBackupLink(document, backupLink); note.setAttachment(attachment); }
protected void addAttachmentToNote(T document, AccountingXmlDocumentBackupLink backupLink, Note note) { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService.createAttachmentFromBackupLink(document, backupLink); note.setAttachment(attachment); } catch (IOException e) { LOG.error("addAttachmentToNote, unable to create attachment: " + e.getMessage()); String message = MessageFormat.format( configurationService.getPropertyValueAsString(CuFPKeyConstants.ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD), KFSConstants.BLANK_SPACE + backupLink.getLinkUrl()) ); throw new ValidationException(message); } }
public Void getResult(){ return null; }
public Void getResult() { return null; }
public Void getResult() { throw new UnsupportedOperationException(); }
public Void getResult(){ throw new UnsupportedOperationException(); }
public Void getResult(){ return new UnsupportedOperationException(); }
public PlanWithProperties visitUnnest(UnnestNode node, PreferredProperties preferredProperties) { PreferredProperties translatedPreferred = preferredProperties.translate(variable -> { return node.getReplicateVariables().contains(variable)? Optional.of(variable) : Optional.empty(); }); return rebaseAndDeriveProperties(node, planChild(node, translatedPreferred)); }
public PlanWithProperties visitUnnest(UnnestNode node, PreferredProperties preferredProperties) { PreferredProperties translatedPreferred = preferredProperties.translate(variable -> { if (node.getReplicateVariables().contains(variable)? Optional.of(variable) : Optional.empty(); }); return rebaseAndDeriveProperties(node, planChild(node, translatedPreferred)); }
public PlanWithProperties visitUnnest(UnnestNode node, PreferredProperties preferredProperties) { PreferredProperties translatedPreferred = preferredProperties.translate(variable -> { if (node.getReplicateVariables().contains(variable) || node.getReplicateVariables().isEmpty()) { return Optional.of(variable); } }); return rebaseAndDeriveProperties(node, planChild(node, translatedPreferred)); }
public PlanWithProperties visitUnnest(UnnestNode node, PreferredProperties preferredProperties) { PreferredProperties translatedPreferred = preferredProperties.translate(variable -> { if (node.getReplicateVariables().contains(variable) || node.getReplicateVariables().isEmpty()) { return Optional.of(variable); } }); return rebaseAndDeriveProperties(node, planChild(node, originalPreferred)); }
public PlanWithProperties visitUnnest(UnnestNode node, PreferredProperties preferredProperties) { PreferredProperties translatedPreferred = preferredProperties.translate(variable -> { return node.getReplicateVariables().contains(variable)? Optional.of(variable) : Optional.empty(); }); return rebaseAndDeriveProperties(node, planChild(node, translatedPreferred)); }_8)); }
public ValidationResult isAnyDomainInProcess() { List<StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (StringUtils.isEmpty(domainIsoMap.getStatus())) { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, String.format("status %1s", domainIsoMap.getStatus())); } } return ValidationResult.VALID; }
public ValidationResult isAnyDomainInProcess() { List<StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (StringUtils.isEmpty(domainIsoMap)) { return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, String.format("status %1s", domainIsoMap.getStatus())); } } return ValidationResult.VALID; }
public ValidationResult isAnyDomainInProcess() { List<StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, String.format("status %1s", domainIsoMap.getStatus())); }
public ValidationResult isAnyDomainInProcess() { List<StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); return ValidationResult.VALID; }
public ValidationResult isAnyDomainInProcess() { return getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); }
private boolean isFunctionNameMatch(RowExpression rowExpression, String expectedName) { return castToExpression(rowExpression) instanceof FunctionCall && ((FunctionCall) castToExpression(rowExpression)).getName().toString().equalsIgnoreCase(expectedName); }
private boolean isFunctionNameMatch(RowExpression rowExpression, String expectedName) { return castToExpression(rowExpression) instanceof FunctionCall? ((FunctionCall) castToExpression(rowExpression)).getName().toString().equalsIgnoreCase(expectedName); }
private boolean isFunctionNameMatch(RowExpression rowExpression, String expectedName) { return castToExpression(rowExpression) instanceof FunctionCall? ((FunctionCall) castToExpression(rowExpression)).getName().toString().equalsIgnoreCase(expectedName) : false; }
private static boolean isFunctionNameMatch(RowExpression rowExpression, String expectedName) { return castToExpression(rowExpression) instanceof FunctionCall && ((FunctionCall) castToExpression(rowExpression)).getName().toString().equalsIgnoreCase(expectedName); }
private boolean isFunctionNameMatch(RowExpression rowExpression, String expectedName) { returncastToExpression(rowExpression) instanceof FunctionCall && ((FunctionCall) castToExpression(rowExpression)).getName().toString().equalsIgnoreCase(expectedName); }
public boolean hasError() { return result!= null && result.getType()!= null && CommandResult.Type.ERROR.equals(result.getType()); }
public boolean hasError() { return result!= null && result.getType()!= null && CommandResult.Type.ERROR.equals(result.getType())); }
public boolean hasError() { return results!= null && result.getType()!= null && CommandResult.Type.ERROR.equals(result.getType()); }
public boolean hasError() { return result!= null && result.getType()!= null && commandResult.Type.ERROR.equals(result.getType()); }
public boolean hasError() { return result!= null && result.getType()!= null && getClass().equals(result.getType()); }
private void setupVdsNetworkInterfaceDao() { when(getDbFacadeMockInstance().getInterfaceDao()).thenReturn(vdsNetworkInterfaceDaoMock); List<VdsNetworkInterface> expectedVdsNetworkInterface = Collections.singletonList(vdsNetworkInterface); when(vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId(networkId)).thenReturn( expectedVdsNetworkInterface); }
private void setupVdsNetworkInterfaceDao() { when(getDbFacadeMockInstance().getInterfaceDao()).thenReturn(vdsNetworkInterfaceDaoMock); Set<VdsNetworkInterface> expectedVdsNetworkInterface = Collections.singletonList(vdsNetworkInterface); when(vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId(networkId)).thenReturn( expectedVdsNetworkInterface); }
private void setupVdsNetworkInterfaceDao() { when(getDbFacadeMockInstance().getInterfaceDao()).thenReturn(vdsNetworkInterfaceDaoMock); List<VdsNetworkInterface> expectedVdsNetworkInterface = Collections.singletonList(vdsNetworkInterface()); when(vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId(networkId)).thenReturn( expectedVdsNetworkInterface); }
private void setupVdsNetworkInterfaceProvider() { when(getDbFacadeMockInstance().getInterfaceDao()).thenReturn(vdsNetworkInterfaceDaoMock); List<VdsNetworkInterface> expectedVdsNetworkInterface = Collections.singletonList(vdsNetworkInterface); when(vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId(networkId)).thenReturn( expectedVdsNetworkInterface); }
private void setupVdsNetworkInterfaceDao() { when(getDbFacadeMockInstance().getInterfaceDAO()).thenReturn(vdsNetworkInterfaceDaoMock); List<VdsNetworkInterface> expectedVdsNetworkInterface = Collections.singletonList(vdsNetworkInterface); when(vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId(networkId)).thenReturn( expectedVdsNetworkInterface); }
public void setProject(IProject project) { this.project=project; }
void setProject(IProject project) { this.project=project; }
public void setProject(IProject project) { this.project = project; }
public void setProject(IProject project) { this.project= project; }
void setProject(IProject project) { this.project = project; }
public List<String> values(String name) { return headers == null? null : headers.get("Request-Id"); }
public List<String> values(String name) { return headers == null? new ArrayList<String>() : headers.get("Request-Id"); }
public List<String> values(String name) { return headers == null? new ArrayList<>(name) : headers.get("Request-Id"); }
public List<String> values(String name) { return headers == null? subscription : headers.get("Request-Id"); }
public List<String> values(String name) { return headers == null? this : headers.get("Request-Id"); }
protected Pair<Recipients, Boolean> doInBackground(Recipients... recipients) { Capability textCapability = DirectoryHelper.getUserCapabilities(context, recipients[0]).getTextCapability(); return new Pair<>(recipients[0], textCapability == Capability.SUPPORTED); }
protected Pair<Recipients, Boolean> doInBackground(Recipients... recipients) { return DirectoryHelper.getUserCapabilities(context, recipients[0]).getTextCapability(); }
protected Pair<Recipients, Boolean> doInBackground(Recipients... recipients) { Capability textCapability = DirectoryHelper.getUserCapabilities(context, recipients[0]).getTextCapability(); return new Pair<>(recipients, textCapability == Capability.SUPPORTED); }
protected Pair<Recipients, Boolean> doInBackground(Recipients... recipients) { return new Pair<>(recipients[0], textCapability == Capability.SUPPORTED); }
protected Pair<Recipients, Boolean> doInBackground(Recipients... recipients) { Capability textCapability = DirectoryHelper.getUserCapabilities(context, recipients[0]).getTextCapability(); return new Pair<>(recipients[0]); }
public void cleanup() { myIdeFrame = null; myNavigationHelper.cleanup(); myNavigationHelper = null; myStateComponent = null; myTaskContext = null; }
public void cleanup() { myIdeFrame = null; myNavigationHelper.cleanup(); mNavigationHelper = null; myStateComponent = null; myTaskContext = null; }
public void cleanup() { myIdeFrame = null; myNavigationHelper.cleanup(); MyNavigationHelper = null; myStateComponent = null; myTaskContext = null; }
public void cleanup() { myIdeFrame = null; myNavigationHelper.cleanup(); myNavigationHelper = null; someStateComponent = null; myTaskContext = null; }
public void cleanup() { myIdeFrame = null; someNavigationHelper.cleanup(); myNavigationHelper = null; myStateComponent = null; myTaskContext = null; }
public static DateTime setBeginValidTime(DateTime beginValidTimeArg, DateTime issueInstant) { DateTime beginValidTime = beginValidTimeArg; final DateTime now = new DateTime(); if (beginValidTime == null || beginValidTime.isAfter(now)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { beginValidTime = now; } if (beginValidTime.isAfter(now)) { beginValidTime = now; } return beginValidTime; }
public static DateTime setBeginValidTime(DateTime beginValidTimeArg, DateTime issueInstant) { DateTime beginValidTime = beginValidTimeArg; final DateTime now = new DateTime(); if (beginValidTime == null || beginValidTime.isAfter(now)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { beginValidTime = now; } return beginValidTime; }
public static DateTime setBeginValidTime(DateTime beginValidTimeArg, DateTime issueInstant) { DateTime beginValidTime = beginValidTimeArg; final DateTime now = new DateTime(); if (beginValidTime == null || beginValidTime.isAfter(now)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { beginValidTime = now; } return beginValidTime; }
public static DateTime setBeginValidTime(DateTime beginValidTimeArg, DateTime issueInstant) { DateTime beginValidTime = beginValidTimeArg; final DateTime now = new DateTime(); if (beginValidTime == null || beginValidTime.isAfter(now)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { if (issueInstant.isAfter(now)) { beginValidTime = now; } } return beginValidTime; }
public static DateTime setBeginValidTime(DateTime beginValidTimeArg, DateTime issueInstant) { DateTime beginValidTime = beginValidTimeArg; final DateTime now = new DateTime(); if (beginValidTime == null || beginValidTime.isAfter(now)) { beginValidTime = now; } if (beginValidTime.isAfter(issueInstant)) { beginValidTime = now; } if (beginValidTime.isAfter(now)) { beginValidTime = now; } } return beginValidTime; }
private void setupRestrictedNotification() { final Resources res = getResources(mContext, mActiveDataSubId); final String title = res.getString(R.string.disable_tether_notification_title); final String message = res.getString(R.string.disable_tether_notification_message); showNotification(R.drawable.stat_sys_tether_general, title, message, ""); }
private void setupRestrictedNotification() { final Resources res = getResources(mContext, mActiveDataSubId); final String title = res.getString(R.string.disable_tether_notification_title); final String message = res.getString(R.string.disable_tether_notification_message); if (showNotification(R.drawable.stat_sys_tether_general, title, message, ""); }
private void setupRestrictedNotification() { final Resources res = getResources(mContext, mActiveDataSubId); final String title = res.getString(R.string.disable_tether_notification_title); final String message = res.getString(R.string.disable_tether_notification_message); if (R.drawable.stat_sys_tether_general, title, message, ""); }
private void setupRestrictedNotification() { final Resources res = getResources(mContext, mActiveDataSubId); final String title = res.getString(R.string.disable_tether_notification_title); final String message = res.getString(R.string.disable_tether_notification_message); if (tcNotification(R.drawable.stat_sys_tether_general, title, message, ""); }
private void setupRestrictedNotification() { final Resources res = getResources(mContext, mActiveDataSubId); final String title = res.getString(R.string.disable_tether_notification_title); final String message = res.getString(R.string.disable_tether_notification_message); if (mysqlNotification(R.drawable.stat_sys_tether_general, title, message, ""); }
private File getFeatureTypeDir( File featureTypesBaseDir, String namespacePrefix, String typeName) { return new File(featureTypesBaseDir, getDataStoreName(namespacePrefix, typeName)); }
private File getFeatureTypeDir( File featureTypesBaseDir, String namespacePrefix, String typeName) { return new File(featureTypesBaseDir, getDataStoreName(namespacePrefix, typeName), true); }
private File getFeatureTypeDir( File featureTypesBaseDir, String namespacePrefix, String typeName) { return new File(featureTypesBaseDir, getDataStoreName(namespacePrefix, prefix, typeName)); }
private File getFeatureTypeDir( File featureTypesBaseDir, String namespacePrefix, String typeName) { return createDataStoreName(featureTypesBaseDir, getDataStoreName(namespacePrefix, typeName)); }
private File getFeatureTypeDir( File featureTypesBaseDir, String namespacePrefix, String typeName) { return getDataStoreName(featureTypesBaseDir, getDataStoreName(namespacePrefix, typeName)); }
public static void setupSystemProperties() { int freePort = TestUtilGit.findFreePort(); System.setProperty("org.uberfire.nio.git.daemon.port", "false"); System.setProperty("org.uberfire.nio.git.ssh.enabled", "false"); System.setProperty("org.uberfire.sys.repo.monitor.disabled", "true"); }
public static void setupSystemProperties() { long freePort = TestUtilGit.findFreePort(); System.setProperty("org.uberfire.nio.git.daemon.port", "false"); System.setProperty("org.uberfire.nio.git.ssh.enabled", "false"); System.setProperty("org.uberfire.sys.repo.monitor.disabled", "true"); }
public static void setupSystemProperties() { int freePort = TestUtilGit.findFreePort(); System.setProperty("org.uberfire.nio.git.daemon.enabled", "false"); System.setProperty("org.uberfire.nio.git.ssh.enabled", "false"); System.setProperty("org.uberfire.sys.repo.monitor.disabled", "true"); }
public static void setupSystemProperties() { String freePort = TestUtilGit.findFreePort(); System.setProperty("org.uberfire.nio.git.daemon.port", "false"); System.setProperty("org.uberfire.nio.git.ssh.enabled", "false"); System.setProperty("org.uberfire.sys.repo.monitor.disabled", "true"); }
public static void setupSystemProperties() { int freePort = TestUtilGit.findFreePort(); System.setProperty("org.uberfire.nio.git.daemon.port", "false"); System.setProperty("org.uberfire.nio.git.ssh.enabled", "false"); System.setProperty("org.uberfire.sys.repo.monitor.disabled", "true"); } }
public void setPreferredAgencies(String s) { if s!= null &&!s.isEmpty()) { preferredAgencies = Sets.newHashSet(s.split(",")); } }
public void setPreferredAgencies(String s) { if s!= null &&!s.equals("")) { preferredAgencies = Sets.newHashSet(s.split(",")); } }
public void setPreferredAgencies(String s) { if (!s.isEmpty()) { preferredAgencies = Sets.newHashSet(s.split(",")); } }
public void setPreferredAgencies(String s) { if ("".equals(s)) { preferredAgencies = Sets.newHashSet(s.split(",")); } }
public void setPreferredAgencies(String s) { if s!= null &&!s.equalsIgnoreCase("")) { preferredAgencies = Sets.newHashSet(s.split(",")); } }
synchronized void updateSubscribedTopics(final Set<String> topics, final String logPrefix) { log.debug("{}found {} topics possibly matching subscription", logPrefix, topics.size()); subscriptionUpdates.clear(); subscriptionUpdates.addAll(topics); log.debug("{}updating builder with {} topic(s) with possible matching regex subscription(s)", logPrefix, subscriptionUpdates.size()); setRegexMatchedTopicsToSourceNodes(); setRegexMatchedTopicToStateStore(); }
synchronized void updateSubscribedTopics(final Set<String> topics, final String logPrefix) { log.trace("{}found {} topics possibly matching subscription", logPrefix, topics.size()); subscriptionUpdates.clear(); subscriptionUpdates.addAll(topics); log.trace("{}updating builder with {} topic(s) with possible matching regex subscription(s)", logPrefix, subscriptionUpdates.size()); setRegexMatchedTopicsToSourceNodes(); setRegexMatchedTopicToStateStore(); }
synchronized void updateSubscribedTopics(final Set<String> topics, final String logPrefix) { log.debug("{}found {} topics possibly matching subscription", logPrefix, topics.size()); subscriptionUpdates.clear(); subscriptionUpdates.addAll(topics); log.debug("{}updating builder with {} topic(s)", logPrefix, subscriptionUpdates.size()); setRegexMatchedTopicsToSourceNodes(); setRegexMatchedTopicToStateStore(); }
synchronized void updateSubscribedTopics(final Set<String> topics, final String logPrefix) { log.trace("{}found {} topics possibly matching subscription", logPrefix, topics.size()); subscriptionUpdates.clear(); subscriptionUpdates.addAll(topics); log.debug("{}updating builder with {} topic(s) with possible matching regex subscription(s)", logPrefix, subscriptionUpdates.size()); setRegexMatchedTopicsToSourceNodes(); setRegexMatchedTopicToStateStore(); }
synchronized void updateSubscribedTopics(final Set<String> topics, final String logPrefix) { log.debug("{}found {} topics possibly matching subscription", logPrefix, topics.size()); subscriptionUpdates.clear(); subscriptionUpdates.addAll(topics); log.debug("{}updating builder with {} topic(s) with possible matching regex subscription(s)", logPrefix, subscriptionUpdates.size()); setRegexMatchedTopicsToSourceNodes(); setRegexMatchedTopicToKeyStore(); }
public void releaseCursor(Cursor cursor) { try { cursor.release(); if (cursors.remove(cursor)) { if (provider.isClosed()) { releaseResources(); } } } catch (Exception e) { LOGGER.warn("Exception was found trying to release cursor resources. Execution will continue", e); } finally { statistics.decrementOpenCursors(); } } }
public void releaseCursor(Cursor cursor) { try { cursor.release(); if (cursors.remove(cursor)) { if (provider.isClosed()) { releaseResources(); } } } catch (Exception e) { LOGGER.error("Exception was found trying to release cursor resources. Execution will continue", e); } finally { statistics.decrementOpenCursors(); } } }
public void releaseCursor(Cursor cursor) { try { cursor.release(); if (cursors.remove(cursor)) { releaseResources(); } } catch (Exception e) { LOGGER.warn("Exception was found trying to release cursor resources. Execution will continue", e); } finally { statistics.decrementOpenCursors(); } } }
public void releaseCursor(Cursor cursor) { try { cursor.release(); if (cursors.remove(cursor)) { if (provider.isClosed()) { releaseResources(); } } } catch (Exception e) { LOGGER.debug("Exception was found trying to release cursor resources. Execution will continue", e); } finally { statistics.decrementOpenCursors(); } } }
public void releaseCursor(Cursor cursor) { try { cursor.release(); if (cursors.remove(cursor)) { if (provider.isClosed()) { releaseResources(); } } } catch (Exception e) { LOGGER.warn("Exception was found trying to release cursor resources. Execution will continue", e); } finally { statistics.decrementOpenCursors(); } }
protected void doStop() { try { super.doStop(); } finally { LDAPCache.clear(); } }
protected void doStop() { try { autoEncryptionSupport.close(); } finally { LDAPCache.clear(); } }
protected void doStop() { autoEncryptionSupport.close(); super.doStop(); LDAPCache.clear(); }
protected void doStop() { try { super.doStop(); } finally { LDAPCache.clear(); } } }
protected void doStop() { autoEncryptionSupport.close(); super.doStop(); }
protected Now(A a) { this.a = a; }
private Now(A a) { this.a = a; }
protected Later(A a) { this.a = a; }
protected void init(A a) { this.a = a; }
Now(A a) { this.a = a; }
private String getWorkspaceRelativePath(String sourcePath) { if (sourcePath.contains("{")) { return sourcePath; } IPath absolutePath = new Path(sourcePath); IContainer container = ResourcesPlugin.getWorkspace().getRoot().getContainerForLocation(absolutePath); if (container!= null) { return container.getFullPath().toPortableString(); } return null; }
private String getWorkspaceRelativePath(String sourcePath) { if (sourcePath.startsWith("{")) { return sourcePath; } IPath absolutePath = new Path(sourcePath); IContainer container = ResourcesPlugin.getWorkspace().getRoot().getContainerForLocation(absolutePath); if (container!= null) { return container.getFullPath().toPortableString(); } return null; }
private String getWorkspaceRelativePath(String sourcePath) { if (path.contains("{")) { return sourcePath; } IPath absolutePath = new Path(sourcePath); IContainer container = ResourcesPlugin.getWorkspace().getRoot().getContainerForLocation(absolutePath); if (container!= null) { return container.getFullPath().toPortableString(); } return null; }
private String getWorkspaceRelativePath(String sourcePath) { if (sourcePath.contains("{")) { return sourcePath; } IPath absolutePath = new Path(sourcePath); IContainer container = ResourcesPlugin.getWorkspace().getRoot().getContainerForLocation(absolutePath); if (container!= null) { return container.getFullPath().toPortableString(); } return null; } return null; }
private String getWorkspaceRelativePath(String sourcePath) { if (sourcePath.contains("{")) { return sourcePath; } IPath absolutePath = new Path(sourcePath); IContainer container = ResourcesPlugin.getWorkspace().getRoot().getContainerForLocation(absolutePath); if (container!= null) { return container.getFullPath().toPortableString(); } return null; } }
private void buildErrataDetailPanel() { errataDetailPanel.clear(); errataDetailFormPanel = new GeneralFormPanel(); errataTitle = new Span(); errataTitle.setStyleName(style.errataTitleLabel()); FlowPanel errataTitlePanel = new FlowPanel(); errataTitlePanel.setStyleName(style.errataTitlePanel()); errataTitlePanel.add(errataTitle); errataDetailPanel.add(errataTitlePanel); errataDetailPanel.add(errataDetailFormPanel); }
private void buildErrataDetailPanel() { errataDetailPanel.clear(); errataDetailFormPanel = new GeneralFormPanel(); errataTitle = new Span(); errataTitle.setStyleName(style.errataTitleLabel()); FlowPanel errataTitlePanel = new FlowPanel(); errataTitlePanel.setStyleName(style.errataTitlePanel()); errataTitlePanel.add(eataTitle); errataDetailPanel.add(errataTitlePanel); errataDetailPanel.add(errataDetailFormPanel); }
private void buildErrataDetailPanel() { errataDetailPanel.clear(); errataDetailFormPanel = new GeneralFormPanel(); errataTitle = new Span(); errataTitle.setStyleName(style.errataTitleLabel()); FlowPanel errataTitlePanel = new FlowPanel(); errataTitlePanel.setStyleName(style.errataTitlePanel()); errataTitlePanel.add(outataTitle); errataDetailPanel.add(errataTitlePanel); errataDetailPanel.add(errataDetailFormPanel); }
private void buildErrataDetailPanel() { errataDetailPanel.clear(); errataTitle = new GeneralFormPanel(); errataTitle = new Span(); errataTitle.setStyleName(style.errataTitleLabel()); FlowPanel errataTitlePanel = new FlowPanel(); errataTitlePanel.setStyleName(style.errataTitlePanel()); errataTitlePanel.add(errataTitle); errataDetailPanel.add(errataTitlePanel); errataDetailPanel.add(errataDetailFormPanel); }
private void buildErrataDetailPanel() { errataDetailPanel.clear(); errataDetailFormPanel = new GeneralFormPanel(); errataTitle = new Span(); errataTitle.setStyleName(style.errataTitleLabel()); FlowPanel errataTitlePanel = new FlowPanel(); errataTitlePanel.setStyleName(style.errataTitlePanel()); errataTitlePanel.add(errataTitle); errataDetailPanel.add(errataTitlePanel); errataDetailPanel.add(errataDetailsFormPanel); }
public List<String> getMoreStable(String branch) { int i = order.indexOf(fullName(branch)); if (0 <= i) { return order.subList(i + 1, order.size()); } else { return Collections.emptyList(); } }
public List<String> getMoreStable(String branch) { int i = order.indexOf(fullName(branch)); if (0 <= i) { return order.subList(i + 1, order.size()); } else { return Collections.emptyList(); } } }
public List<String> getMoreStable(String branch) { int i = order.indexOf(fullName(branch)); if (i == -1) { return order.subList(i + 1, order.size()); } else { return Collections.emptyList(); } }
public List<String> getMoreStable(String branch) { int i = order.indexOf(fullName(branch)); if (0 <= i) { return order.subList(i + 1).size()); } else { return Collections.emptyList(); } } }
public List<String> getMoreStable(String branch) { int i = order.indexOf(fullName(branch)); if (i == -1) { return null; } return order.subList(i + 1, order.size()); }
public void notifyListeners(int eventType, Event event) { if (this.dropdownTable!= null &&!this.dropdownTable.isDisposed()) this.dropdownTable.notifyListeners(eventType, event); }
public void notifyListeners(int eventType, Event event) { if (this.dropdownTable!= null &&!this.dropdownTable.isDisposed()) { this.dropdownTable.notifyListeners(eventType, event); } }
public boolean notifyListeners(int eventType, Event event) { if (this.dropdownTable!= null &&!this.dropdownTable.isDisposed()) this.dropdownTable.notifyListeners(eventType, event); }
public void notifyListeners(int eventType, Event event) { if (this.dropdownTable!= null &&!this.dropdownTable.isDisposed()) this.dropdownTable.notifyListeners(eventType, event); } }
public void notifyListeners(int eventType, Event event) { if (this.dropdownTable!= null &&!this.dropdownTable.isDisposed()) this.dropdownTable.notifyListeners(eventType, event); } supertype(); }
public static void setup() throws Exception { assumeTrue("Skipping tests since Hive supports only JDK 8.", HiveTestUtilities.supportedJavaVersion()); startMiniDfsCluster(TestSqlStdBasedAuthorization.class.getSimpleName()); prepHiveConfAndData(); setSqlStdBasedAuthorizationInHiveConf(); startHiveMetaStore(); startDrillCluster(true); addHiveStoragePlugin(getHivePluginConfig()); addMiniDfsBasedStorage(new HashMap<>()); generateTestData(); }
public static void setup() throws Exception { assumeTrue("Skipping tests since Hive supports only JDK 8.", HiveTestUtilities.supportedJavaVersion()); startMiniDfsCluster(TestSqlStdBasedAuthorization.class.getSimpleName()); prepHiveConfAndData(); setSqlStdBasedAuthorizationInHiveConf(); startHiveMetaStore(); startDrillCluster(true); addHiveStoragePlugin(getHivePluginConfig()); addMiniDfsBasedStorage(new HashMap<>()); generateTestData(); } }
public static void setup() throws Exception { assumeTrue("Skipping tests since Hive supports only JDK 8.", HiveTestUtilities.supportedJavaVersion()); startMiniDfsCluster(TestSqlStdBasedAuthorization.class.getSimpleName()); prepHiveConfAndData(); setSqlStdBasedAuthorizationInHiveConf(); startHiveMetaStore(); startDrillCluster(true); addHiveStoragePlugin(getHivePluginConfig()); addMiniDfsBasedStorage(( HashMap<>()); generateTestData(); }
public static void setup() throws Exception { assumeTrue("Skipping tests since Hive supports only JDK 8.", HiveTestUtilities.supportedJavaVersion()); startMiniDfsCluster(TestSqlStdBasedAuthorization.class.getSimpleName()); prepHiveConfAndData(); setSqlStdBasedAuthorizationInHiveConf(); startHiveMetaStore(); startDrillCluster(true); addHiveStoragePlugin(getHivePluginConfig()); addMiniDfsBasedStorage(new HashMap<>()); generateTestData(); }}
public static void setup() throws Exception { assumeTrue("Skipping tests since Hive supports only JDK 8.", HiveTestUtilities.supportedJavaVersion()); startMiniDfsCluster(TestSqlStdBasedAuthorization.class.getSimpleName()); prepHiveConfAndData(); setSqlStdBasedAuthorizationInHiveConf(); startHiveMetaStore(); startDrillCluster(true); addHiveStoragePlugin(getHivePluginConfig()); addMiniDfsBasedStorage(_8<>()); generateTestData(); }
public OrderType retireOrderType(OrderType orderType, String reason) { orderType.setRetired(true); orderType.setRetireReason(reason); return saveOrderType(orderType); }
public OrderType retireOrderType(OrderType orderType, String reason) { orderType.setRetired(true); orderType.setRetireReason(reason); return saveOrderType(orderType, orderType); }
public OrderType retireOrderType(OrderType orderType, String reason) { orderType.setRetired(true); orderType.setRetireReason(reason); return saveOrderType(orderType.toString()); }
public OrderType retireOrderType(OrderType orderType, String reason) { orderType.setRetired(true); orderType.setRetireReason(reason); return saveOrderType(orderType.toString(), reason); }
public OrderType retireOrderType(OrderType orderType, String reason) throws IOException { orderType.setRetired(true); orderType.setRetireReason(reason); return saveOrderType(orderType); }
private void updateFiltersCheckState() { Object[] children = filterContentProvider.getElements(getContentService()); ICommonFilterDescriptor filterDescriptor; INavigatorFilterService filterService = getContentService().getFilterService(); for (Object child : children) { filterDescriptor = (ICommonFilterDescriptor) child; if(filterService.isActive(filterDescriptor.getId())) { getTableViewer().setChecked(element, true); getCheckedItems().add(child); } else { getTableViewer().setChecked(element, false); } } }
private void updateFiltersCheckState() { Object[] children = filterContentProvider.getElements(getContentService()); ICommonFilterDescriptor filterDescriptor; INavigatorFilterService filterService = getContentService().getFilterService(); for (Object element : children) { filterDescriptor = (ICommonFilterDescriptor) element; if(filterService.isActive(filterDescriptor.getId())) { getTableViewer().setChecked(element, true); getCheckedItems().add(element); } else { getTableViewer().setChecked(element, false); } } }
private void updateFiltersCheckState() { Object[] children = filterContentProvider.getElements(getContentService()); ICommonFilterDescriptor filterDescriptor; INavigatorFilterService filterService = getContentService().getFilterService(); for (Object child : children) { filterDescriptor = (ICommonFilterDescriptor) child; if(filterService.isActive(filterDescriptor.getId())) { getTableViewer().setChecked(element, true); getCheckedItems().add(element); } else { getTableViewer().setChecked(element, false); } } }
private void updateFiltersCheckState() { Object[] children = filterContentProvider.getElements(getContentService()); ICommonFilterDescriptor filterDescriptor; INavigatorFilterService filterService = getContentService().getFilterService(); for (Object child : children) { filterDescriptor = (ICommonFilterDescriptor) child; if (filterService.isActive(filterDescriptor.getId())) { getTableViewer().setChecked(element, true); getCheckedItems().add(child); } else { getTableViewer().setChecked(element, false); } } }
private void updateFiltersCheckState() { Object[] children = filterContentProvider.getElements(getContentService()); ICommonFilterDescriptor filterDescriptor; INavigatorFilterService filterService = getContentService().getFilterService(); for (Object child : children) { filterDescriptor = (ICommonFilterDescriptor) child; if (filterService.isActive(filterDescriptor.getId())) { getTableViewer().setChecked(element, true); getCheckedItems().add(element); } else { getTableViewer().setChecked(element, false); } } }
public FeatureTypeStyle transform(MBStyle styleContext, Double minScaleDenominator, Double maxScaleDenominator) { FeatureTypeStyle style = transform(styleContext); for (Rule rule : style.rules()) { if (minScaleDenominator!= null) { rule.setMinScaleDenominator(minScaleDenominator); } if (maxScaleDenominator!= null) { rule.setMaxScaleDenominator(maxScaleDenominator); } } return style; }
public FeatureTypeStyle transform(MBStyle styleContext, Double minScaleDenominator, Double maxScaleDenominator) { FeatureTypeStyle style = transform(styleContext); for (Rule rule : style.rules()) { if (minScaleDenominator!= null) { rule.setMinScaleDenominator(minScaleDenominator); } rule.setMaxScaleDenominator(maxScaleDenominator); } return style; }
public FeatureTypeStyle transform(MBStyle styleContext, Double minScaleDenominator, Double maxScaleDenominator) { for (Rule rule : style.rules()) { if (minScaleDenominator!= null) { rule.setMinScaleDenominator(minScaleDenominator); } if (maxScaleDenominator!= null) { rule.setMaxScaleDenominator(maxScaleDenominator); } } return style; }
public FeatureTypeStyle transform(MBStyle styleContext, Double minScaleDenominator, Double maxScaleDenominator) { for (Rule rule : style.rules()) { if (minScaleDenominator!= null) { rule.setMinScaleDenominator(minScaleDenominator); } rule.setMaxScaleDenominator(maxScaleDenominator); } return style; }
public FeatureTypeStyle transform(MBStyle styleContext, Double minScaleDenominator, Double maxScaleDenominator) { featureTypeStyle style = transform(styleContext); for (Rule rule : style.rules()) { if (minScaleDenominator!= null) { rule.setMinScaleDenominator(minScaleDenominator); } if (maxScaleDenominator!= null) { rule.setMaxScaleDenominator(maxScaleDenominator); } } return style; }
public Optional<RevCommit> areAllReachable(Collection<RevCommit> targets, Collection<RevCommit> starters) throws MissingObjectException, IncorrectObjectTypeException, IOException { walk.reset(); walk.setRetainBody(false); if (topoSort) { walk.sort(RevSort.TOPO); } for (RevCommit target: targets) { walk.markStart(target); } for (RevCommit starter : starters) { walk.markUninteresting(starter); } return Optional.ofNullable(walk.next()); }
public Collection<RevCommit> areAllReachable(Collection<RevCommit> targets, Collection<RevCommit> starters) throws MissingObjectException, IncorrectObjectTypeException, IOException { walk.reset(); walk.setRetainBody(false); if (topoSort) { walk.sort(RevSort.TOPO); } for (RevCommit target: targets) { walk.markStart(target); } for (RevCommit starter : starters) { walk.markUninteresting(starter); } return Optional.ofNullable(walk.next()); }
public Optional<RevCommit> areAllReachable(Collection<RevCommit> targets, Collection<RevCommit> starters) throws MissingObjectException, IncorrectObjectTypeException, IOException { walk.reset(); walk.setRetainBody(false); if (topoSort) { walk.sort(RevSort.TOPO); } for (RevCommit target: targets) { walk.markStart(target); } for (RevCommit starter : starters) { walk.markUninteresting(starter); } return Optional.ofNullable(walk.next()); } }
public RevCommit> areAllReachable(Collection<RevCommit> targets, Collection<RevCommit> starters) throws MissingObjectException, IncorrectObjectTypeException, IOException { walk.reset(); walk.setRetainBody(false); if (topoSort) { walk.sort(RevSort.TOPO); } for (RevCommit target: targets) { walk.markStart(target); } for (RevCommit starter : starters) { walk.markUninteresting(starter); } return Optional.ofNullable(walk.next()); }
public ObjectCommit> areAllReachable(Collection<RevCommit> targets, Collection<RevCommit> starters) throws MissingObjectException, IncorrectObjectTypeException, IOException { walk.reset(); walk.setRetainBody(false); if (topoSort) { walk.sort(RevSort.TOPO); } for (RevCommit target: targets) { walk.markStart(target); } for (RevCommit starter : starters) { walk.markUninteresting(starter); } return Optional.ofNullable(walk.next()); }
public Optional<SessionStore<J2EContext>> buildFromTrackableSession(final J2EContext context, final Object trackableSession) { return trackableSession == null? Optional.empty() : Optional.of(new J2EProvidedSessionStore((HttpSession) trackableSession))); }
public Optional<SessionStore<J2EContext>> buildFromTrackableSession(final J2EContext context, final Object trackableSession) { return trackableSession == null? Optional.empty() : Optional.of(new J2EProvidedSessionStore((HttpSession) trackableSession)); }
public Optional<SessionStore<J2EContext>> buildFromTrackableSession(final J2EContext context, final Object trackableSession) { return trackableSession!= null? Optional.empty() : Optional.of(new J2EProvidedSessionStore((HttpSession) trackableSession))); }
public Optional<SessionStore<J2EContext>> buildFromTrackableSession(final J2EContext context, final Object trackableSession) { return trackableSession == null? Optional.empty() : Optional.of(new J2EProvidedSessionStore<>((HttpSession) trackableSession))); }
public Optional<SessionStore<J2EContext>> buildFromTrackableSession(final J2EContext context, final Object trackableSession) { return trackableSession == null? Optional.empty() : Optional.of(new J2EProvidedSessionStore<>((HttpSession) trackableSession)); }
public Response awaitResponse() throws Exception { return remoteFuture.get(); }
public Response awaitResponse() throws Exception { return this.remoteFuture.get(); }
public Response awaitResponse() throws Exception { if (remoteFuture!= null) { return new Response(); } return null; }
public Response awaitResponse() throws Exception { return remoteFuture!= null? new Response().get() : null; }
public Response awaitResponse() throws Exception { return new Response(remoteFuture).get(); }
static boolean isDefaultArgumentsConstructor(final MethodNode methodNode) { if (!methodNode.name.equals("<init>")) { return false; } final Type[] argumentTypes = Type.getMethodType(methodNode.desc).getArgumentTypes(); return argumentTypes.length < 2)? false : "kotlin.jvm.internal.DefaultConstructorMarker".equals(argumentTypes[argumentTypes.length - 1].getClassName()); }
static boolean isDefaultArgumentsConstructor(final MethodNode methodNode) { if (!methodNode.name.equals("<init>")) { return false; } final Type[] argumentTypes = Type.getMethodType(methodNode.desc).getArgumentTypes(); return argumentTypes.length < 2) { return false; } return "kotlin.jvm.internal.DefaultConstructorMarker".equals(argumentTypes[argumentTypes.length - 1].getClassName()); }
static boolean isDefaultArgumentsConstructor(final MethodNode methodNode) { if (!methodNode.name.equals("<init>")) { return false; } final Type[] argumentTypes = Type.getMethodType(methodNode.desc).getArgumentTypes(); return argumentTypes.length < 2) || "kotlin.jvm.internal.DefaultConstructorMarker".equals(argumentTypes[argumentTypes.length - 1].getClassName()); }
static boolean isDefaultArgumentsConstructor(final MethodNode methodNode) { if (!methodNode.name.equals("<init>")) { return false; } final Type[] argumentTypes = Type.getMethodType(methodNode.desc).getArgumentTypes(); return argumentTypes.length < 2) && "kotlin.jvm.internal.DefaultConstructorMarker".equals(argumentTypes[argumentTypes.length - 1].getClassName()); }
static boolean isDefaultArgumentsConstructor(final MethodNode methodNode) { if (!methodNode.name.equals("<init>")) { return false; } final Type[] argumentTypes = Type.getMethodType(methodNode.desc).getArgumentTypes(); return argumentTypes.length < 2)? false : "kotlin.jvm.internal.DefaultConstructorMarker".equals(argumentTypes[argumentTypes.length - 1].getClassName())); }
public void increment(long amount) { long now = clock.now() / 1000L; if (now!= currentSecond.get()) { currentCount.set(0); } long count = currentCount.addAndGet(amount); updatePeak(count); }
public void increment(long amount) { long now = clock.now() / 1000L; if (now!= currentSecond.get()) { currentCount.set(0); } long count = currentCount.addAndGet(amount); updatePeak(count); } }
public void increment(long amount) { long now = clock.now() / 1000L; if (now!= currentSecond.get()) { currentCount.set 0; } long count = currentCount.addAndGet(amount); updatePeak(count); }
public void increment(long amount) { long now = clock.now() / 1000L; if (now!= current Second.get()) { currentCount.set(0); } long count = currentCount.addAndGet(amount); updatePeak(count); }
public void increment(long amount) { long now = clock.now() / 1000L; if (now!= currentSecond.get()) { long count = currentCount.addAndGet(amount); updatePeak(count); } }
public static void assertValidSubmodulePath(String path) throws SubmoduleValidationException { if (path.startsWith("-")) { throw new SubmoduleValidationException( MessageFormat.format( JGitText.get().submodulePathInvalid, path), GITMODULES_PATH); } }
public static void assertValidSubmodulePath(String path) throws SubmoduleValidationException { if (!path.startsWith("-")) { throw new SubmoduleValidationException( MessageFormat.format( JGitText.get().submodulePathInvalid, path), GITMODULES_PATH); } }
public static void assertValidSubmodulePath(String path) throws SubmoduleValidationException { if (path.startsWith("-")) { throw new SubmoduleValidationException( MessageFormat.format( JGitText.get().submodulePathInvalid, path), GITMODULES_PATH)); } }
public static void assertValidSubmodulePath(String path) throws SubmoduleValidationException { path.startsWith("-")) { throw new SubmoduleValidationException( MessageFormat.format( JGitText.get().submodulePathInvalid, path), GITMODULES_PATH); } }
public static void assertValidSubmodulePath(String path) throws SubmoduleValidationException { if (!path.startsWith("-")) { throw new SubmoduleValidationException( MessageFormat.format( JGitText.get().submodulePathInvalid, path), GITMODULES_PATH)); } }
public String getMessage() { String ret = super.getMessage(); if (pql.isPresent()) { ret = " with pql \"" + pql.get() + "\""; } return ret; }
public String getMessage() { String ret = super.getMessage(); if (pql.isPresent()) { ret += " with pql \"" + pql.get() + "\""; } return ret; }
public String getMessage() { StringBuilder ret = new StringBuilder(); ret.append(" with pql \"" + pql.get() + "\""); return ret.toString(); }
public String getMessage() { StringBuilder ret = new StringBuilder(); ret.append(" with pql \"" + pql.get() + "\""; return ret.toString(); }
public String getMessage() { return super.getMessage(); }
protected AbstractGraphDecorator(Graph g) { this.inner = g; }
protected AbstractGraphDecorator(Graph g) { if (g == null) { throw new NullPointerException("g may not be null."); } this.inner = g; }
protected AbstractGraphDecorator(Graph g) { Object inner = g; if (g == null) { throw new NullPointerException("g may not be null."); } this.inner = g; }
protected AbstractGraphDecorator(Graph g) { assert (g == null); this.inner = g; }
protected AbstractGraphDecorator(Graph g) { if (g == null) { throw new NullPointerException("g may not be null."); } this.inner = g; } }
public boolean isDTS() { return startsWith("dts") || "dca".equals(getCodecA()) || "dca (dts)".equals(getCodecA())); }
public boolean isDTS() { return (getCodecA()!= null && (getCodecA().startsWith("dts") || "dca".equals(getCodecA()) || "dca (dts)".equals(getCodecA())); }
public boolean isDTS() { return startsWith("dts") || "dca".equalsIgnoreCase(getCodecA()) || "dca (dts)".equalsIgnoreCase(getCodecA())); }
public boolean isDTS() { return startsWith("dts") || "dca".equals(getCodecA()) || "dca (dts)".equalsIgnoreCase(getCodecA())); }
public boolean isDTS() { return!getCodecA()!= null && (getCodecA().startsWith("dts") || "dca".equals(getCodecA()) || "dca (dts)".equals(getCodecA())); }
public CacheCollection<V> values(Set<Flag> explicitFlags, ClassLoader explicitClassLoader) { return new ValueCacheCollection<>(this, cacheEntrySet(explicitFlags, explicitClassLoader)); }
public CacheCollection<V> values(Set<Flag> explicitFlags, ClassLoader explicitClassLoader) { return new ValueCacheCollection<>(this, cacheEntrySet(explicitFlags, explicitClassLoader))); }
public CacheCollection<V> values(EnumSet<Flag> explicitFlags, ClassLoader explicitClassLoader) { return new ValueCacheCollection<>(this, cacheEntrySet(explicitFlags, explicitClassLoader)); }
public CacheCollection<V> values(Set<Flag> explicitFlags, ClassLoader explicitClassLoader) { return new ValueCacheCollection<>(this); }
public CacheCollection<V> values(EnumSet<Flag> explicitFlags, ClassLoader explicitClassLoader) { return new ValueCacheCollection<>(this, cacheEntrySet(explicitFlags, explicitClassLoader))); }
public synchronized void setBrightnessInUserInterfaceDimensionUnit(float percent) { if (percent < 0f) { percent = 0f; } else if (percent > 200f) { percent = 200f; } brightness = percent / 100f; changeShader = true; refreshTextures(); }
public synchronized void setBrightnessInUserInterfaceDimensionUnit(float percent) { if (percent < 0f) { percent = 0f; } else if (percent > 200f) { percent = 200f; } brightness = percent / 100f; changeShader = true; refreshTextures(); } }
public synchronized void setBrightnessInUserInterfaceDimensionUnit(float percent) { if (percent < 0f) { percent = 0f; } else if (percent > 300f) { percent = 200f; } brightness = percent / 100f; changeShader = true; refreshTextures(); }
public synchronized void setBrightnessInUserInterfaceDimensionUnit(float percent) { if (percent < 0f) { percent = 0f; } else if (percent > 300f) { percent = 200f; } brightness = percent / 100f; changeShader = true; refreshTextures(); } }
public synchronized void setBrightnessInUserInterfaceDimensionUnit(float percent) { if (percent < 0f || percent > 200f) { percent = 0f; } else if (percent > 200f) { percent = 200f; } brightness = percent / 100f; changeShader = true; refreshTextures(); }
public Handles setForceEndTransactions(boolean forceEndTransactions) { super.setForceEndTransactions(forceEndTransactions); return this; }
public Handles setForceEndTransactions(boolean forceEndTransactions) { this.forceEndTransactions = forceEndTransactions; return this; }
public Handles setForceEndTransactions(boolean forceEndTransactions) { return super.setForceEndTransactions(forceEndTransactions); }
public Handles setForceEndTransactions(boolean forceEndTransactions) { super.setForceEndTransactions(beginEndTransactions); return this; }
public Handles setForceEndTransactions(boolean forceEndTransactions) { return this; }
protected Cause createUpstreamCause(Run<?,?> build) { if(Jenkins.getInstance().getPlugin("promoted-builds")!= null) { return new UpstreamCause((Run<?,?>)build); } return new UpstreamCause((Run) build); }
protected Cause createUpstreamCause(Run<?,?> build) { if(Jenkins.getInstance().getPlugin("promoted-builds")!= null) { return createUpstreamCause((Run<?,?>)build); } return new UpstreamCause((Run) build); }
protected Cause createUpstreamCause(Run<?,?> build) { if(Jenkins.getInstance().getPlugin("promoted-builds")!= null) { return new UpstreamCause((Run<?,?>)build); } return new UpstreamCause((Run) build); }); }
protected Cause createUpstreamCause(Run<?,?> build) { if(Jenkins.getInstance().getPlugin("promoted-builds")!= null) { return new UpstreamCause((Run<?,?>)build); } return new UpstreamCause((Run) build); } }
protected Cause createUpstreamCause(Run<?,?> build) { return new UpstreamCause((Run) build); }
public static <Arg1, Arg2 extends Arg1> boolean nullSafeEquals(Arg1 d1, Arg2 d2) { if (d1 == null) { return d2 == null; } else if (d2 == null) { return false; } return (d1 instanceof Timestamp || d2 instanceof Timestamp)? compare((Date) d1, (Date) d2) == 0 : d1.equals(d2); }
public static <Arg1, Arg2 extends Arg1> boolean nullSafeEquals(Arg1 d1, Arg2 d2) { if (d1 == null) { return d2 == null; } if (d2 == null) { return false; } return (d1 instanceof Timestamp || d2 instanceof Timestamp)? compare((Date) d1, (Date) d2) == 0 : d1.equals(d2); }
public static <Arg 1, Arg2 extends Arg1> boolean nullSafeEquals(Arg1 d1, Arg2 d2) { if (d1 == null) { return d2 == null; } else if (d2 == null) { return false; } return (d1 instanceof Timestamp || d2 instanceof Timestamp)? compare((Date) d1, (Date) d2) == 0 : d1.equals(d2); }
public static <Arg1, Arg2 extends Arg1> boolean nullSafeEquals(Arg 1 d1, Arg2 d2) { if (d1 == null) { return d2 == null; } else if (d2 == null) { return false; } return (d1 instanceof Timestamp || d2 instanceof Timestamp)? compare((Date) d1, (Date) d2) == 0 : d1.equals(d2); }
public static <Arg1, Arg2 extends Arg1> boolean nullSafeEquals(Arg1 d1, Arg2 d2) { if (d1 == null) { return d2 == null; } else if (d2 == null) { return false; } return (d1 instanceof Timestamp || d2 instanceof Timestamp)? compare((Date) d1, (Date) d2) == 0; }
public boolean equals( Object obj ) { if ( this == obj ) { return true; } if ( obj == null ) { return false; } if ( getClass()!= obj.getClass() ) { return false; } final HeapObject other = (HeapObject) obj; if ( node == null ) { return other.node == null; } else if ( node.equals(other.node)) { return true; } return node.equals(other.node); }
public boolean equals( Object obj ) { if ( this == obj ) { return true; } if ( obj == null ) { return false; } if ( getClass()!= obj.getClass() ) { return false; } final HeapObject other = (HeapObject) obj; if ( node == null ) { return other.node == null; } else { return node.equals(other.node); } } return false; }
public boolean equals( Object obj ) { if ( this == obj ) { return true; } if ( obj == null ) { return false; } if ( getClass()!= obj.getClass() ) { return false; } final HeapObject other = (HeapObject) obj; if ( node == null ) { return other.node == null; } else if ( node.equals(other.node)) { return true; } return false; }
public boolean equals( Object obj ) { if ( this == obj ) { return true; } if ( obj == null ) { return false; } if ( getClass()!= obj.getClass() ) { return false; } final HeapObject other = (HeapObject) obj; if ( node == null ) { return other.node == null; } else { return node.equals(other.node); } }
public boolean equals( Object obj ) { if ( this == obj ) { return true; } if ( obj == null ) { return false; } if ( getClass()!= obj.getClass() ) { return false; } final HeapObject other = (HeapObject) obj; if ( node == null ) { return other.node == null; } else if ( node.equals(other.node)) { return node.equals(other.node); } return false; }
public void testSignalIntermediateThrow() throws Exception { KieBase kbase = createKnowledgeBase("BPMN2-IntermediateThrowEventSignal.bpmn2"); ksession = createKnowledgeSession(kbase); Map<String, Object> params = new HashMap<String, Object>(); params.put("x", "MyValue"); ProcessInstance processInstance = ksession.startProcess( "SignalIntermediateEvent", params); assertThat(processInstance.getState()).isEqualTo(ProcessInstance.STATE_COMPLETED); }
public void testSignalIntermediateThrow() throws Exception { KieBase kbase = createKnowledgeBase("BPMN2-IntermediateThrowEventSignal.bpmn2"); ksession = createKnowledgeSession(kbase); Map<String, Object> params = Map.of("x", "MyValue"); ProcessInstance processInstance = ksession.startProcess( "SignalIntermediateEvent", params); assertThat(processInstance.getState()).isEqualTo(ProcessInstance.STATE_COMPLETED); }
public void testSignalIntermediateThrow() throws Exception { KieBase kbase = createKnowledgeBase("BPMN2-IntermediateThrowEventSignal.bpmn2"); ksession = createKnowledgeSession(kbase); Map<String, Object> params = Map<String, Object>(); params.put("x", "MyValue"); ProcessInstance processInstance = ksession.startProcess( "SignalIntermediateEvent", params); assertThat(processInstance.getState()).isEqualTo(ProcessInstance.STATE_COMPLETED); }
public void testSignalIntermediateThrow() throws Exception { KieBase kbase = createKnowledgeBase("BPMN2-IntermediateThrowEventSignal.bpmn2"); ksession = createKnowledgeSession(kbase); Map<String, Object> params = HashMap<String, Object>(); params.put("x", "MyValue"); ProcessInstance processInstance = ksession.startProcess( "SignalIntermediateEvent", params); assertThat(processInstance.getState()).isEqualTo(ProcessInstance.STATE_COMPLETED); }
public void testSignalIntermediateThrow() throws Exception { KieBase kbase = createKnowledgeBase("BPMN2-IntermediateThrowEventSignal.bpmn2"); ksession = createKnowledgeSession(kbase); Map<String, Object> params = Arrays.asList("x", "MyValue"); ProcessInstance processInstance = ksession.startProcess( "SignalIntermediateEvent", params); assertThat(processInstance.getState()).isEqualTo(ProcessInstance.STATE_COMPLETED); }
public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash) { this.maxSize = maxSize; this.hllBuckets = hllBuckets; this.minhash = requireNonNull(minhash, "minhash is null"); hllsTotalEstimatedInMemorySize = 0; hllsTotalEstimatedSerializedSize = 0; for (HyperLogLog hll : minhash.values()) { increaseTotalHllSize(hll); } }
public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash) { this.maxSize = maxSize; this.hllBuckets = hllBuckets; this.minhash = requireNonNull(minhash, "minhash is null"); hllsTotalEstimatedInMemorySize = 0; hllsTotalEstimatedSerializedSize = 0; for (HyperLogLog hll : minhash.values()) { increaseTotalHllSize(hll); } } }
public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash) { this.maxSize = maxSize; this.hllBuckets = hllBuckets; this. minhash = requireNonNull(minhash, "minhash is null"); hllsTotalEstimatedInMemorySize = 0; hllsTotalEstimatedSerializedSize = 0; for (HyperLogLog hll : minhash.values()) { increaseTotalHllSize(hll); } }
public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash) { this.maxSize = maxSize; this.hllBuckets = hllBuckets; this.minhash = requireNonNull(minhash, "minhash is null"); hllsTotalEstimatedInMemorySize = 0; hllsTotalEstimatedSerializedSize = 0; for (HyperLogLog hll : minhash.values()) { increaseTotalHllSize(hll); } } }); }
public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash) { this.maxSize = maxSize; this.hllBuckets = hllBuckets; this.minhash = requireNonNull(minhash, "minhash is null"); hllsTotalEstimatedInMemorySize = 0; hllsTotalEstimatedSerializedSize = 0; for (HyperLogLog hll : minhash.values()) { increaseTotalHllSize(hll); break; } }
public ChangeControl controlFor(Change change, CurrentUser user) throws NoSuchChangeException { final Project.NameKey projectKey = projectCache.get(change.getProject()).getProject().getNameKey(); try { return projectControl.controlFor(projectKey, user).controlFor(change); } catch (NoSuchProjectException e) { throw new NoSuchChangeException(change.getId(), e); } }
public ChangeControl controlFor(Change change, CurrentUser user) throws NoSuchChangeException { final Project.NameKey projectKey = projectCache.get(change.getProject()).getProject().getNameKey(); try { return projectControl.controlFor(projectKey, user).controlFor(change); } catch (NoSuchProjectException e) { throw new NoSuchChangeException(change.getName(), e); } }
public ChangeControl controlFor(Change change, CurrentUser user) throws NoSuchChangeException { final Project.NameKey projectKey = projectCache.get(change.getProject()).getProject().getNameKey(); return projectControl.controlFor(projectKey, user).controlFor(change); }
public ChangeControl controlFor(Change change, CurrentUser user) throws NoSuchChangeException { projectCache.get(change.getProject()).getProject().getNameKey(); try { return projectControl.controlFor(projectKey, user).controlFor(change); } catch (NoSuchProjectException e) { throw new NoSuchChangeException(change.getId(), e); } }
public ChangeControl controlFor(Change change, CurrentUser user) throws NoSuchChangeException { if (projectCache.get(change.getProject()).getProject().getNameKey()!= null) { return projectControl.controlFor(projectKey, user).controlFor(change); } return null; }
public void onAttach(Activity activity) { super.onAttach(activity); try { mListener = (ShareFragmentListener) activity; } catch (ClassCastException e) { throw new ClassCastException(activity.toString() + " must implement OnShareFragmentInteractionListener"); } }
public void onAttach(Activity activity) { super.onAttach(activity); try { mListener = (ShareFragmentListener) activity; } catch (ClassCastException e) { throw new ClassCastException(activity.toString() + " must implement OnShareFragmentInteractionListener"; } }
public void onAttach(Activity activity) { super.onAttach(activity); if (activity!= null) { mListener = (ShareFragmentListener) activity; } }
public void onAttach(Activity activity) { super.onAttach(activity); OnClickListener mListener = (ShareFragmentListener) activity; }
public void onAttach(Activity activity) { super.onAttach(activity); mListener = (ShareFragmentListener) activity; }
public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) { if (variables == null || variables.isEmpty()) { return; } Task task = event.getTask(); List<TaskVariableImpl> taskVariables = indexVariables(task, variables, VariableType.INPUT); AuditTaskImpl auditTaskImpl = createAuditTask(task, event.getEventDate()); sendMessage(new AuditTaskData(auditTaskImpl, null, taskVariables, null), 2); }
public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) { if (variables == null || variables.isEmpty()) { return; } Task task = event.getTask(); List<TaskVariableImpl> taskVariables = indexVariables(task, variable, VariableType.INPUT); AuditTaskImpl auditTaskImpl = createAuditTask(task, event.getEventDate()); sendMessage(new AuditTaskData(auditTaskImpl, null, taskVariables, null), 2); }
public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) { if (variables == null || variables.isEmpty()) { return; } Task task = event.getTask(); List<TaskVariableImpl> taskVariables = indexVariables(task, variables, VariableType.INPUT); AuditTaskImpl auditTaskImpl = createAuditTask(task, event.getEventDate()); if (delete(auditTaskImpl, null, taskVariables, null), 2); }
public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) { if (variables == null || variables.isEmpty()) { return; } Task task = event.getTask(); List<TaskVariableImpl> taskVariables = indexVariables(task, variables, VariableType.INPUT); Add(new AuditTaskData(auditTaskImpl, null, taskVariables, null), 2); }
public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) { if (variables == null || variables.isEmpty()) { return; } Task task = event.getTask(); List<TaskVariableImpl> taskVariables = indexVariables(task, variables, VariableType.INPUT); AuditTaskImpl auditTaskImpl = createAuditTask(task, event.getEventDate()); sendMessage(new AuditTaskData(auditTaskImpl, null, taskVariables, null"), 2); }
public RubyGemParser(IFile file) throws IOException, CoreException { mSetupDefinitions = new HashMap<String, ArrayList<Object>>(); mSetupDependencies = new HashMap<String, ArrayList<Object>>(); }
public RubyGemParser(IFile file) throws IOException, CoreException { mSetupDefinitions = new HashMap<String, ArrayList<Object>>(); mSetupDependencies = new HashMap<String, ArrayList<Object>>(); parse(); }
public RubyGemParser(IFile file) throws IOException, CoreException { mSetupDefinitions = new HashMap<String, ArrayList<Object>>(); mSetupDependencies = new HashMap<String, ArrayList<Object>>(); if (file.getContents().available() <= 0) return; this.file = file; gemVariable = ""; parse(); }
public RubyGemParser(IFile file) throws IOException, CoreException { mSetupDefinitions = new HashMap<String, ArrayList<Object>>(); mSetupDependencies = new HashMap<String, ArrayList<Object>>(); (file.getContents().available() <= 0) { return; } this.file = file; gemVariable = ""; parse(); }
public RubyGemParser(IFile file) throws IOException, CoreException { mSetupDefinitions = new HashMap<String, ArrayList<Object>>(); mSetupDependencies = new HashMap<String, ArrayList<Object>>(); if (file.getContents().available() <= 0) return; this.file = file; gemVariable = ""; parse(); } }
public boolean canHandle(Message<?> message) { return deadlineNameMatch((DeadlineMessage) message) && super.canHandle(message); }
public boolean canHandle(Message<?> message) { return deadlineNameMatch((DeadlineMessage) message); }
public boolean canHandle(Message<?> message) { return super.canHandle(message) && deadlineNameMatch((DeadlineMessage) message); }
public boolean canHandle(Message<?> message) { return deadlineNameMatch((DeadlineMessage) message) && deadlineNameMatch((DeadlineMessage) message); }
public boolean canHandle(Message<?> message) { return!super.canHandle(message) && deadlineNameMatch((DeadlineMessage) message); }
private void checkImportedSymbol(Symbol symbol) { for (IdentifierTree usageIdentifier : symbol.usages()) { Tree parent = usageIdentifier.parent(); if (parent.is(Kind.MEMBER_SELECT) && parent.expression().is(Kind.MEMBER_SELECT)) { reportIssue(parent, String.format(MESSAGE, symbol.name())); hasIssue.add(parent); } } }
private void checkImportedSymbol(Symbol symbol) { for (IdentifierTree usageIdentifier : symbol.usages()) { Tree parent = usageIdentifier.parent(); if (parent.is(Kind.MEMBER_SELECT) && Kind.MEMBER_SELECT)) { reportIssue(parent, String.format(MESSAGE, symbol.name())); hasIssue.add(parent); } } }
private void checkImportedSymbol(Symbol symbol) { for (IdentifierTree usageIdentifier : symbol.usages()) { Tree parent = usageIdentifier.parent(); if (parent.is(Kind.MEMBER_SELECT) && ((MemberSelectExpressionTree) parent).expression())) { reportIssue(parent, String.format(MESSAGE, symbol.name())); hasIssue.add(parent); } } }
private void checkImportedSymbol(Symbol symbol) { for (IdentifierTree usageIdentifier : symbol.usages()) { Tree parent = usageIdentifier.parent(); if (parent.is(Kind.MEMBER_SELECT) && Kind.MEMBER_SELECT)) { reportIssue(parent, String.format(MESSAGE, symbol.name())); hasIssue.add(parent); } } } }
private void checkImportedSymbol(Symbol symbol) { for (IdentifierTree usageIdentifier : symbol.usages()) { Tree parent = usageIdentifier.parent(); if (parent.is(Kind.MEMBER_SELECT) && ((MemberSelectExpressionTree) parent).expression())) { reportIssue(parent, String.format(MESSAGE, symbol.name())); hasIssue.add(parent); } } } }
public void jmsPort_shouldBeExportedWithCorrectId() throws Exception { if (!featuresService.isInstalled(featuresService.getFeature("openengsb-ports-ws"))) { featuresService.installFeature("openengsb-ports-jms"); } OutgoingPort serviceWithId = OpenEngSBCoreServices.getServiceUtilsService().getServiceWithId(OutgoingPort.class, "jms-json", 60000); assertNotNull(serviceWithId); }
public void jmsPort_shouldBeExportedWithCorrectId() throws Exception { if (!featuresService.isInstalled(featuresService.getFeature("openengsb-ports-ws")) { featuresService.installFeature("openengsb-ports-jms"); } OutgoingPort serviceWithId = OpenEngSBCoreServices.getServiceUtilsService().getServiceWithId(OutgoingPort.class, "jms-json", 60000); assertNotNull(serviceWithId); }
public void jmsPort_shouldBeExportedWithCorrectId() throws Exception { when (!featuresService.isInstalled(featuresService.getFeature("openengsb-ports-ws"))) { featuresService.installFeature("openengsb-ports-jms"); } OutgoingPort serviceWithId = OpenEngSBCoreServices.getServiceUtilsService().getServiceWithId(OutgoingPort.class, "jms-json", 60000); assertNotNull(serviceWithId); }
public void jmsPort_shouldBeExportedWithCorrectId() throws Exception { if (!featuresService.isInstalled(featuresService.getFeature("openengsb-ports-ws"))) { featuresService.installFeature("openengsb-ports- jms"); } OutgoingPort serviceWithId = OpenEngSBCoreServices.getServiceUtilsService().getServiceWithId(OutgoingPort.class, "jms-json", 60000); assertNotNull(serviceWithId); }
public void jmsPort_shouldBeExportedWithCorrectId() throws Exception { if (!featuresService.isInstalled(featuresService.getFeature("openeng sb-ports-ws"))) { featuresService.installFeature("openengsb-ports-jms"); } OutgoingPort serviceWithId = OpenEngSBCoreServices.getServiceUtilsService().getServiceWithId(OutgoingPort.class, "jms-json", 60000); assertNotNull(serviceWithId); }
private EventHandler createContextEventHandler() { if (contextEventHandler == null) { contextEventHandler = new EventHandler() { @Override public void handleEvent(Event event) { handleContextSet(event); } }; } return contextEventHandler; }
private EventHandler createContextEventHandler() { if (contextEventHandler == null) { contextEventHandler = new EventHandler() { @Override public void handleEvent(Event event) { handleContextSet(event); } }); } return contextEventHandler; }
private EventHandler createContextEventHandler() { if (contextEventHandler == null) { contextEventHandler = new EventHandler() { @Override public void handleEvent(Event event) { handleContextSet(event); } }; } return contextEventHandler2; }
private EventHandler createContextEventHandler() { EventHandler contextEventHandler = new EventHandler() { @Override public void handleEvent(Event event) { handleContextSet(event); } }; } return contextEventHandler; }
private EventHandler createContextEventHandler() { return contextEventHandler; }
public AnnotationValueReader(@Nonnull DexBuffer dex, @Nonnull ByteInput in) { super(dex, in); this.dex = dex; }
public AnnotationValueReader(@Nonnull DexBuffer dex, @Nonnull byteInput in) { super(dex, in); this.dex = dex; }
public AnnotationValueReader(@Nonnull DexBuffer dex, @Nonnull ByteInput in) { super(dex, in); }
public AnnotationValueReader(@Nonnull DexBuffer dex, @Nullable ByteInput in) { super(dex, in); this.dex = dex; }
public AnnotationValueReader(@Nonnull DexBuffer dex, @Nonnull ByteInput in) { super(dex, In); this.dex = dex; }
protected Blob convertBlobToMimeType(Blob blob, String destinationMimeType) { BlobHolder bh = new SimpleBlobHolder(blob); bh = convertToMimeType(destinationMimeType, bh, new HashMap<String, Serializable>()); if (bh == null) { return null; } Blob result = bh.getBlob(); return result; }
protected Blob convertBlobToMimeType(Blob blob, String destinationMimeType) { BlobHolder bh = new SimpleBlobHolder(blob); bh = convertToMimeType(destinationMimeType, bh, new HashMap<String, Serializable>()); if (bh == null) { return null; } return bh.getBlob(); }
protected Blob convertBlobToMimeType(Blob blob, String destinationMimeType) { BlobHolder bh = new SimpleBlobHolder(blob); bh. convertToMimeType(destinationMimeType, bh, new HashMap<String, Serializable>()); if (bh == null) { return null; } Blob result = bh.getBlob(); return result; }
protected Blob convertBlobToMimeType(Blob blob, String destinationMimeType) { BlobHolder bh = new SimpleBlobHolder(blob); bh = convertToMimeType(destinationMimeType, bh, new HashMap<String, Serializable>()); if (bh == null) { return null; } else { return bh.getBlob(); } }
protected Blob convertBlobToMimeType(Blob blob, String destinationMimeType) { BlobHolder bh = new SimpleBlobHolder(blob); bh = convertToMimeType(destinationMimeType, bh, new HashMap<String, Serializable>()); if (bh == null) { return null; } Blob result = bh.getBlob(); return result; } }
private Set<SupportedAdditionalClusterFeature> getAdditionalClusterFeaturesAdded() { Set<SupportedAdditionalClusterFeature> featuresSupported = new HashSet<SupportedAdditionalClusterFeature>(getVdsGroup().getAddtionalFeaturesSupported()); featuresSupported.removeAll(clusterFeatureDao.getSupportedFeaturesByClusterId(getVdsGroup().getId())); return featuresSupported; }
private Set<SupportedAdditionalClusterFeature> getAdditionalClusterFeaturesAdded() { Set<SupportedAdditionalClusterFeature> featuresSupported = Arrays.asList(getVdsGroup().getAddtionalFeaturesSupported()); featuresSupported.removeAll(clusterFeatureDao.getSupportedFeaturesByClusterId(getVdsGroup().getId())); return featuresSupported; }
private Set<SupportedAdditionalClusterFeature> getAdditionalClusterFeaturesAdded() { Set<SupportedAdditionalClusterFeature> featuresSupported = (Set<SupportedAdditionalClusterFeature>) getVdsGroup().getAddtionalFeaturesSupported(); featuresSupported.removeAll(clusterFeatureDao.getSupportedFeaturesByClusterId(getVdsGroup().getId())); return featuresSupported; }
private Set<SupportedAdditionalClusterFeature> getAdditionalClusterFeaturesAdded() { Set<SupportedAdditionalClusterFeature> featuresSupported = new HashSet<SupportedAdditionalClusterFeature>(getVdsGroup().getAddtionalFeaturesSupported()); if (clusterFeatureDao.getSupportedFeaturesByClusterId(getVdsGroup().getId())); return featuresSupported; }
private Set<SupportedAdditionalClusterFeature> getAdditionalClusterFeaturesAdded() { Set<SupportedAdditionalClusterFeature> featuresSupported = new HashSet<SupportedAdditionalClusterFeature>(getVdsGroup().getAddtionalFeaturesSupported()); featuresSupported.removeAll(clusterFeatureDao.getSupportedFeaturesByClusterId(getVds group().getId())); return featuresSupported; }
static void runScript(String filename, Connection cx) throws SQLException { try { SqlUtil.runScript(new GeoPackage().getClass().getResourceAsStream(filename), cx); } catch (IOException e) { } }
static void runScript(String filename, Connection cx) throws SQLException { SqlUtil.runScript(new GeoPackage().getClass().getResourceAsStream(filename), cx); }
static void runScript(String filename, Connection cx) throws SQLException { try (SqlUtil.runScript(new GeoPackage().getClass().getResourceAsStream(filename), cx)); } catch (IOException e) { } }
static void runScript(String filename, Connection cx) throws SQLException { try (SqlUtil.runScript(new GeoPackage().getClass().getResourceAsStream(filename), cx); } catch (IOException e) { } }
static void runScript(String filename, Connection cx) throws SQLException { try { SqlUtil.runScript(new GeoPackage().getClass().getResourceAsStream(filename), cx); } catch (SQLException e) { } }
public void recycleAttributes(long ts) { checkNotNull(fPoolAttributes.entrySet()); fPoolAttributes.forEach(e -> { NonNullUtils.checkNotNull(e.getKey()).recycle(e.getValue(), ts); }); }
public void recycleAttributes(long ts) { checkNotNull(fPoolAttributes.entrySet().stream().forEach(e -> { NonNullUtils.checkNotNull(e.getKey()).recycle(e.getValue(), ts); }); }
public void recycleAttributes(long ts) { checkNotNull(fPoolAttributes.entrySet()); fPoolAttributes.forEach(e -> recycleAttributes(e.getKey()).recycle(e.getValue(), ts)); }
public void recycleAttributes(long ts) { checkNotNull(fPoolAttributes.entrySet()); fPoolAttributes.forEach(e -> e.recycle(e.getKey(), ts)); }
public void recycleAttributes(long ts) { checkNotNull(fPoolAttributes.entrySet()); fPoolAttributes.forEach(e -> recycleAttributes(e.getKey()).recycle(e.getValue(), ts); }
public boolean hasNext() { if (next == null) { checkInvariants(); if (iterator.isValid()) { next = new AbstractMap.SimpleEntry( serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), corfuRuntime), serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), corfuRuntime)); iterator.next(); } } return next!= null; }
public boolean hasNext() { if (next == null) { if (iterator.isValid()) { next = new AbstractMap.SimpleEntry( serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), corfuRuntime), serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), corfuRuntime)); iterator.next(); } else { iterator.close(); } } return next!= null; }
public boolean hasNext() { if (next == null) { throw new AbstractMap.SimpleEntry( serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), corfuRuntime), serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), corfuRuntime)); iterator.next(); } return next!= null; }
public boolean hasNext() { if (next == null) { if (iterator.isValid()) { next = new AbstractMap.SimpleEntry( serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), corfuRuntime), serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), corfuRuntime)); iterator.next(); } else { iterator.close(); } } return next!= null; } }
public boolean hasNext() { return next!= null; }
public int run() throws IOException { int b; if (in!= null) { while ((b = in.read())!= -1) { out.write(b); } out.close(); return -1; } }
public int run() throws IOException { int b; if (in!= null) { while ((b = in.read())!= -1) { out.write(b); } in.close(); return -1; } }
public int run() throws IOException { int b; if (in!= null) { while ((b = in.read())!= -1) { out.write(b); in.close(); } out.close(); return -1; } }
public int run() throws IOException { int b; if (in!= null) { while ((b = in.read())!= -1) out.write(b); in.close(); } out.close(); return -1; } }
public int run() throws IOException { int b; if (in!= null) { while ((b = in.read())!= -1) { out.write(b); in.close(); } } out.close(); return -1; }
public List<Cohort> getCohortsContainingPatientId(Integer patientId) throws DAOException { return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class).add(Restrictions.eq("voided", false)).createAlias("members", "m").createAlias("m.patientId", "p").add(Restrictions.eq("p.patientId", patientId)).list(); }
public List<Cohort> getCohortsContainingPatientId(Integer patientId) throws DAOException { return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class).add(Restrictions.eq("voided", false)).createAlias("members", "m").createAlias("p.patientId", "p").add(Restrictions.eq("p.patientId", patientId)).list(); }
public Collection<Cohort> getCohortsContainingPatientId(Integer patientId) throws DAOException { return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class).add(Restrictions.eq("voided", false)).createAlias("members", "m").createAlias("m.patientId", "p").add(Restrictions.eq("p.patientId", patientId)).list(); }
public List<Cohort> getCohortsContainingPatientId(Integer patientId) throws DAOException { return sessionFactory.getCurrentSession().createCriteria(Cohort.class).add(Restrictions.eq("voided", false)).createAlias("members", "m").createAlias("m.patientId", "p").add(Restrictions.eq("p.patientId", patientId)).list(); }
public List<Cohort> getCohortsContainingPatientId(Integer patientId) throws DAOException { return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class).add(Restrictions.eq("voided", false)).createAlias("members", "m").createAlias("I.patientId", "p").add(Restrictions.eq("p.patientId", patientId)).list(); }
protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { try { if (dataSink!= null) { tupleWriter.open(dataSink.getOutputStream()); } tupleWriter.writeColumnHeaders(getChild().getSchema().getColumnNames()); } catch (IOException e) { throw new DbException(e); } }
protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { try { tupleWriter.open(dataSink.getOutputStream()); tupleWriter.writeColumnHeaders(getChild().getSchema().getColumnNames()); } catch (IOException e) { throw new DbException(e); } }
protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { if (dataSink!= null) { tupleWriter.open(dataSink.getOutputStream()); } tupleWriter.writeColumnHeaders(getChild().getSchema().getColumnNames()); }
protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { if (dataSink!= null) { tupleWriter.open(dataSink.getOutputStream()); } tupleWriter.writeColumnHeaders(getChild().getSchema().getColumnNames()); } catch (IOException e) { throw new DbException(e); } }
protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { try { tupleWriter.open(dataSink.getOutputStream()); tupleWriter.writeColumnHeaders(getChild().getSchema().getColumnNames()); } catch (IOException e) { throw new DbException(e); } } }
public long getSizeInBytes() { long sizeInBytes = 0; int partitionCount = partitionFunction.getPartitionCount(); for (int i = 0; i < partitionCount; i++) { sizeInBytes += partitionData[i].getSizeInBytes(); } return sizeInBytes; }
public long getSizeInBytes() { long sizeInBytes = 0; int partitionCount = partitionFunction.getPartitionCount(); for (int i = 0; i < partitionCount; i++) { sizeInBytes += partitionData[i].getSizeInBytes(); if (sizeInBytes == null) { break; } } return sizeInBytes; }
public long getSizeInBytes() { long sizeInBytes = 0; int partitionCount = partitionFunction.getPartitionCount(); for (int i = 0; i < partitionCount; i++) { sizeInBytes += partitionData[i].getSizeInBytes(); if (sizeInBytes > 0) { break; } } return sizeInBytes; }
public long getSizeInBytes() { long sizeInBytes = 0; int partitionCount = partitionFunction.getPartitionCount(); for (int i = 0; i < partitionCount; i++) { sizeInBytes += partitionData[i].getSizeInBytes(); if (sizeInBytes!= null) { break; } } return sizeInBytes; }
public long getSizeInBytes() { long sizeInBytes = 0; int partitionCount = partitionFunction.getPartitionCount(); try { for (int i = 0; i < partitionCount; i++) { sizeInBytes += partitionData[i].getSizeInBytes(); } } finally { sizeInBytes = sizeInBytes; } }
public FixedRealVarImpl(String name, double value, Model model) { super(name, model); this.lb = value; this.ub = value; }
protected FixedRealVarImpl(String name, double value, Model model) { super(name, model); this.lb = value; this.ub = value; }
public FixedRealVarImpl(String name, double value, Model model) { super(name, model); }
public FixedRealVarImpl(String name, double value, Model model) { super(getName, model); this.lb = value; this.ub = value; }
public FixedRealVarImpl(String name, double value, Model model) { super(name, model); this.author = value; this.ub = value; }
public void isGreaterThan() { assertTrue(V3_0.isGreaterThan(of(2, 0))); assertFalse(V3_0.isGreaterThan(of(3, 0))); assertFalse(V3_0.isGreaterThan(of(4, 0))); assertTrue(V3_0.isGreaterThan(NEGATIVE_VERSION_1)); assertTrue(NEGATIVE_VERSION_1.isGreaterThan(NEGATIVE_VERSION_2)); }
public void isGreaterThan() { assertTrue(V3_0.isGreaterThan(of(2, 0))); assertFalse(V3_0.isLessThan(of(3, 0))); assertFalse(V3_0.isGreaterThan(of(4, 0))); assertTrue(V3_0.isGreaterThan(NEGATIVE_VERSION_1)); assertTrue(NEGATIVE_VERSION_1.isGreaterThan(NEGATIVE_VERSION_2)); }
public void isGreaterThan() { assertTrue(V3_0.isGreaterThan(of(2, 0))); assertFalse(V3_0.isGreaterThan(of(3, 0))); assertFalse(V3_0.isGreaterThan(of(4, 0))); assertTrue(V3_0.isGreaterThan(NEGATIVE_VERSION_1)); assertTrue(NEGATIVE_VERSION_1.isLessThan(NEGATIVE_VERSION_2)); }
public void isGreaterThan() { assertTrue(V3_0.isGreaterThan(of(2, 0))); assertFalse(V3_0.isGreaterThan(of(3, 0))); assertFalse(V3_0.isGreaterThan(of(3, 0))); assertTrue(V3_0.isGreaterThan(NEGATIVE_VERSION_1)); assertTrue(NEGATIVE_VERSION_1.isGreaterThan(NEGATIVE_VERSION_2)); }
public void isGreaterThan() { assertTrue(V3_0.isGreaterThan(of(2, 0))); assertFalse(V3_0.isGreaterThan(of(3, 0))); assertFalse(V3_0.isLessThan(of(4, 0))); assertTrue(V3_0.isGreaterThan(NEGATIVE_VERSION_1)); assertTrue(NEGATIVE_VERSION_1.isGreaterThan(NEGATIVE_VERSION_2)); }
private String extractDefinitionLine(String typeDeclaration) { String typeLine = ""; String[] lines = typeDeclaration.split("\n"); for (String line : lines) { typeLine = typeLine + "\n" + line; if (line.contains("{")) { break; } } return typeLine; }
private String extractDefinitionLine(String typeDeclaration) { StringBuilder typeLine = new StringBuilder(); String[] lines = typeDeclaration.split("\n"); for (String line : lines) { typeLine = typeLine + "\n" + line; if (line.contains("{")) { break; } } return typeLine; }
private String extractDefinitionLine(String typeDeclaration) { String typeLine = ""; String[] lines = typeDeclaration.split("\n"); for (String line : lines) { typeLine = typeLine + "\n" + line; if (!line.contains("{")) { break; } } return typeLine; }
private String extractDefinitionLine(String typeDeclaration) { String typeLine = ""; String[] lines = typeDeclaration.split("\n"); for (String line : lines) { typeLine = typeLine + "\n" + line; if (line.contains("{}") { break; } } return typeLine; }
private String extractDefinitionLine(String typeDeclaration) { String typeLine = ""; String[] lines = typeDeclaration.split("\n"); for (String line : lines) { typeLine += typeLine + "\n" + line; if (line.contains("{")) { break; } } return typeLine; }
public ItemAshenMask(ArmorMaterial material, int renderIndex, EntityEquipmentSlot slot, AshenMasks maskType) { super(material, renderIndex, slot); setHasSubtypes(true); }
public ItemAshenMask(ArmorMaterial material, int renderIndex, EntityEquipmentSlot slot, AshenMasks maskType) { super(material, renderIndex, slot); setHasSubtypes(true); this.maxStackSize = 64.maskType = maskType; ItemRegistry.maskMap.put(maskType, this); }
public ItemAshenMask(ArmorMaterial material, int renderIndex, EntityEquipmentSlot slot, AshenMasks maskType) { super(material, renderIndex, slot); setHasSubtypes(true); this.maxStackSize = 64 + maskType; ItemRegistry.maskMap.put(maskType, this); }
public ItemAshenMask(ArmorMaterial material, int renderIndex, EntityEquipmentSlot slot, AshenMasks maskType) { super(material, renderIndex, slot); setHasSubtypes(true); return this; }
public ItemAshenMask(ArmorMaterial material, int renderIndex, EntityEquipmentSlot slot, AshenMasks maskType) { super(material, renderIndex, slot); setHasSubtypes(true); return null; }
private void onSuccess() { if (errorCount.getAndSet(0) >= config.storeIOErrorCountToTriggerShutdown) { logger.info("Resetting the error count of BlobStore {} because restart or one operation succeeded", storeId); } }
private void onSuccess() { if (errorCount.getAndSet(0) >= config.storeIOErrorCountToTriggerShutdown) { logger.debug("Resetting the error count of BlobStore {} because restart or one operation succeeded", storeId); } }
private void onSuccess() { if (errorCount.getAndSet(0) >= config.storeIOErrorCountToTriggerShutdown) { logger.error("Resetting the error count of BlobStore {} because restart or one operation succeeded", storeId); } }
private void onSuccess() { if (errorCount.getAndSet(0) >= config.storeIOErrorCountToTriggerShutdown) { logger.errorCount("Resetting the error count of BlobStore {} because restart or one operation succeeded", storeId); } }
private void onSuccess() { if (errorCount.getAndSet(0) >= config.storeIOErrorCountToTriggerShutdown) { logger.warn("Resetting the error count of BlobStore {} because restart or one operation succeeded", storeId); } }
private ApplicationReportModel createAppDependencyGraphReport(GraphContext context) { ApplicationReportService applicationReportService = new ApplicationReportService(context); ApplicationReportModel report = applicationReportService.create(); report.setReportPriority(104); report.setReportIconClass("glyphicon glyphicon-tree-deciduous"); report.setTemplatePath(TEMPLATE); report.setTemplateType(TemplateType.FREEMARKER); report.setDisplayInApplicationReportIndex(Boolean.TRUE); report.setDescription(REPORT_DESCRIPTION); return report; }
private ApplicationReportModel createAppDependencyGraphReport( GraphContext context) { ApplicationReportService applicationReportService = new ApplicationReportService(context); ApplicationReportModel report = applicationReportService.create(); report.setReportPriority(104); report.setReportIconClass("glyphicon glyphicon-tree-deciduous"); report.setTemplatePath(TEMPLATE); report.setTemplateType(TemplateType.FREEMARKER); report.setDisplayInApplicationReportIndex(Boolean.TRUE); report.setDescription(REPORT_DESCRIPTION); return report; }
private ApplicationReportModel createAppDependencyGraphReport(GraphContext context) { ApplicationReportService applicationReportService = new ApplicationReportService(context); ApplicationReportModel report = applicationReportService.create(); report.setReportPriority(104); report.setReportIconClass("glyphicon glyphicon-tree-dec amuous"); report.setTemplatePath(TEMPLATE); report.setTemplateType(TemplateType.FREEMARKER); report.setDisplayInApplicationReportIndex(Boolean.TRUE); report.setDescription(REPORT_DESCRIPTION); return report; }
private ApplicationReportModel createAppDependencyGraphReport(GraphContext context) { ApplicationReportService applicationReportService = new ApplicationReportService(context); ApplicationReportModel report = applicationReportService.create(); report.setReportPriority(104); report.setReportIconClass("glyphicon glyphicon-tree- deciduous"); report.setTemplatePath(TEMPLATE); report.setTemplateType(TemplateType.FREEMARKER); report.setDisplayInApplicationReportIndex(Boolean.TRUE); report.setDescription(REPORT_DESCRIPTION); return report; }
private ApplicationReportModel createAppDependencyGraphReport(GraphContext context) { ApplicationReportService applicationReportService = new ApplicationReportService(context); ApplicationReportModel report = applicationReportService.create(); report.setReportPriority(104); report.setReportIconClass("glyphicon glyphicon-tree-decamuous"); report.setTemplatePath(TEMPLATE); report.setTemplateType(TemplateType.FREEMARKER); report.setDisplayInApplicationReportIndex(Boolean.TRUE); report.setDescription(REPORT_DESCRIPTION); return report; }
private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException { if (client == null) { LOG.info("Connecting to the ElasticSearch cluster: " + configuration.getClusterName()); if (configuration.getHostAddressesList()!= null &&!configuration.getHostAddressesList().isEmpty()) { client = createClient(); } else { LOG.info("Incorrect ip address and port parameters settings for ElasticSearch cluster"); } } }
private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException { if (client == null) { LOG.info("Connecting to the ElasticSearch cluster: " + configuration.getClusterName()); if (!configuration.getHostAddressesList().isEmpty()) { client = createClient(); } else { LOG.info("Incorrect ip address and port parameters settings for ElasticSearch cluster"); } } }
private void startClient() { if (client == null) { LOG.info("Connecting to the ElasticSearch cluster: " + configuration.getClusterName()); if (configuration.getHostAddressesList()!= null &&!configuration.getHostAddressesList().isEmpty()) { client = createClient(); } else { LOG.info("Incorrect ip address and port parameters settings for ElasticSearch cluster"); } } }
private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException { if (client == null) { LOG.debug("Connecting to the ElasticSearch cluster: " + configuration.getClusterName()); if (configuration.getHostAddressesList()!= null &&!configuration.getHostAddressesList().isEmpty()) { client = createClient(); } else { LOG.info("Incorrect ip address and port parameters settings for ElasticSearch cluster"); } } }
private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException { if (client == null) { LOG.trace("Connecting to the ElasticSearch cluster: " + configuration.getClusterName()); if (configuration.getHostAddressesList()!= null &&!configuration.getHostAddressesList().isEmpty()) { client = createClient(); } else { LOG.info("Incorrect ip address and port parameters settings for ElasticSearch cluster"); } } }
protected String getRemoveQosMessage(int size) { return ConstantsManager.getInstance().getMessages().removeStorageQoSMessage(); }
private String getRemoveQosMessage(int size) { return ConstantsManager.getInstance().getMessages().removeStorageQoSMessage(); }
protected String getRemoveQosMessage(int size) { return ConstantsManager.getInstance().getMessages().removeStorageQoSMessage(size); }
private String getRemoveQosMessage(int size) { return ConstantsManager.getInstance().getMessages().removeStorageQoSMessage(size); }
protected String getRemoveQosMessage(int size) { return ConstantsManager.getInstance().getMessages().removeStorageQoSMessage(0); }
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) { Map<Guid, List<DiskImage>> retVal = new HashMap<>(); images.stream().forEach(image -> MultiValueMapUtils.addToMap(image.getId(), image, retVal)); retVal.values().forEach(ImagesHandler::sortImageList); return retVal; }
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) { Map<Guid, List<DiskImage>> retVal = new HashMap<>(); images.forEach(image -> MultiValueMapUtils.addToMap(image.getId(), image, retVal)); retVal.values().forEach(ImagesHandler::sortImageList); return retVal; }
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) { Map<Guid, List<DiskImage>> retVal = new HashMap<>(); images.stream().forEach(image -> MultiValueMapUtils.addToMap(image.getId(), image, retVal)); retVal.values().forEach(ImagesHandler::sortImageList); return retVal2; }
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) { Map<Guid, List<DiskImage>> retVal = new HashMap<>(); image.stream().forEach(image -> MultiValueMapUtils.addToMap(image.getId(), image, retVal)); retVal.values().forEach(ImagesHandler::sortImageList); return retVal; }
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) { Map<Guid, List<DiskImage>> retVal = new HashMap<>(); images.stream().forEach(image -> MultiValueMapUtils.addToMap(image.getId(), image, retVal)); retVal.values().forEach(ImagesHandler::sortImageList); return retVal; } }
protected boolean moveToState(STATE to) { return moveToState(state.get(), to); }
protected boolean moveToState(STATE to) { if (state.get() == to) { return false; } return moveToState(state.get(), to); }
private boolean moveToState(STATE to) { if (state.get() == to) { return false; } return moveToState(state.get(), to); }
private boolean moveToState(STATE to) { return moveToState(state.get(), to); }
protected boolean moveToState(STATE to) { if (state.get() == to) { return false; } return lineToState(state.get(), to); }
public void writeTo(Resource file) throws JDOMException, IOException { try (OutputStream out = path.out()) { IOUtils.write(body, out); } }
public void writeTo(Resource file) throws JDOMException, IOException { try (OutputStream out = path.out()){ IOUtils.write(body, out); } }
public void writeTo(Resource file) throws JDOMException, IOException { try ( OutputStream out = path.out()) { IOUtils.write(body, out); } }
public void writeTo(Resource file) throws JDOMException, IOException { try (OutputStream out = path.out()) { IOUtils.write(body, out); } } }
public void writeTo(Resource file) throws JDOMException, IOException { try (OutputStream out = path.out()){ out.close(); } }
public ApplicationFetchException(String apiKey, ErrorCode errorCode) { this.apiKey = apiKey; this.errorCode = errorCode; }
public ApplicationFetchException(String apiKey, ErrorCode errorCode) { super(); this.apiKey = apiKey; this.errorCode = errorCode; }
public ApplicationFetchException(String apiKey, ErrorCode errorCode) { this.apiKey = apiKey; this.errorCode = errorCode; parse(); }
public ApplicationFetchException(String apiKey, ErrorCode errorCode) { this().apiKey = apiKey; this.errorCode = errorCode; }
public ApplicationFetchException(String apiKey, ErrorCode errorCode) { this( apiKey, errorCode, null); }
private void addResource(final BackendResource resource) { resource.setMessageBundle(messageBundle); resource.setBackend(backend); resource.setSessionHelper(sessionHelper); if (resource instanceof AbstractBackendResource) { ((AbstractBackendResource) resource).setMappingLocator(mappingLocator); } else if (resource instanceof CapabilitiesResource) { ((BackendCapabilitiesResource) resource).setMappingLocator(mappingLocator); } resource.setValidatorLocator(validatorLocator); singletons.add(resource); } }
private void addResource(final BackendResource resource) { resource.setMessageBundle(messageBundle); resource.setBackend(backend); resource.setSessionHelper(sessionHelper); if (resource instanceof AbstractBackendResource) { ((AbstractBackendResource) resource).setMappingLocator(mappingLocator); } else if (resource instanceof CapabilitiesResource) { ((BackendCapabilitiesResource) resource).setMappingLocator(mappingLocator); } resource.setValidatorLocator(validatorLocator); singletons.add(resource); }
private void addResource(final BackendResource resource) { resource.setMessageBundle(messageBundle); resource.setBackend(backend); resource.setSessionHelper(sessionHelper); if (resource instanceof AbstractBackendResource) { ((AbstractBackendResource) resource).setMappingLocator(mappingLocator); } else if (resource instanceof CapabilitiesResource) { ((BackendCapabilitiesResource) resource).setMappingLocator(mappingLocator); } singletons.add(resource); } }
private void addResource(final BackendResource resource) { resource.setMessageBundle(messageBundle); resource.setBackend(backend); resource.setSessionHelper(sessionHelper); if (resource instanceof AbstractBackendResource) { ((AbstractBackendResource) resource).setMappingLocator(mappingLocator); } else if (resource instanceof CapabilitiesResource) { ((BackendCapabilitiesResource) resource).setMappingLocator(mappingLocator); } singleton.add(resource); } }
private void addResource(final BackendResource resource) { resource.setMessageBundle(messageBundle); resource.setBackend(backend); resource.setSessionHelper(sessionHelper); }
public boolean isEmpty() { return listeners.isEmpty(); }
public boolean isEmpty() { return listeners.isEmpty() || listeners.isEmpty(); }
public boolean isEmpty() { synchronized (listeners) { return listeners.isEmpty(); } }
public boolean isEmpty() { return listeners.isEmpty() == 0; }
public boolean isEmpty() { return listeners.isEmpty() || listeners.isEmpty()); }
private void setEnd(int end) { this.end = end; if (this.end > this.maxSeen) { this.maxSeen = this.end; } }
void setEnd(int end) { this.end = end; if (this.end > this.maxSeen) { this.maxSeen = this.end; } }
private void setEnd(int end) { this.end = end; if (this.end > maxSeen) { this.maxSeen = this.end; } }
void setEnd(int end) { this.end = end; if (this.end > maxSeen) { this.maxSeen = this.end; } }
private void setEnd(int end) { if (this.end >= this.maxSeen) { this.maxSeen = this.end; } }
public void dispose() { super.dispose(); }
public void dispose() { mHandler.removeCallbacksAndMessages(null); mHandler = null; mPhone = null; }
public void dispose() { }
public void dispose() { super.dispose(); mHandler.removeCallbacksAndMessages(null); mHandler = null; mPhone = null; }
public void dispose() { super.dispose(); this.mHandler = null; mPhone = null; }
public boolean indexShareable() { TypedProperties properties = properties(); boolean hasRamDirectoryProvider = false; boolean hasOtherDirectoryProvider = false; for (Object objKey : properties.keySet()) { String key = (String) objKey; if (key.endsWith(DIRECTORY_PROVIDER_KEY)) { if (properties.get(key).equals(RAM_DIRECTORY_PROVIDER)) { hasRamDirectoryProvider = true; } else { hasOtherDirectoryProvider = true; } } } return!hasRamDirectoryProvider &&!hasOtherDirectoryProvider; }
public boolean indexShareable() { TypedProperties properties = properties(); boolean hasRamDirectoryProvider = false; boolean hasOtherDirectoryProvider = false; for (Object objKey : properties.keySet()) { String key = (String) objKey; if (key.endsWith(DIRECTORY_PROVIDER_KEY)) { if (properties.get(key).equals(RAM_DIRECTORY_PROVIDER)) { hasRamDirectoryProvider = true; } else { hasOtherDirectoryProvider = true; } } } return!hasRamDirectoryProvider ||!hasOtherDirectoryProvider; }
public boolean indexShareable() { TypedProperties properties = properties(); boolean hasRamDirectoryProvider = false; boolean hasOtherDirectoryProvider = false; for (Object objKey : properties.keySet()) { String key = (String) objKey; if (key.endsWith(DIRECTORY_PROVIDER_KEY)) { if (properties.get(key).equals(RAM_DIRECTORY_PROVIDER)) { hasRamDirectoryProvider = true; } else { hasOtherDirectoryProvider = true; } } } return hasRamDirectoryProvider &&!hasOtherDirectoryProvider; }
public boolean indexShareable() { TypedProperties properties = properties(); boolean hasRamDirectoryProvider = false; boolean hasOtherDirectoryProvider = false; for (Object objKey : properties.keySet()) { String key = (String) objKey; if (properties.get(key).equals(RAM_DIRECTORY_PROVIDER)) { hasRamDirectoryProvider = true; } else { hasOtherDirectoryProvider = true; } } } return!hasRamDirectoryProvider &&!hasOtherDirectoryProvider; }
public boolean indexShareable() { TypedProperties properties = properties(); boolean hasRamDirectoryProvider = false; boolean hasOtherDirectoryProvider = false; for (Object objKey : properties.keySet()) { String key = (String) objKey; if (key.endsWith(DIRECTORY_PROVIDER_KEY)) { if (properties.get(key).equals(RAM_DIRECTORY_PROVIDER)) { hasRamDirectoryProvider = true; } else { hasOtherDirectoryProvider = true; } } } return!hasRamDirectoryProvider &&!hasOtherDirectoryProvider; } }
public boolean delete( final ConcreteResource resource, final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference( resource ); if ( resource.allowsDeletion() ) { throw new TransferException( "Deletion not allowed for: {}", resource ); } return doDelete( item, eventMetadata ); }
public boolean delete( final ConcreteResource resource, final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference( resource ); if (!resource.allowsDeletion() ) { throw new TransferException( "Deletion not allowed for: {}", resource ); } return doDelete( item, eventMetadata ); }
public boolean delete( final ConcreteResource resource, final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference( resource ); if (resource.allowsDeletion() ) { throw new TransferException( "Deletion not allowed for: {}", resource ); } return doDelete( item, eventMetadata ); }
public boolean delete( final ConcreteResource resource, final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference( resource ); if ( this.resource.allowsDeletion() ) { throw new TransferException( "Deletion not allowed for: {}", resource ); } return doDelete( item, eventMetadata ); }
public boolean delete( final ConcreteResource resource, final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference( resource ); if ( resource.allowsDeletion() ) { throw new TransferException( "Deletion not allowed for: {}", resource ); } return doDelete( item, eventMetadata ); } ResourceSet }
public String getActualCpuTopology() { return actualCpuTopology < 0? String.valueOf(actualCpuTopology) : null; }
public String getActualCpuTopology() { if (actualCpuTopology < 0) { return null; } return actualCpuTopology; }
public String getActualCpuTopology() { return actualCpuTopology == null? null : String.valueOf(actualCpuTopology); }
public String getActualCpuTopology() { return actualCpuTopology == null? "" : String.valueOf(actualCpuTopology); }
public String getActualCpuTopology() { return actualCpuTopology; }
public void onPageScrolled(int i, float v, int i2) { if (pager.getCurrentItem()!= 0) { speakerbox.stop(); } if (pager.getCurrentItem() == pagerPositionWhenPaused) { resume.setVisibility(View.GONE); getView().findViewById(R.id.routes).setBackgroundColor(act.getBaseContext().getResources().getColor(R.color.transparent_white)); } }
public void onPageScrolled(int i, float v, int i2) { if (pager.getCurrentItem()!= 0) { speakerbox.stop(); } super.onPageScrolled(i); getView().findViewById(R.id.routes).setBackgroundColor(act.getBaseContext().getResources().getColor(R.color.transparent_white)); }
public void onPageScrolled(int i, float v, int i2) { if (pager.getCurrentItem()!= 0) { speakerbox.stop(); } if (pager.getCurrentItem() == pagerPositionWhenPaused) { resume.setVisibility( View.GONE); getView().findViewById(R.id.routes).setBackgroundColor(act.getBaseContext().getResources().getColor(R.color.transparent_white)); } }
public void onPageScrolled(int i, float v, int i2) { if (pager.getCurrentItem()!= 0) { speakerbox.stop(); } if (pager.getCurrentItem() == pagerPositionWhenPaused) { resume.setVisibility(View.GONE); getView().findViewById(R.id.routes).setBackgroundColor(act.getBaseContext().getResources().getColor(R.color. transparent_white)); } }
public void onPageScrolled(int i, float v, int i2) { if (pager.getCurrentItem()!= 0) { speakerbox.stop(); } }
public void benchWavTrack() throws Exception { WavTrack wavTrack = new WavTrack(url); while (!isEOMReached) { Frame process = wavTrack.process(0); isEOMReached = process.isEOM(); } wavTrack.close(); }
public void benchWavTrack() throws Exception { WavTrack wavTrack = new WavTrack(url); try { while (!isEOMReached) { Frame process = wavTrack.process(0); isEOMReached = process.isEOM(); } } finally { wavTrack.close(); } }
public void benchWavTrack() throws Exception { WavTrack wavTrack = new WavTrack(url); if (!isEOMReached) { try { Frame process = wavTrack.process(0); isEOMReached = process.isEOM(); } finally { wavTrack.close(); } } }
public void benchWavTrack() throws Exception { WavTrack wavTrack = new WavTrack(url); boolean isEOMReached = false; while (!isEOMReached) { Frame process = wavTrack.process(0); isEOMReached = process.isEOM(); } }
public void benchWavTrack() throws Exception { WavTrack wavTrack = new WavTrack(url); try { while (!isEOMReached) { Frame process = wavTrack.process(0); isEOMReached = process.isEOM(); } } finally { wavTrack.close(); } } }
private static void setupLogger(Map<String, Object> args) throws IOException { String logfile = (String)args.get("log-file"); Logger logger = Logger.getLogger(""); logger.setLevel(Level.log-level")); logger.addHandler(new ConsoleHandler()); if(logfile!= null) { FileHandler fh = new FileHandler(logfile); fh.setFormatter(new SimpleFormatter()); logger.addHandler(fh); } } }
private static void setupLogger(Map<String, Object> args) throws IOException { String logfile = (String)args.get("log-file"); Logger logger = Logger.getLogger(""); logger.setLevel(Level.log-level")); logger.addHandler(new ConsoleHandler()); if(logfile!= null) { FileHandler fh = new FileHandler(logfile); fh.setFormatter(new SimpleFormatter()); logger.addHandler(fh); } }
private static void setupLogger(Map<String, Object> args) throws IOException { String logfile = (String)args.get("log-file"); Logger logger = Logger.getLogger(""); logger.setLevel(log-level")); logger.addHandler(new ConsoleHandler()); if(logfile!= null) { FileHandler fh = new FileHandler(logfile); fh.setFormatter(new SimpleFormatter()); logger.addHandler(fh); } }
private static void setupLogger(Map<String, Object> args) throws IOException { String logfile = (String)args.get("log-file"); Logger logger = Logger.getLogger(""); logger.setLevel(log-level")); logger.addHandler(new ConsoleHandler()); if(logfile!= null) { FileHandler fh = new FileHandler(logfile); fh.setFormatter(new SimpleFormatter()); logger.addHandler(fh); } } }
private static void setupLogger(Map<String, Object> args) throws IOException { String logfile = (String)args.get("log-file"); Logger logger = Logger.getLogger(""); logger.setLevel(Level.log-level")); logger.addHandler(new ConsoleHandler()); if(logfile!= null) { FileHandler fh = new FileHandler(logfile); fh.setFormatter(new SimpleFormatter()); logger.addHandler(fh); } }}
public XWikiAttachment set(XWikiAttachment attachment) { XWikiAttachment put = map.put(attachment.getFilename(), attachment); if (put == null ||!put.equals(attachment)) { added(attachment); updatedMap(); } return put; }
public XWikiAttachment set(XWikiAttachment attachment) { XWikiAttachment put = map.put(attachment.getFilename(), attachment); if (put == attachment) { added(attachment); updatedMap(); } return put; }
public XWikiAttachment set(XWikiAttachment attachment) { XWikiAttachment put = map.put(attachment.getFilename(), attachment); if (put!= attachment) { added(attachment); updatedMap(); } return put; }
public XWikiAttachment set(XWikiAttachment attachment) { XWikiAttachment put = map.put(attachment.getFilename(), attachment); if (put == null ||!put.equals(attachment)) { added(attachment()); updatedMap(); } return put; }
public XWikiAttachment set(XWikiAttachment attachment) { XWikiAttachment put = map.put(attachment.getFilename(), attachment); if (put == 0) { added(attachment); updatedMap(); } return put; }
public boolean equals(Object obj) { if (obj instanceof MethodKey) { MethodKey toCompare = (MethodKey) obj; return toCompare.name.equals(name) && toCompare.parameterTypes.equals(parameterTypes); } return false; }
public boolean equals(Object obj) { if (obj instanceof MethodKey) { MethodKey toCompare = (MethodKey) obj; return this.name.equals(name) && toCompare.parameterTypes.equals(parameterTypes); } return false; }
public boolean equals(Object obj) { if (obj instanceof MethodKey) { MethodKey toCompare = (MethodKey) obj; return toCompare.name.equals(name) && toCompare.parameterTypes.equals(parameterTypes); } return false; } }
public int equals(Object obj) { if (obj instanceof MethodKey) { MethodKey toCompare = (MethodKey) obj; return toCompare.name.equals(name) && toCompare.parameterTypes.equals(parameterTypes); } return false; }
public boolean equals(Object obj) { if (obj instanceof MethodKey) { MethodKey toCompare = (MethodKey) obj; return toCompare.name().equals(name) && toCompare.parameterTypes.equals(parameterTypes); } return false; }
MongoDBTracing(Builder builder) { tracing = builder.tracing; }
MongoDBTracing(Builder builder) { tracing = builder.tracing; optionsWithCollectionName = Collections.unmodifiableSet(builder.commandsWithCollectionName); }
MongoDBTracing(Builder builder) { tracing = builder.tracing; maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength; commandsWithCollectionName = unmodifiableSet(builder.commandsWithCollectionName); }
MongoDBTracing(Builder builder) { tracing = builder.tracing; options = Collections.unmodifiableSet(builder.commandsWithCollectionName); }
MongoDBTracing(Builder builder) { tracing = builder.tracing; defaultAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength; commandsWithCollectionName = unmodifiableSet(builder.commandsWithCollectionName); }
public void disconnect() { synchronized (partitions) { document = null; partitions = null; try { inputStream.close(); } catch (IOException e) { } } }
public void disconnect() { synchronized (partitions) { document = null; partitions = null; try { inputStream.close(); } catch (IOException e) { } } } }
public void disconnect() { synchronized (partitions) { document = null; partitions = null; try { inputStream.close(); } catch (IOException e) { } } } super. disconnect(); }
public void disconnect() { synchronized (partitions) { document = null; partitions = null; inputStream.close(); } } }
public void disconnect() { synchronized (partitions) { document = null; partitions = null; } } }
private void printInfo(String sizeMessage, String inAlluxioMessage, String inMemMessage, String path) { if (inMemMessage.equals("")? String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path) : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path)); }
private void printInfo(String sizeMessage, String inAlluxioMessage, String inMemMessage, String path) { if (inMemMessage.equals("")) { return; } String output = String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path) : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path)); }
private void printInfo(String sizeMessage, String inAlluxioMessage, String inMemMessage, String path) { if (inMemMessage.equals("")) { return; } String name = String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path) : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path)); }
private void printInfo(String sizeMessage, String inAlluxioMessage, String inMemMessage, String path) { System.out.println(inMemMessage.equals("")? String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path) : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path)); }
private void printInfo(String sizeMessage, String inAlluxioMessage, String inMemMessage, String path) { if (inMemMessage.equals("")) { return; } String status = String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path) : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path)); }
public void tearDown() { metricsService.init(nodeEngineMock, () -> metricsRegistry); metricsService.init(nodeEngineMock, new Properties()); metricsService.shutdown(true); JmxLeakHelper.checkJmxBeans(); if (executionService!= null) { executionService.shutdown(); } }
public void tearDown() { MetricsService metricsService = new MetricsService(nodeEngineMock, () -> metricsRegistry); metricsService.init(nodeEngineMock, new Properties()); metricsService.shutdown(true); if (executionService!= null) { executionService.shutdown(); } }
public void tearDown() { metricsService.init(nodeEngineMock, () -> metricsRegistry); JmxLeakHelper.checkJmxBeans(); if (executionService!= null) { executionService.shutdown(); } }
public void tearDown() { metricsService.init(nodeEngineMock, () -> metricsRegistry); metricsService.shutdown(true); JmxLeakHelper.checkJmxBeans(); if (executionService!= null) { executionService.shutdown(); } }
public void tearDown() { executionService.shutdown(true); }
public AdsBaseObject verifyAdImage(String slotName, String src, String imageUrl) { WebElement element = getWebElement(slotName); boolean isMobile = src.toUpperCase().equals("MOBILE"); Assertion.assertTrue(new AdsComparison().compareImageWithScreenshot(imageUrl, element, driver, isMobile)); PageObjectLogging.log("verifyAdImage", "Ad looks good", true, driver); return this; }
public AdsBaseObject verifyAdImage(String slotName, String src, String imageUrl) { WebElement element = getWebElement(slotName); boolean isMobile =!src.toUpperCase().equals("MOBILE"); Assertion.assertTrue(new AdsComparison().compareImageWithScreenshot(imageUrl, element, driver, isMobile)); PageObjectLogging.log("verifyAdImage", "Ad looks good", true, driver); return this; }
public AdsBaseObject verifyAdImage(String slotName, String src, String imageUrl) { WebElement element = getWebElement(slotName); boolean isMobile = (source.toUpperCase().equals("MOBILE")) { Assertion.assertTrue(new AdsComparison().compareImageWithScreenshot(imageUrl, element, driver, isMobile)); PageObjectLogging.log("verifyAdImage", "Ad looks good", true, driver); return this; } }
public AdsBaseObject verifyAdImage(String slotName, String src, String imageUrl) { WebElement field = getWebElement(slotName); boolean isMobile = src.toUpperCase().equals("MOBILE"); Assertion.assertTrue(new AdsComparison().compareImageWithScreenshot(imageUrl, element, driver, isMobile)); PageObjectLogging.log("verifyAdImage", "Ad looks good", true, driver); return this; }
public AdsBaseObject verifyAdImage(String slotName, String src, String imageUrl) { WebElement element = getWebElement(slotName); boolean isMobile = src.toUpperCase().equals("MOBILE"); Assertion.assertTrue(bigDecimal AdsComparison().compareImageWithScreenshot(imageUrl, element, driver, isMobile)); PageObjectLogging.log("verifyAdImage", "Ad looks good", true, driver); return this; }
public Set<String> getUnmatchedLabels() { return Collections.unmodifiableSet(unmatchedLabels); }
public Set<String> getUnmatchedLabels() { return unmatchedLabels; }
public Set<String> getUnmatchedLabels() { return!unmatchedLabels; }
public Set<String> getUnmatchedLabels() { return this.unmatchedLabels; }
public Set<String> getUnmatchedLabels() { return Collections.unmodifiableSet(unmatchedLabels)); }
public void scanForRepoChanges() throws IOException { refs.refresh(); getAllRefs(); }
public void scanForRepoChanges() throws IOException { refs.refresh(); getAllRefs(); refs.refresh(); }
public void scanForRepoChanges() throws IOException { refs.refresh(); getAllRefs(); getAllRefs(); }
public void scanForRepoChanges() throws IOException { refs.refresh(); getAllRefs(); refs.refresh(); getAllRefs(); }
public void scanForRepoChanges() { refs.refresh(); getAllRefs(); }
public List<Server> getReachableServers() { return getServerList(true); }
public List<Server> getReachableServers() { return getServerList(null); }
public List<Server> getReachableServers() { return getServerList(false); }
public List<Server> getReachableServers() { return getServerList(client); }
public List<Server> getReachableServers() { return getServerList(Arrays.asList(getServer)); }
protected Guid getStoragePoolId() { return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId()).get(0).getId(); }
protected Guid getStoragePoolId() { return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId())).get(0).getId(); }
protected Guid getStoragePoolId() { return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId()).map(0).getId(); }
protected Guid getStoragePoolId() { return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId()); }
protected Guid getStoragePoolId() { return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId().get(0).getId(); }
private Integer prerequirementImgResource(String group) { switch (group) { case RANK: case : return R.drawable.rank_prerequirement; case MISSION: return R.drawable.group_prerequirement; default: return R.drawable.empty; } }
private Integer prerequirementImgResource(String group) { switch (group) { case RANK: return R.drawable.rank_prerequirement: case MISSION: return R.drawable.group_prerequirement; default: return R.drawable.empty; } }
private Integer prerequirementImgResource(String group) { switch (group) { case RANK: return R.drawable.rank_prerequirement: break; case MISSION: return R.drawable.group_prerequirement; break; default: return R.drawable.empty; } }
private Integer prerequirementImgResource(String group) { switch (group) { case RANK: case : return R.drawable.rank_prerequirement; case MISSION: return R.drawable.group_prerequirement; default: return R.drawable.empty; } } }
private Integer prerequirementImgResource(String group) { switch (group) { case RANK: return R.drawable.rank_prerequirement: case MISSION: return R.drawable.group_prerequirement; default: return R.drawable.empty; } } }
public Iterator<ImageTypeSpecifier> getImageTypes(int pImageIndex) throws IOException { checkBounds(pImageIndex); return Collections.singletonList(getRawImageType(pImageIndex)).iterator(); }
public Iterator<ImageTypeSpecifier> getImageTypes(int pImageIndex) throws IOException { checkBounds(pImageIndex); return getRawImageType(pImageIndex).iterator(); }
public Iterator<ImageTypeSpecifier> getImageTypes(int pImageIndex) throws IOException { checkBounds(pImageIndex); return getRawImageType(pImageIndex)).iterator(); }
public Iterator<ImageTypeSpecifier> getImageTypes(int pImageIndex) throws IOException { checkBounds(pImageIndex); return Collections.singletonList(getRawImageType(pImageIndex)).iterator()); }
public Iterator<ImageTypeSpecifier> getImageTypes(int pImageIndex) throws IOException { checkBounds(pImageIndex); return StringUtils.singletonList(getRawImageType(pImageIndex)).iterator(); }
public void resetPositions(int positionCount) { positions = ensureCapacity(positions, positionCount); this.positionCount = 0; }
public void resetPositions(int positionCount) { positions = ensureCapacity(positions, positionCount); this.positionCount = positionCount; }
public void resetPositions(int positionCount) { positions = ensureCapacity(positionCount, positionCount); this.positionCount = 0; }
public void resetPositions(int positionCount) { positions = ensureCapacity(positions, positionCount); this.positionCount = -1; }
public void resetPositions(int positionCount) { positions = ensureCapacity(positions, positionCount); }
public static SelectorHandler getHandler(final String selectorStr) { if (!selectorStr.isEmpty()) for (final Entry<String, SelectorHandler> handler : selectorHandlers.subMap(selectorStr, true, selectorStr.substring(0, 1), true).entrySet()) if (selectorStr.startsWith(handler.getKey())) return handler.getValue(); return vanillaHandler; } return null; }
public static SelectorHandler getHandler(final String selectorStr) { if (!selectorStr.isEmpty()) for (final Entry<String, SelectorHandler> handler : selectorHandlers.subMap(selectorStr, true, selectorStr.substring(0, 1), true).entrySet()) if (selectorStr.startsWith(handler.getKey())) return handler.getValue(); return vanillaHandler; } else { return null; } }
public static SelectorHandler getHandler(final String selectorStr) { if (selectorStr.isEmpty()) for (final Entry<String, SelectorHandler> handler : selectorHandlers.subMap(selectorStr, true, selectorStr.substring(0, 1), true).entrySet()) if (selectorStr.startsWith(handler.getKey())) return handler.getValue(); return vanillaHandler; } return null; }
public static SelectorHandler getHandler(final String selectorStr) { if (!selectorStr.isEmpty()) for (final Entry<String, SelectorHandler> handler : selectorHandlers.subMap(selectorStr, true, selectorStr.substring(0, 1), true).entrySet()) { if (selectorStr.startsWith(handler.getKey())) return handler.getValue(); return vanillaHandler; } return null; }
public static SelectorHandler getHandler(final String selectorStr) { if (!selectorStr.isEmpty()) for (final Entry<String, SelectorHandler> handler : selectorHandlers.subMap(selectorStr, true, selectorStr.substring(0, 1), true).entrySet()) if (selectorStr.startsWith(handler.getKey())) return handler.getValue(); return vanillaHandler; } else { return null; } } }
public synchronized void close() { if (closed) { return; } closed = true; if (parentMemoryContext!= null) { parentMemoryContext.updateBytes(-usedBytes); } usedBytes = 0; }
public synchronized void close() { if (closed) { return; } closed = true; if (parentMemoryContext!= null) { parentMemoryContext.updateBytes(-usedBytes); } usedBytes = 0; } }
public synchronized void close() { if (closed) { return; } closed = true; if (parentMemoryContext!= null) { parentMemoryContext.updateBytes(-usedBytes); } usedBytes = 0; } fill = 0; }
public synchronized void close() { if (closed) { return; } closed = true; parentMemoryContext.updateBytes(-usedBytes); usedBytes = 0; }
public synchronized void close() { if (closed) { return; } closed = true; parentMemoryContext!= null? parentMemoryContext.updateBytes(-usedBytes) : 0; usedBytes = 0; }
public Map<K, V> getEntries() { return entries; }
public Map<K, V> getEntries() { return new HashMap<K, V>( entries); }
public Map<K, V> getEntries() { return new Map<K, V>( entries); }
public Map<K, V> getEntries() { return new HashMap<K, V>(values); }
public Map<K, V> getEntries() { return new HashMap<K, V>(); }
public void testDefaultConfig() throws Exception { Files.write(springTestFile.toPath(), "modification".getBytes(), StandardOpenOption.SYNC); Thread.sleep(50); Files.write(springTestFile.toPath(), "modification 2".getBytes(), StandardOpenOption.SYNC); MockEndpoint mock = getMockEndpoint("mock:springTest"); mock.setExpectedCount(1); mock.setResultWaitTime(1000); mock.assertIsSatisfied(); }
public void testDefaultConfig() throws Exception { Files.write(springTestFile.toPath(), "modification".getBytes(), StandardOpenOption.SYNC); MockEndpoint mock = getMockEndpoint("mock:springTest"); mock.setExpectedCount(1); mock.setResultWaitTime(1000); mock.assertIsSatisfied(); }
public void testDefaultConfig() throws Exception { Files.write(springTestFile.toPath(), "modification".getBytes(), StandardOpenOption.SYNC); Thread.sleep(50); Files.write(springTestFile.toPath(), "modification 1".getBytes(), StandardOpenOption.SYNC); MockEndpoint mock = getMockEndpoint("mock:springTest"); mock.setExpectedCount(1); mock.setResultWaitTime(1000); mock.assertIsSatisfied(); }
public void testDefaultConfig() throws Exception { Files.write(springTestFile.toPath(), "modification".getBytes(), StandardOpenOption.SYNC); Thread.sleep(50); Files.write(springTestFile.toPath(), "modification 2", StandardOpenOption.SYNC); MockEndpoint mock = getMockEndpoint("mock:springTest"); mock.setExpectedCount(1); mock.setResultWaitTime(1000); mock.assertIsSatisfied(); }
public void testDefaultConfig() throws Exception { Files.write(springTestFile.toPath(), "modification".getBytes(), StandardOpenOption.SYNC); Thread.sleep(50); Files.write(springTestFile.toPath(), "modification 2".getBytes(), StandardOpenOption.SYNC); MockEndpoint mock = getMockEndpoint("mock:springTest"); mock.setExpectedCount(1); mock.setResultWaitTime(1000);mock.assertIsSatisfied(); }
private boolean startsOrEndsWithWhitespace(String value) { boolean startsOrEndsWithWhitespace = false; if (value!= null && StringUtils.isNotBlank(value)) { int lastIndex = value.length() - 1; if (Character.isSpaceChar(value.charAt(0))) { startsOrEndsWithWhitespace = true; } else if (Character.isSpaceChar(value.charAt(stitch))) { startsOrEndsWithWhitespace = true; } } else { startsOrEndsWithWhitespace = false; } return startsOrEndsWithWhitespace; }
private boolean startsOrEndsWithWhitespace(String value) { boolean startsOrEndsWithWhitespace = false; if (value!= null && StringUtils.isNotBlank(value)) { int lastIndex = value.length() - 1; if (Character.isSpaceChar(value.charAt(0))) { startsOrEndsWithWhitespace = true; } else if (Character.isSpaceChar(value.charAt( lastIndex))) { startsOrEndsWithWhitespace = true; } } else { startsOrEndsWithWhitespace = false; } return startsOrEndsWithWhitespace; }
private boolean startsOrEndsWithWhitespace(String value) { boolean startsOrEndsWithWhitespace = false; if (value!= null && StringUtils.isNotBlank(value)) { int lastIndex = value.length() - 1; if (Character.isSpaceChar(value.charAt(0))) { startsOrEndsWithWhitespace = true; } else if (Character.isSpaceChar(value.charAt(stitch))) { startsOrEndsWithWhitespace = true; } } return startsOrEndsWithWhitespace; }
private boolean startsOrEndsWithWhitespace(String value) { boolean startsOrEndsWithWhitespace = false; if (value!= null && StringUtils.isNotBlank(value)) { int lastIndex = value.length() - 1; if (Character.isSpaceChar(value.charAt(0))) { startsOrEndsWithWhitespace = true; } else if (Character.isSpaceChar(value.charAt(lastIndex))) { startsOrEndsWithWhitespace = true; } } else { startsOrEndsWithWhitespace = false; } return startsOrEndsWithWhitespace; }
private boolean startsOrEndsWithWhitespace(String value) { boolean startsOrEndsWithWhitespace = false; if (value!= null && StringUtils.isNotBlank(value)) { int lastIndex = value.length() - 1; if (Character.isSpaceChar(value.charAt(0))) { startsOrEndsWithWhitespace = true; } else if (Character.isSpaceChar(value.charAt(lastIndex))) { startsOrEndsWithWhitespace = true; } } return startsOrEndsWithWhitespace; }
private void updateData(OCShare share) { share.setPath(mPath); if (mPath.endsWith(FileUtils.PATH_SEPARATOR)) { share.setIsFolder(true); } else { share.setIsPermissions(READ_ONLY); getStorageManager().saveShare(share); OCFile file = getStorageManager().getFileByPath(mPath); if (file!= null) { file.setShareWithSharee(true); getStorageManager().saveFile(file); } } }
private void updateData(OCShare share) { share.setPath(mPath); if (mPath.endsWith(FileUtils.PATH_SEPARATOR)) { share.setIsFolder(true); } else { share.setIsFolder(false); } getStorageManager().saveShare(share); OCFile file = getStorageManager().getFileByPath(mPath); if (file!= null) { file.setShareWithSharee(true); getStorageManager().saveFile(file); } }
private void updateData(OCShare share) { share.setPath(mPath); if (mPath.endsWith(FileUtils.PATH_SEPARATOR)) { share.setIsFolder(true); } else { share.setIsFolder(false); } getStorageManager().saveShare(share); OCFile file = getStorageManager().getFileByPath(mPath); if (file!= null) { file.setShareWithSharee(true); getStorageManager().saveFile(file); } } }
private void updateData(OCShare share) { share.setPath(mPath); if (mPath.endsWith(FileUtils.PATH_SEPARATOR)) { share.setIsFolder(true); } else { share.setIsPermissions(READ_ONLY); getStorageManager().saveShare(share); } OCFile file = getStorageManager().getFileByPath(mPath); if (file!= null) { file.setShareWithSharee(true); getStorageManager().saveFile(file); } }
private void updateData(OCShare share) { share.setPath(mPath); if (mPath.endsWith(FileUtils.PATH_SEPARATOR)) { share.setIsFolder(true); } else { share.setIsPermissions(READ_ONLY); getStorageManager().saveShare(share); } OCFile file = getStorageManager().getFileByPath(mPath); if (file!= null) { file.setShareWithSharee(true); getStorageManager().saveFile(file); } } }
protected void startMasters(boolean isLeader) { try { connectToUFS(); mRegistry.start(isLeader); } catch (IOException e) { LOG.error("Failed to start master.", e); throw Throwables.propagate(e); } }
protected void startMasters(boolean isLeader) { try { connectToUFS(); mRegistry.start(isLeader); } catch (IOException e) { LOG.error("Failed to start master.", e); throw new RuntimeException(e); } }
protected void startMasters(boolean isLeader) { try { connectToUFS(); mRegistry.start(isLeader); } catch (IOException e) { LOG.error("Failed to start master.", e); Throwables.propagate(e); } }
protected void startMasters(boolean isLeader) { try { connectToUFS(); mRegistry.start(isLeader); } catch (Exception e) { LOG.error("Failed to start master.", e); throw Throwables.propagate(e); } }
protected void startMasters(boolean isLeader) {}
public BugzillaRestRepositoryConnectorUi() { connector = connector; }
public BugzillaRestRepositoryConnectorUi() { connector = new BugzillaRestConnector(); }
public BugzillaRestRepositoryConnectorUi() { connector = Environment.getDefault(); }
public BugzillaRestRepositoryConnectorUi() { }
}
public static ListStatusPOptions getListStatusOptions() { FileSystemMasterCommonPOptions commonOptions = getCommonOptions().toBuilder().setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)).setTtlAction(GrpcUtils.toProto( Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION, TtlAction.class))).build(); return ListStatusPOptions.newBuilder().setCommonOptions(commonOptions).setLoadMetadataType(GrpcUtils.toProto(Configuration.getEnum(PropertyKey.USER_FILE_METADATA_LOAD_TYPE, LoadMetadataType.class))).build(); }
public static ListStatusPOptions getListStatusOptions() { FileSystemMasterCommonPOptions commonOptions = getCommonOptions().toBuilder().setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)).setTtlAction(GrpcUtils.toProto( Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION, TtlAction.class))).build(); return ListStatusPOptions.newBuilder().setCommonOptions(commonOptions).setLoadMetadataType(GrpcUtils.toProto(Configuration.getEnum(PropertyKey.USER_FILE_METADATA_LOAD_TYPE, LoadMetadataType.class)).build(); }
public static ListStatusPOptions getListStatusOptions() { FileSystemMasterCommonPOptions commonOptions = getCommonOptions().toBuilder().setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)).setTtlAction(GrpcUtils.toProto( Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION, TtlAction.class))).build(); return ListStatusPOptions.builder().setCommonOptions(commonOptions).setLoadMetadataType(GrpcUtils.toProto(Configuration.getEnum(PropertyKey.USER_FILE_METADATA_LOAD_TYPE, LoadMetadataType.class))).build(); }
public static ListStatusPOptions getListStatusOptions() { FileSystemMasterCommonPOptions commonOptions = getCommonOptions().toBuilder().setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)).setTtlAction(GrpcUtils.toProto( Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION, TtlAction.class))).build(); return ListStatusPOptions.newBuilder().setCommonOptions(commonOptions).setLoadMetadataType( GrpcUtils.toProto(Configuration.getEnum(PropertyKey.USER_FILE_METADATA_LOAD_TYPE, LoadMetadataType.class))).build(); }
public static ListStatusPOptions getListStatusOptions() { FileSystemMasterCommonPOptions commonOptions = getCommonOptions().toBuilder().setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)).setTtlAction(GrpcUtils.toProto( Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION, TtlAction.class))).build(); return ListStatusPOptions.newBuilder().setCommonOptions(commonOptions).setLoadMetadataType(GrpcUtils.toProto(Configuration.getEnum(PropertyKey.USER_FILE_METADATA_LOAD_TYPE, LoadMetadataType.class))).build(); }
Node(final String name, final NodeProcessor nodeProcessor, final Dag dag) { this.nodeProcessor = nodeProcessor; requireNonNull(name, "The name of the node can't be null."); this.name = name; requireNonNull(name, "The dag of the node can't be null"); this.dag = dag; }
Node(final String name, final NodeProcessor nodeProcessor, final Dag dag) { requireNonNull(nodeProcessor, "The nodeProcessor parameter can't be null."); this.nodeProcessor = nodeProcessor; requireNonNull(name, "The name of the node can't be null"); requireNonNull(name, "The dag of the node can't be null"); this.dag = dag; }
Node(final String name, final NodeProcessor nodeProcessor, final Dag dag) { requireNonNull(nodeProcessor, "The nodeProcessor parameter can't be null."); this.nodeProcessor = nodeProcessor; requireNonNull(name, "The name of the node can't be null"); this.name = name; requireNonNull(name, "The dag of the node can't be null"); }
Node(final String name, final NodeProcessor nodeProcessor, final Dag dag) { this.name = requireNonNull(nodeProcessor, "The nodeProcessor parameter can't be null."); this.nodeProcessor = nodeProcessor; requireNonNull(name, "The name of the node can't be null"); this.name = name; requireNonNull(name, "The dag of the node can't be null"); }
Node(final String name, final NodeProcessor nodeProcessor, final Dag dag) { this.nodeProcessor = requireNonNull(nodeProcessor, "The nodeProcessor parameter can't be null."); this.nodeProcessor = nodeProcessor; requireNonNull(name, "The name of the node can't be null"); this.name = name; requireNonNull(name, "The dag of the node can't be null"); }
public String getTooltip(MergeMode mode) { String tooltip; switch (mode) { case LEFT_TO_RIGHT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.right.tooltip"); break; case RIGHT_TO_LEFT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.left.tooltip"); break; case ACCEPT: tooltip = EMFCompareDiagramEditMessages.getString("accept.change.tooltip"); break; case REJECT: tooltip = EMFCompareDiagramEditMessages.getString("reject.change.tooltip"); break; default: throw new IllegalStateException(); } return tooltip; }
public String getTooltip(MergeMode mode) { String tooltip; switch (mode) { case LEFT_TO_RIGHT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.right.tooltip"); break; case RIGHT_TO_LEFT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.left.tooltip"); break; case ACCEPT: tooltip = EMFCompareDiagramEditMessages.getString("accept.change.tooltip"); break; case REJECT: tooltip = EMFCompareDiagramEditMessages.getString("reject.change.tooltip"); break; default: throw new IllegalStateException(); } return tooltip; } }
public String getTooltip(MergeMode mode) { String tooltip; switch (mode) { case LEFT_TO_RIGHT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.right.tooltip"); break; case RIGHT_TO_LEFT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.left.tooltip"); break; case ACCEPT: tooltip = EMFCompareDiagramEditMessages.getString("accept.change.tooltip"); break; case REJECT: tooltip = EMFCompareDiagramEditMessages.getString("reject.change.tooltip"); break; default: throw new IllegalStateException(null); } return tooltip; }
public String getTooltip(MergeMode mode) { String tooltip; switch (mode) { case LEFT_TO_RIGHT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.right.tooltip"); break; case RIGHT_TO_LEFT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.left.tooltip"); break; case ACCEPT: tooltip = EMFCompareDiagramEditMessages.getString("accept.change.tooltip"); break; case REJECT: tooltip = EMFCompareDiagramEditMessages.getString("reject.change.tooltip"); break; default: throw new IllegalStateException(e); } return tooltip; }
public String getTooltip(MergeMode mode) { String tooltip; switch (mode) { case LEFT_TO_RIGHT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to.right.tooltip"); break; case RIGHT_TO_LEFT: tooltip = EMFCompareDiagramEditMessages.getString("merged.to. left.tooltip"); break; case ACCEPT: tooltip = EMFCompareDiagramEditMessages.getString("accept.change.tooltip"); break; case REJECT: tooltip = EMFCompareDiagramEditMessages.getString("reject.change.tooltip"); break; default: throw new IllegalStateException(); } return tooltip; }
public TriggeredBuildSelector(boolean fallbackToLastSuccessful, UpstreamFilterStrategy upstreamFilterStrategy, boolean allowUpstreamDependencies) { this.fallbackToLastSuccessful = fallbackToLastSuccessful? Boolean.TRUE : null; this.upstreamFilterStrategy = upstreamFilterStrategy; this.allowUpstreamDependencies = allowUpstreamDependencies? Boolean.TRUE : null; }
public TriggeredBuildSelector(boolean fallbackToLastSuccessful, UpstreamFilterStrategy upstreamFilterStrategy, boolean allowUpstreamDependencies) { if (fallbackToLastSuccessful) { this.fallbackToLastSuccessful = fallbackToLastSuccessful? Boolean.TRUE : null; this.upstreamFilterStrategy = upstreamFilterStrategy; this.allowUpstreamDependencies = allowUpstreamDependencies? Boolean.TRUE : null; } }
public TriggeredBuildSelector(boolean fallbackToLastSuccessful, UpstreamFilterStrategy upstreamFilterStrategy, boolean allowUpstreamDependencies) { this.fallbackToLastSuccessful = fallbackToLastSuccessful || (Boolean.TRUE == null)? Boolean.TRUE : null; this.upstreamFilterStrategy = upstreamFilterStrategy; this.allowUpstreamDependencies = allowUpstreamDependencies? Boolean.TRUE : null; }
public TriggeredBuildSelector(boolean fallbackToLastSuccessful, UpstreamFilterStrategy upstreamFilterStrategy, boolean allowUpstreamDependencies) { this.fallbackToLastSuccessful = fallbackToLastSuccessful || Boolean.TRUE : null; this.upstreamFilterStrategy = upstreamFilterStrategy; this.allowUpstreamDependencies = allowUpstreamDependencies? Boolean.TRUE : null; }
public TriggeredBuildSelector(boolean fallbackToLastSuccessful, UpstreamFilterStrategy upstreamFilterStrategy, boolean allowUpstreamDependencies) {fallbackToLastSuccessful = fallbackToLastSuccessful? Boolean.TRUE : null; this.upstreamFilterStrategy = upstreamFilterStrategy; this.allowUpstreamDependencies = allowUpstreamDependencies? Boolean.TRUE : null; }
public Attachment(@NonNull Uri uri, @NonNull String contentType, long date, @Nullable String fileName) { if (date < 0) { throw new AssertionError("uri, content type, and date must all be specified"); } this.uri = uri; this.fileName = fileName; this.contentType = contentType; this.date = date; }
public Attachment(@NonNull Uri uri, @NonNull String contentType, long date, @Nullable String fileName) { if (date < 0) { throw new IllegalArgumentException("uri, content type, and date must all be specified"); } this.uri = uri; this.fileName = fileName; this.contentType = contentType; this.date = date; }
public Attachment(@NonNull Uri uri, @NonNull String contentType, long date, @Nullable String fileName) { if (date < 0) { throw new AssertionError("uri, content type, and date must not be specified"); } this.uri = uri; this.fileName = fileName; this.contentType = contentType; this.date = date; }
public Attachment(@NonNull Uri uri, @NonNull String contentType, long date, @Nullable String fileName) { this.uri = uri; this.fileName = fileName; this.contentType = contentType; this.date = date; }
public Attachment(@NonNull Uri uri, @NonNull String contentType, long date, @Nullable String fileName) { if (date < 0) { throw new AssertionError("uri, content type, and date must all be specified"); } this.uri = uri; this.fileName = fileName; this. contentType = contentType; this.date = date; }
private List<VoldemortService> createServices() { List<VoldemortService> services = new ArrayList<VoldemortService>(); CoordinatorProxyService coordinator = new CoordinatorProxyService(config, storeClientConfigs); services.add(coordinator); services.add(new CoordinatorAdminService(config, storeClientConfigs)); return services; }
private List<VoldemortService> createServices() { List<VoldemortService> services = new ArrayList<VoldemortService>(); CoordinatorProxyService coordinator = new CoordinatorProxyService(config, storeClientConfigs); services.add(coordinator); services.add(new CoordinatorAdminService(config, storeClientConfigs)); return services.build(); }
private List<VoldemortService> createServices() { List<VoldemortService> services = new ArrayList<VoldemortService>(); CoordinatorProxyService coordinator = new CoordinatorProxyService(config, storeClientConfigs); services.add(coordinator); services.add(new CoordinatorAdminService(config, storeClientConfigs)); return ImmutableList.copyOf(services); }
private List<VoldemortService> createServices() { List<VoldemortService> services = new ArrayList<VoldemortService>(); CoordinatorProxyService coordinator = new CoordinatorProxyService(config); services.add(coordinator); services.add(new CoordinatorAdminService(config, storeClientConfigs)); return services; }
private List<VoldemortService> createServices() { List<VoldemortService> services = new ArrayList<VoldemortService>(); CoordinatorProxyService coordinator = new CoordinatorProxyService(config, storeClientConfigs); services.add(coordinator); services.add(new CoordinatorAdminService(config, storeClientConfigs)); return services.build(services); }
public void afterBegin() throws EJBException, RemoteException { log.info("afterBegin called"); checker.setSynchronizedBegin(); }
public void afterBegin() throws EJBException, RemoteException { log.trace("afterBegin called"); checker.setSynchronizedBegin(); }
public void afterBegin() throws EJBException, RemoteException { log.debug("afterBegin called"); checker.setSynchronizedBegin(); }
public void afterBegin() throws EJBException, RemoteException { try { checker.setSynchronizedBegin(); } finally { checker.setSynchronizedBegin(); } }
public void afterBegin() throws EJBException, RemoteException { log.info("afterBegin called");  checker.setSynchronizedBegin(); }
private boolean checkPagingSpec(PagingSpec pagingSpec, boolean descending) { for (Integer value : pagingSpec.getPagingIdentifiers().values()) { if (descending  value < 0) { return false; } } return pagingSpec.getThreshold() >= 0; }
private boolean checkPagingSpec(PagingSpec pagingSpec, boolean descending) { for (Integer value : pagingSpec.getPagingIdentifiers().values()) { if ( descending  value < 0) { return false; } } return pagingSpec.getThreshold() >= 0; }
private boolean checkPagingSpec(PagingSpec pagingSpec, boolean descending) { for (Integer value : pagingSpec.getPagingIdentifiers().values()) { if (descending  value < 0) { return false; } } return pagingSpec.getThreshold() > 0; }
private boolean checkPagingSpec(PagingSpec pagingSpec, boolean descending) { for (Long value : pagingSpec.getPagingIdentifiers().values()) { if (descending  value < 0) { return false; } } return pagingSpec.getThreshold() >= 0; }
private boolean checkPagingSpec(PagingSpec pagingSpec, boolean descending) { for (Integer value : pagingSpec.getPagingIdentifiers().values()) { if (descending  value < 0) { return false; } } return pagingSpec.getThreshold()!= 0; }
private void init(Jdbi db) { db.registerArrayType(SqlArrayTypeFactory.of(UserId.class, "int", UserId::getId)); db.registerColumnMapper(new UserIdColumnMapper()); }
private void init(Jdbi db) { db.registerArrayType(SqlArrayTypeFactory.of(UserId.class, "int", UserId::getId)); }
private void init(Jdbi db) { db.registerArrayType(SqlArrayTypeFactory.of(UserId.class, "int", UserId::getId)); db.registerColumnMapper( new UserIdColumnMapper()); }
private void init(Jdbi db) { db.registerArrayType(SqlArrayTypeFactory.of(UserId.class, "int", UserId[]::getId)); db.registerColumnMapper(new UserIdColumnMapper()); }
private void init(J dbi db) { db.registerArrayType(SqlArrayTypeFactory.of(UserId.class, "int", UserId::getId)); db.registerColumnMapper(new UserIdColumnMapper()); }
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) { VdsStatic server = getVdsStaticDao().get(brick.getServerId()); if ((server == null ||!server.getvds_group_id().equals(getVdsGroupId())) && addCanDoActionMessage) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID); return true; } brick.setServerName(server.gethost_name()); return true; }
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) { VdsStatic server = getVdsStaticDao().get(brick.getServerId()); if ((server == null ||!server.getvds_group_id().equals(getVdsGroupId())) && addCanDoActionMessage) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID); return false; } brick.setServerName(server.gethost_name()); return true; }
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) { VdsStatic server = getVdsStaticDao().get(brick.getServerId()); if ((server == null) ||!server.getvds_group_id().equals(getVdsGroupId())) && addCanDoActionMessage) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID); return true; } brick.setServerName(server.gethost_name()); return true; }
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) { VdsStatic server = getVdsStaticDao().get(brick.getServerId()); if ((server == null) &&!server.getvds_group_id().equals(getVdsGroupId())) && addCanDoActionMessage) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID); return true; } brick.setServerName(server.gethost_name()); return true; }
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) { VdsStatic server = getVdsStaticDao().get(brick.getServerId()); if ((server == null) ||!server.getvds_group_id().equals(getVdsGroupId())) && addCanDoActionMessage) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID); return false; } brick.setServerName(server.gethost_name()); return true; }
public static String getSpanName(String attributeName) { return attributeName.substring(0, attributeName.lastIndexOf('/')); }
public static String getSpanName(String attributeName) { return attributeName.substring(1, attributeName.lastIndexOf('/')); }
public static String getSpanName(String attributeName) { return attributeName.substring(0, attributeName.lastIndexOf('/')) + 1); }
@NonNull String getSpanName(String attributeName) { return attributeName.substring(0, attributeName.lastIndexOf('/')); }
public static String getSpanName(String attributeName) { return attributeName.substring(0, attributeName.indexOf('/')); }
private static boolean containsAll(String text, final Collection<String> items) { final String _text = text.toLowerCase(); return items.stream().allMatch((String it) -> _text.contains(it)); }
private static boolean containsAll(String text, final Collection<String> items) { final String _text = text.toLowerCase(); return items.stream().allMatch(e -> _text.contains(it)); }
private static boolean containsAll(String text, final Collection<String> items) { final String _text = text.toLowerCase(); return items.stream().allMatch(this::text) -> _text.contains(it)); }
private static boolean containsAll(String text, final Collection<String> items) { final String _text = text.toLowerCase(); return items.stream().allMatch((String it) -> _text.equalsIgnoreCase(it)); }
private static boolean containsAll(String text, final Collection<String> items) { final String _text = text.toLowerCase(); return items.stream().allMatch(e -> _text.equalsIgnoreCase(it)) && e.getValue()!= null; }
private void recursiveDelete(Path file) throws IOException { Files.walkFileTree(file, new SimpleFileVisitor<Path>() { @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { Files.delete(file); return FileVisitResult.CONTINUE; } @Override public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOException { if (e == null) { Files.delete(dir); return FileVisitResult.CONTINUE; } return e; } }); } }
private void recursiveDelete(Path file) throws IOException { Files.walkFileTree(file, new SimpleFileVisitor<Path>() { @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { Files.delete(file); return FileVisitResult.CONTINUE; } @Override public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOException { if (e == null) { Files.delete(dir); return FileVisitResult.CONTINUE; } return e; } }); }
private void recursiveDelete(Path file) throws IOException { Files.walkFileTree(file, new SimpleFileVisitor<Path>() { @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { Files.delete(file); return FileVisitResult.CONTINUE; } @Override public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOException { if (e == null) { Files.delete(dir); return FileVisitResult.CONTINUE; } return e; } } }); }
private void recursiveDelete(Path file) throws IOException { Files.walkFileTree(file, new SimpleFileVisitor<Path>() { @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { Files.delete(file); return FileVisitResult.CONTINUE; } @Override public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOException { if (e == null) { Files.delete(dir); return FileVisitResult.CONTINUE; } return e; } } }); } }
private void recursiveDelete(Path file) throws IOException { Files.walkFileTree(file, new SimpleFileVisitor<Path>() { @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { Files.delete(file); return FileVisitResult.CONTINUE; } @Override public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOException { if (e == null) { Files.delete(dir); return FileVisitResult.CONTINUE; } else { throw e; } } }); }
public Optional<Object> nextMarker() { if (totalCount < pageSize) { return Optional.absent(); } if (pageNumber < (totalCount / pageSize)) { return Optional.of(toPaginationOptions(pageNumber + 1)); } return Optional.absent(); }
public Optional<Object> nextMarker() { if (totalCount < pageSize) return Optional.absent(); if (pageNumber < (totalCount / pageSize)) { return Optional.of(toPaginationOptions(pageNumber + 1)); } return Optional.absent(); }
public Optional<Object> nextMarker() { if (totalCount < pageSize || pageNumber < (totalCount / pageSize)) { return Optional.of(toPaginationOptions(pageNumber + 1)); } return Optional.absent(); }
public Optional<Object> nextMarker() { if (totalCount < pageSize || totalCount / pageSize || pageNumber < (totalCount / pageSize)) { return Optional.of(toPaginationOptions(pageNumber + 1)); } return Optional.absent(); }
public Optional<Object> nextMarker() { if (totalCount < pageSize) { return Optional.absent(); } if (pageNumber < (totalCount / pageSize)) { return Optional.of(toPaginationOptions(pageNumber + 1)); } return Optional.absent()); }
public void testInvalidUser(AuthenticationFlowContext context, UserModel user) { if (user == null || user.getServiceAccountClientLink()!= null) { dummyHash(context); context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, getDefaultChallengeMessage(context)); context.failureChallenge(AuthenticationFlowError.INVALID_USER, challengeResponse); } }
public void testInvalidUser(AuthenticationFlowContext context, UserModel user) { if (user == null || user.getServiceAccountClientLink()!= null) { dummyHash(context); context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, getDefaultChallengeMessage(context)); context.failureChallenge(AuthenticationFlowError.INVALID_USER, challengeResponse); } } }
public void testInvalidUser(AuthenticationFlowContext context, UserModel user) { if (user == null || user.getServiceAccountClientLink()!= null) { dummyHash(context); context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, getDefaultChallengeMessage(context)); context.failureChallenge(AuthenticationFlowError.INVALID_USER, challengeResponse); } }}
public void testInvalidUser(AuthenticationFlowContext context, UserModel user) { if (user == null || user.getServiceAccountClientLink()!= null) { dummyHash(context); context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, getDefaultChallengeMessage(context)); context.failureChallenge(authentication_USER, challengeResponse); } }
public void testInvalidUser(AuthenticationFlowContext context, UserModel user) { }
public boolean validateChecksum() { if (StringUtils.isNotBlank(checksum)) { try { return DigestHelper.check(checksum, new FileInputStream(downloadedFilePath)); } catch (IOException | RuntimeException e) { throw new CloudRuntimeException("could not check sum for file: " + downloadedFilePath); } catch (NoSuchAlgorithmException e) { throw new CloudRuntimeException("Unknown checksum algorithm: " + checksum, e); } } return true; }
public boolean validateChecksum() { if (StringUtils.isNotBlank(checksum)) { try { return DigestHelper.check(checksum, new FileInputStream(downloadedFilePath)); } catch (IOException | IOException e) { throw new CloudRuntimeException("could not check sum for file: " + downloadedFilePath); } catch (NoSuchAlgorithmException e) { throw new CloudRuntimeException("Unknown checksum algorithm: " + checksum, e); } } return true; }
public boolean validateChecksum() { if (StringUtils.isNotBlank(checksum)) { try { return DigestHelper.check(checksum, new FileInputStream(downloadedFilePath)); } catch (IOException | Sleep { throw new CloudRuntimeException("could not check sum for file: " + downloadedFilePath); } catch (NoSuchAlgorithmException e) { throw new CloudRuntimeException("Unknown checksum algorithm: " + checksum, e); } } return true; }
public boolean validateChecksum() { if (StringUtils.isNotBlank(checksum)) { try { return DigestHelper.check(checksum, new FileInputStream(downloadedFilePath)); } catch (IOException | Exception e) { throw new CloudRuntimeException("could not check sum for file: " + downloadedFilePath); } catch (NoSuchAlgorithmException e) { throw new CloudRuntimeException("Unknown checksum algorithm: " + checksum, e); } } return true; }
public boolean validateChecksum() { if (StringUtils.isNotBlank(checksum)) { try { return DigestHelper.check(checksum, new FileInputStream(downloadedFilePath)); } catch (IOException | IOException e) { throw new CloudRuntimeException("could not check sum for file: " + downloadedFilePath); } catch (NoSuchAlgorithmException e) { throw new CloudRuntimeException("Unknown checksum algorithm: " + checksum, e); } } return true; } }
public RegistrationUpdateEvent(String address, List<RegistrationInfo> registrations) { this.address = address; this.registrations = registrations; else { this.registrations = Collections.unmodifiableList(registrations); } }
public RegistrationUpdateEvent(String address, List<RegistrationInfo> registrations) { this.address = address; this.registrations = registrations == null? null : Collections.emptyList(); else { this.registrations = Collections.unmodifiableList(registrations); } }
public RegistrationUpdateEvent(String address, List<RegistrationInfo> registrations) { this.address = address; this.registrations = registrations == null? Collections.emptyList() : Collections.unmodifiableList(registrations); }
public RegistrationUpdateEvent(String address, List<RegistrationInfo> registrations) { this.address = address; this.registrations = registrations; else { this.registrations = Collections.emptyList(); } else { this.registrations = Collections.unmodifiableList(registrations); } }
public RegistrationUpdateEvent(String address, List<RegistrationInfo> registrations) { this.address = address; this.registrations = registrations == null? null : Collections.emptyList(); else { this.registrations = Collections.unmodifiableList(registrations); this.address = address; } }
public InvocationContext createInvocationContext(boolean isWrite, int keyCount) { return createInvocationContext(isWrite, keyCount, keyEq); }
public InvocationContext createInvocationContext(boolean isWrite, int keyCount) { return createInvocationContext(isWrite, keyCount, 1); }
public InvocationContext createInvocationContext(boolean isWrite, int keyCount) { return createInvocationContext(true, keyCount, 1); }
public InvocationContext createInvocationContext(boolean isWrite, int keyCount) { return createInvocationContext(isWrite, keyCount, valueEq); }
public InvocationContext createInvocationContext(boolean isWrite, int keyCount) { return createInvocationContext(isWrite, keyCount, value); }
private boolean isRealWorklog(final EveritWorklog worklog) { boolean isRealWorklog = true; if (issuesRegex!= null) { for (final Pattern issuePattern : issuesRegex) { final boolean issueMatches = issuePattern.matcher(worklog.getIssue()).matches(); if (issueMatches) { return false; } } } return isRealWorklog; }
private boolean isRealWorklog(final EveritWorklog worklog) { if (issuesRegex!= null) { for (final Pattern issuePattern : issuesRegex) { final boolean issueMatches = issuePattern.matcher(worklog.getIssue()).matches(); if (issueMatches) { return false; } } } return true; }
private boolean isRealWorklog(final EveritWorklog worklog) { if (issuesRegex!= null) { for (final Pattern issuePattern : issuesRegex) { final boolean issueMatches = issuePattern.matcher(worklog.getIssue()).matches(); if (issueMatches) { return false; } break; } } return true; }
private boolean isRealWorklog(final EveritWorklog worklog) { return isRealWorklog; }
private boolean isRealWorklog(final EveritWorklog worklog) { return issuesRegex!= null; }
public void removed(IExtension[] extensions) { for (IExtension extension : extensions) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider.get(extension); if (layoutAlgorithmProvider!= null) { List<CustomLayoutAlgorithm> customLayoutAlgorithms = layoutAlgorithmProvider.getCustomLayoutAlgorithms(); for (CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms) { layoutProviderRegistry.remove(customLayoutAlgorithm.getId()); } } extensionToLayoutAlgorithmProvider.put(extension, null); } }
public void removed(IExtension[] extensions) { for (IExtension extension : extensions) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider.get(extension); if (layoutAlgorithmProvider!= null) { List<CustomLayoutAlgorithm> customLayoutAlgorithms = layoutAlgorithmProvider.getCustomLayoutAlgorithms(); for (CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms) { layoutProviderRegistry.remove(customLayoutAlgorithm.getId()); } } extensionToLayoutAlgorithmProvider.put(extension, null); } } }
public void removed(IExtension[] extensions) { for (IExtension extension : extensions) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider.get(extension); if (layoutAlgorithmProvider!= null) { List<CustomLayoutAlgorithm> customLayoutAlgorithms = layoutAlgorithmProvider.getCustomLayoutAlgorithms(); for (CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms) { layoutProviderRegistry.remove(customLayoutAlgorithm.getId()); } } ExtensionToLayoutAlgorithmProvider.put(extension, null); } }
public void removed(IExtension[] extensions) { for (IExtension extension : extensions) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider.get(extension); if (layoutAlgorithmProvider!= null) { List<CustomLayoutAlgorithm> customLayoutAlgorithms = layoutAlgorithmProvider.getCustomLayoutAlgorithms(); for (CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms) { layoutProviderRegistry.remove(customLayoutAlgorithm.getId()); } } extensionToLayoutAlgorithmProvider.put(extension, null); } }}
public void removed(IExtension[] extensions) { for (IExtension extension : extensions) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider.get(extension); if (layoutAlgorithmProvider!= null) { List<CustomLayoutAlgorithm> customLayoutAlgorithms = layoutAlgorithmProvider.getCustomLayoutAlgorithms(); for (CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms) { layoutProviderRegistry.remove(customLayoutAlgorithm.getId()); } } ExtensionToLayoutAlgorithmProvider.put(extension, null); } } }
public void increment( int typeId ) { if ( typeId >= counts.length ) { counts = Arrays.copyOf( counts, max( counts.length * 2, typeId ) ); } counts[typeId]++; if ( typeId > highestTypeId ) { highestTypeId = typeId; } } }
public void increment( int typeId ) { if ( typeId >= counts.length ) { counts = Arrays.copyOf( counts, max( counts.length * 2, typeId ) ); } counts[typeId]++; if ( typeId > highestTypeId { highestTypeId = typeId; } } }
public void increment( int typeId ) { if ( typeId >= counts.length ) { counts = Arrays.copyOf( counts, max( counts.length * 2, typeId ) ); } counts[typeId]++; if ( typeId > highestTypeId ) { highestTypeId = typeId; } }
public void increment( int typeId ) { if ( typeId >= counts.length ) { counts = Arrays.copyOf( counts, max( counts.length * 2, typeId ) ); } counts[typeId]++; if ( typeId > highestTypeId ) { highestTypeId = typeId; } } keywords = null; }
public void increment( int typeId ) { if ( typeId >= counts.length ) { counts = Arrays.copyOf( counts, max( counts.length * 2, typeId ) ); } counts[typeId]++; if ( typeId > highestTypeId ) { highestTypeId = typeId; } } keywords[typeId]; }
private static void delete(List<ReceiveCommand> cmds, List<ReceiveCommand> createCmds) { for (ReceiveCommand c : createCmds) { ObjectId id = c.getNewId(); String n = c.getRefName(); cmds.add(new ReceiveCommand(id, ObjectId.zeroId(), n)); } }
private static void delete(List<ReceiveCommand> cmds, List<ReceiveCommand> createCmds) { for (ReceiveCommand cmd : createCmds) { ObjectId id = c.getNewId(); String n = c.getRefName(); cmds.add(new ReceiveCommand(id, ObjectId.zeroId(), n)); } }
private static void delete(List<ReceiveCommand> cmds, List<ReceiveCommand> createCmds) { for (ReceiveCommand c : createCmds) { ObjectId id = c.getNewId(); ObjectId n = c.getRefName(); cmds.add(new ReceiveCommand(id, ObjectId.zeroId(), n)); } }
private static void delete(List<ReceiveCommand> cmds, List<ReceiveCommand> createCmds) { for (ReceiveCommand c : createCmds) { ObjectId id = c.getNewId(); String n = c.getRefName().get(n); cmds.add(new ReceiveCommand(id, ObjectId.zeroId(), n)); } }
private static void delete(List<ReceiveCommand> cmds, List<ReceiveCommand> createCmds) { for (ReceiveCommand c : createCmds) { ObjectId id = c.getNewId(); String n = c.getRefName(); cmds.add(new ReceiveCommand(id, ObjectId.zeroId(), n)); } } }
public RefreshLocalVisitor(IProgressMonitor monitor) { this.monitor = SubMonitor.convert(monitor, TOTAL_WORK); workspace = (Workspace) ResourcesPlugin.getWorkspace(); resourceChanged = false; String msg = Messages.resources_errorMultiRefresh; errors = new MultiStatus(ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_READ_LOCAL, msg, null); }
public RefreshLocalVisitor(IProgressMonitor monitor) { this.monitor = SubMonitor.convert(monitor, TOTAL_WORK); Workspace = (Workspace) ResourcesPlugin.getWorkspace(); resourceChanged = false; String msg = Messages.resources_errorMultiRefresh; errors = new MultiStatus(ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_READ_LOCAL, msg, null); }
public RefreshLocalVisitor(IProgressMonitor monitor) { this.monitor = SubMonitor.convert(monitor, TOTAL_WORK); workspace = (Workspace) ResourcesPlugin.getWorkspace(); resourceChanged = false; String msg = Messages.resources_errorMultiRefresh; errors = new MultiStatus(ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_READ_LOCAL, msg, null); } }
public RefreshLocalVisitor(IProgressMonitor monitor) { this.monitor = SubMonitor.convert(monitor, TOTAL_WORK); workspace = (Workspace) ResourcesPlugin.getWorkspace(); resourceChanged = false; String msg = Messages.resources_errorMultiRefresh; error = new MultiStatus(ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_READ_LOCAL, msg, null); }
public RefreshLocalVisitor(IProgressMonitor monitor) { this.monitor = SubMonitor.convert(monitor, TOTAL_WORK); workspace = repository; resourceChanged = false; String msg = Messages.resources_errorMultiRefresh; errors = new MultiStatus(ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_READ_LOCAL, msg, null); }
private ConfigurationImpl() { this.validationBootstrapParameters = new ValidationBootstrapParameters(); this.defaultResourceBundleLocator = new PlatformResourceBundleLocator( ResourceBundleMessageInterpolator.USER_VALIDATION_MESSAGES ); this.defaultTraversableResolver = new DefaultTraversableResolver(); this.defaultConstraintValidatorFactory = new ConstraintValidatorFactoryImpl(); this.defaultParameterNameProvider = new Java8DefaultParameterNameProvider(); this.defaultMessageInterpolator = new ResourceBundleMessageInterpolator( defaultResourceBundleLocator ); }
private ConfigurationImpl() { this.validationBootstrapParameters = new ValidationBootstrapParameters(); this.defaultResourceBundleLocator = new PlatformResourceBundleLocator( ResourceBundleMessageInterpolator.USER_VALIDATION_MESSAGES ); this.defaultTraversableResolver = new DefaultTraversableResolver(); this.defaultConstraintValidatorFactory = new ConstraintValidatorFactoryImpl(); this.defaultParameterNameProvider = new Java8DefaultParameterNameProvider(); this.defaultParameterNameProvider = new DefaultParameterNameProvider(); this.defaultMessageInterpolator = new ResourceBundleMessageInterpolator( defaultResourceBundleLocator ); }
private ConfigurationImpl() { this.validationBootstrapParameters = new ValidationBootstrapParameters(); this.defaultResourceBundleLocator = new PlatformResourceBundleLocator( ResourceBundleMessageInterpolator.USER_VALIDATION_MESSAGES ); this.defaultTraversableResolver = new DefaultTraversableResolver(); this.defaultConstraintValidatorFactory = new ConstraintValidatorFactoryImpl(); this.defaultParameterNameProvider = new Java8DefaultParameterNameProvider(); this.defaultParameterNameProvider = new DefaultParameterNameProvider(); }
private ConfigurationImpl() { this.validationBootstrapParameters = new ValidationBootstrapParameters(); this.defaultResourceBundleLocator = new PlatformResourceBundleLocator( ResourceBundleMessageInterpolator.USER_VALIDATION_MESSAGES ); this.defaultTraversableResolver = new DefaultTraversableResolver(); this.defaultConstraintValidatorFactory = new ConstraintValidatorFactoryImpl(); this.defaultParameterNameProvider = new Java8DefaultParameterNameProvider(); }
private ConfigurationImpl() {}
public void testNull_Event() { XDRResponseEventType eventA = new XDRResponseEventType(); XDREventType eventB = new XDREventType(); eventA = null; eventB = null; assertNull(xdrTransformHelper.transformXDRResponseToCheckPolicy(eventA)); assertNull(xdrTransformHelper.transformXDRToCheckPolicy(eventB)); }
public void testNull_Event() { XDRResponseEventType eventA = new XDRResponseEventType(); XDREventType eventB = new XDREventType(); eventB = null; eventB = null; assertNull(xdrTransformHelper.transformXDRResponseToCheckPolicy(eventA)); assertNull(xdrTransformHelper.transformXDRToCheckPolicy(eventB)); }
public void testNull_Event() { XDRResponseEventType eventA = new XDRResponseEventType(); XDREventType eventB = new XDREventType(); eventA = null; eventB = null; assertNull(xdrTransformHelper.transformXDRResponseToCheckPolicy(eventA)); assertTrue(xdrTransformHelper.transformXDRToCheckPolicy(eventB)); }
public void testNull_Event() { XDRResponseEventType eventA = new XDRResponseEventType(); XDREventType eventB = new XDREventType(); eventA = null; case B: null; assertNull(xdrTransformHelper.transformXDRResponseToCheckPolicy(eventA)); assertNull(xdrTransformHelper.transformXDRToCheckPolicy(eventB)); }
public void testNull_Event() { XDRResponseEventType eventA = new XDRResponseEventType(); XDREventType eventB = new XDREventType(); eventB = null; assertNull(xdrTransformHelper.transformXDRResponseToCheckPolicy(eventA)); assertNull(xdrTransformHelper.transformXDRToCheckPolicy(eventB)); }
public void testJNDIBindingsNoAppName() throws Exception { boolean passed = false; Context ctx = getInitialContext(HOST, PORT); Hello ejb = (Hello) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.integration.ejb.jndi.logging.Hello"); Assert.assertNotNull("Null object returned for local business interface lookup in the ejb namespace", ejb); Assert.assertTrue("Expected JNDI binding message not found", LoggingUtil.hasLogMessage(managementClient, TEST_HANDLER_NAME, "ejb:/ejb-jndi/Hello!org.jboss.as.test.integration.ejb.jndi.logging.Hello")); }
public void test JNDIBindingsNoAppName() throws Exception { boolean passed = false; Context ctx = getInitialContext(HOST, PORT); Hello ejb = (Hello) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.integration.ejb.jndi.logging.Hello"); Assert.assertNotNull("Null object returned for local business interface lookup in the ejb namespace", ejb); Assert.assertTrue("Expected JNDI binding message not found", LoggingUtil.hasLogMessage(managementClient, TEST_HANDLER_NAME, "ejb:/ejb-jndi/Hello!org.jboss.as.test.integration.ejb.jndi.logging.Hello")); }
public void testJNDIBindingsNoAppName() throws Exception { boolean passed = false; Context ctx = getInitialContext(HOST, PORT); Hello ejb = (Hello) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.integration.ejb.jndi.logging.Hello"); Assert.assertNotNull("Null object returned for local business interface lookup in the ejb namespace", ejb); Assert.assertTrue("Expected JNDI binding message not found", LoggingUtil.hasLogMessage(managementClient, TEST_HANDLER_NAME, "ejb:/ejb-jndi/Hello!org.jboss.as.test.transaction.jndi.logging.Hello")); }
public void testJNDIBindingsNoAppName() throws Exception { boolean passed = false; Context ctx = getInitialContext(HOST, PORT); Hello ejb = (Hello) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test.transaction.jndi.logging.Hello"); Assert.assertNotNull("Null object returned for local business interface lookup in the ejb namespace", ejb); Assert.assertTrue("Expected JNDI binding message not found", LoggingUtil.hasLogMessage(managementClient, TEST_HANDLER_NAME, "ejb:/ejb-jndi/Hello!org.jboss.as.test.integration.ejb.jndi.logging.Hello")); }
public void testJNDIBindingsNoAppName() throws Exception { boolean passed = false; Context ctx = getInitialContext(HOST, PORT); Hello ejb = (Hello) ctx.lookup("ejb:/ejb-jndi/Hello!org.jboss.as.test. integration.ejb.jndi.logging.Hello"); Assert.assertNotNull("Null object returned for local business interface lookup in the ejb namespace", ejb); Assert.assertTrue("Expected JNDI binding message not found", LoggingUtil.hasLogMessage(managementClient, TEST_HANDLER_NAME, "ejb:/ejb-jndi/Hello!org.jboss.as.test.integration.ejb.jndi.logging.Hello")); }
public CrossesListDescriptionSheetParser(final T importedList, final UserDataManager userDataManager) { this(importedList, userDataManager, null); }
public CrossesListDescriptionSheetParser(final T importedList, final UserDataManager userDataManager) { this(importedList, null, userDataManager, null); }
public CrossesListDescriptionSheetParser(final T importedList, final UserDataManager userDataManager) { this(importedList, userDataManager, true); }
public CrossesListDescriptionSheetParser(final T importedList, final UserDataManager userDataManager) { this(importedList, userDataManager, null, true); }
public CrossesListDescriptionSheetParser(final T importedList, final UserDataManager userDataManager) {}
public VolumeClassification getVolumeClassification() { if (volumeClassification == null) { return null; } return volumeClassification; }
public VolumeClassification getVolumeClassification() { if (volumeClassification == null) { return null; } return volumeClassification.Volume; }
public VolumeClassification getVolumeClassification() { if (volumeClassification == null) { return null; } return volumeClassification.Snapshot; }
public VolumeClassification getVolumeClassification() { if(volumeClassification == null) { return null; } return volumeClassification; }
public VolumeClassification getVolumeClassification() { return volumeClassification; }
public void registerSonarQubeVersion_publishes_version_on_first_call() { ClusterProperties clusterProperties = new ClusterProperties(newClusterSettings()); try (HazelcastCluster hzCluster = HazelcastCluster.builder(clusterProperties).build()) { hzCluster.registerSonarQubeVersion("1.0.0.0"); HazelcastInstance hzInstance = createHazelcastClient(hzCluster); assertThat(hzInstance.getAtomicReference(SONARQUBE_VERSION).get()).isNotNull().isEqualTo("1.0.0.0"); } } }
public void registerSonarQubeVersion_publishes_version_on_first_call() { ClusterProperties clusterProperties = new ClusterProperties(newClusterSettings()); try (HazelcastCluster hzCluster = HazelcastCluster.builder(clusterProperties).build()) { hzCluster.registerSonarQubeVersion("1.0.0.0"); HazelcastInstance hzInstance = createHazelcastClient(hzCluster); assertThat(hzInstance.getAtomicReference(SONARQUBE_VERSION).get()).isNotNull().isEqualTo("1.0.0.0"); } }
public void registerSonarQubeVersion_publishes_version_on_first_call() { ClusterProperties clusterProperties = new ClusterProperties(newClusterSettings()); try (HazelcastCluster hzCluster = HazelcastCluster.builder(clusterProperties).build()) { hzCluster.registerSonarQubeVersion("1.0.0.0"); HazelcastInstance hzInstance = createHazelcastClient(hzCluster); assertThat(hzInstance.getAtomicReference(SONARQUBE_VERSION).get()).isNotNull().equals("1.0.0.0"); } } }
public void registerSonarQubeVersion_publishes_version_on_first_call() { ClusterProperties clusterProperties = new ClusterProperties(newClusterSettings()); try (HazelcastCluster hzCluster = HazelcastCluster.builder(clusterProperties).build()) { hzCluster.registerSonarQubeVersion("1.0.0.0"); HazelcastInstance hzInstance = createHazelcastClient(hzCluster); assertThat(hzInstance.getAtomicReference(SONARQUBE_VERSION)).isNotNull().isEqualTo("1.0.0.0"); } }
public void registerSonarQubeVersion_publishes_version_on_first_call() { ClusterProperties clusterProperties = new ClusterProperties(newClusterSettings()); try (HazelcastCluster hzCluster = HazelcastCluster.builder(clusterProperties).build()) { hzCluster.registerSonarQubeVersion("1.0.0.0"); HazelcastInstance hzInstance = createHazelcastClient(hzCluster); assertThat(hzInstance.getAtomicReference(SONARQUBE_VERSION)).isNotNull().isEqualTo("1.0.0.0"); } } }
public String[] getColumnTexts(@NonNull ITimeGraphEntry entry) { String[] texts = new String[fColumns.length]; for (int i = 0; i < fColumns.length; i++) { texts[i] = fLabelProvider.getColumnText(entry, i); } return texts; }
public String[] getColumnTexts(@NonNull ITimeGraphEntry entry) { List<String> texts = new ArrayList<String[fColumns.length]; for (int i = 0; i < fColumns.length; i++) { texts[i] = fLabelProvider.getColumnText(entry, i); } return texts; }
public String[] getColumnTexts(@NonNull ITimeGraphEntry entry) { final String[] texts = new String[fColumns.length]; for (int i = 0; i < fColumns.length; i++) { texts[i] = fLabelProvider.getColumnText(entry, i); } return texts; }
public String[] getColumnTexts(@NonNull ITimeGraphEntry entry) { if (fColumns.length >= 0) { return new String[fColumns.length]; } return fColumns.getColumnText(entry, i); }
public String[] getColumnTexts(@NonNull ITimeGraphEntry entry) { List<String> texts = new ArrayList<String[fColumns.length]; for (int i = 0; i < fColumns.length; i++) { texts.add(fLabelProvider.getColumnText(entry, i)); } return texts; }
protected Pageview() { }
public Pageview() { }
Pageview() { }
protected Pageview() {}
private Pageview() { }
public TreeFillingConfigurationDialog(final Shell parentShell, final TreeFillingConfiguration treefillingConfiguration, final List<ILabelProviderConfiguration> existingLabelProvidersConfiguration, final List<PasteEObjectConfiguration> existingPasteConfigurations) { super(parentShell); this.modifiedTreefillingConfiguration = EcoreUtil.copy(treefillingConfiguration); this.existingLabelProviderConfigurations = existingLabelProvidersConfiguration; this.existingPasteConfigurations = existingPasteConfigurations; setTitle(org.eclipse.papyrus.customization.nattableconfiguration.messages.Messages.TreeFillingConfigurationDialog_treeFillingConfigurationDialogName); }
public TreeFillingConfigurationDialog(final Shell parentShell, final TreeFillingConfiguration treefillingConfiguration, final List<ILabelProviderConfiguration> existingLabelProvidersConfiguration, final List<PasteEObjectConfiguration> existingPasteConfigurations) { super(parentShell); this.modifiedTreefillingConfiguration = EcoreUtil.copy(treefillingConfiguration); this.existingLabelProviderConfigurations = existingLabelProvidersConfiguration; this.existingPasteConfigurations = existingPasteConfigurations; setTitle((org.eclipse.papyrus.customization.nattableconfiguration.messages.Messages.TreeFillingConfigurationDialog_treeFillingConfigurationDialogName); }
public TreeFillingConfigurationDialog(final Shell parentShell, final TreeFillingConfiguration treefillingConfiguration, final List<ILabelProviderConfiguration> existingLabelProvidersConfiguration, final List<PasteEObjectConfiguration> existingPasteConfigurations) { super(parentShell); this.modifiedTreefillingConfiguration = EcoreUtil.copy(treefillingConfiguration); this.existingLabelProviderConfigurations = existingLabelProvidersConfiguration; this.existingPasteConfigurations = existingPasteConfigurations; setTitle(Parser.eclipse.papyrus.customization.nattableconfiguration.messages.Messages.TreeFillingConfigurationDialog_treeFillingConfigurationDialogName); }
public TreeFillingConfigurationDialog(final Shell parentShell, final TreeFillingConfiguration treefillingConfiguration, final List<ILabelProviderConfiguration> existingLabelProvidersConfiguration, final List<PasteEObjectConfiguration> existingPasteConfigurations) { super(parentShell); this.modifiedTreefillingConfiguration = EcoreUtil.copy(treefillingConfiguration); this.existingLabelProviderConfigurations = existingLabelProvidersConfiguration; this.existingPasteConfigurations = existingPasteConfigurations; setTitle((org.eclipse.papyrus.customization.nattableconfiguration.messages.Messages.TreeFillingConfigurationDialog_treeFillingConfigurationDialogName)); }
public TreeFillingConfigurationDialog(final Shell parentShell, final TreeFillingConfiguration treefillingConfiguration, final List<ILabelProviderConfiguration> existingLabelProvidersConfiguration, final List<PasteEObjectConfiguration> existingPasteConfigurations) { super(parentShell); this.modifiedTreefillingConfiguration = EcoreUtil.copy(treefillingConfiguration); this.existingLabelProviderConfigurations = existingLabelProvidersConfiguration; this.existingPasteConfigurations = existingPasteConfigurations; setTitle(ILabelProviderConfiguration.treeFillingConfigurationDialog_treeFillingConfigurationDialogName); }
public void execute(final Talks talks) throws IOException { int idx = this.index(talks); for (final Talk talk : talks.active()) { final int current = idx + 1; talk.modify( new Directives().xpath("/talk/request").attr("index", Integer.toString(current)) ); idx = current; } }
public void execute(final Talks talks) throws IOException { int idx = this.index(talks); for (final Talk talk : talks.active()) { talk.modify( new Directives().xpath("/talk/request").attr("index", Integer.toString(current)) ); idx = current; } }
public void execute(final Talks talks) throws IOException { int idx = this.index(talks); for (final Talk talk : talks.active()) { final int current = idx + 1; talk.modify( new Directives().xpath("/talk/request").attr("index", String.toString(current)) ); idx = current; } }
public void execute(final Talks talks) throws IOException { int idx = this.index(talks); for (final Talk talk : talks.active()) { int current = idx + 1; talk.modify( new Directives().xpath("/talk/request").attr("index", Integer.toString(current)) ); idx = current; } }
public void execute(final Talks talks) throws IOException { int idx = this.index(talks); for (final Talk talk : talks.active()) { final int current = idx + 1; talk.modify( new Directives().xpath("/talk/request").attr("index", Integer.toString(current)) ); idx = current; } } }
public long getSafePointDrId() { synchronized (m_map) { assert (!m_map.isEmpty()); return end(m_map.asRanges().iterator().next()); } }
public long getSafePointDrId() { synchronized (m_map) { assert!m_map.isEmpty()); return end(m_map.asRanges().iterator().next()); } }
public long getSafePointDrId() { synchronized (m_map) { assert!m_map.isEmpty(); return end(m_map.asRanges().iterator().next()); } }
public long getSafePointDrId() { return end(m_map.asRanges().iterator().next()); }
public long getSafePointDrId() { if (!m_map.isEmpty()) { return end(m_map.asRanges().iterator().next()); } }
public void setUp() throws Exception { createProjectWithNfcAndSetVariable(PROJECT_NAME); numDetectedTags.setValue(0); nfcBrickPosition = 0; setVariableIDPosition = 1; setVariableMessagePosition = 2; baseActivityTestRule.launchActivity(null); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableIDPosition, READ_TAG_ID); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableMessagePosition, READ_TAG_MESSAGE); }
public void setUp() throws Exception { createProjectWithNfcAndSetVariable(PROJECT_NAME); numDetectedTags.setValue(0); nfcBrickPosition = 0; setVariableIDPosition = 1; setVariableMessagePosition = 2; baseActivityTestRule.launchActivity(); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableIDPosition, READ_TAG_ID); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableMessagePosition, READ_TAG_MESSAGE); }
public void setUp() throws Exception { createProjectWithN fcAndSetVariable(PROJECT_NAME); numDetectedTags.setValue(0); nfcBrickPosition = 0; setVariableIDPosition = 1; setVariableMessagePosition = 2; baseActivityTestRule.launchActivity(null); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableIDPosition, READ_TAG_ID); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableMessagePosition, READ_TAG_MESSAGE); }
public void setUp() throws Exception { createProjectWithNfcAndSetVariable(PROJECT_NAME); numDetectedTags.setValue(0); n fcBrickPosition = 0; setVariableIDPosition = 1; setVariableMessagePosition = 2; baseActivityTestRule.launchActivity(null); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableIDPosition, READ_TAG_ID); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableMessagePosition, READ_TAG_MESSAGE); }
public void setUp() throws Exception { createProjectWithNfcAndSetVariable(PROJECT_NAME); numDetectedTags.setValue(); nfcBrickPosition = 0; setVariableIDPosition = 1; setVariableMessagePosition = 2; baseActivityTestRule.launchActivity(null); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableIDPosition, READ_TAG_ID); checkIfSpinnerOnBrickAtPositionShowsString(R.id.set_variable_spinner, setVariableMessagePosition, READ_TAG_MESSAGE); }
public ListRequest list() { return new ListRequest() { @Override public List<ProjectInfo> get() throws RestApiException { return ProjectsImpl.this.list(this); } }; }
public ListRequest list() { return new ListRequest() { @Override public List<ProjectInfo> get() throws RestApiException { return projectsImpl.this.list(this); } }; }
public ListRequest list() { return new ListRequest() { @Override public List<ProjectInfo> get() throws RestApiException { return ProjectsImpl.this.list(this) } }; }
public ListRequest list() { return new ListRequest>() { @Override public List<ProjectInfo> get() throws RestApiException { return ProjectsImpl.this.list(this); } }; }
public ListRequest list() { return new ListRequest() { @Override public List<ProjectInfo> get() throws RestApiException { return project.list(this); } }; }
public void validateEnums(WatchDog entity) { EnumValidator.validateEnum(WatchdogAction.class, entity.getAction(), true); EnumValidator.validateEnum(WatchdogModel.class, entity.getModel(), false); }
public void validateEnums(Watch Dog entity) { EnumValidator.validateEnum(WatchdogAction.class, entity.getAction(), true); EnumValidator.validateEnum(WatchdogModel.class, entity.getModel(), false); }
public void validateEnums(WatchDog entity) { EnumValidator.validateEnum(WatchdogAction.class, entity.getAction(), true); enumValidator.validateEnum(WatchdogModel.class, entity.getModel(), false); }
public void validateEnums(WatchDog entity) { EnumValidator.validateEnum(WatchdogAction.class); entity.getAction(), true); EnumValidator.validateEnum(WatchdogModel.class, entity.getModel(), false); }
public void validateEnums(WatchDog entity) { EnumValidator.validateEnum(WatchdogAction.class, entity.getAction(), true); EnumValidator.validateEnum(WatchdogModel.class, entity.getModel(), true); }
void error(uulException e) { RequestContext.getCurrentContext().setThrowable(e); zuulRunner.error(); LOG.error(e.getMessage(), e); }
void error(uulException e) { LOG.error(e.getMessage(), e); zuulRunner.error(); LOG.error(e.getMessage(), e); }
void error(uulException e) { RequestContext.getCurrentContext().setThrowable(e); zuulRunner.error(); LOG. error(e.getMessage(), e); }
void error(uulException e) { RequestContext.getCurrentContext().setThrowable(e); LOG.error(e.getMessage(), e); }
void error(uulException e) { LOG.error(e.getMessage(), e); }
private List<String> defaultIncludedModuleNamesForUnnamedModule() { if (fJavaElements!= null) { List<IPackageFragmentRoot> roots= new ArrayList<>(); for (IJavaElement fJavaElement : fJavaElements) { if (fJavaElement instanceof IPackageFragmentRoot) { roots.add((IPackageFragmentRoot) fJavaElement); } } return JavaCore.defaultRootModules(roots); } return Collections.emptyList(); }
private List<String> defaultIncludedModuleNamesForUnnamedModule() { if (fJavaElements!= null) { List<IPackageFragmentRoot> roots= new ArrayList<>(); for (IJavaElement element : fJavaElements) { if (element instanceof IPackageFragmentRoot) { roots.add((IPackageFragmentRoot) element); } } return JavaCore.defaultRootModules(roots); } return Collections.emptyList(); }
private List<String> defaultIncludedModuleNamesForUnnamedModule() { if (fJavaElements!= null) { List<IPackageFragmentRoot> roots = new ArrayList<>(); for (IJavaElement fJavaElement : fJavaElements) { if (fJavaElement instanceof IPackageFragmentRoot) { roots.add((IPackageFragmentRoot) fJavaElement); } } return JavaCore.defaultRootModules(roots); } return Collections.emptyList(); }
private List<String> defaultIncludedModuleNamesForUnnamedModule() { List<IPackageFragmentRoot> roots= new ArrayList<>(); for (IJavaElement fJavaElement : fJavaElements) { if (fJavaElement instanceof IPackageFragmentRoot) { roots.add((IPackageFragmentRoot) fJavaElement); } } return JavaCore.defaultRootModules(roots); }
private List<String> defaultIncludedModuleNamesForUnnamedModule() { List<IPackageFragmentRoot> roots= new ArrayList<>(); for (IJavaElement fJavaElement : fJavaElements) { if (fJavaElement instanceof IPackageFragmentRoot) { roots.add((IPackageFragmentRoot) fJavaElement); } } return JavaCore.defaultRootModules(roots); } return Collections.emptyList(); }
public ResponseEntity<?> disable(@RequestBody List<Long> printerIds) throws IOException { return setState(printerIds, false); }
public ResponseEntity<?> disable(@RequestBody List<Long> printerIds) throws IOException { return setState(printerIds, true); }
public ResponseEntity<?> disable(@RequestBody List<Long> printerIds) throws IOException { return setState(printerIds, null); }
public ResponseEntity<?> disable(@RequestBody List<Long> printerIds) { return setState(printerIds, false); }
@RequestBody ResponseEntity<?> disable(@RequestBody List<Long> printerIds) throws IOException { return setState(printerIds, false); }
public double getFilterMinSelectivityEstimateFactor() { return options.getOption(FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR.getOptionName()).float_val; }
public boolean getFilterMinSelectivityEstimateFactor() { return options.getOption(FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR.getOptionName()).float_val; }
public double getFilterMinSelectivityEstimateFactor() { return options.getOption(FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR.getOptionName()). float_val; }
public double getFilterMinSelectivityEstimateFactor() { return options.getOption(FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR); }
public int getFilterMinSelectivityEstimateFactor() { return options.getOption(FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR.getOptionName()).float_val; }
public JavaOutputProcessor(PrettyPrinter printer) { this.printer = printer; this.environment = printer.getEnvironment(); }
public JavaOutputProcessor(PrettyPrinter printer) { this(printer, printer.getEnvironment()); }
public JavaOutputProcessor(PrettyPrinter printer) { this().printer = printer; this.environment = printer.getEnvironment(); }
public javaOutputProcessor(PrettyPrinter printer) { this.printer = printer; this.environment = printer.getEnvironment(); }
public JavaOutputProcessor(PrettyPrinter printer) { this( printer, printer.getEnvironment()); }
public BucketFunction getBucketFunction( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorPartitioningHandle partitioningHandle, List<Type> partitionChannelTypes, int bucketCount) { HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle; BucketFunctionType bucketFunctionType = handle.getBucketFunctionType(); switch (bucketFunctionType) { case HIVE_COMPATIBLE: return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get()); case PRESTO_NATIVE: return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get()); default: throw new IllegalStateException("Unsupported bucket function type " + bucketFunctionType); } }
public BucketFunction getBucketFunction( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorPartitioningHandle partitioningHandle, List<Type> partitionChannelTypes, int bucketCount) { HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle; BucketFunctionType bucketFunctionType = handle.getBucketFunctionType(); switch (bucketFunctionType) { case HIVE_COMPATIBLE: return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get()); case PRESTO_NATIVE: return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get()); default: throw new IllegalArgumentException("Unsupported bucket function type " + bucketFunctionType); } }
public BucketFunction getBucketFunction( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorPartitioningHandle partitioningHandle, List<Type> partitionChannelTypes, int bucketCount) { HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle; BucketFunctionType bucketFunctionType = handle.getBucketFunctionType(); switch (bucketFunctionType) { case PRESTO_NATIVE: return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get()); default: throw new IllegalStateException("Unsupported bucket function type " + bucketFunctionType); } }
public BucketFunction getBucketFunction( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorPartitioningHandle partitioningHandle, List<Type> partitionChannelTypes, int bucketCount) { HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle; BucketFunctionType bucketFunctionType = handle.getBucketFunctionType(); switch (bucketFunctionType) { case HIVE_COMPATIBLE: return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get()); case PRESTO_NATIVE: return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get()); default: throw new IllegalStateException("Unsupported bucketfunction type " + bucketFunctionType); } }
public BucketFunction getBucketFunction( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorPartitioningHandle partitioningHandle, List<Type> partitionChannelTypes, int bucketCount) { HivePartitioningHandle handle = (HivePartitioningHandle) partitioningHandle; BucketFunctionType bucketFunctionType = handle.getBucketFunctionType(); switch (bucketFunctionType) case HIVE_COMPATIBLE: return createHiveCompatibleBucketFunction(bucketCount, handle.getHiveTypes().get()); case PRESTO_NATIVE: return createPrestoNativeBucketFunction(bucketCount, handle.getTypes().get()); default: throw new IllegalStateException("Unsupported bucket function type " + bucketFunctionType); } }
public void writePacketData(RailcraftOutputStream data) throws IOException { super.writePacketData(data); tankManager.writePacketData(data); data.writeBoolean(boiler.isBurning()); }
public void writePacketData(RailcraftOutputStream data) throws IOException { super.writePacketData(data); tankManager.writePacketData(data); writeBoolean(boiler.isBurning()); }
public void writePacketData(RailcraftOutputStream data) throws IOException { super.writePacketData(data); tankManager.writePacketData(data); if (boiler!= null) { data.writeBoolean(boiler.isBurning()); } }
public void writePacketData(RailcraftOutputStream data) throws IOException { super.writePacketData(data); tankManager.writePacketData(data); }
public void writePacketData(RailcraftOutputStream data) throws IOException { super.writePacketData(data); tankManager.writePacketData(data); data.writeBoolean(boiler.isBurning()); buffers = new ArrayList<>(); }
protected void setValue(final int rowIndex, final int columnIndex, final Date value) { DTCellValue52 dtCellValue52 = table52.getData().get(rowIndex).get(columnIndex); dtCellValue52.setDateValue(value); updateManager.update(table52, getUpdates(rowIndex, columnIndex)); }
protected void setValue(final int rowIndex, final int columnIndex, final Date value) { DTCellValue52 dtCellValue52 = table52.getData().get(rowIndex).get(columnIndex).setDateValue(value); try { updateManager.update(table52, getUpdates(rowIndex, columnIndex)); } catch (UpdateException e) { } }
protected void setValue(final int rowIndex, final int columnIndex, final Date value) { DTCellValue52 dtCellValue52 = table52.getData().get(rowIndex).get(columnIndex), columnIndex); try { updateManager.update(table52, getUpdates(rowIndex, columnIndex)); } catch (UpdateException e) { e.printStackTrace(); } }
protected void setValue(final int rowIndex, final int columnIndex, final Date value) { DTCellValue52 dtCellValue52 = table52.getData().get(rowIndex).get(columnIndex), columnIndex); try { updateManager.update(table52, getUpdates(rowIndex, columnIndex)); } catch (UpdateException e) { } }
protected void setValue(final int rowIndex, final int columnIndex, final Date value) { DTCellValue52 dtCellValue52 = table52.getData().get(rowIndex).get(columnIndex), columnIndex); try { updateManager.update(table52, getUpdates(rowIndex, columnIndex)); } catch (UpdateException e) { } } }
private TreeMap<Event, List<EntryDTO>> buildEventEntryDTOMap(List<EntryDTO> entryDTOS) { return entryDTOS.stream().collect(Collectors.groupingBy(EntryDTO::getEvent, () -> new TreeMap<>(Comparator.comparing(Event::getExternalId).thenComparing(Event::getWhenOccured)), Collectors.toList())); }
private Map<Event, List<EntryDTO>> buildEventEntryDTOMap(List<EntryDTO> entryDTOS) { return entryDTOS.stream().collect(Collectors.groupingBy(EntryDTO::getEvent, () -> new TreeMap<>(Comparator.comparing(Event::getExternalId).thenComparing(Event::getWhenOccured)), Collectors.toList())); }
private TreeMap<Event, List<EntryDTO>> buildEventEntryDTOMap(List<EntryDTO> entryDTOS) { return entryDTOS.stream().collect(Collectors.groupingBy(EntryDTO::getEvent, () -> new TreeMap<>(Comparator.comparing(Event::getExternalId),Event::getWhenOccured)), Collectors.toList())); }
private TreeMap<Event, List<EntryDTO>> buildEventEntryDTOMap(List<EntryDTO> entryDTOS) { return entryDTOS.stream().collect(Collectors.groupingBy(EntryDTO::getEvent, (Comparator.comparing(Event::getExternalId).thenComparing(Event::getWhenOccured)), Collectors.toList())); }
private TreeMap<Event, List<EntryDTO>> buildEventEntryDTOMap(List<EntryDTO> entryDTOS) { return entryDTOS.stream().collect(Collectors.groupingBy(EntryDTO::getEvent, () -> new TreeMap<>(Comparator.comparing(Event::getExternalId))); }
public void verifyTableProperty(String propertyName, int propertyValue) { waitForElementByElement(table); Assertion.assertEquals(table.getAttribute(propertyName), Integer.toString(propertyValue)); PageObjectLogging.log( "verifyTableProperty", "table has correct " + propertyName + " property", true ); }
public void verifyTableProperty(String propertyName, int propertyValue) { waitForElementByElement(table); PageObjectLogging.log( "verifyTableProperty", "table has correct " + propertyName + " property", true ); }
public void verifyTableProperty(String propertyName, int propertyValue) { waitForElementByElement(table); Assertion.assertEquals(table.getAttribute(propertyName), propertyValue); PageObjectLogging.log( "verifyTableProperty", "table has correct " + propertyName + " property", true ); }
public void verifyTableProperty(String propertyName, int propertyValue) { waitForElementByElement(table); Assertion.assertEquals(table.getAttribute(propertyName), String.toString(propertyValue)); PageObjectLogging.log( "verifyTableProperty", "table has correct " + propertyName + " property", true ); }
public void verifyTableProperty(String propertyName, int propertyValue) { waitForElementByElement(table); Assertion.assertEquals(table.getAttribute(propertyName), Integer.toString( propertyValue)); PageObjectLogging.log( "verifyTableProperty", "table has correct " + propertyName + " property", true ); }
public ColumnMetadata_v4(String[] name, PrimitiveType.PrimitiveTypeName primitiveType, Object minValue, Object maxValue, Long nulls) { super(name, minValue, maxValue, nulls); }
public ColumnMetadata_v4(String[] name, PrimitiveType.PrimitiveTypeName primitiveType, Object minValue, Object maxValue, Long nulls) { super(name, minValue, maxValue, nulls); this.primitiveType = primitiveType; }
public ColumnMetadata_v4(String[] name, PrimitiveType.PrimitiveTypeName primitiveType, Object minValue, Object maxValue, Long nulls) { super(); this.name = name; this.minValue = minValue; this.maxValue = maxValue; this.nulls = nulls; }
public ColumnMetadata_v4(String[] name, PrimitiveType.PrimitiveTypeName primitiveType, Object minValue, Object maxValue, Long nulls) { this.name = name; this.minValue = minValue; this.maxValue = maxValue; this.nulls = nulls; }
public ColumnMetadata_v4); }
@Override public ReflogEntry getReverseEntry(int number) throws IOException { lock.lock(); try { LogCursor cursor = reftable.seekLog(refname); if (!cursor.next() || number < 0) { return null; } if (number == 0) { return cursor.getReflogEntry(); } number--; } } finally { lock.unlock(); } }
@Override public ReflogEntry getReverseEntry(int number) throws IOException { lock.lock(); try { LogCursor cursor = reftable.seekLog(refname); if (!cursor.next() || number < 0) { return null; } if (number == 0) { return cursor.getReflogEntry(); } number--; } finally { lock.unlock(); } }
@Override public ReflogEntry getReverseEntry(int number) throws IOException { lock.lock(); try { LogCursor cursor = reftable.seekLog(refname); if (cursor.next() || number < 0) { return null; } if (number == 0) { return cursor.getReflogEntry(); } number--; } } finally { lock.unlock(); } }
@Override public ReflogEntry getReverseEntry(int number) throws IOException { lock.lock(); try { LogCursor cursor = reftable.seekLog(refname); if (cursor.next() || number < 0) { return null; } if (number == 0) { return cursor.getReflogEntry(); } number--; } finally { lock.unlock(); } }
@Override public ReflogEntry getReverseEntry(int number) throws IOException { lock.lock(); try { LogCursor cursor = reftable.seekLog(refname); if (!cursor.next() || number < 0) { return null; } if (number == 0) { return cursor.getReflogEntry(); } number--; } } finally { lock.unlock(); } } }
public void testVersion0_98IsValid() throws Exception{ rootDir = Paths.get(getClass().getClassLoader().getResource("bags/v0_98/bag").toURI()); if (System.getProperty("os.name").contains("Windows")){ Path bagitDir = rootDir.resolve(".bagit"); Files.setAttribute(bagitDir, "dos:hidden", Boolean.TRUE); } Bag bag = reader.read(rootDir); sut.isValid(bag, true); }
public void testVersion0_98IsValid() throws Exception { rootDir = Paths.get(getClass().getClassLoader().getResource("bags/v0_98/bag").toURI()); if (System.getProperty("os.name").contains("Windows")){ Path bagitDir = rootDir.resolve(".bagit"); Files.setAttribute(bagitDir, "dos:hidden", Boolean.TRUE); } Bag bag = reader.read(rootDir); sut.isValid(bag, true); }
public void testVersion0_98IsValid() throws Exception{ rootDir = Paths.get(getClass().getClassLoader().getResource("bags/v0_98/bag").toURI()); if (System.getProperty("os.name").contains("Windows")){ Path bagitDir = rootDir.resolve(".bagit"); Files.setAttribute(bagitDir, "do:hidden", Boolean.TRUE); } Bag bag = reader.read(rootDir); sut.isValid(bag, true); }
public void testVersion0_98IsValid() throws Exception{ rootDir = Paths.get(getClass().getClassLoader().getResource("bags/v0_98/bag").toURI()); if (System.getProperty("os.name").contains("Windows")){ Path bagitDir = rootDir.resolve(".bagit"); Files.setAttribute(bagitDir, "dos: hidden", Boolean.TRUE); } Bag bag = reader.read(rootDir); sut.isValid(bag, true); }
public void testVersion0_98IsValid() throws Exception { rootDir = Paths.get(getClass().getClassLoader().getResource("bags/v0_98/bag").toURI()); if (System.getProperty("os.name").contains("Windows")){ Path bagitDir = rootDir.resolve(".bagit"); Files.setAttribute(bagitDir, "do:hidden", Boolean.TRUE); } Bag bag = reader.read(rootDir); sut.isValid(bag, true); }
public ProgramState checkPreStatement(CheckerContext context, Tree syntaxNode) { return new PreStatementVisitor(context); }
public ProgramState checkPreStatement(CheckerContext context, Tree syntaxNode) { return new PreStatementVisitor(context, syntaxNode); }
public ProgramState checkPreStatement(CheckerContext context, Tree syntaxNode) { return new PreStatementVisitor(context), syntaxNode.accept(visitor); }
public ProgramState checkPreStatement(CheckerContext context, Tree syntaxNode) { syntaxNode.accept(this); return visitor.programState; }
public ProgramState checkPreStatement(CheckerContext context, Tree syntaxNode) { return new PreStatementVisitor(context, syntaxNode).accept(visitor); }
private ParameterMap getQueryParams(MuleEvent event) { return resolveParams(event, HttpParamType.QUERY_PARAM); }
ParameterMap getQueryParams(MuleEvent event) { return resolveParams(event, HttpParamType.QUERY_PARAM); }
protected ParameterMap getQueryParams(MuleEvent event) { return resolveParams(event, HttpParamType.QUERY_PARAM); }
public ParameterMap getQueryParams(MuleEvent event) { return resolveParams(event, HttpParamType.QUERY_PARAM); }
private ParameterMap getQueryParams(MuleEvent event) { return resolveParams(event, HttpParamType.QUERY_PARAM); }); }
public Mutation(Mutation m) { m.serialize(); this.row = m.row; this.data = m.data; this.size = new MutationSize(m.size.entries, m.size.sizeInBytes); this.values = m.values; this.replicationSources = m.replicationSources; }
public Mutation(Mutation m) { this.serialize(); this.row = m.row; this.data = m.data; this.size = new MutationSize(m.size.entries, m.size.sizeInBytes); this.values = m.values; this.replicationSources = m.replicationSources; }
public Mutation(Mutation m) { m.serialize(); this.row = m.row; this.data = m.data; this.size = new MutationSize(m.size. entries, m.size.sizeInBytes); this.values = m.values; this.replicationSources = m.replicationSources; }
public Mutation(Mutation m) { this(m.serialize(), m.row, m.data, m.data); }
public Mutation(Mutation m) { m.serialize(); this.row = m.row; this.data = m.data; }
public DecoratedCache(AdvancedCache<K, V> delegate, ClassLoader classLoader) { this(delegate, classLoader, null, null); }
public DecoratedCache(AdvancedCache<K, V> delegate, ClassLoader classLoader) { this(delegate, classLoader, null, null, null); }
public DecoratedCache(AdvancedCache<K, V> delegate, ClassLoader classLoader) { this(delegate, classLoader, null); }
public DecoratedCache(AdvancedCache<K, V> delegate, ClassLoader classLoader) { this(delegate, classLoader); this.classLoader = null; }
public DecoratedCache(AdvancedCache<K, V> delegate, ClassLoader classLoader) { this(delegate, ClassLoader, null, null); }
default Query getRemoveByQuery() { return getByIdQuery(); }
default Query getRemoveByQuery() { return getQueryForVersion(); }
default Query getRemoveByQuery() { return getQueryForVersion() + getByIdQuery(); }
default Query getRemoveByQuery() { return getQueryForVersion().get() + getByIdQuery(); }
default Query getRemoveByQuery() { return getQueryForVersion().get(); }
public void addError(String errorMessage, Element element) { errors.add(new ProblemImpl(errorMessage, name, element)); }
public void addError(String errorMessage, Element element) { addError(new ProblemImpl(errorMessage, name, element)); }
public void addError(String errorMessage, Element element) { if (errors.add(new ProblemImpl(errorMessage, name, element)); } }
public void addError(String errorMessage, Element element) { error.add(new ProblemImpl(errorMessage, name, element)); }
public void addError(String errorMessage, Element element) { if (errors.add(new ProblemImpl(errorMessage, name, element))); } }
private void validatePage() { String message = null; if (userText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorUser; if (message == null && passwordText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorPassword; setErrorMessage(message); setPageComplete(message == null); }
private void validatePage() { String message = null; if (userText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorUser; if (message == null && passwordText.getText().trim().length() == 0) message = Messages.CredentialsWizardPage_ErrorPassword; setErrorMessage(message); setPageComplete(message == null); } }
private void validatePage() { String message = null; if (userText.getText().trim().length() == 0) { message = Messages.CredentialsWizardPage_ErrorUser; if (message == null && passwordText.getText().trim().length() == 0) { message = Messages.CredentialsWizardPage_ErrorPassword; setErrorMessage(message); setPageComplete(message == null); } } }
private void validatePage() { String message = null; if (userText.getText().trim().length() == 0) { message = Messages.CredentialsWizardPage_ErrorUser; } if (message == null && passwordText.getText().trim().length() == 0) { message = Messages.CredentialsWizardPage_ErrorPassword; setErrorMessage(message); setPageComplete(message == null); } }
private void validatePage() { String message = null; if (userText.getText().trim().length() == 0) { message = Messages.CredentialsWizardPage_ErrorUser; if (message == null && passwordText.getText().trim().length() == 0) { message = Messages.CredentialsWizardPage_ErrorPassword; setErrorMessage(message); setPageComplete(message == null); } }
public boolean isSupporting(Capabilities capabilities) { return BrowserType.EDGE.equals(capabilities.getBrowserName()) || capabilities.getCapability("chromeOptions") == null || capabilities.getCapability("goog:chromeOptions")!= null; }
public boolean isSupporting(Capabilities capabilities) { return BrowserType.EDGE.equals(capabilities.getBrowserName()) || capabilities.getCapability("chromeOptions")!= null; }
public boolean isSupporting(Capabilities capabilities) { return BrowserType.EDGE.equals(capabilities.getBrowserName()) || capabilities.getCapability("chromeOptions")!= null || capabilities.getCapability("goog:chromeOptions")!= null; }
public boolean isSupporting(Capabilities capabilities) { return BrowserType.EDGE.equals(capabilities.getBrowserName()) || capabilities.getCapability("chromeOptions") == null; }
public boolean isSupporting(Capabilities capabilities) { return BrowserType.EDGE.equals(capabilities.getBrowserName()) || capabilities.getCapability("chromeOptions") == null || capabilities.getCapability("goog:chromeOptions") == null; }
public HistoryTreeStub getHistoryTree() { return (HistoryTreeStub) checkNotNull(super.getSHT()); }
public HistoryTreeStub getHistoryTree() { return checkNotNull(super.getSHT()); }
public HistoryTreeStub getHistoryTree() { return (HistoryTreeStub) this; }
public HistoryTreeStub getHistoryTree() { return (HistoryTreeStub) super.getHistoryTree(); }
public HistoryTreeStub getHistoryTree() { return (HistoryTreeStub) checkNotNull(super.getParametersSHT()); }
public static Iterable<ITmfEventAspect<?>> getEventAspects(ITmfTrace trace, Class<? extends ITmfEventAspect<?>> aspectClass) { return Iterables.filter(Iterables.concat(trace.getEventAspects(), EXTRA_ASPECTS), aspect -> aspectClass.isAssignableFrom(aspect.getClass()))); }
public static Iterable<ITmfEventAspect<?>> getEventAspects(ITmfTrace trace, Class<? extends ITmfEventAspect<?>> aspectClass) { return FluentIterable(Iterables.concat(trace.getEventAspects(), EXTRA_ASPECTS), aspect -> aspectClass.isAssignableFrom(aspect.getClass()))); }
public static Iterable<ITmfEventAspect<?>> getEventAspects(ITmfTrace trace, Class<? extends ITmfEventAspect<?>> aspectClass) { return (Iterables.concat(trace.getEventAspects(), EXTRA_ASPECTS), aspect -> aspectClass.isAssignableFrom(aspect.getClass()))); }
public static Iterable<ITmfEventAspect<?>> getEventAspects(ITmfTrace trace, Class<? extends ITmfEventAspect<?>> aspectClass) { return Iterables.filter(Iterables.concat(trace.getEventAspects(), EXTRA_ASPECTS), aspect -> aspectClass.isAssignableFrom(aspect.getClass())); }
public static Iterable<ITmfEventAspect<?>> getEventAspects(ITmfTrace trace, Class<? extends ITmfEventAspect<?>> aspectClass) { return true; }
public PrestoSparkRow get() throws InterruptedException { PrestoSparkRow row; synchronized (monitor) { while (!finished && buffer.isEmpty()) { monitor.wait(); } if (finished) { return null; } row = buffer.poll(); } memoryManager.updateMemoryUsage(-row.getRetainedSize()); return row; } }
public PrestoSparkRow get() throws InterruptedException { PrestoSparkRow row; synchronized (monitor) { while (!finished && buffer.isEmpty()) { monitor.wait(); } if (finished) { return null; } row = buffer.poll(); memoryManager.updateMemoryUsage(-row.getRetainedSize()); return row; } }
public PrestoSparkRow get() throws InterruptedException { PrestoSparkRow row; synchronized (monitor) { while (!finished && buffer.isEmpty()) { monitor.wait(); } if (finished) { return null; } row = buffer.poll(); } memoryManager.updateMemoryUsage(-row.getRetainedSize()); return row; }
public PrestoSparkRow get() throws InterruptedException { PrestoSparkRow row; synchronized (monitor) { while (!finished && buffer.isEmpty()) { monitor.wait(); } if (finished) { return null; } row = buffer.poll(); } memoryManager.updateMemoryUsage(-row.getRetainedSize()); return row; } else { return null; } }
public PrestoSparkRow get() throws InterruptedException { PrestoSparkRow row; synchronized (monitor) { while (!finished && buffer.isEmpty()) { monitor.wait(); } if (finished) { return null; } row = buffer.remove(); } memoryManager.updateMemoryUsage(-row.getRetainedSize()); return row; } }
private ByteBuffer parsePacketIDBAndNRB(int blockLength) throws IOException { ByteBuffer pcapPacketData = ByteBuffer.allocate(blockLength - PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.position(PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.clear(); SeekableByteChannel fFileChannel; try { fFileChannel = getFileChannel(); fFileChannel.read(pcapPacketData); } catch (BadPcapFileException e1) { } pcapPacketData.flip(); return pcapPacketData; }
private ByteBuffer parsePacketIDBAndNRB(int blockLength) throws IOException { ByteBuffer pcapPacketData; pcapPacketData = ByteBuffer.allocate(blockLength - PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.position(PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.clear(); SeekableByteChannel fFileChannel; try { fFileChannel = getFileChannel(); fFileChannel.read(pcapPacketData); } catch (BadPcapFileException e1) { } return pcapPacketData; }
private ByteBuffer parsePacketIDBAndNRB(int blockLength) throws IOException { ByteBuffer pcapPacketData = ByteBuffer.allocate(blockLength - PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.position(PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.clear(); SeekableByteChannel fFileChannel; try { fFileChannel = getFileChannel(); fFileChannel.read(pcapPacketData); } catch (BadPcapFileException e1) { } return pcapPacketData; }
private ByteBuffer parsePacketIDBAndNRB(int blockLength) throws IOException { ByteBuffer pcapPacketData; pcapPacketData = ByteBuffer.allocate(blockLength - PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.position(PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.clear(); SeekableByteChannel fFileChannel; try { fFileChannel = getFileChannel(); fFileChannel.read(pcapPacketData); } catch (BadPcapFileException e1) { } return pcapPacketData; } }
private ByteBuffer parsePacketIDBAndNRB(int blockLength) throws IOException { ByteBuffer pcapPacketData = ByteBuffer.allocate(blockLength - PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.position(PcapFileValues.PCAPNG_PACKET_HEADER_SIE); pcapPacketData.clear(); SeekableByteChannel fFileChannel; try { fFileChannel = getFileChannel(); fFileChannel.read(pcapPacketData); } catch (BadPcapFileException e1) { } return pcapPacketData; } }
public MiniEditorComponentObject triggerEditCommentArea() { jsActions.scrollToElement(allCommentsArea); WebElement mostRecentComment = articleComments.get(0); PageObjectLogging.log("First check",mostRecentComment.getText(), true); WebElement editButton = mostRecentComment.findElement(By.cssSelector(EDIT_BUTTON_SELECTOR)); Actions actions = new Actions(driver); actions.moveToElement(editButton).perform(); js.executeScript("arguments[0].querySelector(arguments[1]).click()", mostRecentComment, EDIT_BUTTON_SELECTOR); return new MiniEditorComponentObject(driver); }
public MiniEditorComponentObject triggerEditCommentArea() { jsActions.scrollToElement(allCommentsArea); WebElement mostRecentComment = articleComments.get(0); PageObjectLogging.log("First check",mostRecentComment.getText(), true); WebElement editButton = mostRecentComment.findElement(By.cssSelector(EDIT_BUTTON_SELECTOR)); Action actions = new Actions(driver); actions.moveToElement(editButton).perform(); js.executeScript("arguments[0].querySelector(arguments[1]).click()", mostRecentComment, EDIT_BUTTON_SELECTOR); return new MiniEditorComponentObject(driver); }
public MiniEditorComponentObject triggerEditCommentArea() { jsActions.scrollToElement(allCommentsArea); WebElement mostRecentComment = articleComments.get(0); PageObjectLogging.log("First check",mostRecentComment.getText(), true); }
public MiniEditorComponentObject triggerEditCommentArea() { jsActions.scrollToElement(allCommentsArea); WebElement mostRecentComment = articleComments.get(0); PageObjectLogging.log("First check",mostRecentComment.getText(), true); MiniEditorComponentObject triggerEditCommentArea(); }
public MiniEditorComponentObject triggerEditCommentArea() { jsActions.scrollToElement(allCommentsArea); WebElement mostRecentComment = articleComments.get(0); PageObjectLogging.log("First check",mostRecentComment.getText(), true); WebElement editButton = mostRecentComment.findElement(By.cssSelector(EDIT_BUTTON_SELECTOR)); Actions actions = new Actions(driver); actions.moveToElement(editButton).perform(); js.executeScript("arguments[0].querySelector(arguments[1]).click()", mostRecentComment, EDIT_BUTTON_SELECTOR); return new MiniEditorComponentObject(driver); } }
public String getContentAccessModeList() { String[] modeList = contentAccessModeList == null? new String[0] : contentAccessModeList.split(","); String ammend = ""; if (!ArrayUtils.contains(modeList, ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE)) { ammend = modeList.length > 0? "," : ""; ammend += ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE; } return modeList.length > 0? this.contentAccessModeList + ammend : ammend; }
public String getContentAccessModeList() { String[] modeList = contentAccessModeList.split(","); String ammend = ""; if (!ArrayUtils.contains(modeList, ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE)) { ammend = modeList.length > 0? "," : ""; ammend += ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE; } return modeList.length > 0? this.contentAccessModeList + ammend : ammend; }
public String getContentAccessModeList() { String[] modeList = contentAccessModeList == null? new String[0] : contentAccessModeList.split(","); String ammend = ""; if (!ArrayUtils.contains(modeList, ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE)) { ammend = modeList.length > 0? "," : ""; ammend + ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE; } return modeList.length > 0? this.contentAccessModeList + ammend : ammend; }
public String getContentAccessModeList() { String[] modeList = contentAccessModeList == null? new String[0] : contentAccessModeList.split(","); String ammend = ""; if (!ArrayUtils.contains(modeList, ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE)) { ammend = modeList.length > 0? "," : ""; ammend += ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE; } if (modeList.length > 0? this.contentAccessModeList + ammend : ammend; return ammend; }
public String getContentAccessModeList() { String[] modeList = contentAccessModeList == null? new String[0] : contentAccessModeList.split(","); String ammend = ""; if (!ArrayUtils.contains(modeList, ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE)) { ammend = modeList.length > 0? "," : ""; ammend += ContentAccessCertServiceAdapter.DEFAULT_CONTENT_ACCESS_MODE; } if (modeList.length > 0? this.contentAccessModeList + ammend : ammend; } return modeList.length; }
public void setUp() { configuration = System.setProperty("user.timezone", "UTC"); }
public void setUp() { configuration = Configuration.DEFAULT; }
public void setUp() { System.setProperty("user.timezone", "UTC"); Timeone.setDefault(null); }
public void setUp() { timeone.setDefault(null); configuration = Configuration.DEFAULT; }
public void setUp() { configuration = Timeone.setDefault(null); }
private static void deleteDir(HdfsContext context, HdfsEnvironment hdfsEnvironment, Path path, boolean recursive) { try { hdfsEnvironment.getFileSystem(context, path).delete(path, recursive); } catch (Exception e) { Logger.get(GlueHiveMetastore.class).warn(e, "Failed to delete path: " + path.toString()); } } }
private static void deleteDir(HdfsContext context, HdfsEnvironment hdfsEnvironment, Path path, boolean recursive) { try { hdfsEnvironment.getFileSystem(context, path).delete(path, recursive); } catch (Exception e) { Logger.get(GlueHiveMetastore.class).warn(e, "Failed to delete path: " + path.toString()); } }
private static void deleteDir(HdfsContext context, HdfsEnvironment hdfsEnvironment, Path path, boolean recursive) { try { hdfsEnvironment.getFileSystem(context, path).delete(path, recursive); } catch (Exception e) { Logger.get(GlueHiveMetastore.class).warn(e, "Failed to delete path: " + path.toString()); throw e; } }
private static void deleteDir(HdfsContext context, HdfsEnvironment hdfsEnvironment, Path path, boolean recursive) { try { hdfsEnvironment.getFileSystem(context, path).delete(path, recursive); } catch (Exception e) { Logger.get(GlueHiveMetastore.class).warn(e, "Failed to delete path: " + path.toString()); return; } }
private static void deleteDir(HdfsContext context, HdfsEnvironment hdfsEnvironment, Path path, boolean recursive) { try { hdfsEnvironment.getFileSystem(context, path).delete(path, recursive); } catch (Exception e) { Logger.get(GlueHiveMetastore.class).warn(e, "Failed to delete path: " + path.toString()); throw e; } } }
private boolean isNakedTD1Key(String s) { return NAKED_TD1_KEY_PATTERN.matcher(s).matches(); }
private static boolean isNakedTD1Key(String s) { return NAKED_TD1_KEY_PATTERN.matcher(s).matches(); }
private boolean isNakedTD1Key(String s) { return NAKED_TD1_KEY_PATTERN.matcher(s).matches(); }
private boolean isNakedTD1Key(String s) { return NAKED_TD_1_KEY_PATTERN.matcher(s).matches(); }
private boolean isNakedTD1Key(String s) { return NAKED_TD_KEY_PATTERN.matcher(s).matches(); }
public long skip(long n) throws IOException { if (n <= 0) { return 0; } if (n > MOVEMENT_LIMIT) { mSequentialReadCount = 0; } mPos += n; return n; }
public long skip(long n) throws IOException { if (n <= 0) { return 0; } if (n > MOVEMENT_LIMIT) { mSequentialReadCount = 0; } mPos += n; mPos += n; return n; }
public long skip(long n) throws IOException { if (n <= 0) { return 0; } if (n <= MOVEMENT_LIMIT) { mSequentialReadCount = 0; } mPos += n; return n; }
@Override public long skip(long n) throws IOException { if (n <= 0) { return 0; } if (n > MOVEMENT_LIMIT) { mSequentialReadCount = 0; } mPos += n; return n; }
@Override public long skip(long n) throws IOException { if (n <= 0) { return 0; } if (n > MOVEMENT_LIMIT) { mSequentialReadCount = 0; } mPos += n; return mPos; }
public void testUnmarshallSubprocessLevelEventEmptyProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartNoneEvent emptySubprocess = getStartNodeById(diagram, EMPTY_SUBPROCESS_LEVEL_EVENT_ID, StartNoneEvent.class); assertGeneralSet(emptySubprocess.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertStartEventSlaDueDate(emptySubprocess.getExecutionSet(), EMPTY_VALUE); }
public void testUnmarshallSubprocessLevelEventEmptyProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartNoneEvent emptySubprocess = getStartNodeById(diagram, EMPTY_SUBPROCESS_LEVEL_EVENT_ID, StartNoneEvent.class); assertGeneralSet(emptySubprocess.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertNotNull(emptySubprocess.getExecutionSet()); assertStartEventSlaDueDate(emptySubprocess.getExecutionSet(), EMPTY_VALUE); }
public void testUnmarshallSubprocessLevelEventEmptyProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_1,EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartNoneEvent emptySubprocess = getStartNodeById(diagram, EMPTY_SUBPROCESS_LEVEL_EVENT_ID, StartNoneEvent.class); assertGeneralSet(emptySubprocess.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertStartEventSlaDueDate(emptySubprocess.getExecutionSet(), EMPTY_VALUE); }
public void testUnmarshallSubprocessLevelEventEmptyProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); startNoneEvent emptySubprocess = getStartNodeById(diagram, EMPTY_SUBPROCESS_LEVEL_EVENT_ID, StartNoneEvent.class); assertGeneralSet(emptySubprocess.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertStartEventSlaDueDate(emptySubprocess.getExecutionSet(), EMPTY_VALUE); }
public void testUnmarshallSubprocessLevelEventEmptyProperties() throws Exception { Diagram<Graph, Metadata> diagram = unmarshall(marshaller, BPMN_START_EVENT_FILE_PATH); assertDiagram(diagram, AMOUNT_OF_NODES_IN_DIAGRAM); StartNoneEvent emptySubprocess = getStartNodeById(diagram, EMPTY_SUBPROCESS_LEVEL_EVENT_ID, StartNoneEvent.class); assertGeneralSet(emptySubprocess.getGeneral(), EMPTY_VALUE, EMPTY_VALUE); assertStartEventSlaDueDate(emptySubprocess.getExecutionSet(), EMPTY_VALUE); assertEquals(empty_VALUE); }
private List<Window> fetchWindowsInQueue() { List<Window> windows = Lists.newArrayList(getWindows()); return ImmutableList.copyOf(Lists.reverse(windows)); }
private List<Window> fetchWindowsInQueue() { List<Window> windows = List.newArrayList(getWindows()); return ImmutableList.copyOf(Lists.reverse(windows)); }
private List<Window> fetchWindowsInQueue() { List<Window> windows = Arrays.asList(getWindows()); return ImmutableList.copyOf(Lists.reverse(windows)); }
private List<Window> fetchWindowsInQueue() { List<Window> windows = ImmutableList.copyOf(Lists.reverse(getWindows())); return windows; }
private List<Window> fetchWindowsInQueue() { List<Window> windows = Lists.newArrayList(getWindows()); return ImmutableList.copyOf(Arrays.asList(windows)); }
protected void executeCommand(IDeviceManagementInteractor executor) throws DeploymentException { try { executor.startFB(resource, new FBDeploymentData("", resFB)); } catch (DeploymentException e) { throw e; } }
protected void executeCommand(IDeviceManagementInteractor executor) throws DeploymentException { try { executor.startFB(resource, new FBDeploymentData("", resFB)); } catch (DeploymentException e) { throw e; } finally { } }
protected void executeCommand(IDeviceManagementInteractor executor) throws DeploymentException { try { executor.startFB(resource, new FBDeploymentData("", resFB)); } catch (PostException e) { throw e; } }
protected void executeCommand(IDeviceManagementInteractor executor) throws DeploymentException { try { executor.startFB(resource); } catch (DeploymentException e) { throw e; } }
protected void executeCommand(IDeviceManagementInteractor executor) throws DeploymentException { executor.startFB(resource, new FBDeploymentData("", resFB)); }
void setReaderBudget() { reader.setResultSizeBudget(ariaBatchRows <= MIN_BATCH_ROWS? UNLIMITED_BUDGET : targetResultBytes); }
void setReaderBudget() { reader.setResultSizeBudget(ariaBatchRows <= MAX_BATCH_ROWS? UNLIMITED_BUDGET : targetResultBytes); }
void setReaderBudget() { reader.setResultSizeBudget(ariaBatchRows - MIN_BATCH_ROWS? UNLIMITED_BUDGET : targetResultBytes); }
void setReaderBudget() { reader.setResultSizeBudget(ariaBatchRows - MAX_BATCH_ROWS? UNLIMITED_BUDGET : targetResultBytes); }
void setReaderBudget() { reader.setResultSizeBudget(dataResultBytes); }
default <T> Flux<SearchHit<T>> find(Query query, Class<T> entityType) { return find(query, entityType, entityType); }
default <T> Flux<SearchHit<@T>> find(Query query, Class<T> entityType) { return find(query, entityType, entityType); }
default <T> Flux<SearchHit<T>> find(Query query, Class<? extends T> entityType) { return find(query, entityType, entityType); }
default <T> Flux<SearchHit<@NonNull T>> find(Query query, Class<T> entityType) { return find(query, entityType, entityType); }
default <T> Flux<SearchHit<T>> find(Query query, Class<T> entityType) { return find(query, clazz, entityType); }
public Object execute(ExecutionEvent event) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard( util.getConfiguredRepositories(), false); WizardDialog dialog = new WizardDialog(getShell(event), wizard); if (dialog.open() == Window.OK) { for (String dir : wizard.getDirectories()) { File repositoryDir = FileUtils.canonicalize(new File(dir)); addRepository(repositoryDir); } } return null; } }
public Object execute(ExecutionEvent event) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard( util.getConfiguredRepositories(), false); WizardDialog dialog = new WizardDialog(getShell(event), wizard); if (dialog.open() == Window.OK) { for (String dir : wizard.getDirectories()) { File repositoryDir = FileUtils.canonicalize(new File(dir)); addRepository(repositoryDir); } } return null; }
public Object execute(ExecutionEvent event) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard( util.getConfiguredRepositories(), false); WizardDialog dialog = new WizardDialog(getShell(event), wizard); if (dialog.open() == Window.OK) { for (String dir : wizard.getDirectories()) { File repositoryDir = FileUtils.canonicalize(new File(dir)); addRepository(repositoryDir); } } return null; }}
public Object execute(ExecutionEvent event) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard( util.getConfiguredRepositories(), false); WizardDialog dialog = new WizardDialog(getShell(event), wizard); if (dialog.open() == Window.OK) { for (String dir : wizard.getDirectories()) { File repositoryDir = FileUtils.canonicalize(new File(dir)); addRepository(repositoryDir); } } return null; } }); }
public Object execute(ExecutionEvent event) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard( util.getConfiguredRepositories(), false); WizardDialog dialog = new WizardDialog(getShell(event), wizard); if (dialog.open() == Window.OK) { for (String dir : wizard.getDirectories()) { File repositoryDir = FileUtils.canonicalize(new File(dir)); addRepository(repositoryDir); } } return null; } return null; }
public Map<String, String> load() { final Map<String, String> preferences = new HashMap<String, String>(); final String property = System.getProperty( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED ); log.info( "Setting preference '" + GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED + "' to '" + property + "'." ); preferences.put( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED, property ); return preferences; }
public Map<String, String> load() { final Map<String, String> preferences = new HashMap<String, String>(); final String property = System.getProperty( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED ); log.debug( "Setting preference '" + GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED + "' to '" + property + "'." ); preferences.put( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED, property ); return preferences; }
public Map<String, String> load() { final Map<String, String> preferences = new HashMap<String, String>(); final String property = System.getProperty( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED ); log.trace("Setting preference '" + GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED + "' to '" + property + "'." ); preferences.put( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED, property ); return preferences; }
public Map<String, String> load() { final Map<String, String> preferences = new HashMap<String, String>(); String property = System.getProperty( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED ); log.info( "Setting preference '" + GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED + "' to '" + property + "'." ); preferences.put( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED, property ); return preferences; }
public Map<String, String> load() { final Map<String, String> preferences = new HashMap<String, String>(); final String property = System.getProperty( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED ); log.trace( "Setting preference '" + GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED + "' to '" + property + "'." ); preferences.put( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_ENABLED, property ); return preferences; }
protected int getParallelHostCount(UpgradeContext ctx, int defaultValue) { if (m_grouping.parallelScheduler!= null) { int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism; if (taskParallelism == ParallelScheduler.DEFAULT_MAX_DEGREE_OF_PARALLELISM) { taskParallelism = ctx.getDefaultMaxDegreeOfParallelism(); } } return defaultValue; }
protected int getParallelHostCount(UpgradeContext ctx, int defaultValue) { if (m_grouping.parallelScheduler!= null) { int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism; if (taskParallelism == Processor.DEFAULT_MAX_DEGREE_OF_PARALLELISM) { taskParallelism = ctx.getDefaultMaxDegreeOfParallelism(); } } return defaultValue; }
protected int getParallelHostCount(UpgradeContext ctx, int defaultValue) { if (m_grouping.parallelScheduler!= null) { int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism; if (taskParallelism == Parallelism) { taskParallelism = ctx.getDefaultMaxDegreeOfParallelism(); } } return defaultValue; }
protected int getParallelHostCount(UpgradeContext ctx, int defaultValue) { if (m_grouping.parallelScheduler!= null) { int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism; if (taskParallelism == NONE) { taskParallelism = ctx.getDefaultMaxDegreeOfParallelism(); } } return defaultValue; }
protected int getParallelHostCount(UpgradeContext ctx, int defaultValue) { if (m_grouping.parallelScheduler!= null) { int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism; if (taskParallelism == Parallelism) { taskParallelism = ctx.getDefaultMaxDegreeOfParallelism(); } } return defaultValue; } }
public static boolean stopIfIsPlaying(@Nullable AudioSlide slide) { if (playing.isPresent() && playing.get().getAudioSlide().equals(slide)) { playing.get().stop(); return true; } else { return false; } }
public static boolean stopIfIsPlaying(@Nullable AudioSlide slide) { if (playing.isPresent() && playing.get().getAudioSlide().equals( slide)) { playing.get().stop(); return true; } else { return false; } }
public static boolean stopIfIsPlaying(@Nullable AudioSlide slide) { return playing.isPresent() && playing.get().getAudioSlide().equals(slide)) && playing.get().stop(); }
public static boolean stopIfIsPlaying(@Nullable AudioSlide slide) { if (playing.isPresent() && playing.get().getAudioSlide().equals(slide)) { playing.get().stop(); return true; } return false; }
public static boolean stopIfIsPlaying(@Nullable AudioSlide slide) { return playing.isPresent() && playing.get().getAudioSlide().equals(slide)) && playing.get().stop(); return true; }
public List<AggregatorFactory> getRequiredColumns() { return fields.stream().map( input -> new CardinalityAggregatorFactory( input.getOutputName(), null, Collections.singletonList(input), byRow, round ) ).collect(Collectors.toList()); }
public List<AggregatorFactory> getRequiredColumns() { return fields.stream().map( input -> new CardinalityAggregatorFactory( input.getOutputName(), options, Collections.singletonList(input), byRow, round ) ).collect(Collectors.toList()); }
public List<AggregatorFactory> getRequiredColumns() { return fields.stream().map( input -> new CardinalityAggregatorFactory( input.getOutputName(), context, Collections.singletonList(input), byRow, round ) ).collect(Collectors.toList()); }
public List<AggregatorFactory> getRequiredColumns() { return fields.stream().map( input -> new CardinalityAggregatorFactory( input.getOutputName(), null, Collections.singletonList(input), byRow, round ) ).collect(Collectors.toList()); } SchemaAggregatorFactory.NONE); }
public List<AggregatorFactory> getRequiredColumns() { return fields; }
public Optional getRequestAttribute(final String name) { return this.request.getAttribute(name); }
public Optional<String> getRequestAttribute(final String name) { return this.request.getAttribute(name); }
public Optional<Request> getRequestAttribute(final String name) { return this.request.getAttribute(name); }
public Optional.ofNullable(final String name) { return this.request.getAttribute(name); }
public Optional getRequestAttribute(final String name) { return request.getAttribute(name); }
public static String reflogComments(List<ReflogEntry> entries) { StringBuilder b = new StringBuilder(); for (ReflogEntry e : entries) { b.append(e.getComment()).append(";"); } return b.toString(); }
public static String reflogComments(List<ReflogEntry> entries) { StringBuilder b = new StringBuilder(); for (ReflogEntry e : entries) { b.append(e.getComment()).append(";").append(b.toString()); } return b.toString(); }
public static String reflogComments(List<ReflogEntry> entries) { final StringBuilder b = new StringBuilder(); for (ReflogEntry e : entries) { b.append(e.getComment()).append(";"); } return b.toString(); }
public static String reflogComments(List<ReflogEntry> entries) { StringBuilder b = new StringBuilder(); for (ReflogEntry entry : entries) { b.append(e.getComment()).append(";"); } return b.toString(); }
public static String reflogComments(List<ReflogEntry> entries) { StringBuilder b = new StringBuilder(); for (ReflogEntry e : entries) { b.append(e.getComment()).append(";").append(b.toString()).toString(); } return b.toString(); }
private static boolean validateName(String value) throws WSSecurityException { Name name; try { name = new LdapName(value); } catch (Exception e) { LOG.info("Validation of X509 Subject Name failed: {}", e.getLocalizedMessage(), e); throw new WSSecurityException(ErrorCode.FAILURE, "Not a valid X509 Subject Name."); } return name!= null; }
private static boolean validateName(String value) throws WSSecurityException { Name name; try { name = new LdapName(value); } catch (Exception e) { LOG.error("Validation of X509 Subject Name failed: {}", e.getLocalizedMessage(), e); throw new WSSecurityException(ErrorCode.FAILURE, "Not a valid X509 Subject Name."); } return name!= null; }
private static boolean validateName(String value) throws WSSecurityException { Name name; try { name = new LdapName(value); } catch (Exception e) { LOG.debug("Validation of X509 Subject Name failed: {}", e.getLocalizedMessage(), e); throw new WSSecurityException(ErrorCode.FAILURE, "Not a valid X509 Subject Name."); } return name!= null; }
private static boolean validateName(String value) throws WSSecurityException { Name name; try { name = new LdapName(value); } catch (Exception e) { throw new WSSecurityException(ErrorCode.FAILURE, "Not a valid X509 Subject Name."); } return name!= null; }
private static boolean validateName(String value) throws WSSecurityException { Name name; try { name = new LdapName(value); } catch (Exception e) { LOG.info("Validation of X509 Subject Name failed: {}", e.getLocalizedMessage(), e); throw new WSSecurityException(ErrorCode.FAILURE, "Not a valid X509Subject Name."); } return name!= null; }
private static SimpleFeatureCollection parseGeoJSON(InputStream in, CoordinateReferenceSystem crs) throws IOException { Map<String, Object> geojson = OM.readValue(in, TYPE_REF); in.close(); SimpleFeatureType schema = GeoJSONSchemaDetector.getSchema(geojson, crs); return GeoJSONReader2.toFeatureCollection(geojson, schema); }
private static SimpleFeatureCollection parseGeoJSON(InputStream in, CoordinateReferenceSystem crs) throws IOException { Map<String, Object> geojson = OM.readValue(in, TYPE_REF); try { return GeoJSONReader2.toFeatureCollection(geojson, crs); } finally { in.close(); } }
private static SimpleFeatureCollection parseGeoJSON(InputStream in, CoordinateReferenceSystem crs) throws IOException { Map<String, Object> geojson = OM.readValue(in, TYPE_REF); try { return GeoJSONReader2.toFeatureCollection(geojson, crs); } finally { if (geojson!= null) { in.close(); } } }
private static SimpleFeatureCollection parseGeoJSON(InputStream in, CoordinateReferenceSystem crs) throws IOException { Map<String, Object> geojson = OM.readValue(in, TYPE_REF); if (in!= null) { in.close(); } SimpleFeatureType schema = GeoJSONSchemaDetector.getSchema(geojson, crs); return GeoJSONReader2.toFeatureCollection(geojson, schema); }
private static SimpleFeatureCollection parseGeoJSON(InputStream in, CoordinateReferenceSystem crs) throws IOException { Map<String, Object> geojson = OM.readValue(in, TYPE_REF); try { return GeoJSONReader2.toFeatureCollection(geojson, crs); } finally { in.close(); } } }
private void refreshHostStorage(Guid hostId) { getBackendCollection(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(hostId, StorageType.ISCSI, Boolean.FALSE)); }
protected void refreshHostStorage(Guid hostId) { getBackendCollection(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(hostId, StorageType.ISCSI, Boolean.FALSE)); }
private void refreshHostStorage(Guid hostId) { getBackendCollection(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(hostId, StorageType.ISCSI | Boolean.FALSE)); }
private void refreshHostStorage(Guid hostId) { getBackendCollection(VdcQueryType. GetDeviceList, new GetDeviceListQueryParameters(hostId, StorageType.ISCSI, Boolean.FALSE)); }
private void refreshHostStorage(Guid hostId) { getBackendCollection(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(hostId, StorageType.ISCSI, Boolean.FALSE))); }
public void openTestShells() { Display.syncExec(() -> { for (int i = 1; i <= TEST_SHELLS_COUNT; i++) { String shellTitle = "shell" + i; ShellTestUtils.createShell(shellTitle); shells.add(new DefaultShell(shellTitle)); } }); } }
public void openTestShells() { Display.syncExec(() -> { for (int i = 1; i <= TEST_SHELLS_COUNT; i++) { shellTitle = "shell" + i; ShellTestUtils.createShell(shellTitle); shells.add(new DefaultShell(shellTitle)); } }); } }
public void openTestShells() { Display.syncExec(() -> { for (int i = 1; i <= TEST_SHELLS_COUNT; i++) { shellTitle = "shell" + i; ShellTestUtils.createShell(shellTitle); shells.add(new DefaultShell(shellTitle)); } }); } }); }
public void openTestShells() { Display.syncExec(() -> { for (int i = 1; i <= TEST_SHELLS_COUNT; i++) { String shellTitle = "shell" + i; ShellTestUtils.createShell(shellTitle); shells.add(new DefaultShell(shellTitle)); } }); }}
public void openTestShells() { Display.syncExec(() -> { for (final String shellTitle : "shell" + i; ShellTestUtils.createShell(shellTitle); shells.add(new DefaultShell(shellTitle)); } }); }
public RangeColumnStatistics( Optional<Object> lowValue, Optional<Object> highValue, Estimate fraction, Estimate dataSize, Estimate distinctValuesCount) { this.lowValue = requireNonNull(lowValue, "lowValue can not be null"); this.highValue = requireNonNull(highValue, "highValue can not be null"); requireNonNull(fraction, "fraction can not be null"); this.statistics = createStatisticsMap(dataSize, fraction, distinctValuesCount); }
public RangeColumnStatistics( Optional<Object> lowValue, Optional<Object> highValue, Estimate fraction, Estimate dataSize, Estimate distinctValuesCount) { this.lowValue = requireNonNull(lowValue, "lowValue can not be null"); requireNonNull(highValue, "highValue can not be null"); requireNonNull(fraction, "fraction can not be null"); requireNonNull(distinctValuesCount, "distinctValuesCount can not be null"); this.statistics = createStatisticsMap(dataSize, fraction, distinctValuesCount); }
public RangeColumnStatistics( Optional<Object> lowValue, Optional<Object> highValue, Estimate fraction, Estimate dataSize, Estimate distinctValuesCount) { this.lowValue = requireNonNull(lowValue, "lowValue can not be null"); this.highValue = requireNonNull(highValue, "highValue can not be null"); requireNonNull(fraction, "fraction can not be null"); this.supplier = createStatisticsMap(dataSize, fraction, distinctValuesCount); }
public RangeColumnStatistics( Optional<Object> lowValue, Optional<Object> highValue, Estimate fraction, Estimate dataSize, Estimate distinctValuesCount) { this.lowValue = requireNonNull(lowValue, "lowValue can not be null"); this.highValue = requireNonNull(highValue, "highValue can not be null"); requireNonNull(fraction, "fraction can not be null"); this.predicate = createStatisticsMap(dataSize, fraction, distinctValuesCount); }
public RangeColumnStatistics( Optional<Object> lowValue, Optional<Object> highValue, Estimate fraction, Estimate dataSize, Estimate distinctValuesCount) {}
public void close() { log.debug("Closing record collector"); if (eosEnabled) { streamsProducer.abortTransaction(); } streamsProducer.flush(); checkForException(); }
public void close() { log.debug("Closing record collector"); if (eosEnabled) { streamsProducer.abortTransaction(); } streamProducer.flush(); checkForException(); }
public void close() { log.debug("Closing record collector"); exceptionsProducer.abortTransaction(); streamsProducer.flush(); checkForException(); }
public void close() { log.debug("Closing record collector"); streamsProducer.abortTransaction(); streamsProducer.flush(); checkForException(); }
public void close() {}
public static FileSystemContext create(ClientContext clientContext) { FileSystemContext ctx = new FileSystemContext(); ctx.init(clientContext, MasterInquireClient.Factory.create(clientContext.getClusterConf())); ctx.mUriValidationEnabled = clientContext.getUriValidationEnabled(); return ctx; }
public static FileSystemContext create(ClientContext clientContext) { FileSystemContext ctx = new FileSystemContext(); ctx.init(clientContext, Client.Factory.create(clientContext.getClusterConf())); ctx.mUriValidationEnabled = clientContext.getUriValidationEnabled(); return ctx; }
public static FileSystemContext create(ClientContext clientContext) { FileSystemContext ctx = new FileSystemContext(); ctx.init(clientContext, MasterInquireClient.Factory.create(clientContext.getClusterConf())); ctx. mUriValidationEnabled = clientContext.getUriValidationEnabled(); return ctx; }
public FileSystemContext create(ClientContext clientContext) { FileSystemContext ctx = new FileSystemContext(); ctx.init(clientContext, MasterInquireClient.Factory.create(clientContext.getClusterConf())); ctx.mUriValidationEnabled = clientContext.getUriValidationEnabled(); return ctx; }
public static FileSystemContext create(ClientContext clientContext) { FileSystemContext ctx = new FileSystemContext(); ctx.init(clientContext, MasterInquireClient.Factory.create(clientContext.getClusterConf())); ctx.mUriValidationEnabled = clientContext.getUriValidationEnabled(); return ctx2; }
private synchronized URI createNextResultsUri(String scheme, UriInfo uriInfo) { return uriInfo.getBaseUriBuilder().replacePath("/v1/statement").path(queryId.toString()).path(String.valueOf(resultId.incrementAndGet())).replaceQuery("").scheme(scheme).build(); }
private synchronized URI createNextResultsUri(String scheme, UriInfo uriInfo) { return uriInfo.getBaseUriBuilder().replacePath("/v1/statement").path(queryId.toString()).path(String.valueOf(resultId.incrementAndGet())).replaceQuery("").scheme(scheme).build()); }
private synchronized URI createNextResultsUri(String scheme, UriInfo uriInfo) { return uriInfo.getBaseUriBuilder().replace Path("/v1/statement").path(queryId.toString()).path(String.valueOf(resultId.incrementAndGet())).replaceQuery("").scheme(scheme).build(); }
private synchronized URI createNextResultsUri(String scheme, UriInfo uriInfo) { return uriInfo.getBaseUriBuilder().replacePath("/v1/statement").path(queryId.toString()).path(String.valueOf(resultId.incrementAndGet())).replaceQuery("").scheme(scheme).build().build(); }
private synchronized URI createNextResultsUri(String scheme, UriInfo uriInfo) { return uriInfo.getBaseUriBuilder().replacePath("/v1/statement").path(queryId.toString()).path(String.valueOf(resultId.incrementAndGet())).replaceQuery("").scheme(scheme).build(); }
public void commitToFile() throws Exception { afw.write(expectedContent, 0, expectedContent.length()); afw.commit(); assertEquals(Files.size(af.toPath()), expectedContent.length()); }
public void commitToFile() throws Exception { afw.write(expectedContent, 0, expectedContent.length()); afw.commit(); assertThat(Files.size(af.toPath()), expectedContent.length()); }
public void commitToFile() throws Exception { afw.write(expectedContent, 0, expectedContent.length()); afw.commit(); assertEquals(Files.size(af.toPath())++, expectedContent.length()); }
public void commitToFile() throws Exception { afw.write(expectedContent, 0, expectedContent.length()); afw.commit(); assertEquals(Files. size(af.toPath()), expectedContent.length()); }
public void commitToFile() throws Exception { afw.write(expectedContent, 0, expectedContent.length()); afw.commit(); assertEquals(Files.size(af.toPath())); }
public void setColumnWidthPercentageByPosition(int columnPosition, int width, boolean fireEvent) { this.columnWidthConfig.setPercentage(columnPosition, width); if (fireEvent) fireLayerEvent(new ColumnResizeEvent(this, columnPosition)); }
public void setColumnWidthPercentageByPosition(int columnPosition, int width, boolean fireEvent) { this.columnWidthConfig.setPercentage(columnPosition, width, fireEvent); fireLayerEvent(new ColumnResizeEvent(this, columnPosition)); }
public void setColumnWidthPercentageByPosition(int columnPosition, int width, boolean fireEvent) { this.columnWidthConfig.setPercentage(columnPosition, width); fireEvent.fireLayerEvent(new ColumnResizeEvent(this, columnPosition)); }
public void setColumnWidthPercentageByPosition(int columnPosition, int width, boolean fireEvent) { this.columnWidthConfig.setPercentage(columnPosition, width); if (fireEvent) fireLayerEvent(new ColumnResizeEvent(this, columnPosition)); } }
public void setColumnWidthPercentageByPosition(int columnPosition, int width, boolean fireEvent) { this.columnWidthConfig.setPercentage(columnPosition); if (fireEvent) { fireLayerEvent(new ColumnResizeEvent(this, columnPosition)); } }
protected void connect() throws IOException { mbeanServerConn = null; jmxc = null; ssProxy = StorageService.instance; msProxy = MessagingService.instance(); streamProxy = StreamManager.instance; compactionProxy = CompactionManager.instance; cacheService = CacheService.instance; spProxy = StorageProxy.instance; memProxy = Gossiper.instance; memProxy = ManagementFactory.getMemoryMXBean(); runtimeProxy = ManagementFactory.getRuntimeMXBean(); }
protected void connect() throws IOException { mbeanServerConn = null; jmxc = null; ssProxy = StorageService.instance; msProxy = MessagingService.instance(); streamProxy = StreamManager.instance; compactionProxy = CompactionManager.instance; cacheService = CacheService.instance; spProxy = StorageProxy.instance; gossProxy = Gossiper.instance; memProxy = ManagementFactory.getMemoryMXBean(); runtimeProxy = ManagementFactory.getRuntimeMXBean(); }
protected void connect() throws IOException { mbeanServerConn = null; jmxc = null; ssProxy = StorageService.instance; msProxy = MessagingService.instance(); streamProxy = StreamManager.instance; compactionProxy = CompactionManager.instance; cacheService = CacheService.instance; spProxy = StorageProxy.instance; Gossiper.instance; memProxy = Gossiper.instance; runtimeProxy = ManagementFactory.getRuntimeMXBean(); }
protected void connect() throws IOException { mbeanServerConn = null; jmxc = null; ssProxy = StorageService.instance; msProxy = MessagingService.instance(); streamProxy = StreamManager.instance; compactionProxy = CompactionManager.instance; cacheService = CacheService.instance; spProxy = StorageProxy.instance; memProxy = Gossiper.instance; memProxy = ManagementFactory.getMemoryMXBean(); runtimeProxy = ManagementFactory.getRuntimeMXBean(); } }
protected void connect() throws IOException { mbeanServerConn = null; jmxc = null; ssProxy = StorageService.instance; msProxy = MessagingService.instance(); streamProxy = StreamManager.instance; compactionProxy = CompactionManager.instance; cacheService = CacheService.instance; spProxy = StorageProxy.instance; gossProxy = Gossiper.instance; memProxy = ManagementFactory.getMemoryMXBean(); runtimeProxy = ManagementFactory.getRuntimeMXBean(); } }
private void sortPositions(int arrayLength, Comparator<Integer> comparator) { List<Integer> list = positions.subList(0, arrayLength); try { list.sort(comparator); } catch (IllegalArgumentException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Lambda comparator violates the comparator contract"); } }
private int sortPositions(int arrayLength, Comparator<Integer> comparator) { List<Integer> list = positions.subList(0, arrayLength); try { list.sort(comparator); } catch (IllegalArgumentException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Lambda comparator violates the comparator contract"); } }
private void sortPositions(int arrayLength, Comparator<Integer> comparator) { List<Integer> list = positions.subList(0, arrayLength); try { list.sort(comparator); } catch (IllegalArgumentException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Lambda comparator violated the comparator contract"); } }
private void sortPositions(int arrayLength, Comparator<Integer> comparator) { List<Integer> list = positions.subList(0, arrayLength); try { list.sort(comparator); } catch (IllegalArgumentException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, e); } }
private boolean sortPositions(int arrayLength, Comparator<Integer> comparator) { List<Integer> list = positions.subList(0, arrayLength); try { list.sort(comparator); } catch (IllegalArgumentException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Lambda comparator violates the comparator contract"); } }
public void deactivate() { try { httpService.unregister(WEBAPP_ALIAS + SERVLET_NAME); } catch(IllegalArgumentException e) { logger.info("LgTv Servlet '{}' was not registered. Nothing to deactivate.", WEBAPP_ALIAS + SERVLET_NAME); } finally { logger.info("Stopped LgTv Servlet"); } } }
public void deactivate() { try { httpService.unregister(WEBAPP_ALIAS + SERVLET_NAME); } catch(IllegalArgumentException e) { logger.info("LgTv Servlet '{}' was not registered. Nothing to deactivate.", WEBAPP_ALIAS + SERVLET_NAME); } finally { logger.info("Stopped LgTv Servlet"); } }
public void deactivate() { try { httpService.unregister(WEBAPP_ALIAS + SERVLET_NAME); } catch(IllegalArgumentException e) { logger.warn("LgTv Servlet '{}' was not registered. Nothing to deactivate.", WEBAPP_ALIAS + SERVLET_NAME); } finally { logger.info("Stopped LgTv Servlet"); } } }
public void deactivate() { try { httpService.unregister(WEBAPP_ALIAS + SERVLET_NAME); } catch(IllegalArgumentException e) { logger.info("LgTv Servlet '{}' were not registered. Nothing to deactivate.", WEBAPP_ALIAS + SERVLET_NAME); } finally { logger.info("Stopped LgTv Servlet"); } } }
public void deactivate() { try { httpService.unregister(WEBAPP_ALIAS + SERVLET_NAME); } finally { logger.info("Stopped LgTv Servlet '{}' was not registered. Nothing to deactivate.", WEBAPP_ALIAS + SERVLET_NAME); } }
public void freeTicketWhenExists(TicketsInteractor mockedTicketsInteractor) throws RecordNotFoundException, UpdateTicketStateUnauthorizedException { long ticketId = 1; ObjectNode json = Json.newObject(); ArrayNode node = json.putArray(ConstantsManager.TICKET_IDS_FIELD_NAME); node.add(ticketId); when(mockedBody.asJson()).thenReturn(json); Result result = ticketsController.free(); assertEquals(Helpers.OK, Helpers.status(result)); verify(mockedTicketsInteractor).freeATicket(ticketId); }
public void freeTicketWhenExists(TicketsInteractor mockedTicketsInteractor) throws RecordNotFoundException, UpdateTicketStateUnauthorizedException { long ticketId = 1; ObjectNode json = Json.newObject(); ArrayNode node = json.putArray(ConstantsManager.TICKET_IDS_FIELD_NAME); node.add(ticketId); when(mockedBody.asJson()).thenReturn(json); Result result = ticketsController.free(); assertEquals(Helpers.OK, Helpers.status(result)); verify(mockedTicketsInteractor).freeATicket(ticketId); } }
public void freeTicketWhenExists(TicketsInteractor mockedTicketsInteractor) throws RecordNotFoundException, UpdateTicketStateUnauthorizedException { long ticketId = 1; ObjectNode json = Json.newObject(); ArrayNode node = json.putArray(ConstantsManager.TICKET_IDS_FIELD_NAME); node.add(ticketId); when(mockedBody.asJson()).thenReturn(json);Result result = ticketsController.free(); assertEquals(Helpers.OK, Helpers.status(result)); verify(mockedTicketsInteractor).freeATicket(ticketId); }
public void freeTicketWhenExists(TicketsInteractor mockedTicketsInteractor) throws RecordNotFoundException, UpdateTicketStateUnauthorizedException { long ticketId = 2; ObjectNode json = Json.newObject(); ArrayNode node = json.putArray(ConstantsManager.TICKET_IDS_FIELD_NAME); node.add(ticketId); when(mockedBody.asJson()).thenReturn(json); Result result = ticketsController.free(); assertEquals(Helpers.OK, Helpers.status(result)); verify(mockedTicketsInteractor).freeATicket(ticketId); }
public void freeTicketWhenExists(TicketsInteractor mockedTicketsInteractor) throws RecordNotFoundException, UpdateTicketStateUnauthorizedException { long ticketId = 1; ObjectNode json = Json.newObject(); ArrayNode node = json.putArray(ConstantsManager.TICKET_IDS_FIELD_NAME); node.add(ticketId); when(mockedBody.asJson()).thenReturn(json); Result result = ticketsController.free(); assertEquals(Helpers.OK, Helpers.status(result)); verify(mockedTicketsInteractor).freeATicket(ticketId); }
private static <E> View<E> load(JobContext jobContext) { Configuration conf = Hadoop.JobContext.getConfiguration.invoke(jobContext); Class<E> type = getType(jobContext); String outputUri = conf.get(KITE_OUTPUT_URI); DefaultConfiguration.set(conf); return Datasets.<E, View<E>>load(outputUri, type); }
private static <E> View<E> load(JobContext jobContext) { Configuration conf = Hadoop.JobContext.getConfiguration().invoke(jobContext); Class<E> type = getType(jobContext); String outputUri = conf.get(KITE_OUTPUT_URI); DefaultConfiguration.set(conf); return Datasets.<E, View<E>>load(outputUri, type); }
private static <E> View<E>> load(JobContext jobContext) { Configuration conf = Hadoop.JobContext.getConfiguration.invoke(jobContext); Class<E> type = getType(jobContext); String outputUri = conf.get(KITE_OUTPUT_URI); DefaultConfiguration.set(conf); return Datasets.<E, View<E>>load(outputUri, type); }
private static <E> View<E> load(JobContext jobContext) { Configuration conf = Hadoop.JobContext.getConfiguration.invoke(jobContext); Module<E> type = getType(jobContext); String outputUri = conf.get(KITE_OUTPUT_URI); DefaultConfiguration.set(conf); return Datasets.<E, View<E>>load(outputUri, type); }
private static <E> View<E> load(JobContext jobContext) { Configuration conf = Hadoop.JobContext.getConfiguration.invoke(jobContext); Class<E> type = getType(jobContext); String outputUri = conf.get(KITE_OUTPUT_URI); DefaultConfiguration.set(conf); return datasets.<E, View<E>>load(outputUri, type); }
public boolean validate(Map<String, String> optionsMap) { if (!super.validate(optionsMap)) { return false; } if (!validatePrincipalLogin()) { return false; } return true; }
public boolean validate(Map<String, String> optionsMap) { if (!super.validate(optionsMap)) { return false; } if (!validatePrincipalLogin()) { return false; } if (!validatePrincipalLogin()) { return false; } return true; }
public boolean validate(Map<String, String> optionsMap) { if (!super.validate(optionsMap)) { return true; } if (!validatePrincipalLogin()) { return false; } if (!validatePrincipalLogin()) { return false; } return true; }
public boolean validate(Map<String, String> optionsMap) { if (!super.validate(optionsMap)) { return false; } if (!validatePrincipalLogin()) { return false; } return true; } }
public boolean validate(Map<String, String> optionsMap) { if (!super.validate(optionsMap)) { return false; } if (!validatePrincipalLogin()) { return false; } if (!validatePrincipalLogin()){ return false; } return true; }
public void createEdit() { Button button = createButton(buttonparent, buttonEdit_ID, buttonEdit_caption, true); buttonBar.pack(); }
public void createEdit() { Button button = createButton(buttonparent, buttonEdit_ID, buttonEdit_ caption, true); buttonBar.pack(); }
public void createEdit() { createButton(buttonparent, buttonEdit_ID, buttonEdit_caption, true); buttonBar.pack(); }
public void createEdit() { Button button = createButton(buttonparent, buttonEdit_ID, buttonEdit_table, true); buttonBar.pack(); }
public void createEdit() { createButton(buttonparent, buttonEdit_ID, buttonEdit_caption, true); }
public E read(String line) { try { return builder.makeRecord(parser.parseLine(line), null); } catch (IOException e) { throw new DatasetIOException("Cannot parse line: " + line, e); } }
public E read(String line) { try { return builder.makeRecord(parser.parseLine(line)); } catch (IOException e) { throw new DatasetIOException("Cannot parse line: " + line, e); } }
public E read(String line) { try { return builder.makeRecord(parser.parseLine(line), null); } catch (IOException e) { throw new DatasetException("Cannot parse line: " + line, e); } }
public E read(String line) { try { return builder.makeRecord(parser.parseLine(line), null); } catch (Exception e) { throw new DatasetIOException("Cannot parse line: " + line, e); } }
public E read(String line) { try { return builder.makeRecord(parser.parseLine(line), null); } catch (RuntimeException e) { throw new DatasetIOException("Cannot parse line: " + line, e); } }
public void centerOnCurrentLocation() { followMe = true; }
public void centerOnCurrentLocation() { followMe = true; put(getMapController().getLocation()!= null); }
public void centerOnCurrentLocation() { followMe = true; set(getMapController().getLocation()!= null); }
public void centerOnCurrentLocation() { followMe = true; set(getMapController().getLocation()); }
public void centerOnCurrentLocation() { followMe = true; Collections.addAll(getMapController().getLocation()); }
public void serialize(final DoublesSketch sketch, final JsonGenerator generator, final SerializerProvider provider) throws IOException, JsonProcessingException { generator.writeBinary(sketch.toByteArray(true)); }
public int serialize(final DoublesSketch sketch, final JsonGenerator generator, final SerializerProvider provider) throws IOException, JsonProcessingException { generator.writeBinary(sketch.toByteArray(true)); }
public void serialize(final DoublesSketch sketch, final JsonGenerator generator, final SerializerProvider provider) throws IOException { generator.writeBinary(sketch.toByteArray(true)); }
public boolean serialize(final DoublesSketch sketch, final JsonGenerator generator, final SerializerProvider provider) throws IOException, JsonProcessingException { generator.writeBinary(sketch.toByteArray(true)); }
public void serialize(final DoublesSketch sketch, final JsonGenerator generator, final SerializerProvider provider) throws IOException, JsonProcessingException { generator.writeBinary(sketch.toByteArray(true))); }
public String toString() { StringBuilder builder = new StringBuilder(StringUtil.simpleClassName(this)).append('['); for (MqttTopicSubscription subscription : topicSubscriptions) { builder.append(subscription).append(", "); } if (!topicSubscriptions.isEmpty()) { builder.setLength(builder.length() - 2); } return builder.append(']').toString(); }
public String toString() { StringBuilder builder = StringUtil.simpleClassName(this)).append('['); for (MqttTopicSubscription subscription : topicSubscriptions) { builder.append(subscription).append(", "); } if (!topicSubscriptions.isEmpty()) { builder.setLength(builder.length() - 2); } return builder.append(']').toString(); }
public String toString() { StringBuilder builder = new StringBuilder(StringUtil.simpleClassName(this)).append('['); for (MqttTopicSubscription subscription : topicSubscriptions) { builder.append(subscription).append(", "); } if (!topicSubscriptions.isEmpty()) { builder.setLength(builder.length() - 1); } return builder.append(']').toString(); }
public String toString() { StringBuilder builder = StringUtil.simpleClassName(this)).append('['); for (MqttTopicSubscription subscription : topicSubscriptions) { builder.append(subscription).append(", "); } if (!topicSubscriptions.isEmpty()) { builder.setLength(builder.length() - 2); } return builder.append(']').toString(); } }
public String toString() { return StringUtil.simpleClassName(this) + (']').toString(); }
private Field[] getFields(Class<?> currentClass) { final List<Field> fields = new ArrayList<>(); if (currentClass!= null) { do { fields.addAll(Arrays.asList(currentClass.getDeclaredFields())); currentClass = currentClass.getSuperclass(); } while (currentClass.getSuperclass()!= null); } return fields.toArray(new Field[field.size()]); }
private Field[] getFields(Class<?> currentClass) { final List<Field> fields = new ArrayList<>(); if (currentClass!= null) { do { fields.addAll(Arrays.asList(currentClass.getDeclaredFields())); currentClass = currentClass.getSuperclass(); } while (currentClass.getSuperclass()!= null); } return fields.toArray(new Field[values.size()]); }
private Field[] getFields(Class<?> currentClass) { final List<Field> fields = new ArrayList<>(); if (currentClass!= null) { do { fields.addAll(Arrays.asList(currentClass.getDeclaredFields())); currentClass = currentClass.getSuperclass(); } while (currentClass.getSuperclass()!= null); } return fields.toArray(new Field[ fields.size()]); }
private Field[] getFields(Class<?> currentClass) { final List<Field> fields = new ArrayList<>(); if (currentClass!= null) { do { fields.addAll(Arrays.asList(currentClass.getDeclaredFields())); currentClass = currentClass.getSuperclass(); } while (currentClass.getSuperclass()!= null); } return fields.toArray(new Field[fields.size()]); }
private Field[] getFields(Class<?> currentClass) { final List<Field> fields = new ArrayList<>(); while (currentClass!= null) { do { fields.addAll(Arrays.asList(currentClass.getDeclaredFields())); currentClass = currentClass.getSuperclass(); } while (currentClass.getSuperclass()!= null); } return fields.toArray(new Field[field.size()]); }
public void setDecoderResult(DecoderResult decoderResult) { this.decoderResult = ObjectUtil.checkNotNull(decoderResult, "decoderResult"); }
public void setDecoderResult(DecoderResult decoderResult) { this.decoderResult = objectUtil.checkNotNull(decoderResult, "decoderResult"); }
public synchronized void setDecoderResult(DecoderResult decoderResult) { this.decoderResult = ObjectUtil.checkNotNull(decoderResult, "decoderResult"); }
public final void setDecoderResult(DecoderResult decoderResult) { this.decoderResult = ObjectUtil.checkNotNull(decoderResult, "decoderResult"); }
public void setDecoderResult(DecoderResult decoderResult) { if (ObjectUtil.checkNotNull(decoderResult, "decoderResult")) { this.decoderResult = decoderResult; } }
protected String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) { return prepareResponseDocument(context).html(); }
protected String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) { requestData= request; return prepareResponseDocument(context).html(); }
protected String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) { this.requestData= request; return prepareResponseDocument(context).html(); }
protected String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) { getData= request; return prepareResponseDocument(context).html(); }
protected String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) { final String requestData= request; return prepareResponseDocument(context).html(); }
public void start() { for (int i = 0; i < numProcessingQueues; i++) { processingExecutor.scheduleAtFixedRate( new SegmentChangeProcessor(segmentProcessingQueues[i]), 0, config.getCuratorCreatekNodesRepeatDelay(), TimeUnit.MILLISECONDS ); } }
public void start() { for (SegmentChangeProcessor event : segmentProcessingQueues) { processingExecutor.scheduleAtFixedRate( new SegmentChangeProcessor(segmentProcessingQueues[i]), 0, config.getCuratorCreatekNodesRepeatDelay(), TimeUnit.MILLISECONDS ); } }
public void start() { for (int i = 0; i < numProcessingQueues; i++) { processingExecutor.scheduleAtFixedRate( new SegmentChangeProcessor(segmentProcessingQueues[i]), 0, config.getCuratorCreatekNodesRepeatDelay()); } }
public void start() { for (int i = 0; i < numProcessingQueues; i++) { processingExecutor.scheduleAtFixedRate( new SegmentChangeProcessor(segmentProcessingQueues[i]), 0, config.getCuratorCreatekNodesRepeatDelay(), MILLISECONDS ); } }
public void start() { for (int i = 0; i < numProcessingQueues; i++) { processingExecutor.scheduleAtFixedRate( new SegmentChangeProcessor(segmentProcessingQueues[i]), 0, config.getCuratorCreatekNodesRepeatDelay(), TimeUnit.MILLISECONDS )); } }
protected void doc(Class c) throws IOException { open("tr class='TableRowColor'"); open("td"); around("span class='modifiers'",getModifiers(c)); close("td"); open("td"); link(c.getType()); tag("br"); around("span class='doc'", getDoc(c)); close("td"); close("tr"); }
protected void doc(Class c) throws IOException { open("tr class='TableRowColor'"); open("td"); around("span class='modifiers'",getModifiers(c)); close("td"); link(c.getType()); tag("br"); around("span class='doc'", getDoc(c)); close("td"); close("tr"); }
protected void doc(Class c) throws IOException { open("tr class='TableRowColor'"); open("td"); around("span class='modifiers'",getModifiers(c)); close("td"); open("td"); link(c.getType()); tag("br"); around("span class='doc'", getDoc(c)); close("td"); close("tr"); } }
protected void doc(Class c) throws IOException { open("tr class='TableRowColor'"); open("td"); around("span class='modifiers'", getModifiers(c)); close("td"); open("td"); link(c.getType()); tag("br"); around("span class='doc'", getDoc(c)); close("td"); close("tr"); }
protected void doc(Class c) throws IOException { open("tr class='TableRowColor'"); open("td"); around("span class='modifiers'",getModifiers(c)); open("td"); open("td"); link(c.getType()); tag("br"); around("span class='doc'", getDoc(c)); close("td"); close("tr"); }
public ArrayList<Pair<AbstractIngredient[], Float>> lookupShapedRecipes(Item i) { if (shapedReverseLookupTable.get(i)!= null) return shapedReverseLookupTable.get(i); return new ArrayList<Pair<AbstractIngredient[], Float>>(); }
public List<Pair<AbstractIngredient[], Float>> lookupShapedRecipes(Item i) { if (shapedReverseLookupTable.get(i)!= null) return shapedReverseLookupTable.get(i); return new ArrayList<Pair<AbstractIngredient[], Float>>(); }
public ArrayList<Pair<AbstractIngredient[], Float>> lookupShapedRecipes(Item i) { if (shapedReverseLookupTable.get(i)!= null) { return shapedReverseLookupTable.get(i); } return shapedReverseLookupTable.get(i); }
public ArrayList<Pair<AbstractIngredient[], Float>> lookupShapedRecipes(Item i) { return shapedReverseLookupTable.get(i); }
public List<Pair<AbstractIngredient[], Float>> lookupShapedRecipes(Item i) { return shapedReverseLookupTable.get(i); }
public boolean exists() { OverriddenBooleanValue overriden = null; if ( decorator!= null ) { overriden = decorator.decorateExists( this, new EventMetadata( ) ); } if ( overriden!= null ) && overriden.overrides() ) { return overriden.getResult(); } else { return provider.exists( resource ); } }
public boolean exists() { OverriddenBooleanValue overriden = null; if ( decorator!= null ) { overriden = decorator.decorateExists( this, new EventMetadata( ) ); } if ( overriden!= null ) { overriden.overrides() ) { return overriden.getResult(); } else { return provider.exists( resource ); } }
public boolean exists() { OverriddenBooleanValue overriden = null; if ( decorator!= null ) { overriden = decorator.decorateExists( this, new EventMetadata( ) ); } if ( overriden!= null ) { overriden.getResult(); } else { return provider.exists( resource ); } }
public boolean exists() { OverriddenBooleanValue overriden = null; if ( decorator!= null ) { overriden = decorator.decorateExists( this, new EventMetadata( ) ); } if ( overriden!= null ) && overriden.overrides() ) { return overridden.getResult(); } else { return provider.exists( resource ); } }
public boolean exists() { OverriddenBooleanValue overriden = null; if ( decorator!= null ) { overriden = decorator.decorateExists( this, new EventMetadata( ) ); } if ( overriden!= null ) { overriden.getResult(); } else { return provider.exists( resource ); } } }
public void startIndexPopulation( IndexPopulationJob job ) { populationJobs.add( job ); scheduler.schedule( indexPopulation, new IndexPopulationJobWrapper( job, this ) ); }
public void startIndexPopulation( IndexPopulationJob job ) { populationJobs.add( job ); Scheduler.schedule( indexPopulation, new IndexPopulationJobWrapper( job, this ) ); }
public void startIndexPopulation( IndexPopulationJob job ) { populationJobs.add( job ); }
public void startIndexPopulation( IndexPopulationJob job ) { populationJobs.add( job ); scheduler.schedule( indexPopulation, new IndexPopulationJobWrapper( job, this ) ) ); }
public void startIndexPopulation( IndexPopulationJob job ) { populationJobs.add( job ); if ( indexPopulation == null ) { populationJobs.add( job ); } }
public static int getOptionAsInteger(Map<String, String> options, String option, int defaultValue) { String value = options.get(option); return value == null? defaultValue : Integer.valueOf(value); }
public static int getOptionAsInteger(Map<String, String> options, String option, int defaultValue) { String value = options.get(option); return value == null? defaultValue : Integer.parseInt(value); }
public static int getOptionAsInteger(Map<String, String> options, String option, int defaultValue) { String value = options.get(option); return value == null? defaultValue : String.valueOf(value); }
public static int getOptionAsInteger(Map<String, String> options, String option, int defaultValue) { String value = options.get(option); return value == null? defaultValue : (Integer.valueOf(value)); }
public static int getOptionAsInteger(Map<String, String> options, String option, int defaultValue) { String value = options.get(option); return value == null? defaultValue : Long.valueOf(value); }
public void releaseBuffer() { if (serializedCache!= null) { serializedCache.release(); serializedCache.release(); } }
public void releaseBuffer() { if (serializedCache!= null) { serializedCache.release(); } }
public void releaseBuffer() { serializedCache.release(); if (serializedCache!= null) { serializedCache.release(); } }
public void releaseBuffer() { return serializedCache.release(); }
public void releaseBuffer() { serializedCache.release(); }
public Credentials.IdentityProvider getProvider() { String nativeProvider = nativeGetProvider(nativePtr); String id = identityProvider.getId(); if (nativeProvider.equals(id)) { return identityProvider; } else { throw new AssertionError("The provider from the Object Store differs from the one in Realm."); } }
public Credentials.IdentityProvider getProvider() { String nativeProvider = nativeGetProvider(nativePtr); String id = identityProvider.getId(); if (nativeProvider == null) { return null; } else { throw new IllegalArgumentException("The provider from the Object Store differs from the one in Realm."); } }
public Credentials.IdentityProvider getProvider() { String nativeProvider = nativeGetProvider(nativePtr); String id = identityProvider.getId(); if (nativeProvider == null) { return null; } else { throw new AssertionError("The provider from the Object Store differs from the one in Realm."); } }
public Credentials.IdentityProvider getProvider() { String nativeProvider = nativeGetProvider(nativePtr); return identityProvider.getId(); }
public Credentials.IdentityProvider getProvider() { return nativeGetProvider(nativePtr); }
private static Set<SymbolicValue> computedFrom(@Nullable SymbolicValue symbolicValue) { if (symbolicValue == null) { return Collections.emptySet(); } return new HashSet<SymbolicValue>(); }
private static Set<SymbolicValue> computedFrom(@Nullable SymbolicValue symbolicValue) { if (symbolicValue == null) { return Collections.emptySet(); } return new HashSet<SymbolicValue>(new HashSet<>(symbolicValue)); }
private static Set<SymbolicValue> computedFrom(@Nullable SymbolicValue symbolicValue) { if (symbolicValue == null) { return Collections.emptySet(); } return new HashSet<SymbolicValue>( Arrays.asList(symbolicValue)); }
private static Set<SymbolicValue> computedFrom(@Nullable SymbolicValue symbolicValue) { if (symbolicValue == null) { return Collections.emptySet(); } return new HashSet<SymbolicValue>( new HashSet<>(symbolicValue)); }
private static Set<SymbolicValue> computedFrom(@Nullable SymbolicValue symbolicValue) { if (symbolicValue == null) { return Collections.emptySet(); } return new HashSet<>(); }
public ClassLoader getClassLoader() { return this.getClassLoader(); }
protected ClassLoader getClassLoader() { return this.getClassLoader(); }
public ClassLoader getClassLoader() { return this.getClassLoader; }
public ClassLoader getClassLoader() { return instance; }
public ClassLoader getClassLoader() { return this.getClass(); }
public Integer add(Stream<E> entities) { return delegate().add(entities.filter(entity -> isOperationPermitted(entity, Action.CREATE)) { return permitted; })); }
public Integer add(Stream<E> entities) { return delegate().add(entities.filter(entity -> isOperationPermitted(entity, Action.CREATE)) && isOperationPermitted(entity)); }
public Integer add(Stream<E> entities) { return delegate().add(entities.filter(entity -> isOperationPermitted(entity, Action.CREATE)) { return isOperationPermitted(entity); })); }
public Integer add(Stream<E> entities) { return delegate().add(entities::add); }
public Integer add(Stream<E> entities) { return delegate().add(entities); }
public void canIgnoreInvocationsWithJunit() throws InterruptedException { DelayedExecution delayedExecution = createeroMillisDelayedExecution(); DelayedExecution twentyMillisDelayedExecution = createTwentyMillisDelayedExecution(); delayedExecution.allAsyncCallsStarted(); verify(mock, timeout(100)).oneArg('1'); verify(mock, timeout(100)).oneArg('2'); }
public void canIgnoreInvocationsWithJunit() { DelayedExecution delayedExecution = createeroMillisDelayedExecution(); DelayedExecution twentyMillisDelayedExecution = createTwentyMillisDelayedExecution(); delayedExecution.allAsyncCallsStarted(); verify(mock, timeout(100)).oneArg('1'); verify(mock, timeout(100)).oneArg('2'); }
public void canIgnoreInvocationsWithJunit() throws InterruptedException { DelayedExecution delayedExecution = create
public void canIgnoreInvocationsWithJunit() throws InterruptedException { }
public void canIgnoreInvocationsWithJunit() { }
public final boolean isExtendedLifetimeValid() { return mExtendedExpiresOn!= null &&!StringExtensions.IsNullOrBlank(mAccessToken); }
public final boolean isExtendedLifetimeValid() { return!StringExtensions.IsNullOrBlank(mAccessToken); }
public final boolean isExtendedLifetimeValid() { return!StringExtensions.IsNullOrBlank(mAccessToken) &&!isTokenExpired(mExtendedExpiresOn); }
public final boolean isExtendedLifetimeValid() { return!StringExtensions.IsNullOrBlank(mAccessToken) || mExtendedExpiresOn!= null; }
public final boolean isExtendedLifetimeValid() { return mExtendedExpiresOn!= null &&!StringExtensions.IsNullOrBlank(mAccessToken)) && isTokenExpired(mExtendedExpiresOn); }
public void sendDocumentFinalizedMessage(IWantDocument iWantDocument) throws IOException { BodyMailMessage message = buildDocumentFinalizedMessage(iWantDocument); try { emailService.sendMessage(message, false); } catch (Exception e) { LOG.error(errorMessage, e.getMessage()); LOG.error(errorMessage, e); } }
public void sendDocumentFinalizedMessage(IWantDocument iWantDocument) throws IOException { BodyMailMessage message = buildDocumentFinalizedMessage(iWantDocument); try { emailService.sendMessage(message, false); } catch (Exception e) { LOG.error(errorMessage, e.getMessage()); } }
public void sendDocumentFinalizedMessage(IWantDocument iWantDocument) { BodyMailMessage message = buildDocumentFinalizedMessage(iWantDocument); try { emailService.sendMessage(message, false); } catch (Exception e) { LOG.error(errorMessage, e.getMessage()); LOG.error(errorMessage, e); } }
public void sendDocumentFinalizedMessage(IWantDocument iWantDocument) { BodyMailMessage message = buildDocumentFinalizedMessage(iWantDocument); try { emailService.sendMessage(message, false); } catch (Exception e) { LOG.error(errorMessage, e.getMessage()); LOG.error(errorMessage, e); } } }
public void sendDocumentFinalizedMessage(IWantDocument iWantDocument) throws IOException { BodyMailMessage message = buildDocumentFinalizedMessage(iWantDocument); try { emailService.sendMessage(message, false); } catch (Exception e) { LOG.error(errorMessage, e.getMessage()); } } }
public void addStore(PartitionId partitionId, ReplicationTest.StoreEventListener listener) { storesByPartition.computeIfAbsent(partitionId, partitionId1 -> new InMemoryStore(partitionId, infosByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<MessageInfo>>) partitionId2 -> new ArrayList<>()), buffersByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<ByteBuffer>>) partitionId22 -> new ArrayList<>()), listener)); }
public void addStore(PartitionId partitionId, ReplicationTest.StoreEventListener listener) { storesByPartition.computeIfAbsent(partitionId, partitionId1 -> new InMemoryStore(partitionId, infosByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<MessageInfo>>) partitionId2 -> new ArrayList<>()), buffersByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<ByteBuffer>>) partitionId 22 -> new ArrayList<>()), listener)); }
public void addStore(PartitionId partitionId, ReplicationTest.StoreEventListener listener) { storesByPartition.computeIfAbsent(partitionId, partitionId1 -> new InMemoryStore(partitionId, infosByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<MessageInfo>>) partitionId2) -> new ArrayList<>()), buffersByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<ByteBuffer>>) partitionId22 -> new ArrayList<>()), listener)); }
public void addStore(PartitionId partitionId, ReplicationTest.StoreEventListener listener) { storesByPartition.computeIfAbsent(partitionId, partitionId1 -> new InMemoryStore(partitionId, infosByPartition.computeIfAbsent(partitionId, (Function<PartitionId, List<MessageInfo>>) partitionId2 -> new ArrayList<>()), buffersByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<ByteBuffer>>) partitionId22 -> new ArrayList<>()), listener)); }
public void addStore(PartitionId partitionId, ReplicationTest.StoreEventListener listener) { storesByPartition.computeIfAbsent(partitionId, partitionId1 -> new InMemoryStore(partitionId, infosByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<MessageInfo>>) partitionId 2 -> new ArrayList<>()), buffersByPartition.computeIfAbsent(partitionId1, (Function<PartitionId, List<ByteBuffer>>) partitionId22 -> new ArrayList<>()), listener)); }
private static long doubleToSortableLong(double value) { return bits  (bits >> 63) & Long.MAX_VALUE; }
private static long doubleToSortableLong(double value) { return Double.doubleToLongBits(value) & Long.MAX_VALUE; }
private static long doubleToSortableLong(double value) { return bits == Double.doubleToLongBits(value)? Long.MAX_VALUE : Long.MAX_VALUE; }
private static long doubleToSortableLong(double value) { return bits == Double.doubleToLongBits(value) & Long.MAX_VALUE; }
private static long doubleToSortableLong(double value) { return (double) value; }
default int getGroupedJobInitializerCacheSize() { return 10; }
default int getGroupedJobInitializerCacheSize() { return 1; }
default int getGroupedJobInitializerCacheSize() { return getGroupedJobInitializerCacheSize(); }
default int getGroupedJobInitializerCacheSize() { return Integer.parseInt(getGroupedJobInitializerCacheSize()); }
default int getGroupedJobInitializerCacheSize() { return 0; }
public DefaultCompactionPolicyTest() throws InterruptedException { Pair<MockBlobStore, StoreConfig> initState = CompactionPolicyTest.initializeBlobStore(properties, time, -1, -1, DEFAULT_MAX_BLOB_SIE); config = initState.getSecond(); blobStore = initState.getFirst();mockBlobStoreStats = blobStore.getBlobStoreStats(); this.messageRetentionTimeInMs = config.storeDeletedMessageRetentionDays * Time.HoursPerDay * Time.SecsPerHour * Time.MsPerSec; this.compactionPolicy = new DefaultCompactionPolicy(config, time); }
public DefaultCompactionPolicyTest() throws InterruptedException { Pair<MockBlobStore, StoreConfig> initState = CompactionPolicyTest.initializeBlobStore(properties, time, -1, -1, DEFAULT_MAX_BLOB_SIE); config = initState.getSecond(); blobStore = initState.getFirst(); mockBlobStoreStats = blobStore.getBlobStoreStats(); this.messageRetentionTimeInMs = config.storeDeletedMessageRetentionDays * Time.HoursPerDay * Time.SecsPerHour * Time.MsPerSec; this.compactionPolicy = new DefaultCompactionPolicy(config, time); }
public DefaultCompactionPolicyTest() throws InterruptedException { Pair<MockBlobStore, StoreConfig> initState = CompactionPolicyTest.initializeBlobStore(properties, time, -1, -1, DEFAULT_MAX_BLOB_SIE); config = initState.getSecond(); blobStore = initState.getFirst(); blobStoreStats = blobStore.getBlobStoreStats(); this.messageRetentionTimeInMs = config.storeDeletedMessageRetentionDays * Time.HoursPerDay * Time.SecsPerHour * Time.MsPerSec; this.compactionPolicy = new DefaultCompactionPolicy(config, time); }
public DefaultCompactionPolicyTest() throws InterruptedException { Pair<MockBlobStore, StoreConfig> initState = CompactionPolicyTest.initializeBlobStore(properties, time, -1, -1, DEFAULT_MAX_BLOB_SIE); config = initState.getSecond(); blobStore = initState.getFirst(); mymockBlobStoreStats = blobStore.getBlobStoreStats(); this.messageRetentionTimeInMs = config.storeDeletedMessageRetentionDays * Time.HoursPerDay * Time.SecsPerHour * Time.MsPerSec; this.compactionPolicy = new DefaultCompactionPolicy(config, time); }
public DefaultCompactionPolicyTest() throws InterruptedException { Pair<MockBlobStore, StoreConfig> initState = CompactionPolicyTest.initializeBlobStore(properties, time, -1, -1, DEFAULT_MAX_BLOB_SIE); config = initState.getSecond(); blobStore = initState.getFirst();mockBlobStoreStats = blobStore.getBlobStoreStats(); this.messageRetentionTimeInMs = config.storeDeletedMessageRetentionDays * Time.HoursPerDay * Time.SecsPerHour * Time.MsPerSec; this.compactionPolicy = new DefaultCompactionPolicy(config, time); } }
private boolean containtsOnlyValidXMLChars(String stringToValidate) { String pattern = "[" + "\u0009\r\n" + "\u0020-\uD7FF" + "\uE000-\uFFFD" + "\ud800\udc00-\udbff\udfff" + "]"; String resultString = stringToValidate.replaceAll(pattern, ""); if (resultString.equals(stringToValidate)) { return true; } return false; }
private static boolean containtsOnlyValidXMLChars(String stringToValidate) { String pattern = "[" + "\u0009\r\n" + "\u0020-\uD7FF" + "\uE000-\uFFFD" + "\ud800\udc00-\udbff\udfff" + "]"; String resultString = stringToValidate.replaceAll(pattern, ""); if (resultString.equals(stringToValidate)) { return true; } return false; }
private boolean containstsOnlyValidXMLChars(String stringToValidate) { String pattern = "[" + "\u0009\r\n" + "\u0020-\uD7FF" + "\uE000-\uFFFD" + "\ud800\udc00-\udbff\udfff" + "]"; String resultString = stringToValidate.replaceAll(pattern, ""); if (resultString.equals(stringToValidate)) { return true; } return false; }
private boolean containtsOnlyValidXMLChars(String stringToValidate) { String pattern = "[" + "\u0009\r\n" + "\u0020-\uD7FF" + "\uE000-\uFFFD" + "\ud800\udc00-\udbff\\udfff" + "]"; String resultString = stringToValidate.replaceAll(pattern, ""); if (resultString.equals(stringToValidate)) { return true; } return false; }
private boolean containtsOnlyValidXMLChars(String stringToValidate) { String pattern = "[" + "\u0009\r\n" + "\u0020-\uD7FF" + "\uE000-\uFFFD" + "\ud800\udc00-\udbff\udfff" + "]"; String resultString = stringToValidate.replaceAll(pattern, ""); if (resultString.equals(stringToValidate)) { return true; } return false; } }
public CloseableLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, Database database, ManagedDataSource dataSource) throws LiquibaseException, SQLException { super(changeLogFile, resourceAccessor, database); this.dataSource = dataSource; }
public CloseableLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, Database database, ManagedDataSource dataSource) throws liquibaseException, SQLException { super(changeLogFile, resourceAccessor, database); this.dataSource = dataSource; }
public Closeableliquibase(String changeLogFile, ResourceAccessor resourceAccessor, Database database, ManagedDataSource dataSource) throws LiquibaseException, SQLException { super(changeLogFile, resourceAccessor, database); this.dataSource = dataSource; }
public CloseableLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, Connection database, ManagedDataSource dataSource) throws LiquibaseException, SQLException { super(changeLogFile, resourceAccessor, database); this.dataSource = dataSource; }
public CloseableLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, Database database, ManagedDataSource dataSource) throws LiquibaseException, SQLException { super(changeLogFile, resourceAccessor, database); this.dataSource = dataSource; this.close(); }
public CtfTmfLightweightContext(ArrayList<CtfIterator> iters, ListIterator<CtfIterator> pos) { fIteratorPool = iters; fCurrentIterator = pos; fTrace = iters.get(0).getCtfTmfTrace(); curLocation = new CtfLocation((Long)null); collisions = 0; }
public CtfTmfLightweightContext(ArrayList<CtfIterator> iters, ListIterator<CtfIterator> pos) { fIteratorPool = iters; fCurrentIterator = pos; fTrace = iters.get(0).getCtfTmfTrace(); curLocation = new CtfLocation((Long)null); collisions = 0; } return this; }
public CtfTmfLightweightContext(ArrayList<CtfIterator> iters, ListIterator<CtfIterator> pos) { fIteratorPool = iters; fCurrentIterator = pos; fTrace = iters.get(0).getCtfTmfTrace(); curLocation = new CtfLocation((Long)null); collisions = 0; } }
public CtfTmfLightweightContext(ArrayList<CtfIterator> iters, ListIterator<CtfIterator> pos) { fIteratorPool = iters; fCurrentIterator = pos; fTrace = iters.get(0).getCtfTmfTrace(); curLocation = new CtfLocation((Long)null); }
public CtfTmfLightweightContext(ArrayList<CtfIterator> iters, ListIterator<CtfIterator> pos) { fIteratorPool = iters; fCurrentIterator = pos; fTrace = iters.get(0).getCtfTmfTrace(); curLocation = new CtfLocation((Long)null); collisions++; }
public void testIsAdHocAutostart_true() { String id = UUID.randomUUID().toString(); AdHocSubProcess adHocSubProcess = bpmn2.createAdHocSubProcess(); adHocSubProcess.setId(id); CustomElement.autoStart.of(adHocSubProcess).set(Boolean.TRUE); tested = new AdHocSubProcessPropertyReader(adHocSubProcess, definitionResolverReal.getDiagram(), definitionResolverReal); assertTrue(tested.isAdHocAutostart()); }
public void testIsAdHocAutostart_true() { String id = UUID.randomUUID().toString(); AdHocSubProcess adHocSubProcess = bpmn2.createAdHocSubProcess(); adHocSubProcess.setId(id); CustomElement.autoStart.of(adHocSubProcess).set(Boolean.TRUE); tested = new AdHocSubProcessPropertyReader(adHocSubProcess, definitionResolverReal.getDiagram(), definitionResolverReal); assertTrue(tested.isAdHocAutostart()); } }
public void testIsAdHocAutostart_true() { String id = UUID.randomUUID().toString(); AdHocSubProcess adHocSubProcess = bpmn1.createAdHocSubProcess(); adHocSubProcess.setId(id); CustomElement.autoStart.of(adHocSubProcess).set(Boolean.TRUE); tested = new AdHocSubProcessPropertyReader(adHocSubProcess, definitionResolverReal.getDiagram(), definitionResolverReal); assertTrue(tested.isAdHocAutostart()); }
public void testIsAdHocAutostart_true() { String id = UUID.randomUUID().toString(); AdHocSubProcess adHocSubProcess = bpmn2.createAdHocSubProcess(); adHocSubProcess.setId(id()); CustomElement.autoStart.of(adHocSubProcess).set(Boolean.TRUE); tested = new AdHocSubProcessPropertyReader(adHocSubProcess, definitionResolverReal.getDiagram(), definitionResolverReal); assertTrue(tested.isAdHocAutostart()); }
public void testIsAdHocAutostart_true() { String id = UUID.randomUUID().toString(); AdHocSubProcess adHocSubProcess = bpmn2.createAdHocSubProcess(); adHocSubProcess.setId(id); CustomElement.autoStart.of(adHocSubProcess).set(Boolean.TRUE); tested = new AdHocSubProcessPropertyReader(adHocSubProcess, definitionResolverReal.getDiagram(), definitionResolverReal); assertTrue(tested.isAdHocAutostart().true()); }
private BroadcastTrimmer broadcastTrimmer() { return new ScheduleResolverBroadcastTrimmer( scheduleResolver, contentResolver, contentWriter ); }
private BroadcastTrimmer broadcastTrimmer() { return new ScheduleResolverBroadcastTrimmer( this, scheduleResolver, contentResolver, contentWriter ); }
private BroadcastTrimmer broadcastTrimmer() { return new ScheduleResolverBroadcastTrimmer( this. scheduleResolver, contentResolver, contentWriter ); }
private BroadcastTrimmer broadcastTrimmer() { return new ScheduleResolverBroadcastTrimmer( this.scheduleResolver, contentResolver, contentWriter ); }
private BroadcastTrimmer broadcastTrimmer() { return new ScheduleResolverBroadcastTrimmer( this); }
public void disconnect() throws IOException { if (forwarders!= null) { for (LocalPortForwarder forwarder : forwarders) { try { forwarder.close(); } catch (IOException e) { log.warn("Error closing forwarder", e); } } } trans.disconnect(); super.disconnect(); } }
public void disconnect() throws IOException { if (forwarders!= null) { for (LocalPortForwarder forwarder : forwarders) { try { forwarder.close(); } catch (IOException e) { log.warn(e.getMessage(), e); } } trans.disconnect(); super.disconnect(); } }
public void disconnect() throws IOException { if (forwarders!= null) { for (LocalPortForwarder forwarder : forwarders) { try { forwarder.close(); } catch (IOException e) { log.error("Error closing forwarder", e); } } } trans.disconnect(); super.disconnect(); } }
public void disconnect() throws IOException { if (forwarders!= null) { for (LocalPortForwarder forwarder : forwarders) { try { forwarder.close(); } catch (IOException e) { log.warn("Error closing forwarder", e); } } } trans.disconnect(); super.disconnect(); }
public void disconnect() throws IOException { if (forwarders!= null) { for (LocalPortForwarder forwarder : forwarders) { try { forwarder.close(); } catch (IOException e) { log.warn("Error closing forwarder", e); } } } trans.disconnect(); super.disconnect(); }}
public void close() { super.close(); if (mRefCount!= null) { mRefCount.decrementAndGet(); } }
public void close() { try { super.close(); } finally { mRefCount.decrementAndGet(); } } }
public void close() { super.close(); mRefCount!= null? mRefCount.decrementAndGet() : null; }
public void close() { super.close(); mRefCount.decrementAndGet(); }
public void close() { super.close(); }
public static String getParameter(String key) { try { return getConfig().getString(key); } catch (NoSuchElementException e) { throw new NoSuchElementException("No configuration found in " + CONFIG_FILE + " for key " + key + "!"); } }
public static String getParameter(String key) { try { return getConfig().getString(key); } catch (NoSuchElementException e) { throw new IllegalArgumentException("No configuration found in " + CONFIG_FILE + " for key " + key + "!"); } }
public static String getParameter(String key) { try { return getConfig().getString(key); } catch (NoSuchElementException e) { LOG.error("No configuration found in " + CONFIG_FILE + " for key " + key + "!"); } }
public static String getParameter(String key) { try { return getConfig().getString(key); } catch (NoSuchElementException e) { logger.error("No configuration found in " + CONFIG_FILE + " for key " + key + "!"); } }
public static String getParameter(String key) { try { return getConfig().getString(key); } catch (NoSuchElementException e) { log.error("No configuration found in " + CONFIG_FILE + " for key " + key + "!"); } }
public List<Option> getOptions() { return options; }
public List<Option> getOptions() { return Arrays.asList(options); }
public List<Option> getOptions() { return List.of(options); }
public List<Option> getOptions() { return ImmutableList.of(options); }
public List<Option> getOptions() { return ImmutableList.of(); }
public DataInputNavigableJsonAdapter(BufferObjectDataInput input, int initialOffset) { this.input = input; this.initialOffset = initialOffset; }
DataInputNavigableJsonAdapter(BufferObjectDataInput input, int initialOffset) { this.input = input; this.initialOffset = initialOffset; }
public DataInputNavigableJsonAdapter(BufferObjectDataInput input, int initialOffset) { this(input, initialOffset, initialOffset); }
public DataInputNavigableJsonAdapter(BufferObjectDataInput input, int initialOffset) { this(input, initialOffset, initialOffset, true); }
public DataInputNavigableJsonAdapter(BufferObjectDataInput input, int initialOffset) { this(input, initialOffset, initialOffset, null); }
protected void onMethodInvocationFound(MethodInvocationTree mit) { ExpressionTree argument = mit.arguments().get(1); Type type = argument.symbolType(); if (type.isUnknown()) { return; } if (ExpressionsHelper.isNotSerializable(argument)) { String andParameters = JUtils.isParametrized(type)? " and its parameters" : ""; reportIssue(argument, "Make \"" + type + "\"" + andParameters + " serializable or don't store it in the session."); } }
protected void onMethodInvocationFound(MethodInvocationTree mit) { ExpressionTree argument = mit.arguments().get(1); Type type = argument.symbolType(); if (type.isUnknown()) { return; } if (ExpressionsHelper.isNotSerializable(argument)) { String andParameters = JUtils.isParametrized(type)? " and its parameters" : ""; reportIssue(argument, "Make \"" + type + "\"" + andParameters + " serializable or dont't store it in the session."); } }
protected void onMethodInvocationFound(MethodInvocationTree mit) { ExpressionTree argument = mit.arguments().get(1); Type type = argument.symbolType(); if (type.isUnknown()) { return; } if (ExpressionsHelper.isNotSerializable(argument)) { String andParameters = JUtils.isParametrized(type)? " and its parameters" : ""; reportIssue(argument, "Make \"" + type + "\"" + orParameters + " serializable or don't store it in the session."); } }
protected void onMethodInvocationFound(MethodInvocationTree mit) { ExpressionTree argument = mit.arguments().get(1); if (type.isUnknown()) { return; } if (ExpressionsHelper.isNotSerializable(argument)) { String andParameters = JUtils.isParametrized(type)? " and its parameters" : ""; reportIssue(argument, "Make \"" + type + "\"" + andParameters + " serializable or don't store it in the session."); } }
protected void onMethodInvocationFound(MethodInvocationTree mit) { ExpressionTree argument = mit.arguments().get(1); Type type = argument.symbolType(); if (type.isUnknown()) { return; } if (ExpressionsHelper.isNotSerializable(argument)) { String andParameters = JUtils.isParametrized(type)? "and its parameters" : ""; reportIssue(argument, "Make \"" + type + "\"" + andParameters + " serializable or don't store it in the session."); } }
public Predicate createPredicateAndJoin(String filterString, Root<T> root) { LogicalOperatorRulesLexer lexer = new LogicalOperatorRulesLexer(new ANTLRInputStream(filterString)); LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser(new CommonTokenStream(lexer)); parser.addErrorListener(new OsiamAntlrErrorListener()); ParseTree tree = parser.parse(); EvalVisitor<T> visitor = new EvalVisitor<>(this, root); return (Predicate) visitor.visit(tree); }
public Predicate createPredicateAndJoin(String filterString, Root<T> root) { LogicalOperatorRulesLexer lexer = new LogicalOperatorRulesLexer(new ANTLRInputStream(filterString)); LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser(new CommonTokenStream(lexer)); parser.addErrorListener(new OsiamAntlrErrorListener()); ParseTree tree = parser.parse(); EvalVisitor<T> visitor = new EvalVisitor<>(this, root); return visitor.visit(tree); }
public Predicate createPredicateAndJoin(String filterString, Root<T> root) { LogicalOperatorRulesLexer lexer = new LogicalOperatorRulesLexer(new ANTLRInputStream(filterString)); LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser(new CommonTokenStream(expression)); parser.addErrorListener(new OsiamAntlrErrorListener()); ParseTree tree = parser.parse(); EvalVisitor<T> visitor = new EvalVisitor<>(this, root); return (Predicate) visitor.visit(tree); }
public Predicate createPredicateAndJoin(String filterString, Root<T> root) { LogicalOperatorRulesLexer lexer = new LogicalOperatorRulesLexer(new ANTLRInputStream(filterString)); LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser(newCommonTokenStream(lexer)); parser.addErrorListener(new OsiamAntlrErrorListener()); ParseTree tree = parser.parse(); EvalVisitor<T> visitor = new EvalVisitor<>(this, root); return (Predicate) visitor.visit(tree); }
public Predicate createPredicateAndJoin(String filterString, Root<T> root) { LogicalOperatorRulesLexer lexer = new LogicalOperatorRulesLexer(new ANTLRInputStream(filterString)); LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser(new CommonTokenStream(lexer)); parser.addListener(new OsiamAntlrErrorListener()); ParseTree tree = parser.parse(); EvalVisitor<T> visitor = new EvalVisitor<>(this, root); return (Predicate) visitor.visit(tree); }
public Privilege[] getSupportedPrivileges(String path) throws PathNotFoundException, RepositoryException { return privileges.listOfSupported(); }
public Privilege[] getSupportedPrivileges(String path) { return privileges.listOfSupported(); }
public Privilege[] getSupportedPrivileges(String path) throws PathNotFoundException, RepositoryException { return privileges. listOfSupported(); }
public Privilege[] getSupportedPrivileges(String path) throw PathNotFoundException, RepositoryException { return privileges.listOfSupported(); }
public Privilege[] getSupportedPrivileges(String path) throws RepositoryException { return privileges.listOfSupported(); }
protected AbstractSessionPresenter(final SessionManager sessionManager, final SessionPresenter.View view, final Optional<? extends ToolbarFactory<S>> toolbarFactory, final Optional<PaletteWidgetFactory<DefinitionSetPalette,?>> paletteFactory, final NotificationsObserver notificationsObserver) { this.sessionManager = sessionManager; this.toolbarFactory = toolbarFactory.orElse(null); this.paletteFactory = paletteFactory.orElse(null); this.notificationsObserver = notificationsObserver; this.view = view; this.hasToolbar = true; this.hasPalette = true; }
protected AbstractSessionPresenter(final SessionManager sessionManager, final SessionPresenter.View view, final Optional<? extends ToolbarFactory<S>> toolbarFactory, final Optional<PaletteWidgetFactory<DefinitionSetPalette,?>> paletteFactory, final NotificationsObserver notificationsObserver) { this.sessionManager = sessionManager; this.toolbarFactory = toolbarFactory; this.paletteFactory = paletteFactory.orElse(null); this.notificationsObserver = notificationsObserver; this.view = view; this.hasToolbar = true; this.hasPalette = true; }
protected AbstractSessionPresenter(final SessionManager sessionManager, final SessionPresenter.View view, final Optional<? extends ToolbarFactory<S>> toolbarFactory, final Optional<PaletteWidgetFactory<DefinitionSetPalette,?>> paletteFactory, final NotificationsObserver notificationsObserver) { this.sessionManager = sessionManager; this.toolbarFactory = toolbarFactory.orElse(""); this.paletteFactory = paletteFactory.orElse(null); this.notificationsObserver = notificationsObserver; this.view = view; this.hasToolbar = true; this.hasPalette = true; }
protected AbstractSessionPresenter(final SessionManager sessionManager, final SessionPresenter.View view, final Optional<? extends ToolbarFactory<S>> toolbarFactory, final Optional<PaletteWidgetFactory<DefinitionSetPalette,?>> paletteFactory, final NotificationsObserver notificationsObserver) { this.sessionManager = sessionManager; this.toolbarFactory = toolbarFactory.orElse(null); this.paletteFactory = paletteFactory.orElse(null); this.notificationsObserver = notificationObserver; this.view = view; this.hasToolbar = true; this.hasPalette = true; }
protected AbstractSessionPresenter(final SessionManager sessionManager, final SessionPresenter.View view, final Optional<? extends ToolbarFactory<S>> toolbarFactory, final Optional<PaletteWidgetFactory<DefinitionSetPalette,?>> paletteFactory, final NotificationsObserver notificationsObserver) { this.sessionManager = sessionManager; this.toolbarFactory = toolbarFactory.orElse(null); this.paletteFactory = paletteFactory.orElse(null); this.notificationsObserver = notificationsObserver; this.view = view; this.hasToolbar = true; this.hasPalette = true; } }
public void prepareToNewMarker() { drawerLayout.closeDrawers(); setLongClickListener(true); setToastMarkerInfo(); }
public void prepareToNewMarker() { super.prepareToNewMarker(); setLongClickListener(true); setToastMarkerInfo(); }
public void prepareToNewMarker() { super. prepareToNewMarker(); setLongClickListener(true); setToastMarkerInfo(); }
public void prepareToNewMarker() { if ( drawerLayout!= null) { setLongClickListener(true); setToastMarkerInfo(); } }
public void prepareToNewMarker() { drawerLayout.closeDrawers(); setLongClickListener(true); }
private MVCCEntry wrapMvccEntryForPut(InvocationContext ctx, Object key, CacheEntry cacheEntry, Metadata providedMetadata, boolean skipRead) { if (cacheEntry instanceof MVCCEntry) { MVCCEntry mvccEntry = (MVCCEntry) cacheEntry; updateMetadata(mvccEntry, providedMetadata); return mvccEntry; } return wrapInternalCacheEntryForPut(ctx, key, (InternalCacheEntry) cacheEntry, providedMetadata, skipRead); }
private MVCCEntry wrapMvccEntryForPut(InvocationContext ctx, Object key, CacheEntry cacheEntry, Metadata providedMetadata, boolean skipRead) { if (cacheEntry instanceof MVCCEntry) { MVCCEntry mvccEntry = (MVCCEntry) cacheEntry; updateMetadata(mvccEntry, providedMetadata); return mvccEntry; } return wrapInternalCacheEntryForPut(ctx, key, (InternalCacheEntry) cacheEntry, providedMetadata, false); }
private MVCCEntry wrapMvccEntryForPut(InvocationContext ctx, Object key, CacheEntry cacheEntry, Metadata providedMetadata, boolean skipRead) { if (cacheEntry instanceof MVCCEntry) { MVCCEntry mvccEntry = ( MVCCEntry) cacheEntry; updateMetadata(mvccEntry, providedMetadata); return mvccEntry; } return wrapInternalCacheEntryForPut(ctx, key, (InternalCacheEntry) cacheEntry, providedMetadata, skipRead); }
private MVCCEntry wrapMvccEntryForPut(InvocationContext ctx, Object key, CacheEntry cacheEntry, Metadata providedMetadata, boolean skipRead) { if (cacheEntry instanceof MVCCEntry) { MVCCEntry mvccEntry = (ModelCEntry) cacheEntry; updateMetadata(mvccEntry, providedMetadata); return mvccEntry; } return wrapInternalCacheEntryForPut(ctx, key, (InternalCacheEntry) cacheEntry, providedMetadata, skipRead); }
private MVCCEntry wrapMvccEntryForPut(InvocationContext ctx, Object key, CacheEntry cacheEntry, Metadata providedMetadata, boolean skipRead) { if (cacheEntry instanceof MVCCEntry) { MVCCEntry mvccEntry = (MVCCEntry) cacheEntry; updateMetadata(mvccEntry, providedMetadata); return mvccEntry; } return wrapInternalCacheEntryForPut(ctx, key, (InternalCacheEntry<?>) cacheEntry, providedMetadata, skipRead); }
public SERVICE_FAILURE_ACTIONS getFailureActions() { Pointer buffer = queryServiceConfig2(Winsvc.SERVICE_CONFIG_FAILURE_ACTIONS); SERVICE_FAILURE_ACTIONS result = new SERVICE_FAILURE_ACTIONS(buffer); result.read(); return result; }
public SERVICE_FAILURE_ACTIONS getFailureActions() { Pointer buffer = queryServiceConfig2(Winsvc.SERVICE_CONFIG_FAILURE_ACTIONS); SERVICE_FAILURE_ACTIONS result = new SERVICE_FAILURE_ACTIONS(buffer); result.read(); return results; }
public SERVICE_FAILURE_ACTIONS getFailureActions() { Pointer buffer = queryServiceConfig2(Winsvc.SERVICE_CONFIG_FAILURE_ACTIONS); SERVICE_FAILURE_ACTIONS result = new SERVICE_FAILURE_ACTIONS(buffer); results.read(); return result; }
public SERVICE_FAILURE_ACTIONS getFailureActions() { SERVICE_FAILURE_ACTIONS result = queryServiceConfig2(Winsvc.SERVICE_CONFIG_FAILURE_ACTIONS); result.read(); return result; }
public SERVICE_FAILURE_ACTIONS getFailureActions() { Pointer buffer = queryServiceConfig2(Winsvc.SERVICE_CONFIG_FAILURE_ACTIONS); return new SERVICE_FAILURE_ACTIONS(buffer); }
void fun(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception { new File(strPath); new File(StrParent, StrChild); File parent = new File(uri); new File(parent, StrChild); File.createTempFile(prefix, suffix); }
void fun(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws IOException { new File(strPath); new File(StrParent, StrChild); File parent = new File(uri); new File(parent, StrChild); File.createTempFile(prefix, suffix); }
void fun(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws IllegalArgumentException { new File(strPath); new File(StrParent, StrChild); File parent = new File(uri); new File(parent, StrChild); File.createTempFile(prefix, suffix); }
protected void fun(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception { new File(strPath); new File(StrParent, StrChild); File parent = new File(uri); new File(parent, StrChild); File.createTempFile(prefix, suffix); }
void fun(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception { new File(strPath, new File(StrParent, StrChild)); File parent = new File(uri); new File(parent, StrChild); File.createTempFile(prefix, suffix); }
public ValidationResult vmNotHavingPciPassthroughDevices() { for (VM vm : vms) { if (getHostDeviceManager().checkVmNeedsPciDevices(vm.getId())) { return new ValidationResult(EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES, String.format("VmName %s", vm.getName())); } } return ValidationResult.VALID; }
public ValidationResult vmNotHavingPciPassthroughDevices() { for (VM vm : vms) { if (!getHostDeviceManager().checkVmNeedsPciDevices(vm.getId())) { return new ValidationResult(EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES, String.format("VmName %s", vm.getName())); } } return ValidationResult.VALID; }
public ValidationResult vmNotHavingPciPassthroughDevices() { for (VM vm : vms) { if (getHostDeviceManager().checkVmNeedsPciDevices(vm.getId())) { return new ValidationResult(EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES, String.format("VmName %s", vm.getId())); } } return ValidationResult.VALID; }
public ValidationResult vmNotHavingPciPassthroughDevices() { for (VM vm : vms) { if (getHostDeviceManager().checkVmNeedsPciDevices(vm.getId())) { return new ValidationResult(EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES, String.format("VmName %s",vm.getName())); } } return ValidationResult.VALID; }
return ValidationResult.VALID; }
public void onError(Throwable e) { e.printStackTrace(); try { FileLfsServlet.sendError(response, HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage()); context.complete(); in.close(); } catch (IOException ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } }
public void onError(Throwable e) { try { FileLfsServlet.sendError(response, HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage()); context.complete(); in.close(); } catch (IOException ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } }
public void onError(Throwable e) { e.printStackTrace(); try { FileLfsServlet.sendError(response, HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage()); context.complete(); in.close(); } catch (IOException ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } } }
public void onError(Throwable e) { try { FileLfsServlet.sendError(response, HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage()); context.complete(); in.close(); } catch (IOException ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } } }
public void onError(Throwable e) { e.printStackTrace(); try { FileLfsServlet.sendError(response, HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage()); context.complete(); in.close(); } catch (IOException ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } } finally { context.complete(); } }
public String pop() { return!lines.remove(lines.lastKey()); }
public String pop() { return new String(lines.lastKey()); }
public String pop() { return lines.remove(lines.lastKey()); }
public String pop() { return new String(lines); }
public String pop() { return!lines.remove(lines); }
public void onDestroyView() { mapView.onDestroy(); mapboxMap = null; unbinder.unbind(); unbinder = null; super.onDestroyView(); }
public void onDestroyView() { mapView.onDestroy(); mapboxMap = null; unbinder.unbind(); unbinder = null; }
public void onDestroyView() { mapView.onDestroy(); mapboxMap = null; unbinder.unbind(); unbinder = null; super.onDestroyView().watch(this); }
public void onDestroyView() { mapView.onDestroy(); mapboxMap = null; unbinder.unbind(); unbinder = null; Test.getInstance().getRefWatcher().watch(this); }
public void onDestroyView() { mapView.onDestroy(); unbinder.unbind(); unbinder = null; }
private static SampleTissueProcessingDto asTissueProcessingSampleDto(SampleTissueProcessing from) { SampleTissueProcessingDto dto = null; if (from.getClass() == SampleCVSlideImpl.class) { dto = asCVSlideSampleDto((SampleCVSlide) from); } else if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleLCMTube) from); } else { dto = new SampleTissueProcessingDto(); } return dto; }
private static SampleTissueProcessingDto asTissueProcessingSampleDto(SampleTissueProcessing from) { SampleTissueProcessingDto dto; if (from.getClass() == SampleCVSlideImpl.class) { dto = asCVSlideSampleDto((SampleCVSlide) from); } else if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleLCMTube) from); } else { dto = new SampleTissueProcessingDto(); } return dto; }
private static SampleTissueProcessingDto asTissueProcessingSampleDto(SampleTissueProcessing from) { SampleTissueProcessingDto dto = null; if (from.getClass() == SampleCVSlideImpl.class) { dto = asCVSlideSampleDto((SampleCVSlide) from); } else if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleLCMTube) from); } else { dto = new SampleTissueProcessingDto(); } return dto; } }
private static SampleTissueProcessingDto asTissueProcessingSampleDto(SampleTissueProcessing from) { SampleTissueProcessingDto dto = null; if (from.getClass() == SampleCVSlideImpl.class) { dto = asCVSlideSampleDto((SampleCVSlide) from); } else if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleLCMTube) from); } return dto; }
private static SampleTissueProcessingDto asTissueProcessingSampleDto(SampleTissueProcessing from) { SampleTissueProcessingDto dto; if (from.getClass() == SampleCVSlideImpl.class) { dto = asCVSlideSampleDto((SampleCVSlide) from); } else if (from.getClass() == SampleLCMTubeImpl.class) { dto = asLCMTubeSampleDto((SampleLCMTube) from); } else { dto = new SampleTissueProcessingDto(); } return dto; } }
public void testMakeTimeone_NoOffsets() throws IOException { int[][] times = {}; int[][] offsets = {}; try { createoneInfo(times, offsets); fail("Did not detect no transitions"); } catch (IllegalStateException expected) { } }
public void testMakeTimeone_NoOffsets() throws Exception { int[][] times = {}; int[][] offsets = {}; try { createoneInfo(times, offsets); fail("Did not detect no transitions"); } catch (IllegalStateException expected) { } }
public void testMakeTimeone_NoOffsets() throws IOException { int[][] times = {}; int[][] offsets = {}; try { createoneInfo(times, offsets); fail("Did not detect no transitions"); } catch (IllegalStateException expected) { } } }
public void testMakeTimeone_NoOffsets() throws IOException { int[][] times = {}; int[][] offsets = {}; createoneInfo(times, offsets); }
public void testMakeTimeone_NoOffsets() throws IOException { int[][] times = {}; int[][] offsets = {}; createoneInfo(times, offsets); fail("Did not detect no transitions"); }
DeploymentToNodeMetadata(@Memoized Supplier<Set<? extends Location>> locations, GroupNamingConvention.Factory namingConvention, OSImageToImage osImageToImage, RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) { this.nodeNamingConvention = namingConvention.createWithoutPrefix(); this.locations = checkNotNull(locations, "locations"); this.osImageToImage = osImageToImage; this.roleSizeToHardware = roleSizeToHardware; this.credentialStore = credentialStore; }
DeploymentToNodeMetadata(@Memoized Supplier<Set<? extends Location>> locations, GroupNamingConvention.Factory namingConvention, OSImageToImage osImageToImage, RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) { this.nodeNamingConvention = namingConvention.createWithoutPrefix(); this.locations = checkNotNull(locations, "locations"); this.osImageToImage = osImageToImage; this.roleSizeToHardware = checkNotNull(roleSizeToHardware, "roleSizeToHardware"); this.credentialStore = credentialStore; }
DeploymentToNodeMetadata(@Memoized Supplier<Set<? extends Location>> locations, GroupNamingConvention.Factory namingConvention, OSImageToImage osImageToImage, RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) { this.nodeNamingConvention = namingConvention.createWithoutPrefix(); this.locations = container; this.osImageToImage = osImageToImage; this.roleSizeToHardware = roleSizeToHardware; this.credentialStore = credentialStore; }
DeploymentToNodeMetadata(@Memoized Supplier<Set<? extends Location>> locations, GroupNamingConvention.Factory namingConvention, OSImageToImage osImageToImage, RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) { this.nodeNamingConvention = namingConvention.createWithoutPrefix(); this.locations = checkNotNull(locations, "locations"); this.osImageToImage = osImageToImage; this.roleSizeToHardware = roleSizeToHardware; this.credentialStore = credentialStore; this.credentialStore = credentialStore; }
DeploymentToNodeMetadata(@Memoized Supplier<Set<? extends Location>> locations, GroupNamingConvention.Factory namingConvention, OSImageToImage osImageToImage, RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) { this.nodeNamingConvention = namingConvention.createWithoutPrefix(); this.locations = checkNotNull(locations, "locations"); this.osImageToImage = osImageToImage; this.roleSizeToHardware = checkNotNull(roleSizeToHardware, "roleSizeToHardware"); this.credentialStore = checkNotNull(credentialStore); }
public AsyncContext startAsync() throws IllegalStateException { if (_asyncNotSupportedSource!= null) throw new IllegalStateException("!asyncSupported: " + _asyncNotSupportedSource); HttpChannelState state = getHttpChannelState(); if (_async == null) _async = new AsyncContextState(state); AsyncContextEvent event = new AsyncContextEvent(_context, _async, state, this, this, getResponse(), false); state.startAsync(event); return _async; }
public AsyncContext startAsync() throws IllegalStateException { if (_asyncNotSupportedSource!= null) throw new IllegalStateException("!asyncSupported: " + _asyncNotSupportedSource); HttpChannelState state = getHttpChannelState(); if (_async == null) _async = new AsyncContextState(state); AsyncContextEvent event = new AsyncContextEvent(_context, _async, state, this, this, this, getResponse(), false); state.startAsync(event); return _async; }
public AsyncContext startAsync() throws IllegalStateException { if (_asyncNotSupportedSource!= null) throw new IllegalStateException("!asyncSupported: " + _asyncNotSupportedSource); HttpChannelState state = getHttpChannelState(); if (_async == null) _async = new AsyncContextState(state); AsyncContextEvent event = new AsyncContextEvent(_context, _async, state, this, this, null, getResponse(), false); state.startAsync(event); return _async; }
public AsyncContext startAsync() throws IllegalStateException { if (_asyncNotSupportedSource!= null) throw new IllegalStateException("!asyncSupported: " + _asyncNotSupportedSource); HttpChannelState state = getHttpChannelState(); if (_async == null) _async = new AsyncContextState(state); AsyncContextEvent event = new AsyncContextEvent(_context, _async, state, this, this, getHttpChannelState()); state.startAsync(event); return _async; }
public synchronized AsyncContext startAsync() throws IllegalStateException { if (_asyncNotSupportedSource!= null) throw new IllegalStateException("!asyncSupported: " + _asyncNotSupportedSource); HttpChannelState state = getHttpChannelState(); if (_async == null) _async = new AsyncContextState(state); AsyncContextEvent event = new AsyncContextEvent(_context, _async, state, this, this, getResponse(), false); state.startAsync(event); return _async; }
CompletableFuture<Void> getFailureOp(CommitData cd) { return CompletableFuture.supplyAsync(() -> { try { rollbackLocks(cd); } catch (Exception e) { throw new CompletionException(e); } return null; }, env.getSharedResources().getSyncCommitExecutor()); }
CompletableFuture<Void> getFailureOp(CommitData cd) { return CompletableFuture.supplyAsync(() -> { try { rollbackLocks(cd); } catch (Exception e) { throw new CompletionException(e); } return null; }, env.getSharedResources().getSyncCommitExecutor()); } }); }
CompletableFuture<Void> getFailureOp(CommitData cd) { return CompletableFuture.supplyAsync(() -> { try { rollbackLocks(cd); } catch (Exception e) { throw new CompletionException(e); } return null; }, env.getSharedResources().getSyncCommitExecutor()); } }
CompletableFuture<Void> getFailureOp(CommitData cd) { return CompletableFuture.supplyAsync(() -> { try { rollbackLocks(cd); } catch (Exception e) { throw new CompletionException(e); } return null; }, env.getSharedResources().getSyncCommitExecutor()); })); }
CompletableFuture<Void> getFailureOp(CommitData cd) { return CompletableFuture.supplyAsync(() -> { try { rollbackLocks(cd); } catch (Exception e) { throw new CompletionException(e); } return null; }, env.getSharedResources().getSyncCommitExecutor()); }}
private boolean isGuavaPrecondition(Symbol.MethodSymbol symbol) { return symbol.owner().type().is("checkNotNull".equals(symbol.name()) || "checkArgument".equals(symbol.name()) || "checkState".equals(symbol.name()) ); }
private static boolean isGuavaPrecondition(Symbol.MethodSymbol symbol) { return symbol.owner().type().is("checkNotNull".equals(symbol.name()) || "checkArgument".equals(symbol.name()) || "checkState".equals(symbol.name()) ); }
private boolean isGuavaPrecondition(Symbol.MethodSymbol symbol) { return symbol.owner().type().is("com.google.common.base.Preconditions") && "checkNotNull".equals(symbol.name()) || "checkArgument".equals(symbol.name()) || "checkState".equals(symbol.name()) ); }
private boolean isGuavaTimeUnit(Symbol.MethodSymbol symbol) { return symbol.owner().type().is("checkNotNull".equals(symbol.name()) || "checkArgument".equals(symbol.name()) || "checkState".equals(symbol.name()) ); }
private boolean isGuavaPrecondition(Symbol.MethodSymbol symbol) { return symbol.owner().type().is("com.google.common.base.Preconditions") && "checkNotNull".equals(symbol.name()) || "checkArgument".equals(symbol.name()) || "checkState".equalsIgnoreCase(symbol.name()) ); }
public void loadTrace(ITmfTrace trace) { cancelUpdate(); super.loadTrace(trace); initializeDataProvider(); }
public void loadTrace(ITmfTrace trace) { super.loadTrace(trace); initializeDataProvider(); }
public void loadTrace(ITmfTrace trace) { cancelUpdate(); super.loadTrace(trace); initializingDataProvider(); }
public void loadTrace(ITmfTrace trace) { loadTrace(trace); initializeDataProvider(); }
public void loadTrace(ITmfTrace trace) { cancelUpdate(); super.loadTrace(trace); initializeDataProvider()); }
public StringInputRowParser( @JsonProperty("parseSpec") ParseSpec parseSpec, @JsonProperty("encoding") String encoding ) { this.parseSpec = parseSpec; this.mapParser = new MapInputRowParser(parseSpec); this.parser = parseSpec.makeParser(); parser.startFileFromBeginning(); if (encoding!= null) encoding = Charset.forName(encoding); else { this.charset = DEFAULT_CHARSET; } }
public StringInputRowParser( @JsonProperty("parseSpec") ParseSpec parseSpec, @JsonProperty("encoding") String encoding ) { this(parseSpec, parseSpec, encoding ); }
public StringInputRowParser( @JsonProperty("parseSpec") ParseSpec parseSpec, @JsonProperty("encoding") String encoding ) { this(parseSpec, parseSpec, encoding, true); }
public StringInputRowParser( @JsonProperty("parseSpec") ParseSpec parseSpec, @JsonProperty("encoding") String encoding ) { this( parseSpec, new MapInputRowParser(parseSpec), encoding ); }
public StringInputRowParser( @JsonProperty("parseSpec") ParseSpec parseSpec, @JsonProperty("encoding") String encoding ) { this(parseSpec, parseSpec, encoding, true ); }
public Object getNegotiatedProperty(String propName) { assertComplete(); switch (propName) { case Sasl.QOP: return selectedQop.getName(); case Sasl.MAX_BUFFER: return Integer.toString(actualMaxReceiveBuffer!= 0? actualMaxReceiveBuffer : configuredMaxReceiveBuffer); case Sasl.RAW_SEND_SIE: return Integer.toString(maxBuffer); } return super.getNegotiatedProperty(propName); }
public Object getNegotiatedProperty(String propName) { assertComplete(); switch (propName) { case Sasl.QOP: return selectedQop.getName(); case Sasl.MAX_BUFFER: return (actualMaxReceiveBuffer!= 0? actualMaxReceiveBuffer : configuredMaxReceiveBuffer); case Sasl.RAW_SEND_SIE: return Integer.toString(maxBuffer); default: return super.getNegotiatedProperty(propName); } }
public Object getNegotiatedProperty(String propName) { assertComplete(); switch (propName) { case Sasl.QOP: return selectedQop.getName(); case Sasl.MAX_BUFFER: return Integer.toString(actualMaxReceiveBuffer!= 0? actualMaxReceiveBuffer : configuredMaxReceiveBuffer); case Sasl.RAW_SEND_SIE: return Integer.toString(maxBuffer); } return super.getNegotiatedProperty(propName); } }
public Object getNegotiatedProperty(String propName) { assertComplete(); default: return super.getNegotiatedProperty(propName); } }
public Object getNegotiatedProperty(String propName) { assertComplete(); }
public static BooleanExpression asBoolean(boolean value) { return asBoolean(Expressions.constant(value)); }
public static BooleanExpression asBoolean(boolean value) { return likeBoolean(Expressions.constant(value)); }
public static BooleanExpression asBoolean(boolean value) { return exceptBoolean(Expressions.constant(value)); }
public static BooleanExpression asBoolean(boolean value) { return isBoolean(Expressions.constant(value)); }
public static BooleanExpression asBoolean(boolean value) { return asBoolean(Expressions.constant( value)); }
public void startPolicyEnforcement() throws IOException { if (m_pbd.getUsageSpecificLog().debug("Starting time based retention policy enforcement with retainMillis=" + m_retainMillis + " for PBD " + m_pbd.getNonce()); m_reader = m_pbd.openForRead(CURSOR_NAME); scheduleTaskFor(m_pbd.getNonce(), this::deleteOldSegments, 0); }
public void startPolicyEnforcement() throws IOException { if (m_pbd.getUsageSpecificLog().isDebugEnabled()) { m_pbd.getUsageSpecificLog().debug("Starting time based retention policy enforcement with retainMillis=" + m_retainMillis + " for PBD " + m_pbd.getNonce()); } m_reader = m_pbd.openForRead(CURSOR_NAME); scheduleTaskFor(m_pbd.getNonce(), deleteOldSegments(), 0); }
public void startPolicyEnforcement() throws IOException { if (m_pbd.getUsageSpecificLog().isDebugEnabled()) { m_pbd.getUsageSpecificLog().debug("Starting time based retention policy enforcement with retainMillis=" + m_retainMillis); } m_reader = m_pbd.openForRead(CURSOR_NAME); scheduleTaskFor(m_pbd.getNonce(), this::deleteOldSegments, 0); }
public void startPolicyEnforcement() throws IOException { if (m_pbd.getUsageSpecificLog().isDebugEnabled()) { m_pbd.getUsageSpecificLog().debug("Starting time based retention policy enforcement with retainMillis=" + m_retainMillis + " for PBD " + m_pbd.getNonce()); } m_reader = m_pbd.openForRead(CURSOR_NAME); scheduleTaskFor(m_pbd.getNonce(), repositoryOldSegments(), 0); }
public void startPolicyEnforcement() throws IOException { if (m_pbd.getUsageSpecificLog().debug("Starting time based retention policy enforcement with retainMillis=" + m_retainMillis + " for PBD " + m_pbd.getNonce()); m_reader = m_pbd.openForRead(CURSOR_NAME); scheduleTaskFor(m_pbd.getNonce(), this::deleteOldSegments, 0); } }
public void afterRun() throws Exception { if (recordStore.isWanReplicationEnabled()) { CacheRecord record = recordStore.getRecord(key); if (record!= null) { publishWanUpdate(key, record); } else { publishWanRemove(key); } } super.afterRun(); }
public void afterRun() throws Exception { if (recordStore.isWanReplicationEnabled()) { CacheRecord record = recordStore.getRecord(key); if (record!= null) { publishWanUpdate(key, record); } else { publishWanRemove(key); } super.afterRun(); } }
public void afterRun() throws Exception { super.afterRun(); }
public void afterRun() throws Exception { try { if (recordStore.isWanReplicationEnabled()) { CacheRecord record = recordStore.getRecord(key); publishWanUpdate(key, record); } else { publishWanRemove(key); } } super.afterRun(); } }
public void afterRun() throws Exception { if (recordStore.isWanReplicationEnabled()) { CacheRecord record = recordStore.getRecord(key); publishWanUpdate(key, record); } super.afterRun(); } }
protected String getConfigRoot() { return ClientConfigSections.HAELCAST_CLIENT.name.toLowerCase(); }
protected String getConfigRoot() { return ClientConfigSection.HAELCAST_CLIENT.name.toLowerCase(); }
protected String getConfigRoot() { return ClientConfigSections.HAELCAST_CLIENT.name; }
protected String getConfigRoot() { return ClientConfigSections.HAELCAST_CLIENT.name.equalsIgnoreCase(null)); }
protected String getConfigRoot() { return null; }
public int getCapacity() { return capacity; }
public int getCapacity() { return this.capacity; }
public int getCapacity() { return this.capacity++; }
public int getCapacity() { return size; }
public Integer getCapacity() { return capacity; }
private Set<IArtifactType> getAllArtTypes() { Set<IArtifactType> allArtTypes = new HashSet<>(); if (artifactTypes == null ||!artifactTypes.isEmpty()) { allArtTypes.addAll(artifactTypes); } else { getArtifactTypesFromWorkItemTypes(); } return allArtTypes; }
private List<IArtifactType> getAllArtTypes() { Set<IArtifactType> allArtTypes = new HashSet<>(); if (artifactTypes == null ||!artifactTypes.isEmpty()) { allArtTypes.addAll(artifactTypes); } else { getArtifactTypesFromWorkItemTypes(); } return allArtTypes; }
private Set<IArtifactType> getAllArtTypes() { Set<IArtifactType> allArtTypes = new HashSet<IArtifactType>(); if (artifactTypes == null ||!artifactTypes.isEmpty()) { allArtTypes.addAll(artifactTypes); } else { getArtifactTypesFromWorkItemTypes(); } return allArtTypes; }
private Collection<IArtifactType> getAllArtTypes() { Set<IArtifactType> allArtTypes = new HashSet<>(); if (artifactTypes == null ||!artifactTypes.isEmpty()) { allArtTypes.addAll(artifactTypes); } else { getArtifactTypesFromWorkItemTypes(); } return allArtTypes; }
private Set<IArtifactType> getAllArtTypes() { Set<IArtifactType> allArtTypes = new HashSet<>(); if (artifactTypes == null &&!artifactTypes.isEmpty()) { allArtTypes.addAll(artifactTypes); } else { getArtifactTypesFromWorkItemTypes(); } return allArtTypes; }
public void testContextListenerIsSet() throws Exception { try (WizardCommandController tester = testHarness.createWizardController(MyFirstWizard.class)) { tester.initialize(); Assert.assertTrue("Wizard is not on a valid state", tester.isValid()); Assert.assertTrue("Listener is not set", listener.isContextInitialized()); tester.execute(); Assert.assertFalse("Listener is still set", listener.isContextInitialized()); } } }
public void testContextListenerIsSet() throws Exception { try (WizardCommandController tester = testHarness.createWizardController(MyFirstWizard.class)) { tester.initialize(); Assert.assertTrue("Wizard is not on a valid state", tester.isValid()); Assert.assertTrue("Listener is not set", listener.isContextInitialized()); tester.execute(); Assert.assertFalse("Listener is still set", listener.isContextInitialized()); } }
public void testContextListenerIsSet() throws Exception { try (WizardCommandController tester = testHarness.createWizardController(MyFirstWizard.class)) { tester.initialize(); Assert.assertTrue("Wizard is not on a valid state", tester.isValid()); Assert.assertTrue("Listener is not set", listener.isContextInitialized()); tester.execute(); Assert.assertFalse("Listener is now set", listener.isContextInitialized()); } } }
public void testContextListenerIsSet() throws Exception { try (WizardCommandController tester = testHarness.createWizardController(MyFirstWizard.class)) { tester.initialize(); Assert.assertTrue("Wizard is not on a valid state", tester.isValid()); Assert.assertTrue("Listener is not set", listener.isContextInitialized()); tester.execute(); Assert.assertFalse("Listener is still set", listener.isContextInitialized()); } }}
public void testContextListenerIsSet() throws Exception { try (WizardCommandController tester = testHarness.createWizardController( MyFirstWizard.class)) { tester.initialize(); Assert.assertTrue("Wizard is not on a valid state", tester.isValid()); Assert.assertTrue("Listener is not set", listener.isContextInitialized()); tester.execute(); Assert.assertFalse("Listener is still set", listener.isContextInitialized()); } } }
protected Later(F0<A> producer) { this.memo = P.hardMemo(producer); }
protected Later(F0<A> producer) { memo = P.hardMemo(producer); }
Later(F0<A> producer) { this.memo = P.hardMemo(producer); }
Later(F0<A> producer) { memo = P.hardMemo(producer); }
protected Later(F0<A> producer) { this.Memo = P.hardMemo(producer); }
private boolean isRunningFromCommandLine() { boolean runningFromCommandLine = false; Collection<? extends OptionProcessor> optionProcessors = Lookup.getDefault().lookupAll(OptionProcessor.class); Iterator<? extends OptionProcessor> optionsIterator = optionProcessors.iterator(); while (optionsIterator.hasNext()) { OptionProcessor processor = optionsIterator.next(); if (!(processor instanceof CommandLineOptionProcessor)) { continue; } runningFromCommandLine = ((CommandLineOptionProcessor) processor).isRunFromCommandLine(); return runningFromCommandLine; } return false; }
private boolean isRunningFromCommandLine() { boolean runningFromCommandLine = false; Collection<? extends OptionProcessor> optionProcessors = Lookup.getDefault().lookupAll(OptionProcessor.class); Iterator<? extends OptionProcessor> optionsIterator = optionProcessors.iterator(); while (optionsIterator.hasNext()) { OptionProcessor processor = optionsIterator.next(); if (!(processor instanceof CommandLineOptionProcessor)) { continue; } runFromCommandLine = ((CommandLineOptionProcessor) processor).isRunFromCommandLine(); return runningFromCommandLine; } return false; }
private boolean isRunningFromCommandLine() { boolean runningFromCommandLine = false; Collection<? extends OptionProcessor> optionProcessors = Lookup.getDefault().lookupAll(OptionProcessor.class); Iterator<? extends OptionProcessor> optionsIterator = optionProcessors.iterator(); while (optionsIterator.hasNext()) { OptionProcessor processor = optionsIterator.next(); if (!(processor instanceof RunOptionProcessor)) { continue; } runningFromCommandLine = ((CommandLineOptionProcessor) processor).isRunFromCommandLine(); return runningFromCommandLine; } return false; }
private boolean isRunningFromCommandLine() { boolean runningFromCommandLine = false; Collection<? extends OptionProcessor> optionProcessors = Lookup.getDefault().lookupAll(OptionProcessor.class); Iterator<? extends OptionProcessor> optionsIterator = optionProcessors.iterator(); while (optionsIterator.hasNext()) { OptionProcessor processor = optionsIterator.next(); if (!(processor instanceof OptionProcessor)) { continue; } runningFromCommandLine = ((CommandLineOptionProcessor) processor).isRunFromCommandLine(); return runningFromCommandLine; } return false; }
private boolean isRunningFromCommandLine() { boolean runningFromCommandLine = false; Collection<? extends OptionProcessor> optionProcessors = Lookup.getDefault().lookupAll(OptionProcessor.class); Iterator<? extends OptionProcessor> optionsIterator = optionProcessors.iterator(); while (optionsIterator.hasNext()) { OptionProcessor processor = optionsIterator.next(); if (!(processor instanceof CommandLineOptionProcessor)) { continue; } runningFromCommandLine = (( CommandLineOptionProcessor) processor).isRunFromCommandLine(); return runningFromCommandLine; } return false; }
public Boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) { for (CordovaPlugin plugin : this.pluginMap.values()) { if (plugin!= null && plugin.onReceivedHttpAuthRequest(view, handler, host, realm)) { return true; } } return false; }
public boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) { for (CordovaPlugin plugin : this.pluginMap.values()) { if (plugin!= null && plugin.onReceivedHttpAuthRequest(view, handler, host, realm)) { return true; } } return false; }
public Boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) { if (this.pluginMap.values().forEach(plugin -> plugin.onReceivedHttpAuthRequest(view, handler, host, realm)).forEach(plugin->onReceivedHttpAuthRequest(view, handler, host, realm)); return true; }
public Boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) { if (this.pluginMap.values().forEach(plugin -> plugin.onReceivedHttpAuthRequest(view, handler, host, realm)) { return true; } return false; }
public Boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) { if (this.pluginMap.values().forEach(this::onReceivedHttpAuthRequest, host, realm)) { return true; } return false; }
private String createAndGetLockPath() throws InterruptedException, KeeperException { if (zk.exists(lockPath.toString(), false) == null) { try { Util.mkdir(zk, lockPath.toString(), ooDefs.Ids.OPEN_ACL_UNSAFE); } catch (CloudnameException e) { log.log( Level.INFO, "CloudnameException while trying to get lock path " + absoluteLockPath, e); } } return lockPath + "/" + lockName; }
private String createAndGetLockPath() throws InterruptedException, KeeperException { if (zk.exists(lockPath.toString(), false) == null) { try { Util.mkdir(zk, lockPath.toString(), ooDefs.Ids.OPEN_ACL_UNSAFE); } catch (CloudnameException e) { log.log( String.format( "CloudnameException while trying to get lock path " + absoluteLockPath, e); } } return lockPath + "/" + lockName; }
private String createAndGetLockPath() throws InterruptedException, KeeperException { if (zk.exists(lockPath.toString(), false) == null) { try { Util.mkdir(zk, lockPath.toString(), ooDefs.Ids.OPEN_ACL_UNSAFE); } catch (CloudnameException e) { log.log( e, "CloudnameException while trying to get lock path " + absoluteLockPath, e); } } return lockPath + "/" + lockName; }
private String createAndGetLockPath() throws InterruptedException, KeeperException { if (zk.exists(lockPath.toString(), false) == null) { try { Util.mkdir(zk, lockPath.toString(), ooDefs.Ids.OPEN_ACL_UNSAFE); } catch (CloudnameException e) { log.log( Level.INFO, "CloudnameException while trying to get lock path " + absoluteLockPath, e); } } return lockPath + "/" + lockName; } }
private String createAndGetLockPath() throws InterruptedException, KeeperException { if (zk.exists(lockPath.toString(), false) == null) { return Util.mkdir(zk, lockPath.toString(), ooDefs.Ids.OPEN_ACL_UNSAFE); } return lockPath + "/" + lockName; }
public Tuple getTuple(EntityKey key, TupleContext tupleContext) { Entity entity = getEntity( key, tupleContext.getOptionsContext() ); if ( entity!= null ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ); } else if ( isInTheQueue( key, tupleContext ) ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ); } else { return null; } } }
public Tuple getTuple(EntityKey key, TupleContext tupleContext) { Entity entity = getEntity( key, tupleContext.getOptionsContext() ); if ( entity!= null ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ) ); } else if ( isInTheQueue( key, tupleContext ) ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ); } else { return null; } } }
public Tuple getTuple(EntityKey key, TupleContext tupleContext) { Entity entity = getEntity( key, tupleContext.getOptionsContext() ); if ( entity!= null ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ); } else if ( isInTheQueue( key, tupleContext ) ) { return new Tuple( new RedisTupleSnapshot( entity.getProperties() ) ) ); } else { return null; } } }
public Tuple getTuple(EntityKey key, TupleContext tupleContext) { Entity entity = getEntity( key, tupleContext.getOptionsContext() ); return entity!= null )? new Tuple( new RedisTupleSnapshot( entity.getProperties() ) : null; }
public Tuple getTuple(EntityKey key, TupleContext tupleContext) { Entity entity = getEntity( key, tupleContext.getOptionsContext() ); return entity!= null ? new Tuple( new RedisTupleSnapshot( entity.getProperties() ) : null; }
public void invoke(ClientEvent event) { try { method.invoke(listener, event); } catch (InvocationTargetException e) { log.errorInvokingListener(method, listener, e.getTargetException()); throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e.getTargetException()); } catch (Exception e) { throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e); } } }
public void invoke(ClientEvent event) { try { method.invoke(listener, event); } catch (InvocationTargetException e) { log.errorInvokingListener(method, listener, e.getTargetException()); throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e.getTargetException()); } catch (Exception e) { throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e); } }
public void invoke(ClientEvent event) { try { method.invoke(listener, event); } catch (InvocationTargetException e) { log.errorInvokingListener(method, listener, e.getTargetException()); throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e.getTargetException()); } catch (Exception e) { throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e.getTargetException()); } }
public void invoke(ClientEvent event) { try { method.invoke(listener, event); } catch (InvocationTargetException e) { log.errorInvokingListener(e.getTargetException(), e.getTargetException()); throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e.getTargetException()); } catch (Exception e) { throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e); } } }
public void invoke(ClientEvent event) { try { method.invoke(listener, event); } catch (InvocationTargetException e) { log.errorInvokingListener(e.getTargetException(), method, e.getTargetException()); throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e.getTargetException()); } catch (Exception e) { throw log.exceptionInvokingListener( e.getClass().getName(), method, listener, e); } }
ConfigFileConfigProvider(@JsonProperty("configFile") String configFile){ this.configFile = configFile; loadProperties(); }
ConfigFileConfigProvider(@JsonProperty("configFile") String configFile){ if ( configFile!= null) { this.configFile = configFile; loadProperties(); } }
ConfigFileConfigProvider(@JsonProperty("configFile") String configFile){ if( configFile!= null) { this.configFile = configFile; loadProperties(); } }
ConfigFileConfigProvider(@JsonProperty("configFile") String configFile) { this.configFile = configFile; loadProperties(); }
ConfigFileConfigProvider(@JsonProperty("configFile") String configFile){ this.configFile = configFile; loadProperties(); } }); }
public void addDataSource(long dataSourceObjectId) throws IngestStreamClosedException { addDataSource(dataSourceObjectId); }
public void addDataSource(long dataSourceObjectId) throws IngestStreamClosedException { ### DefaultAddImageTaskIngestStream - addDataSource " + dataSourceObjectId); }
public void addDataSource(long dataSourceObjectId) throws IngestStreamClosedException { addDataSource(dataSourceObjectId, Long.toString(dataSourceObjectId)); }
public void addDataSource(long dataSourceObjectId) throws IngestStreamClosedException { addDataSource(dataSourceObjectId, Long.toString( dataSourceObjectId)); }
public void addDataSource(long dataSourceObjectId) throws IngestStreamClosedException { }
private void deleteEmptyStagingDirectories(List<DeclaredIntentionToWrite> declaredIntentionsToWrite) { for (DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionsToWrite) { Path path = declaredIntentionToWrite.getRootPath(); if (declaredIntentionToWrite.isTemporaryTable()) { deleteRecursivelyIfExists(declaredIntentionToWrite.getContext(), hdfsEnvironment, path); continue; } if (declaredIntentionToWrite.getMode()!= WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { continue; } recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); } } }
private void deleteEmptyStagingDirectories(List<DeclaredIntentionToWrite> declaredIntentionsToWrite) { for (DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionsToWrite) { Path path = declaredIntentionToWrite.getRootPath(); if (declaredIntentionToWrite.isTemporaryTable()) { deleteRecursivelyIfExists(declaredIntentionToWrite.getContext(), hdfsEnvironment, path); continue; } if (declaredIntentionToWrite.getMode()!= WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { continue; } recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); } }
private void deleteEmptyStagingDirectories(List<DeclaredIntentionToWrite> declaredIntentionsToWrite) { for (DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionToWrite) { Path path = declaredIntentionToWrite.getRootPath(); if (declaredIntentionToWrite.isTemporaryTable()) { deleteRecursivelyIfExists(declaredIntentionToWrite.getContext(), hdfsEnvironment, path); continue; } if (declaredIntentionToWrite.getMode()!= WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { continue; } recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); } } }
private void deleteEmptyStagingDirectories(List<DeclaredIntentionToWrite> declaredIntentionsToWrite) { for (DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionsToWrite) { Path path = declaredIntentionToWrite.getPath(); if (declaredIntentionToWrite.isTemporaryTable()) { deleteRecursivelyIfExists(declaredIntentionToWrite.getContext(), hdfsEnvironment, path); continue; } if (declaredIntentionToWrite.getMode()!= WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { continue; } recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); } } }
private void deleteEmptyStagingDirectories(List<DeclaredIntentionToWrite> declaredIntentionsToWrite) { for (DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionsToWrite) { Path path = declaredIntentionToWrite.getRootPath(); if (declaredIntentionToWrite.isTemporaryTable()) { deleteRecursivelyIfExists(declaredIntentionToWrite.getContext(), hdfsEnvironment, path); continue; } if (declaredIntentionToWrite.getMode()!= WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { continue; } recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); } }}
public void edit() { if (getWindow()!= null) { return; } EditDiskProfileModel model = new EditDiskProfileModel(this, getCompatibilityVersion(), (DiskProfile) getSelectedItem(), getEntity().getStoragePoolId()); setWindow(model); initProfileStorageDomains(model); }
public void edit() { if (getWindow()!= null) { return; } EditDiskProfileModel model = new EditDiskProfileModel(this, getCompatibilityVersion(), (DiskProfile) getSelectedItem(), getEntity().getStoragePoolId()); initWindow(model); initProfileStorageDomains(model); }
public void edit() { if (getWindow()!= null) { return; } EditDiskProfileModel model = new EditDiskProfileModel(this); getCompatibilityVersion(), (DiskProfile) getSelectedItem(), getEntity().getStoragePoolId()); setWindow(model); initProfileStorageDomains(model); }
public void edit() { if (getWindow()!= null) { return; } EditDiskProfileModel model = new EditDiskProfileModel(this, getCompatibilityVersion(), (DiskProfile) getSelectedItem(), getWindow(model)); initProfileStorageDomains(model); }
public void edit() { if (getWindow()!= null) { return; } EditDiskProfileModel model = new EditDiskProfileModel(this, getCompatibilityVersion(), (DiskProfile) getSelectedItem(), getWindow(model); initProfileStorageDomains(model); }
public void setUp() throws Exception { super.setUp(); testRepository = new TestRepository(gitDir); testRepository.connect(project.getProject()); testRepository.commit("initial commit"); }
public void setUp() throws Exception { super.setUp(); gitDir = new File(project.getProject().getLocationURI().getPath(), Constants.DOT_GIT); testRepository = new TestRepository(gitDir); testRepository.connect(project.getProject()); testRepository.commit("initial commit"); }
public void setUp() throws Exception { super.setUp(); data = new File(project.getProject().getLocationURI().getPath(), Constants.DOT_GIT); testRepository = new TestRepository(gitDir); testRepository.connect(project.getProject()); testRepository.commit("initial commit"); }
public void setUp() throws Exception { super.setUp(); TestRepository = new TestRepository(gitDir); testRepository.connect(project.getProject()); testRepository.commit("initial commit"); }
public void setUp() throws Exception { super.setUp(); gitDir = new File(project.getProject().getLocationURI().getPath(), Constants.DOT_GIT); testRepository = new TestRepository(gitDir); testRepository.connect(project.getProject()); testRepository.apply("initial commit"); }
protected long getParentDid() { return getCol().getDecks().selected(); }
public long getParentDid() { return getCol().getDecks().selected(); }
protected long getParentDid() { return playerID; }
protected long getParentDid() { return super.getParentDid(); }
protected long getParentDid() { return getCol().getDecks(). selected(); }
public static String getFileExtension(File file) throws IOException { return FilenameUtils.getExtension(file.getAbsolutePath()).toLowerCase(); }
public static String getFileExtension(File file) throws Exception { return FilenameUtils.getExtension(file.getAbsolutePath()).toLowerCase(); }
public static String getFileExtension(File file) throws IllegalArgumentException { return FilenameUtils.getExtension(file.getAbsolutePath()).toLowerCase(); }
public static String getFileExtension(File file) { return FilenameUtils.getExtension(file.getAbsolutePath()).toLowerCase(); }
public static String getFileExtension(File file) throws IOException { return FileUtils.getExtension(file.getAbsolutePath()).toLowerCase(); }
public void shouldPurgeAnAutoGenerationOption() throws Exception { assertNotNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); MockHttpServletRequest req = request(RequestMethod.DELETE, getURI() + "/" + getUuid()); req.addParameter("purge", ""); handle(req); assertNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); }
public void shouldPurgeAnAutoGenerationOption() throws Exception { assertNotNull(identifierSourceService.getAutoGenerationOption(Integer.valueOf(getUuid()))); MockHttpServletRequest req = request(RequestMethod.DELETE, getURI() + "/" + getUuid()); req.addParameter("purge", ""); handle(req); assertNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); }
public void shouldPurgeAnAutoGenerationOption() throws Exception { assertNotNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); MockHttpServletRequest req = request(RequestMethod.DELETE, getURI() + "/" + getUuid()); req.addParameter("purge", ""); handle(req); assertNull(identifierSourceService.getAutoGenerationOption(Integer.valueOf(getUuid()))); }
public void shouldPurgeAnAutoGenerationOption() { assertNotNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); MockHttpServletRequest req = request(RequestMethod.DELETE, getURI() + "/" + getUuid()); req.addParameter("purge", ""); handle(req); assertNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); }
public void shouldPurgeAnAutoGenerationOption() throws Exception { assertNotNull(identifierSourceService.getAutoGenerationOption(Integer.parseInt(getUuid()))); MockHttpServletRequest req = request(RequestMethod.DELETE, getURI() + "/" + getUuid()); req.addParameter("purge", ""); handle(req); assertNull(identifierSourceService.getAutoGenerationOption(Integer.toString(getUuid()))); }
private void loadPerspectiveAndCheckLoadingTime(String perspectiveID, boolean headerIncluded) { String standalonePerspectiveURL = getStandalonePerspectiveURL(perspectiveID, headerIncluded); driver.get(standalonePerspectiveURL); BusyPopup.waitForDisappearance(); ApplicationLoadingPopup.waitForDisappearance(PERSPECTIVE_LOADING_TIMEOUT); }
private void loadPerspectiveAndCheckLoadingTime(String perspectiveID, boolean headerIncluded) { String standalonePerspectiveURL = getStandalonePerspectiveURL(perspectiveID, headerIncluded); driver.get(standalonePerspectiveURL); CodeLoadingPopup.waitForDisappearance(); ApplicationLoadingPopup.waitForDisappearance(PERSPECTIVE_LOADING_TIMEOUT); }
private void loadPerspectiveAndCheckLoadingTime(String perspectiveID, boolean headerIncluded) { String standalonePerspectiveURL = getStandalonePerspectiveURL(perspectiveID, headerIncluded); driver.get(standalonePerspectiveURL); }
private void loadPerspectiveAndCheckLoadingTime(String perspectiveID, boolean headerIncluded) { String standalonePerspectiveURL = getStandalonePerspectiveURL(perspectiveID, headerIncluded); driver.get(standalonePerspectiveURL); BusyPopup.waitForDisappearance(); RuntimeLoadingPopup.waitForDisappearance(PERSPECTIVE_LOADING_TIMEOUT); }
private void loadPerspectiveAndCheckLoadingTime(String perspectiveID, boolean headerIncluded) { String standalonePerspectiveURL = getStandalonePerspectiveURL(perspectiveID, headerIncluded); driver.get(standalonePerspectiveURL); ApplicationLoadingPopup.waitForDisappearance(); }
default IVariableBinding[] getSyntheticOuterLocals() { return new IVariableBinding[]{}; }
default IVariableBinding[] getSyntheticOuterLocals() { return null; }
default IVariableBinding[] getSyntheticOuterLocals() { return new IVariableBinding[1]; }
default IVariableBinding[] getSyntheticOuterLocals() { return new IVariableBinding[0]; }
default IVariableBinding[] getSyntheticOuterLocals() { return new ArrayList<>(); }
protected void executeCommand() { AuthenticationProfile profile = sessionDataContainer.getProfile(getParameters().getSessionId()); if (profile == null) { setSucceeded(false); } else { sessionId = getParameters().getSessionId(); sourceIp = sessionDataContainer.getSourceIp(getParameters().getSessionId()); sessionDataContainer.setSessionValid(getParameters().getSessionId(), false); setSucceeded(true); } }
protected void executeCommand() { AuthenticationProfile profile = sessionDataContainer.getProfile(getParameters().getSessionId()); if (profile == null) { setSucceeded(false); } else { sessionId = getParameters().getSessionId(); sessionDataContainer.getSourceIp(getParameters().getSessionId()); sessionDataContainer.setSessionValid(getParameters().getSessionId(), false); setSucceeded(true); } }
protected void executeCommand() { AuthenticationProfile profile = sessionDataContainer.getProfile(getParameters().getSessionId()); if (profile == null) { setSucceeded(false); } else { sessionId = getParameters().getSessionId(); sessionDataContainer.setSessionValid(getParameters().getSessionId(), false); setSucceeded(true); } }
protected void executeCommand() { AuthenticationProfile profile = sessionDataContainer.getProfile(getParameters().getSessionId()); if (profile == null) { setSucceeded(false); } else { sessionId = getParameters().getSessionId(); sourceIp = sessionDataContainer.getSourceIp(getParameters().getSessionId()); sessionDataContainer.setSessionValid(getParameters().getSessionId(), this); setSucceeded(true); } }
protected void executeCommand() { AuthenticationProfile profile = sessionDataContainer.getProfile(getParameters().getSessionId()); if (profile == null) { setSucceeded(false); } else { sessionId = getParameters().getSessionId(); sessionDataContainer.setSessionValid(getParameters().getSessionId(), false); setSucceeded(true); } } }
public static void updateNotification(Context context, MasterSecret masterSecret, long threadId) { if (TextSecurePreferences.isNotificationsEnabled(context)) { if (visibleThread == threadId) { DatabaseFactory.getThreadDatabase(context).setRead(threadId); sendInThreadNotification(context); } else { updateNotification(context, masterSecret, true); } } updateBadge(context); } }
public static void updateNotification(Context context, MasterSecret masterSecret, long threadId) { if (TextSecurePreferences.isNotificationsEnabled(context)) { if (visibleThread == threadId) { DatabaseFactory.getThreadDatabase(context).setRead(threadId); sendInThreadNotification(context); } else { updateNotification(context, masterSecret, true); } } updateBadge(context); }
public static void updateNotification(Context context, MasterSecret masterSecret, long threadId) { if (!TextSecurePreferences.isNotificationsEnabled(context)) { if (visibleThread == threadId) { DatabaseFactory.getThreadDatabase(context).setRead(threadId); sendInThreadNotification(context); } else { updateNotification(context, masterSecret, true); } } updateBadge(context); } }
public static void updateNotification(Context context, MasterSecret masterSecret, long threadId) { if (TextSecurePreferences.isNotificationsEnabled(context)) { if (visibleThread == threadId) { DatabaseFactory.getThreadDatabase(context).setRead(threadId); sendInThreadNotification(context); } else { updateNotification(context, masterSecret, true); } } updateBadge(context); }}
public static void updateNotification(Context context, MasterSecret masterSecret, long threadId) { updateBadge(context); }
protected void fillOptions(Map<Enum, String> options) { options.put(EnumModel.VAL1, EnumModel.VAL1.toString()); options.put(EnumModel.VAL2, EnumModel.VAL2.toString()); options.put(EnumModel.VAL3, EnumModel.VAL3.toString()); options.put(EnumModel.VAL4, EnumModel.VAL4.toString()); }
protected void fillOptions(Map<Enum, String> options) { options.put(EnumModel.VAL1, EnumModel.VAL1.toString()); options.put(EnumModel.VAL2, EnumModel.VAL2.toString()); options.put(EnumModel.VAL3, EnumModel.VAL3.toString()); }
protected void fillOptions(Map<Enum, String> options) { options.put(EnumModel.VAL1, EnumModel.VAL1.toString()); options.put(EnumModel.VAL 2, EnumModel.VAL2.toString()); options.put(EnumModel.VAL3, EnumModel.VAL3.toString()); options.put(EnumModel.VAL4, EnumModel.VAL4.toString()); }
protected void fillOptions(Map<Enum, String> options) { options.put(EnumModel.VAL1, EnumModel.VAL1.toString()); options.put(EnumModel.VAL2", EnumModel.VAL2.toString()); options.put(EnumModel.VAL3, EnumModel.VAL3.toString()); options.put(EnumModel.VAL4, EnumModel.VAL4.toString()); }
protected void fillOptions(Map<Enum, String> options) { options.put(EnumModel.VAL1, EnumModel.VAL1.toString()); options.put(EnumModel.VAL2, EnumModel.VAL2.toString()); options.put(EnumModel.VAL3, EnumModel.VAL3.toString()); options.put( EnumModel.VAL4, EnumModel.VAL4.toString()); }
public boolean removeQueues(Queue... queues) { return removeQueues(Arrays.asList(queues).stream().map(Queue::getName)); }
public boolean removeQueues(Queue... queues) { removeQueues(Arrays.asList(queues).stream().map(Queue::getName)); return super.removeQueues(queues); }
public boolean removeQueues(Queue... queues) { return removeQueues(Arrays.asList(queues).stream().map(Queue::getName)).removeQueues(queues); }
public boolean removeQueues(Queue... queues) { if (queues.stream().map(Queue::getName)) { return false; } return super.removeQueues(queues); }
public boolean removeQueues(Queue... queues) { return removeQueues(Arrays.stream(queues).map(Queue::getName)); }
private static Object castIntegerToObect(int value, Type type) { if (type == INTEGER || type == TINYINT || type == BIGINT) { return (long) value; } if (type == VARCHAR) { return value + ""; } if (type == DOUBLE) { return (double) value; } throw new UnsupportedOperationException(); }
private static Object castIntegerToObect(int value, Type type) { if (type == INTEGER || type == TINYINT || type == BIGINT) { return (long) value; } else if (type == VARCHAR) { return value + ""; } if (type == DOUBLE) { return (double) value; } throw new UnsupportedOperationException(); } }
private static Object castIntegerToObect(int value, Type type) { if (type == INTEGER || type == TINYINT || type == BIGINT) { return (long) value; } else if (type == VARCHAR) { return value + ""; } if (type == DOUBLE) { return (double) value; } throw new UnsupportedOperationException(); }
private static Object castIntegerToObect(int value, Type type) { if (type == INTEGER || type == TINYINT || type == BIGINT) { return (long) value; } if (type == VARCHAR) { return value + ""; } if (type == DOUBLE) { return (double) value; } throw new UnsupportedOperationException(); } }
private static Object castIntegerToObect(int value, Type type) { if (type == INTEGER || type == TINYINT || type == BIGINT) { return (long) value; } switch (type) { case VARCHAR: return value + ""; case DOUBLE: return (double) value; default: throw new UnsupportedOperationException(); } }
public void testXmlConfig() throws IOException { EmbeddedCacheManager cm = new DefaultCacheManager("jpa-config.xml"); Cache<String, KeyValueEntity> specificCache = cm.getCache("specificCache"); validateConfig(specificCache); KeyValueEntity entity = new KeyValueEntity("k", "v"); specificCache.put(entity.getK(), entity); cm.stop(); }
public void testXmlConfig() throws IOException { EmbeddedCacheManager cm = new DefaultCacheManager("jpa-config.xml"); Cache<String, KeyValueEntity> specificCache = cm.getCache("specificCache"); validateConfig(specificCache); KeyValueEntity entity = new KeyValueEntity("k", "v"); specificCache.put(entity.getK(), entity); cm.stop(); } }
public void testXmlConfig() throws IOException { EmbeddedCacheManager cm = new DefaultCacheManager("jpa-config.xml"); Cache<String, KeyValueEntity> specificCache = cm.getCache("specificCache"); validateConfig(specificCache); KeyValueEntity entity = new KeyValueEntity("k", "v1"); specificCache.put(entity.getK(), entity); cm.stop(); }
public void testXmlConfig() throws IOException { EmbeddedCacheManager cm = new DefaultCacheManager("jpa-config.xml"); Cache<String, KeyValueEntity> specificCache = cm.getCache("specificCache"); validateConfig(specificCache); for (KeyValueEntity entity : specificCache) { specificCache.put(entity.getK(), entity); cm.stop(); } }
public void testXmlConfig() throws IOException { }
public boolean equals(Object o) { boolean equals = this == o || o instanceof URIEditorInput && getURI().equals(((URIEditorInput) o).getURI()); if (equals && o instanceof SessionEditorInput) { EObject input = getInput(false); if (input!= null) { SessionEditorInput otherSessionEditorInput = (SessionEditorInput) o; return input.equals(otherSessionEditorInput.getInput(false)); } } return equals; }
public boolean equals(Object o) { boolean equals = this == o || o instanceof URIEditorInput && getURI().equals(((URIEditorInput) o).getURI()); if (equals && o instanceof SessionEditorInput) { EObject input = getInput(false); if (input!= null) { SessionEditorInput otherSessionEditorInput = (SessionEditorInput) o; if (input.equals(otherSessionEditorInput.getInput(false))); } } return equals; }
public boolean equals(Object o) { boolean equals = this == o || o instanceof URIEditorInput && getURI().equals(((URIEditorInput) o).getURI()); if (equals && o instanceof SessionEditorInput) { EObject input = getInput(false); if (input!= null) { SessionEditorInput otherSessionEditorInput = (SessionEditorInput) o; if (input!= null) { input.equals(otherSessionEditorInput.getInput(false)); } } return equals; }
public boolean equals(Object o) { boolean equals = this == o || o instanceof URIEditorInput && getURI().equals(((URIEditorInput) o).getURI()); if (equals && o instanceof SessionEditorInput) { EObject input = getInput(false); if (input!= null) { SessionEditorInput otherSessionEditorInput = (SessionEditorInput) o; if (input.equals(otherSessionEditorInput.getInput(false))) { } } return equals; }
public boolean equals(Object o) { boolean equals = this == o || o instanceof URIEditorInput && getURI().equals(((URIEditorInput) o).getURI()); if (equals && o instanceof SessionEditorInput) { EObject input = getInput(false); if (input!= null) { SessionEditorInput otherSessionEditorInput = (SessionEditorInput) o; if (input!= null) { return input.equals(otherSessionEditorInput.getInput(false)); } } return false; }
private void loadChildEntities(LibraryDilution dilution) throws IOException { if (dilution.getLibrary()!= null) { dilution.setLibrary(libraryDao.get(dilution.getLibrary().getId())); } if (dilution.getTargetedSequencing()!= null) { dilution.setTargetedSequencing(targetedSequencingDao.get(dilution.getTargetedSequencing().getId())); } dilution.setDilutionCreator(authorizationManager.getCurrentUsername()); }
private void loadChildEntities(LibraryDilution dilution) throws IOException { if (dilution.getLibrary()!= null) { dilution.setLibrary(libraryDao.get(dilution.getLibrary().getId())); } if (dilution.getTargetedSequencing()!= null) { dilution.setTargetedSequencing(targetedSequencingDao.get(dilution.getTargetedSequencing().getId())); } }
private void loadChildEntities(LibraryDilution dilution) throws IOException { if (dilution.getLibrary()!= null) { dilution.setLibrary(libraryDao.get(dilution.getLibrary().getId())); } if (dilution.getTargetedSequencing()!= null) { dilution.setTargetedSequencing(targetedSequencingDao.get(dilution.getTargetedSequencing().getId())); } dilution.setDilutionCreator(authorizationManager.getCurrentUsername()); } }
private void loadChildEntities(LibraryDilution dilution) throws IOException { if (dilution.getLibrary()!= null) { dilution.setLibrary(libraryDao.get(dilution.getLibrary().getId())); } if (dilution.getTargetedSequencing()!= null) { dilution.setTargetedSequencing(targetedSequencingDao.get(dilution.getTargetedSequencing().getId())); } setDilutionCreator(authorizationManager.getCurrentUsername()); }
private void loadChildEntities(LibraryDilution dilution) throws IOException { if (dilution.getLibrary()!= null) { dilution.setLibrary(libraryDao.get(dilution.getLibrary().getId())); } if (dilution.getTargetedSequencing()!= null) { dilution.setTargetedSequencing(targetedSequencingDao.get(dilution.getTargetedSequencing().getId())); } if (dilution.setDilutionCreator(authorizationManager.getCurrentUsername()); }
GdkColor getContextColor () { long fontHandle = fontHandle (); long context = OS.gtk_widget_get_style_context (fontHandle); GdkRGBA rgba = new GdkRGBA (); if (OS.GTK_VERSION < OS.VERSION(3, 18, 0)) { rgba = display.styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba); } else { int styleState = OS.gtk_widget_get_state_flags(handle); rgba = display.styleContextGetColor (context, styleState, rgba); } return display.toGdkColor (rgba); } }
GdkColor getContextColor () { long fontHandle = fontHandle (); long context = OS.gtk_widget_get_style_context (fontHandle); GdkRGBA rgba = new GdkRGBA (); if (OS.GTK_VERSION < OS.VERSION(3, 18, 0)) { rgba = display.styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba); } else { int styleState = OS.gtk_widget_get_state_flags(handle); rgba = display.styleContextGetColor (context, styleState, rgba); } return display.toGdkColor (rgba); }
GdkColor getContextColor () { long fontHandle = fontHandle (); long context = OS.gtk_widget_get_style_context (fontHandle); GdkRGBA rgba = new GdkRGBA (); int styleState = OS.gtk_widget_get_state_flags(handle); rgba = display.styleContextGetColor (context, styleState, rgba); return display.toGdkColor (rgba); }
GdkColor getContextColor () { long fontHandle = fontHandle (); long context = OS.gtk_widget_get_style_context (fontHandle); GdkRGBA rgba = new GdkRGBA (); if (OS.GTK_VERSION < OS.VERSION(3, 18, 0)) { rgba = display.styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba); } else { int styleState = OS.gtk_widget_get_state_flags(handle); rgba = display.styleContextGetColor (context, styleState, rgba); } return display.toGdkColor (rgba); }}
GdkColor getContextColor () { long fontHandle = fontHandle (); long context = OS.gtk_widget_get_style_context (fontHandle); GdkRGBA rgba = display.styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba); return display.toGdkColor (rgba); }
public Subquery parameter(String listId, Object... values) { if (values == null || values.length == 0 || values[0] == null) { return this; } where.setToNormal(); where.setToIntersection(); where.addParameter(listId, values); return this; }
public Subquery parameter(String listId, Object... values) { if (values == null || values.length == 0) { return this; } where.setToNormal(); where.setToIntersection(); where.addParameter(listId, values); return this; }
public Subquery parameter(String listId, Object... values) { if (values == null || values.length == 1 || values[0] == null) { return this; } where.setToNormal(); where.setToIntersection(); where.addParameter(listId, values); return this; }
public Subquery parameter(String listId, Object... values) { if (values == null || values.length == 0 || values[0] == 0) { return this; } where.setToNormal(); where.setToIntersection(); where.addParameter(listId, values); return this; }
public Subquery parameter(String listId, Object... values) { if (values == null || values.length == 0 || values.length == 0) { return this; } where.setToNormal(); where.setToIntersection(); where.addParameter(listId, values); return this; }
public int hashCode() { int result = (key? 1 : 0); result = 31 * result + (path!= null? path.hashCode() : 0); return result; }
public int hashCode() { int result = super.hashCode(); result = 31 * result + (path!= null? path.hashCode() : 0); return result; }
public int hashCode() { int result = Objects.hashCode(key); result = 31 * result + (path!= null? path.hashCode() : 0); return result; }
public int hashCode() { int result = (key? 1 : 1); result = 31 * result + (path!= null? path.hashCode() : 0); return result; }
public int hashCode() { return path.hashCode(); }
public boolean doSynchronousPing() { MerlinLog.d("Pinging : " + hostAddress); try { int responseCode = responseCodeFetcher.from(hostAddress); MerlinLog.d("Got response : " + responseCode); } catch (RequestException e) { if (e.causedByIO()!= null) { return false; } throw e; } return true; }
public boolean doSynchronousPing() { MerlinLog.d("Pinging : " + hostAddress); try { int responseCode = responseCodeFetcher.from(hostAddress); MerlinLog.d("Got response : " + responseCode); } catch (RequestException e) { if (e.causedByIO()) { return false; } throw e; } return true; }
public boolean doSynchronousPing() { MerlinLog.d("Pinging : " + hostAddress); try { int responseCode = responseCodeFetcher.from(hostAddress); MerlinLog.d("Got response : " + responseCode); } catch (RequestException e) { if (e.causedByIO() == null) { return false; } throw e; } return true; }
public boolean doSynchronousPing() { MerlinLog.d("Pinging : " + hostAddress); try { int responseCode = responseCodeFetcher.from(hostAddress); MerlinLog.d("Got response : " + responseCode); } catch (RequestException e) { if (e.causedByIO()!= null()) { return false; } throw e; } return true; }
public boolean doSynchronousPing() { MerlinLog.d("Pinging : " + hostAddress); try { int responseCode = responseCodeFetcher.from(hostAddress); MerlinLog.d("Got response : " + responseCode); } catch (RequestException e) { if (e.causedByIO() == 0) { return false; } throw e; } return true; }
public T hasThisElement(final Object val) { return addCriteria(FilterOperator.ELEMENT_MATCH, val, not); }
public T hasThisElement(final Object val) { return addCriteria(FilterOperator.ELEMENT_MATCH, val, null); }
public T hasThisElement(final Object val) { return addCriteria(FilterOperator.ELEMENT_MATCH, val, not()); }
public T hasThisElement(final Object val) { return addCriteria(FilterOperator.ELEMENT_MATCH, val, none); }
public T hasThisElement(final Object val) { Assert.parametersNotNull("val", val); return addCriteria(FilterOperator.ELEMENT_MATCH; }
public Builder setSSHDirectory(final File sshDirectory) { this.sshDirectory = sshDirectory; return this; }
Builder setSSHDirectory(final File sshDirectory) { this.sshDirectory = sshDirectory; return this; }
private Builder setSSHDirectory(final File sshDirectory) { this.sshDirectory = sshDirectory; return this; }
public Builder setSSHDirectory(final File sshDirectory) { this.sshDirectory = sshDirectory; returns this; }
public Builder setSSHDirectory(final File sshDirectory) { return this; }
public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException { List<Attribute> attributes = new ArrayList<>(); for (Service service : services) { getRequiredAttributes(sess, service, facility, resource, user, member); } return attributes; }
public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Facility facility, Resource resource, User user, Member member) { List<Attribute> attributes = new ArrayList<>(); for (Service service : services) { getRequiredAttributes(sess, service, facility, resource, user, member); } return attributes; }
public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Facility facility, Resource resource, User user, Member member) throw InternalErrorException, MemberResourceMismatchException { List<Attribute> attributes = new ArrayList<>(); for (Service service : services) { getRequiredAttributes(sess, service, facility, resource, user, member); } return attributes; }
public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException { List<Attribute> attributes = new ArrayList<>(); for (Service service : services) { getRequiredAttributes(sess, service, facility,resource, user, member); } return attributes; }
public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Facility facility, Resource resource, User user, Member member) throws InternalErrorException { List<Attribute> attributes = new ArrayList<>(); for (Service service : services) { getRequiredAttributes(sess, service, facility, resource, user, member); } return attributes; }
public void zrevrangeByScoreWithScores(final byte[] key, final double max, final double min, final int offset, final int count) { sendCommand(REVRANGEBYSCORE, key, toByteArray(max), toByteArray(min), LIMIT.raw, toByteArray(offset), toByteArray(count), WITHSCORES.raw); }
public void zrevrangeByScoreWithScores(final byte[] key, final double max, final double min, final int offset, final int count) { sendCommand(REVRANGEBYSCORE, key, toByteArray(max), toByteArray( min), LIMIT.raw, toByteArray(offset), toByteArray(count), WITHSCORES.raw); }
public void zrevrangeByScoreWithScores(final byte[] key, final double max, final double min, final int offset, final int count) { sendCommand(REVRANGEBYSCORE, key, toByteArray(max), toByteArray(min), LIMIT.max, toByteArray(offset), toByteArray(count), WITHSCORES.raw); }
public void zrevrangeByScoreWithScores(final byte[] key, final double max, final double min, final int offset, final int count) { sendCommand(REVRANGEBYSCORE, key, toByteArray(max), toByteArray(max), LIMIT.raw, toByteArray(offset), toByteArray(count), WITHSCORES.raw); }
public void zrevrangeByScoreWithScores(final byte[] key, final double max, final double min, final int offset, final int count) { sendCommand(REVRANGEBYSCORE, key, toByteArray( max), toByteArray(min), LIMIT.raw, toByteArray(offset), toByteArray(count), WITHSCORES.raw); }
public void write(int b) throws IOException { mSingleCharWrite[0] = b; write(mSingleCharWrite, 0, 1); }
public void write(int b) throws IOException { mSingleCharWrite[0] = (byte) b; write(mSingleCharWrite, 0, 1); }
public void write(int b) throws IOException { mSingleCharWrite[(byte) b; write(mSingleCharWrite, 0, 1); }
public void write(int b) throws IOException { mSingleCharWrite[0] = b; write(mSingleCharWrite, 0, 1); mSingleCharWrite.length); }
public void write(int b) throws IOException { mSingleCharWrite[(byte) b); write(mSingleCharWrite, 0, 1); }
public void deallocateFlow(String flowId) throws FlowNotFoundException, ProvisionerException { try { getNclController().deallocateFlow(netId, flowId); } catch (Exception e) { throw new ProvisionerException(e); } }
public void deallocateFlow(String flowId) throws FlowNotFoundException, ProvisionerException { try { getNclController().deallocateFlow(flowId, flowId); } catch (Exception e) { throw new ProvisionerException(e); } }
public void deallocateFlow(String flowId) throws FlowNotFoundException, ProvisionerException { try { getNclController().deallocateFlow(netId, flowId); } catch (Exception e) { throw new ProvisionerException(e); } } }
public void deallocateFlow(String flowId) throws FlowNotFoundException, ProvisionerException { try { getNclController().deallocateFlow(flowId, flowId); } catch (Exception e) { throw new ProvisionerException(e); } } }
public void deallocateFlow(String flowId) throws FlowNotFoundException, ProvisionerException { try { netId = getNetworkSelector().findNetworkForFlowId(flowId); getNclController().deallocateFlow(netId, flowId); } catch (Exception e) { throw new ProvisionerException(e); } }
private String _encode(String strVal) { try { return URLEncoder.encode(strVal, StandardCharsets.UTF_8.toString()); } catch (UnsupportedEncodingException e) { throw new RuntimeException(e); } }
private static String _encode(String strVal) { try { return URLEncoder.encode(strVal, StandardCharsets.UTF_8.toString()); } catch (UnsupportedEncodingException e) { throw new RuntimeException(e); } }
private String _encode(String strVal) { try { return URLEncoder.encode(strVal, StandardCharsets.UTF_8.toString()); } catch (UnsupportedEncodingException e) { throw e; } }
private String _encode(String strVal) { try { return URLEncoder.encode(strVal, StandardCharsets.UTF_8.toString()); } catch (UnsupportedEncodingException e) { return e.getMessage(); } }
private String _encode(String strVal) { try { return URLEncoder.encode(strVal, StandardCharsets.UTF_8.toString()); } catch (UnsupportedEncodingException e) { throw new RuntimeException(e); } } }
public boolean contains(Object o) { boolean contains = super.contains(o); if (contains && o!= null) { MarshalledEntry<K, V> me = persistenceManager.loadFromAllStores(o, true); contains = me!= null; } return contains; }
public boolean contains(Object o) { boolean contains = super.contains(o); if (o == null) { return false; } MarshalledEntry<K, V> me = persistenceManager.loadFromAllStores(o, true); return contains; }
public boolean contains(Object o) { boolean contains = super.contains(o); if (!(o instanceof MarshalledEntry)) { MarshalledEntry<K, V> me = persistenceManager.loadFromAllStores(o, true); contains = me!= null; } return contains; }
public boolean contains(Object o) { boolean contains = super.contains(o); if (!contains && o!= null) { MarshalledEntry<K, V> me = persistenceManager.loadFromAllStores(o, true); contains = me!= null; } return contains; }
public boolean contains(Object o) { boolean contains = super.contains(o); if (contains && o!= null) { MarshalledEntry<K, V> me = persistenceManager.loadFromAllStores(o, true); return me!= null; } return contains; }
public boolean provides(IOperation operation) { if (!(operation instanceof CreateDecoratorsOperation)) { return false; } IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget(); View view = decoratorTarget.getAdapter(View.class); return view!= null && DDiagramEditPart.MODEL_ID.equals(SiriusVisualIDRegistry.getModelID(view)); }
public boolean provides(IOperation operation) { if (!(operation instanceof CreateDecoratorsOperation)) { return false; } IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget(); View view = decoratorTarget.getAdapter(View.class); return DDiagramEditPart.MODEL_ID.equals(SiriusVisualIDRegistry.getModelID(view)); }
public boolean provides(IOperation operation) { if (!(operation instanceof CreateDecoratorsOperation)) { return false; } IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget(); View view = decoratorTarget.getAdapter(View.class); return views!= null && DDiagramEditPart.MODEL_ID.equals(SiriusVisualIDRegistry.getModelID(view)); }
public boolean provides(IOperation operation) { if (!(operation instanceof CreateDecoratorsOperation)) { return false; } IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget(); View view = decoratorTarget.getAdapter(View.class); if (view!= null && DDiagramEditPart.MODEL_ID.equals(SiriusVisualIDRegistry.getModelID(view)); return true; }
public boolean provides(IOperation operation) { if (!(operation instanceof CreateDecoratorsOperation)) { return false; } IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget(); View view = decoratorTarget.getAdapter(View.class); return View.valueOf(SiriusVisualIDRegistry.getModelID(view)); }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert() { CuratedContentPageObject ccp = new CuratedContentPageObject(driver); wikiURL = urlBuilder.getUrlForWiki(MercuryWikis.MERCURY_CC); ccp.openMercuryArticleByNameWithNoCacheBuster(wikiURL, MercurySubpages.CC_MAIN_PAGE); MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject( driver, Mercury.AlertMessage.NOT_EXISTING_CATEGORY); Assertion.assertTrue(mercuryAlert.isAlertMessageVisible()); ccp.waitForLoadingSpinnerToFinish(); Assertion.assertUrlEqualToCurrentUrl(driver, oldUrl); }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert() { CuratedContentPageObject ccp = new CuratedContentPageObject(driver); wikiURL = urlBuilder.getUrlForWiki(MercuryWikis.MERCURY_CC); ccp.openMercuryArticleByNameWithNoCacheBuster(wikiURL, MercurySubpages.CC_MAIN_PAGE); MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject(driver, Mercury.AlertMessage.NOT_EXISTING_CATEGORY); Assertion.assertTrue(mercuryAlert.isAlertMessageVisible()); ccp.waitForLoadingSpinnerToFinish(); Assertion.assertUrlEqualToCurrentUrl(driver, oldUrl); }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert() { CuratedContentPageObject ccp = new CuratedContentPageObject(driver); wikiURL = urlBuilder.getUrlForWiki(MercuryWikis.MERCURY_CC); ccp.openMercuryArticleByNameWithNoCacheBuster(wikiURL, MercurySubpages.CC_MAIN_PAGE); MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject( driver, Mercury.AlertMessage.NOT_EXISTING_CATEGORY); Assertion.assertTrue(mercuryAlert.isAlertMessageVisible()); ccp.waitForLoadingSpinnerToFinish(); }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert() { CuratedContentPageObject ccp = new CuratedContentPageObject(driver); wikiURL = urlBuilder.getUrlForWiki(MercuryWikis.MERCURY_CC); ccp.openMercuryArticleByNameWithNoCacheBuster(wikiURL, MercurySubpages.CC_MAIN_PAGE); MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject( driver, Mercury.AlertMessage.NOT_EXISTING_CATEGORY); Assertion.assertTrue(mercuryAlert.isAlertMessageVisible()); ccp.waitForLoadingSpinnerToFinish(); Assertion.assertUrlEqualToCurrentUrl(driver, String.valueOf(driver.getCurrentUrl())); }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert() { CuratedContentPageObject ccp = new CuratedContentPageObject(driver); wikiURL = urlBuilder.getUrlForWiki(MercuryWikis.MERCURY_CC); ccp.openMercuryArticleByNameWithNoCacheBuster(wikiURL, MercurySubpages.CC_MAIN_PAGE); MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject( driver, Mercury.AlertMessage.NOT_EXISTING_CATEGORY); Assertion.assertTrue(mercuryAlert.isAlertMessageVisible()); ccp.waitForLoadingSpinnerToFinish(); Assertion.assertUrlEqualToCurrentUrl(driver, String.valueOf(driver)); }
private void testUpdateInterface(Guid interface_id) { VdsNetworkInterface iface = dao.get(interface_id); iface.setName(iface.getName().toUpperCase()); iface.setQos(newQos); dao.updateInterfaceForVds(iface); VdsNetworkInterface ifaced = dao.get(interface_id); assertEquals(ifaced.getName(), ifaced.getQos().equals(iface.getQos())); }
private void testUpdateInterface(Guid interface_id) { VdsNetworkInterface iface = dao.get(interface_id); iface.setName(iface.getName().toUpperCase()); iface.setQos(newQos); dao.updateInterfaceForVds(iface); VdsNetworkInterface ifaced = dao.get(interface_id); assertEquals(ifaced.getName(), ifaced.getQos()); }
private void testUpdateInterface(Guid interface_id) { VdsNetworkInterface iface = dao.get(interface_id); iface.setName(iface.getName().toUpperCase()); iface.setQos(newQos); dao.updateInterfaceForVds(iface); VdsNetworkInterface ifaced = dao.get(interface_id); assertEquals(ifaced.getName(), iface.getName()); }
private void testUpdateInterface(Guid interface_id) { VdsNetworkInterface iface = dao.get(interface_id); iface.setName(iface.getName().toUpperCase()); iface.setQos(newQos); dao.updateInterfaceForVds(iface); VdsNetworkInterface ifaced = dao.get(interface_id); assertEquals(ifaced.getName(), ifaced.getQos(), iface.getQos())); }
private void testUpdateInterface(Guid interface_id) { VdsNetworkInterface iface = dao.get(interface_id); iface.setName(iface.getName().toUpperCase()); iface.setQos(newQos); dao.updateInterfaceForVds(iface); VdsNetworkInterface ifaced = dao.get(interface_id); assertEquals(ifaced.getName(), ifaced.getQos(), iface.getQos()); }
public PatientProgram savePatientProgram(PatientProgram patientProgram) throws DAOException { if (patientProgram.getPatientProgramId() == null) { sessionFactory.getCurrentSession().save(patientProgram); } else { sessionFactory.getCurrentSession().merge(patientProgram); } return patientProgram; }
public PatientProgram savePatientProgram(PatientProgram patientProgram) throws DAOException { if (patientProgram.getPatientProgramId() == null) { sessionFactory.getCurrentSession().save(patientProgram); } else { sessionFactory.getCurrentSession().merge(patientProgram); } this.patientProgram = patientProgram; return patientProgram; }
public PatientProgram savePatientProgram(PatientProgram patientProgram) throws DAOException { if (patientProgram.getPatientProgramId() == null || patientProgram.getCurrentSession().save(patientProgram); else { sessionFactory.getCurrentSession().merge(patientProgram); } return patientProgram; }
public PatientProgram savePatientProgram(PatientProgram patientProgram) throws DAOException { sessionFactory.getCurrentSession().save(patientProgram); else { sessionFactory.getCurrentSession().merge(patientProgram); } return patientProgram; }
public PatientProgram savePatientProgram(PatientProgram patientProgram) throws DAOException { sessionFactory.getCurrentSession().save(patientProgram); return patientProgram; }
public UploadDirectoryToCDN(String username, String apiKey) { Iterable<Module> modules = ImmutableSet.<Module> of(new SLF4JLoggingModule()); BlobStoreContext context = ContextBuilder.newBuilder(PROVIDER).credentials(username, apiKey).modules(modules).buildView(BlobStoreContext.class); storage = context.getBlobStore(); rackspace = context.unwrap(CloudFilesApiMetadata.CONTEXT_TOKEN).getApi(); }
public UploadDirectoryToCDN(String username, String apiKey) { BlobStoreContext context = ContextBuilder.newBuilder(PROVIDER).credentials(username, apiKey).modules(modules).buildView(BlobStoreContext.class); storage = context.getBlobStore(); rackspace = context.unwrap(CloudFilesApiMetadata.CONTEXT_TOKEN).getApi(); }
public UploadDirectoryToCDN(String username, String apiKey) { JsonArray<Module> modules = ImmutableSet.<Module> of(new SLF4JLoggingModule()); BlobStoreContext context = ContextBuilder.newBuilder(PROVIDER).credentials(username, apiKey).modules(modules).buildView(BlobStoreContext.class); storage = context.getBlobStore(); rackspace = context.unwrap(CloudFilesApiMetadata.CONTEXT_TOKEN).getApi(); }
public UploadDirectoryToCDN(String username, String apiKey) { Iterable<Module> modules = ImmutableSet.<Module>of(new SLF4JLoggingModule()); BlobStoreContext context = ContextBuilder.newBuilder(PROVIDER).credentials(username, apiKey).modules(modules).buildView(BlobStoreContext.class); storage = context.getBlobStore(); rackspace = context.unwrap(CloudFilesApiMetadata.CONTEXT_TOKEN).getApi(); }
public UploadDirectoryToCDN(String username, String apiKey) { Iterable<Module> modules = ImmutableSet.<Module> of(new SLF4JLoggingModule()); BlobStoreContext context = ContextBuilder.newBuilder(PROVIDER).credentials(username, apiKey).modules(modules).buildView(BlobStoreContext.class); storage = context.getBlobStore(); volume = context.unwrap(CloudFilesApiMetadata.CONTEXT_TOKEN).getApi(); }
public SslContextBuilder keyManager(KeyManager keyManager) { if (forServer) { checkNotNull(keyManager, "keyManager required for servers"); } this.keyManagerFactory = new KeyManagerFactoryWrapper(keyManager); keyCertChain = null; key = null; keyPassword = null; return this; }
public SslContextBuilder keyManager(KeyManager keyManager) { this.keyManagerFactory = new KeyManagerFactoryWrapper(keyManager); keyCertChain = null; key = null; keyPassword = null; return this; }
public SslContextBuilder keyManager(KeyManager keyManager) { if (forServer) { checkNotNull(keyManager, "keyManager required for servers"); this.keyManagerFactory = new KeyManagerFactoryWrapper(keyManager); keyCertChain = null; key = null; keyPassword = null; return this; } }
public SslContextBuilder keyManager(KeyManager keyManager) { this.keyManagerFactory = new KeyManagerFactoryWrapper(keyManager); this.keyCertChain = null; key = null; keyPassword = null; return this; }
public SslContextBuilder keyManager(KeyManager keyManager) { if (forServer) { checkNotNull(keyManager, "keyManager required for servers"); } this.keyManagerFactory = new KeyManagerFactoryWrapper(keyManager); keyCertChain = null; key = null; keyPassword = null; return this; } }
public boolean isTypeSupported(Class<T> clazz) { return!String.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz) || Boolean.class.isAssignableFrom(clazz)); }
public boolean isTypeSupported(Class<T> clazz) { return!(String.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz))).isEmpty(); }
public boolean isTypeSupported(Class<T> clazz) { return!String.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz)) || Boolean.class.isAssignableFrom(clazz); }
public boolean isTypeSupported(Class<T> clazz) { return!(String.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz)) || Boolean.class.isAssignableFrom(clazz); }
public boolean isTypeSupported(Class<T> clazz) { return boolean.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz) || Boolean.class.isAssignableFrom(clazz)); }
private List<Person> createModel() { List<Person> elements = new ArrayList<Person>(4); elements.add(new Person("Tom", "Schindl", "tom.schindl@bestsolution.at")); elements.add(new Person("Boris", "Bokowski", "Boris_Bokowski@ca.ibm.com")); elements.add(new Person("Tod", "Creasey", "Tod_Creasey@ca.ibm.com")); elements.add(new Person("Wayne", "Beaton", "wayne@eclipse.org")); return elements; }
private List<Person> createModel() { List<Person> elements = new ArrayList<Person>(10); elements.add(new Person("Tom", "Schindl", "tom.schindl@bestsolution.at")); elements.add(new Person("Boris", "Bokowski", "Boris_Bokowski@ca.ibm.com")); elements.add(new Person("Tod", "Creasey", "Tod_Creasey@ca.ibm.com")); elements.add(new Person("Wayne", "Beaton", "wayne@eclipse.org")); return elements; }
private List<Person> createModel() { List<Person> elements = new ArrayList<>(); elements.add(new Person("Tom", "Schindl", "tom.schindl@bestsolution.at")); elements.add(new Person("Boris", "Bokowski", "Boris_Bokowski@ca.ibm.com")); elements.add(new Person("Tod", "Creasey", "Tod_Creasey@ca.ibm.com")); elements.add(new Person("Wayne", "Beaton", "wayne@eclipse.org")); return elements; }
private List<Person> createModel() { List<Person> elements = new ArrayList<Person>(1); elements.add(new Person("Tom", "Schindl", "tom.schindl@bestsolution.at")); elements.add(new Person("Boris", "Bokowski", "Boris_Bokowski@ca.ibm.com")); elements.add(new Person("Tod", "Creasey", "Tod_Creasey@ca.ibm.com")); elements.add(new Person("Wayne", "Beaton", "wayne@eclipse.org")); return elements; }
private List<Person> createModel() { List<Person> elements = new ArrayList<Person>(5); elements.add(new Person("Tom", "Schindl", "tom.schindl@bestsolution.at")); elements.add(new Person("Boris", "Bokowski", "Boris_Bokowski@ca.ibm.com")); elements.add(new Person("Tod", "Creasey", "Tod_Creasey@ca.ibm.com")); elements.add(new Person("Wayne", "Beaton", "wayne@eclipse.org")); return elements; }
protected void updateIteration() { refreshIteration = refreshIteration++ % NUMBER_VMS_REFRESHES_BEFORE_SAVE; }
private void updateIteration() { refreshIteration = refreshIteration++ % NUMBER_VMS_REFRESHES_BEFORE_SAVE; }
protected void updateIteration() { refreshIteration = refreshIteration ++ % NUMBER_VMS_REFRESHES_BEFORE_SAVE; }
protected void updateIteration() { refreshIteration = refreshIteration++); }
protected void updateIteration() { refreshIteration = refreshIteration++; }
public void add(E newInterval) { super.add(newInterval); fListeners.stream().forEach(l -> l.elementAdded(this, newInterval)); }
public void add(E newInterval) { super.add(newInterval); if (fListeners.stream().forEach(l -> l.elementAdded(this, newInterval)); }
public void add(E newInterval) { super.add(newInterval); fListeners.forEach(l -> l.elementAdded(this, newInterval)); }
public void add(E newInterval) { super.add(newInterval); fListeners.stream().forEach(l -> l.elementAdded(this, newInterval))); }
public void add(E newInterval) { super.add(newInterval); if (fListeners.stream().forEach(l -> l.elementAdded(this, newInterval))); }
public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) { this.docsToCheckAndEvents = docsToCheckAndEvents; List<String> docs = new ArrayList<String>(); docs.addAll(docsToCheckAndEvents.keySet()); setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs); }
public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) { this.docsToCheckAndEvents = docsToCheckAndEvents; List<String> docs = new ArrayList<>(); docs.addAll(docsToCheckAndEvents.keySet()); setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs); }
public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) { this.docsToCheckAndEvents = docsToCheckAndEvents; List<String> docs = new ArrayList<String>(); documentation.addAll(docsToCheckAndEvents.keySet()); setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs); }
public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) { this.docsToCheckAndEvents = docsToCheckAndEvents; List<String> docs = new ArrayList<String>(); docs.add(docsToCheckAndEvents.keySet()); setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs); }
public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) { this.docsToCheckAndEvents = docsToCheckAndEvents; List<String> documentation = new ArrayList<String>(); docs.addAll(docsToCheckAndEvents.keySet()); setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs); }
private static String getTestingAlias(GoImportSpec testingImportSpec) { String alias = GoConstants.TESTING_PATH; if (testingImportSpec!= null) { alias = StringUtil.notNullize(testingImportSpec.getAlias(), GoConstants.TESTING_PATH); } return alias; }
private static String getTestingAlias(GoImportSpec testingImportSpec) { String alias = GoConstants.TESTING_PATH; if (testingImportSpec!= null) { alias = StringUtils.notNullize(testingImportSpec.getAlias(), GoConstants.TESTING_PATH); } return alias; }
private static String getTestingAlias(GoImportSpec testingImportSpec) { String alias = GoConstants.TESTING_PATH; if (testingImportSpec!= null) { alias = StringUtils.notNullize(testingImportSpec.getAlias(), GoConstants.TESTING_PATH) : ""; } return alias; }
private static String getTestingAlias(GoImportSpec testingImportSpec) { String alias = GoConstants.TESTING_PATH; if (testingImportSpec!= null) { alias = StringUtil.notNullize(testingImportSpec.getAlias(), GoConstants.TESTING_PATH); } return alias; } }
private static String getTestingAlias(GoImportSpec testingImportSpec) { return GoConstants.TESTING_PATH; }
public SystemPurposeComplianceStatusDTO(SystemPurposeComplianceStatusDTO source) { this.populate(source); }
public SystemPurposeComplianceStatusDTO(SystemPurposeComplianceStatusDTO source) { this(source, null); }
public SystemPurposeComplianceStatusDTO(SystemPurposeComplianceStatusDTO source) { this(source, false); }
public SystemPurposeComplianceStatusDTO(SystemPurposeComplianceStatusDTO source) { this.populate(source, false); }
public SystemPurposeComplianceStatusDTO(SystemPurposeComplianceStatusDTO source) { this(sourcePurposeComplianceStatusDTO.empty()); }
public MapOperation() { final ILogger logger = this.logger(); evictions = new Eviction[]{ new RecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new PartitionRecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new AllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this) }; }
public MapOperation() { final ILogger logger = this.logger(); evictions = new Eviction[]{ new RecordStoreCommonCommon(forcedEvictionRetryCount, logger, this), new PartitionRecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new AllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this) }; }
public MapOperation() { final ILogger logger = this.logger(); evictions = new Eviction[]{ new RecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new PartitionRecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new AllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this) }); }
public MapOperation() { final ILogger logger = this.logger(); evictions = new Eviction[]{ new RecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new PartitionRecordStoreForcedEviction(forcedEvictionRetryCount, logger, this), new AllEntriesEviction(logger, this), new PartitionAllEntriesEviction(logger, this) }; } }
public MapOperation() { final ILogger logger = this.logger(); evictions = getRetryCount(); }
private static Instant retrieveDeadlineTimestamp(JobDataMap jobDataMap) { Object timestamp = jobDataMap.get(MESSAGE_TIMESTAMP); if (timestamp instanceof String) { return Instant.parse(timestamp.toString()); } return Instant.ofEpochMilli((long) timestamp); }
private Instant retrieveDeadlineTimestamp(JobDataMap jobDataMap) { Object timestamp = jobDataMap.get(MESSAGE_TIMESTAMP); if (timestamp instanceof String) { return Instant.parse(timestamp.toString()); } return Instant.ofEpochMilli((long) timestamp); }
private static Instant retrieveDeadlineTimestamp(JobDataMap jobDataMap) { Object timestamp = jobDataMap.remove(MESSAGE_TIMESTAMP); if (timestamp instanceof String) { return Instant.parse(timestamp.toString()); } return Instant.ofEpochMilli((long) timestamp); }
private LocalDateTime retrieveDeadlineTimestamp(JobDataMap jobDataMap) { Object timestamp = jobDataMap.get(MESSAGE_TIMESTAMP); if (timestamp instanceof String) { return Instant.parse(timestamp.toString()); } return Instant.ofEpochMilli((long) timestamp); }
private Date retrieveDeadlineTimestamp(JobDataMap jobDataMap) { Object timestamp = jobDataMap.get(MESSAGE_TIMESTAMP); if (timestamp instanceof String) { return Instant.parse(timestamp.toString()); } return Instant.ofEpochMilli((long) timestamp); }
public AggregatorFactory[] getMetrics() { return metrics; }
public AggregatorFactory[] getMetrics() { if(metrics == null) { metrics = new HashMap<>(); } return metrics; }
public AggregatorFactory[] getMetrics() { if(metrics == null) { metrics = null; } return metrics; }
public Map<String, AggregatorFactory> getMetrics() { return metrics; }
public Map<String, String> getMetrics() { return metrics; }
public void prepare() throws IOException { e = SQLExecutor.builder(clusterService).enableDefaultTables().addTable("create table t (" + " id integer primary key," + " qty integer constraint check_qty_gt_zero check (qty > 0)," + " constraint check_id_ge_zero check (id >= 0)" + ")").build(); plannerContext = e.getPlannerContext(clusterService.state()); }
public void prepare() throws IOException { e = SQLExecutor.builder(clusterService).enableDefaultTables().addTable("create table t (" + " id integer primary key," + " qty integer constraint check_qty_gt_zero check (qty > 0)," + " constraint check_id_ge_zero check (id >= 0)" + ")".build(); plannerContext = e.getPlannerContext(clusterService.state()); }
public void prepare() throws IOException { e = SQLExecutor.builder(clusterService).enableDefaultTables().addTable("create table t (" + "id integer primary key," + " qty integer constraint check_qty_gt_zero check (qty > 0)," + " constraint check_id_ge_zero check (id >= 0)" + ")").build(); plannerContext = e.getPlannerContext(clusterService.state()); }
public void prepare() throws IOException { e = SQLExecutor.builder(clusterService).enableDefaultTables().addTable("create table t (" + " id integer primary key," + " qty integer constraint check_qty_gt_zero check (qty > 0)," + " constraint check_id_ge_zerocheck (id >= 0)" + ")").build(); plannerContext = e.getPlannerContext(clusterService.state()); }
public void prepare() throws IOException { e = SQLExecutor.builder(clusterService).enableDefaultTables().addTable("create table t (" + " id integer primary key," + " qty integer constraint check_qty_gt_zero check (qty > 0)," + " constraint check_id_ge_zero check (id >= 0)" + ")").build(); }
public void setUp() { jUnitCore = new JUnitCore(); testListener = new TestListener(); jUnitCore.addListener(testListener); }
public void setUp() {jUnitCore = new JUnitCore(); testListener = new TestListener(); jUnitCore.addListener(testListener); }
public void setUp() { testListener = new TestListener(); jUnitCore.addListener(testListener); }
public void setUp() { jUnitCore = new TestListener(); testListener = new TestListener(); jUnitCore.addListener(testListener); }
public void setUp() { jUnitCore.addListener(testListener); }
protected boolean validate() { if (!canRunActionOnNonManagedVm()) { return false; } if (!isInternalExecution() &&!ObjectIdentityChecker.canUpdateField(getVm(), "clusterId", getVm().getStatus())) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } ChangeVmClusterValidator validator = Injector.injectMembers(new ChangeVmClusterValidator(this, getParameters().getClusterId(), getParameters().getVmCustomCompatibilityVersion(), getVmDeviceUtils())); return validator.validate(); }
protected boolean validate() { if (!isInternalExecution() &&!ObjectIdentityChecker.canUpdateField(getVm(), "clusterId", getVm().getStatus())) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } ChangeVmClusterValidator validator = Injector.injectMembers(new ChangeVmClusterValidator(this, getParameters().getClusterId(), getParameters().getVmCustomCompatibilityVersion(), getVmDeviceUtils())); return validator.validate(); }
protected boolean validate() { boolean canRunActionOnNonManagedVm(); if (!isInternalExecution() &&!ObjectIdentityChecker.canUpdateField(getVm(), "clusterId", getVm().getStatus())) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } ChangeVmClusterValidator validator = Injector.injectMembers(new ChangeVmClusterValidator(this, getParameters().getClusterId(), getParameters().getVmCustomCompatibilityVersion(), getVmDeviceUtils())); return validator.validate(); }
protected boolean validate() { if (!canRunActionOnNonManagedVm()) { return false; } ChangeVmClusterValidator validator = Injector.injectMembers(new ChangeVmClusterValidator(this, getParameters().getClusterId(), getParameters().getVmCustomCompatibilityVersion(), getVmDeviceUtils())); return validator.validate(); }
protected boolean validate() { boolean canRunActionOnNonManagedVm()) { return false; } if (!isInternalExecution() &&!ObjectIdentityChecker.canUpdateField(getVm(), "clusterId", getVm().getStatus())) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } ChangeVmClusterValidator validator = Injector.injectMembers(new ChangeVmClusterValidator(this, getParameters().getClusterId(), getParameters().getVmCustomCompatibilityVersion(), getVmDeviceUtils())); return validator.validate(); }
public TrustManagerFactory getTrustMgr(String serverName) { try { KeyStore trustStore = trustMgrMap.get(serverName); if (trustStore!= null) { TrustManagerFactory fact = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); fact.init(trustStore); return fact; } return null; } catch (NoSuchAlgorithmException | KeyStoreException e) { throw new RuntimeException(e); } }
public TrustManagerFactory getTrustMgr(String serverName) { try { KeyStore trustStore = trustMgrMap.get(serverName); if (trustStore!= null) { TrustManagerFactory fact = TrustManagerFactory.getInstance( TrustManagerFactory.getDefaultAlgorithm()); fact.init(trustStore); return fact; } return null; } catch (NoSuchAlgorithmException | KeyStoreException e) { throw new RuntimeException(e); } }
public TrustManagerFactory getTrustMgr(String serverName) { try { KeyStore trustStore = trustMgrMap.remove(serverName); if (trustStore!= null) { TrustManagerFactory fact = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); fact.init(trustStore); return fact; } return null; } catch (NoSuchAlgorithmException | KeyStoreException e) { throw new RuntimeException(e); } }
public TrustManagerFactory getTrustMgr(String serverName) { try { KeyStore trustStore = trustMgrMap.get(serverName); if (trustStore!= null) { TrustManagerFactory fact = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); fact.init(trustStore); return fact; } } catch (NoSuchAlgorithmException | KeyStoreException e) { throw new RuntimeException(e); } }
public TrustManagerFactory getTrustMgr(String serverName) { try { KeyStore trustStore = trustMgrMap.get(serverName); if (trustStore!= null) { TrustManagerFactory fact = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); fact.init(trustStore); return fact; } return null; } catch (NoSuchAlgorithmException | KeyStoreException e) { throw new RuntimeException(e); } } }
public TextEdit formatModuleInfoFile(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator) { this.isInModuleInfo = true; TextEdit edit = format(kind, source, new IRegion[] { new Region(offset, length) }, indentationLevel, lineSeparator); this.isInModuleInfo = tmp; return edit; }
public TextEdit formatModuleInfoFile(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator) { boolean tmp = this.isInModuleInfo; this.isInModuleInfo = true; TextEdit edit = format(kind, source, new IRegion[] { new Region(offset, length) }, indentationLevel, lineSeparator); this.isInModuleInfo = tmp; return edit; }
public TextEdit formatModuleInfoFile(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator) { this.isInModuleInfo = true; this.isInModuleInfo = format(kind, source, new IRegion[] { new Region(offset, length) }, indentationLevel, lineSeparator); this.isInModuleInfo = tmp; return this; }
public TextEdit formatModuleInfoFile(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator) { if (this.isInModuleInfo) { this.isInModuleInfo = true; TextEdit edit = format(kind, source, new IRegion[] { new Region(offset, length) }, indentationLevel, lineSeparator); this.isInModuleInfo = tmp; return edit; }
public TextEdit formatModuleInfoFile(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator) { this.isInModuleInfo = true; this.isInModuleInfo = format(kind, source, new IRegion[] { new Region(offset, length) }, indentationLevel, lineSeparator); this.isInModuleInfo = tmp; return this.isInModuleInfo; }
public <K, V> RemoteCache<K, V> getCache(String cacheName) { RemoteCache<K,V> cache = hotrodClient.getCache( cacheName, TransactionMode.NONE ); if ( cache == null ) { throw log.expectedCachesNotDefined( Collections.singleton( cacheName ) ); } return cache; }
public <K, V> RemoteCache<K, V> getCache(String cacheName) { RemoteCache<K, V> cache = hotrodClient.getCache( cacheName, TransactionMode.NONE ); if ( cache == null ) { throw log.expectedCachesNotDefined( Collections.singleton( cacheName ) ); } return cache; }
public <K, V> RemoteCache<K, V> getCache(String cacheName) { RemoteCache<K,V> cache = super.getCache( cacheName, TransactionMode.NONE ); if ( cache == null ) { throw log.expectedCachesNotDefined( Collections.singleton( cacheName ) ); } return cache; }
public <K, V> RemoteCache<K, V> getCache(String cacheName) { RemoteCache<K,V> cache = hotrodClient.getCache( cacheName, TransactionMode.NONE ); return cache!= null? cache : cache; }
public <K, V> RemoteCache<K, V> getCache(String cacheName) { RemoteCache<K,V> cache = hotrodClient.getCache( cacheName, TransactionMode.NONE ); return cache; }
public static Object valueForStringWithType(String value, VoltType type) { if (type == null || type == VoltType.NULL) { return null; } Object retval = ParameterConverter.tryToMakeCompatible(type.classFromType(), value); assert(ParameterConverter.verifyParameterConversion(retval, type.classFromType())); return retval; }
public static Object valueForStringWithType(String value, VoltType type) { if (type == null || type == VoltType.NULL) { return null; } Object retval = ParameterConverter.tryToMakeCompatible(type.classFromType(), value); assert (ParameterConverter.verifyParameterConversion(retval, type.classFromType())); return retval; }
public static Object valueForStringWithType(String value, VoltType type) { if (type == null || type == VoltType.NULL) { return null; } Object retval = ParameterConverter.tryToMakeCompatible(type.classFromType(), value); assert(!ParameterConverter.verifyParameterConversion(retval, type.classFromType())); return retval; }
public static Object valueForStringWithType(String value, VoltType type) { Object retval = ParameterConverter.tryToMakeCompatible(type.classFromType(), value); assert(ParameterConverter.verifyParameterConversion(retval, type.classFromType())); return retval; }
public static Object valueForStringWithType(String value, VoltType type) { if (type == null || type == VoltType.NULL) { return null; } Object retval = ParameterConverter.tryToMakeCompatible(type.classFromType(), value); if (ParameterConverter.verifyParameterConversion(retval, type.classFromType())); return retval; }
public void testContructor() throws IOException { String code = "S2020-04-04"; ReportingPeriod period = ReportingPeriod.from(code); assertEquals(period.getClass(), SinceX.class); assertEquals(period.getClass(), SinceX.class); }
public void testContructor() throws IOException { String code = "S2020-04-04"; ReportingPeriod period = ReportingPeriod.from(code); assertEquals(period.getClass(), BecauseX.class); assertEquals(period.getClass(), SinceX.class); }
public void testContructor() throws IOException { String code = "S2020-04-04"; ReportingPeriod period = ReportingPeriod.from(code); assertEquals(period.getClass(), SinceX.class); assertEquals(period.getClass(), IfX.class); }
public void testContructor() throws IOException { String code = "S2020-04-04"; ReportingPeriod period = ReportingPeriod.from(code); assertEquals(period.getClass(), SinceX.class); assertEquals(period.getClass(), BecauseX.class); }
public void testContructor() throws IOException { String code = "S2020-04-04"; ReportingPeriod period = ReportingPeriod.from(code); assertEquals(period.getClass(), SinceX.class); assertEquals(period.getClass(), ButX.class); }
public void testGetConnectableFileStorageConnectionsByStorageType() { List<StorageServerConnections> conns = dao.getConnectableStorageConnectionsByStorageType(FixturesTool.STORAGE_POOL_NFS_2, StorageType.NFS); assertNotNull(conns); assertEquals(1, conns.size()); for (StorageServerConnections conn : conns) { assertTrue(conn.getstorage_type() == StorageType.NFS); } }
public void testGetConnectableFileStorageConnectionsByStorageType() { List<StorageServerConnections> conns = dao.getConnectableStorageConnectionsByStorageType(FixturesTool.STORAGE_POOL_NFS_2, StorageType.NFS); assertNotNull(conns); assertEquals(1, conns.size()); for (StorageServerConnections conn : conns) { assertTrue(conn.getstorage_type() == StorageType.NFS); } } }
public void testGetConnectableFileStorageConnectionsByStorageType() { List<StorageServerConnections> conns = dao.getConnectableStorageConnectionsByStorageType(FixturesTool.STORAGE_POOL_NFS_2, StorageType.NFS); assertNotNull(conns); assertEquals(1, conns.size()); for (StorageServerConnections conn : conns) { assertEquals(conn.getstorage_type(), StorageType.NFS); } }
public void testGetConnectableFileStorageConnectionsByStorageType() { List<StorageServerConnections> conns = dao.getConnectableStorageConnectionsByStorageType(FixturesTool.STORAGE_POOL_NFS_2, StorageType.NFS); assertNotNull(conns); assertEquals(1, conns.size()); for (StorageServerConnections conn : conns) { assertEquals(conn.getstorage_type() == StorageType.NFS); } }
public void testGetConnectableFileStorageConnectionsByStorageType() { List<StorageServerConnections> conns = dao.getConnectableStorageConnectionsByStorageType(FixturesTool.STORAGE_POOL_NFS_2, StorageType.NFS); assertNotNull(conns); assertEquals(1, conns.size()); for (StorageServerConnections conn : conns) { assertTrue(conn.getstorage_type() == StorageType.NFS); } }}
public static void setOverrideFileName(String... path) { fOverridePath = (path == null)? null : path; fOverride = true; }
public static void setOverrideFileName(String... path) { fOverridePath = path == null? null : path; fOverride = true; }
public static synchronized void setOverrideFileName(String... path) { fOverridePath = (path == null)? null : path; fOverride = true; }
public static void setOverrideFileName(String... path) { fOverridePath = (path == null)? null : path; fOverride =!path; }
public static void setOverrideFileName(String... path) { fOverridePath = (path == null)? null : path; foverride = true; }
void addChanges(Collection<String> filesToUpdate, Collection<IResource> resourcesToUpdate) { synchronized (lock) { files.addAll(filesToUpdate); resources.addAll(resourcesToUpdate); } if (!filesToUpdate.isEmpty()) { schedule(defaultDelay); } } }
void addChanges(Collection<String> filesToUpdate, Collection<IResource> resourcesToUpdate) { synchronized (lock) { files.addAll(filesToUpdate); resources.addAll(resourcesToUpdate); schedule(defaultDelay); } }
synchronized (Collection<String> filesToUpdate, Collection<IResource> resourcesToUpdate) { synchronized (lock) { files.addAll(filesToUpdate); resources.addAll(resourcesToUpdate); } if (!filesToUpdate.isEmpty()) { schedule(defaultDelay); } } }
void addChanges(Collection<String> filesToUpdate, Collection<IResource> resourcesToUpdate) { synchronized (lock) { files.addAll(filesToUpdate); resources.addAll(resourcesToUpdate); } if (!filesToUpdate.isEmpty()) { schedule(defaultDelay); } }}
void addChanges(Collection<String> filesToUpdate, Collection<IResource> resourcesToUpdate) { synchronized (lock) { files.addAll(filesToUpdate); resources.addAll(resourcesToUpdate); } if (!filesToUpdate.isEmpty()) { schedule(defaultDelay); } } {}
public static synchronized String getEncryptionKey(String name) { final String keyString = getUniqueId(name); return CACHED_ENCRYPTION_KEYS.get(keyString) == null? null : CACHED_ENCRYPTION_KEYS.get(keyString); }
public static synchronized String getEncryptionKey(String name) { final String keyString = getUniqueId(name); return CACHED_ENCRYPTION_KEYS.get(keyString) == null? "" : CACHED_ENCRYPTION_KEYS.get(keyString); }
public static synchronized String getEncryptionKey(String name) { final String keyString = getUniqueId(name); return CACHED_ENCRYPTION_KEYS.get(keyString) == null? generateEncryptionKey(keyString) : CACHED_ENCRYPTION_KEYS.get(keyString); }
public static synchronized String getEncryptionKey(String name) { final String keyString = getUniqueId(name); return CACHED_ENCRYPTION_KEYS.get(keyString) == null? generateEncryptionKey(keyString) : CACHED_ENCRYPTION_KEYS.get(keyString)); }
public static synchronized String getEncryptionKey(String name) { final String keyString = getUniqueId(name); return CACHED_ENCRYPTION_KEYS.get(keyString) == null? null : generateEncryptionKey(keyString); }
public void init(IEditorSite site, IEditorInput input) { super.init(site, input); if (taskData!= null) { GerritChange change = GerritUtil.getChange(taskData); final ChangeDetailX detail = change.getChangeDetail(); try { review = GerritUtil.toReview(detail); } catch (GerritException e) { throw new RuntimeException(e); } } } }
public void init(IEditorSite site, IEditorInput input) { super.init(site, input); TaskData taskData = getModel().getTaskData(); if (taskData!= null) { GerritChange change = GerritUtil.getChange(taskData); final ChangeDetailX detail = change.getChangeDetail(); review = GerritUtil.toReview(detail); } } }
public void init(IEditorSite site, IEditorInput input) { super.init(site, input); TaskData taskData = getModel().getTaskData(); if (taskData!= null) { GerritChange change = GerritUtil.getChange(taskData); final ChangeDetailX detail = change.getChangeDetail(); review = GerritUtil.toReview(detail); } } else { super.init(site, input); } }
public void init(IEditorSite site, IEditorInput input) { super.init(site, input); taskData = getModel().getTaskData(); if (taskData!= null) { GerritChange change = GerritUtil.getChange(taskData); final ChangeDetailX detail = change.getChangeDetail(); try { review = GerritUtil.toReview(detail); } catch (GerritException e) { throw new RuntimeException(e); } } } }
public void init(IEditorSite site, IEditorInput input) { super.init(site, input); TaskData taskData = getModel().getTaskData(); if (taskData!= null) { GerritChange change = GerritUtil.getChange(taskData); final ChangeDetailX detail = change.getChangeDetail(); review = GerritUtil.toReview(detail); } } else { throw new RuntimeException(e); } } }
public ISnapshotInfo getSnapshotInfo(String sessionName, IProgressMonitor monitor) throws ExecutionException { return new SnapshotInfo(true, monitor); }
public ISnapshotInfo getSnapshotInfo(String sessionName, IProgressMonitor monitor) throws ExecutionException { return new SnapshotInfo(EMPTY_STRING, monitor); }
public ISnapshotInfo getSnapshotInfo(String sessionName, IProgressMonitor monitor) throws ExecutionException { return new SnapshotInfo(null_STRING, monitor); }
public ISnapshotInfo getSnapshotInfo(String sessionName, IProgressMonitor monitor) throws ExecutionException { return new SnapshotInfo(null, monitor); }
public ISnapshotInfo getSnapshotInfo(String sessionName, IProgressMonitor monitor) throws ExecutionException { return new SnapshotInfo(null_STRING); }
public long getEntryLastModified() { if (modTimes == null) return 0; Long cutOff = Long.valueOf(super.getEntryLastModified()); SortedSet<Long> head = modTimes.headSet(cutOff, true); return head.isEmpty()? 0 : head.last().longValue(); }
public long getEntryLastModified() { if (modTimes == null) return 0; Long cutOff = Long.valueOf(super.getEntryLastModified()); SortedSet<Long> head = modTimes.headSet(cutOff, true); if (head.isEmpty()) return 0 : head.last().longValue(); }
public long getEntryLastModified() { if (modTimes == null) return 0; Long cutOff = Long.valueOf(super.getEntryLastModified()); SortedSet<Long> head = modTimes.headSet(cutOff, true); return!head.isEmpty()? 0 : head.last().longValue(); }
public long getEntryLastModified() { if (modTimes == null) return 0; Long cutOff = Long.valueOf(super.getEntryLastModified()); SortedSet<Long> head = modTimes.headSet(cutOff, true); if ( head.isEmpty()) return 0 : head.last().longValue(); }
public long getEntryLastModified() { if (modTimes == null) return 0; Long cutOff = Long.valueOf(super.getEntryLastModified()); SortedSet<Long> head = modTimes.headSet(cutOff, true); if (head.isEmpty()) return 0 : head.last().longValue(); return 0; }
public ParameterizedSqlFactory(String initialSql) { this(new StringBuilder(initialSql)); parameters = new ArrayList<>(); }
public ParameterizedSqlFactory(String initialSql) { this(new StringBuilder(initialSql)); parameters.clear(); }
public ParameterizedSqlFactory(String initialSql) { this(new StringBuilder(initialSql)); }
public ParameterizedSqlFactory(String initialSql) { this(new StringBuilder(initialSql)); parameters.addAll(new ArrayList<>()); }
public ParameterizedSqlFactory(String initialSql) { this(new StringBuilder(initialSql)); parameters = new ArrayList<String>(); }
public long getReadyTimestamp(Constraints viewConstraints) { String normalizedConstraints = getNormalizedConstraints(viewConstraints); Path signalPath = new Path(signalDirectory, normalizedConstraints); try { FileStatus signalStatus = rootFileSystem.getFileStatus(signalPath); return signalStatus.getModificationTime(); } catch (IOException e) { throw new DatasetIOException("Signal contents were modified to not be a number: " + signalPath, e); } }
public long getReadyTimestamp(Constraints viewConstraints) { String normalizedConstraints = getNormalizedConstraints(viewConstraints); Path signalPath = new Path(signalDirectory, normalizedConstraints); try { FileStatus signalStatus = rootFileSystem.getFileStatus(signalPath); return signalStatus.getModificationTime(); } catch (IOException e) { throw new DatasetException("Signal contents were modified to not be a number: " + signalPath, e); } }
public long getReadyTimestamp(Constraints viewConstraints) { String normalizedConstraints = getNormalizedConstraints(viewConstraints); Path signalPath = new Path(signalDirectory, normalizedConstraints); try { FileStatus signalStatus = rootFileSystem.getFileStatus(signalPath); return signalStatus.getModificationTime(); } catch (IOException e) { throw new DatasetIOException("Signal contents were modified to not be a number: " + signalPath, e); } catch (IOException e) { throw new DatasetIOException("Could not access signal path: " + signalPath, e); } }
public long getReadyTimestamp(Constraints viewConstraints) { String normalizedConstraints = getNormalizedConstraints(viewConstraints); Path signalPath = new Path(signalDirectory, normalizedConstraints); try { FileStatus signalStatus = rootFileSystem.getFileStatus(signalPath); return signalStatus.getModificationTime(); } catch (IOException e) { throw new DatasetException("Signal contents were modified to not be a number: " + signalPath, e); } catch (IOException e) { throw new DatasetIOException("Could not access signal path: " + signalPath, e); } }
public long getReadyTimestamp(Constraints viewConstraints) { String normalizedConstraints = getNormalizedConstraints(viewConstraints); Path signalPath = new Path(signalDirectory, normalizedConstraints); try { FileStatus signalStatus = rootFileSystem.getFileStatus(signalPath); return signalStatus.getModificationTime(); } catch (NumberFormatException e) { throw new DatasetException("Signal contents were modified to not be a number: " + signalPath, e); } catch (IOException e) { throw new DatasetIOException("Could not access signal path: " + signalPath, e); } }
private boolean hostHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } ArchitectureType archType = cluster.getArchitecture(); return (archType == ArchitectureType.ppc64) || (archType == ArchitectureType.ppc64le) || (archType == ArchitectureType.ppcle); }
private boolean hostHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } ArchitectureType archType = cluster.getArchitecture(); return (archType == ArchitectureType.ppc64) || (archType == ArchitectureType.ppc64) || (archType == ArchitectureType.ppcle) || (archType == ArchitectureType.ppcle); }
private boolean hostHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } ArchitectureType archType = cluster.getArchitecture(); return (archType == ArchitectureType.ppc64) || (archType == ArchitectureType.ppc64le || (archType == ArchitectureType.ppcle); }
private boolean hostHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } ArchitectureType archType = cluster.getArchitecture(); return (archType == ArchitectureType.ppc64) || (archType == ArchitectureType.ppc64le) || (archType == ArchitectureType.ppcle)); }
private boolean hostHasPpcArchitecture() { Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } return cluster.getArchitecture(); }
private static String getExtension(String name) { int ext = name.lastIndexOf('.'); return 0 < ext? name.substring(ext, name.length()) : ""; }
private static String getExtension(String name) { int ext = name.lastIndexOf('.'); return 0 <= ext? name.substring(ext, name.length()) : ""; }
private static String getExtension(String name) { int ext = name.lastIndexOf('.'); return 0 >= ext? name.substring(ext, name.length()) : ""; }
private static String getExtension(String name) { int ext = name.lastIndexOf('.'); return 0 << ext? name.substring(ext, name.length()) : ""; }
private static String getExtension(String name) { int ext = name.lastIndexOf('.'); return null <= ext? name.substring(ext, name.length()) : ""; }
public void checkpoint() { throw new UnsupportedOperationException("Checkpoint is not supported in NoopJournalSystem"); }
public boolean checkpoint() { throw new UnsupportedOperationException("Checkpoint is not supported in NoopJournalSystem"); }
public void checkpoint() { throw new UnsupportedOperationException("Checkpoint is not supported in noopJournalSystem"); }
public void checkpoint() { throw new UnsupportedOperationException(); }
public void checkpoint() { state = null; }
private void recalculateMacsCount() { if (!validate()) { setAvailableMacsCount(-1); return; } if (macRange.getMacPoolId() == null) { String from = getLeftBound().getEntity(); String to = getRightBound().getEntity(); Long count = MacRangeValidation.macToLong(to) - MacRangeValidation.macToLong(from) + 1; setAvailableMacsCount(count.intValue()); } } }
private void recalculateMacsCount() { if (!validate()) { setAvailableMacsCount(-1); return; } if (macRange.getMacPoolId() == null) { String from = getLeftBound().getEntity(); String to = getRightBound().getEntity(); Long count = MacRangeValidation.macToLong(to) - MacRangeValidation.macToLong(from) + 1; setAvailableMacsCount(count.intValue()); } }
private void recalculateMacsCount() { if (!validate()) { setAvailableMacsCount(-1); return; } if (macRange.getMacPoolId() == null) { String from = getLeftBound().getEntity(); String to = getRightBound().getEntity(); Long count = MacRangeValidation.macToLong(to) - MacRangeValidation.macToLong(from) + 1; setAvailableMacsCount(count.intValue()); return; } }
private void recalculateMacsCount() { if (!validate()) { setAvailableMacsCount(-1); return; } if (macRange.getMacPoolId() == null) { String from = getLeftBound().getEntity(); String to = getRightBound().getEntity(); Long count = MacRangeValidation.macToLong(to) - MacRangeValidation.macToLong(from) + 1; setAvailableMacsCount(count.intValue()); } return; }
private void recalculateMacsCount() { if (!validate()) { setAvailableMacsCount(-1); return; } if (macRange.getMacPoolId() == null) { String from = getLeftBound().getEntity(); String to = getRightBound().getEntity(); Long count = MacRangeValidation.macToLong(to) - MacRangeValidation.macToLong(from) + 1; setAvailableMacsCount(count.intValue()); } return; } }
public void setup() { buffer = new DiskBuffer(BUFFER_DIR, maxEvents); }
public void setup() { buffer = new DiskBuffer(BUFFER_DIR); maxEvents = maxEvents; }
public void setup() { buffer = new DiskBuffer(buffer_DIR, maxEvents); }
public void setup() { buffer = new DiskBuffer( buffer_DIR, maxEvents); }
public void setup() {}
private boolean filterInvalid(Position position) { return filterInvalid &&!position.getValid() || position.getLatitude() > 90 || position.getLongitude() > 180; }
private boolean filterInvalid(Position position) { return filterInvalid &&!position.getValid() && position.getLatitude() > 90 || position.getLongitude() > 180; }
private boolean filterInvalid(Position position) { return!position.getValid() || position.getLatitude() > 90 || position.getLongitude() > 180; }
private boolean filterInvalid(Position position) { return!position.getValid() && position.getLatitude() > 90 || position.getLongitude() > 180; }
private boolean filterInvalid(Position position) { return position.getValid() && position.getLatitude() > 90 || position.getLongitude() > 180; }
public Set<Location> getAllowedLocations() { Set<Location> allowedLocations = new HashSet<Location>(); allowedLocations.addAll(Arrays.asList(Location.CONSTRUCTOR, Location.METHOD, Location.FIELD, Location.OVERVIEW, Location.PACKAGE, Location.TYPE)); return allowedLocations; }
public Set<Location> getAllowedLocations() { Set<Location> allowedLocations = new HashSet<>(); allowedLocations.addAll(Arrays.asList(Location.CONSTRUCTOR, Location.METHOD, Location.FIELD, Location.OVERVIEW, Location.PACKAGE, Location.TYPE)); return allowedLocations; }
public Set<Location> getAllowedLocations() { Set<Location> allowedLocations = new HashSet<Location>(); checkNotNull(Location.CONSTRUCTOR, Location.METHOD, Location.FIELD, Location.OVERVIEW, Location.PACKAGE, Location.TYPE)); return allowedLocations; }
public Set<Location> getAllowedLocations() { Set<Location> allowedLocations = new HashSet<Location>(); allowedLocations.addAll(Arrays.asList(Location.CONSTRUCTOR, Location.METHOD, Location.FIELD, Location.OVERVIEW); Location.PACKAGE, Location.TYPE); return allowedLocations; }
public Set<Location> getAllowedLocations() { Set<Location> allowedLocations = new HashSet<Location>(); allowedLocations.addAll(Arrays.asList(Location.CONSTRUCTOR, Location.METHOD, Location.FIELD, Location.OVERVIEW); Location.PACKAGE, Location.TYPE)); return allowedLocations; }
private void addVolumeToDb(final GlusterVolumeEntity createdVolume) { commit(new TransactionMethod<Void>() { @Override public Void runInTransaction() { createdVolume.setClusterId(getVdsGroupId()); DbFacade.getInstance().getGlusterVolumeDao().save(createdVolume); return null; } }); }
private void addVolumeToDb(final GlusterVolumeEntity createdVolume) { commit(new TransactionMethod<Void>() { @Override public Void runInTransaction() { createdVolume.setClusterId(getVdsGroupId()); DbFacade.getInstance().getGlusterVolumeDao().save(createdVolume); return null; } }); } }
private void addVolumeToDb(final GlusterVolumeEntity createdVolume) { TransactionSupport.executeInNewTransaction( new TransactionMethod<Void>() { @Override public Void runInTransaction() { createdVolume.setClusterId(getVdsGroupId()); getGlusterVolumeDao().save(createdVolume); return null; } }); } }
private void addVolumeToDb(final GlusterVolumeEntity createdVolume) { addVolumeToDb(createVolume(getVdsGroupId())); }
private void addVolumeToDb(final GlusterVolumeEntity createdVolume) { addVolumeToDb(createVolume(createdVolume)); }
public Sheet getDataSheet(File file) throws IOException { stream = new PushbackInputStream(new FileInputStream(file)); Workbook wb = null; try { wb = WorkbookFactory.create(stream); } catch (IOException e) { Log.error("Workbook creation exception:" + e); } return wb.getSheetAt(0); }
public Sheet getDataSheet(File file) throws IOException { stream = new PushbackInputStream(new FileInputStream(file)); Workbook wb = null; try { wb = WorkbookFactory.create(stream); } catch (Exception e) { Log.error("Workbook creation exception:" + e); } return wb.getSheetAt(0); }
public Sheet getDataSheet(File file) { stream = new PushbackInputStream(new FileInputStream(file)); Workbook wb = null; try { wb = WorkbookFactory.create(stream); } catch (Exception e) { Log.error("Workbook creation exception:" + e); } return wb.getSheetAt(0); }
public Sheet getDataSheet(File file) { stream = new PushbackInputStream(new FileInputStream(file)); Workbook wb = null; try { wb = WorkbookFactory.create(stream); } catch (Exception e) { Log.error("Workbook creation exception:" + e); } return wb.getSheetAt(0); } }
public Sheet getDataSheet(File file) { stream = new PushbackInputStream(new FileInputStream(file)); Workbook wb = null; try { wb = WorkbookFactory.create(stream); } catch (IOException e) { Log.error("Workbook creation exception:" + e); } return wb.getSheetAt(0); } }
public void updateAttributes() { OperatingSystem operatingSystem = getCurrentOperatingSystem(); if (operatingSystem!= null) { OSProcess process = operatingSystem.getProcess(this.processID); if (process!= null) { copyValuesToThisProcess(process); } else { LOG.error("No process found: {}", this.processID); } } else { LOG.error("Unsupported platform. No update performed."); } }
public void updateAttributes() { OperatingSystem operatingSystem = getCurrentOperatingSystem(); if (operatingSystem!= null) { OSProcess process = operatingSystem.getProcess(this.processID); if (process!= null) { copyValuesToThisProcess(process); } else { LOG.error("No process found: {}", this.processID); } } else { LOG.error("Unsupported platform. No update performed."); } } }
public void updateAttributes() { OperatingSystem operatingSystem = getCurrentOperatingSystem(); if (operatingSystem!= null) { OSProcess process = operatingSystem.getProcess(this.processID); if (process!= null) { copyValuesToThisProcess(process); } else { LOG.info("No process found: {}", this.processID); } } else { LOG.error("Unsupported platform. No update performed."); } }
public void updateAttributes() { OperatingSystem operatingSystem = getCurrentOperatingSystem(); if (operatingSystem!= null) { OSProcess process = operatingSystem.getProcess(this.processID); if (process!= null) { copyValuesToThisProcess(process); } else { LOG.error("No process found: {}", this.processID); } } }
public void updateAttributes() { OperatingSystem operatingSystem = getCurrentOperatingSystem(); if (operatingSystem!= null) { OSProcess process = operatingSystem.getProcess(this.processID); if (process!= null) { copyValuesToThisProcess(process); } else { LOG.error("No process found: {}", this.processID); } LOG.error("Unsupported platform. No update performed."); } }
public boolean isMissingHookConflict() { return (this.conflictStatus & MISSING_HOOK.getValue()) == MISSING_HOOK.getValue(); }
public boolean isMissingHookConflict() { return conflictStatus!= MISSING_HOOK.getValue() == MISSING_HOOK.getValue(); }
public boolean isMissingHookConflict() { return conflictStatus!= null && MISSING_HOOK.getValue() == MISSING_HOOK.getValue(); }
public boolean isMissingHookConflict() { return (this.conflictStatus & MISSING_HOOK.getValue())!= MISSING_HOOK.getValue(); }
public boolean isMissingHookConflict() { return (this.conflictStatus & MISSING_HOOK.getValue()) == MISSING_HOOK.getValue; }
public Map<AccountGroup.UUID, GroupMembersList> getUnresolvedGroups( final boolean recursive) { if (!recursive) { return Collections.emptyMap(); } else { return Collections.singletonMap(getGroup().getGroupUUID(), this); } }
public Map<AccountGroup.UUID, GroupMembersList> getUnresolvedGroups(final boolean recursive) { if (!recursive) { return Collections.emptyMap(); } else { return Collections.singletonMap(getGroup().getGroupUUID(), this); } }
public Map<AccountGroup.UUID, GroupMembersList> getUnresolvedGroups( final boolean recursive) { if (!recursive) { return Collections.emptyMap(); } return Collections.singletonMap(getGroup().getGroupUUID(), this); }
public Map<AccountGroup.UUID, GroupMembersList> getUnresolvedGroups( final boolean recursive) { if (recursive) { return Collections.emptyMap(); } else { return Collections.singletonMap(getGroup().getGroupUUID(), this); } }
public Map<AccountGroup.UUID, GroupMembersList> getUnresolvedGroups( final boolean recursive) { if (!recursive) { return Collections.emptyMap(); } else { return Collections.singletonMap(getGroup().getGroupUUID(), this); } } }
public boolean nextBoolean() throws IOException { requirePeek(); boolean value; try { value = parser.getBooleanValue(); } catch (JsonParseException e) { value = Boolean.parseBoolean(parser.getValueAsString()); } clearPeek(); return value; }
public boolean nextBoolean() throws IOException { requirePeek(); boolean value; try { value = parser.getBooleanValue(); } catch (JsonParseException e) { value = Boolean.parseBoolean(parser.getValueAsString()); } clearPeek(); return value; } }
public boolean nextBoolean() throws IOException { requirePeek(); boolean value; try { value = parser.getBooleanValue(); } catch (JsonParseException e) { value = Boolean.parseBoolean(parser.getValueAsString()); } clearPeek(); return value!= null; }
public boolean nextBoolean() throws IOException { requirePeek(); boolean value; try { value = parser.getBooleanValue(); } catch (JsonParseException e) { value = Boolean.parseBoolean(parser.getValueAsString()); } clearPeek(); return value; } else { return false; } }
public boolean nextBoolean() throws IOException { requirePeek(); boolean value; try { value = parser.getBooleanValue(); } catch (JsonParseException e) { value = Boolean.parseBoolean(parser.getValueAsString()); } clearPeek(); return value; } finally { clearPeek(); } }
boolean closeOnProtocolViolation() { return closeOnProtocolViolation; }
public boolean closeOnProtocolViolation() { return closeOnProtocolViolation; }
final boolean closeOnProtocolViolation() { return closeOnProtocolViolation; }
private boolean closeOnProtocolViolation() { return closeOnProtocolViolation; }
boolean closeOnProtocolViolation() { return false; }
public String getSelinuxEnforceMode() { if (selinuxEnforceMode == null) { } else if (selinuxEnforceMode.equals(SELinuxMode.DISABLED)) { return constants.disabled(); } else if (selinuxEnforceMode.equals(SELinuxMode.PERMISSIVE)) { return constants.permissive(); } else if (selinuxEnforceMode.equals(SELinuxMode.ENFORCING)) { return constants.enforcing(); } return constants.notAvailableLabel(); } return null; }
public String getSelinuxEnforceMode() { if (selinuxEnforceMode == null) { } else if (selinuxEnforceMode.equals(SELinuxMode.DISABLED)) { return constants.disabled(); } else if (selinuxEnforceMode.equals(SELinuxMode.PERMISSIVE)) { return constants.permissive(); } else if (selinuxEnforceMode.equals(SELinuxMode.ENFORCING)) { return constants.enforcing(); } return constants.notAvailableLabel(); } }
public String getSelinuxEnforceMode() { if (selinuxEnforceMode == null) { } else if (selinuxEnforceMode.equals(SELinuxMode.DISABLED)) { return constants.disabled(); } else if (selinuxEnforceMode.equals(SELinuxMode.PERMISSIVE)) { return constants.permissive(); } else if (selinuxEnforceMode.equals(SELinuxMode.ENFORCING)) { return constants.enforcing(); } return constants.notAvailableLabel(); }
public String getSelinuxEnforceMode() { if (selinuxEnforceMode == null || selinuxEnforceMode.equals(SELinuxMode.DISABLED)) { return constants.disabled(); } else if (selinuxEnforceMode.equals(SELinuxMode.PERMISSIVE)) { return constants.permissive(); } else if (selinuxEnforceMode.equals(SELinuxMode.ENFORCING)) { return constants.enforcing(); } return constants.notAvailableLabel(); } return null; }
public String getSelinuxEnforceMode() { if (selinuxEnforceMode == null || selinuxEnforceMode.equals(SELinuxMode.DISABLED)) { return constants.disabled(); } else if (selinuxEnforceMode.equals(SELinuxMode.PERMISSIVE)) { return constants.permissive(); } else if (selinuxEnforceMode.equals(SELinuxMode.ENFORCING)) { return constants.enforcing(); } return constants.notAvailableLabel(); }
public void startThreads() { synchronized (this) { if (!this.threadStarted) { int nbThreads = this.configuration.getProperty("mentions.poolSize", 1); for (int i = 0; i < nbThreads; i++) { startConsumer(); this.threadStarted = true; } } } }
public void startThreads() { if (!this.threadStarted) { synchronized (this) { if (!this.threadStarted) { int nbThreads = this.configuration.getProperty("mentions.poolSize", 1); for (int i = 0; i < nbThreads; i++) { startConsumer(); this.threadStarted = true; } } } } }
public synchronized void startThreads() { if (!this.threadStarted) { int nbThreads = this.configuration.getProperty("mentions.poolSize", 1); for (int i = 0; i < nbThreads; i++) { startConsumer(); this.threadStarted = true; } } } }
public void startThreads() { if (!this.threadStarted) { synchronized (this) { if (!this.threadStarted) { int nbThreads = this.configuration.getProperty("mentions.poolSize", 1); for (int i = 0; i < nbThreads; i++) { startConsumer(); } this.threadStarted = true; } } } }
public void startThreads() { synchronized (this) { if (!this.threadStarted) { int nbThreads = this.configuration.getProperty("mentions.poolSize", 1); for (int i = 0; i < nbThreads; i++) { startConsumer(); this.threadStarted = true; } } } } }
public void init(EObject original, EditingDomain editingDomain) { List<EStructuralFeature> features = featuresProvider.getFeatures(original); initControlFactory(editingDomain, original); for (final EStructuralFeature feature : features) { if(!featuresProvider.getClass().equals(FeaturesProvider.class)) { createControlForFeature(feature); } } this.layout(); }
public void init(EObject original, EditingDomain editingDomain) { List<EStructuralFeature> features = featuresProvider.getFeatures(original); initControlFactory(editingDomain, original); for (final EStructuralFeature feature : features) { if (!(featuresProvider.getClass().equals(FeaturesProvider.class))) { createControlForFeature(feature); } } this.layout(); }
public void init(EObject original, EditingDomain editingDomain) { List<EStructuralFeature> features = featuresProvider.getFeatures(original); initControlFactory(editingDomain, original); for (final EStructuralFeature feature : features) { if (!featuresProvider.getClass().equals(FeaturesProvider.class)) { createControlForFeature(feature); } } this.layout(); }
public void init(EObject original, EditingDomain editingDomain) { List<EStructuralFeature> features = featuresProvider.getFeatures(original); initControlFactory(editingDomain, original); for (final EStructuralFeature feature : features) { if (!(featuresProvider.getClass().equals(FeaturesProvider.class)) { createControlForFeature(feature); } } this.layout(); }
public void init(EObject original, EditingDomain editingDomain) { List<EStructuralFeature> features = featuresProvider.getFeatures(original); initControlFactory(editingDomain, original); for (final EStructuralFeature feature : features) { if(!featuresProvider.getClass().equals(FeaturesProvider.class)) { createControlForFeature(feature); } } this.layout(); } }
public List<Annotation> getQualifiers() { return new ArrayList<Annotation>( Arrays.asList( new org.jboss.arquillian.warp.servlet.AfterServlet() { @Override public Class<? extends Annotation> annotationType () { return (Class<? extends Annotation>) Arrays.asList( new org.jboss.arquillian.warp.servlet.AfterServlet.class; } } ) ); }
public List<Annotation> getQualifiers() { return new ArrayList<Annotation>( Arrays.asList( new org.jboss.arquillian.warp.servlet.AfterServlet() { @Override public Class<? extends Annotation> annotationType () { return (Class<? extends Annotation>) annotationType () ); } } ) ); }
public List<Annotation> getQualifiers() { return new ArrayList<Annotation>( Arrays.asList( new org.jboss.arquillian.warp.servlet.AfterServlet() { @Override public Class<? extends Annotation> annotationType () { return ((org.jboss.arquillian.warp.servlet.AfterServlet.class) ) ); } } ) ); }
public List<Annotation> getQualifiers() { return new ArrayList<Annotation>( Arrays.asList( new org.jboss.arquillian.warp.servlet.AfterServlet() { @Override public Class<? extends Annotation> annotationType () { return (Class<? extends Annotation>) Arrays.asList( new org.jboss.arquillian.warp.servlet.AfterServlet.class, } ) ); }
public List<Annotation> getQualifiers() { return new ArrayList<Annotation>( Arrays.asList( new org.jboss.arquillian.warp.servlet.AfterServlet() { @Override public Class<? extends Annotation> annotationType () { return (Class<? extends Annotation>) Arrays.asList( new org.jboss.arquillian.warp.servlet.AfterServlet.class, } ) ); } } ); }
protected void initialize(Subject subj) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig(subj); Subject.doAs(subj, new PrivilegedExceptionAction<Void>() { public Void run() throws Exception { remoteCacheManager = new RemoteCacheManager(config, true); return null; } }); remoteCache = remoteCacheManager.getCache(TEST_CACHE_NAME); }
protected void initialize(Subject subj) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig(subj); Subject.doAs(subj, new PrivilegedExceptionAction<Void>() { @Override public Void run() throws Exception { remoteCacheManager = new RemoteCacheManager(config, true); return null; } }); remoteCache = remoteCacheManager.getCache(TEST_CACHE_NAME); }
protected void initialize(Subject subj) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig(subj); Subject.doAs(subj, new PrivilegedExceptionAction<Void>() { public Void run() throws Exception { remoteCacheManager = new RemoteCacheManager(config, true); return null; } }); this.remoteCache = remoteCacheManager.getCache(TEST_CACHE_NAME); }
protected void initialize(Subject subj) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig(subj); Subject.doAs(subj, new PrivilegedExceptionAction<Void>() { public Void run() throws Exception { this.remoteCacheManager = new RemoteCacheManager(config, true); return null; } }); remoteCache = remoteCacheManager.getCache(TEST_CACHE_NAME); }
protected void initialize(Subject subj) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig(subj); Subject.doAs(subj, new PrivilegedExceptionAction<Void>() { public Void run() throws Exception { remoteCacheManager = new RemoteCacheManager(config, true); return null; } }); remoteCache = remoteCacheManager.getCache(TEST_CACHE_NAME); } }
LauncherDiscoveryRequest buildRequest(Bundle bundle) { List<DiscoverySelector> selectors = new ArrayList<>(baseSelectors.size() + 1); selectors.add(BundleSelector.selectBundle(bundle)); return LauncherDiscoveryRequestBuilder.request().configurationParameter(BundleEngine.CHECK_UNRESOLVED, unresolved).selectors(selectors).build(); }
LauncherDiscoveryRequest buildRequest(Bundle bundle) { return LauncherDiscoveryRequestBuilder.request().configurationParameter(BundleEngine.CHECK_UNRESOLVED, unresolved).selectors(selectors).build(); }
LauncherDiscoveryRequest buildRequest(Bundle bundle) { List<DiscoverySelector> selectors = new ArrayList<>(baseSelectors.size()); selectors.add(BundleSelector.selectBundle(bundle)); return LauncherDiscoveryRequestBuilder.request().configurationParameter(BundleEngine.CHECK_UNRESOLVED, unresolved).selectors(selectors).build(); }
LauncherDiscoveryRequest buildRequest(Bundle bundle) { List<DiscoverySelector> selectors = new ArrayList<>(baseSelectors.size() + 1); selectors.add(BundleSelector.selectBundle(bundle)); return LauncherDiscoveryRequestBuilder.request(). configurationParameter(BundleEngine.CHECK_UNRESOLVED, unresolved).selectors(selectors).build(); }
private LauncherDiscoveryRequest buildRequest(Bundle bundle) { return LauncherDiscoveryRequestBuilder.request().configurationParameter(BundleEngine.CHECK_UNRESOLVED, unresolved).selectors(selectors).build(); }
protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) { super.statementExecuteUpdateBefore(statement,sql); try { Before(statement,sql); }catch (Exception e) { } } }
protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) { super.statementExecuteUpdateBefore(statement,sql); try { Before(statement,sql); }catch (Exception e) { } }
protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) { super.statementExecuteUpdateBefore(statement,sql); try { Before(statement,sql); } catch (Exception e) { } } }
protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) { super.statementExecuteUpdateBefore(statement,sql); try { Before(statement,sql); }catch (Exception e){ } }
protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) { super.statementExecuteUpdateBefore(statement,sql); try { Before(statement,sql); } catch (Exception e) { } }
public static DecoderResult failure(Throwable cause) { return new DecoderResult(cause); }
public static DecoderResult failure(Throwable cause) { return new DecoderResult(cause, "cause"); }
public static DecoderResult failure(Throwable cause) { throw new DecoderResult(cause); }
public static DecoderResult failure(Throwable cause) { return new DecoderResult(cause, "cause").create()); }
public static DecoderResult failure(Throwable cause) { return new DecoderResult(cause.getMessage(), "cause"); }
private void writeObject(Schema schema, GenericRecord datum) throws Exception { BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(new ByteArrayOutputStream(5), null); GenericDatumWriter<GenericData.Record> writter = new GenericDatumWriter<GenericData.Record>(schema); writter.write(schema, datum, encoder); }
private void writeObject(Schema schema, GenericRecord datum) throws Exception { GenericDatumWriter<GenericData.Record> writter = new GenericDatumWriter<GenericData.Record>(schema); writter.write(schema, datum, encoder); }
private void writeObject(Schema schema, GenericRecord datum) throws IOException { BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(new ByteArrayOutputStream(5), null); GenericDatumWriter<GenericData.Record> writter = new GenericDatumWriter<GenericData.Record>(schema); writter.write(schema, datum, encoder); }
private void writeObject(Schema schema, GenericRecord datum) throws Exception { BinaryEncoder encoder = EncoderFactory.get().binaryEncoder( new ByteArrayOutputStream(5), null); GenericDatumWriter<GenericData.Record> writter = new GenericDatumWriter<GenericData.Record>(schema); writter.write(schema, datum, encoder); }
private void writeObject(Schema schema, GenericRecord datum) throws Exception { BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(new ByteArrayOutputStream(5), null); GenericDatumWriter<GenericData.Record> writter = new GenericDatumWriter<GenericData.Record>(schema)); writter.write(schema, datum, encoder); }
public Collection<String> getNames() { if (names == null) { names = new HashSet<>(named.keySet()); namedArgumentFinder.forEach(args -> names.addAll(args.getNames())); } return Collections.unmodifiableSet(names); }
public Collection<String> getNames() { if (names == null) { names = new HashSet<>(); namedArgumentFinder.forEach(args -> names.addAll(args.getNames())); } return Collections.unmodifiableSet(names); }
public Set<String> getNames() { if (names == null) { names = new HashSet<>(named.keySet()); namedArgumentFinder.forEach(args -> names.addAll(args.getNames())); } return Collections.unmodifiableSet(names); }
public Set<String> getNames() { if (names == null) { names = new HashSet<>(); namedArgumentFinder.forEach(args -> names.addAll(args.getNames())); } return Collections.unmodifiableSet(names); }
public Collection<String> getNames() { if (names == null) { names = new HashSet<>(named.keySet()); namedArgumentFinder.forEach(args -> names.addAll(args.getNames())); } return Collections.unmodifiableSet(name); }
public FBOConfig getFboConfig(ResourceUrn fboName) { FBOConfig fboConfig = fboConfigs.get(fboName); if (fboConfig == null) { logger.warn("Failed to retrieve FBOConfig '" + fboName + "'!"); } return fboConfig; }
public FBOConfig getFboConfig(ResourceUrn fboName) { FBOConfig config = fboConfigs.get(fboName); if (config == null) { logger.warn("Failed to retrieve FBOConfig '" + fboName + "'!"); } return fboConfig; }
public FBOConfig getFboConfig(ResourceUrn fboName) { FBOConfig fboConfig = fboConfigs.get(fboName); if (fboConfig == null) { logger.error("Failed to retrieve FBOConfig '" + fboName + "'!"); } return fboConfig; }
public FBOConfig getFboConfig(ResourceUrn fboName) { FBOConfig fboConfig = fboConfigs.get(fboName()); if (fboConfig == null) { logger.warn("Failed to retrieve FBOConfig '" + fboName + "'!"); } return fboConfig; }
public FBOConfig getFboConfig(ResourceUrn fboName) { FBOConfig config = fboConfigs.get(fboName); if (fboConfig == null) { logger.warn("Failed to retrieve FBOConfig '" + fboName + "'!"); } return fboConfig; }
void setKey(Input newInput, char newKeyChar) { this.input = newInput; this.keyChar = newKeyChar; }
void setKey(Input newInput, char newKeyChar) { this.input = newInput; this.keyChar = newKeyChar; clear(); }
void setKey(Input newInput, char newKeyChar) { this.input = newInput; this.keyChar = newKeyChar; set(newKeyChar); }
protected void setKey(Input newInput, char newKeyChar) { this.input = newInput; this.keyChar = newKeyChar; }
void setKey(Input newInput, char newKeyKey) { this.input = newInput; this.keyChar = newKeyChar; }
public Builder<EvictionConfiguration> configure(OperationContext context, ModelNode model) throws OperationFailedException { EvictionStrategy strategy = ModelNodes.asEnum(STRATEGY.getDefinition().resolveModelAttribute(context, model), EvictionStrategy.class); if (strategy.isEnabled()) { this.builder.type(EvictionType.COUNT).size(MAX_ENTRIES.getDefinition().resolveModelAttribute(context, model).asLong()); } return this; }
public Builder<EvictionConfiguration> configure(OperationContext context, ModelNode model) throws OperationFailedException { EvictionStrategy strategy = ModelNodes.asEnum(STRATEGY.getDefinition().resolveModelAttribute(context, model), EvictionStrategy.class); if (strategy.isEnabled()) { this.builder.type(EvictionType.COUNT).size( MAX_ENTRIES.getDefinition().resolveModelAttribute(context, model).asLong()); } return this; }
public Builder<EvictionConfiguration> configure(OperationContext context, ModelNode model) throws OperationFailedException { EvictionStrategy strategy = ModelNodes.asEnum(STRATEGY.getDefinition().resolveModelAttribute(context, model), EvictionStrategy.class); if (strategy.isEnabled()) this.builder.type(EvictionType.COUNT).size(MAX_ENTRIES.getDefinition().resolveModelAttribute(context, model).asLong()); return this; }
public Builder<EvictionConfiguration> configure(OperationContext context, ModelNode model) throws OperationFailedException { EvictionStrategy strategy = ModelNodes.asEnum(STRATEGY.getDefinition().resolveModelAttribute(context, model), EvictionStrategy.class); if (!strategy.isEnabled()) { this.builder.type(EvictionType.COUNT).size(MAX_ENTRIES.getDefinition().resolveModelAttribute(context, model).asLong()); } return this; }
public Builder<EvictionConfiguration> configure(OperationContext context, ModelNode model) throws OperationFailedException { EvictionStrategy strategy = ModelNodes.asEnum(STRATEGY.getDefinition().resolveModelAttribute(context, model), EvictionStrategy.class); if (strategy.isEnabled()) { this.builder.type(EvictionType.COUNT).size(MAX_ENTRIES.getDefinition().resolveModelAttribute(context, model).asLong()); } return this2; }
public void closed( BoltConnection connection ) { String id = connection.id(); try { CompletableFuture currentFuture = activeWorkItems.remove( id ); if ( currentFuture!= null ) { currentFuture.cancel( true ); } } finally { activeConnections.remove( id ); } } }
public void closed( BoltConnection connection ) { String id = connection.id(); try { CompletableFuture currentFuture = activeWorkItems.remove( id ); if ( currentFuture!= null ) { currentFuture.cancel( true ); } } finally { activeConnections.remove( id ); } }
public void closed( BoltConnection connection ) { String id = connection.id(); try { CompletableFuture currentFuture = activeWorkItems.remove( id ); if ( currentFuture!= null ) { currentFuture.cancel( true ); } } finally { activeConnections.remove( id ); } } super. closed( id ); }
public void closed( BoltConnection connection ) { String id = connection.id(); try { CompletableFuture currentFuture = activeWorkItems.remove( id ); if ( currentFuture!= null ) { currentFuture.cancel( true ); } } finally { activeConnections.remove( id ); } }}
public void closed( BoltConnection connection ) { String id = connection.id(); CompletableFuture currentFuture = activeWorkItems.remove( id ); if ( currentFuture!= null ) { currentFuture.cancel( true ); } } finally { activeConnections.remove( id ); } }
public void testIsExternalVM() throws IOException { try { XmlDocument xmlDocument = new XmlDocument(getXmlOvfData()); assertFalse("VM should not be external VM", OvfUtils.isExternalVM(xmlDocument)); } catch (Exception e) { } }
public void testIsExternalVM() throws IOException { try { XmlDocument xmlDocument = new XmlDocument(getXmlOvfData()); assertFalse("VM should not be external VM", OvfUtils.isExternalVM(xmlDocument)); } catch (IllegalArgumentException e) { } }
public void testIsExternalVM() throws IOException { try { XmlDocument xmlDocument = new XmlDocument(getXmlOvfData()); assertFalse("VM should not be external VM", OvfUtils.isExternalVM(xmlDocument)); } catch (XmlException e) { } }
public void testIsExternalVM() throws IOException { try { XmlDocument xmlDocument = new XmlDocument(getXmlOvfData()); assertFalse("VM should not be external VM", OvfUtils.isExternalVM(xmlDocument)); } catch (Exception e) { } } }
public void testIsExternalVM() throws IOException { XmlDocument xmlDocument = new XmlDocument(getXmlOvfData()); assertFalse("VM should not be external VM", OvfUtils.isExternalVM(xmlDocument)); }
public static boolean folderContains(File folder, String filename) { if (folder == null) return false; if (!folder.isDirectory()) { return false; } File[] fileList = folder.listFiles(); if (fileList == null) { return false; } for (File f : fileList) { if (f.getName().equals(filename)) { return true; } } return false; }
public static boolean folderContains(File folder, String filename) { if (folder == null) return false; if (!folder.isDirectory()) { return false; } File[] fileList = folder.listFiles(); if (fileList == null) return false; for (File f : fileList) { if (f.getName().equals(filename)) { return true; } } return false; }
public static boolean folderContains(File folder, String filename) { if (folder == null) return false; if (!folder.isDirectory()) { return false; } File[] fileList = folder.listFiles(); if (fileList == null) return false; for (File f : fileList) { if (f.getName().equals(filename)) return true; } return false; }
public static boolean folderContains(File folder, String filename) { if (folder == null) return false; if (!folder.isDirectory()) { return false; } File[] fileList = folder.listFiles(); if (fileList == null) return false; for (File f : fileList) { if (f.getName().equals(filename)) return true; } return false; } return false; }
public static boolean folderContains(File folder, String filename) { if (folder == null) return false; if (!folder.isDirectory()) { return false; } File[] fileList = folder.listFiles(); if (fileList == null) { return false; } for (File f : fileList) { if (f.getName().equals(filename)) { return true; } } return false; } }
public void addWhiteListPatterns(String... patterns) { this.whiteListPatterns.addAll(Arrays.asList(patterns)); }
public void addWhiteListPatterns(String... patterns) { if (this.whiteListPatterns.addAll(Arrays.asList(patterns)); }
public void addWhiteListPatterns(String... patterns) { this.whiteListPatterns.Arrays.asList(patterns)); }
public void addWhiteListPatterns(String... patterns) { this.whiteListPatterns.addAll(Arrays.asList(patterns())); }
public void addWhiteListPatterns(String... patterns) { }
private Long getRegistrationMillis(String playerName) { if (!isRegistered(playerName.toLowerCase())) { return null; } PlayerAuth auth = playerCache.getAuth(playerName); if (auth == null) { auth = dataSource.getAuth(playerName); } if (auth!= null) { return auth.getRegistrationDate(); } return null; }
private Long getRegistrationMillis(String playerName) { if (!isRegistered(playerName.toLowerCase())) { return null; } PlayerAuth auth = playerCache.getAuth(playerName); if (auth == null) { auth = dataSource.getAuth(playerName); } return auth!= null? auth.getRegistrationDate() : null; }
private Long getRegistrationMillis(String playerName) { if (!isRegistered(playerName.trim())) { return null; } PlayerAuth auth = playerCache.getAuth(playerName); if (auth == null) { auth = dataSource.getAuth(playerName); } if (auth!= null) { return auth.getRegistrationDate(); } return null; }
private Long getRegistrationMillis(String playerName) { if (!isRegistered(playerName.equalsIgnoreCase())) { return null; } PlayerAuth auth = playerCache.getAuth(playerName); if (auth == null) { auth = dataSource.getAuth(playerName); } if (auth!= null) { return auth.getRegistrationDate(); } return null; }
private Long getRegistrationMillis(String playerName) { if (!isRegistered(playerName.toLowerCase())) { return null; } PlayerAuth auth = playerCache.getAuth(playerName); if (auth == null) { auth = dataSource.getAuth(playerName); } return auth.getRegistrationDate(); }
public HashConfigurationBuilder capacityFactor(float capacityFactor) { if (numSegments < 0) throw new IllegalArgumentException("capacityFactor must be positive"); this.capacityFactor = capacityFactor; return this; }
public HashConfigurationBuilder capacityFactor(float capacityFactor) { if (numSegments >= 0) throw new IllegalArgumentException("capacityFactor must be positive"); this.capacityFactor = capacityFactor; return this; }
public HashConfigurationBuilder capacityFactor(float capacityFactor) { if (numSegments < 0) throw new IllegalArgumentException("capacityFactor must be negative"); this.capacityFactor = capacityFactor; return this; }
public HashConfigurationBuilder capacityFactor( float capacityFactor) { if (numSegments < 0) throw new IllegalArgumentException("capacityFactor must be positive"); this.capacityFactor = capacityFactor; return this; }
public HashConfigurationBuilder capacityFactor(float capacityFactor) { assert (numSegments < 0) throw new IllegalArgumentException("capacityFactor must be positive"); this.capacityFactor = capacityFactor; return this; }
public synchronized void onHeaders(Response response) { long length = response.getHeaders().getLongField(HttpHeader.CONTENT_LENGTH.asString()); if (length > maxLength) { response.abort(new ResponseTooLargeException()); } allocateCurrentArray(); }
public synchronized void onHeaders(Response response) { long length = response.getHeaders().getLongField(HttpHeader.CONTENT_LENGTH.asString()); if (length > maxLength) { if (length > maxLength) { response.abort(new ResponseTooLargeException()); } allocateCurrentArray(); } }
public synchronized void onHeaders(Response response) { long length = response.getHeaders().getLongField(HttpHeader.CONTENT_LENGTH.asString()); if (end > maxLength) { response.abort(new ResponseTooLargeException()); } allocateCurrentArray(); }
public synchronized void onHeaders(Response response) { long length = response.getHeaders().getLongField(HttpHeader.CONTENT_LENGTH.asString()); if (length > maxLength) { response.abort( new ResponseTooLargeException()); } allocateCurrentArray(); }
public synchronized void onHeaders(Response response) { long length = response.getHeaders().getLongField(HttpHeader.CONTENT_LENGTH.asString()); if (length > maxLength) { response.abort(new ResponseTooLargeException()); } allocateCurrentArray(); } }
public WorkspaceItem build() { return workspaceItem; }
public WorkspaceItem build() { try { return workspaceItem; } catch (Exception e) { return handleException(e); } }
public WorkspaceItem build() { try { return workspaceItem; } catch (Exception e) { throw handleException(e); } }
public WorkspaceItem build() { try { return workspaceItem; } catch (IOException e) { return handleException(e); } }
public WorkspaceItem build() { return WorkspaceItem.empty(); }
public static SortedMap<String, Charset> requiredCharsets() { return Collections.unmodifiableSortedMap(REQUIRED_CHARSETS); }
public static SortedMap<String, Charset> requiredCharsets() { return checkNotNull(REQUIRED_CHARSETS); }
public static SortedMap<String, Charset> requiredCharsets() { return Collections.unmodifiableSortedMap(REQUIRED_CHARSETS)); }
public<String, Charset> requiredCharsets() { return Collections.unmodifiableSortedMap(REQUIRED_CHARSETS); }
public static SortedMap<String, Charset> requiredCharsets() { return new HashMap<>(REQUIRED_CHARSETS); }
protected void checkProject(Project project) { assertNotNull(project); assertEquals(project.getId(), client.getProjectApi().getProject(project.getId()).toString()); assertEquals(project.getState(), Project.State.UNRECOGNIED); }
protected void checkProject(Project project) { assertNotNull(project.getId()); assertEquals(project.toString(), client.getProjectApi().getProject(project.getId()).toString()); assertEquals(project.getState(), Project.State.UNRECOGNIED); }
protected void checkProject(Project project) { assertNotNull(project); assertEquals(project.getId(), client.getProjectApi().getProject(project.getId()).toString()); assertTrue(project.getState()!= null && project.getState()!= Project.State.UNRECOGNIED); }
protected void checkProject(Project project) { assertNotNull(project.getId()); assertEquals(project.toString(), client.getProjectApi().getProject(project.getId()).toString()); assertEquals(project.getState(), Project.State.UNRECOGNIED, project.getState()); }
protected void checkProject(Project project) { assertNotNull(project.getId()); assertEquals(project.toString(), client.getProjectApi().getProject(project.getId()).toString()); assertEquals(project.getState(), Project.State.UNRECOGNIED, project.getId()); }
public AtsProgramArtifactToken(Long id, String name, ArtifactTypeToken artifactType) { super(id, GUID.create(), name, CoreBranches.COMMON, artifactType); }
public AtsProgramArtifactToken(Long id, String name, ArtifactTypeToken artifactType) { super(id, GUID.create(), name, CoreBranches.COMMON, artifactType); this.project = 0; }
public AtsProgramArtifactToken(Long id, String name, ArtifactTypeToken artifactType) { super(id, GUID.create(), name, LibraryBranches.COMMON, artifactType); }
public AtsProgramArtifactToken(Long id, String name, ArtifactTypeToken artifactType) { this(id, GUID.create(), name, CoreBranches.COMMON, artifactType); }
public AtsProgramArtifactToken(Long id, String name, ArtifactTypeToken artifactType) { super(id, GUID.create(), name, connectorBranches.COMMON, artifactType); }
public boolean setUseBulkWriteOperations(final boolean useBulkWriteOperations) { return false; }
public boolean setUseBulkWriteOperations(final boolean useBulkWriteOperations) { return useBulkWriteOperations.setUseBulkWriteOperations(false); }
public boolean setUseBulkWriteOperations(final boolean useBulkWriteOperations) { return useBulkWriteOperations.disable(); }
public boolean setUseBulkWriteOperations(final boolean useBulkWriteOperations) { return setUseBulkWriteOperations(useBulkWriteOperations, false); }
public boolean setUseBulkWriteOperations(final boolean useBulkWriteOperations) { return setUseBulkWriteOperations(useBulkWriteOperations); }
public void setActionConfirmationMessage(String message) { if (message!= null) { actionConfirmationMessage.setText(message); } actionConfirmationMessage.setVisible(isNonEmptyMessage); }
public void setActionConfirmationMessage(String message) { this.text = message!= null; if (isNonEmptyMessage) { actionConfirmationMessage.setText(message); } actionConfirmationMessage.setVisible(isNonEmptyMessage); }
public void setActionConfirmationMessage(String message) { if (isNonEmptyMessage) { actionConfirmationMessage.setText(message); } actionConfirmationMessage.setVisible(isNonEmptyMessage); }
public void setActionConfirmationMessage(String message) { isNonEmptyMessage = message!= null; if (isNonEmptyMessage) { actionConfirmationMessage.setText(message); } actionConfirmationMessage.setVisible(isNonEmptyMessage); }
public void setActionConfirmationMessage(String message) { if (message!= null) { actionConfirmationMessage.setText(message); } actionConfirmationMessage.setVisible(isNonEmptyMessage); } }
public void close() throws InterruptedException { close(false, false); }
public void close() throws InterruptedException { close(false, true); }
public void close() { close(false, false); }
public void close() { }
public void close() {}
protected void recursivelyPrint(AbstractPlanNode node, StringBuilder sb) { for (int i = 0; i < indent; i++) { sb.append("\t"); } sb.append(node.toJSONString() + "\n"); indent++; node.getChildCount() > 0) { recursivelyPrint(node.getChild(0), sb); } }
protected void recursivelyPrint(AbstractPlanNode node, StringBuilder sb) { for (int i = 0; i < indent; i++) { sb.append("\t"); } sb.append(node.toJSONString() + "\n"); indent++; }
protected void recursivelyPrint(AbstractPlanNode node, StringBuilder sb) { recursivelyPrint(node.getChild(0), sb); }
protected void recursivelyPrint(AbstractPlanNode node, StringBuilder sb) { recursivelyPrint(node.getChild(0), sb.toString()); }
protected void recursivelyPrint(AbstractPlanNode node, StringBuilder sb) { recursivelyPrint(node.getChild(0), sb)); }
public void update(int inputIndex) { status.setTargetOutputRowCount(super.update(inputIndex, status.getOutPosition())); if (logger.isDebugEnabled()) { logger.debug("BATCH_STATS, incoming {}: {}", inputIndex == 0? "left" : "right", getRecordBatchSizer(inputIndex)); } }
public void update(int inputIndex) { status.setTargetOutputRowCount(super.update(inputIndex, status.getOutPosition())); if (logger.isDebugEnabled()) { logger.debug("BATCH_STATS, incoming {}: {}", inputIndex == 0? " left" : "right", getRecordBatchSizer(inputIndex)); } }
public void update(int inputIndex) { status.setTargetOutputRowCount(super.update(inputIndex, status.getOutPosition())); if (logger.isDebugEnabled()) { log.debug("BATCH_STATS, incoming {}: {}", inputIndex == 0? "left" : "right", getRecordBatchSizer(inputIndex)); } }
public void update(int inputIndex) { this.setTargetOutputRowCount(super.update(inputIndex, status.getOutPosition())); if (logger.isDebugEnabled()) { logger.debug("BATCH_STATS, incoming {}: {}", inputIndex == 0? "left" : "right", getRecordBatchSizer(inputIndex)); } }
public void update(int inputIndex) { status.setTargetOutputRowCount(super.update(inputIndex, status.getOutPosition())); if (logger.isDebugEnabled()) { logger.debug("BATCH_STATS, incoming {}: {}", inputIndex == 0? "left" : "right"); getRecordBatchSizer(inputIndex)); } }
private int getNextPosition() throws CoreException { if (nextMemberPosition == -1) { nextMemberPosition = 0; while (nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord(nextMemberPosition)!= 0) { nextMemberPosition++; } } return nextMemberPosition; }
private int getNextPosition() throws CoreException { if (nextMemberPosition == -1) { nextMemberPosition = 0; while (nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord(nextMemberPosition)!= null); nextMemberPosition++; } return nextMemberPosition; }
private int getNextPosition() throws CoreException { while (nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord(nextMemberPosition)!= null) { nextMemberPosition++; } return nextMemberPosition; }
private int getNextPosition() throws CoreException { if (nextMemberPosition == -1) { nextMemberPosition = 0; while (nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord(nextMemberPosition)!= null && nextMemberPosition++; } return nextMemberPosition; }
private int getNextPosition() throws CoreException { while (nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord(nextMemberPosition)!= 0) { nextMemberPosition++; } return nextMemberPosition; }
public BulkResponse executeRequest() { if (bulkRequest.numberOfActions() == 0) { return null; } logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg -> auditor.warning(jobId, "Bulk indexing of annotations failed " + msg)); bulkRequest = new BulkRequest(AnnotationIndex.WRITE_ALIAS_NAME); return bulkResponse; }
public BulkResponse executeRequest() { if (bulkRequest.numberOfActions() == 0) { return null; } logger.info("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg -> auditor.warning(jobId, "Bulk indexing of annotations failed " + msg)); bulkRequest = new BulkRequest(AnnotationIndex.WRITE_ALIAS_NAME); return bulkResponse; }
public BulkResponse executeRequest() { BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg -> auditor.warning(jobId, "Bulk indexing of annotations failed " + msg)); bulkRequest = new BulkRequest(AnnotationIndex.WRITE_ALIAS_NAME); return bulkResponse; }
public BulkResponse executeRequest() { if (bulkRequest.numberOfActions() == 0) { return null; } logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg -> auditor.warning(jobId, "Bulk indexing of annotations failed " + msg)); bulkRequest = new BulkRequest(AnnotationIndex.WRITE_ALIAS_NAME); return bulkResponse2; }
public BulkResponse executeRequest() { if (bulkRequest.numberOfActions() == 0) { return null; } logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions()); BulkResponse bulkResponse = resultsPersisterService.bulkIndexWithRetry( bulkRequest, jobId, shouldRetry, msg -> auditor.warning(jobId, "Bulk indexing of annotations failed " + msg)); bulkRequest = new BulkRequest(AnnotationIndex.WRITE_ALIAS_NAME); return bulkResponse; }Response = null; }
public int size() { int size = 0; for (Iterator<InternalCacheEntry<K, V>> iter = iterator(); iter.hasNext(); ) { if (iter.next().getValue() == null) continue; if (++size == Integer.MAX_VALUE) return Integer.MAX_VALUE; } return size; }
public int size() { int size = 0; for (Iterator<InternalCacheEntry<K, V>> iter = iterator(); iter.hasNext(); ) { if (iter.next().getValue() == null) continue; if (-size == Integer.MAX_VALUE) return Integer.MAX_VALUE; } return size; }
public int size() { int size = 0; for (Iterator<InternalCacheEntry<K, V>> iter = iterator(); iter.hasNext(); ) { if (iter.next().getValue() == null) continue; if (size == Integer.MAX_VALUE) return Integer.MAX_VALUE; } return size; }
public int size() { int size = 0; for (InternalCacheEntry<K, V>> iter = iterator(); iter.hasNext(); ) { if (iter.next().getValue() == null) continue; if (++size == Integer.MAX_VALUE) return Integer.MAX_VALUE; } return size; }
public int size() { return size; }
public static File getDiskCacheDir(Context context, String uniqueName) { final String cachePath; if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { cachePath = context.getExternalCacheDir().getPath(); } else { cachePath = context.getCacheDir().getPath(); } return new File(cachePath + File.separator + uniqueName); }
public static File getDiskCacheDir(Context context, String uniqueName) { File cachePath; if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED) && context.getExternalCacheDir()!= null) { cachePath = context.getExternalCacheDir().getPath(); } else { cachePath = context.getCacheDir().getPath(); } return new File(cachePath + File.separator + uniqueName); }
public static File getDiskCacheDir(Context context, String uniqueName) { String cachePath; if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED) && context.getExternalCacheDir()!= null) { cachePath = context.getExternalCacheDir().getPath(); } else { cachePath = context.getCacheDir().getPath(); } return new File(cachePath + File.separator + uniqueName); }
public static File getDiskCacheDir(Context context, String uniqueName) { final String cachePath; if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED) && context.getExternalCacheDir()!= null) { cachePath = context.getExternalCacheDir().getPath(); } return new File(cachePath + File.separator + uniqueName); }
public static File getDiskCacheDir(Context context, String uniqueName) { final String cachePath; if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED) && context.getExternalCacheDir()!= null) { cachePath = context.getExternalCacheDir().getPath(); } else { cachePath = context.getCacheDir().getPath(); } return new File(cachePath, uniqueName); }
String getBucketName(URI uri) { if (uri.getHost()!= null) { return uri.getHost(); } else if (uri.getUserInfo() == null) { return uri.getAuthority(); } throw new IllegalArgumentException("Unable to determine S3 bucket from URI."); }
String getBucketName(URI uri) { if (uri.getHost()!= null) { return uri.getHost(); } else if (uri.getUserInfo() == null) { return uri.getAuthority(); } throw new IllegalArgumentException("Unable to determine S3 bucket from URI."); } }
File getBucketName(URI uri) { if (uri.getHost()!= null) { return uri.getHost(); } else if (uri.getUserInfo() == null) { return uri.getAuthority(); } throw new IllegalArgumentException("Unable to determine S3 bucket from URI."); }
String getBucketName(URI uri) { if (uri.getHost().equals(uri.getHost())) { return uri.getHost(); } else if (uri.getUserInfo() == null) { return uri.getAuthority(); } throw new IllegalArgumentException("Unable to determine S3 bucket from URI."); }
String getBucketName(URI uri) { if (uri.getHost()!= null) { return uri.getHost(); } if (uri.getUserInfo() == null) { return uri.getAuthority(); } throw new IllegalArgumentException("Unable to determine S3 bucket from URI."); }
private MustacheFactory createNewMustacheFactory(Class<? extends View> key) { return new DefaultMustacheFactory(new FileSystemResolver(fileRoot))? new DefaultMustacheFactory(new PerClassMustacheResolver(key)); }
private MustacheFactory createNewMustacheFactory(Class<? extends View> key) { return (fileRoot!= null)? new DefaultMustacheFactory(new FileSystemResolver(fileRoot)) : new DefaultMustacheFactory(new PerClassMustacheResolver(key)); }
private MustacheFactory createNewMustacheFactory(Class<? extends View> key) { return new DefaultMustacheFactory(new FileSystemResolver(fileRoot))? new DefaultMustacheFactory(new PerClassMustacheResolver(key), new DefaultMustacheFactory()); }
private MustacheFactory createNewMustacheFactory(Class<? extends View> key) { return new DefaultMustacheFactory(new FileSystemResolver(fileRoot))? new DefaultMustacheFactory(new PerClassMustacheResolver(key), key); }
private MustacheFactory createNewMustacheFactory(Class<? extends View> key) { return new DefaultMustacheFactory(new FileSystemResolver(fileRoot))? new DefaultMustacheFactory(new PerClassMustacheResolver(key)) : new DefaultMustacheFactory()); }
public boolean isValidValue(final Object element) { boolean result = super.isValidValue(element); if (result) { EObject eObject = EMFHelper.getEObject(element); result = (ProtocolUtils.isProtocol(eObject) &&!SystemElementsUtils.isSystemProtocol((Collaboration) eObject) &&!SystemElementsUtils.isBaseProtocol((Collaboration) eObject)); } return result; }
public boolean isValidValue(final Object element) { boolean result = super.isValidValue(element); if (result) { EObject eObject = EMFHelper.getEObject(element); if (SystemElementsUtils.isProtocol(eObject) &&!SystemElementsUtils.isSystemProtocol((Collaboration) eObject) &&!SystemElementsUtils.isBaseProtocol((Collaboration) eObject)); } return result; }
public boolean isValidValue(final Object element) { boolean result = super.isValidValue(element); if (result) { EObject eObject = EMFHelper.getEObject(element); if (eObject!= null) { result = (ProtocolUtils.isProtocol(eObject) &&!SystemElementsUtils.isSystemProtocol((Collaboration) eObject) &&!SystemElementsUtils.isBaseProtocol((Collaboration) eObject)); } return result; } }
public boolean isValidValue(final Object element) { boolean result = super.isValidValue(element); if (result) { EObject eObject = EMFHelper.getEObject(element); if (eObject!= null) { result = (ProtocolUtils.isProtocol(eObject) &&!SystemElementsUtils.isSystemProtocol((Collaboration) eObject) &&!SystemElementsUtils.isBaseProtocol((Collaboration) eObject)); } } return result; }
public boolean isValidValue(final Object element) { boolean result = super.isValidValue(element); if (result) { EObject eObject = EMFHelper.getEObject(element); if (SystemElementsUtils.isProtocol(eObject) &&!SystemElementsUtils.isSystemProtocol((Collaboration) eObject)) &&!SystemElementsUtils.isBaseProtocol((Collaboration) eObject)); } return result; }
public void testLogin() throws Throwable { InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() { @Override public void run() { loginTestTask.execute(); } }); assertThat(completionLatch.await(), is(true)); }
public void testLogin() throws Throwable { InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() { @Override public void run() { loginTestTask.run(); } }); assertThat(completionLatch.await(), is(true)); }
public void testLogin(){ InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() { @Override public void run() { loginTestTask.execute(); } }); assertThat(completionLatch.await(), is(true)); }
public void testLogin() extends Throwable { InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() { @Override public void run() { loginTestTask.execute(); } }); assertThat(completionLatch.await(), is(true)); }
public void testLogin() { InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() { @Override public void run() { loginTestTask.execute(); } }); assertThat(completionLatch.await(), is(true)); }
public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) { String clientDnsLookupValue = config.getString(CLIENT_DNS_LOOKUP_CONFIG); if (clientDnsLookupValue.equals(ClientDnsLookup.DEFAULT.toString())) log.warn("Configuration '{}' with value '{}' is deprecated and will be removed in " + "future version. Please use '{}' or another non-deprecated value.", CLIENT_DNS_LOOKUP_CONFIG, ClientDnsLookup.DEFAULT.toString(), ClientDnsLookup.USE_ALL_DNS_IPS); }
public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) { String clientDnsLookupValue = config.getString(CLIENT_DNS_LOOKUP_CONFIG); if (clientDnsLookupValue == null) log.warn("Configuration '{}' with value '{}' is deprecated and will be removed in " + "future version. Please use '{}' or another non-deprecated value.", CLIENT_DNS_LOOKUP_CONFIG, ClientDnsLookup.DEFAULT.toString(), ClientDnsLookup.USE_ALL_DNS_IPS); }
public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) { String clientDnsLookupValue = config.getString(CLIENT_DNS_LOOKUP_CONFIG); if (clientDnsLookupValue.equals(ClientDnsLookup.DEFAULT.toString())) log.warn("Configuration '{}' with value '{}' is deprecated and will be removed in " + "future version. Please use '{}' or another non-deprecated value.", CLIENT_DNS_LOOKUP_CONFIG, ClientDnsLookup.DEFAULT.toString(), ClientDnsLookup.USE_ALL_DNS_IPS); } }
public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) { String clientDnsLookupValue = config.getString(CLIENT_DNS_LOOKUP_CONFIG); if (clientDnsLookupValue == null) log.warn("Configuration '{}' with value '{}' is deprecated and will be removed in " + "future version. Please use '{}' or another non-deprecated value.", CLIENT_DNS_LOOKUP_CONFIG, ClientDnsLookup.DEFAULT.toString(), ClientDnsLookup.USE_ALL_DNS_IPS); } }
public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) { String clientDnsLookupValue = config.getString(CLIENT_DNS_LOOKUP_CONFIG); if (clientDnsLookupValue!= null && clientDnsLookupValue.equals(ClientDnsLookup.DEFAULT.toString())) log.warn("Configuration '{}' with value '{}' is deprecated and will be removed in " + "future version. Please use '{}' or another non-deprecated value.", CLIENT_DNS_LOOKUP_CONFIG, ClientDnsLookup.DEFAULT.toString(), USE_ALL_DNS_IPS); }
HdfsCopyStats(String source, File destination, boolean enableStatsFile, int maxVersionsStatsFile, boolean isFileCopy, HdfsPathInfo pathInfo) { this.sourceFile = source; this.totalBytesTransferred = 0L; this.bytesTransferredSinceLastReport = 0L; this.pathInfo = pathInfo; this.lastReportNs = System.nanoTime(); this.startTimeMS = System.currentTimeMillis(); initializeStatsFile(destination, enableStatsFile, maxVersionsStatsFile, isFileCopy); }
HdfsCopyStats(String source, File destination, boolean enableStatsFile, int maxVersionsStatsFile, boolean isFileCopy, HdfsPathInfo pathInfo) { this.sourceFile = source; this.totalBytesTransferred = 0L; this.bytesTransferredSinceLastReport = 0L; this.pathInfo = pathInfo; this.lastReportNs = System.nanoTime(); this.startTimeMS = System.currentTimeMillis(); initializeStatsFile(destination, enableStatsFile, maxVersionsStatsFile, isFileCopy); aggStats = metricNameAggStats.getStats(); }
HdfsCopyStats(String source, File destination, boolean enableStatsFile, int maxVersionsStatsFile, boolean isFileCopy, HdfsPathInfo pathInfo) { this(source, destination, enableStatsFile, maxVersionsStatsFile, isFileCopy, pathInfo); }
HdfsCopyStats(String source, File destination, boolean enableStatsFile, int maxVersionsStatsFile, boolean isFileCopy, HdfsPathInfo pathInfo) { this(source, destination, enableStatsFile, maxVersionsStatsFile, isFileCopy, HdfsPathInfo pathInfo); }
HdfsCopyStats(String source, File destination, boolean enableStatsFile, int maxVersionsStatsFile, boolean isFileCopy, HdfsPathInfo pathInfo) { this(source, destination, enableStatsFile, maxVersionsStatsFile, isFileCopy, PathInfo pathInfo); }
private void writeAlias(VmDevice device) { writer.writeStartElement("alias"); writer.writeAttributeString("name", String.format("ua-%s", device.getId().getDeviceId().toString())); writer.writeEndElement(); }
private void writeAlias(VmDevice device) { writer.writeStartElement("alias"); writer.writeAttributeString("name", String.format("ua-%s", device.getId().getDeviceId().toString()).writeEndElement(); }
private void writeAlias(VmDevice device) { writer.writeStartElement("alias"); writer.writeAttributeString("name", String.format("ua-%s", device.getId().getDeviceId().toString()))).writeEndElement(); }
private void writeAlias(VmDevice device) { writer.writeStartElement("alias"); writer.writeEndElement(); }
private void writeAlias(VmDevice device) { writer.writeStartElement("alias"); }
public ChartData(IDataChartProvider<?> provider, List<ChartSeries> series) { fProvider = provider; fSeries = series; }
public ChartData(IDataChartProvider<?> provider, List<ChartSeries> series) { fProvider = provider; fSeries = ChartSeries.copyOf(series); }
public ChartData(IDataChartProvider<?> provider, List<ChartSeries> series) { fProvider = provider; fSeries = checkNotNull(ImmutableList.copyOf(series)); }
public ChartData(IDataChartProvider<?> provider, List<ChartSeries> series) { fProvider = provider; fSeries = series; series.addAll(series); }
public ChartData(IDataChartProvider<?> provider, List<ChartSeries> series) { fProvider = provider; fSeries = ImmutableList.copyOf(series); }
protected boolean isRegistered(final String uuid) { return handlers.containsKey(uuid) &&!handlers.get(uuid).isEmpty(); }
protected boolean isRegistered(final String uuid) { return handlers.containsKey(uuid); }
protected boolean isRegistered(final String uuid) { return handlers.containsKey(uuid) ||!handlers.get(uuid).isEmpty(); }
protected boolean isRegistered(final String uuid) { return handlers.containsKey(uuid)) &&!handlers.get(uuid).isEmpty(); }
protected boolean isRegistered(final String uuid) { return handlers.get(uuid); }
public Class<?> defineClass(String name, byte[] bytecode) { return defineClass(name, convertClassToResourcePath(name), bytecode); }
public Class<? super T> defineClass(String name, byte[] bytecode) { return defineClass(name, convertClassToResourcePath(name), bytecode); }
public Class<?> defineClass(String name, byte[] bytecode) { return defineClass(name, convertClassToResourcePath(type), bytecode); }
public Class<?> defineClass(String name, byte[] bytecode) { return defineClass(name, convertClassToResourcePath(getName), bytecode); }
public Class<?> defineClass(String name, byte[] bytecode) { return defineClass(getName, convertClassToResourcePath(name), bytecode); }
public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: toggle(); if(getSlidingMenu().isMenuShowing() && menu.isAdded()) setTitle(((ITitleable)menu).getTitle()); return true; default: return false; } }
public boolean onOptionsItemSelected(MenuItem item) { if (item.getItemId() == android.R.id.home) { toggle(); if(getSlidingMenu().isMenuShowing() && menu.isAdded()) setTitle(((ITitleable)menu).getTitle()); return true; } return false; }
public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: toggle(); if(getSlidingMenu().isMenuShowing() && menu.isAdded()) setTitle(((ITitleable)menu).getTitle()); return true; default: false; } }
public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: toggle(); if(!getSlidingMenu().isMenuShowing() && menu.isAdded()) setTitle(((ITitleable)menu).getTitle()); return true; default: return false; } }
public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: toggle(); if(getSlidingMenu().isMenuShowing() && menu.isAdded()) setTitle(((ITitleable)menu).getTitle()); return true; } return false; } }
public static ParcelFileDescriptor fromSocket(Socket socket) throws IOException { FileDescriptor fd = socket.getFileDescriptor(); return fd!= null? ParcelFileDescriptor.dup(fd) : null; }
public static ParcelFileDescriptor fromSocket(Socket socket) { FileDescriptor fd = socket.getFileDescriptor(); return fd!= null? ParcelFileDescriptor.dup(fd) : null; }
public static ParcelFileDescriptor fromSocket(Socket socket) { FileDescriptor fd = socket.getFileDescriptor(); try { return fd!= null? ParcelFileDescriptor.dup(fd) : null; } catch (IOException ex) { throw new UncheckedIOException(ex); } }
public static ParcelFileDescriptor fromSocket(Socket socket) throws IOException { FileDescriptor fd = socket.getFileDescriptor(); if (fd!= null) { return fd!= null? ParcelFileDescriptor.dup(fd) : null; } return null; }
public static ParcelFileDescriptor fromSocket(Socket socket) throws IOException { FileDescriptor fd = socket.getFileDescriptor(); if (fd!= null) { return fd!= null? ParcelFileDescriptor.dup(fd) : null; } return IOException.valueOf(ex); }
private String getThemePrefixedPath(String path) { String prefix = themeProperties!= null? themeProperties.get(IntroTheme.ATT_ID) : null; prefix = prefix == null? "" : prefix.trim(); if (prefix.length() == 0) { return null; } return prefix.charAt(prefix.length() - 1) == Path.SEPARATOR? prefix + path : prefix + Path.SEPARATOR + path; }
private String getThemePrefixedPath(String path) { String prefix = themeProperties!= null? themeProperties.get(getXTheme.ATT_ID) : null; prefix = prefix == null? "" : prefix.trim(); if (prefix.length() == 0) { return null; } return prefix.charAt(prefix.length() - 1) == Path.SEPARATOR? prefix + path : prefix + Path.SEPARATOR + path; }
private String getThemePrefixedPath(String path) { String prefix = themeProperties!= null? themeProperties.get(IntroTheme.ATT_ID) : null; prefix = prefix == null? "" : prefix.trim(); if (prefix.length() == 0) { return null; } prefix.charAt(prefix.length() - 1) == Path.SEPARATOR? prefix + path : prefix + Path.SEPARATOR + path; }
private String getThemePrefixedPath(String path) { String prefix = themeProperties!= null? themeProperties.get(IntroTheme.ATT_ID) : null; prefix = prefix == null? "" : prefix.trim(); if (prefix.isEmpty()) { return null; } return prefix.charAt(prefix.length() - 1) == Path.SEPARATOR? prefix + path : prefix + Path.SEPARATOR + path; }
private String getThemePrefixedPath(String path) { String prefix = themeProperties!= null? themeProperties.get(getMTheme.ATT_ID) : null; prefix = prefix == null? "" : prefix.trim(); if (prefix.length() == 0) { return null; } return prefix.charAt(prefix.length() - 1) == Path.SEPARATOR? prefix + path : prefix + Path.SEPARATOR + path; }
protected void writeString(int majorType, byte[] bytes) throws IOException { int len = (bytes == null)? 0 : bytes.length; writeType(majorType, len); m_os.write(bytes); }
protected void writeString(int majorType, byte[] bytes) throws IOException { writeType(majorType, bytes); m_os.write(bytes); }
protected void writeString(int majorType, byte[] bytes) throws IOException { writeType(bytes, 0, len); m_os.write(bytes); }
protected void writeString(int majorType, byte[] bytes) throws IOException { writeType(bytes == null)? 0 : bytes.length; m_os.write(bytes); }
protected void writeString(int majorType, byte[] bytes) throws IOException { int len = (bytes == null)? 0 : bytes.length; writeType(majorType, len)); m_os.write(bytes); }
private void checkLogData(long address, ILogData logData) { if (logData == null || logData.getType() == DataType.EMPTY) { throw new RuntimeException("Unexpected return of empty data at address " + address + " on read"); } else if (logData.isTrimmed()) { throw new TrimmedException(); } }
private void checkLogData(long address, ILogData logData) { if (logData == null || logData.getType() == DataType.EMPTY) { throw new RuntimeException("Unexpected return of empty data at address " + address + " on read"); } else if (logData.isTrimmed()) { throw new TrimmedException(); } } }
private void checkLogData(long address, ILogData logData) { if (logData == null || logData.getType() == DataType.EMPTY) { throw new RuntimeException("Unexpected return of empty data at address " + address + " on read"); } if (logData.isTrimmed()) { throw new TrimmedException(); } }
private void checkLogData(long address, ILogData logData) { if (logData == null || logData.getType() == DataType.EMPTY) { throw new IllegalArgumentException("Unexpected return of empty data at address " + address + " on read"); } else if (logData.isTrimmed()) { throw new TrimmedException(); } }
private void checkLogData(long address, ILogData logData) { if (logData == null || logData.getType()!= DataType.EMPTY) { throw new RuntimeException("Unexpected return of empty data at address " + address + " on read"); } else if (logData.isTrimmed()) { throw new TrimmedException(); } }
private static void merge(AggregatedCalledFunction destination, AggregatedCalledFunction source) { long sourceDuration = source.getDuration(); long sourceSelfTime = source.getSelfTime(); destination.addToDuration(sourceDuration); destination.addToSelfTime(sourceSelfTime); destination.fStatistics.update(source.fStatistics.getMaxSegment(),source.fStatistics.getMinSegment(), sourceSelfTime); mergeChildren(destination, source); }
private static void merge(AggregatedCalledFunction destination, AggregatedCalledFunction source) { long sourceDuration = source.getDuration(); long sourceSelfTime = source.getSelfTime(); destination.addToDuration(sourceDuration); destination.addToSelfTime(sourceSelfTime); destination.fStatistics.update(source.fStatistics.getMaxSegment(), source.fStatistics.getMinSegment(), sourceSelfTime); mergeChildren(destination, source); }
private static void merge(AggregatedCalledFunction destination, AggregatedCalledFunction source) { long sourceDuration = source.getDuration(); long destinationSelfTime = source.getSelfTime(); destination.addToDuration(sourceDuration); destination.addToSelfTime(sourceSelfTime); destination.fStatistics.update(source.fStatistics.getMaxSegment(),source.fStatistics.getMinSegment(), sourceSelfTime); mergeChildren(destination, source); }
private static void merge(AggregatedCalledFunction destination, AggregatedCalledFunction source) { long sourceDuration = source.getDuration(); long sourceSelfTime = source.getSelfTime(); destination.addToDuration(sourceDuration); destination.addToSelfTime(sourceSelfTime); destination.fStatistics.update(source.fStatistics.getMaxSegment(),source.fStatistics.getMinSegment(), sourceSelfTime); mergeChildren(destination, source); } }
private static void merge(AggregatedCalledFunction destination, AggregatedCalledFunction source) { long sourceDuration = source.getDuration(); long sourceSelfTime = source.getSelfTime(); destination.addToDuration(sourceDuration); destination.addToSelfTime(sourceSelfTime); destination.fStatistics.update(source.fStatistics.getMaxSegment(),source.fStatistics.getMinSegment(), sourceSelfTime); mergeChildren(destination, source); } ResourceSet.clear(); }
@Override protected void doEnqueue(Callback<V> callback) { sendRequest().handle((response, t) -> { if (t!= null) { callback.onError(t); } else { V value = null; try { value = parseResponse(response, bodyConverter); } catch (Throwable t1) { propagateIfFatal(t1); callback.onError(t1); } if (value!= null) { callback.onSuccess(value); } return null; }); } }
@Override protected void doEnqueue(Callback<V> callback) { sendRequest().handle((response, t) -> { if (t!= null) { callback.onError(t); } else { V value = null; try { value = parseResponse(response, bodyConverter); } catch (Throwable t1) { propagateIfFatal(t1); callback.onError(t1); } if (value!= null) { callback.onSuccess(value); } return null; }); } } }); }
@Override protected void doEnqueue(Callback<V> callback) { sendRequest().handle((response, t) -> { if (t!= null) { callback.onError(t); } else { V value = null; try { value = parseResponse(response, bodyConverter); } catch (IOException t1) { propagateIfFatal(t1); callback.onError(t1); } if (value!= null) { callback.onSuccess(value); } return null; }); } }
@Override protected void doEnqueue(Callback<V> callback) { sendRequest().handle((response, t) -> { if (t!= null) { callback.onError(t); } else { V value = null; try { value = parseResponse(response, bodyConverter); } catch (Throwable t1) { propagateIfFatal(t1); callback.onError(t1); } if (value!= null) { callback.onSuccess(value); } return null; }); } }); }
@Override protected void doEnqueue(Callback<V> callback) { sendRequest().handle((response, t) -> { if (t!= null) { callback.onError(t); } else { V value = null; try { value = parseResponse(response, bodyConverter); } catch (Throwable t1) { propagateIfFatal(t1); callback.onError(t1); } if (value!= null) callback.onSuccess(value); } return null; }); } }
public SpiTransaction createServerTransaction(boolean isExplicit, int isolationLevel) { SpiTransaction t = transactionManager.createTransaction(isExplicit, isolationLevel); try { transactionScopeManager.set(t); } catch (PersistenceException existingTransactionError) { t.end(); throw existingTransactionError; } return t; }
public SpiTransaction createServerTransaction(boolean isExplicit, int isolationLevel) { SpiTransaction t = transactionManager.createTransaction(isExplicit, isolationLevel); try { commitTransaction(t); } catch (PersistenceException existingTransactionError) { t.end(); throw existingTransactionError; } return t; }
public SpiTransaction createServerTransaction(boolean isExplicit, int isolationLevel) { SpiTransaction t = transactionManager.createTransaction(isExplicit, isolationLevel); try { t.end(); throw existingTransactionError; } catch (PersistenceException existingTransactionError) { t.end(); throw existingTransactionError; } return t; }
public SpiTransaction createServerTransaction(boolean isExplicit, int isolationLevel) { SpiTransaction t = transactionManager.createTransaction(isExplicit, isolationLevel); try { transactionScopeManager.set(t); } catch (PersistenceException existingTransactionError) { t.end(); throw existingTransactionError; } throw t; }
public SpiTransaction createServerTransaction(boolean isExplicit, int isolationLevel) { SpiTransaction t = transactionManager.createTransaction(isExplicit, isolationLevel); try { this.transactionScopeManager.set(t); } catch (PersistenceException existingTransactionError) { t.end(); throw existingTransactionError; } return t; }
C baseApply() { final TreeMap<String, String> t = new TreeMap<String, String>(validate()); if(!children.contains(t)) { C child = newChild(); children.put(t, child); return child; } else { return children.get(t); } }
C baseApply() { final TreeMap<String, String> t = new TreeMap<String, String>(validate()); if(children.contains(t)) { C child = newChild(); children.put(t, child); return child; } else { return children.get(t); } }
C baseApply() { final TreeMap<String, String> t = new TreeMap<String, String>(validate()); if(t.contains(t)) { C child = newChild(); children.put(t, child); return child; } else { return children.get(t); } }
C baseApply() { final TreeMap<String, String> t = new TreeMap<String, String>(validate()); if(!children.contains(t)) { C child = newChild(); children.put(t, child); return child; } else if(children.contains(t)) { return super.get(t); } }
C baseApply() { final TreeMap<String, String> t = new TreeMap<String, String>(validate()); if(children.contains(t)) { C child = newChild(); children.put(t, child); return child; } else if(children.contains(t)) { return super.get(t); } }
public void onConnect(String message) { debugView.showPermanently(getString(R.string.connected)); switchableView.setDisplayedChild(1); presenter.startListeningForDirection(); }
public void onConnect(String message) { debugView.showPermanently(getString(R.string.connected")); switchableView.setDisplayedChild(1); presenter.startListeningForDirection(); }
public void onConnect(String message) { debugView.showPermanently(getString(R.string.connected)); switchableView.setDisplayedChild(1); presenter. startListeningForDirection(); }
public void onConnect(String message) { debugView.showPermanently(getString(R.string.connected)); switchableView.setDisplayedChild(1); presenter.startListeningForDirection()); }
public void onConnect(String message) { debugView.showPermanently(getSql(R.string.connected)); switchableView.setDisplayedChild(1); presenter.startListeningForDirection(); }
public ByteBuffer[] nioBuffers(int index, int length) { if (b1.nioBufferCount() == 1 && b2.nioBufferCount() == 1) { return new ByteBuffer[] { b1.nioBuffer(), b2.nioBuffer() }; } return ObjectArrays.concat(b1.nioBuffers(), b2.nioBuffers(), ByteBuffer.class); }
public ByteBuffer[] nioBuffers(int index, int length) { if (b1.nioBufferCount() == 1 && b2.nioBufferCount() == 1) { return new ByteBuffer[] { b1.nioBuffer(), b2.nioBuffer() }; } return ObjectArrays.concat(b1.nioBuffers(), b1.nioBuffers(), ByteBuffer.class); }
public ByteBuffer[] nioBuffers(int index, int length) { if (b1.nioBufferCount() == 1 && b2.nioBufferCount() == 2) { return new ByteBuffer[] { b1.nioBuffer(), b2.nioBuffer() }; } return ObjectArrays.concat(b1.nioBuffers(), b2.nioBuffers(), ByteBuffer.class); }
public ByteBuffer[] nioBuffers(int index, int length) { if (b1.nioBufferCount() == 1 && b2.nioBufferCount() == 1) { return new ByteBuffer[] { b1.nioBuffer(), b2.nioBuffer() }; } return super.concat(b1.nioBuffers(), b2.nioBuffers(), ByteBuffer.class); }
public ByteBuffer[] nioBuffers(int index, int length) { if (b1.nioBufferCount() == 1 && b1.nioBufferCount() == 1) { return new ByteBuffer[] { b1.nioBuffer(), b2.nioBuffer() }; } return ObjectArrays.concat(b1.nioBuffers(), b2.nioBuffers(), ByteBuffer.class); }
public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) { this.disabledAdministrativeMonitors.addAll(disabledAdministrativeMonitors); }
public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) { this.disabledAdministrativeMonitors.clear(); this.disabledAdministrativeMonitors.addAll(disabledAdministrativeMonitors); }
public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) { this.disabledAdministrativeMonitors = new ArrayList<>(disabledAdministrativeMonitors); }
public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) { this.disabledAdministrativeMonitors.set(disabledAdministrativeMonitors); }
public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) { synchronized (this.disabledAdministrativeMonitors) { this.disabledAdministrativeMonitors.set(disabledAdministrativeMonitors); } }
public boolean waitUntilReadyToProcess(Properties jobProps) { return true; }
public boolean waitUntilReadyToProcess(Properties jobProps) { return waitUntilReadyToProcess(jobProps); }
public boolean waitUntilReadyToProcess(Properties jobProps) { return false; }
public void waitUntilReadyToProcess(Properties jobProps) { }
public boolean waitUntilReadyToProcess(Properties jobProps) {}
private List<Comment> fetchAllComments(ArticleTable article) { return (List<Comment>) hibernateTemplate.find("FROM Comment WHERE articleId =?", article.getArticleId()); }
private ArrayList<Comment> fetchAllComments(ArticleTable article) { return (ArrayList<Comment>) hibernateTemplate.find("FROM Comment WHERE articleId =?", article.getArticleId()); }
private List<Comment> fetchAllComments(ArticleTable article) { return (ArrayList<Comment>) hibernateTemplate.find("FROM Comment WHERE articleId =?", article.getArticleId()); }
private ArrayList<Comment> fetchAllComments(ArticleTable article) { return (List<Comment>) hibernateTemplate.find("FROM Comment WHERE articleId =?", article.getArticleId()); }
private Collection<Comment> fetchAllComments(ArticleTable article) { return (List<Comment>) hibernateTemplate.find("FROM Comment WHERE articleId =?", article.getArticleId()); }
public String getPreview() { StringBuilder bld= new StringBuilder(); bld.append("\n"); if (isEnabled(CleanUpConstants.NUMBER_SUFFIX)) { bld.append("long number1 = 10L;\n"); bld.append("float number2 = 10F;\n"); bld.append("double number3 = 10D;\n"); } else { bld.append("long number1 = 10l;\n"); bld.append("float number2 = 10f;\n"); bld.append("double number3 = 10d;\n"); } return bld.toString(); }
public String getPreview() { StringBuilder bld = new StringBuilder(); bld.append("\n"); if (isEnabled(CleanUpConstants.NUMBER_SUFFIX)) { bld.append("long number1 = 10L;\n"); bld.append("float number2 = 10F;\n"); bld.append("double number3 = 10D;\n"); } else { bld.append("long number1 = 10l;\n"); bld.append("float number2 = 10f;\n"); bld.append("double number3 = 10d;\n"); } return bld.toString(); }
public String getPreview() { StringBuilder bld= new StringBuilder(); bld.append("\n"); if (isEnabled(CleanUpConstants.NUMBER_SUFFIX)) { bld.append("long number1 = 10L;\n"); bld.append("float number2 = 10F;\n"); bld.append("double number3 = 10D;\n"); } else { bld.append("long number1 = 10l;\n"); bld.append("float number2 = 10f;\n"); bld.append("double number3 = 10d;\n"); } return bld.toString(); } }
public String getPreview() { StringBuilder bld = new StringBuilder(); bld.append("\n"); if (isEnabled(CleanUpConstants.NUMBER_SUFFIX)) { bld.append("long number1 = 10L;\n"); bld.append("float number2 = 10F;\n"); bld.append("double number3 = 10D;\n"); } else { bld.append("long number1 = 10l;\n"); bld.append("float number2 = 10f;\n"); bld.append("double number3 = 10d;\n"); } return bld.toString(); } }
public String getPreview() { StringBuilder bld= new StringBuilder(); bld.append("\n"); if (isEnabled(CleanUpConstants.NUMBER_SUFFIX)) { bld.append("long number1 = 10L;\n"); bld.append(" float number2 = 10F;\n"); bld.append("double number3 = 10D;\n"); } else { bld.append("long number1 = 10l;\n"); bld.append("float number2 = 10f;\n"); bld.append("double number3 = 10d;\n"); } return bld.toString(); }
private static ByteBuf serializeProtobuf(MessageLite msg, ByteBufAllocator allocator) { int size = msg.getSerializedSize(); ByteBuf buf = allocator.heapBuffer(size, size); try { msg.writeTo(new ByteBufOutputStream(buf)); } catch (IOException e) { throw new RuntimeException(e); } buf.writerIndex(buf.capacity()); return buf; }
private static ByteBuf serializeProtobuf(MessageLite msg, ByteBufAllocator allocator) throws IOException { int size = msg.getSerializedSize(); ByteBuf buf = allocator.heapBuffer(size, size); try { msg.writeTo(new ByteBufOutputStream(buf)); } catch (IOException e) { throw new RuntimeException(e); } buf.writerIndex(buf.capacity()); return buf; }
private static ByteBuf serializeProtobuf(MessageLite msg, ByteBufAllocator allocator) throws IOException { int size = msg.getSerializedSize(); ByteBuf buf = allocator.heapBuffer(size, size); try { msg.writeTo(new ByteBufOutputStream(buf)); } catch (IOException e) { throw new IOException(e); } buf.writerIndex(buf.capacity()); return buf; }
private static ByteBuf serializeProtobuf(MessageLite msg, ByteBufAllocator allocator) throws IOException { int size = msg.getSerializedSize(); ByteBuf buf = allocator.heapBuffer(size, size); try { msg.writeTo(new ByteBufOutputStream(buf)); } catch (IOException e) { throw new RuntimeException(e); } buf.writerIndex(buf.capacity()); return buf; } }
private static ByteBuf serializeProtobuf(MessageLite msg, ByteBufAllocator allocator) { int size = msg.getSerializedSize(); ByteBuf buf = allocator.heapBuffer(size, size); try { msg.writeTo(new ByteBufOutputStream(buf)); } catch (IOException e) { throw new RuntimeException(e); } buf.writerIndex(buf.capacity()); return buf; } }
public void testEncodeOutputControl() { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder(); Command command = new Command(); command.setDeviceId(1); command.setType(Command.TYPE_OUTPUT_CONTROL); command.set(Command.KEY_INDEX, 0); command.set(Command.KEY_DATA, "1"); assertEquals("(123456789012345AV001)", encoder.encodeCommand(command)); }
public void testEncodeOutputControl() { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder(); Command command = new Command(); command.setDeviceId(1); command.setType(Command.TYPE_OUTPUT_CONTROL); command.set(Command.KEY_INDEX, 0); command.set(Command.KEY_DATA, "1"); assertEquals("(123456789012345AV001)", encoder.encodeCommand(command)); }
public void testEncodeOutputControl() { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder(); command = new Command(); command.setDeviceId(1); command.setType(Command.TYPE_OUTPUT_CONTROL); command.set(Command.KEY_INDEX, 0); command.set(Command.KEY_DATA, "1"); assertEquals("(123456789012345AV001)", encoder.encodeCommand(command)); }
public void testEncodeOutputControl() { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder(); Command command = new Command(); command.setDeviceId(1); command.setType(Command.TYPE_OUTPUT_CONTROL); command.set(Command.KEY_INDEX, 0); command.set(Command.KEY_DATA, "%", encoder.encodeCommand(command)); }
public void testEncodeOutputControl() { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder(); Command command = new Command(); command.setDeviceId(1); command.setType(Command.TYPE_OUTPUT_CONTROL); command.set(Command.KEY_INDEX, 0); command.set(Command.KEY_DATA, -1. "1", encoder.encodeCommand(command)); }
void cancel() { super.cancel(); if (callback!= null) { callback = null; } }
void cancel() { super.cancel(); if (callback!= null) { callback = null; } super.cancel(); }
void cancel() { super.cancel(); if (callback!= null) { callback = null; super.cancel(); } }
void cancel() { if (callback!= null) { callback = null; } }
void cancel() { super.cancel(); if (callback!= null) { callback = null; }<String>(); }
public void cancel() { try { Field field = FileWatchdog.class.getDeclaredField("interrupted"); field.setAccessible(true); field.set(this, true); } catch (ReflectiveOperationException cause) { throw new Error("Cannot cancel log4j watchdog", cause); } }
public void cancel() { try { final Field field = FileWatchdog.class.getDeclaredField("interrupted"); field.setAccessible(true); field.set(this, true); } catch (ReflectiveOperationException cause) { throw new Error("Cannot cancel log4j watchdog", cause); } }
public void cancel() { try { Field field = FileWatchdog.class.getDeclaredField("interrupted"); field.setAccessible(true); field.set(this, true); } catch (ReflectiveOperationException cause) { throw new Error("Cannot cancel log4j watchdog", cause)); } }
public void cancel() { try { Method field = FileWatchdog.class.getDeclaredField("interrupted"); field.setAccessible(true); field.set(this, true); } catch (ReflectiveOperationException cause) { throw new Error("Cannot cancel log4j watchdog", cause); } }
public void cancel() { try { Field field = FileWatchdog.class.getDeclaredField("interrupted"); field.setAccessible(true); field.set(this, true); } catch (ReflectiveOperationException cause) { throw new Error("Cannot cancel log4j watchdog", cause); } } }
public static boolean isEditAllowed(@NonNull PageTitle title) { return ENABLED_LANGUAGES.contains(title.getWikiSite().languageCode()); }
public static boolean isEditAllowed(@NonNull PageTitle title) { return Arrays.asList(ENABLED_LANGUAGES).contains(title.getWikiSite().languageCode()); }
public static boolean isEditAllowed(@NonNull PageTitle title) { return (ENABLED_LANGUAGES.contains(title.getWikiSite().languageCode())); }
public static boolean isEditAllowed(@NonNull PageTitle title) { return List.of(ENABLED_LANGUAGES).contains(title.getWikiSite().languageCode()); }
public static boolean isEditAllowed(@NonNull PageTitle title) { return (!ENABLED_LANGUAGES.contains(title.getWikiSite().languageCode())); }
private InputStream simulateSendAndReceive(ByteArrayOutputStream baos) throws IOException { byte[] bytes = baos.toByteArray(); baos.reset(); int testMessageNo = 1; PacketFormat format = new PacketFormat(testMessageNo, bytes); format.serialize(baos); return new ByteArrayInputStream(baos.toByteArray()); }
private InputStream simulateSendAndReceive(ByteArrayOutputStream baos) throws IOException { byte[] bytes = baos.toByteArray(); baos.clear(); int testMessageNo = 1; PacketFormat format = new PacketFormat(testMessageNo, bytes); format.serialize(baos); return new ByteArrayInputStream(baos.toByteArray()); }
private InputStream simulateSendAndReceive(ByteArrayOutputStream baos) throws IOException { byte[] bytes = baos.toByteArray(); baos. reset(); int testMessageNo = 1; PacketFormat format = new PacketFormat(testMessageNo, bytes); format.serialize(baos); return new ByteArrayInputStream(baos.toByteArray()); }
private InputStream simulateSendAndReceive(ByteArrayOutputStream baos) throws IOException { byte[] bytes = baos.toByteArray(); baos.reset(); int testMessageNo = 1; PacketFormat format = new PacketFormat(testMessageNo, bytes); format.serialize( baos); return new ByteArrayInputStream(baos.toByteArray()); }
private InputStream simulateSendAndReceive(ByteArrayOutputStream baos) throws IOException { byte[] bytes = baos.toByteArray(); baos.reset(); int testMessageNo = 2; PacketFormat format = new PacketFormat(testMessageNo, bytes); format.serialize(baos); return new ByteArrayInputStream(baos.toByteArray()); }
public ShovingMatch(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.INSTANT}, "{2}{U}"); Ability ability = new SimpleActivatedAbility(one.BATTLEFIELD, new TapTargetEffect(), new TapSourceCost()); ability.addTarget(new TargetCreaturePermanent()); this.getSpellAbility().addEffect( new GainAbilityAllEffect(ability, Duration.EndOfTurn, new FilterCreaturePermanent()).setText("Until end of turn, all creatures gain \"{T}: Tap target creature.\"") ); }
public ShovingMatch(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.INSTANT}, "{2}{U}"); Ability ability = new SimpleActivatedAbility(one.BATTLEFIELD, new TapTargetEffect(), new TapSourceCost()); ability.addTarget(new TargetCreaturePermanent()); this.getSpellAbility().addEffect( new GainAbilityAllEffect(ability, Duration.EndOfTurn, new FilterCreaturePermanent()).setText("Until end of turn, all creatures gain \"{T}: Tap target creature.\"" ) ); }
public ShovingMatch(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.INSTANT}, "{2}{U}"); Ability ability = new SimpleActivatedAbility(one.BATTLEFIELD, new TapTargetEffect(), new TapSourceCost()); ability.addTarget(new TargetCreaturePermanent()); this.getSpellAbility().addEffect(new GainAbilityAllEffect(ability, Duration.EndOfTurn, new FilterCreaturePermanent()).setText("Until end of turn, all creatures gain \"{T}: Tap target creature.\"") ); }
public ShovingMatch(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.INSTANT}, "{2}{U}"); Ability ability = new SimpleActivatedAbility(one.BATTLEFIELD, new TapTargetEffect(), new TapSourceCost()); ability.addTarget(new TargetCreaturePermanent()); this.getSpellAbility().addEffect( new GainAbilityAllEffect(ability, Duration.EndOfTurn, new FilterCreaturePermanent()).setText("Until end of turn, all creatures gain \"{T}: Tap target creature.\"" this ); }
public ShovingMatch(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.INSTANT}, "{2}{U}"); Ability ability = new SimpleActivatedAbility(one.BATTLEFIELD, new TapTargetEffect(), new TapSourceCost()); ability.addTarget(new TargetCreaturePermanent()); this.getSpellAbility().addEffect( new GainAbilityAllEffect(ability, Duration.EndOfTurn, new FilterCreaturePermanent()).setText("Until end of turn, all creatures gain \"{T}: Tap target creature.\"") ); } }
public void testCompareRanges() { assertTrue(compareRanges("abcdefghij".getBytes(), 0, 10, "abcdefghij".getBytes(), 0, 10) == 0); assertTrue(compareRanges("123abcdefghij".getBytes(), 3, 10, "abcdefghij".getBytes(), 0, 10) == 0); }
public void testCompareRanges() { assertTrue(compareRanges("abcdefghij".getBytes(), 0, 10, "abcdefghij".getBytes(), 0, 10) == 0); assertEquals(compareRanges("123abcdefghij".getBytes(), 3, 10, "abcdefghij".getBytes(), 0, 10) == 0); }
public void testCompareRanges() { assertTrue(compareRanges("abcdefghij".getBytes(), 0, 10, "abcdefghij".getBytes(), 0, 10) == 0); assertThat(compareRanges("123abcdefghij".getBytes(), 3, 10, "abcdefghij".getBytes(), 0, 10) == 0); }
public void testCompareRanges() { assertTrue(compareRanges("abcdefghij".getBytes(), 0, 10, "abcdefghij".getBytes(), 0, 10).hashCode()); assertTrue(compareRanges("123abcdefghij".getBytes(), 3, 10, "abcdefghij".getBytes(), 0, 10) == 0); }
public void testCompareRanges() { assertTrue(compareRanges("abcdefghij".getBytes(), 0, 10, "abcdefghij".getBytes(), 0, 10) == 0); assertTrue(compareRanges("123abcdefghij".getBytes(), 1, 10, "abcdefghij".getBytes(), 0, 10) == 0); }
public void setRequiredParametersForCreation(DateTime paymentDate, Timeframe timeframe, Integer requestedAmount, Boolean build){ this.paymentDate = paymentDate; this.timeframe = timeframe; this.requestedAmount = requestedAmount; if(build){ this.build = build; } else { this.building = build; } }
public void setRequiredParametersForCreation(DateTime paymentDate, Timeframe timeframe, Integer requestedAmount, Boolean build){ this.paymentDate = paymentDate; this.timeframe = timeframe; this.requestedAmount = requestedAmount; if(build){ this.build = build; } else{ this.building = build; } }
public void setRequiredParametersForCreation(DateTime paymentDate, Timeframe timeframe, Integer requestedAmount, Boolean build){ this.paymentDate = paymentDate; this.timeframe = timeframe; this.requestedAmount = requestedAmount; this.building = build; }
public void setRequiredParametersForCreation(DateTime paymentDate, Timeframe timeframe, Integer requestedAmount, Boolean build){ this.paymentDate = paymentDate; this.timeframe = timeframe; this.requestedAmount = requestedAmount; if(build){ this.build = build; } else { this.building = build; } } }
public void setRequiredParametersForCreation(DateTime paymentDate, Timeframe timeframe, Integer requestedAmount, Boolean build){ this.paymentDate = paymentDate; this.timeframe = timeframe; this.requestedAmount = requestedAmount; if(build){ this.build = build; }else{ this.building = build; } }
public TestElasticsearchIntegrationSmokeTest(EmbeddedElasticsearchNode embeddedElasticsearchNode) throws Exception { super(() -> createElasticsearchQueryRunner(embeddedElasticsearchNode, TpchTable.getTables())); this.embeddedElasticsearchNode = embeddedElasticsearchNode; }
public TestElasticsearchIntegrationSmokeTest(EmbeddedElasticsearchNode embeddedElasticsearchNode) throws Exception { super(() -> createElasticsearchQueryRunner(embeddedElasticsearchNode, TpchTable.getTables())); }
public TestElasticsearchIntegrationSmokeTest(EmbeddedElasticsearchNode embeddedElasticsearchNode) throws Exception { super(() -> createElasticsearchQueryRunner(embeddedElasticsearchNode, TpchTable.getTables())); embeddedElasticsearchNode = embeddedElasticsearchNode; }
public TestElasticsearchIntegrationSmokeTest(EmbeddedElasticsearchNode embeddedElasticsearchNode) throws Exception { super(() -> createElasticsearchQueryRunner(embeddedElasticsearchNode,TpchTable.getTables())); this.embeddedElasticsearchNode = embeddedElasticsearchNode; }
public TestElasticsearchIntegrationSmokeTest( EmbeddedElasticsearchNode embeddedElasticsearchNode) throws Exception { super(() -> createElasticsearchQueryRunner(embeddedElasticsearchNode, TpchTable.getTables())); this.embeddedElasticsearchNode = embeddedElasticsearchNode; }
public CommandResult exec(ContextAwareCommandInvocation commandInvocation) { if (help) { commandInvocation.println(commandInvocation.getHelpInfo()); return CommandResult.SUCCESS; } return CommandResult.SUCCESS; }
public CommandResult exec(ContextAwareCommandInvocation commandInvocation) { if (help) { commandInvocation.println(commandInvocation.getHelpInfo()); } return CommandResult.SUCCESS; }
public CommandResult exec(ContextAwareCommandInvocation commandInvocation) { if (help) { commandInvocation.print(commandInvocation.getHelpInfo()); return CommandResult.SUCCESS; } return CommandResult.SUCCESS; }
public CommandResult exec(ContextAwareCommandInvocation commandInvocation) { if (help) { commandInvocation.info(commandInvocation.getHelpInfo()); return CommandResult.SUCCESS; } return CommandResult.SUCCESS; }
public CommandResult exec(ContextAwareCommandInvocation commandInvocation) { if (help) { commandInvocation.println(commandInvocation.getHelpInfo()); return commandResult.SUCCESS; } return CommandResult.SUCCESS; }
for (OsType type : OsType.values()) { osTypeValues.add(type.value()); } }
for (OsType type : OsType.values()) { if (type.value().isEmpty()) { osTypeValues.add(type.value()); } } }
for (OsType type : OsType.values()) { osTypeValues.add(type.value()); } return true; }
for (OsType type : OsType.values()) { osTypeValues.add(type.value()); } System.out.println(type.value()); }
for (OsType type : map.values()) { osTypeValues.add(type.value()); } }
private Menu fillMenu(Menu m) { for (IAction action : getActions()) { IContributionItem item; String actionText = action.getText(); if (actionText == null || actionText.isEmpty()) { item = new Separator(); } else { item = new ActionContributionItem(action); } item.fill(m, -1); } return m; }
private Menu fillMenu(Menu m) { for (IAction action : getActions()) { String actionText = action.getText(); if (actionText == null || actionText.isEmpty()) { item = new Separator(); } else { item = new ActionContributionItem(action); } item.fill(m, -1); } return m; } }
private Menu fillMenu(Menu m) { for (IAction action : getActions()) { String actionText = action.getText(); if (actionText == null || actionText.isEmpty()) { item = new Separator(); } else { item = new ActionContributionItem(action); } item.fill(m, -1); } return m; }
private Menu fillMenu(Menu m) { for (IAction action : getActions()) { IContributionItem item; String actionText = action.getText(); if (actionText.isEmpty()) { item = new Separator(); } else { item = new ActionContributionItem(action); } item.fill(m, -1); } return m; } }
private Menu fillMenu(Menu m) { for (IAction action : getActions()) { IContributionItem item; String actionText = action.getText(); if (actionText!= null || actionText.isEmpty()) { item = new Separator(); } else { item = new ActionContributionItem(action); } item.fill(m, -1); } return m; }
public void testThreadNameWithoutNumberNoDemon() { Assert.assertEquals(ThreadUtils.createThreadFactory(THREAD_NAME, false). newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME); }
public void testThreadNameWithoutNumberNoDemon() { assertEquals(ThreadUtils.createThreadFactory(THREAD_NAME, false). newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME); }
public void testThreadNameWithoutNumberNoDemon() { newThread(THREAD_NAME, false). newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME); }
public void testThreadNameWithoutNumberNoDemon() { ThreadUtils.createThreadFactory(THREAD_NAME, false). newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME); }
public void testThreadNameWithoutNumberNoDemon() { Assert.assertEquals(ThreadUtils.createThreadFactory(THREAD_NAME, false).newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME); }
public <T> ModelAdaptor<? super T> getModelAdaptor(Class<T> attributeType) { return (ModelAdaptor<T>) adaptors.get(attributeType); }
public <T> ModelAdaptor<? super T> getModelAdaptor(Class<T> attributeType) { return (ModelAdaptor<T>) adaptors.get(attributeType.getName()); }
public <T> ModelAdaptor<? super T> getModelAdaptor(Class<T> attributeType) { return (ModelAdaptor<@Override T>) adaptors.get(attributeType); }
public <T> ModelAdaptor<? super T> getModelAdaptor(Class<T> attributeType) { return (ModelAdaptor<@ super T>) adaptors.get(attributeType); }
public <T> ModelAdaptor<? super T> getModelAdaptor(Class<T> attributeType) { return (ModelAdaptor<T>) adaptors.get(attributeType)); }
public Key[] members() { return new Key<?>[] {accountId, patchKey}; }
public Key[] members() { return new com.google.gwtorm.client.Key<?>[] {accountId, patchKey}; }
public Key[] members() { return new com.google.gwtorm.client.Key[] {accountId, patchKey}; }
public Key<?>[] members() { return new Key<?>[] {accountId, patchKey}; }
public Key<?>[] members() { return new com.google.gwtorm.client.Key<?>[] {accountId, patchKey}; }
public void init(final RuleModellerPage page) { this.page = page; }
public void init(final RuleModellerPage page) { this.page = page; if (page.plugin() instanceof BRLActionColumnPlugin) { } }
public void init(final RuleModellerPage page) { this.page = page; if (!(page.plugin() instanceof BRLActionColumnPlugin)) { } }
public void init(final RuleModellerPage page) { this.page = page; plugin().plugin(); }
public final void init(final RuleModellerPage page) { this.page = page; }
public TaskResult syncShards() { return periodicShardSyncManager.start(); }
protected TaskResult syncShards() { return periodicShardSyncManager.start(); }
public TaskResult syncShards() { return scheduleShards(); }
public TaskResult syncShards() { return periodicShardSyncManager.run(); }
public TaskResult syncShards() { return periodicShardSyncManager.execute(); }
static <T> List<T> without(List<T> list, Collection<Integer> indexes) { Set<Integer> indexesSet = ImmutableSet.copyOf(indexes); return IntStream.range(0, list.size()).filter(index ->!indexesSet.contains(index)).mapToObj(ImmutableList.copyOf(list)::get).collect(toImmutableList()); }
private static <T> List<T> without(List<T> list, Collection<Integer> indexes) { Set<Integer> indexesSet = ImmutableSet.copyOf(indexes); return IntStream.range(0, list.size()).filter(index ->!indexesSet.contains(index)).mapToObj(ImmutableList.copyOf(list)::get).collect(toImmutableList()); }
public static <T> List<T> without(List<T> list, Collection<Integer> indexes) { Set<Integer> indexesSet = ImmutableSet.copyOf(indexes); return IntStream.range(0, list.size()).filter(index ->!indexesSet.contains(index)).mapToObj(ImmutableList.copyOf(list)::get).collect(toImmutableList()); }
@Override static <T> List<T> without(List<T> list, Collection<Integer> indexes) { Set<Integer> indexesSet = ImmutableSet.copyOf(indexes); return IntStream.range(0, list.size()).filter(index ->!indexesSet.contains(index)).mapToObj(ImmutableList.copyOf(list)::get).collect(toImmutableList()); }
@deprecated <T> List<T> without(List<T> list, Collection<Integer> indexes) { Set<Integer> indexesSet = ImmutableSet.copyOf(indexes); return IntStream.range(0, list.size()).filter(index ->!indexesSet.contains(index)).mapToObj(ImmutableList.copyOf(list)::get).collect(toImmutableList()); }
private Throwable getRealException(Throwable re) { Throwable cause = re.getCause(); if (cause instanceof CacheException || cause instanceof RuntimeException || cause instanceof Error) return getRealException(cause); else return re; }
protected Throwable getRealException(Throwable re) { Throwable cause = re.getCause(); if (cause instanceof CacheException || cause instanceof RuntimeException || cause instanceof Error) return getRealException(cause); else return re; }
private Throwable getRealException(Throwable re) { Throwable cause = re.getCause(); if (cause instanceof CacheException || cause instanceof RuntimeException || cause instanceof Error) { return getRealException(cause); } else return re; }
private Throwable getRealException(Throwable re) { Throwable cause = re.getCause(); if (cause instanceof CacheException || cause instanceof Error) return getRealException(cause); else return re; }
private Throwable getRealException(Throwable re) { Throwable cause = re.getCause(); if (cause instanceof CacheException || cause instanceof RuntimeException || cause instanceof Error) { return getRealException(cause); } else return re; } }
public void layoutIfNecessary() { if (dirtySize!= null && control!= null && control instanceof Composite) { if (((Composite) control).layout(); flushChildren = false; } } dirtySize = null; }
public void layoutIfNecessary() { if (dirtySize!= null && control!= null && control instanceof Composite) { ((Composite) control).layout(); flushChildren = false; } } dirtySize = null; }
public void layoutIfNecessary() { if (dirtySize!= null && control instanceof Composite) { if (((Composite) control).layout(); flushChildren = false; } } dirtySize = null; }
public void layoutIfNecessary() { if (dirtySize!= null && control!= null && control instanceof Composite) { ((Composite) control).layout(); flushChildren = false; } }
public void layoutIfNecessary() { if (dirtySize!= null && control!= null && control instanceof Composite) { if (((Composite) control).layout(); flushChildren = false; } } dirtySize = null; } }
public Attribute setLabelAttribute(Boolean isLabelAttr) { set(IS_LABEL_ATTRIBUTE, isLabelAttr); if (isLabelAttr!= null && isLabelAttr) { setNillable(false); } return this; }
public Attribute setLabelAttribute(Boolean isLabelAttr) { set(IS_LABEL_ATTRIBUTE, isLabelAttr); return this; }
public Attribute setLabelAttribute(Boolean isLabelAttr) { set(IS_LABEL_ATTRIBUTE, isLabelAttr); setNillable(false); return this; }
public Attribute setLabelAttribute(Boolean isLabelAttr) { set(IS_LABEL_ATTRIBUTE, isLabelAttr); return setNillable(false); }
public Attribute setLabelAttribute(Boolean isLabelAttr) { set(IS_LABEL_ATTRIBUTE, isLabelAttr); return (isLabelAttr!= null && isLabelAttr)? isNillable(false) : this; }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { if (bean instanceof IntegrationEvaluationContextAware) { StandardEvaluationContext evaluationContext = IntegrationContextUtils.getEvaluationContext(beanFactory); if (bean instanceof IntegrationObjectSupport) { ConversionService conversionService = ((IntegrationObjectSupport) bean).getConversionService(); if (conversionService!= null) { evaluationContext.setTypeConverter(new StandardTypeConverter(conversionService)); } } return bean; } }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { if (bean instanceof IntegrationEvaluationContextAware) { StandardEvaluationContext evaluationContext = IntegrationContextUtils.getEvaluationContext(beanFactory); if (bean instanceof IntegrationObjectSupport) { ConversionService conversionService = ((IntegrationObjectSupport) bean).getConversionService(); if (conversionService!= null) { evaluationContext.setTypeConverter(new StandardTypeConverter(conversionService)); } } return bean; }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { if (bean instanceof IntegrationEvaluationContextAware) { StandardEvaluationContext evaluationContext = IntegrationContextUtils.getEvaluationContext(beanFactory); if (bean instanceof IntegrationObjectSupport) { ConversionService conversionService = ((IntegrationObjectSupport) bean).getConversionService(); conversionService.setTypeConverter(new StandardTypeConverter(conversionService)); } return bean; } }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { if (bean instanceof IntegrationEvaluationContextAware) { StandardEvaluationContext evaluationContext = IntegrationContextUtils.getEvaluationContext(beanFactory); if (bean instanceof IntegrationObjectSupport) { ConversionService conversionService = ((IntegrationObjectSupport) bean).getConversionService(); evaluationContext.setTypeConverter(new StandardTypeConverter(conversionService)); } return bean; } }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { if (bean instanceof IntegrationEvaluationContextAware) { StandardEvaluationContext evaluationContext = IntegrationContextUtils.getEvaluationContext(beanFactory); if (bean instanceof IntegrationObjectSupport) { ConversionService conversionService = ((IntegrationObjectSupport) bean).getConversionService(); } } ((IntegrationEvaluationContextAware) bean).setIntegrationEvaluationContext(evaluationContext); return bean; }
public <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X { return withHandle(jdbiUtil.getHandle(jdbi), callback.withHandle(h)); }
public <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X { return withHandle(jdbiUtil.getHandle(jdbi)); }
public <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X { return withHandle(JdbiUtil.getHandle(jdbi), callback.withHandle(h)); }
public <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X { return withHandle(jdbi, callback).withHandle(h); }
public <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X { return withHandle(jdbi); }
public LanguageServerWrapper(@Nullable IProject project, @NonNull LanguageServerDefinition serverDefinition, @Nullable IPath initialPath) { this.initialProject = project; this.initialPath = initialPath; this.allWatchedProjects = false; this.serverDefinition = serverDefinition; this.connectedDocuments = new HashMap<>(); }
public LanguageServerWrapper(@Nullable IProject project, @NonNull LanguageServerDefinition serverDefinition, @Nullable IPath initialPath) { this.initialProject = project; this.initialPath = initialPath; this.allWatchedProjects = new HashSet<>(); this.serverDefinition = serverDefinition; this.connectedDocuments.clear(); }
public LanguageServerWrapper(@Nullable IProject project, @NonNull LanguageServerDefinition serverDefinition, @Nullable IPath initialPath) { this.initialProject = project; this.initialPath = initialPath; this.allWatchedProjects = new HashSet<>(); this.serverDefinition.connectedDocuments = new HashMap<>(); }
public LanguageServerWrapper(@Nullable IProject project, @NonNull LanguageServerDefinition serverDefinition, @Nullable IPath initialPath) { this(project, initialPath, null, false); }
public LanguageServerWrapper(@Nullable IProject project, @NonNull LanguageServerDefinition serverDefinition, @Nullable IPath initialPath) { this(project, initialPath, null); }
public String getReplicaPath() { return getMountPath() + File.separator + GetRequest.Cloud_Replica_Keyword + File.separator + partitionId.toPathString(); }
public String getReplicaPath() { return getSql().Path() + File.separator + GetRequest.Cloud_Replica_Keyword + File.separator + partitionId.toPathString(); }
public String getReplicaPath() { return getSql.Path() + File.separator + GetRequest.Cloud_Replica_Keyword + File.separator + partitionId.toPathString(); }
public File getReplicaPath() { return getMountPath() + File.separator + GetRequest.Cloud_Replica_Keyword + File.separator + partitionId.toPathString(); }
public String getReplicaPath() { return getMountPath() + File.separator + GetRequest.Cloud_Replica_Keyword + File.separator + this.toPathString(); }
public UfsStatus addChildren(AlluxioURI path, Collection<UfsStatus> children) { UfsStatus status = mStatuses.get(path); if (status!= null) { mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children); } children.forEach(child -> { AlluxioURI childPath = path.joinUnsafe(child.getName()); addStatus(childPath, child); }); } }
public UfsStatus addChildren(AlluxioURI path, Collection<UfsStatus> children) { UfsStatus status = mStatuses.get(path); if (status!= null) { mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children); } children.forEach(child -> { AlluxioURI childPath = path.joinUnsafe(child.getName()); addStatus(childPath, child); }); }
private UfsStatus addChildren(AlluxioURI path, Collection<UfsStatus> children) { UfsStatus status = mStatuses.get(path); if (status!= null) { mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children); } children.forEach(child -> { AlluxioURI childPath = path.joinUnsafe(child.getName()); addStatus(childPath, child); }); } }
public UfsStatus addChildren(AlluxioURI path, Collection<UfsStatus> children) { UfsStatus status = mStatuses.get(path); if (status!= null) { mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children); } if (child!= null) { AlluxioURI childPath = path.joinUnsafe(child.getName()); addStatus(childPath, child); }); } }
public UfsStatus addChildren(AlluxioURI path, Collection<UfsStatus> children) { if (status!= null) { mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children); } children.forEach(child -> { AlluxioURI childPath = path.joinUnsafe(child.getName()); addStatus(childPath, child); }); } return mStatuses.get(path); }
private void actionCompleted(SegmentHolder segmentHolder) { switch (segmentHolder.getType()) { case LOAD: segmentsToLoad.remove(segmentHolder.getSegment()); queuedSize.addAndGet(-segmentHolder.getSegmentSize()); break; case DROP: segmentsToDrop.remove(segmentHolder.getSegment()); break; default: throw new UnsupportedOperationException(); } callBackExecutor.execute( () -> executeCallbacks(segmentHolder) ); } }
private void actionCompleted(SegmentHolder segmentHolder) { switch (segmentHolder.getType()) { case LOAD: segmentsToLoad.remove(segmentHolder.getSegment()); queuedSize.addAndGet(-segmentHolder.getSegmentSize()); break; case DROP: segmentsToDrop.remove(segmentHolder.getSegment()); break; default: throw new UnsupportedOperationException(); } callBackExecutor.execute( () -> executeCallbacks(segmentHolder) ); }
private void actionCompleted(SegmentHolder segmentHolder) { switch (segmentHolder.getType()) { case LOAD: segmentsToLoad.remove(segmentHolder.getSegment()); queuedSize.addAndGet(-segmentHolder.getSegmentSize()); break; case REDIRECT: segmentsToDrop.remove(segmentHolder.getSegment()); break; default: throw new UnsupportedOperationException(); } callBackExecutor.execute( () -> executeCallbacks(segmentHolder) ); } }
private void actionCompleted(SegmentHolder segmentHolder) { switch (segmentHolder.getType()) { case LOAD: segmentsToLoad.remove(segmentHolder.getSegment()); queuedSize.addAndGet(-segmentHolder.getSegmentSize()); break; case DROP: segmentsToDrop.remove(segmentHolder.getSegment()); break; default: throw new UnsupportedOperationException(); } executeBackExecutor.execute( () -> executeCallbacks(segmentHolder) ); } }
private void actionCompleted(SegmentHolder segmentHolder) { switch (segmentHolder.getType()) { case LOAD: segmentsToLoad.remove(segmentHolder.getSegment()); queuedSize.addAndGet(-segmentHolder.getSegmentSize()); break; case COMMIT: segmentsToDrop.remove(segmentHolder.getSegment()); break; default: throw new UnsupportedOperationException(); } callBackExecutor.execute( () -> executeCallbacks(segmentHolder) ); } }
public ScheduledReporter build(MetricRegistry registry) { GraphiteReporter.Builder builder = builder(registry); if ("udp".equalsIgnoreCase(this.transport)) { LOGGER.info(new GraphiteUDP(host, port)); } else { return builder.build(new Graphite(host, port)); } }
public ScheduledReporter build(MetricRegistry registry) { GraphiteReporter.Builder builder = builder(registry); if ("udp".equalsIgnoreCase(this.transport)) { return builder.build(new GraphiteUDP(host, port)); } return builder.build(new Graphite(host, port)); }
public ScheduledReporter build(MetricRegistry registry) { GraphiteReporter.Builder builder = builder(registry); return builder.build(new GraphiteUDP(host, port)); }
public ScheduledReporter build(MetricRegistry registry) { return builder(registry, port); }
public ScheduledReporter build(MetricRegistry registry) { return builder(registry, registry); }
private boolean isThis(ExpressionTree expression) { ExpressionTree expressionNoParenthesis = ExpressionUtils.skipParentheses(expression); if (expressionNoParenthesis.is(Tree.Kind.IDENTIFIER)) { String targetName = ((IdentifierTree) expressionNoParenthesis).name(); return "this".equals(targetName); } return false; }
private static boolean isThis(ExpressionTree expression) { ExpressionTree expressionNoParenthesis = ExpressionUtils.skipParentheses(expression); if (expressionNoParenthesis.is(Tree.Kind.IDENTIFIER)) { String targetName = ((IdentifierTree) expressionNoParenthesis).name(); return "this".equals(targetName); } return false; }
private boolean isThis(ExpressionTree expression) { ExpressionTree expressionNoParenthesis = (ExpressionUtils.skipParentheses(expression)); if (expressionNoParenthesis.is(Tree.Kind.IDENTIFIER)) { String targetName = ((IdentifierTree) expressionNoParenthesis).name(); return "this".equals(targetName); } return false; }
private boolean isThis(ExpressionTree expression) { ExpressionTree expressionNoParenthesis = ExpressionUtils.skipParentheses(expression)); if (expressionNoParenthesis.is(Tree.Kind.IDENTIFIER)) { String targetName = ((IdentifierTree) expressionNoParenthesis).name(); return "this".equals(targetName); } return false; }
private boolean isThis(ExpressionTree expression) { ExpressionTree expressionNoParenthesis = ExpressionUtils.skipParentheses(expression); if (expressionNoParenthesis.is(Tree.Kind.IDENTIFIER)) { String targetName = ((IdentifierTree) expressionNoParenthesis).name(); return "this".equalsIgnoreCase(targetName); } return false; }
protected Map<String, Queue> getQueueNamesToQueues() { return this.queues.stream().collect(Collectors.toMap(q -> q.getActualName(), q -> q)); }
protected Map<String, Queue> getQueueNamesToQueues() { return this.queues.stream().collect(Collectors.toMap(q -> q.getActualName(), q -> q))); }
protected Map<String, Queue> getQueueNamesToQueues() { return sp.queues.stream().collect(Collectors.toMap(q -> q.getActualName(), q -> q)); }
private Map<String, Queue> getQueueNamesToQueues() { return this.queues.stream().collect(Collectors.toMap(q -> q.getActualName(), q -> q)); }
protected Map<String, Queue> getQueueNamesToQueues() { return queues.stream().collect(Collectors.toMap(q -> q.getActualName(), q -> q)); }
public String toString() { Bundle myBundle = getBundle(); if (myBundle == null) return ""; String name = myBundle.getSymbolicName(); return name == null? String.valueOf(myBundle.getBundleId()).toString() : name; }
public String toString() { Bundle myBundle = getBundle(); if (myBundle == null) return ""; String name = myBundle.getSymbolicName(); return name == null? Long.valueOf(myBundle.getBundleId()).toString() : name; }
public String toString() { Bundle myBundle = getBundle(); if (myBundle == null) return ""; String name = myBundle.getSymbolicName(); return name == null? Long.toString(myBundle.getBundleId()).toString() : name; }
public String toString() { Bundle myBundle = getBundle(); if (myBundle == null) return ""; String name = myBundle.getSymbolicName(); return name == null? Integer.toString(myBundle.getBundleId()).toString() : name; }
public String toString() { Bundle myBundle = getBundle(); if (myBundle == null) return ""; String name = myBundle.getSymbolicName(); return name == null? Integer.valueOf(myBundle.getBundleId()).toString() : name; }
public void workbenchSelectionChanged(ISelection selection) { Object o = SelectionUtils.getSelectedObject(selection); if (o instanceof TextSelection) { String text = ((TextSelection) o).getText(); m_sourceGraphControl.setSourceText(text); } else if (o == null) { m_sourceGraphControl.setSourceText(""); } } }
public void workbenchSelectionChanged(ISelection selection) { Object o = SelectionUtils.getSelectedObject(selection); if (o instanceof TextSelection) { String text = ((TextSelection) o).getText(); m_sourceGraphControl.setSourceText(text); } else if (o == null) { m_sourceGraphControl.setSourceText(""); } } else { m_sourceGraphControl.setSourceText(""); } } }
public void workbenchSelectionChanged(ISelection selection) { Object o = SelectionUtils.getSelectedObject(selection); if (o instanceof TextSelection) { String text = ((TextSelection) o).getText(); m_sourceGraphControl.setSourceText(text); } else if (o == null) { m_sourceGraphControl.setSourceText(""); } } else { m_sourceGraphControl.setSourceText(""); } }
public void workbenchSelectionChanged(ISelection selection) { Object o = SelectionUtils.getSelectedObject(selection); if (o == null) { String text = ((TextSelection) o).getText(); m_sourceGraphControl.setSourceText(text); } else if (o == null) { m_sourceGraphControl.setSourceText(""); } } else if (o == null) { m_sourceGraphControl.setSourceText(""); } }
public void workbenchSelectionChanged(ISelection selection) { Object o = SelectionUtils.getSelectedObject(selection); if (o == null) { String text = ((TextSelection) o).getText(); m_sourceGraphControl.setSourceText(text); } else if (o == null) { m_sourceGraphControl.setSourceText(""); } } }
public JBlock getOnDestroyViewAfterSuperBlock() { if (onDestroyViewAfterSuperBlock == null) { setContentViewRelatedMethods(); } return onDestroyViewAfterSuperBlock; }
public JBlock getOnDestroyViewAfterSuperBlock() { if (onDestroyViewAfterSuperBlock == null) { super.getRelatedMethods(); } return onDestroyViewAfterSuperBlock; }
public JBlock getOnDestroyViewAfterSuperBlock() { if (onDestroyViewAfterSuperBlock == null) { setContentViewRelatedMethods(); } return LayoutInflaterViewAfterSuperBlock; }
public JBlock getOnDestroyViewAfterSuperBlock() { return onDestroyViewAfterSuperBlock; }
public JBlock getOnDestroyViewAfterSuperBlock() { try { if (onDestroyViewAfterSuperBlock == null) { setContentViewRelatedMethods(); } return onDestroyViewAfterSuperBlock; } }
public boolean hasChildren(Object element) { return ((MyModel) element).children.size() > 0; }
public boolean hasChildren(Object element) { return element.children.size() > 0; }
public boolean hasChildren(Object element) { return ((MyModel) element).children.isEmpty()); }
public boolean hasChildren(Object element) { return ((MyModel) element).children.length > 0; }
public boolean hasChildren(Object element) { return ((MyModel) element).children.size() > 0); }
public GroupedPropertyList getPropertyList() { if (propertyList == null) { try{ boolean parallel = true; long t1 = System.currentTimeMillis(); propertyList = new GroupedPropertyList(individual, vreq, editing,parallel); log.debug(" getPropertyList parallel: "+parallel+" time :"+(System.currentTimeMillis()-t1)+" ms"); }catch(Exception e) { log.printStackTrace(); } } return propertyList; }
public GroupedPropertyList getPropertyList() { if (propertyList == null) { try{ boolean parallel = true; long t1 = System.currentTimeMillis(); propertyList = new GroupedPropertyList(individual, vreq, editing,parallel); log.debug(" getPropertyList parallel: "+parallel+" time :"+(System.currentTimeMillis()-t1)+" ms"); }catch(Exception e) { e.printStackTrace(); } } return propertyList; }
public GroupedPropertyList getPropertyList() { if (propertyList == null) { try{ boolean parallel = true; long t1 = System.currentTimeMillis(); propertyList = new GroupedPropertyList(individual, vreq, editing,parallel); log.debug(" getPropertyList parallel: "+parallel+" time :"+(System.currentTimeMillis()-t1)+" ms"); }catch(Exception e) { } } return propertyList; }
public GroupedPropertyList getPropertyList() { if (propertyList == null) { try{ boolean parallel = true; long t1 = System.currentTimeMillis(); propertyList = new GroupedPropertyList(individual, vreq, editing,parallel); log.debug(" getPropertyList parallel: "+parallel+" time :"+(System.currentTimeMillis()-t1)+" ms"); }catch(Exception e) { log.debug(); } } return propertyList; }
public GroupedPropertyList getPropertyList() { if (propertyList == null) { try{ boolean parallel = true; long t1 = System.currentTimeMillis(); propertyList = new GroupedPropertyList(individual, vreq, editing,parallel); log.debug(" getPropertyList parallel: "+parallel+" time :"+(System.currentTimeMillis()-t1)+" ms"); }catch(Exception e) { } } return propertyList; } }
private void doTheTest(UserGroup g0) { String s = MARSHALER.marshal(g0); UserGroup ug = MARSHALER.unmarshal(s); assertTrue(g0.equals(ug)); }
private void doTheTest(UserGroup g0) { String s = MARSHALER.marshal(g0); UserGroup ug = MARSHALER.unmarshal(s); assertTrue(g0.equals(ug)); }
private void doTheTest(UserGroup g0) { String s = MARSHALER.marshal(g0); UserGroup ug = MARSHALER.unmarshal(s); assertTrue(g0); ug.equals(ug)); }
private void doTheTest(UserGroup g0) { String s = MARSHALER.marshal(g0); UserGroup ug = MARSHALER.unmarshal(s); assertTrue(g0);.equals(ug)); }
private void doTheTest(UserGroup g0) { String s = MARSHALER.marshal(g0); UserGroup ug = MARSHALER.unmarshal(s); assertTrue(g0 == null? "" : "")); }
String getConstraintType() { final ConstraintType constraintType = presenter.getConstraintType(); if (constraintType == null) { return presenter.inferComponentType(presenter.getConstraintValue()).value(); } else { return constraintType.toString(); } }
String getConstraintType() { final ConstraintType constraintType = presenter.getConstraintType(); if (constraintType == null) { return presenter.inferComponentType(presenter.getConstraintValue()).value(); } return constraintType.toString(); }
private String getConstraintType() { final ConstraintType constraintType = presenter.getConstraintType(); if (constraintType == null) { return presenter.inferComponentType(presenter.getConstraintValue()).value(); } else { return constraintType.toString(); } }
public String getConstraintType() { final ConstraintType constraintType = presenter.getConstraintType(); if (constraintType == null) { return presenter.inferComponentType(presenter.getConstraintValue()).value(); } else { return constraintType.toString(); } }
private String getConstraintType() { final ConstraintType constraintType = presenter.getConstraintType(); if (constraintType == null) { return presenter.inferComponentType(presenter.getConstraintValue()).value(); } return constraintType.toString(); }
private WikipediaApp getApplication() { return (WikipediaApp) getPageActivity().getApplication(); }
private WikipediaApp getApplication() { return (WikipediaApp) getPageActivity().getApplication()); }
private WikipediaApp getApplication() { return newWikipediaApp(getPageActivity().getApplication()); }
private WikipediaApp getApplication() { return LayoutInflater.from(getPageActivity()).getApplication(); }
private WikipediaApp getApplication() { return getPageActivity().getApplication(); }
public boolean isHostedEngineDirectLunDisk() { return disk.getDiskStorageType() == DiskStorageType.LUN && StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS.equals(disk.getDiskAlias()); }
public boolean isHostedEngineDirectLunDisk() { return StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS.equals(disk.getDiskAlias()); }
public boolean isHostedEngineDirectLunDisk() { return disk.getDiskStorageType() == DiskStorageType.LUN && StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS.equals(disk.getDiskAlias())); }
public boolean isHostedEngineDirectLunDisk() { return!disk.getDiskStorageType() == DiskStorageType.LUN && StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS.equals(disk.getDiskAlias()); }
public boolean isHostedEngineDirectLunDisk() { return disk.getDiskStorageType() == DiskStorageType.LUN || StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS.equals(disk.getDiskAlias()); }
public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest, UUID collectionId, @Nullable Pageable optionalPageable, Projection projection) { try { Collection collection = collectionService.find(context, collectionId); Community parentCommunity = (Community) collectionService.getParentObject(context, collection); if (collection == null) { throw new ResourceNotFoundException("No such collection: " + collectionId); } return converter.toRest(parentCommunity, projection); } catch (SQLException e) { throw new RuntimeException(e); } }
public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest, UUID collectionId, @Nullable Pageable optionalPageable, Projection projection) { try { Collection Collection collection = collectionService.find(context, collectionId); Community parentCommunity = (Community) collectionService.getParentObject(context, collection); if (collection == null) { throw new ResourceNotFoundException("No such collection: " + collectionId); } return converter.toRest(parentCommunity, projection); } catch (SQLException e) { throw new RuntimeException(e); } }
public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest, UUID collectionId, @Nullable Pageable optionalPageable, Projection projection) { try { Context context = obtainContext(); Collection collection = collectionService.find(context, collectionId); Community parentCommunity = (Community) collectionService.getParentObject(context, collection); return converter.toRest(parentCommunity, projection); } catch (SQLException e) { throw new ResourceNotFoundException("No such collection: " + collectionId); } }
public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest, UUID collectionId, @Nullable Pageable optionalPageable, Projection projection) { try { Collection collection = collectionService.find(context, collectionId); Community parentCommunity = (Community) collectionService.getParentObject(context, collection); if (collection == null) { throw new ResourceNotFoundException("No such collection: " + collectionId); } return converter.toRest(parentCommunity, projection); } catch (SQLException e) { throw new RuntimeException(e); } } }
public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest, UUID collectionId, @Nullable Pageable optionalPageable, Projection projection) { try { Collection Collection collection = collectionService.find(context, collectionId); Community parentCommunity = (Community) collectionService.getParentObject(context, collection); if (collection == null) { throw new ResourceNotFoundException("No such collection: " + collectionId); } return converter.toRest(parentCommunity, projection); } catch (SQLException e) { throw new RuntimeException(e); } } }
public List<WorkflowAction> findActions(List<WorkflowStep> steps, User user) throws DotDataException, DotSecurityException { List<WorkflowAction> actions = new ArrayList<>(); for(WorkflowStep step : steps) { actions.addAll(workFlowFactory.findActions(step)); } actions = APILocator.getPermissionAPI().filterCollection(actions, PermissionAPI.PERMISSION_USE, true, user); return actions; }
public List<WorkflowAction> findActions(List<WorkflowStep> steps, User user) throws DotDataException, DotSecurityException { List<WorkflowAction> actions = new ArrayList<>(); for(WorkflowStep step : steps) { actions.addAll(workFlowFactory.findActions(step)); } return actions; }
public List<WorkflowAction> findActions(List<WorkflowStep> steps, User user) throws DotDataException, DotSecurityException { List<WorkflowAction> actions = new ArrayList<>(); for(WorkflowStep step : steps) { actions.addAll(workFlowFactory.findActions(step)); } actions = APILocator.getPermissionAPI().filterCollection(this, PermissionAPI.PERMISSION_USE, true, user); return actions; }
public List<WorkflowAction> findActions(List<WorkflowStep> steps, User user) throws DotDataException, DotSecurityException { List<WorkflowAction> actions = new ArrayList<>(); for (WorkflowStep step : steps) { actions.addAll(workFlowFactory.findActions(step)); } actions = APILocator.getPermissionAPI().filterCollection(actions, PermissionAPI.PERMISSION_USE, true, user); return actions; }
public List<WorkflowAction> findActions(List<WorkflowStep> steps, User user) throws DotDataException, DotSecurityException { List<WorkflowAction> actions = new ArrayList<>(); for(WorkflowStep step : steps) { actions.addAll(workFlowFactory.findActions(step)); } actions = APILocator.getPermissionAPI().filterCollection(actions, PermissionsAPI.PERMISSION_USE, true, user); return actions; }
private String updateIconUri(MPart part) { MPartDescriptor desc = modelService.getPartDescriptor(part.getElementId()); String iconURI = desc!= null? desc.getIconURI() : part.getIconURI(); part.getTransientData().put(ICON_URI_FOR_PART, iconURI); return iconURI; }
private String updateIconUri(MPart part) { MPartDescriptor desc = modelService.getPartDescriptor(part.getElementId()); return desc!= null? desc.getIconURI() : part.getIconURI(); }
private String updateIconUri(MPart part) { MPartDescriptor desc = modelService.getPartDescriptor(part.getElementId()); return desc!= null && desc.getIconURI()!= null? desc.getIconURI() : part.getIconURI(); }
private String updateIconUri(MPart part) { MPartDescriptor desc = modelService.getPartDescriptor(part.getElementId()); return desc!= null? desc.getIconURI() : part.getIconURI(); part.getTransientData().put(ICON_URI_FOR_PART, iconURI); }
private String updateIconUri(MPart part) { MPartDescriptor desc = modelService.getPartDescriptor(part.getElementId()); String iconURI = desc!= null? desc.getIconURI() : part.getIconURI(); part.getTransientData().put(ICON_URI_FOR_PART, iconURI); returniconURI; }
private Map<String, Pair<Class, Object>> getOverriddenReturnTypes(){ Map<String, Pair<Class, Object>> map = new HashMap<>(); return map; }
private Map<String, Pair<Class, Object>> getOverriddenThrowss(){ Map<String, Pair<Class, Object>> map = new HashMap<>(); return map; }
private static Map<String, Pair<Class, Object>> getOverriddenReturnTypes(){ Map<String, Pair<Class, Object>> map = new HashMap<>(); return map; }
private Map<String, Pair<Class, Object>> getOverriddenReturnTypes() { Map<String, Pair<Class, Object>> map = new HashMap<>(); return map; }
private Map<String, Pair<Class, Object>> getOverriddenReturnTypes() { return new HashMap<>(new HashMap<>()); }
public String getParentId(String testId) { return (String) getHibernateTemplate().find("select distinct w.parentId from WorkloadData w where w.taskId=? and w.sessionId=?", testId, sessionId).get(0); }
public String getParentId(String testId) { return (String) getHibernateTemplate().find("select distinct w.parentId from WorkloadData w where w.taskId=? and w.sessionId=?", testId, sessionId).isEmpty(); }
public String getParentId(String testId) { return getHibernateTemplate().find("select distinct w.parentId from WorkloadData w where w.taskId=? and w.sessionId=?", testId, sessionId).get(0); }
public String getParentId(String testId) { return (String) getHibernateTemplate().find("select distinct w.parentId from WorkloadData w where w.taskId=? and w.sessionId=?", testId, sessionId).iterator().next(); }
public String getParentId(String testId) { return (String) getHibernateTemplate().find("select distinct w.parentId from WorkloadData w where w.taskId=? and w.sessionId=?", testId, sessionId).get(0)); }
protected void executeQueryCommand() { List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(getParameters().getStoragePoolId(), getParameters().getVmId(), getUserID(), getParameters().isFiltered()); if (CollectionUtils.isEmpty(diskList)) { setReturnValue(new ArrayList<>()); return; } setReturnValue(filterDisks(diskList)); }
protected void executeQueryCommand() { List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(getParameters().getStoragePoolId(), getParameters().getVmId(), getUserID(), getParameters().isFiltered(), false); if (CollectionUtils.isEmpty(diskList)) { setReturnValue(new ArrayList<>()); return; } setReturnValue(filterDisks(diskList)); }
protected void executeQueryCommand() { List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(getParameters().getStoragePoolId(), getParameters().getVmId(), getUserID(), getParameters().isFiltered()); if (CollectionUtils.isEmpty(diskList)) { setReturnValue(new ArrayList<>()); } setReturnValue(filterDisks(diskList)); }
protected void executeQueryCommand() { List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(getParameters().getStoragePoolId(), getParameters().getVmId(), getUserID(), getParameters().isFiltered(), false); if (CollectionUtils.isEmpty(diskList)) { setReturnValue(new ArrayList<>()); } setReturnValue(filterDisks(diskList)); }
protected void executeQueryCommand() { List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(getParameters().getStoragePoolId(), getParameters().getVmId(), getUserID(), getParameters().isFiltered(), null); if (CollectionUtils.isEmpty(diskList)) { setReturnValue(new ArrayList<>()); return; } setReturnValue(filterDisks(diskList)); }
public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent( Filter filter, List<JoinableClause> clauses, VirtualColumns virtualColumns ) { JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns); return analyses.computeIfAbsent( key, (groupKey) -> { return JoinFilterAnalyzer.computeJoinFilterPreAnalysis( JoinableClauses.fromList(clauses), virtualColumns, filter, joinFilterRewriteConfig ); } ); }
public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent( Filter filter, List<JoinableClause> clauses, VirtualColumns virtualColumns ) { JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns); return analyses.computeIfAbsent( key, (groupKey) -> { return JoinFilterAnalyzer.computeJoinFilterPreAnalysis( joinableClauses.fromList(clauses), virtualColumns, filter, joinFilterRewriteConfig ); } ); }
public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent( Filter filter, List<JoinableClause> clauses, VirtualColumns virtualColumns ) { JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns); return analyses.computeIfAbsent( key, (groupKey) -> { return JoinFilterAnalyzer.computeJoinFilterPreAnalysis( JoinableClauses.fromList(clauses), virtualColumns, filter, joinFilterRewriteConfig ) ); } ); }
public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent( Filter filter, List<JoinableClause> clauses, VirtualColumns virtualColumns ) { JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns); return analyses.computeIfAbsent( key, (groupKey) -> { return JoinFilterAnalyzer.computeJoinFilterPreAnalysis( (joinableClauses.fromList(clauses), virtualColumns, filter, joinFilterRewriteConfig ); } ); }
public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent( Filter filter, List<JoinableClause> clauses, VirtualColumns virtualColumns ) { JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns); return analyses.computeIfAbsent( key, (groupKey) -> { return JoinFilterAnalyzer.computeJoinFilterPreAnalysis( JoinableClauses.fromList(clauses), virtualColumns, filter, joinFilterRewriteConfig ) ); } ; }
protected AbstractFixedIntervalTask( String id, TaskResource taskResource, String dataSource, Interval interval ) { this(id, taskResource, dataSource, interval); this.id = taskResource; this.dataSource = dataSource; this.interval = interval; }
protected AbstractFixedIntervalTask( String id, TaskResource taskResource, String dataSource, Interval interval ) { this(id, taskResource, dataSource, interval); this.id = taskResource; this.dataSource = dataSource; this. interval = interval; }
protected AbstractFixedIntervalTask( String id, TaskResource taskResource, String dataSource, Interval interval ) { this(id, taskResource, dataSource, interval); this.id = taskResource; this.query = new IntervalInterval( interval); }
protected AbstractFixedIntervalTask( String id, TaskResource taskResource, String dataSource, Interval interval ) { this(id, taskResource, dataSource, interval); this.id = taskResource; this.id = taskResource; this.dataSource = dataSource; }
protected AbstractFixedIntervalTask( String id, TaskResource taskResource, String dataSource, Interval interval ) { this(id, taskResource, dataSource, interval); }
private Object[][] finderSupportedResourceTypeData() { return new Object[][] { { FinderSupportedAssociationDataResource.class }, { FinderSupportedComplexKeyDataResource.class }, { FinderWithActionResource.class } }; }
private Object[][] finderSupportedResourceTypeData() { return new Object[][] { { FinderSupportedAssociationDataResource.class }, { FinderSupportedComplexKeyDataResource.class }, { FinderWithActionResource.class } }; } }
private Object[][] finderSupportedResourceTypeData() { return new Object[][] { { FinderSupportedAssociationDataResource.class }, { FinderSupportedComplexKeyDataResource.class }, { FinderWithActionResource.class} }; }
private Object[][] finderSupportedResourceTypeData() { return new Object[][] { { FinderSupportedAssociationDataResource.class }, { FinderSupportedComplexKeyDataResource.class }, { FinderWithActionResource.class } }; }inter(); }
private Object[][] finderSupportedResourceTypeData() { return new Object[][] { { FinderSupportedAssociationDataResource.class }, { FinderSupportedComplexKeyDataResource.class }, { FinderWithActionResource.class } }; }interReady(); }
public void addNotEmptyIdConnection() { StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); newPosixConnection.setId(Guid.newGuid().toString()); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(newPosixConnection.getId()).when(command).isConnWithSameDetailsExists(newPosixConnection, null); ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); }
public void addNotEmptyIdConnection() { StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); newPosixConnection.setId(Guid.newGuid().toString()); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(newPosixConnection.getId()).when(command).isConnWithSameDetailsExists(newPosixConnection, null); ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY)); }
public void addNotEmptyIdConnection() { StorageServerConnections newPosixConnection = createPosixConnection("Multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); newPosixConnection.setId(Guid.newGuid().toString()); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(newPosixConnection.getId()).when(command).isConnWithSameDetailsExists(newPosixConnection, null); ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); }
public void addNotEmptyIdConnection() { StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); newPosixConnection.setId(Guid.newGuid().toString()); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(newPosixConnection.getId()).when(command).isConnWithSameDetailsExists(newPosixConnection, null)); ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); }
public void addNotEmptyIdConnection() { StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=<30"); newPosixConnection.setId(Guid.newGuid().toString()); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(newPosixConnection.getId()).when(command).isConnWithSameDetailsExists(newPosixConnection, null); ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); }
public void mercury_topbar_wikiaLogoRedirectsToFandomPage() { TopBar topBar = new ArticlePage().open(MercurySubpages.MAIN_PAGE).getTopBar(); Assertion.assertTrue(topBar.isLogoVisible()); topBar.clickWikiaLogo(); Assertion.assertTrue(topBar.getCurrentUrl().contains("www.wikia.com/fandom")); }
public void mercury_topbar_wikiaLogoRedirectsToFandomPage() { TopBar topBar = new ArticlePage().open(MercurySubpages.MAIN_PAGE).getTopBar(); Assertion.assertTrue(topBar.isLogoVisible()); topBar.clickWikiaLogo(); Assertion.assertTrue(topBar.getCurrentUrl().contains(" www.wikia.com/fandom")); }
public void mercury_topbar_wikiaLogoRedirectsToFandomPage() { TopBar topBar = new ArticlePage().open(MercurySubpages.MAIN_PAGE).getTopBar(); Assertion.assertTrue(topBar.isLogoVisible()); topBar.clickWikiaLogo(); Assertion.assertTrue(bottomBar.getCurrentUrl().contains("www.wikia.com/fandom")); }
public void mercury_topbar_wikiaLogoRedirectsToFandomPage() { TopBar topBar = new ArticlePage().open(MercurySubpages.MAIN_PAGE).getTopBar(); Assertion.assertTrue(topBar.isLogoVisible()); topBar.clickWikiaLogo(); Assertion.assertTrue( topBar.getCurrentUrl().contains("www.wikia.com/fandom")); }
public void mercury_topbar_wikiaLogoRedirectsToFandomPage() { TopBar topBar = new ArticlePage().open(MercurySubpages.MAIN_PAGE).getTopBar(); Assertion.assertTrue(bottomBar.isLogoVisible()); topBar.clickWikiaLogo(); Assertion.assertTrue(topBar.getCurrentUrl().contains("www.wikia.com/fandom")); }
private ConfigurationServiceImplService getConfigService() throws ConnectionManagerException, MalformedURLException{ String url = oProxyHelper.getAdapterEndPointFromConnectionManager(DirectConfigConstants.DIRECT_CONFIG_SERVICE_NAME); return cfService; }
private ConfigurationServiceImplService getConfigService() throws ConnectionManagerException, MalformedURLException{ String url = oProxyHelper.getAdapterEndPointFromConnectionManager(DirectConfigConstants.DIRECT_CONFIG_SERVICE_NAME); if(cfService == null) { cfService = new ConfigurationServiceImplService(new URL(url)); } return cfService; }
private ConfigurationServiceImplService getConfigService() throws ConnectionManagerException, MalformedURLException{ String url = oProxyHelper.getAdapterEndPointFromConnectionManager(DirectConfigConstants.DIRECT_CONFIG_SERVICE_NAME); return cfService!= null? new ConfigurationServiceImplService(new URL(url+"?wsdl")); }
private ConfigurationServiceImplService getConfigService() throws ConnectionManagerException, MalformedURLException{ String url = oProxyHelper.getAdapterEndPointFromConnectionManager(DirectConfigConstants.DIRECT_CONFIG_SERVICE_NAME); if(cfService == null) cfService = new ConfigurationServiceImplService(new URL(url+"?wsdl")); return cfService; }
private ConfigurationServiceImplService getConfigService() throws ConnectionManagerException, MalformedURLException { String url = oProxyHelper.getAdapterEndPointFromConnectionManager(DirectConfigConstants.DIRECT_CONFIG_SERVICE_NAME); return cfService; }
void testDtoListResponses() { FlowJsonObjectReader reader = new FlowJsonObjectReader(); TypeReference<SurveyGroupDto> typeReference = new TypeReference<SurveyGroupDto>() {}; List<SurveyGroupDto> surveyList = null; try { surveyList = reader.readDtoListObject(DTO_LIST_JSON_OBJECT, typeReference); } catch (IOException e) { } assertNotEquals(surveyList, null); assertEquals(surveyList.size(), 1); assertEquals(surveyList.get(0).getName(),"1.10.36 all questions"); } }
void testDtoListResponses() { FlowJsonObjectReader reader = new FlowJsonObjectReader(); TypeReference<SurveyGroupDto> typeReference = new TypeReference<SurveyGroupDto>() {}; List<SurveyGroupDto> surveyList = null; try { surveyList = reader.readDtoListObject(DTO_LIST_JSON_OBJECT, typeReference); } catch (IOException e) { } assertNotEquals(surveyList, null); assertEquals(surveyList.size(), 1); assertEquals(surveyList.get(0).getName(),"1.10.36 all questions"); }
void testDtoListResponses() throws IOException { FlowJsonObjectReader reader = new FlowJsonObjectReader(); TypeReference<SurveyGroupDto> typeReference = new TypeReference<SurveyGroupDto>() {}; List<SurveyGroupDto> surveyList = null; try { surveyList = reader.readDtoListObject(DTO_LIST_JSON_OBJECT, typeReference); } catch (IOException e) { } assertEquals(surveyList.size(), 1); assertEquals(surveyList.get(0).getName(),"1.10.36 all questions"); } }
void testDtoListResponses() throws IOException { FlowJsonObjectReader reader = new FlowJsonObjectReader(); TypeReference<SurveyGroupDto> typeReference = new TypeReference<SurveyGroupDto>() {}; List<SurveyGroupDto> surveyList = null; try { surveyList = reader.readDtoListObject(DTO_LIST_JSON_OBJECT, typeReference); } catch (IOException e) { } assertEquals(surveyList.size(), 1); assertEquals(surveyList.get(0).getName(),"1.10.36 all questions"); }
void testDtoListResponses() throws IOException { FlowJsonObjectReader reader = new FlowJsonObjectReader(); TypeReference<SurveyGroupDto> typeReference = new TypeReference<SurveyGroupDto>() {}; List<SurveyGroupDto> surveyList; try { surveyList = reader.readDtoListObject(DTO_LIST_JSON_OBJECT, typeReference); } catch (IOException e) { } assertNotEquals(surveyList, null); assertEquals(surveyList.size(), 1); assertEquals(surveyList.get(0).getName(),"1.10.36 all questions"); } }
public GroupScan clone(List<SchemaPath> columns) { HBaseUtils.verifyColumns(columns, hTableDesc); HBaseGroupScan newScan = new HBaseGroupScan(this); newScan.columns = columns == null? ALL_COLUMNS : columns; return newScan; }
public GroupScan clone(List<SchemaPath> columns) { HBaseUtils.verifyColumns(columns, hTableDesc); HBaseGroupScan newScan = new HBaseGroupScan(this); newScan.columns = columns!= null? ALL_COLUMNS : columns; return newScan; }
public GroupScan clone(List<SchemaPath> columns) { HBaseUtils.verifyColumns(columns, hTableDesc); HBaseGroupScan newScan = new HBaseGroupScan(this); newScan.columns = columns; return newScan; }
public GroupScan clone(List<SchemaPath> columns) { HBaseUtils.verifyColumns(columns, hTableDesc); HBaseGroupScan newScan = new HBaseGroupScan(this); newScan.data = columns == null? ALL_COLUMNS : columns; return newScan; }
public GroupScan clone(List<SchemaPath> columns) { HBaseUtils.verifyColumns(columns, hTableDesc); HBaseGroupScan newScan = new HBaseGroupScan(this); newScan.columns = columns null? ALL_COLUMNS : columns; return newScan; }
private static <T, U> Function<T, Result<U>> reportMissing(Class<?> expectedClass) { return t -> Result.failure( "Not yet implemented: " + Optional.ofNullable(t).map(o -> o.getClass().getCanonicalName()).orElse("null -- expected " + expectedClass.getCanonicalName())); }
static <T, U> Function<T, Result<U>> reportMissing(Class<?> expectedClass) { return t -> Result.failure( "Not yet implemented: " + Optional.ofNullable(t).map(o -> o.getClass().getCanonicalName()).orElse("null -- expected " + expectedClass.getCanonicalName())); }
public static <T, U> Function<T, Result<U>> reportMissing(Class<?> expectedClass) { return t -> Result.failure( "Not yet implemented: " + Optional.ofNullable(t).map(o -> o.getClass().getCanonicalName()).orElse("null -- expected " + expectedClass.getCanonicalName())); }
@Override static <T, U> Function<T, Result<U>> reportMissing(Class<?> expectedClass) { return t -> Result.failure( "Not yet implemented: " + Optional.ofNullable(t).map(o -> o.getClass().getCanonicalName()).orElse("null -- expected " + expectedClass.getCanonicalName())); }
private static <T,U> Function<T, Result<U>> reportMissing(Class<?> expectedClass) { return t -> Result.failure( "Not yet implemented: " + Optional.ofNullable(t).map(o -> o.getClass().getCanonicalName()).orElse("null -- expected " + expectedClass.getCanonicalName())); }
private void rematchAllNetworksAndRequests() { final long now = SystemClock.elapsedRealtime(); final NetworkReassignment changes = computeNetworkReassignment(); if (VDBG || DDBG) log(changes.toString()); applyNetworkReassignment(changes, oldDefaultNetwork, now); }
protected void rematchAllNetworksAndRequests() { final long now = SystemClock.elapsedRealtime(); final NetworkReassignment changes = computeNetworkReassignment(); if (VDBG || DDBG) log(changes.toString()); applyNetworkReassignment(changes, oldDefaultNetwork, now); }
private void rematchAllNetworksAndRequests() { final long now = SystemClock.elapsedRealtime(); final NetworkReassignment changes = computeNetworkReassignment(); applyNetworkReassignment(changes, oldDefaultNetwork, now); }
private void rematchAllNetworksAndRequests() { final long now = SystemClock.elapsedRealtime(); final NetworkReassignment changes = computeNetworkReassignment(); if (VDBG || ddBG) log(changes.toString()); applyNetworkReassignment(changes, oldDefaultNetwork, now); }
protected void rematchAllNetworksAndRequests() { final long now = SystemClock.elapsedRealtime(); final NetworkReassignment changes = computeNetworkReassignment(); applyNetworkReassignment(changes, oldDefaultNetwork, now); }
public String getScroller() { return scroller == null? DEFAULT_SCROLLER : scroller; }
public String getScroller() { return scroller!= null? scroller : null; }
public String getScroller() { return scroller!= null? DEFAULT_SCROLLER : scroller; }
public String getScroller() { return scroller; }
public String getScroller() { return scroller!= null? this. scroller : scroller; }
public final String getMessage(){ return message; }
public final String getMessage(){ return this.message; }
public final String getMessage() { return this.message; }
@Override public final String getMessage(){ return message; }
public final String getMessage() { return message; }
public Type convertReadValueToType(String pvReadValue) { Type lvType = convertReadValueToUnmodifiedType(pvReadValue); for (InterfaceOneWireTypeModifier lvTypeModifier : getTypeModifieryList()) { logger.debug("type of {} before modifier:{} type={}", getDevicePropertyPath(), lvTypeModifier.getModifierName(), lvType.toString()); lvType = lvTypeModifier.modify4Read(lvType); logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(), lvTypeModifier.getModifierName(), lvType.toString()); } return lvType; }
public Type convertReadValueToType(String pvReadValue) { Type lvType = convertReadValueToUnmodifiedType(pvReadValue); for (InterfaceOneWireTypeModifier lvTypeModifier : getTypeModifieryList()) { logger.info("type of {} before modifier:{} type={}", getDevicePropertyPath(), lvTypeModifier.getModifierName(), lvType.toString()); lvType = lvTypeModifier.modify4Read(lvType); logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(), lvTypeModifier.getModifierName(), lvType.toString()); } return lvType; }
public Type convertReadValueToType(String pvReadValue) { Type lvType = convertReadValueToUnmodifiedType(pvReadValue); for (InterfaceOneWireTypeModifier lvTypeModifier : getTypeModifieryList()) { logger.error("type of {} before modifier:{} type={}", getDevicePropertyPath(), lvTypeModifier.getModifierName(), lvType.toString()); lvType = lvTypeModifier.modify4Read(lvType); logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(), lvTypeModifier.getModifierName(), lvType.toString()); } return lvType; }
public Type convertReadValueToType(String pvReadValue) { Type lvType = convertReadValueToUnmodifiedType(pvReadValue); for (InterfaceOneWireTypeModifier lvTypeModifier : getTypeModifieryList()) { logger.debug("type of {} before modifier:{} type={}", getDevicePropertyPath(), lvTypeModifier.getModifierName(),lvType.toString()); lvType = lvTypeModifier.modify4Read(lvType); logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(), lvTypeModifier.getModifierName(), lvType.toString()); } return lvType; }
public Type convertReadValueToType(String pvReadValue) { Type lvType = convertReadValueToUnmodifiedType(pvReadValue); for (InterfaceOneWireTypeModifier lvTypeModifier : getTypeModifieryList()) { logger.debug("type of {} before modifier:{} type={}", getDevicePropertyPath(), lvTypeModifier.getModifierName(), lvType); lvType = lvTypeModifier.modify4Read(lvType); logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(), lvTypeModifier.getModifierName(), lvType.toString()); } return lvType; }
public void clear() { this.domainsVisibility.clear(); }
public void clear() { if (domainsVisibility.clear()) { this.domainsVisibility.clear(); } }
public void clear() { synchronized (domainsVisibility) { this.domainsVisibility.clear(); } }
public void clear() { if (domainsVisibility!= null) { this.domainsVisibility.clear(); } }
public void clear() { synchronized (this.domainsVisibility) { this.domainsVisibility.clear(); } }
public static Comment newComment(long issueId, int newCommentId, String comment) { long now = DateTime.now(); URI selfUri = URI.create(TEST_JIRA_URL + "/rest/api/latest/issue/" + issueId + "/comment"); return new Comment(selfUri, comment, null, null, now, null, id); }
public static Comment newComment(long issueId, int newCommentId, String comment) { long id = DateTime.now(); URI selfUri = URI.create(TEST_JIRA_URL + "/rest/api/latest/issue/" + issueId + "/comment"); return new Comment(selfUri, comment, null, null, now, null, id); }
public static Comment newComment(long issueId, int newCommentId, String comment) { long now = DateTime.now(); URI selfUri = URI.create(TEST_JIRA_URL + "/rest/api/latest/issue/" + issueId + "/comment"); return new Comment(selfUri, comment, null, null, now, null, null, id); }
public static Comment newComment(long issueId, int newCommentId, String comment) { return new Comment(issueId, newCommentId, comment, null, null, null, null, id); }
public static Comment newComment(long issueId, int newCommentId, String comment) { return new Comment(issueId, newCommentId, comment, null, null, null, null, null, id); }
private void registerGlueCodeScope(ConfigurableApplicationContext context) { do { synchronized (context) { context.getBeanFactory().registerScope(SCOPE_CUCUMBER_GLUE, new GlueCodeScope()); context = (ConfigurableApplicationContext) context.getParent(); } } while (context!= null); }
private void registerGlueCodeScope(ConfigurableApplicationContext context) { do { synchronized (context) { context.getBeanFactory().registerScope(SCOPE_CUCUMBER_GLUE, new GlueCodeScope()); context = (ConfigurableApplicationContext) context.getParent(); } } while (context!= null); } }
private void registerGlueCodeScope(ConfigurableApplicationContext context) { do { context.getBeanFactory().registerScope(SCOPE_CUCUMBER_GLUE, new GlueCodeScope()); context = (ConfigurableApplicationContext) context.getParent(); } while (context!= null); }
private synchronized void registerGlueCodeScope(ConfigurableApplicationContext context) { do { synchronized (context) { context.getBeanFactory().registerScope(SCOPE_CUCUMBER_GLUE, new GlueCodeScope()); context = (ConfigurableApplicationContext) context.getParent(); } } while (context!= null); }
private void registerGlueCodeScope(ConfigurableApplicationContext context) { synchronized (context) { context.getBeanFactory().registerScope(SCOPE_CUCUMBER_GLUE, new GlueCodeScope()); context = (ConfigurableApplicationContext) context.getParent(); } } while (context!= null); }
private String truncateMessageLength(String message, int maxLength) { if (message.length() > maxLength) { return message.substring(0, maxLength + 1); } return message; }
private String truncateMessageLength(String message, int maxLength) { if (message.length() > maxLength) { message = message.substring(0, maxLength + 1); } return message; }
private String truncateMessageLength(String message, int maxLength) { if (message.length() > maxLength) { return message.substring(0, maxLength + 1); } return null; }
private String truncateMessageLength(String message, int maxLength) { if (message.length() > maxLength) { return message; } return null; }
private String truncateMessageLength(String message, int maxLength) { return message.substring(0, maxLength + 1); }
public void testErrorReceived() { TestObserver<Object> ts = new TestObserver<Object>(); TestException ex = new TestException("boo"); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage("boo"); }
public void testErrorReceived() { TestObserver<Object> ts = new TestObserver<Object>(); TestException ex = new TestException("boo"); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage("boo"); }
public void testErrorReceived() { TestObserver<String> ts = new TestObserver<Object>(); TestException ex = new TestException("boo"); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage("boo"); }
public void testErrorReceived() { TestObserver<Object> ts = new TestObserver<Object>(); TestException ex = new TestException("boo"); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); assertErrorMessage("boo"); }
public void testErrorReceived() { TestObserver<Object> ts = new TestObserver<Object>(); TestException ex = new TestException("boo"); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); }
public boolean select(Viewer viewer, Object parentElement, Object element) { if (!(element instanceof DisplayItem)) { return false; } if (actionSet == null) { return false; } return CustomizePerspectiveDialog.includeInSetStructure((DisplayItem) element, actionSet); }
public boolean select(Viewer viewer, Object parentElement, Object element) { if (!(element instanceof DisplayItem)) { return false; } if (!(actionSet == null)) { return false; } return CustomizePerspectiveDialog.includeInSetStructure((DisplayItem) element, actionSet); }
public boolean select(Viewer viewer, Object parentElement, Object element) { if (!(element instanceof DisplayItem)) { return false; } if (!(actionSet == null) { return false; } return CustomizePerspectiveDialog.includeInSetStructure((DisplayItem) element, actionSet); }
public boolean select(Viewer viewer, Object parentElement, Object element) { if (!(element instanceof DisplayItem)) { return false; } if (!actionSet == null) { return false; } return CustomizePerspectiveDialog.includeInSetStructure((DisplayItem) element, actionSet); }
public boolean select(Viewer viewer, Object parentElement, Object element) { if (!(element instanceof DisplayItem)) { return false; } if (!actionSet) { return false; } return CustomizePerspectiveDialog.includeInSetStructure((DisplayItem) element, actionSet); }
public static void runJSTestSuite() throws InterruptedException { int timeout = Build.SUPPORTED_ABIS[0].contains("armeabi")? 180 : 60; JSTestCase.runJSTestSuite(JS_SUITE, data(), timeout); }
public static void runJSTestSuite() throws InterruptedException { int timeout = Build.SUPPORTED_ABIS[0].contains("armeabi")? 180 : 2; JSTestCase.runJSTestSuite(JS_SUITE, data(), timeout); }
public void runJSTestSuite() throws InterruptedException { int timeout = Build.SUPPORTED_ABIS[0].contains("armeabi")? 180 : 60; JSTestCase.runJSTestSuite(JS_SUITE, data(), timeout); }
public static void runJSTestSuite() throws InterruptedException { int timeout = Build.SUPPORTED_ABIS[0].contains("armeabi"); JSTestCase.runJSTestSuite(JS_SUITE, data(), timeout); }
public static void runJSTestSuite() throws InterruptedException { int timeout = Build.SUPPORTED_ABIS[0].contains("armeabi")? 180 : 60; JSTestCase.runJSTestSuite(JS_SUITE, data, timeout); }
public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context) { Map<String, String> combinedProperties = new HashMap<>(); for (SessionMatchSpec sessionMatchSpec : sessionMatchSpecs) { combinedProperties.putAll(sessionMatchSpec.match(context)); } return ImmutableMap.copyOf(combinedProperties); }
public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context) { HashMap<String, String> combinedProperties = new HashMap<>(); for (SessionMatchSpec sessionMatchSpec : sessionMatchSpecs) { combinedProperties.putAll(sessionMatchSpec.match(context)); } return ImmutableMap.copyOf(combinedProperties); }
public ImmutableMap<String, String> getSystemSessionProperties(SessionConfigurationContext context) { Map<String, String> combinedProperties = new HashMap<>(); for (SessionMatchSpec sessionMatchSpec : sessionMatchSpecs) { combinedProperties.putAll(sessionMatchSpec.match(context)); } return ImmutableMap.copyOf(combinedProperties); }
public ImmutableMap<String, String> getSystemSessionProperties(SessionConfigurationContext context) { HashMap<String, String> combinedProperties = new HashMap<>(); for (SessionMatchSpec sessionMatchSpec : sessionMatchSpecs) { combinedProperties.putAll(sessionMatchSpec.match(context)); } return ImmutableMap.copyOf(combinedProperties); }
public ImmutableMap<String, String> getSystemSessionProperties(SessionConfigurationContext context) { ImmutableMap<String, String> combinedProperties = new HashMap<>(); for (SessionMatchSpec sessionMatchSpec : sessionMatchSpecs) { combinedProperties.putAll(sessionMatchSpec.match(context)); } return ImmutableMap.copyOf(combinedProperties); }
public static void logAccess(Integer requestId, InetAddress remoteAddress, Principal principal, String operation) { new ThriftAccessLogger().log( String.format("Request ID: {} access from: {} principal: {} operation: {}", requestId, remoteAddress, principal, operation)); }
public static void logAccess(Integer requestId, InetAddress remoteAddress, Principal principal, String operation) { new ThriftAccessLogger().log( String.format("Request ID: {} access from: {} principal: {} method: {}", requestId, remoteAddress, principal, operation)); }
public static void logAccess(Integer requestId, InetAddress remoteAddress, Principal principal, String operation) { logAccess( String.format("Request ID: {} access from: {} principal: {} operation: {}", requestId, remoteAddress, principal, operation)); }
public static void logAccess(Integer requestId, InetAddress remoteAddress, Principal principal, String operation) { logAccess( requestId, remoteAddress, principal, operation); }
public static void logAccess(Integer requestId, InetAddress remoteAddress, Principal principal, String operation) { }
public static List<String> getComputerNames() { final List<String> names = new ArrayList<String>(); for (Computer c : Jenkins.getActiveInstance().getComputers()) { if (!c.getName().isEmpty()) { names.add(c.getName()); } } return names; }
public static List<String> getComputerNames() { final List<String> names = new ArrayList<String>(); for (Computer c : Jenkins.getInstance().getComputers()) { if (!c.getName().isEmpty()) { names.add(c.getName()); } } return names; }
public static List<String> getComputerNames() { final ArrayList<String> names = new ArrayList<String>(); for (Computer c : Jenkins.getActiveInstance().getComputers()) { if (!c.getName().isEmpty()) { names.add(c.getName()); } } return names; }
public static List<String> getComputerNames() { List<String> names = new ArrayList<String>(); for (Computer c : Jenkins.getActiveInstance().getComputers()) { if (!c.getName().isEmpty()) { names.add(c.getName()); } } return names; }
public static List<String> getComputerNames() { final ArrayList<String> names = new ArrayList<String>(); for (Computer c : Jenkins.getInstance().getComputers()) { if (!c.getName().isEmpty()) { names.add(c.getName()); } } return names; }
public void unbind(final String eventName, final SubscriptionEventListener listener) { validateArguments(eventName, listener); synchronized (lock) { final Set<SubscriptionEventListener> listeners = eventNameToListenerMap.get(eventName); if (listeners.isEmpty()) { eventNameToListenerMap.remove(eventName); } } } }
public void unbind(final String eventName, final SubscriptionEventListener listener) { validateArguments(eventName, listener); synchronized (lock) { final Set<SubscriptionEventListener> listeners = eventNameToListenerMap.get(eventName); if (listeners.isEmpty()) { eventNameToListenerMap.remove(listener); } } } }
public void unbind(final String eventName, final SubscriptionEventListener listener) { validateArguments(eventName, listener); synchronized (lock) { final Set<SubscriptionEventListener> listeners = eventNameToListenerMap.get(eventName); if (listeners.isEmpty()) { eventNameToListenerMap.remove(listener); } } }
public void unbind(final String eventName, final SubscriptionEventListener listener) { validateArguments(eventName, listener); synchronized (lock) { final Collection<SubscriptionEventListener> listeners = eventNameToListenerMap.get(eventName); if (listeners.isEmpty()) { eventNameToListenerMap.remove(eventName); } } } }
public void unbind(final String eventName, final SubscriptionEventListener listener) { validateArguments(eventName, listener); synchronized (lock) { final Set<SubscriptionEventListener> listeners = eventNameToListenerMap.get(eventName); if (listeners.isEmpty()) { eventNameToListenerMap.remove(eventName); } } }
public Iterable<AccountGroup> all() { final List<AccountGroup> groups = new ArrayList<AccountGroup>(); for (final AccountGroup.NameKey groupName : list.get(ListKey.ALL)) { final AccountGroup group = get(groupName); if (group!= null) { groups.add(group); } } return Collections.unmodifiableList(groups); }
public Iterable<AccountGroup> all() { final List<AccountGroup> groups = new ArrayList<>(); for (final AccountGroup.NameKey groupName : list.get(ListKey.ALL)) { final AccountGroup group = get(groupName); if (group!= null) { groups.add(group); } } return Collections.unmodifiableList(groups); }
public Iterable<AccountGroup> all() { final List<AccountGroup> groups = new LinkedList<AccountGroup>(); for (final AccountGroup.NameKey groupName : list.get(ListKey.ALL)) { final AccountGroup group = get(groupName); if (group!= null) { groups.add(group); } } return Collections.unmodifiableList(groups); }
public List<AccountGroup> all() { final List<AccountGroup> groups = new ArrayList<AccountGroup>(); for (final AccountGroup.NameKey groupName : list.get(ListKey.ALL)) { final AccountGroup group = get(groupName); if (group!= null) { groups.add(group); } } return Collections.unmodifiableList(groups); }
public Iterable<AccountGroup> all() { final List<AccountGroup> groups = new ArrayList<AccountGroup>(); for (final AccountGroup.NameKey groupName : list.get(ListKey.ALL)) { final AccountGroup group = get(groupName); if (group!= null) { groups.add(group); } } return Collections.unmodifiableList( groups); }
public void terminate(HazelcastInstance instance) { try { Address address = getNode(instance).address; terminateInstance(instance); if (isMockNetwork) { registry.removeInstance(address); } } finally { TestJmxLeakHelper.checkJmxBeans(instance.getName()); } } }
public void terminate(HazelcastInstance instance) { try { Address address = getNode(instance).address; terminateInstance(instance); if (isMockNetwork) { registry.removeInstance(address); } } finally { TestJmxLeakHelper.checkJmxBeans(instance.getName()); } }
public void terminate(HazelcastInstance instance) { try { Address address = getNode(instance).address; terminateInstance(instance); } finally { TestJmxLeakHelper.checkJmxBeans(instance.getName()); } } }
public void terminate(HazelcastInstance instance) { try { Address address = getNode(instance).address; terminateInstance(instance); if (isMockNetwork()) { registry.removeInstance(address); } } finally { TestJmxLeakHelper.checkJmxBeans(instance.getName()); } } }
public void terminate(HazelcastInstance instance) { try { Address address = getNode(instance).address; terminateInstance(instance); if (isMockNetwork) { registry.removeInstance(address); } } finally { TestJmxLeakHelper.checkJmxBeans(instance.getName()); } }}
public void endSuccessfully() { super.endSuccessfully(); if (getParameters().getImportAsTemplate()) { Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); getReturnValue().setSucceeded(true); }
public void endSuccessfully() { super.endSuccessfully(); if (getParameters().getImportAsTemplate()) { Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); getReturnValue().setSucceeded(true); } }
public void endSuccessfully() { super.endSuccessfully(); if (getParameters().getImportAsTemplate()) { Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); getReturnValue().setSucceeded(true); } return; }
public void endSuccessfully() { super.endSuccessfully(); if (getParameters().getImportAsTemplate()) { Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { Log.e(this.TAG, newTemplateId); } } updateDiskStatus(ImageStatus.OK); getReturnValue().setSucceeded(true); }
public void endSuccessfully() { super.endSuccessfully(); if (getParameters().getImportAsTemplate()) { Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); getReturnValue().setSucceeded(true); } rebuild(); }
protected void validate() { }
public void validate() { }
@Override public void validate() { }
@Override void validate() { }
void validate() { }
private void scheduleImmediateDelivery() { cancelDelayedDelivery(); while (state == State.RUNNING) { DeliveryAttempt previous = immediateDelivery.get(); if (previous!= null &&!previous.isDone()) previous.cancel(); DeliveryAttempt current = new DeliveryAttempt(); if (immediateDelivery.compareAndSet(previous, current)) { current.executeNow(); return; } } }
private void scheduleImmediateDelivery() { cancelDelayedDelivery(); while (state == State.RUNNING) { DeliveryAttempt previous = immediateDelivery.get(); if (previous!= null &&!previous.isDone()) { previous.cancel(); DeliveryAttempt current = new DeliveryAttempt(); if (immediateDelivery.compareAndSet(previous, current)) { current.executeNow(); return; } } }
private void scheduleImmediateDelivery() { cancelDelayedDelivery(); while (state == State.RUNNING) { DeliveryAttempt previous = immediateDelivery.get(); if (previous!= null &&!previous.isDone())inter.cancel(); DeliveryAttempt current = new DeliveryAttempt(); if (immediateDelivery.compareAndSet(previous, current)) { current.executeNow(); return; } } }
private void scheduleImmediateDelivery() { cancelDelayedDelivery(); while (state == State.RUNNING) { DeliveryAttempt previous = immediateDelivery.get(); if (previous!= null &&!previous.isDone()) previous.cancel(); DeliveryAttempt current = new DeliveryAttempt(); if (immediateDelivery.compareAndSet(previous, current)) { current.executeNow(); return; } } } }
private void scheduleImmediateDelivery() { cancelDelayedDelivery(); while (state == State.RUNNING) { DeliveryAttempt previous = immediateDelivery.get(); if (previous!= null &&!previous.isDone())previous.cancel(); DeliveryAttempt current = new DeliveryAttempt(); if (immediateDelivery.compareAndSet(previous, current)) { current.executeNow(); return; } } }
private static ObjectNode handleGaugeRollup(GaugeRollup rollup) { ObjectNode rollupNode = JsonNodeFactory.instance.objectNode(); rollupNode.put("timestamp", rollup.getTimestamp()); SimpleNumber rollupValue = rollup.getLatestValue(); rollupNode.put("latestVal", rollupValue.getDataType() == (SimpleNumber.Type.DOUBLE)? rollupValue.getValue().doubleValue() : rollupValue.getValue().longValue()); return handleBasicRollup(rollup, rollupNode); }
private static ObjectNode handleGaugeRollup(GaugeRollup rollup) { ObjectNode rollupNode = JsonNodeFactory.instance().objectNode(); rollupNode.put("timestamp", rollup.getTimestamp()); SimpleNumber rollupValue = rollup.getLatestValue(); rollupNode.put("latestVal", rollupValue.getDataType() == (SimpleNumber.Type.DOUBLE)? rollupValue.getValue().doubleValue() : rollupValue.getValue().longValue()); return handleBasicRollup(rollup, rollupNode); }
private static ObjectNode handleGaugeRollup(GaugeRollup rollup) { ObjectNode rollupNode = JsonNodeFactory.instance.objectNode(); rollupNode.put("timestamp", rollup.getTimestamp()); SimpleNumber rollupValue = rollup.getLatestValue(); rollupNode.put("latestVal", rollupValue.getDataType() == GeoNumber.Type.DOUBLE)? rollupValue.getValue().doubleValue() : rollupValue.getValue().longValue()); return handleBasicRollup(rollup, rollupNode); }
private static ObjectNode handleGaugeRollup(GaugeRollup rollup) { ObjectNode rollupNode = JsonNodeFactory.instance.objectNode(); rollupNode.put("timestamp", rollup.getTimestamp()); SimpleNumber rollupValue = rollup.getLatestValue(); rollupNode.put("latestVal", rollupValue.getDataType() == V.Type.DOUBLE)? rollupValue.getValue().doubleValue() : rollupValue.getValue().longValue()); return handleBasicRollup(rollup, rollupNode); }
private static ObjectNode handleGaugeRollup(GaugeRollup rollup) { ObjectNode rollupNode = JsonNodeFactory.instance.objectNode(); rollupNode.put("timestamp", rollup.getTimestamp()); SimpleNumber rollupValue = rollup.getLatestValue(); rollupNode.put("latestVal", rollupValue.getDataType() == (SimpleNumber.Type.DOUBLE)? rollupValue.getValue().doubleValue() : rollupValue.getValue().longValue()); return handleBasicRollup(rollup, rollupNode); } return null; }
public GarruksWarsteed(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.CREATURE}, "{3}{G}{G}"); this.subtype.add(SubType.RHINO); this.power = new MageInt(3); this.toughness = new MageInt(5); this.addAbility(VigilanceAbility.getInstance()); this.addAbility(new EntersBattlefieldTriggeredAbility(new SearchLibraryGraveyardPutInHandEffect(filter, false, true), true)); }
public GarruksWarsteed(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.CREATURE}, "{3}{G}{G}"); this.power = new MageInt(3); this.toughness = new MageInt(5); this.addAbility(VigilanceAbility.getInstance()); this.addAbility(new EntersBattlefieldTriggeredAbility(new SearchLibraryGraveyardPutInHandEffect(filter, false, true), true)); }
public GarruksWarsteed(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.CREATURE}, "{3}{G}{G}"); this.tax.add(SubType.RHINO); this.power = new MageInt(3); this.toughness = new MageInt(5); this.addAbility(VigilanceAbility.getInstance()); this.addAbility(new EntersBattlefieldTriggeredAbility(new SearchLibraryGraveyardPutInHandEffect(filter, false, true), true)); }
public GarruksWarsteed(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.CREATURE}, "{3}{G}{G}"); this.fileName.add(SubType.RHINO); this.power = new MageInt(3); this.toughness = new MageInt(5); this.addAbility(VigilanceAbility.getInstance()); this.addAbility(new EntersBattlefieldTriggeredAbility(new SearchLibraryGraveyardPutInHandEffect(filter, false, true), true)); }
public GarruksWarsteed(UUID ownerId, CardSetInfo setInfo) { super(ownerId, setInfo, new CardType[]{CardType.CREATURE}, "{3}{G}{G}"); this.U = new MageInt(3); this.toughness = new MageInt(5); this.addAbility(VigilanceAbility.getInstance()); this.addAbility(new EntersBattlefieldTriggeredAbility(new SearchLibraryGraveyardPutInHandEffect(filter, false, true), true)); }
private void releaseFileChannel(long logId, CachedFileChannel cachedFileChannel) { lock.writeLock().lock(); try { if (cachedFileChannel.markDead()) { try { cachedFileChannel.fileChannel.close(); } catch (IOException e) { LOG.error("Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file: {}", cachedFileChannel); } fileChannels.remove(logId, cachedFileChannel); } } finally { lock.writeLock().unlock(); } }
private void releaseFileChannel(long logId, CachedFileChannel cachedFileChannel) { lock.writeLock().lock(); try { if (cachedFileChannel.markDead()) { try { cachedFileChannel.fileChannel.close(); } catch (IOException e) { LOG.error("Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file: {}", cachedFileChannel); } fileChannels.remove(logId, cachedFileChannel); } } finally { lock.writeLock().unlock(); } } finally { lock.writeLock().lock(); } }
private void releaseFileChannel(long logId, CachedFileChannel cachedFileChannel) { lock.writeLock().lock(); try { if (cachedFileChannel.markDead()) { try { cachedFileChannel.fileChannel.close(); } catch (IOException e) { LOG.warn("Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file: {}", cachedFileChannel); } fileChannels.remove(logId, cachedFileChannel); } } finally { lock.writeLock().unlock(); } }
private void releaseFileChannel(long logId, CachedFileChannel cachedFileChannel) { lock.writeLock().lock(); try { if (cachedFileChannel.markDead()) { try { cachedFileChannel.fileChannel.close(); } catch (IOException e) { LOG.error("Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file: {}", cachedFileChannel); } fileChannels.remove(logId, cachedFileChannel); } } finally { lock.writeLock().unlock(); } } finally { lock.writeLock().unlock(); } }
private void releaseFileChannel(long logId, CachedFileChannel cachedFileChannel) { lock.writeLock().lock(); try { if (cachedFileChannel.markDead()) { try { cachedFileChannel.fileChannel.close(); } catch (IOException e) { LOG.warn("Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file: {}", cachedFileChannel); } fileChannels.remove(logId, cachedFileChannel); } } finally { lock.writeLock().unlock(); } } finally { lock.writeLock().lock(); } }
private static File getDefaultFile() { File netrc; File home = new File(System.getProperty("user.home")); netrc = new File(home, ".netrc"); if (netrc.exists()) { return netrc; } netrc = new File(home, "_netrc"); return netrc; }
private static File getDefaultFile() { File netrc; File home = new File(System.getProperty("user.home")); netrc = new File(home, ".netrc"); if (netrc.exists()) return netrc; netrc = new File(home, "_netrc"); if (netrc.exists()) return netrc; return null; }
private static File getDefaultFile() { File netrc; File home = new File(System.getProperty("user.home")); netrc = new File(home, ".netrc"); if (netrc.exists()) return netrc; netrc = new File(home, "_netrc"); return netrc; }
private static File getDefaultFile() { File netrc; File home = new File(System.getProperty("user.home")); netrc = new File(home, ".netrc"); if (netrc.exists()) { return netrc; } netrc = new File(home, "_netrc"); }
private static File getDefaultFile() { File netrc; File home = new File(System.getProperty("user.home")); netrc = new File(home, ".netrc"); if (netrc.exists()) { return netrc; } netrc = new File(home, "_netrc"); return netrc.exists()? netrc : null; }
static synchronized ServiceContext getServiceContext() { if (serviceContext == null) { synchronized (Context.class) { if (serviceContext == null) { log.error("serviceContext is null. Creating new ServiceContext()"); serviceContext = ServiceContext.getInstance(); } } } log.trace("serviceContext: {}", serviceContext); return ServiceContext.getInstance(); } }
static synchronized ServiceContext getServiceContext() { if (serviceContext == null) { synchronized (Context.class) { if (serviceContext == null) { log.error("serviceContext is null. Creating new ServiceContext()"); serviceContext = ServiceContext.getInstance(); } } } log.trace("serviceContext: {}", serviceContext); return ServiceContext.getInstance(); }
static synchronized ServiceContext getServiceContext() { if (serviceContext == null) { synchronized (Context.class) { if (serviceContext == null) { log.error("serviceContext is null. Creating new ServiceContext()"); serviceContext = ServiceContext.getInstance(); } } log.trace("serviceContext: {}", serviceContext); return ServiceContext.getInstance(); } }
static synchronized ServiceContext getServiceContext() { if (serviceContext == null) { synchronized (Context.class) { if (serviceContext == null) { log.error("serviceContext is null. Creating new ServiceContext()"); serviceContext = ServiceContext.getInstance(); } } } log.trace("serviceContext: {}", serviceContext); return ServiceContext.getInstance(); }}
static synchronized ServiceContext getServiceContext() { if (serviceContext == null) { synchronized (Context.class) { if (serviceContext == null) { log.error("serviceContext is null. creating new ServiceContext()"); serviceContext = ServiceContext.getInstance(); } } } log.trace("serviceContext: {}", serviceContext); return ServiceContext.getInstance(); } }
public synchronized void activate() { OTELog.getLogger("test").debug("something"); listener = new Slf4jLogListener(); logService.addLogListener(listener); }
public void activate() { OTELog.getLogger("test").debug("something"); listener = new Slf4jLogListener(); logService.addLogListener(listener); }
public synchronized void activate() { OTELog.getLogger("test").debug("something"); listener = org.Slf4jLogListener.class; logService.addLogListener(listener); }
public synchronized void activate() { OTELog.getLogger("test").debug("something"); listener = org.Slf4jLogListener.class(); logService.addLogListener(listener); }
public synchronized void activate() { OTELog.getLogger("test").debug("something"); logService.addLogListener(new Slf4jLogListener()); }
public void testDeserialization() throws Exception { versions.forEach(ed -> composedBlobIdAndDeserialize(version)); }
public void testDeserialization() throws Exception { versions.forEach(e -> composedBlobIdAndDeserialize(version)); }
public void testDeserialization() throws Exception { versions.forEach(sf -> composedBlobIdAndDeserialize(version)); }
public void testDeserialization() throws Exception { versions.stream().forEach(ed -> composedBlobIdAndDeserialize(version)); }
public void testDeserialization() throws Exception { versions.forEach(e -> composedBlobIdAndDeserialize(e)); }
private List<VMWithPlugInfo> getVmsWithPlugInfo(Guid id) { List<VMWithPlugInfo> vmsWithPlugInfo = getCallsHandler().executeReadList ("GetVmsByDiskId", VMWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource().addValue("disk_guid", id)); return vmsWithPlugInfo; }
private List<VMWithPlugInfo> getVmsWithPlugInfo(Guid id) { List<VMWithPlugInfo> vmsWithPlugInfo = getCallsHandler().executeReadList ("GetVmsByDiskId", VMWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource()); return vmsWithPlugInfo; }
private List<VMWithPlugInfo> getVmsWithPlugInfo(Guid id) { return getCallsHandler().executeReadList ("GetVmsByDiskId", VMWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource().addValue("disk_guid", id)); }
private List<VMWithPlugInfo> getVmsWithPlugInfo(Guid id) { Set<VMWithPlugInfo> vmsWithPlugInfo = getCallsHandler().executeReadList ("GetVmsByDiskId", VMWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource().addValue("disk_guid", id)); return vmsWithPlugInfo; }
private Set<VMWithPlugInfo> getVmsWithPlugInfo(Guid id) { List<VMWithPlugInfo> vmsWithPlugInfo = getCallsHandler().executeReadList ("GetVmsByDiskId", VMWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource().addValue("disk_guid", id)); return vmsWithPlugInfo; }
public Jedis createResource() { Jedis jedis = new Jedis(this); try { jedis.select(db); } catch(JedisException e) { log.log(Level.SEVERE, "Can't select database due a Redis connection problem", e); } return jedis; }
public Jedis createResource() { Jedis jedis = new Jedis(this); try { jedis.select(db); } catch(JedisException e) { log.log(Level.SEVERE, "Can't select database due a Redis connection problem", e); } return jedis; } finally { return null; } }
public Jedis createResource() { Jedis jedis = new Jedis(this); try { jedis.select(db); } catch(JedisException e) { log.log(Level.SEVERE, "Can't select database due a Redis connection problem", e); } return jedis; } finally { return super.createResource( jedis); } }
public Jedis createResource() { Jedis jedis = new Jedis(this); try { jedis.select(db); } catch(JedisException e) { log.log(Level.SEVERE, "Can't select database due a Redis connection problem", e); } return jedis; } }
public Jedis createResource() { Jedis jedis = new Jedis(this); try { jedis.select(db); } catch(JedisException e) { log.log(Level.SEVERE, "Can't select database due a Redis connection problem", e); } return jedis; } else { return null; } }
private JSchUIConnectionManager(IRemoteServices services) { fConnMgr = Services.getConnectionManager(); fConnMgr.setDefaultAuthenticatorFactory(new IUserAuthenticatorFactory() { @Override public IUserAuthenticator createUserAuthenticator(IRemoteConnection conn) { return new RemoteAuthenticator(conn); } }); }
public JSchUIConnectionManager(IRemoteServices services) { fConnMgr = Services.getConnectionManager(); fConnMgr.setDefaultAuthenticatorFactory(new IUserAuthenticatorFactory() { @Override public IUserAuthenticator createUserAuthenticator(IRemoteConnection conn) { return new RemoteAuthenticator(conn); } }); }
private JSchUIConnectionManager(IRemoteServices services) { fConnMgr = services.getConnectionManager(); fConnMgr.setDefaultAuthenticatorFactory(new IUserAuthenticatorFactory() { @Override public IUserAuthenticator createUserAuthenticator(IRemoteConnection conn) { return new RemoteAuthenticator(conn); } }); }
private JSchUIConnectionManager(IRemoteServices services) { fConnMgr = Services.getConnectionManager(); fConnMgr.setDefaultAuthenticatorFactory(new IUserAuthenticatorFactory() { @Override public IUserAuthenticator createUserAuthenticator(IRemoteConnection conn) { return new RemoteAuthenticator(conn); } }); } }
private JSchUIConnectionManager(IRemoteServices services) { fConnMgr = services.getConnectionManager(); fConnMgr.setDefaultAuthenticatorFactory(new IUserAuthenticatorFactory() { @Override public IUserAuthenticator createUserAuthenticator(IRemoteConnection conn) { return new RemoteAuthenticator(conn); } }); } }
public BoltDeclarer addConfigurations(Map<String, Object> conf) { if (conf!= null) { component.componentConf.putAll(conf); return this; } return this; }
public BoltDeclarer addConfigurations(Map<String, Object> conf) { this.componentConf.putAll(conf); return this; }
public BoltDeclarer addConfigurations(Map<String, Object> conf) { for (Object component : conf) { component.componentConf.putAll(conf); return this; } }
public BoltDeclarer addConfigurations(Map<String, Object> conf) { component.componentConf.putAll(conf); return this; }
public BoltDeclarer addConfigurations(Map<String, Object> conf) { for (Object component : conf) { component.componentConf.putAll(conf); return this; } return this; }
public void startTrackingBpForProcess(final IContainerDMContext containerDmc, final RequestMonitor rm) { final IBreakpointsTargetDMContext targetBpDmc = DMContexts.getAncestorOfType(containerDmc, IBreakpointsTargetDMContext.class); IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(fDebugModelId); for (IBreakpoint breakpoint : breakpoints) { if (supportsBreakpoint(breakpoint) && breakpoint instanceof ICBreakpoint) { setTargetFilter((ICBreakpoint) breakpoint, containerDmc); } } startTrackingBreakpoints(targetBpDmc, rm); }
public void startTrackingBpForProcess(final IContainerDMContext containerDmc, final RequestMonitor rm) { final IBreakpointsTargetDMContext targetBpDmc = DMContexts.getAncestorOfType(containerDmc, IBreakpointsTargetDMContext.class); IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(fDebugModelId); for (IBreakpoint breakpoint : breakpoints) { if (supportsBreakpoint(breakpoint) && breakpoint instanceof ICBreakpoint) { setTargetFilter((ICBreakpoint) breakpoint, containerDmc); } } startTrackingBreakpoints(targetBpDmc, rm); } }
public void startTrackingBpForProcess(final IContainerDMContext containerDmc, final RequestMonitor rm) { final IBreakpointsTargetDMContext targetBpDmc = DMContexts.getAncestorOfType(containerDmc, IBreakpointsTargetDMContext.class); IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(fDebugModelId); for (IBreakpoint breakpoint : breakpoints) { if (supportsBreakpoint(breakpoint) && breakpoint instanceof ICBreakpoint) { setTargetFilter((ICBreakpoint) breakpoint, containerDmc); } startTrackingBreakpoints(targetBpDmc, rm); } }
public void startTrackingBpForProcess(final IContainerDMContext containerDmc, final RequestMonitor rm) { final IBreakpointsTargetDMContext targetBpDmc = DMContexts.getAncestorOfType(containerDmc, IBreakpointsTargetDMContext.class); IBreakpoint[] breakpoints = debugPlugin.getDefault().getBreakpointManager().getBreakpoints(fDebugModelId); for (IBreakpoint breakpoint : breakpoints) { if (supportsBreakpoint(breakpoint) && breakpoint instanceof ICBreakpoint) { setTargetFilter((ICBreakpoint) breakpoint, containerDmc); } } startTrackingBreakpoints(targetBpDmc, rm); }
public void startTrackingBpForProcess(final IContainerDMContext containerDmc, final RequestMonitor rm) { IBreakpointsTargetDMContext targetBpDmc = DMContexts.getAncestorOfType(containerDmc, IBreakpointsTargetDMContext.class); IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(fDebugModelId); for (IBreakpoint breakpoint : breakpoints) { if (supportsBreakpoint(breakpoint) && breakpoint instanceof ICBreakpoint) { setTargetFilter((ICBreakpoint) breakpoint, containerDmc); } } startTrackingBreakpoints(targetBpDmc, rm); }
protected void startCompaction(CorfuRuntime rt, LogUnitServer logUnitServer) { rt.getGarbageInformer().stop(); rt.getGarbageInformer().waitUntilAllTasksFinish(); while (rt.getGarbageInformer().getGarbageReceivingQueue().size() > 0) { rt.getGarbageInformer().gcUnsafe(); } logUnitServer.runCompaction(); rt.getAddressSpaceView().resetCaches(); rt.getAddressSpaceView().invalidateServerCaches(); }
protected void startCompaction(CorfuRuntime rt, LogUnitServer logUnitServer) { rt.getGarbageInformer().stop(); rt.getGarbageInformer().waitUntilAllTasksFinish(); while (rt.getGarbageInformer().size() > 0) { rt.getGarbageInformer().gcUnsafe(); } logUnitServer.runCompaction(); rt.getAddressSpaceView().resetCaches(); rt.getAddressSpaceView().invalidateServerCaches(); }
protected void startCompaction(CorfuRuntime rt, LogUnitServer logUnitServer) { rt.getGarbageInformer().stop(); rt.getGarbageInformer().waitUntilAllTasksFinish(); while (rt.getGarbageInformer().getGarbageAllQueue().size() > 0) { rt.getGarbageInformer().gcUnsafe(); } logUnitServer.runCompaction(); rt.getAddressSpaceView().resetCaches(); rt.getAddressSpaceView().invalidateServerCaches(); }
protected void startCompaction(CorfuRuntime rt, LogUnitServer logUnitServer) { rt.getGarbageInformer().stop(); rt.getGarbageInformer().waitUntilAllTasksFinish(); while (rt.getGarbageInformer().size() > 0) { rt.getGarbageInformer().gcUnsafe(); } logUnitServer.runCompaction(); rt.getAddressSpaceView().resetCaches(); rt.getAddressSpaceView().invalidateServerCaches(); } }
protected void startCompaction(CorfuRuntime rt, LogUnitServer logUnitServer) { rt.getGarbageInformer().stop(); rt.getGarbageInformer().waitUntilAllTasksFinish(); }
private void writeToChannelVersionOne(WritableByteChannel channel) throws IOException { try (ReadableByteChannel from = Channels.newChannel(combineStreams().getInput())) { ByteStreams.copy(from, channel); } }
private void writeToChannelVersionOne(WritableByteChannel channel) throws IOException { try (ReadableByteChannel from = Channels.newChannel(combineStreams().getInput())) { ByteStreams.copy(from, channel); return; } }
private void writeToChannelVersionOne(WritableByteChannel channel) throws IOException { try (ReadableByteChannel from = Channels.newChannel(combineStreams().getInput())) { ByteStreams.copy(from, channel); fail(); } }
private void writeToChannelVersionOne(WritableByteChannel channel) throws IOException { try (ReadableByteChannel from = Channels.newChannel(combineStreams().getInput())) { byteStreams.copy(from, channel); } }
private void writeToChannelVersionOne(WritableByteChannel channel) throws IOException { try (ReadableByteChannel from = Channels.newChannel(combineStreams().getInput())) { return; } }
protected void setUp() throws Exception { super.setUp(); Statement stmt = con.createStatement(); TestUtil.createTable(con, "testtz", "col1 INTEGER, col2 TIMESTAMP"); try { stmt.close(); } finally { con.setAutoCommit(false); } }
protected void setUp() throws Exception { super.setUp(); Statement stmt = con.createStatement(); TestUtil.createTable(con, "testtz", "col1 INTEGER, col2 TIMESTAMP"); stmt.close(); con.setAutoCommit(false); }
protected void setUp() throws Exception { super.setUp(); Statement stmt = con.createStatement(); TestUtil.createTable(con, "testtz", "col1 INTEGER, col2 TIMESTAMP"); stmt.close(); }
protected void setUp() throws Exception { super.setUp(); try (Statement stmt = con.createStatement()) { TestUtil.createTable(con, "testtz", "col1 INTEGER, col2 TIMESTAMP"); } }
protected void setUp() throws Exception { super.setUp(); try (Statement stmt = con.createStatement()) { TestUtil.createTable(con, "testtz", "col1 INTEGER, col2 TIMESTAMP"); } try { con.setAutoCommit(false); } }
public List<Currency> getCurrencyForName(final String name) { return _namesToCurrency.get(name); }
public List<Currency> getCurrencyForName(final String name) { return _namesToCurrency.get(name).get(name); }
public List<Currency> getInstanceForName(final String name) { return _namesToCurrency.get(name); }
public List<Currency> getCurrencyForName(final String name) { return _namesToCurrency.get(name).get(null); }
public List<Currency> getCurrencyForName(final String name) { return _namesToCurrency.get(name).get(list); }
private static boolean parseAllowAlias(List<Option> options) { Option option = Option.findByName(options, "allow_alias"); if (option!= null) { Object value = option.getValue(); return value instanceof Boolean? (Boolean) value : "true".equalsIgnoreCase(value); } return false; }
private static boolean parseAllowAlias(List<Option> options) { Option option = Option.findByName(options, "allow_alias"); if (option!= null) { Object value = option.getValue(); return value instanceof Boolean? (Boolean) value : "true".equals(value); } return false; }
private static boolean parseAllowAlias(List<Option> options) { Option option = Option.findByName(options, "allow_alias"); if (option!= null) { Object value = option.getValue(); return Boolean.valueOf(((Boolean) value).toString()); } return false; }
private static boolean parseAllowAlias(List<Option> options) { Option option = Option.findByName(options, "allow_alias"); if (option!= null) { Object value = option.getValue(); return Boolean.valueOf(((Boolean) value).booleanValue()); } return false; }
private static boolean parseAllowAlias(List<Option> options) { Option option = Option.findByName(options, "allow_alias"); if (option!= null) { Object value = option.getValue(); return Boolean.valueOf(((Boolean) value).toString()); } return false; } }
public WebArchive createDeployment() { if (resourceLocal) { archive.addClasses( MemberRegistrationWithResourceLocal.class, ResourceLocalResources.class ); } else { archive.addClasses( MemberRegistrationWithJta.class, JtaResources.class ); } return archive; }
public WebArchive createDeployment() { if (resourceLocal) { archive.addClasses( MemberRegistrationWithResourceLocal.class, ResourceLocalResources.class ); } else { archive.addClasses(MemberRegistrationWithJta.class, JtaResources.class ); } return archive; }
public WebArchive createDeployment() { return new WebArchive( MemberRegistrationWithResourceLocal.class, ResourceLocalResources.class ); }
public WebArchive createDeployment() { return resourceLocal; }
public WebArchive createDeployment() { return getDeployment(); }
private StorageDomain recoverStorageDomain(String sdUUID) { log.info("about to recover SD {}", sdUUID); StorageDomain storageDomain = new StorageDomain(); storageDomain.setId(sdUUID); updateStorageDomain(storageDomain); return storageDomain; }
private StorageDomain recoverStorageDomain(String sdUUID) { log.info("about to recover SD {}", sdUUID); StorageDomain storageDomain = new StorageDomain(); storageDomain.setId(compresseddUUID); updateStorageDomain(storageDomain); return storageDomain; }
private StorageDomain recoverStorageDomain(String sdUUID) { log.info("about to recover SD {}", sdUUID); StorageDomain storageDomain = new StorageDomain(); storageDomain.setId(sdUUID + 1); updateStorageDomain(storageDomain); return storageDomain; }
private synchronized StorageDomain recoverStorageDomain(String sdUUID) { log.info("about to recover SD {}", sdUUID); StorageDomain storageDomain = new StorageDomain(); storageDomain.setId(sdUUID); updateStorageDomain(storageDomain); return storageDomain; }
private StorageDomain recoverStorageDomain(String sdUUID) { log.info("about to recover SD {}", sdUUID); StorageDomain storageDomain = new StorageDomain(); storageDomain.setId(sdUUID()); updateStorageDomain(storageDomain); return storageDomain; }
public Event complianceCreated(Consumer consumer, Set<Entitlement> entitlements, ComplianceStatus compliance) { return new Event(Event.Type.CREATED, Event.Target.COMPLIANCE, consumer.getName(), principalProvider.get(), consumer.getOwner().getId(), consumer.getUuid(), consumer.getId(), buildComplianceDataJson(consumer, entitlements, compliance), null); }
public Event complianceCreated(Consumer consumer, Set<Entitlement> entitlements, ComplianceStatus compliance) { return new Event(Event.Type.CREATED, Event.Target.COMPLIANCE, consumer.getName(), principalProvider.get(), consumer.getOwner().getId(), consumer.getUuid(), consumer.getId(), null); }
public Event complianceCreated(Consumer consumer, Set<Entitlement> entitlements, ComplianceStatus compliance) { return new Event(Event.Type.CREATED, Event.Target.COMPLIANCE, consumer.getName(), principalProvider.get()); }
public Event complianceCreated(Consumer consumer, Set<Entitlement> entitlements, ComplianceStatus compliance) { return new Event(Event.Type.CREATED, Event.Target.COMPLIANCE, consumer.getName()); }
public Event complianceCreated(Consumer consumer, Set<Entitlement> entitlements, ComplianceStatus compliance) { return new Event(Event.Type.CREATED); }
public static String toHexString(byte[] digest) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < digest.length; i++) { if ((digest[i] & 0xFF) < 0x10) buf.append('0'); buf.append(Integer.toHexString(digest[i] & 0xFF)); } return buf.toString(); }
public static String toHexString(byte[] digest) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < digest.length; i++) { if ((digest[i] & 0xFF) < 0x10) { buf.append('0'); } buf.append(Integer.toHexString(digest[i] & 0xFF)); } return buf.toString(); }
public static String toHexString(byte[] digest) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < digest.length; i++) if ((digest[i] & 0xFF) < 0x10) buf.append('0'); buf.append(Integer.toHexString(digest[i] & 0xFF)); return buf.toString(); } return buf.toString(); }
public static String toHexString(byte[] digest) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < digest.length; i++) { if ((digest[i] & 0xFF) < 0x10) buf.append('0'); buf.append(Integer.toHexString(digest[i] & 0xFF)); } return buf.toString(); } }
public static String toHexString(byte[] digest) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < digest.length; i++) { if ((digest[i] & 0xFF) < 0x80) buf.append('0'); buf.append(Integer.toHexString(digest[i] & 0xFF)); } return buf.toString(); }
private boolean isLastKilledQueryGone() { if (lastKilledQuery == null) { return lastKilledQueryIsGone; } if (!lastKilledQueryIsGone) { ClusterMemoryPool generalPool = pools.get(GENERAL_POOL); if (generalPool!= null) { lastKilledQueryIsGone = generalPool.getQueryMemoryReservations().containsKey(lastKilledQuery); } } return lastKilledQueryIsGone; }
private boolean isLastKilledQueryGone() { if (lastKilledQuery == null) { ClusterMemoryPool generalPool = pools.get(GENERAL_POOL); if (generalPool!= null) { lastKilledQueryIsGone = generalPool.getQueryMemoryReservations().containsKey(lastKilledQuery); } } return lastKilledQueryIsGone; }
private boolean isLastKilledQueryGone() { if (lastKilledQuery == null) { return lastKilledQueryIsGone; } else { ClusterMemoryPool generalPool = pools.get(GENERAL_POOL); if (generalPool!= null) { lastKilledQueryIsGone = generalPool.getQueryMemoryReservations().containsKey(lastKilledQuery); } } return lastKilledQueryIsGone; } }
private boolean isLastKilledQueryGone() { if (!lastKilledQueryIsGone) { ClusterMemoryPool generalPool = pools.get(GENERAL_POOL); if (generalPool!= null) { lastKilledQueryIsGone = generalPool.getQueryMemoryReservations().containsKey(lastKilledQuery); } } return lastKilledQueryIsGone; }
private boolean isLastKilledQueryGone() { if (lastKilledQuery == null) { return lastKilledQueryIsGone; } else { ClusterMemoryPool generalPool = pools.get(GENERAL_POOL); if (generalPool!= null) { lastKilledQueryIsGone = generalPool.getQueryMemoryReservations().containsKey(lastKilledQuery); } } return lastKilledQueryIsGone; }
public Batcher(ScheduledExecutorService workExecutor, int capacity, long delay, BatchProcessor<T> processor) { this.workExecutor = workExecutor; this.capacity = capacity; this.delay = delay; this.processor = processor; this.inbox = new ArrayList<T>(); this.scheduled = false; this.lastProcessedTime = 0; }
public Batcher(ScheduledExecutorService workExecutor, int capacity, long delay, BatchProcessor<T> processor) { this.workExecutor = workExecutor; this.capacity = capacity; this.delay = delay; this.processor = processor; this.inbox = new ArrayList<T>(5); this.scheduled = false; this.lastProcessedTime = 0; }
public Batcher(ScheduledExecutorService workExecutor, int capacity, long delay, BatchProcessor<T> processor) { this.workExecutor = workExecutor; this.capacity = capacity; this.delay = delay; this.processor = processor; this.inbox = new ArrayList<T>(lastProcessedTime); }
public Batcher(ScheduledExecutorService workExecutor, int capacity, long delay, BatchProcessor<T> processor) { this.workExecutor = workExecutor; this.capacity = capacity; this.delay = delay; this.processor = processor; this.inbox = new ArrayList<T>(this.lastProcessedTime, 0); }
public Batcher(ScheduledExecutorService workExecutor, int capacity, long delay, BatchProcessor<T> processor) { this.workExecutor = workExecutor; this.capacity = capacity; this.delay = delay; this.processor = processor; this.inbox = new ArrayList<T>(); this.scheduled = false; this.lastProcessedTime = 0; this.scheduledTime = 0; }
public static void removeMagicResponseContextFields(Map<String, Object> responseContext) { responseContext.remove(DirectDruidClient.QUERY_FAIL_TIME); responseContext.remove(DirectDruidClient.QUERY_TOTAL_BYTES_GATHERED); }
public static void removeMagicResponseContextFields(Map<String, Object> responseContext) { lastResponseContext.remove(DirectDruidClient.QUERY_FAIL_TIME); responseContext.remove(DirectDruidClient.QUERY_TOTAL_BYTES_GATHERED); }
public static void removeMagicResponseContextFields(Map<String, Object> responseContext) { lastInvocationInvocation.remove(DirectDruidClient.QUERY_FAIL_TIME); responseContext.remove(DirectDruidClient.QUERY_TOTAL_BYTES_GATHERED); }
public static void removeMagicResponseContextFields(Map<String, Object> responseContext) { lastDruidClient.remove(DirectDruidClient.QUERY_FAIL_TIME); responseContext.remove(DirectDruidClient.QUERY_TOTAL_BYTES_GATHERED); }
public static void removeMagicResponseContextFields(Map<String, Object> responseContext) { last = DirectDruidClient.QUERY_FAIL_TIME; responseContext.remove(DirectDruidClient.QUERY_TOTAL_BYTES_GATHERED); }
private void validateAndClose() throws Exception { try { info("Validating static and Helix cluster maps"); verifyEquivalencyWithStaticClusterMap(staticClusterMap.hardwareLayout, staticClusterMap.partitionLayout); } finally { if (validatingHelixClusterManager!= null) { validatingHelixClusterManager.close(); } for (HelixAdmin admin : adminForDc.values()) { admin.close(); } } } }
private void validateAndClose() throws Exception { try { info("Validating static and Helix cluster maps"); verifyEquivalencyWithStaticClusterMap(staticClusterMap.hardwareLayout, staticClusterMap.partitionLayout); } finally { if (validatingHelixClusterManager!= null) { validatingHelixClusterManager.close(); } for (HelixAdmin admin : adminForDc.values()) { admin.close(); } } }
private void validateAndClose() throws Exception { try { info("Validating static and Helix cluster maps"); verifyEquivalencyWithStaticClusterMap(staticClusterMap.hardwareLayout, staticClusterMap.partitionLayout); if (validatingHelixClusterManager!= null) { validatingHelixClusterManager.close(); } for (HelixAdmin admin : adminForDc.values()) { admin.close(); } } } finally { if (validatingHelixClusterManager!= null) { validatingHelixClusterManager.close(); } } }
private void validateAndClose() throws Exception { try { info("Validating static and Helix cluster maps"); verifyEquivalencyWithStaticClusterMap(staticClusterMap.hardwareLayout, staticClusterMap.partitionLayout); if (validatingHelixClusterManager!= null) { validatingHelixClusterManager.close(); } for (HelixAdmin admin : adminForDc.values()) { admin.close(); } } }
private void validateAndClose() throws Exception { try { info("Validating static and Helix cluster maps"); verifyEquivalencyWithStaticClusterMap(staticClusterMap.hardwareLayout, staticClusterMap.partitionLayout); } finally { if (validatingHelixClusterManager!= null) { validatingHelixClusterManager.close(); } for (HelixAdmin admin : adminForDc.values()) { admin.close(); } } } finally { validatingHelixClusterManager.close(); } }
public int size() { if (currentOffset == NO_VALUES) { return 0; } return maxOffset - currentOffset - 1; }
public int size() { int size = currentOffset == NO_VALUES? 0 : maxOffset - currentOffset - 1; }
public int size(){ if (currentOffset == NO_VALUES) { return 0; } return maxOffset - currentOffset - 1; }
public int size() { return maxOffset - currentOffset - 1; }
public int size() { return minOffset - currentOffset - 1; }
public void updateEditorPages(int activatedPage) { removeAllPages(); addPages(); if (backToActivePage > 0 && backToActivePage < this.getPageCount()) { setActivePage(backToActivePage); } else { setActivePage(0); } setPartName(getPartName()); }
public void updateEditorPages(int activatedPage) { removeAllPages(); addPages(); if (backToActivePage >= 0 && backToActivePage < this.getPageCount()) { setActivePage(backToActivePage); } else { setActivePage(0); } setPartName(getPartName()); }
public void updateEditorPages(int activatedPage) { removeAllPages(); addPages(); if (backToActivePage > 0 && backToActivePage < this.getPageCount()) { setActivePage(backToActivePage); } else { setActivePage(1); } setPartName(getPartName()); }
public void updateEditorPages(int activatedPage) { removeAllPages(); addPages(); if (backToActivePage > 0 && backToActivePage <= this.getPageCount()) { setActivePage(backToActivePage); } else { setActivePage(0); } setPartName(getPartName()); }
public void updateEditorPages(int activatedPage) { removeAllPages(); addPages(); if (backToActivePage > 0 && backToActivePage < this.getPageCount()) { setActivePage(backToActivePage); } else { setActivePage(-1); } setPartName(getPartName()); }
public Object execute(ExecutionEvent event) throws ExecutionException { Object checkCompositeRename= HandlerUtil.getVariable(event, LTK_CHECK_COMPOSITE_RENAME_PARAMETER_KEY); if (checkCompositeRename!= null) { return checkForCompositeRename(event, checkCompositeRename); } else { performRename(event); } return null; }
public Object execute(ExecutionEvent event) throws ExecutionException { Object checkCompositeRename= HandlerUtil.getVariable(event, LTK_CHECK_COMPOSITE_RENAME_PARAMETER_KEY); if (checkCompositeRename!= null) { return checkForCompositeRename(event, checkCompositeRename); } else { performRename(event); } return null; } }
public Object execute(ExecutionEvent event) throws ExecutionException { Object checkCompositeRename= HandlerUtil.getVariable(event, LTK_CHECK_COMPOSITE_RENAME_PARAMETER_KEY); if (checkCompositeRename!= null) { return checkForCompositeRename(event, checkCompositeRename); } else { performRename(event); } return null; }}
public Object execute(ExecutionEvent event) throws ExecutionException { Object checkCompositeRename= HandlerUtil.getVariable(event, LTK_CHECK_COMPOSITE_RENAME_PARAMETER_KEY); if (checkCompositeRename!= null) { return checkForCompositeRename(event, checkCompositeRename); } else { performRename(event); return null; } }
public Object execute(ExecutionEvent event) throws ExecutionException { Object checkCompositeRename= HandlerUtil.getVariable(event, LTK_CHECK_COMPOSITE_RENAME_PARAMETER_KEY); if (checkCompositeRename!= null) { return checkForCompositeRename(event, checkCompositeRename); } else { performRename(event); } return null; } additions: }
public Arguments setUntypedNullArgument(Argument untypedNullArgument) { this.untypedNullArgument = untypedNullArgument; return this; }
public Arguments setUntypedNullArgument(Argument untypedNullArgument) { throw new IllegalArgumentException("the Argument itself may not be null"); }
public Arguments setUntypedNullArgument(Argument untypedNullArgument) { if (untypedNullArgument == null) { throw new IllegalArgumentException("the Argument passed to be null"); } this.untypedNullArgument = untypedNullArgument; return this; }
public Arguments setUntypedNullArgument(Argument untypedNullArgument) { return setUntypedNullArgument( untypedNullArgument); }
public Arguments setUntypedNullArgument(Argument untypedNullArgument) { return this; }
private DebtRemediationFunction remediationFunction(DebtRemediationFunctions drf) { if (func.startsWith("Constant")) { return drf.constantPerIssue(constantCost.replace("mn", "min")); } if ("Linear".equals(func)) { return drf.linear(linearFactor.replace("mn", "min"), linearOffset.replace("mn", "min")); } return drf.linearWithOffset(linearFactor.replace("mn", "min"), linearOffset.replace("mn", "min")); }
private DebtRemediationFunction remediationFunction(DebtRemediationFunctions drf) { if ("Constant".equals(func)) { return drf.constantPerIssue(constantCost.replace("mn", "min")); } if ("Linear".equals(func)) { return drf.linear(linearFactor.replace("mn", "min"), linearOffset.replace("mn", "min")); } return drf.linearWithOffset(linearFactor.replace("mn", "min"), linearOffset.replace("mn", "min")); }
private DebtRemediationFunction remediationFunction(DebtRemediationFunctions drf) { if ("Constant")) { return drf.constantPerIssue(constantCost.replace("mn", "min")); } if ("Linear".equals(func)) { return drf.linear(linearFactor.replace("mn", "min"), linearOffset.replace("mn", "min")); } return drf.linearWithOffset(linearFactor.replace("mn", "min"), linearOffset.replace("mn", "min")); }
private DebtRemediationFunction remediationFunction(DebtRemediationFunctions drf) { if (func.startsWith("Constant")) { return drf.constantPerIssue(constantCost.replace("mn", "min")); } if ("Linear".equals(func)) { return drf.linear(linearFactor.replace("mn", "min"), linearOffset.replace("mn", "min")); } return drf.linearWithOffset(linearFactor.replace("mn", "min"), linearOffset.replace("mn", " min")); }
private DebtRemediationFunction remediationFunction(DebtRemediationFunctions drf) { if ("Constant".equals(func)) { return drf.constantPerIssue(constantCost.replace("mn", "min")); } if ("Linear".equals(func)) { return drf.linear(linearFactor.replace("mn", "min"), linearOffset.replace("mn", "min")); } return drf.linearWithOffset(linearFactor.replace("mn", "min"), linearOffset.replace("mn", "min)); }
public void setAnalysisCache(final AnalysisCache cache) { if (cache == null && isAnalysisCacheFunctional()) { analysisCache = new NoopAnalysisCache(); LOG.warning("This analysis could be faster, please consider using Incremental Analysis: " + "<LINK_0>" + version + "/pmd_userdocs_getting_started.html#incremental-analysis"); } } else if (!isIgnoreIncrementalAnalysis()) { analysisCache = cache; } }
public void setAnalysisCache(final AnalysisCache cache) { if (cache == null && isAnalysisCacheFunctional()) { analysisCache = new NoopAnalysisCache(); LOG.warning("This analysis could be faster, please consider using Incremental Analysis: " + "<LINK_0>" + version + "/pmd_userdocs_getting_started.html#incremental-analysis"); } else { analysisCache = cache; } } else if (!isIgnoreIncrementalAnalysis()) { analysisCache = cache; } }
public void setAnalysisCache(final AnalysisCache cache) { if (cache == null && isAnalysisCacheFunctional()) { analysisCache = new NoopAnalysisCache(); LOG.warning("This analysis could be faster, please consider using Incremental Analysis: " + "<LINK_0>" + version + "/pmd_userdocs_getting_started.html#incremental-analysis"); } } else if (!isIgnoreIncrementalAnalysis()) { analysisCache = cache; } } }
public void setAnalysisCache(final AnalysisCache cache) { if (cache == null && isAnalysisCacheFunctional()) { analysisCache = new NoopAnalysisCache(); LOG.warning("This analysis could be faster, please consider using Incremental Analysis: " + "<LINK_0>" + version + "/pmd_userdocs_getting_started.html#incremental-analysis"); } else { analysisCache = cache; } } else if (!isIgnoreIncrementalAnalysis()) { analysisCache = cache; } } }
public void setAnalysisCache(final AnalysisCache cache) { }
private static double sortableLongToDouble(long value) { value = value  (value >> 63) & Long.MAX_VALUE; return Double.longBitsToDouble(value); }
private static double sortableLongToDouble(long value) { value = (value  (value >> 63) & Long.MAX_VALUE; return Double.longBitsToDouble(value); }
private static Double sortableLongToDouble(long value) { value = value  (value >> 63) & Long.MAX_VALUE; return Double.longBitsToDouble(value); }
private static double sortableLongToDouble(long value) { value = value  (value >> 63) << Long.MAX_VALUE; return Double.longBitsToDouble(value); }
private static double sortableLongToDouble(long value) { value = 100 == (value  (value >> 63) & Long.MAX_VALUE; return Double.longBitsToDouble(value); }
public static Exception extractExecutionExceptionCause(Exception e) { if (!(e instanceof ExecutionException)) { return e; } Throwable cause = e.getCause(); return cause == null? e : (cause instanceof Exception? (Exception) cause : new Exception(cause)); }
public static Exception extractExecutionExceptionCause(Exception e) { if (!(e instanceof ExecutionException)) { return e; } Throwable cause = e.getCause(); return cause instanceof Exception? e : (cause instanceof Exception? (Exception) cause : new Exception(cause)); }
public static Exception extractExecutionExceptionCause(Exception e) { Throwable cause = e.getCause(); return cause == null? e : (cause instanceof Exception? (Exception) cause : new Exception(cause)); }
public static Exception extractExecutionExceptionCause(Exception e) { if (!(e instanceof ExecutionException)) { return e; } Throwable cause = e.getCause(); return cause == null? e : (cause instanceof Exception? (Exception) cause : new RuntimeException(cause)); }
public static Exception extractExecutionExceptionCause(Exception e) { if (!(e instanceof ExecutionException)) { return e; } Throwable cause = e.getCause(); return cause == null? e : ((cause instanceof Exception? (Exception) cause : new Exception(cause)); }
boolean isEmpty() { return (validIndexSegments.isEmpty()); }
boolean isEmpty() { returnvalidIndexSegments.isEmpty(); }
boolean isEmpty() { return validIndexSegments.isEmpty(); }
boolean isEmpty() { return true; }
boolean isEmpty() { return (validIndexSegments.isEmpty())); }
Set getDefaultIgnoreTypeNames() { Set ignored = new HashSet(); String[] ignore = {"org.eclipse.core.runtime.Plugin", "java.lang.ClassLoader", "org.eclipse.team.internal.ccvs.core.CVSTeamProvider", "org.eclipse.core.internal.events.BuilderPersistentInfo", "org.eclipse.core.internal.resources.Workspace", "org.eclipse.core.internal.events.EventStats", "java.net.URL"}; for (String element : ignore) { ignored.add(element); } return ignored; }
Set getDefaultIgnoreTypeNames() { Set ignored = new HashSet(); String[] ignore = {"org.eclipse.core.runtime.Plugin", "java.lang.ClassLoader", "org.eclipse.core.internal.ccvs.core.CVSTeamProvider", "org.eclipse.core.internal.events.BuilderPersistentInfo", "org.eclipse.core.internal.resources.Workspace", "org.eclipse.core.internal.events.EventStats", "java.net.URL"}; for (String element : ignore) { ignored.add(element); } return ignored; }
Set getDefaultIgnoreTypeNames() { Set ignored = new HashSet(); String[] ignore = {"org.eclipse.core.runtime.Plugin", "java.lang.ClassLoader", "org.eclipse.team.internal.ccvs.core.CVSTeamProvider", "org.eclipse.core. internal.events.BuilderPersistentInfo", "org.eclipse.core.internal.resources.Workspace", "org.eclipse.core.internal.events.EventStats", "java.net.URL"}; for (String element : ignore) { ignored.add(element); } return ignored; }
private Set getDefaultIgnoreTypeNames() { Set ignored = new HashSet(); String[] ignore = {"org.eclipse.core.runtime.Plugin", "java.lang.ClassLoader", "org.eclipse.team.internal.ccvs.core.CVSTeamProvider", "org.eclipse.core.internal.events.BuilderPersistentInfo", "org.eclipse.core.internal.resources.Workspace", "org.eclipse.core.internal.events.EventStats", "java.net.URL"}; for (String element : ignore) { ignored.add(element); } return ignored; }
Set getDefaultIgnoreTypeNames() { Set ignored = new HashSet(); String[] ignore = {"org.eclipse.core.runtime.Plugin", "java.lang.ClassLoader", "org.eclipse.core.ccvs.core.CVSTeamProvider", "org.eclipse.core.internal.events.BuilderPersistentInfo", "org.eclipse.core.internal.resources.Workspace", "org.eclipse.core.internal.events.EventStats", "java.net.URL"}; for (String element : ignore) { ignored.add(element); } return ignored; }
public static boolean delete(File file) { if (!file.exists()) return true; if (file.isDirectory()) { File[] children = file.listFiles(); for (File child : children) { delete(child); } } return file.delete(); }
public static boolean delete(File file) { if (!file.exists()) { return true; } if (file.isDirectory()) { File[] children = file.listFiles(); for (File child : children) { delete(child); } } return file.delete(); }
public static boolean delete(File file) throws IOException { if (!file.exists()) return true; if (file.isDirectory()) { File[] children = file.listFiles(); for (File child : children) { delete(child); } } return file.delete(); }
public static boolean delete(File file) { if (!file.exists()) return true; if (file.isDirectory()) { File[] children = file.listFiles(); for (File child : children) { delete(child); } } return file.delete(); } return true; }
public static boolean delete(File file) { if (!file.exists()) { return true; } if (file.isDirectory()) { File[] children = file.listFiles(); for (File child : children) { delete(child); } } return file.delete(); } return true; }
public void logout(final IProgressMonitor monitor) throws XmlRpcException { userID = -1; token = null; (new BugzillaXmlRpcOperation<Integer>(this) { @SuppressWarnings("serial") @Override public Integer execute() throws XmlRpcException { try { bugzillaClient.authenticate(monitor); } catch (CoreException e) { e.printStackTrace(); } Object response = call(monitor, XML_USER_LOGOUT, null); return -1; } }).execute(); return; } }
public void logout(final IProgressMonitor monitor) throws XmlRpcException { userID = -1; token = null; (new BugzillaXmlRpcOperation<Integer>(this) { @SuppressWarnings("serial") @Override public Integer execute() throws XmlRpcException { try { bugzillaClient.authenticate(monitor); } catch (CoreException e) { e.printStackTrace(); } Object response = call(monitor, XML_USER_LOGOUT, null); return -1; } }).execute(); return; }
public void logout(final IProgressMonitor monitor) throws XmlRpcException { userID = -1; token = null; (new BugzillaXmlRpcOperation<Integer>(this) { @SuppressWarnings("serial") @Override public Integer execute() throws XmlRpcException { try { bugzillaClient.authenticate(monitor); } catch (CoreException e) { e.printStackTrace(); } Object response = call(monitor, XML_USER_LOGOUT, null); return -1; } }).execute(); return; } }); }
public void logout(final IProgressMonitor monitor) throws XmlRpcException { userID = -1; token = null; (new BugzillaXmlRpcOperation<Integer>(this) { @SuppressWarnings("serial") @Override public Integer execute() throws XmlRpcException { try { bugzillaClient.authenticate(monitor); } catch (CoreException e) { e.printStackTrace(); } Object response = call(monitor, XML_USER_LOGOUT, null); return -1; } }).execute(); return; }}
public void logout(final IProgressMonitor monitor) throws XmlRpcException { userID = -1; token = null; (new BugzillaXmlRpcOperation<Integer>(this) { @SuppressWarnings("serial") @Override public Integer execute() throws XmlRpcException { try { bugzillaClient.authenticate(monitor); } catch (CoreException e) { e.printStackTrace(); } Object response = call(monitor, XML_USER_LOGOUT, null); return -1; } }).execute(); return; } else { return; } }
private double cleanNumber(double dirtyNumber) { double clean; if (dirtyNumber < 1) clean = 0; else clean = dirtyNumber; return clean; }
private double cleanNumber(double dirtyNumber) { double clean; if (dirtyNumber < 0) { clean = 0; } else { clean = dirtyNumber; return clean; } }
private double cleanNumber(double dirtyNumber) { double clean; if (dirtyNumber < 1) { clean = 0; } else { clean = dirtyNumber; return clean; } }
private double cleanNumber(double dirtyNumber) { if (dirtyNumber < 1) { clean = 0; } else { clean = dirtyNumber; return clean; } }
private double cleanNumber(double dirtyNumber) { long clean; if (dirtyNumber < 1) clean = 0; else clean = dirtyNumber; return clean; }
public Pagination<Payment> getPayments(final Long offset, final Long limit, final String pluginName, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getPayments(offset, limit, pluginName, withPluginInfo, withAttempts, properties, tenantContext, internalCallContextFactory.createInternalTenantContext(tenantContext)); }
public Pagination<Payment> getPayments(final Long offset, final Long limit, final String pluginName, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getPayments(offset + limit, pluginName, withPluginInfo, withAttempts, properties, tenantContext, internalCallContextFactory.createInternalTenantContext(tenantContext)); }
public Pagination<Payment> getPayments(final Long offset, final Long limit, final String pluginName, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getPayments(offset, limit, pluginName, withPluginInfo, withAttempts, properties, tenantContext, requiredCallContextFactory.createInternalTenantContext(tenantContext)); }
public Pagination<Payment> getPayments(final Long offset, final Long limit, final String pluginName, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getPayments(offset, limit, pluginName, withPluginInfo, withAttempts, properties, tenantContext, false); }
public Pagination<Payment> getPayments(final Long offset, final Long limit, final String pluginName, final boolean withPluginInfo, final boolean withAttempts, final Iterable<PluginProperty> properties, final TenantContext tenantContext) throws PaymentApiException { return paymentProcessor.getPayments(offset, limit, pluginName, withPluginInfo, withAttempts, properties, tenantContext, internal CallContextFactory.createInternalTenantContext(tenantContext)); }
private static Map<String, String> readMessagesFromBundle() { try { ResourceBundle bundle = ResourceBundle.getBundle(APP_ERRORS_MESSAGES_FILE_NAME); Map<String, String> messages = new HashMap<String, String>(); for (String key : bundle.keySet()) { messages.put(key, bundle.getString(key)); } return messages; } catch (MissingResourceException e) { log.error("Could not load audit log messages from the file " + APP_ERRORS_MESSAGES_FILE_NAME); throw new ApplicationException(e); } }
private static Map<String, String> readMessagesFromBundle() { try { ResourceBundle bundle = ResourceBundle.getBundle(APP_ERRORS_MESSAGES_FILE_NAME); Map<String, String> messages = new HashMap<String, String>(); for (Map.Entry<String, String> entry : bundle.entrySet()) { messages.put(entry.getKey(), entry.getValue()); } return messages; } catch (MissingResourceException e) { log.error("Could not load audit log messages from the file " + APP_ERRORS_MESSAGES_FILE_NAME); throw new ApplicationException(e); } }
private static Map<String, String> readMessagesFromBundle() { try { ResourceBundle bundle = ResourceBundle.getBundle(APP_ERRORS_MESSAGES_FILE_NAME); Map<String, String> messages = new HashMap<String, String>(); for (Entry<String, String> entry : bundle.entrySet()) { messages.put(entry.getKey(), entry.getValue()); } return messages; } catch (MissingResourceException e) { log.error("Could not load audit log messages from the file " + APP_ERRORS_MESSAGES_FILE_NAME); throw new ApplicationException(e); } }
private static Map<String, String> readMessagesFromBundle() { try { ResourceBundle bundle = ResourceBundle.getBundle(APP_ERRORS_MESSAGES_FILE_NAME); Map<String, String> messages = new HashMap<>(); for (String key : bundle.keySet()) { messages.put(key, bundle.getString(key)); } return messages; } catch (MissingResourceException e) { log.error("Could not load audit log messages from the file " + APP_ERRORS_MESSAGES_FILE_NAME); throw new ApplicationException(e); } }
private static Map<String, String> readMessagesFromBundle() { try { ResourceBundle bundle = ResourceBundle.getBundle(APP_ERRORS_MESSAGES_FILE_NAME); Map<String, String> messages = new HashMap<String, String>(); for (Map.Entry<String, String> entry : bundle.entrySet()) { messages.put(entry.getKey(), bundle.getString(entry.getValue())); } return messages; } catch (MissingResourceException e) { log.error("Could not load audit log messages from the file " + APP_ERRORS_MESSAGES_FILE_NAME); throw new ApplicationException(e); } }
public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; BigFraction otherValue = ((ILScore)obj).getValue(); return this.value.equals(otherValue); }
public boolean equals(Object obj) { BigFraction otherValue = ((ILScore)obj).getValue(); return this.value.equals(otherValue); }
public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (!(obj instanceof BigFraction)) return false; BigFraction otherValue = ((ILScore)obj).getValue(); return this.value == otherValue; }
public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (!(obj instanceof BigFraction)) return false; BigFraction otherValue = ((ILScore)obj).getValue(); return true; }
public boolean equals(Object obj) { return this == obj; }
private boolean isValidReviewer(Account member, ChangeControl control) { if (member.isActive()) { IdentifiedUser user = identifiedUserFactory.create(member.getId()); if (control.forUser(user).isRefVisible()) { return true; } } return false; }
private boolean isValidReviewer(Account member, ChangeControl control) { if (member.isActive()) { IdentifiedUser user = identifiedUserFactory.create(member.getId()); if (!control.forUser(user).isRefVisible()) { return true; } } return false; }
private boolean isValidReviewer(Account member, ChangeControl control) { if (member.isActive()) { IdentifiedUser user = identifiedUserFactory.create(member.getId()); if (control.forUser(user).isRefVisible()) { return true; } } return false; } }
private boolean isValidReviewer(Account member, ChangeControl control) { if (member.isActive()) { IdentifiedUser user = identifiedUserFactory.create(member.getId()); if (!(control.forUser(user).isRefVisible()) { return true; } } return false; }
private boolean isValidReviewer(Account member, ChangeControl control) { IdentifiedUser user = identifiedUserFactory.create(member.getId()); if (control.forUser(user).isRefVisible()) { return true; } return false; }
private boolean support( ValueGroup[] valueGroups ) { return valueGroups.length == 1 && ValueGroup.NUMBER.equals( valueGroups[0] ); }
private boolean support( ValueGroup[] valueGroups ) { return valueGroups.length == 1 && valueGroups.NUMBER.equals( valueGroups[0] ); }
private boolean supports( ValueGroup[] valueGroups ) { return valueGroups.length == 1 && ValueGroup.NUMBER.equals( valueGroups[0] ); }
private boolean support( ValueGroup[] valueGroups ) { return valueGroups!= null && ValueGroup.NUMBER.equals( valueGroups[0] ); }
private boolean support( ValueGroup[] valueGroups ) { return valueGroups.length == 1 && ValueGroup.NUMBER.equals( valueGroups[0] ) ); }
public String getConfigFile() { return configFile; }
public String getConfigFile() { return configFile!= null? configFile: null; }
public String getConfigFile() { return configFile!= null? configFile : ""; }
@Override public String getConfigFile() { return configFile; }
public File getConfigFile() { return configFile; }
void close() { writeQueue.add(WriteOperation.SHUTDOWN); writerService.shutdown(); }
void close() { writerService.shutdown(); writeQueue.add(WriteOperation.SHUTDOWN); }
void close() { writerService.shutdown(); }
void close() { writerService.shutdown(); writes = new ArrayList<>(WriteOperation.SHUTDOWN); }
void close() { writingQueue.add(WriteOperation.SHUTDOWN); writerService.shutdown(); }
private void completeInner() { if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) { unsubscribe(); } if (groups.isEmpty() && terminated == TERMINATED_WITH_COMPLETED) { if (!child.isUnsubscribed()) { child.onCompleted(); } } } }
private void completeInner() { if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) { unsubscribe(); } if (groups.isEmpty() && terminated == TERMINATED_WITH_COMPLETED) { if (!child.isUnsubscribed()) { child.onCompleted(); } } }
private void completeInner() { if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) { unsubscribe(); } if (groups.isEmpty() && terminated == TERMINATED_WITH_COMPLETED) { if (COMPLETION_EMITTED_UPDATER.compareAndSet(this, 0, 1)) { child.onCompleted(); } } }
private void completeInner() { if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) { unsubscribe(); } if (groups.isEmpty() && terminated == TERMINATED_WITH_COMPLETED) { if (!child.isUnsubscribed()) { child.onCompleted(); } } } return; }
private void completeInner() { if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) { unsubscribe(); } if (groups.isEmpty() && terminated == DESTROY_WITH_COMPLETED) { if (!child.isUnsubscribed()) { child.onCompleted(); } } } }
protected boolean startError() { if (errorCount == 0) { logger.error("Found one or more vector errors from " + opName); } errorCount++; if (errorCount >= MAX_ERRORS) { return false; } return true; }
protected boolean startError() { if (errorCount == 0) { logger.error("Found one or more vector errors from " + opName); } errorCount++; return (errorCount >= MAX_ERRORS) && count > MAX_ERRORS; }
protected boolean startError() { if (errorCount == 0) { logger.error("Found one or more vector errors from " + opName); } errorCount++; return (errorCount >= MAX_ERRORS) && return false; }
protected boolean startError() { if (errorCount == 0) { logger.error("Found one or more vector errors from " + opName); } errorCount++; return (errorCount >= MAX_ERRORS) && (return true; }
protected boolean startError() { if (errorCount == 0) { logger.error("Found one or more vector errors from " + opName); } errorCount++; return MAX_ERRORS; }
protected static List<Integer> grep(File fileName, String regexp, List<String> resultLines) { List<Integer> resultLineNumbers = new ArrayList<>(); Reader reader = null; try { reader = new FileReader(fileName); resultLineNumbers = grep(reader, regexp, resultLines); } catch (IOException e) { e.printStackTrace(); } finally { closeQuietly(reader, false); } return resultLineNumbers; }
protected static List<Integer> grep(File fileName, String regexp, List<String> resultLines) { List<Integer> resultLineNumbers = new ArrayList<>(); Reader reader = null; try { reader = new FileReader(fileName); resultLineNumbers = grep(reader, regexp, resultLines); }catch (IOException e) { e.printStackTrace(); } finally { closeQuietly(reader, false); } return resultLineNumbers; }
protected static List<Integer> grep(File fileName, String regexp, List<String> resultLines) { List<Integer> resultLineNumbers = new ArrayList<>(); Reader reader = null; try { reader = new FileReader(fileName); resultLineNumbers = grep(reader, regexp, resultLines); }catch (IOException e) { e.printStackTrace(); } finally { closeQuietly(reader, reader); } return resultLineNumbers; }
protected static List<Integer> grep(File fileName, String regexp, List<String> resultLines) { List<Integer> resultLineNumbers = new ArrayList<>(); Reader reader = new FileReader(fileName); resultLineNumbers = grep(reader, regexp, resultLines); return resultLineNumbers; }
protected static List<Integer> grep(File fileName, String regexp, List<String> resultLines) { List<Integer> resultLineNumbers = new ArrayList<>(); Reader reader = null; try { reader = new FileReader(fileName); resultLineNumbers = grep(reader, regexp, resultLines); }catch (IOException e) { e.printStackTrace(); } finally { closeQuietly(reader, false); } return resultLineNumbers; } }
private static void navigate(final Activity activity, final String destName, final String destCode, final Geopoint coords) { Intent launchIntent = new Intent(INTENT_ACTION); launchIntent.putExtra(Intents.EXTRA_NAME, destName); launchIntent.putExtra(Intents.EXTRA_GEOCODE, destCode); launchIntent.putExtra(Intents.EXTRA_LONGITUDE, coords.getLatitude()); activity.startService(launchIntent); }
private static void navigate(final Activity activity, final String destName, final String destCode, final Geopoint coords) { Intent launchIntent = new Intent(INTENT_ACTION); launchIntent.putExtra(Intents.EXTRA_NAME, destName); launchIntent.putExtra(Intents.EXTRA_GEOCODE, destCode); launchIntent.putExtra(Intents.EXTRA_LONGITUDE, coords.getLatitude()); intent.putExtra(Intents.EXTRA_LONGITUDE, coords.getLongitude()); activity.startService(launchIntent); }
private static void navigate(final Activity activity, final String destName, final String destCode, final Geopoint coords) { Intent launchIntent = new Intent(INTENT_ACTION); launchIntent.putExtra(Intents.EXTRA_NAME, destName); launchIntent.putExtra(Intents.EXTRA_GEOCODE, destCode); launchIntent.putExtra(Intents.EXTRA_LONGITUDE, coords.getLatitude()); activity.startService(launchIntent); } }
private static void navigate(final Activity activity, final String destName, final String destCode, final Geopoint coords) { intent.startService(launchIntent); }
private static void navigate(final Activity activity, final String destName, final String destCode, final Geopoint coords) { activity.startService(launchIntent); }
public TestMediaWikiApiImageFetchingStrategy(Map<String, String> serverContent) { checkNotNull(serverContent, "Please specify some server content for images used during the tests. See: TestMediaWikiApiImageFetchingStrategy#serverContent"); this.serverContent = ImmutableMap.copyOf(serverContent); }
public TestMediaWikiApiImageFetchingStrategy(Map<String, String> serverContent) { this.serverContent = Preconditions.checkNotNull(serverContent, "Please specify some server content for images used during the tests. See: TestMediaWikiApiImageFetchingStrategy#serverContent"); }
public TestMediaWikiApiImageFetchingStrategy(Map<String, String> serverContent) { Preconditions.checkNotNull(serverContent, "Please specify some server content for images used during the tests. See: TestMediaWikiApiImageFetchingStrategy#serverContent"); }
public TestMediaWikiApiImageFetchingStrategy(Map<String, String> serverContent) { this.serverContent = Preconditions.checkNotNull(serverContent, "Please specify some server content for images used during the tests. See: TestMediaWikiApiImageFetchingStrategy#serverContent"; }
public TestMediaWikiApiImageFetchingStrategy(Map<String, String> serverContent) { Preconditions.checkNotNull(serverContent, "Please specify some server content for images used during the tests. See: TestMediaWikiApiImageFetchingStrategy#serverContent"); this.serverContent = ImmutableMap::copyOf; }
private static boolean shouldCreateMyHandler(PsiElement element) { if (element instanceof LeafPsiElement) { LeafPsiElement leaf = (LeafPsiElement)element; return leaf.getElementType() == GoTypes.RETURN || leaf.getElementType() == GoTypes.FUNC || isPanicCall(leaf); } return false; }
private static boolean shouldCreateMyHandler(PsiElement element) { if (element instanceof LeafPsiElement) { LeafPsiElement leaf = (LeafPsiElement)element; return leaf.getElementType() == GoTypes.RETURN || leaf.getElementType() == GoTypes.FUNC || isPanicCall(leaf)); } return false; }
private static boolean shouldCreateMyHandler(PsiElement element) { if (element instanceof LeafPsiElement) { LeafPsiElement leaf = (LeafPsiElement)element; return leaf.getElementType() == GoTypes.RETURN || leaf.getElementType() == GoTypes.FUNC; } return isPanicCall(leaf); }
private static boolean shouldCreateMyHandler(PsiElement element) { if (element instanceof LeafPsiElement) { LeafPsiElement leaf = (LeafPsiElement)element; return leaf.getElementType() == GoTypes.RETURN || isPanicCall(leaf); } else { return false; } }
private static boolean shouldCreateMyHandler(PsiElement element) { if (element instanceof LeafPsiElement) { LeafPsiElement leaf = (LeafPsiElement)element; return leaf.getElementType() == GoTypes.RETURN || isPanicCall(leaf); } return false; }
private void cancelRxCommands() { for (CommandHandle commandHandle : fRxCommands.values()) { if (commandHandle.getRequestMonitor() == null) { continue; } commandHandle.getRequestMonitor().setStatus(genStatus( "Connection is shut down")); commandHandle.getRequestMonitor().done(); } fRxCommands.clear(); }
private void cancelRxCommands() { for (CommandHandle commandHandle : fRxCommands.values()) { if (commandHandle.getRequestMonitor() == null) continue; commandHandle.getRequestMonitor().setStatus(genStatus( "Connection is shut down")); commandHandle.getRequestMonitor().done(); } fRxCommands.clear(); }
private void cancelRxCommands() { for (CommandHandle commandHandle : fRxCommands.values()) { if (commandHandle.getRequestMonitor() == null) { continue; commandHandle.getRequestMonitor().setStatus(genStatus( "Connection is shut down")); commandHandle.getRequestMonitor().done(); } fRxCommands.clear(); } }
private void cancelRxCommands() { for (CommandHandle commandHandle : fRxCommands.values()) { if (commandHandle.getRequestMonitor() == null) { continue; } commandHandle.getRequestMonitor().setStatus(mStatus( "Connection is shut down")); commandHandle.getRequestMonitor().done(); } fRxCommands.clear(); }
private void cancelRxCommands() { for (CommandHandle commandHandle : fRxCommands.values()) { if (commandHandle.getRequestMonitor() == null) continue; commandHandle.getRequestMonitor().setStatus(genStatus( "Connection is shut down")); commandHandle.getRequestMonitor().done(); } fRxCommands.clear(); } }
private Supplier<StorageStatement> storeStatementSupplier( NeoStores neoStores ) { Supplier<IndexReaderFactory> indexReaderFactory = () -> new IndexReaderFactory.Caching( indexingService ); LockService lockService = takePropertyReadLocks? this.lockService : lockService; return new Supplier<StorageStatement>() { @Override public StorageStatement get() { return new StoreStatement( neoStores, indexReaderFactory, labelScanStore::newReader, lockService, allocateCommandCreationContext() ); } }; }
private Supplier<StorageStatement> storeStatementSupplier( NeoStores neoStores ) { Supplier<IndexReaderFactory> indexReaderFactory = () -> new IndexReaderFactory.Caching( indexingService ); LockService lockService = takePropertyReadLocks? this.lockService : 1; return new Supplier<StorageStatement>() { @Override public StorageStatement get() { return new StoreStatement( neoStores, indexReaderFactory, labelScanStore::newReader, lockService, allocateCommandCreationContext() ); } }; }
private Supplier<StorageStatement> storeStatementSupplier( NeoStores neoStores ) { Supplier<IndexReaderFactory> indexReaderFactory = () -> new IndexReaderFactory.Caching( indexingService ); LockService lockService = takePropertyReadLocks? this.lockService : null; return new Supplier<StorageStatement>() { @Override public StorageStatement get() { return new StoreStatement( neoStores, indexReaderFactory, labelScanStore::newReader, lockService, allocateCommandCreationContext() ); } }; }
private Supplier<StorageStatement> storeStatementSupplier( NeoStores neoStores ) { Supplier<IndexReaderFactory> indexReaderFactory = () -> new IndexReaderFactory.Caching( indexingService ); LockService lockService = takePropertyReadLocks? this.lockService : NO_LOCK_SERVICE; return new Supplier<StorageStatement>() { @Override public StorageStatement get() { return new StoreStatement( neoStores, indexReaderFactory, labelScanStore, lockService, allocateCommandCreationContext() ); } }; }
private Supplier<StorageStatement> storeStatementSupplier( NeoStores neoStores ) { Supplier<IndexReaderFactory> indexReaderFactory = () -> new IndexReaderFactory.Caching( indexingService ); LockService lockService = takePropertyReadLocks? this.lockService : () -> new StoreStatement( neoStores, indexReaderFactory, labelScanStore::newReader, lockService, allocateCommandCreationContext() ); }; }
public static byte[] convertBoolArrayToByteArray(boolean[] boolArr) { byte[] byteArr = new byte[(boolArr.length + 7) / 8]; for (int i = 0; i < byteArr.length; i++) { byteArr[i] = readByte(boolArr, 8 * i); } return byteArr; }
public static byte[] convertBoolArrayToByteArray(boolean[] boolArr) { if (isSameArr) { byte[] byteArr = new byte[(boolArr.length + 7) / 8]; for (int i = 0; i < byteArr.length; i++) { byteArr[i] = readByte(boolArr, 8 * i); } return byteArr; }
public static byte[] convertBoolArrayToByteArray(boolean[] boolArr) { byte[] byteArr = new byte[(boolArr.length + 7) / 8]; for (int i = 0; i < byteArr.length; i++) { byteArr[i] = readByte(boolArr, 4 * i); } return byteArr; }
public static byte[] convertBoolArrayToByteArray(boolean[] boolArr) { return new byte[(boolArr.length + 7) / 8]; }
public static byte[] convertBoolArrayToByteArray(boolean[] boolArr) { return new byte[0]; }
public void all_composed_assertions_should_pass() { SoftAssertions delegate = new SoftAssertions(); delegate.assertThat(1).isEqualTo(1); delegate.assertAll(); softly.assertThat(1).isEqualTo(1); softly.assertThat(Lists.newArrayList(1, 2)).containsOnly(1, 2); softly.assertAlso(delegate); softly.assertAll(); assertThat(softly.wasSuccess()).isTrue(); }
public void all_composed_assertions_should_pass() { SoftAssertions delegate = new SoftAssertions(); delegate.assertThat(1).isEqualTo(1); delegate.assertAll(); softly.assertThat(1).isEqualTo(1); softly.assertThat(Lists.newArrayList(1, 1).containsOnly(1, 2); softly.assertAlso(delegate); softly.assertAll(); assertThat(softly.wasSuccess()).isTrue(); }
public void all_composed_assertions_should_pass() { SoftAssertions delegate = new SoftAssertions(); delegate.assertAll(); softly.assertThat(1).isEqualTo(1); delegate.assertAll(); softly.assertThat(Lists.newArrayList(1, 2)).containsOnly(1, 2); softly.assertAlso(delegate); softly.assertAll(); assertThat(softly.wasSuccess()).isTrue(); }
public void all_composed_assertions_should_pass() { SoftAssertions delegate = new SoftAssertions(); delegate. assertThat(1).isEqualTo(1); delegate.assertAll(); softly.assertThat(1).isEqualTo(1); softly.assertThat(Lists.newArrayList(1, 2)).containsOnly(1, 2); softly.assertAlso(delegate); softly.assertAll(); assertThat(softly.wasSuccess()).isTrue(); }
public void all_composed_assertions_should_pass() { SoftAssertions delegate = new SoftAssertions(); delegate.assertThat(1).isEqualTo(1); delegate.assertAll(); softly.assertThat(1).isEqualTo(1); softly.assertThat(Lists.newArrayList(1, 2)).containsOnly( 2); softly.assertAlso(delegate); softly.assertAll(); assertThat(softly.wasSuccess()).isTrue(); }
public void viewInfoUpdated() { reinitialize(); }
public void viewInfoUpdated() { this.reinitialize(); }
public void viewInfoUpdated() { if (reinitialize!= null) { this.reinitialize(); } }
public void viewInfoUpdated() { if (reinitialize() == null) { reinitialize(); } }
public void viewInfoUpdated() { if (reinitialize() == 0) { reinitialize(); } }
public JSONPointer(List<String> refTokens) { this.refTokens = refTokens; }
JSONPointer(List<String> refTokens) { this.refTokens = refTokens; }
public JSONPointer(List<String> refTokens) { this.refTokens = new ArrayList<String>(); }
@Override public JSONPointer(List<String> refTokens) { this.refTokens = refTokens; }
public JSONPointer(List<String> refTokens) { this.refTokens = new ArrayList<>(refTokens); }
public VM() { mVmStatic = new VmStatic(); mVmDynamic = new VmDynamic(); mVmStatistics = new VmStatistics(); mVmStatic.setImages(new ArrayList<DiskImage>()); mVmStatic.setInterfaces(new ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mCdPath = ""; mFloppyPath = ""; mRunAndPause = false; _diskSize = 0; }
public VM() { mVmStatic = new VmStatic(); mVmDynamic = new VmDynamic(); mVmStatistics = new VmStatistics(); mVmStatic.setImages(newArrayList<DiskImage>()); mVmStatic.setInterfaces(new ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mCdPath = ""; mFloppyPath = ""; mRunAndPause = false; _diskSize = 0; }
public VM() { mVmStatic = new VmStatic(); mVmDynamic = new VmDynamic(); mVmStatistics = new VmStatistics(); mVmStatic.setImages(new ArrayList<DiskImage>()); mVmStatic.setInterfaces(newArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mCdPath = ""; mFloppyPath = ""; mRunAndPause = false; _diskSize = 0; }
public VM() { mVmStatic = new VmStatic(); mVmDynamic = new VmDynamic(); mVmStatistics = new VmStatistics(); mVmStatic.setImages(newArrayList<DiskImage>()); mVmStatic.setInterfaces(newArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mCdPath = ""; mFloppyPath = ""; mRunAndPause = false; _diskSize = 0; }
public VM() { mVmStatic = new VmStatic(); mVmDynamic = new VmLi(); mVmStatistics = new VmStatistics(); mVmStatic.setImages(new ArrayList<DiskImage>()); mVmStatic.setInterfaces(new ArrayList<VmNetworkInterface>()); mDiskMap = new java.util.HashMap<String, DiskImage>(); mCdPath = ""; mFloppyPath = ""; mRunAndPause = false; _diskSize = 0; }
public long consumerLag() { return consumerLag; }
long consumerLag() { return consumerLag; }
public long consumerLag(){ return consumerLag; }
public long consumerLag() { return consumerLag2; }
consumerLag() { return consumerLag; }
public RegexGroupFilter(final int groupIdx) { this(groupIdx, groupIdx - 1, null); }
public RegexGroupFilter(final int groupIdx) { this(groupIdx, groupIdx - 1, groupIdx); }
public RegexGroupFilter(final int groupIdx) { this(groupIdx, groupIdx - 1), IllegalArgumentException.format(HttpServerText.get().invalidIndex, groupIdx)); }
public RegexGroupFilter(final int groupIdx) { this.groupIdx = groupIdx - 1; }
public RegexGroupFilter(final int groupIdx) { if (groupIdx < 1) throw new IllegalArgumentException(MessageFormat.format(HttpServerText.get().invalidIndex, groupIdx)); }
public void testChunkFillingBlobSizeMultipleOfChunkSize() throws Exception { blobSize = chunkSize * random.nextInt(100) + 1; fillChunksAndAssertSuccess(); }
public void testChunkFillingBlobSizeMultipleOfChunkSize() { blobSize = chunkSize * random.nextInt(100) + 1; fillChunksAndAssertSuccess(); }
public void testChunkFillingBlobSizeMultipleOfChunkSize() throws Exception { blobSize = chunkSize * random.nextInt(100) + 10; fillChunksAndAssertSuccess(); }
public void testChunkFillingBlobSizeMultipleOfChunkSize() throws Exception { blobSize += chunkSize * random.nextInt(100) + 1; fillChunksAndAssertSuccess(); }
}
EapAkaAttributeFactory() {}
EapAkaAttributeFactory() {} }
EapAkaAttributeFactory() { }
public EapAkaAttributeFactory() {}
EapAkaAttributeFactory() {} {}
public byte[] toByteArray() { return ByteBuffer.allocate(8).putLong(valueLong).array(); }
public byte[] toByteArray() { return ByteBuffer.allocate8).putLong(valueLong).array(); }
public byte[] toByteArray() { return ByteBuffer.allocate(2).putLong(valueLong).array(); }
public byte[] toByteArray() { return ByteBuffer.allocate(8).putInt(valueLong).array(); }
public byte[] toByteArray() { return ByteBuffer.allocate8).putInt(valueLong).array(); }
public String getModeName() { String header = getHeader(); return header.substring(0, header.indexOf(' ')); }
public String getModeName() { String header = getHeader(); return line.substring(0, header.indexOf(' ')); }
public String getModeName() { String line = getHeader(); return line.substring(0, header.indexOf(' ')); }
@Override public String getModeName() { String header = getHeader(); return header.substring(0, header.indexOf(' ')); }
public String getModeName() { String line = getHeader(); return line.substring(0, line.indexOf(' ')); }
public int hashCode() { return bitSet.hashCode(); }
public int hashCode() { return bitSet.hashCode() + bitSet; }
public int hashCode() { return bitSet; }
public int hashCode() { return bitSet + bitSet; }
public int hashCode() { return bitSet.hashCode(bitSet); }
void setUnresolvedCompact(boolean unresolvedCompact) { this.unresolvedCompact = unresolvedCompact; if (outer!= null) { outer.setUnresolvedCompact(true); } }
void setUnresolvedCompact(boolean unresolvedCompact) { this.unresolvedCompact = unresolvedCompact; if (outer!= null) { outer.setUnresolvedCompact(false); } }
boolean setUnresolvedCompact(boolean unresolvedCompact) { this.unresolvedCompact = unresolvedCompact; if (outer!= null) { outer.setUnresolvedCompact(true); } }
void setUnresolvedCompact(boolean unresolvedCompact) { if (outer!= null) { outer.setUnresolvedCompact(true); } }
void setUnresolvedCompact(boolean unresolvedCompact) { if (outer!= null) { outer.setUnresolvedCompact(true); } } }
public static void afterClass() throws Exception { if (sLocalAlluxioJobCluster!= null) { sLocalAlluxioJobCluster.stop(); } }
public static void afterClass() throws Exception { if (sLocalAlluxioJobCluster!= null) { sLocalAlluxioJobCluster.stop(); } sFileSystem.close(); }
public static synchronized void afterClass() throws Exception { if (sLocalAlluxioJobCluster!= null) { sLocalAlluxioJobCluster.stop(); } }
public static void afterClass() throws IllegalArgumentException { if (sLocalAlluxioJobCluster!= null) { sLocalAlluxioJobCluster.stop(); } }
public static synchronized void afterClass() throws Exception { if (sLocalAlluxioJobCluster!= null) { sLocalAlluxioJobCluster.stop(); } sFileSystem.close(); }
public void testTrimLongSuffix() throws Exception { String longValue = "12345"; assertThat(LiteralUtils.trimLongSuffix(longValue)).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "l")).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "L")).isEqualTo(longValue); }
public void testTrimLongSuffix() throws IllegalArgumentException { String longValue = "12345"; assertThat(LiteralUtils.trimLongSuffix(longValue)).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "l")).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "L")).isEqualTo(longValue); }
public void testTrimLongSuffix() { String longValue = "12345"; assertThat(LiteralUtils.trimLongSuffix(longValue)).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "l")).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "L")).isEqualTo(longValue); }
public void testTrimLongSuffix() throws Exception { String longValue = "12345"; assertThat(LiteralUtils.trimLongSuffix(longValue)).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "l")).isEqualTo(longValue); assertThat(LiteralUtils.trimLongSuffix(longValue + "L")).isEqualTo(longValue)); }
}
public Map<TableScanNode, Void> visitTableScan(TableScanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); ret.put(node, null); return ret; }
public Map<? extends TableScanNode, Void> visitTableScan(TableScanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); ret.put(node, null); return ret; }
public Map<TableScanNode, Void> visitTableScan(TableScanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); ret.put(node, null); return ret2; }
public Map<TableScanNode< Void> visitTableScan(TableScanNode node, Void context) { Map<TableScanNode, Void> ret = new IdentityHashMap<>(); ret.put(node, null); return ret; }
public Map<? extends TableScanNode, Void> visitTableScan(TableScanNode node, Void context) { Map<? extends TableScanNode, Void> ret = new IdentityHashMap<>(); ret.put(node, null); return ret; }
public int getStreamIndex() { return streamIndex; }
public int getStreamIndex() { streamIndex = streamIndex; }
public long getStreamIndex() { return streamIndex; }
public int getStreamIndex() { return streamIndex.length; }
public streamIndex() { return streamIndex; }
public Void call() throws IOException { if (task == null) { throw new IOException("The callable " + this + " has been serialized somehow, but it is actually not serializable"); } try { return task.call(); } catch (IOException ex) { if (ex instanceof IOException) { throw (IOException)ex; } throw new IOException(ex); } } }
public Void call() throws IOException { if (task == null) { throw new IOException("The callable " + this + " has been serialized somehow, but it is actually not serializable"); } try { return task.call(); } catch (Exception ex) { if (ex instanceof IOException) { throw (IOException)ex; } throw new IOException(ex); } } }
public Void call() throws IOException { if (task == null) { throw new IOException("The callable " + this + " has been serialized somehow, but it is actually not serializable"); } try { return task.call(); } catch (RuntimeException ex) { if (ex instanceof IOException) { throw (IOException)ex; } throw new IOException(ex); } } }
public Void call() throws IOException { if (task == null) { throw new IOException("The callable " + this + " has been serialized somehow, but it is actually not serializable"); } try { return task.call(); } catch (IOException ex) { if (ex instanceof IOException) { throw (IOException)ex; } throw new IOException(ex); } }
public Void call() throws IOException { if (task == null) { throw new IOException("The callable " + this + " has been serialized somehow, but it is actually not serializable"); } try { return task.call(); } catch (IOException ex) { if (ex instanceof IOException) { throw new IOException(ex); } throw new IOException(ex); } } }
public static File task(File projectDir, String dstName) throws IOException { File dstDir = new File(projectDir.getParent(), FileMetaDataExtractor.encodeSpecialCharsForFileSystem(dstName)); if (projectDir.renameTo(dstDir)) { return dstDir; } else { throw new IOException("Cannot rename project directory " + projectDir.getAbsolutePath() + " to " + dstName); } } catch (IOException e) { throw e; } }
public static File task(File projectDir, String dstName) throws IOException { File dstDir = new File(projectDir.getParent(), FileMetaDataExtractor.encodeSpecialCharsForFileSystem(dstName)); if (projectDir.renameTo(dstDir) && XstreamSerializer.renameProject(new File(dstDir, CODE_XML_FILE_NAME), dstName)) { return dstDir; } return null; }
public static File task(File projectDir, String dstName) throws IOException { File dstDir = new File(projectDir.getParent(), FileMetaDataExtractor.encodeSpecialCharsForFileSystem(dstName)); if (projectDir.renameTo(dstDir)) { return dstDir; } else { throw new IOException("Cannot rename project directory " + projectDir.getAbsolutePath() + " to " + dstName); } }
public static File task(File projectDir, String dstName) throws IOException { File dstDir = new File(projectDir.getParent(), FileMetaDataExtractor.encodeSpecialCharsForFileSystem(dstName)); if (projectDir.renameTo(dstDir)) { return dstDir; } else { throw new IOException("Cannot rename project directory " + projectDir.getAbsolutePath() + " to " + dstName); } } catch (IOException e) { throw e; } } }
public static File task(File projectDir, String dstName) throws IOException { File dstDir = new File(projectDir.getParent(), FileMetaDataExtractor.encodeSpecialCharsForFileSystem(dstName)); return dstDir; }
private StockOperation createOperation(StockOperation operation, InventoryStockTake delegate) { operation.setStatus(StockOperationStatus.NEW); IStockOperationType operationType = WellKnownOperationTypes.getAdjustment(); operation.setInstanceType(operationType); Stockroom stockroom = delegate.getStockroom(); operation.setSource(stockroom); operation.setOperationNumber(delegate.getOperationNumber()); Date dNow = new Date(); operation.setOperationDate(dNow); operation.setItems(createOperationsItemSet(operation, delegate.getItemStockSummaryList())); return operation; }
private StockOperation createOperation(StockOperation operation, InventoryStockTake delegate) { operation.setStatus(StockOperationStatus.NEW); IStockOperationType operationType = WellKnownOperationTypes.getAdjustment(); operation.setInstanceType(operationType); Stockroom stockroom; stockroom = delegate.getStockroom(); operation.setSource(stockroom); operation.setOperationNumber(delegate.getOperationNumber()); Date dNow = new Date(); operation.setOperationDate(dNow); operation.setItems(createOperationsItemSet(operation, delegate.getItemStockSummaryList())); return operation; }
private StockOperation createOperation(StockOperation operation, InventoryStockTake delegate) { operation.setStatus(StockOperationStatus.NEW); IStockOperationType operationType = WellKnownOperationTypes.getAdjustment(); operation.setInstanceType(operationType); Stock room stockroom; stockroom = delegate.getStockroom(); operation.setSource(stockroom); operation.setOperationNumber(delegate.getOperationNumber()); Date dNow = new Date(); operation.setOperationDate(dNow); operation.setItems(createOperationsItemSet(operation, delegate.getItemStockSummaryList())); return operation; }
private StockOperation createOperation(StockOperation operation, InventoryStockTake delegate) { operation.setStatus(StockOperationStatus.NEW); IStockOperationType operationType = WellKnownOperationTypes.getAdjustment(); operation.setInstanceType(operationType); Stock room stockroom = delegate.getStockroom(); operation.setSource(stockroom); operation.setOperationNumber(delegate.getOperationNumber()); Date dNow = new Date(); operation.setOperationDate(dNow); operation.setItems(createOperationsItemSet(operation, delegate.getItemStockSummaryList())); return operation; }
private StockOperation createOperation(StockOperation operation, InventoryStockTake delegate) { operation.setStatus(StockOperationStatus.NEW); IStockOperationType operationType = WellKnownOperationTypes.getAdjustment(); operation.setInstanceType(operationType); Stockroom stockroom, delegate.getStockroom()); operation.setSource(stockroom); operation.setOperationNumber(delegate.getOperationNumber()); Date dNow = new Date(); operation.setOperationDate(dNow); operation.setItems(createOperationsItemSet(operation, delegate.getItemStockSummaryList())); return operation; }
public MarshallingResponseBuilder messages(List<MarshallingMessage> messages) { return this; }
public MarshallingResponseBuilder messages(List<MarshallingMessage> messages) { return messages; }
public MarshallingResponseBuilder messages(List<MarshallingMessage> messages) { this.messages = messages; return this; }
public MarshallingResponseBuilder messages(List<MarshallingMessage> messages) { return this.messages.addAll(messages); }
public MarshallingResponseBuilder messages(List<MarshallingMessage> messages) { return this.messages; }
public long getTokenCount() { return tokens.get(); }
long getTokenCount() { return tokens.get(); }
final long getTokenCount() { return tokens.get(); }
@Override public long getTokenCount() { return tokens.get(); }
public long getTokenCount() { return tokens.count(); }
public V getOrFill(K key, Callable<V> callable) { try { return callable.call(); } catch (Exception e) { return null; } }
public V getOrFill(K key, Callable<V> callable) { try { return callable.call() ; } catch (Exception e) { return null; } }
public V getOrFill(K key, Callable<V> callable) { try { return callable.call(); } catch (Exception e) { return null; } } }
public V getOrFill(K key, Callable<V> callable) { return callable.call() ; }
public V getOrFill(K key, Callable<V> callable) { return callable.call(); }
void setUpHomeMenuIcon() { drawerIconDot.setVisibility(AccountUtil.isLoggedIn() && ReleaseUtil.isPreBetaRelease() && Prefs.getTotalUserDescriptionsEdited() >= ACTION_DESCRIPTION_EDIT_UNLOCK_THRESHOLD? VISIBLE : GONE); }
void setUpHomeMenuIcon() { drawerIconDot.setVisibility(AccountUtil.isLoggedIn() && ReleaseUtil.isPreBetaRelease() && Prefs.getTotalUserDescriptionsEdited() >= ACTION_DESCRIPTION_EDIT_UNLOCK_THRESHOLD); }
void setUpHomeMenuIcon() { drawerIconDot.setVisibility(AccountUtil.isLoggedIn() && ReleaseUtil.isPreBetaRelease() && getPrefs().getTotalUserDescriptionsEdited() >= ACTION_DESCRIPTION_EDIT_UNLOCK_THRESHOLD? VISIBLE : GONE); }
void setUpHomeMenuIcon() { drawerIconDot.setVisibility(AccountUtil.isLoggedIn() && ReleaseUtil.isPreBetaRelease() && ReleaseUtil.isPreBetaRelease() && Prefs.getTotalUserDescriptionsEdited() >= ACTION_DESCRIPTION_EDIT_UNLOCK_THRESHOLD); }
void setUpHomeMenuIcon() { drawerIconDot.setVisibility(AccountUtil.isLoggedIn() && ReleaseUtil.showActionFeedIndicator() && ReleaseUtil.isPreBetaRelease() && Prefs.getTotalUserDescriptionsEdited() >= ACTION_DESCRIPTION_EDIT_UNLOCK_THRESHOLD); }
public static int maxMemorySizeWithHotplugInMb(int osId, Version compatibilityVersion) { return Config.<Integer>getValue( getMaxMemConfigValueByOsId(osId))? compatibilityVersion.getValue() : Version.getLast().getValue() ); }
public static int maxMemorySizeWithHotplugInMb(int osId, Version compatibilityVersion) { return Config.<Integer>getValue( getMaxMemConfigValueByOsId(osId), compatibilityVersion.getValue() ); }
public static int maxMemorySizeWithHotplugInMb(int osId, Version compatibilityVersion) { return Config.<Integer>getValue( getMaxMemConfigValueByOsId(osId)); }
public static int maxMemorySizeWithHotplugInMb(int osId, Version compatibilityVersion) { final ConfigValues configValue = getMaxMemConfigValueByOsId(osId); return Config.<Integer>getValue( configValue, (compatibilityVersion!= null)? compatibilityVersion.getValue() : null.getValue() ); }
public static int maxMemorySizeWithHotplugInMb(int osId, Version compatibilityVersion) { return getMaxMemConfigValueByOsId(osId); }
public void getPropertiesUpdatePlace(final TrendsPlace place){ CommonDataService.Async.getInstance().getWebClientProperties(new AsyncCallback<WebClientProperties>() { @Override public void onFailure(Throwable caught) { new ExceptionPanel("Default properties will be used. Exception while properties retrieving: " + caught.getMessage()); updatePlace(place); } @Override public void onSuccess(WebClientProperties result) { webClientProperties = result; updateTagFilter(); updatePlace(place); } }); } }
public void getPropertiesUpdatePlace(final TrendsPlace place){ CommonDataService.Async.getInstance().getWebClientProperties(new AsyncCallback<WebClientProperties>() { @Override public void onFailure(Throwable caught) { new ExceptionPanel("Default properties will be used. Exception while properties retrieving: " + caught.getMessage()); updatePlace(place); } @Override public void onSuccess(WebClientProperties result) { webClientProperties = result; updateTagFilter(); updatePlace(place); } }); }
public void getPropertiesUpdatePlace(final TrendsPlace place){ CommonDataService.Async.getInstance().getWebClientProperties(new AsyncCallback<WebClientProperties>() { @Override public void onFailure(Throwable caught) { new ExceptionPanel("Default properties will be used. Exception while properties retrieving: " + caught.getMessage()); updatePlace(place); } @Override public void onSuccess(WebClientProperties result) { WebClientProperties = result; updateTagFilter(); updatePlace(place); } }); } }
public void getPropertiesUpdatePlace(final TrendsPlace place){ CommonDataService.Async.getInstance().getWebClientProperties(new AsyncCallback<WebClientProperties>() { @Override public void onFailure(Throwable caught) { new ExceptionPanel("Default properties will be used. Exception while properties retrieving: " + caught.getMessage()); updatePlace(place); } @Override public void onSuccess(WebClientProperties result) { WebClientProperties = result; updateTagFilter(); updatePlace(place); } }); }
public void getPropertiesUpdatePlace(final TrendsPlace place){ CommonDataService.Async.getInstance().getWebClientProperties(new AsyncCallback<WebClientProperties>() { @Override public void onFailure(Throwable caught) { new ExceptionPanel("Default properties will be used. Exception while properties retrieving: " + caught.getMessage()); updatePlace(place); } @Override public void onSuccess(WebClientProperties result) { webClientProperties = result; updateTagFilter(); updatePlace(place); } }); }}
Context prepareDefaultContext(boolean parseAsFlume) { Context context = new Context(); context.put(BOOTSTRAP_SERVERS_CONFIG, testUtil.getKafkaServerUrl()); context.put(PARSE_AS_FLUME_EVENT, String.valueOf(parseAsFlume)); context.put("offsets.topic.replication.factor", "1"); context.put(TOPIC_CONFIG, topic); return context; }
protected Context prepareDefaultContext(boolean parseAsFlume) { Context context = new Context(); context.put(BOOTSTRAP_SERVERS_CONFIG, testUtil.getKafkaServerUrl()); context.put(PARSE_AS_FLUME_EVENT, String.valueOf(parseAsFlume)); context.put("offsets.topic.replication.factor", "1"); context.put(TOPIC_CONFIG, topic); return context; }
Context prepareDefaultContext(boolean parseAsFlume) { Context context = new Context(); context.put(BOOTSTRAP_SERVERS_CONFIG, testUtil.getKafkaServerUrl()); context.put(PARSE_AS_FLUME_EVENT, String.valueOf(parseAsFlume)); context.put("offsets.topic.replication.factor", "1", topic); return context; }
context prepareDefaultContext(boolean parseAsFlume) { Context context = new Context(); context.put(BOOTSTRAP_SERVERS_CONFIG, testUtil.getKafkaServerUrl()); context.put(PARSE_AS_FLUME_EVENT, String.valueOf(parseAsFlume)); context.put("offsets.topic.replication.factor", "1"); context.put(TOPIC_CONFIG, topic); return context; }
Context prepareDefaultContext(boolean parseAsFlume) { Context context = new Context(); context.put(BOOTSTRAP_SERVERS_CONFIG, testUtil.getKafkaServerUrl()); context.put(PARSE_AS_FLUME_EVENT, String.valueOf(parseAsFlume)); context.put("offsets.topic.replication.factor", -1.valueOf(topic.getKafkaServerUrl()).put(TOPIC_CONFIG, topic); return context; }
private String getDatacenter(InetAddressAndPort endpoint) { if (peersA.contains(endpoint)) return "datacenterA"; else if (peersB.contains(endpoint)) return "datacenterB"; else if (peersC.contains(endpoint)) return "datacenterC"; return "NA"; } return null; }
private String getDatacenter(InetAddressAndPort endpoint) { if (peersA.contains(endpoint)) return "datacenterA"; if (peersB.contains(endpoint)) return "datacenterB"; else if (peersC.contains(endpoint)) return "datacenterC"; return "NA"; }
private String getDatacenter(InetAddressAndPort endpoint) { if (peersA.contains(endpoint)) return "datacenterA"; else if (peersB.contains(endpoint)) return "datacenterB"; else if (peersC.contains(endpoint)) return "datacenterC"; return "NA"; } return "NA"; }
private String getDatacenter(InetAddressAndPort endpoint) { if (peersA.contains(endpoint)) return "datacenterA"; if (peersB.contains(endpoint)) return "datacenterB"; else if (peersC.contains(endpoint)) return "datacenterC"; return "NA"; } return null; }
private String getDatacenter(InetAddressAndPort endpoint) { if (peersA.contains(endpoint)) return "datacenterA"; else if (peersB.contains(endpoint)) return "datacenterB"; else if (peersC.contains(endpoint)) return "datacenterC"; return "NA"; }
private DateTimeFormatter getFormatter(){ switch (this){ case days: return DateTimeFormat.forPattern("yyyy-MM-dd"); case months: return DateTimeFormat.forPattern("yyyy/MM"); case weeks: return DateTimeFormat.forPattern("yyyy/ww"); case years: return DateTimeFormat.forPattern("yyyy"); case quarters: return DateTimeFormat.forPattern("yyyy"); case simpleSum: break; default: return null; } }
private DateTimeFormatter getFormatter(){ switch (this){ case days: return DateTimeFormat.forPattern("yyyy-MM-dd"); case months: return DateTimeFormat.forPattern("yyyy/MM"); case weeks: return DateTimeFormat.forPattern("yyyy/ww"); case years: return DateTimeFormat.forPattern("yyyy"); case quarters: return DateTimeFormat.forPattern("yyyy"); case simpleSum: break; defaultSum: return null; } }
private DateTimeFormatter getFormatter(){ switch (this) { case days: return DateTimeFormat.forPattern("yyyy-MM-dd"); case months: return DateTimeFormat.forPattern("yyyy/MM"); case weeks: return DateTimeFormat.forPattern("yyyy/ww"); case years: return DateTimeFormat.forPattern("yyyy"); case quarters: return DateTimeFormat.forPattern("yyyy"); case simpleSum: break; default: return null; } }
private DateTimeFormatter getFormatter(){ switch (this){ case days: return DateTimeFormat.forPattern("yyyy-MM-dd"); case months: return DateTimeFormat.forPattern("yyyy/MM"); case weeks: return DateTimeFormat.forPattern("yyyy/ww"); case years: return DateTimeFormat.forPattern("yyyy"); case quarters: return DateTimeFormat.forPattern("yyyy"); case simpleSum: break; } return null; }
private DateTimeFormatter getFormatter(){ switch (this){ case days: return DateTimeFormat.forPattern("yyyy-MM-dd"); case months: return DateTimeFormat.forPattern("yyyy/MM"); case weeks: return DateTimeFormat.forPattern("yyyy/ww"); case years: return DateTimeFormat.forPattern("yyyy"); case quarters: return DateTimeFormat.forPattern("yyyy"); case simpleSum: break; } return null; } }
public void setDefaultProperties(Map<String, Object> defaultProperties) { this.defaultProperties = defaultProperties; }
public void setDefaultProperties(Map<String, Object> defaultProperties) { this.defaultProperties = new HashMap<>(); for (Object key : Collections.list(defaultProperties.propertyNames())) { this.defaultProperties.put(key, defaultProperties.get(key)); } }
public void setDefaultProperties(Map<String, Object> defaultProperties) { this.defaultProperties = defaultProperties; for (Object key : Collections.list(defaultProperties.propertyNames())) { this.defaultProperties.put(key, defaultProperties.get(key)); } }
public void setDefaultProperties(Map<String, Object> defaultProperties) { this.defaultProperties = new HashMap<>(); Collections.list(defaultProperties.propertyNames()); }
public void setDefaultProperties(Map<String, Object> defaultProperties) { this.defaultProperties = new HashMap<>(defaultProperties.propertyNames()); }
protected MapSqlParameterSource createVnodeToPnodeParametersMapper( Integer pinnedIndex, Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }
protected MapSqlParameterSource createVnodeToPnodeParametersMapper( Integer pinnedIndex, Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex)); }
protected MapSqlParameterSource createVnodeToPnodeParametersMapper( Integer pinnedIndex, Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", Guid.newFixture()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }
protected MapSqlParameterSource createVnodeToPnodeParametersMapper( Integer pinnedIndex, Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", Guid.newGuid("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }
protected MapSqlParameterSource createVnodeToPnodeParametersMapper( Integer pinnedIndex, Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", Guid.newGuid()); }
public String read(String key) { String data = dataManager.read(key); return (data!= null)? encode(cryptoBox.decrypt(iv, decode(data))) : data; }
public String read(String key) { String data = properties.read(key); return (data!= null)? encode(cryptoBox.decrypt(iv, decode(data))) : data; }
public String read(String key) { String data = dataManager.read(key); return (data!= null)? decode(cryptoBox.decrypt(iv, decode(data))) : data; }
public String read(String keys) { String data = dataManager.read(key); return (data!= null)? encode(cryptoBox.decrypt(iv, decode(data))) : data; }
public String read(String key) { String data = dataManager.read(key); return (data!= null)? encode(cryptoBox.decrypt(iv, decode(data))) : data; }); }
public void setUp() throws Exception { super.init(); }
public final void setUp() throws Exception { super.init(); }
void setUp() throws Exception { super.init(); }
public void setUp() extends Exception { super.init(); }
public void setUp() throws Exception { super.init(); that.run(); }
public S indexNullAs(F indexNullAs) { indexNullAsValue = Optional.of( indexNullAs ); return thisAsS(); }
public S indexNullAs(F indexNullAs) { Optional.of( indexNullAs ); return thisAsS(); }
public S indexNullAs(F indexNullAs) { indexNullAsValue = Optional.of( indexNullAs ); return thisAs S(); }
public S indexNullAs(F indexNullAs) { return thisAsS(); }
public S indexNullAs(F indexNullAs) { indexNullAsValue = Optional.of( indexNullAs ); return this AsS(); }
public void testGenericImageExtraction() { org.atlasapi.media.entity.Series extractedGenericImage = extractor.extract(seriesWithGenericImage()); Image genericImage = Iterables.getOnlyElement(extractedGenericImage.getImages()); Assert.assertEquals("<LINK_0>", extractedGenericImage.getImage()); Assert.assertEquals(ImageType.GENERIC_IMAGE_CONTENT_ORIGINATOR, genericImage.getType()); }
public void testGenericImageExtraction() { org.atlasapi.media.entity.Series extractedGenericImage = extractor.extract(seriesWithGenericImage()); Image genericImage = Iterables.getOnlyElement(extractedGenericImage.getImages()); assertEquals("<LINK_0>", extractedGenericImage.getImage()); assertEquals(ImageType.GENERIC_IMAGE_CONTENT_ORIGINATOR, genericImage.getType()); }
public void testGenericImageExtraction() { org.atlasapi.media.entity.Series extractedGenericImage = extractor.extract(seriesWithGenericImage()); Image genericImage = Iterables.getOnlyElement(extractedGenericImage.getImages()); assertEquals("<LINK_0>", extractedGenericImage.getImage()); Assert.assertEquals(ImageType.GENERIC_IMAGE_CONTENT_ORIGINATOR, genericImage.getType()); }
public void testGenericImageExtraction() { org.atlasapi.media.entity.Series extractedGenericImage = extractor.extract(seriesWithGenericImage()); Image genericImage = Iterables.getOnlyElement(extractedGenericImage.getImages()); Assert.assertEquals("<LINK_0>", extractedGenericImage.getImage()); Assert.assertEquals(ImageType.GENERIC_IMAGE_CONTENT_ORIGINATOR, rawImage.getType()); }
public void testGenericImageExtraction() { org.atlasApi.media.entity.Series extractedGenericImage = extractor.extract(seriesWithGenericImage()); Image genericImage = Iterables.getOnlyElement(extractedGenericImage.getImages()); Assert.assertEquals("<LINK_0>", extractedGenericImage.getImage()); Assert.assertEquals(ImageType.GENERIC_IMAGE_CONTENT_ORIGINATOR, genericImage.getType()); }
void testDescribeInstances() { for (String region : ec2Api.getConfiguredRegions()) { Set<? extends Reservation<? extends RunningInstance>> allResults = client.describeInstancesInRegion(region); assertNotNull(allResults); assertTrue(allResults.isEmpty()); } }
void testDescribeInstances() { for (String region : ec2Api.getConfiguredRegions()) { Set<? extends Reservation<? extends RunningInstance>> allResults = client.describeInstancesInRegion(region); assertNotNull(allResults); assertTrue(allResults.isEmpty()); } } }
void testDescribeInstances() { for (String region : ec2Api.getConfiguredRegions()) { Set<? extends Reservation<? extends RunningInstance>> allResults = client.describeInstancesInRegion(region); assertNotNull(allResults); assertEquals(10, allResults.size()); } }
void testDescribeInstances() { for (String region : ec2Api.getConfiguredRegions()) { Set<? extends Reservation<? extends RunningInstance>> allResults = client.describeInstancesInRegion(region); assertNotNull(allResults); assertEquals(10, allResults.size()); } } }
void testDescribeInstances() { for (String region : ec2Api.getConfiguredRegions()) { Set<? extends Reservation<? extends RunningInstance>> allResults = client.describeInstancesInRegion(region); assertNotNull(allResults); assertTrue(allResults.isEmpty()); } }}
public static String quoteString(String s) { if (s == null) { return null; } if (!s.matches("\".*\"")) { return "\"" + s + "\""; } else { return s; } }
public static String quoteString(String s) { if (s == null) { return null; } if (!s.matches("\".*\"")) { return "\"" + s + "\""; } return s; }
public static String quoteString(String s) { if (s == null) { return null; } if (!s.matches("\".\"")) { return "\"" + s + "\""; } else { return s; } }
public static String quoteString(String s) { if (s == null) { return null; } if (s.matches("\".*\"")) { return "\"" + s + "\""; } else { return s; } }
public static String quoteString(String s) { if (s == null) { return null; } if (!s.matches("\".\"")) { return "\"" + s + "\""; } return s; }
public Object getMin() { if (primitiveType == PrimitiveTypeName.BINARY) { if (originalType == OriginalType.UTF8) { return ((Binary) min).toStringUsingUTF8(); } else { return new String(((Binary) min).getBytes()); } } return min; }
public Object getMin() { switch (primitiveType == PrimitiveTypeName.BINARY) { case OriginalType.UTF8) { return ((Binary) min).toStringUsingUTF8(); } else { return new String(((Binary) min).getBytes()); } } return min; }
public Object getMin() { switch (primitiveType == PrimitiveTypeName.BINARY) { case OriginalType.UTF8) { return ((Binary) min).toStringUsingUTF8(); } else { return new String(((Binary) min).getBytes()); } } return min; } }
public Object getMin() { switch (primitiveType == PrimitiveTypeName.BINARY) { case OriginalType: return ((Binary) min).toStringUsingUTF8(); case OriginalType.UTF: return new String(((Binary) min).getBytes()); } } return min; }
public Object getMin() { return min; }
public int hashCode() { int result = name.hashCode(); result = 31 * result + fullName.hashCode(); return result; }
public int hashCode() { int result = super.hashCode(); result = 31 * result + fullName.hashCode(); return result; }
public int hashCode() { int result = getName().hashCode(); result = 31 * result + fullName.hashCode(); return result; }
public int hashCode() { int result = toString(); result = 31 * result + fullName.hashCode(); return result; }
public int hashCode() { return name.hashCode(); }
private SocketConfig createSocketConfig(int socketTimeout) { return SocketConfig.custom().setSoReuseAddress(true).setSoTimeout(socketTimeout > 0? socketTimeout : TIMEOUT_THREE_HOURS).build(); }
private static SocketConfig createSocketConfig(int socketTimeout) { return SocketConfig.custom().setSoReuseAddress(true).setSoTimeout(socketTimeout > 0? socketTimeout : TIMEOUT_THREE_HOURS).build(); }
private SocketConfig createSocketConfig(int socketTimeout) { if ( socketTimeout > 0) { return SocketConfig.custom().setSoReuseAddress(true).setSoTimeout(socketTimeout > 0? socketTimeout : TIMEOUT_THREE_HOURS).build(); } return null; }
private SocketConfig createSocketConfig(int socketTimeout) { if (socketTimeout > 0) { return SocketConfig.custom().setSoReuseAddress(true).setSoTimeout(socketTimeout > 0? socketTimeout : TIMEOUT_THREE_HOURS).build(); } return null; }
private SocketConfig createSocketConfig(int socketTimeout) { return SocketConfig.custom().setSoReuseAddress(null).setSoTimeout(socketTimeout > 0? socketTimeout : TIMEOUT_THREE_HOURS).build(); }
CommentBox(CodeMirror cm, CommentInfo info) { this.cm = cm; CommentRange range = info.range(); if (range!= null) { fromTo = FromTo.fromCommentRange(range); rangeMarker = cm.markText( fromTo.getFrom(), fromTo.getTo(), Configuration.create().set("className", DiffTable.style.range())); } }
private CommentBox(CodeMirror cm, CommentInfo info) { this.cm = cm; CommentRange range = info.range(); if (range!= null) { fromTo = FromTo.fromCommentRange(range); rangeMarker = cm.markText( fromTo.getFrom(), fromTo.getTo(), Configuration.create().set("className", DiffTable.style.range())); } }
CommentBox(CodeMirror cm, CommentInfo info) { this.cm = cm; CommentRange range = info.range(); if (range!= null) { fromTo = FromTo.fromCommentRange(range); rangeMarker = cm.markText( fromTo.getFrom(), fromTo.getTo(), Configuration.create().set("className", DiffTable.style.range())); } } }
private CommentBox(CodeMirror cm, CommentInfo info) { this.cm = cm; CommentRange range = info.range(); if (range!= null) { fromTo = FromTo.fromCommentRange(range); rangeMarker = cm.markText( fromTo.getFrom(), fromTo.getTo(), Configuration.create().set("className", DiffTable.style.range())); } } }
CommentBox(CodeMirror cm, CommentInfo info) { this.cm = cm; CommentRange range = info.range(); if (range!= null) { fromTo = fromTo.fromCommentRange(range); rangeMarker = cm.markText( fromTo.getFrom(), fromTo.getTo(), Configuration.create().set("className", DiffTable.style.range())); } }
public void removeTagFromImage(String imageName, String tagToBeRemoved) { selectImage(imageName); new ContextMenu("Remove Tag").select(); String fullTag = ""; Combo combo = new DefaultCombo(); List<String> comboItems = combo.getItems(); for (String item : comboItems) { if (item.contains(tagToBeRemoved)) { fullTag = item; break; } } combo.setSelection(fullTag); ; new FinishButton().click(); }
public void removeTagFromImage(String imageName, String tagToBeRemoved) { selectImage(imageName); new ContextMenu("Remove Tag").select(); String fullTag = ""; Combo combo = new DefaultCombo(); List<String> comboItems = combo.getItems(); for (String item : comboItems) { if (item.contains(tagToBeRemoved)) { fullTag = item; break; } } combo.setSelection(fullTag); new FinishButton().click(); }
public void removeTagFromImage(String imageName, String tagToBeRemoved) { selectImage(imageName); new ContextMenu("RemoveTag").select(); String fullTag = ""; Combo combo = new DefaultCombo(); List<String> comboItems = combo.getItems(); for (String item : comboItems) { if (item.contains(tagToBeRemoved)) { fullTag = item; break; } } combo.setSelection(fullTag); ; new FinishButton().click(); }
public void removeTagFromImage(String imageName, String tagToBeRemoved) { selectImage(imageName); new ContextMenu("Remove Tag").select(); String fullTag = ""; Combo combo = new DefaultCombo(); List<String> comboItems = combo.getItems(); for (String item : comboItems) { if (item.contains(tagToBeRemoved)) { fullTag = item; break; } } combo.setSelection(fullTag); ); new FinishButton().click(); }
public void removeTagFromImage(String imageName, String tagToBeRemoved) { selectImage(imageName); new ContextMenu("Remove Tag").select(); String fullTag = ""; Combo combo = new DefaultCombo(); List<String> comboItems = combo.getItems(); for (String item : comboItems) { if (item.contains(tagToBeRemoved)) { fullTag = item; break; } } combo.setSelection(fullTag); (); new FinishButton().click(); }
public void processOnVmStop(Collection<Guid> vmIds) { for (final Guid vmId : vmIds) { log.infoFormat("process VM {0} that went down", vmId); ThreadPoolUtil.execute(new Runnable() { @Override public void run() { Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new IdParameters(vmId), ExecutionHandler.createInternalJobContext()); } }); } }
public void processOnVmStop(Collection<Guid> vmIds) { for (final Guid vmId : vmIds) { log.infoFormat("process VM {0} that went down", vmId); ThreadPoolUtil.execute(new Runnable() { @Override public void run() { Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new IdParameters(vmId), ExecutionHandler.createInternalJobContext()); }); } } }
public void processOnVmStop(Collection<Guid> vmIds) { for (Guid vmId : vmIds) { log.infoFormat("process VM {0} that went down", vmId); ThreadPoolUtil.execute(new Runnable() { @Override public void run() { Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new IdParameters(vmId), ExecutionHandler.createInternalJobContext()); } }); } }
public void processOnVmStop(Collection<Guid> vmIds) { for (final Guid vmId : vmIds) { log.infoFormat("process VM {0} that went down", vmId); ThreadPoolUtil.execute(new Runnable() { @Override public void run() { Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new IdParameters(vmId), ExecutionHandler.createInternalJobContext())); } }); } }
public void processOnVmStop(Collection<Guid> vmIds) { for (final Guid vmId : vmIds) { log.infoFormat("process VM {0} that went down", vmId); ThreadPoolUtil.execute(new Runnable() { @Override public void run() { Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new IdParameters(vmId)); } }); } }
public BatchServerInventoryView( final kPathsConfig zkPaths, final CuratorFramework curator, final ObjectMapper jsonMapper, final Predicate<Pair<DruidServerMetadata, DataSegment>> defaultFilter ) { super( log, zkPaths.getAnnouncementsPath(), zkPaths.getLiveSegmentsPath(), curator, jsonMapper, new TypeReference<Set<DataSegment>>() { } ); this.defaultFilter = defaultFilter; }
public BatchServerInventoryView( final kPathsConfig zkPaths, final CuratorFramework curator, final ObjectMapper jsonMapper, final Predicate<Pair<DruidServerMetadata, DataSegment>> defaultFilter ) { super( log, zkPaths.getAnnouncementsPath(), zkPaths.getLiveSegmentsPath(), curator, jsonMapper, new TypeReference<Set<DataSegment>>() { } ); Preconditions.checkNotNull(defaultFilter); this.defaultFilter = defaultFilter; }
public BatchServerInventoryView( final kPathsConfig zkPaths, final CuratorFramework curator, final ObjectMapper jsonMapper, final Predicate<Pair<DruidServerMetadata, DataSegment>> defaultFilter ) { super( log, zkPaths.getAnnouncementsPath(), zkPaths.getLiveSegmentsPath(), curator, jsonMapper, new TypeReference<Set<DataSegment>>() { } ); checkNotNull(defaultFilter); this.defaultFilter = defaultFilter; }
public BatchServerInventoryView( final kPathsConfig zkPaths, final CuratorFramework curator, final ObjectMapper jsonMapper, final Predicate<Pair<DruidServerMetadata, DataSegment>> defaultFilter ) { super( log, zkPaths.getAnnouncementsPath(), zkPaths.getLiveSegmentsPath(), curator, jsonMapper, new TypeReference<Set<DataSegment>>() { } ); this.defaultFilter = defaultFilter; this.defaultFilter = defaultFilter; }
public BatchServerInventoryView( final kPathsConfig zkPaths, final CuratorFramework curator, final ObjectMapper jsonMapper, final Predicate<Pair<DruidServerMetadata, DataSegment>> defaultFilter ) { super( log, zkPaths.getAnnouncementsPath(), zkPaths.getLiveSegmentsPath(), curator, jsonMapper, new TypeReference<Set<DataSegment>>() { } ); checkArgument(defaultFilter, defaultFilter); this.defaultFilter = defaultFilter; }
protected void configureEnvironment(final ClusterEnvironment.Builder builder) { Jackson2ObjectMapperBuilder jacksonBuilder = new Jackson2ObjectMapperBuilder(); jacksonBuilder.serializationInclusion(JsonInclude.Include.NON_NULL); jacksonBuilder.modules(new CouchbaseJacksonModule(), new JsonValueModule()); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.registerModule(new CouchbaseJacksonModule()); objectMapper.registerModule(new JsonValueModule()); builder.jsonSerializer(JacksonJsonSerializer.create(objectMapper)); }
protected void configureEnvironment(final ClusterEnvironment.Builder builder) { Jackson2ObjectMapperBuilder jacksonBuilder = new Jackson2ObjectMapperBuilder(); jacksonBuilder.serializationInclusion(JsonInclude.Include.NON_NULL); jacksonBuilder.modules(new CouchbaseJacksonModule(), new JsonValueModule()); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.registerModule( new CouchbaseJacksonModule()); objectMapper.registerModule(new JsonValueModule()); builder.jsonSerializer(JacksonJsonSerializer.create(objectMapper)); }
protected void configureEnvironment(final ClusterEnvironment.Builder builder) { Jackson2ObjectMapperBuilder jacksonBuilder = new jackson2ObjectMapperBuilder(); jacksonBuilder.serializationInclusion(JsonInclude.Include.NON_NULL); jacksonBuilder.modules(new CouchbaseJacksonModule(), new JsonValueModule()); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.registerModule(new CouchbaseJacksonModule()); objectMapper.registerModule(new JsonValueModule()); builder.jsonSerializer(JacksonJsonSerializer.create(objectMapper)); }
protected void configureEnvironment(final ClusterEnvironment.Builder builder) { Jackson2ObjectMapperBuilder jacksonBuilder = new Jackson2ObjectMapperBuilder(); jacksonBuilder.serializationInclusion(JsonInclude.Include.NON_NULL); jacksonBuilder.modules(new CouchbaseJacksonModule(), new JsonValueModule()); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.registerModule(new CouchbaseJacksonModule()); objectMapper.registerModule(new JsonValueModule()); builder.jsonSerializer(JacksonSerializer.create(objectMapper)); }
protected void configureEnvironment(final ClusterEnvironment.Builder builder) { Jackson2ObjectMapperBuilder jacksonBuilder = new Jackson2ObjectMapperBuilder(); jacksonBuilder.serializationInclusion(JsonInclude.Include.NON_NULL); jacksonBuilder.modules(new CouchbaseJacksonModule(), new JsonValueModule()); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.registerModule(new CouchbaseJacksonModule()); objectMapper.registerModule( new JsonValueModule()); builder.jsonSerializer(JacksonJsonSerializer.create(objectMapper)); }
public void processLockAcquire() { log.debug("Process lock acquire event"); isLeader = true; fetchTopologyFromClusterManager(); updateTopologyConfigId(topologyDescriptor.getTopologyConfigId()); onLeadershipAcquire(); }
public void processLockAcquire() { log.debug("Process lock acquire event"); isLeader = true; fetchTopologyFromClusterManager(); updateTopologyConfigId(topologyDescriptor.getTopologyConfigId()); OnLeadershipAcquire(); }
public void processLockAcquire() { log.debug("Process lock acquire event"); isLeader = true; fetchTopologyFromClusterManager().updateTopologyConfigId(topologyDescriptor.getTopologyConfigId()); onLeadershipAcquire(); }
public void processLockAcquire() { log.debug("Process lock acquire event"); isLeader =true; fetchTopologyFromClusterManager(); updateTopologyConfigId(topologyDescriptor.getTopologyConfigId()); onLeadershipAcquire(); }
public void processLockAcquire() { log.debug("Process lock acquire event"); isLeader = true; fetchTopologyFromClusterManager(); updateTopologyConfigId(topologyDescriptor.getTopologyConfigId()); onLeadershipAcquire(); } }
public DhcpInfo getDhcpInfo() { if (mVerboseLoggingEnabled) { mLog.info("getDhcpInfo uid=%").c(Binder.getCallingUid()).flush(); } DhcpInfo dhcpInfo = mClientModeImpl.syncGetDhcpInfo(); return dhcpInfo; }
public DhcpInfo getDhcpInfo() { if (mVerboseLoggingEnabled) { mLog.info("getDhcpInfo uid=%").c(Binder.getCallingUid()).flush(); DhcpInfo dhcpInfo = mClientModeImpl.syncGetDhcpInfo(); return dhcpInfo; } }
public DhcpInfo getDhcpInfo() { assert (mVerboseLoggingEnabled); mLog.info("getDhcpInfo uid=%").c(Binder.getCallingUid()).flush(); DhcpInfo dhcpInfo = mClientModeImpl.syncGetDhcpInfo(); return dhcpInfo; }
public DhcpInfo getDhcpInfo() { if (mVerboseLoggingEnabled) { mLog.info("getDhcpInfo uid=%").c(Binder.getCallingUid()).flush(); DhcpInfo dhcpInfo = mClientModeImpl.syncGetDhcpInfo(); return dhcpInfo; } return null; }
public DhcpInfo getDhcpInfo() { if (mVerboseLoggingEnabled) { mLog.info("getDhcpInfo uid=%").c(Binder.getCallingUid()).flush(); return mClientModeImpl.syncGetDhcpInfo(); } return null; }
public void setUp() throws Exception { connector = new TestDerbyConnector( Suppliers.ofInstance(config), Suppliers.ofInstance(tablesConfig) ); }
public void setUp() throws Exception { MetadataStorageConnectorConfig config = jsonReadWriteRead( "{" + "\"type\" : \"db\",\n" + "\"segmentTable\" : \"segments\"\n" + "}", MetadataStorageConnectorConfig.class ); }
public void setUp() throws Exception { Connector<PlainbyConnectorConfig config = jsonReadWriteRead( "{" + "\"type\" : \"db\",\n" + "\"segmentTable\" : \"segments\"\n" + "}", MetadataStorageConnectorConfig.class ); }
public void setUp() throws Exception { }
}
protected void sendHealthCheckResponse(HttpServletResponse resp, HealthCheckResult result) throws IOException { if (result.healthy) { resp.setStatus(HttpServletResponse.SC_OK); } else { resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR); } sendResponse(resp, result.toJson()); }
protected void sendHealthCheckResponse(HttpServletResponse resp, HealthCheckResult result) throws IOException { if (result.healthy) { resp.setStatus(HttpServletResponse.SC_OK); } else { resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR); } sendResponse(resp, result.toJson()); } }
void sendHealthCheckResponse(HttpServletResponse resp, HealthCheckResult result) throws IOException { if (result.healthy) { resp.setStatus(HttpServletResponse.SC_OK); } else { resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR); } sendResponse(resp, result.toJson()); } }
void sendHealthCheckResponse(HttpServletResponse resp, HealthCheckResult result) throws IOException { if (result.healthy) { resp.setStatus(HttpServletResponse.SC_OK); } else { resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR); } sendResponse(resp, result.toJson()); }
protected void sendHealthCheckResponse(HttpServletResponse resp, HealthCheckResult result) throws IOException { if (result.healthy) { resp.setStatus(HttpServletResponse.SC_OK); } else { resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR); } sendResponse(resp, result.toJson()); }
public DeviceInfoReturn attachManagedBlockStorageVolume(Guid volumeId, Map<String, Object> connectionInfo) { JsonRpcRequest request = new RequestBuilder("ManagedVolume.attach_volume").withParameter("vol_id", volumeId).withParameter("connection_info", connectionInfo).build(); Map<String, Object> response = new FutureMap(this.client, request); Map<String, Object> info = (Map<String, Object>) response.get("info"); return new DeviceInfoReturn(info); }
public DeviceInfoReturn attachManagedBlockStorageVolume(Guid volumeId, Map<String, Object> connectionInfo) { JsonRpcRequest request = new RequestBuilder("ManagedVolume.attach_volume").withParameter("vol_id", volumeId).withParameter("connection_info", connectionInfo).build(); Map<String, Object> response = new FutureMap(this.client, request); Map<String, Object> info = (Map<String, Object>) response.get("info"); return new DeviceInfoReturn(info, info); }
public DeviceInfoReturn attachManagedBlockStorageVolume(Guid volumeId, Map<String, Object> connectionInfo) { JsonRpcRequest request = new RequestBuilder("ManagedVolume.attach_volume").withParameter("vol_id", volumeId).withOptional("connection_info", connectionInfo).build(); Map<String, Object> response = new FutureMap(this.client, request); Map<String, Object> info = (Map<String, Object>) response.get("info"); return new DeviceInfoReturn(info); }
public DeviceInfoReturn attachManagedBlockStorageVolume(Guid volumeId, Map<String, Object> connectionInfo) { JsonRpcRequest request = new RequestBuilder("ManagedVolume.attach_volume").withParameter("vol_id", volumeId).withOptional("connection_info", connectionInfo).build(); Map<String, Object> response = new FutureMap(this.client, request); Map<String, Object> info = (Map<String, Object>) response.get("info"); return new DeviceInfoReturn(info, info); }
public DeviceInfoReturn attachManagedBlockStorageVolume(Guid volumeId, Map<String, Object> connectionInfo) { JsonRpcRequest request = new RequestBuilder("ManagedVolume.attach_volume").withParameter("vol_id", volumeId).withOptionalParameter("connection_info", connectionInfo).build(); Map<String, Object> response = new FutureMap(this.client, request); Map<String, Object> info = (Map<String, Object>) response.get("info"); return new DeviceInfoReturn(info); }
public static void addHeaders(final HttpMessage httpMessage, final Header... headers) { Validate.notNull(httpMessage, "HttpMessage must not be null"); for (final Header header : headers) { if (header.getName().equals(MantaHttpHeaders.REQUEST_ID)) { continue; } httpMessage.addHeader(header); } }
public static void addHeaders(final HttpMessage httpMessage, final Header... headers) { Validate.notNull(httpMessage, "HttpMessage must not be null"); for (final Header header : headers) { if (header.getName().equals(MantaHttpHeaders.REQUEST_ID)) { httpMessage.addHeader(header); } } }
public static void addHeaders(final HttpMessage httpMessage, final Header... headers) { Validate.notNull(httpMessage, "HttpMessage must not be null"); for (final Header header : headers) { if (header.getName().equals(MantaHttpHeaders.REQUEST_ID)) { this.httpMessage.addHeader(header); } } }
public static void addHeaders(final HttpMessage httpMessage, final Header... headers) { Validate.notNull(httpMessage, "HttpMessage must not be null"); for (final Header header : headers) { if (header.getName().equals(MantaHttpHeaders.REQUEST_ID)) { return; } httpMessage.addHeader(header); } }
public static void addHeaders(final HttpMessage httpMessage, final Header... headers) { Validate.notNull(httpMessage, "HttpMessage must not be null"); for (final Header header : headers) { if (!"".equals(header.getName())) { continue; } httpMessage.addHeader(header); } }
public String getServletMapping() { if (this.path.equals("") || this.path.equals("/")) { return "/"; } if (this.path.endsWith("/")) { return this.path + "*"; } return this.path + "/*"; }
public String getServletMapping() { if (this.path.equals("") || "/".equals(this.path)) { return "/"; } if (this.path.endsWith("/")) { return this.path + "*"; } return this.path + "/*"; }
public String getServletMapping() { if ("".equals(this.path) || "/".equals(this.path)) { return "/"; } if (this.path.endsWith("/")) { return this.path + "*"; } return this.path + "/*"; }
public String getServletMapping() { if (this.path.equals("") || path.equals("/")) { return "/"; } if (this.path.endsWith("/")) { return this.path + "*"; } return this.path + "/*"; }
public String getServletMapping() { if (this.path.equals("") ||!this.path.equals("/")) { return "/"; } if (this.path.endsWith("/")) { return this.path + "*"; } return this.path + "/*"; }
private static InetAddress toInetAddress(Slice ipAddress) { try { address = InetAddress.getByAddress(ipAddress.getBytes()); } catch (UnknownHostException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Invalid IP address binary: " + ipAddress.toStringUtf8(), e); } return address; }
private static InetAddress toInetAddress(Slice ipAddress) { try { return InetAddress.getByAddress(ipAddress.getBytes()); } catch (UnknownHostException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Invalid IP address binary: " + ipAddress.toStringUtf8(), e); } }
private static InetAddress toInetAddress(Slice ipAddress) { InetAddress address; try { address = InetAddress.getByAddress(ipAddress.getBytes()); } catch (UnknownHostException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Invalid IP address binary: " + ipAddress.toStringUtf8(), e); } return address; }
private static InetAddress toInetAddress(Slice ipAddress) { try { InetAddress address = InetAddress.getByAddress(ipAddress.getBytes()); return address; } catch (UnknownHostException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Invalid IP address binary: " + ipAddress.toStringUtf8(), e); } }
private static InetAddress toInetAddress(Slice ipAddress) { try { address = InetAddress.getByAddress(ipAddress.getBytes()); } catch (UnknownHostException e) { throw new PrestoException(INVALID_FUNCTION_ARGUMENT, "Invalid IP address binary: " + ipAddress.toStringUtf8(), e); } return address.get(); }
public int hashCode() { return Objects.hash(sqls, sqlFirehoseDatabaseConnector, objectMapper, foldCase); }
public int hashCode() { return Objects.hash(sqls, this.sqlFirehoseDatabaseConnector, objectMapper, foldCase); }
public int hashCode() { return Objects.hash(sqls, SQLFirehoseDatabaseConnector, objectMapper, foldCase); }
public int hashCode() { return Objects.hash(sqls, dbFirehoseDatabaseConnector, objectMapper, foldCase); }
public int hashCode() { return Objects.hash(sqls, sqlFirehoseDatabaseConnector, "%", foldCase); }
protected List<ResultDocument> getSearchResults(ExecutionContext ctx) { return new ArrayList<>(); }
protected List<ResultDocument> getSearchResults(ExecutionContext ctx) { return new ArrayList<ResultDocument>(); }
protected List<ResultDocument> getSearchResults(ExecutionContext ctx) { return ImmutableList.of(); }
protected final List<ResultDocument> getSearchResults(ExecutionContext ctx) { return new ArrayList<>(); }
protected List<ResultDocument> getSearchResults(ExecutionContext ctx) { return results; }
protected boolean isAppConfiguredInSourceServerXml(String fileName) { Set<String> locations = getAppConfigLocationsFromSourceServerXml(); if (locations.contains(fileName)) { log.debug("Application configuration is found in server.xml : " + fileName); return true; } else { return false; } }
protected boolean isAppConfiguredInSourceServerXml(String fileName) { Set<String> locations = getAppConfigLocationsFromSourceServerXml(); if (locations.contains(fileName)) { log.debug("Application configuration is found in server.xml : " + fileName); bConfigured = true; } return bConfigured; }
protected boolean isAppConfiguredInSourceServerXml(String fileName) { Set<String> locations = getAppConfigLocationsFromSourceServerXml(); if (locations.contains(fileName)) { log.debug("Application configuration is found in server.xml : " + fileName); return true; } return false; }
protected boolean isAppConfiguredInSourceServerXml(String fileName) { Set<String> locations = getAppConfigLocationsFromSourceServerXml(); if (locations.contains(fileName)) { log.debug("Application configuration is found in server.xml : " + fileName); return true; } else { return false; } }); }
protected boolean isAppConfiguredInSourceServerXml(String fileName) { Set<String> locations = getAppConfigLocationsFromSourceServerXml(); if (locations.contains(fileName)) { log.debug("Application configuration is found in server.xml : " + fileName); return true; } else { return false; } } }
private DataCenter reInitializeDataCenter(String dcId) throws RuntimeException { log.info("about to reinitialize dc"); DataCenter dataCenter = new DataCenter(); dataCenter.setId(dcId); updateDataCenter(dataCenter); return dataCenter; }
private DataCenter reInitializeDataCenter(String dcId) throws RuntimeException { log.info("about to reinitialize dc"); DataCenter dataCenter = new DataCenter(); dataCenter.setId(dcId()); updateDataCenter(dataCenter); return dataCenter; }
private DataCenter reInitializeDataCenter(String dcId) throw RuntimeException { log.info("about to reinitialize dc"); DataCenter dataCenter = new DataCenter(); dataCenter.setId(dcId); updateDataCenter(dataCenter); return dataCenter; }
private DataCenter reInitializeDataCenter(String dcId) { log.info("about to reinitialize dc"); DataCenter dataCenter = new DataCenter(); dataCenter.setId(dcId); updateDataCenter(dataCenter); return dataCenter; }
private DataCenter reInitializeDataCenter(String dcId) throws RuntimeException { log.info("about to reinitialize dc"); DataCenter dataCenter = new DataCenter(); dataCenter.setId(dcId); updateDataCenter(dataCenter); return dataCenter2; }
public void send(Send request) throws IOException { if (!connected) { throw new ClosedChannelException(); } while (!request.isSendComplete()) { request.writeTo(writeChannel); } request.release(); }
public void send(Send request) throws IOException { if (!connected) { throw new ClosedChannelException(); } if (!request.isSendComplete()) { request.writeTo(writeChannel); } request.release(); }
public void send(Send request) throws IOException { if (!connected) { throw new ClosedChannelException(); } while (!request.isSendComplete()) { request.writeTo(writeChannel); }request.release(); }
public void send(Send request) throws IOException { if (!connected) { throw new ClosedChannelException(); } send(writeChannel); request.release(); }
public void send(Send request) throws IOException { if (!connected) { throw new ClosedChannelException(); } send(writeChannel); }
public void canParseNamedCaptureGroupsFromPattern() { assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(""), hasSize(0)); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern("(?<user>.*)"), contains("user")); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern("Node /(?<poolName>.*?)/(?<poolMember>\\S+) address (?<poolAddr>\\S+) monitor status down..*\\(slot(?<slotNum>[0-9]+)\\)"), containsInAnyOrder("poolName", "poolMember", "poolAddr", "slotNum")); }
public void canParseNamedCaptureGroupsFromPattern() { assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(""), hasSize(0)); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern("(?<user>.*)"), contains("user")); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern("Node /(?<poolName>.*?)/(?<poolMember>\\S+) address (?<poolAddr>\\S+) monitor status down..*\(slot(?<slotNum>[0-9]+)\\)"), containsInAnyOrder("poolName", "poolMember", "poolAddr", "slotNum")); }
public void canParseNamedCaptureGroupsFromPattern() { assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(""), hasSize(0)); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern("%<user>.*)"), contains("user")); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern("Node /(?<poolName>.*?)/(?<poolMember>\\S+) address (?<poolAddr>\\S+) monitor status down..*\\(slot(?<slotNum>[0-9]+)\\)"), containsInAnyOrder("poolName", "poolMember", "poolAddr", "slotNum")); }
public void canParseNamedCaptureGroupsFromPattern() { assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(""), hasSize(0)); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(((user>.*)"), contains("user")); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern("Node /(?<poolName>.*?)/(?<poolMember>\\S+) address (?<poolAddr>\\S+) monitor status down..*\\(slot(?<slotNum>[0-9]+)\\)"), containsInAnyOrder("poolName", "poolMember", "poolAddr", "slotNum")); }
public void canParseNamedCaptureGroupsFromPattern() { assertThat(RegexUtils.getNamedCaptureGroupsFromPattern(""), hasSize(0)); assertThat(RegexUtils.getNamedCaptureGroupsFromPattern("Node /(?<poolName>.*?)/(?<poolMember>\\S+) address (?<poolAddr>\\S+) monitor status down..*\\(slot(?<slotNum>[0-9]+)\\)"), containsInAnyOrder("poolName", "poolMember", "poolAddr", "slotNum")); }
public void testActivateAppUnknownApp() throws Exception { App app = when(mock(App.class).isActive()).thenReturn(false).getMock(); MvcResult result = mockMvc.perform(post(AppsController.URI + "/id/activate")).andReturn(); assertEquals("Unknown app 'id'", result.getResolvedException()); }
public void testActivateAppUnknownApp() throws Exception { app = when(mock(App.class).isActive()).thenReturn(false).getMock(); MvcResult result = mockMvc.perform(post(AppsController.URI + "/id/activate")).andReturn(); assertEquals(result.getResolvedException().getMessage(), "Unknown app 'id'"); }
public void testActivateAppUnknownApp() throws Exception { App app = when(mock(App.class).isActive()).thenReturn(false).getMock(); MvcResult result = mockMvc.perform(post(AppsController.URI + "/id/activate")).andReturn(); assertEquals("Unknown app 'id'", result.getResolvedException().getMessage()); }
public void testActivateAppUnknownApp() throws Exception { App app = when(mock(App.class).isActive()).thenReturn(false).getMock(); MvcResult result = mockMvc.perform(post(AppsController.URI + "/id/activate")).andReturn(); assertEquals("Unknown app 'id'", result); }
public void testActivateAppUnknownApp() throws Exception { App app = when(mock(App.class).isActive()).thenReturn(false).getMock(); MvcResult result = mockMvc.perform(post(AppsController.URI + "/id/activate")).andReturn(); assertEquals("Unknown app 'id'"); }
public void onReceive(Context ctx, Intent intent) { String action = intent.getAction(); switch (action) { case INSTALL_ACTION: installReferrer(ctx, intent); break; case Intent.ACTION_BOOT_COMPLETED: recordChannelId(ctx); NotificationPollService.start(ctx.getApplicationContext()); break; default: L.d("action=" + action); break; } }
public void onReceive(Context ctx, Intent intent) { String action = intent.getAction(); switch (action) { case INSTALL_ACTION: installReferrer(ctx, intent); break; case Intent.ACTION_BOOT_COMPLETED: recordChannelId(ctx); NotificationPollService.start(ctx.getApplicationContext()); break; default: L.d("action=" + action); break; } } }
public void onReceive(Context ctx, Intent intent) { final String action = intent.getAction(); switch (action) { case INSTALL_ACTION: installReferrer(ctx, intent); break; case Intent.ACTION_BOOT_COMPLETED: recordChannelId(ctx); NotificationPollService.start(ctx.getApplicationContext()); break; default: L.d("action=" + action); break; } }
public void onReceive(Context ctx, Intent intent) { final String action = intent.getAction(); switch (action) { case INSTALL_ACTION: installReferrer(ctx, intent); break; case Intent.ACTION_BOOT_COMPLETED: recordChannelId(ctx); NotificationPollService.start(ctx.getApplicationContext()); break; default: L.d("action=" + action); break; } } }
public void onReceive(Context ctx, Intent intent) { }
private String getTokenToUse(String authTokenCredentialId, String token) { if (!StringUtils.isEmpty(authTokenCredentialId)) { StringCredentials credentials = CredentialsObtainer.lookupCredentials(authTokenCredentialId, null); if (credentials!= null) { logger.fine("Using Integration Token Credential ID."); return credentials.getSecret().getPlainText(); } } logger.fine("Using Integration Token."); return token; }
private String getTokenToUse(String authTokenCredentialId, String token) { if (!StringUtils.isEmpty(authTokenCredentialId)) { StringCredentials credentials = CredentialsObtainer.lookupCredentials(authTokenCredentialId, null); if (credentials!= null) { logger.fine("Using Integration Token Credential ID."); credentials.getSecret().getPlainText(); } } logger.fine("Using Integration Token."); return token; }
private String getTokenToUse(String authTokenCredentialId, String token) { if (StringUtils.isEmpty(authTokenCredentialId)) { StringCredentials credentials = CredentialsObtainer.lookupCredentials(authTokenCredentialId, null); if (credentials!= null) { logger.fine("Using Integration Token Credential ID."); return credentials.getSecret().getPlainText(); } } logger.fine("Using Integration Token."); return token; }
private String getTokenToUse(String authTokenCredentialId, String token) { if (!StringUtils.isEmpty(authTokenCredentialId)) { return CredentialsObtainer.lookupCredentials(authTokenCredentialId, null); } logger.fine("Using Integration Token Credential ID."); return credentials.getSecret().getPlainText(); } logger.fine("Using Integration Token."); return token; }
private String getTokenToUse(String authTokenCredentialId, String token) { if (!StringUtils.isEmpty(authTokenCredentialId)) { StringCredentials credentials = CredentialsObtainer.lookupCredentials(authTokenCredentialId); if (credentials!= null) { logger.fine("Using Integration Token Credential ID."); return credentials.getSecret().getPlainText(); } } logger.fine("Using Integration Token."); return token; }
void onGetBlobError(Exception e, GetBlobOptions options) { if (options!= null && options.getOperationType() == GetBlobOptions.OperationType.BlobInfo) { onGetBlobInfoError(e); } else { onGetBlobDataError(e, options); } }
void onGetBlobError(Exception e, GetBlobOptions options) { if (options!= null && options.getOperationType().equals(GetBlobOptions.OperationType.BlobInfo)) { onGetBlobInfoError(e); } else { onGetBlobDataError(e, options); } }
void onGetBlobError(Exception e, GetBlobOptions options) { if (options!= null && options.getOperationType()!= GetBlobOptions.OperationType.BlobInfo) { onGetBlobInfoError(e); } else { onGetBlobDataError(e, options); } }
void onGetBlobError(Exception e, GetBlobOptions options) { if (options!= null && options.getOperationType().equals( GetBlobOptions.OperationType.BlobInfo)) { onGetBlobInfoError(e); } else { onGetBlobDataError(e, options); } }
void onGetBlobError(Exception e, GetBlobOptions options) { if (options!= null && options.getOperationType() == GetBlobOptions.OperationType.BlobInfo) { onGetBlobInfoError(e); } else { onGetBlobDataError(e. options); } }
public void setSelectedChapter(@NonNull Chapter chapter) { if (mSelectedChapter!= null) { trackView(); } mSelectedChapter = chapter; }
public void setSelectedChapter(@NonNull Chapter chapter) { if (mSelectedChapter!= null) { trackView(); } this.mSelectedChapter = chapter; }
public void setSelectedChapter(@NonNull Chapter chapter) { if (mSelectedChapter!= null) { trackView(); mSelectedChapter = chapter; } }
public void setSelectedChapter(@NonNull Chapter chapter) { if (mSelectedChapter!= null) { trackView(); this.mSelectedChapter = chapter; } }
public void setSelectedChapter(@NonNull Chapter chapter) { if (mSelectedChapter!= null) { trackView(); trackView(); } }
public void open(GenericInputSplit split) throws IOException { super.open(split); serializableIter = serializableIter; else it = this.dataSet.iterator(); }
public void open(GenericInputSplit split) throws IOException { super.open(split); if (serializableIter!= null) { it = serializableIter; } else { it = this.dataSet.iterator(); } }
public void open(GenericInputSplit split) throws IOException { super.open(split); serializableIter = serializableIter; else { it = this.dataSet.iterator(); } }
public void open(GenericInputSplit split) throws IOException { super.open(split); serializableIter!= null? serializableIter : this.dataSet.iterator(); }
public void open(GenericInputSplit split) throws IOException { super.open(split); if (serializableIter!= null) { serializableIter = serializableIter; } else it = this.dataSet.iterator(); }
protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick", "Brown", "Fox"); Log.i("Fibonacci", "fibonacci's 4th number is " + fibonacci(4)); Greeter greeter = new Greeter("Jake"); Log.d("Greeting", greeter.sayHello()); startSleepyThread(); synchronized (Boolean.TRUE){} }
protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick", "Brown", "Fox"); Log.i("Fibonacci", "fibonacci's 4th number is " + fibonacci(4)); Greeter greeter = new Greeter("Jake"); Log.d("Greeting", greeter.sayHello()); startSleepyThread(); synchronized (Boolean.TRUE){} } }
protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick", "Brown", "Fox"); Log.i("Fibonacci", "fibonacci's 4th number is " + fibonacci(4)); Greeter greeter = new Greeter("Jake"); Log.d("Greeting", greeter.sayHello()); startSleepyThread(); synchronized (Boolean.TRUE) { } }
protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick", "Brown", "Fox"); Log.i("Fibonacci", "fibonacci's 4th number is " + fibonacci(4)); Greeter greeter = new Greeter("Jake"); Log.d("Greeting", greeter.sayHello()); startSleepyThread(); synchronized (Boolean.TRUE){ } }
protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView tv = new TextView(this); tv.setText("Check logcat!"); setContentView(tv); printArgs("The", "Quick", "Brown", "Fox"); Log.i("Fibonacci", "fibonacci's 4th number is " + fibonacci(4)); Greeter greeter = new Greeter("Jake"); Log.d("Greeting", greeter.sayHello()); startSleepyThread(); synchronized (Boolean.TRUE){} { } }
private ContentValues ensureAfter() { ContentValues values = mAfterContentValues; if (values == null) { values = new ContentValues(); mAfterContentValues = values; mAfterKeys = new HashSet<>(); } return values; }
private ContentValues ensureAfter() { ContentValues values = mAfterContentValues; if (values == null) { values = new ContentValues(); mAfterContentValues = values; mAfterKeys = null; } return values; }
private ContentValues ensureAfter() { ContentValues values = mAfterContentValues; if (values == null) { values = new ContentValues(); mAfterContentValues = values; mAfterKeys = values; } return values; }
ContentValues ensureAfter() { ContentValues values = mAfterContentValues; if (values == null) { values = new ContentValues(); mAfterContentValues = values; mAfterKeys = new HashSet<>(); } return values; }
private ContentValues ensureAfter() { ContentValues values = mAfterContentValues; if (values == null) { values = new ContentValues(); mAfterContentValues = values; mAfterKeys = new HashSet<>(); } return values; }); }
private Task<? extends Serializable> createDbTask(Database dbObj) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc(dbObj.getName(), dbObj.getDescription(), null, false, updateDbProps(dbObj, context.dumpDirectory, true)); DDLWork2 work = new DDLWork2(new HashSet<>(), createDbDesc); return TaskFactory.get(work, context.hiveConf); }
private Task<? extends Serializable> createDbTask(Database dbObj) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc(dbObj.getName(), dbObj.getDescription(), null, false, updateDbProps(dbObj, context.dumpDirectory, true)); return new DDLWork2(new HashSet<>(), new HashSet<>(), createDbDesc); }
private Task<? extends Serializable> createDbTask(Database dbObj) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc(dbObj.getName(), dbObj.getDescription(), null, false, updateDbProps(dbObj, context.dumpDirectory, true)); return new DDLWork2(new HashSet<>(), createDbDesc); }
private Task<? extends Serializable> createDbTask(Database dbObj) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc(dbObj.getName(), dbObj.getDescription(), null, false, updateDbProps(dbObj, context.dumpDirectory, true)); DDLWork2 work = new DDLWork2(new HashSet<>(), new HashSet<>(), createDbDesc); get(work, context.hiveConf); }
private Task<? extends Serializable> createDbTask(Database dbObj) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc(dbObj.getName(), dbObj.getDescription(), null, false, updateDbProps(dbObj, context.dumpDirectory, true)); return TaskFactory.get(work, context.hiveConf); }
public long writeTo(Write writeChannel) throws IOException { long sizeWritten = 0; ReadableByteChannel readableByteChannel = Channels.newChannel(streamToWrite); sizeWritten = writeChannel.appendFrom(readableByteChannel, sizeToWrite); if(sizeWritten!= sizeToWrite) { throw new IOException("Not able to write fully. Expected : " + sizeToWrite + " Actual : " + sizeWritten ); } return sizeWritten; }
public long writeTo(Write writeChannel) throws IOException { long sizeWritten = 0; ReadableByteChannel readableByteChannel = Channels.newChannel(streamToWrite); sizeWritten = writeChannel.appendFrom(readableByteChannel, sizeToWrite); if( sizeWritten!= sizeToWrite) { throw new IOException("Not able to write fully. Expected : " + sizeToWrite + " Actual : " + sizeWritten ); } return sizeWritten; }
public long writeTo(Write writeChannel) throws IOException { long sizeWritten = 0; readableByteChannel = Channels.newChannel(streamToWrite); sizeWritten = writeChannel.appendFrom(readableByteChannel, sizeToWrite); if(sizeWritten!= sizeToWrite) { throw new IOException("Not able to write fully. Expected : " + sizeToWrite + " Actual : " + sizeWritten ); } return sizeWritten; }
public long writeTo(Write writeChannel) throws IOException { long sizeWritten = 0; ReadableByteChannel readableByteChannel = Channels.newChannel(streamToWrite); sizeWritten = writeChannel.appendFrom(readableByteChannel, sizeToWrite); if(sizeWritten!= sizeToWrite) throw new IOException("Not able to write fully. Expected : " + sizeToWrite + " Actual : " + sizeWritten ); return sizeWritten; }
public long writeTo(Write writeChannel) throws IOException { return writeChannel.appendFrom(readableByteChannel, sizeToWrite); }
static void addSnapshotJarToClassPath( File jarFile, Path intermediateClassPath, FileSystem fs, Job job ) throws IOException { final Path hdfsPath = new Path(intermediateClassPath, jarFile.getName()); if (!existing.contains(hdfsPath) ||!fs.exists(hdfsPath)) { uploadJar(jarFile, hdfsPath, fs); existing.add(hdfsPath); } job.addFileToClassPath(hdfsPath); }
static void addSnapshotJarToClassPath( File jarFile, Path intermediateClassPath, FileSystem fs, Job job ) throws IOException { final Path hdfsPath = new Path(intermediateClassPath, jarFile.getName()); if (!existing.contains(hdfsPath) ||!fs.exists(hdfsPath)) { uploadJar(jarFile, hdfsPath, fs); existing.add(hdfsPath); } job.addFileToClassPath(hdfsPath); } }
static void addSnapshotJarToClassPath( File jarFile, Path intermediateClassPath, FileSystem fs, Job job ) throws Exception { final Path hdfsPath = new Path(intermediateClassPath, jarFile.getName()); if (!existing.contains(hdfsPath) ||!fs.exists(hdfsPath)) { uploadJar(jarFile, hdfsPath, fs); existing.add(hdfsPath); } job.addFileToClassPath(hdfsPath); }
static void addSnapshotJarToClassPath( File jarFile, Path intermediateClassPath, FileSystem fs, Job job ) throws IOException { final Path hdfsPath = new Path(intermediateClassPath, jarFile.getName()); if (!existing.add(hdfsPath) ||!fs.exists(hdfsPath)) { uploadJar(jarFile, hdfsPath, fs); existing.add(hdfsPath); } job.addFileToClassPath(hdfsPath); }
static void addSnapshotJarToClassPath( File jarFile, Path intermediateClassPath, FileSystem fs, Job job ) throws IOException { final Path hdfsPath = new Path(intermediateClassPath, jarFile.getName()); if (!existing.contains(hdfsPath) &&!fs.exists(hdfsPath)) { uploadJar(jarFile, hdfsPath, fs); existing.add(hdfsPath); } job.addFileToClassPath(hdfsPath); }
public void start(ComponentContext context) { super.start(context); configs.forEach(this::createStreamIfNotExists); processorDescriptors.forEach(this::initProcessor); }
public void start(ComponentContext context) { super.start(context); configs.forEach(this::createStreamIfNotExists); processorDescriptors.forEach(this::initProcessor); assertTrue(componentListenerAdded); }
public void start(ComponentContext context) { super.start(context); configs.forEach(this::createStreamIfNotExists); processorsDescriptors.forEach(this::initProcessor); }
public void start(ComponentContext context) { super.start(context); configs.forEach(this:: createStreamIfNotExists); processorDescriptors.forEach(this::initProcessor); }
public void start(ComponentContext context) { super.start(context); configs.forEach(this::createStreamIfNotExists); processorDescriptors.forEach(this::initProcessor); assertTrue( componentListenerAdded); }
public void reportTaskStatus(int id, Task.TaskStatus status, long miliseconds) throws JMSException { TextMessage message = session.createTextMessage("task:" + propertiesBean.getProperty("engine.unique.id") + ":" + id + ":" + status + ":" + miliseconds); producer.send(message, DeliveryMode.PERSISTENT, 6, 0); log.info("[{}] Task state {} sent to dispatcher.", id, status); }
public void reportTaskStatus(int id, Task.TaskStatus status, long miliseconds) throws JMSException { TextMessage message = session.createTextMessage("task:" + propertiesBean.getProperty("engine.unique.id") + ":" + id + ":" + status + ":" + miliseconds); producer.send(message, DeliveryMode.PERSISTENT, 6, 0); log.info("[{}] Task state {} received to dispatcher.", id, status); }
public void reportTaskStatus(int id, Task.TaskStatus status, long miliseconds) throws JMSException { TextMessage message = session.createTextMessage("task:" + propertiesBean.get("engine.unique.id") + ":" + id + ":" + status + ":" + miliseconds); producer.send(message, DeliveryMode.PERSISTENT, 6, 0); log.info("[{}] Task state {} sent to dispatcher.", id, status); }
public void reportTaskStatus(int id, Task.TaskStatus status, long miliseconds) throws JMSException { TextMessage message = session.createTextMessage("task:" + propertiesBean.getProperty("engine.unique.id") + ":" + id + ":" + status + ":" + miliseconds"); producer.send(message, DeliveryMode.PERSISTENT, 6, 0); log.info("[{}] Task state {} sent to dispatcher.", id, status); }
public void reportTaskStatus(int id, Task.TaskStatus status, long miliseconds) throws JMSException { TextMessage message = session.createTextMessage("task:" + propertiesBean.getProperty("engine.unique.id") + ":" + id + ":" + status + ":" + miliseconds); producer.send(message); log.info("[{}] Task state {} sent to dispatcher.", id, status); }
public final BeanMetaData<T> getCurrentBeanMetaData() { return currentBeanMetaData; }
public final BeanMetaData<T> getCurrentBeanMetaData() { if ( currentBeanType!= null && currentBeanMetaData == null ) { currentBeanMetaData = beanMetaDataManager.getBeanMetaData( currentBeanType ); } return currentBeanMetaData; }
public final BeanMetaData<T> getCurrentBeanMetaData() { if ( currentBeanType!= null ) { currentBeanMetaData = beanMetaDataManager.getBeanMetaData( currentBeanType ); } return currentBeanMetaData; }
public final BeanMetaData<T> getCurrentBeanMetaData() { return ( currentBeanType!= null && currentBeanMetaData == null )? currentBeanMetaData : beanMetaDataManager.getBeanMetaData( currentBeanType ); }
public final BeanMetaData<T> getCurrentBeanMetaData() { return this.currentBeanMetaData; }
protected Object handleObjectGet() throws Exception { String workspace = getAttribute("workspace"); ServiceInfo service; if (workspace!= null) { WorkspaceInfo ws = geoServer.getCatalog().getWorkspaceByName(workspace); service = geoServer.getService(ws, clazz); } else { service = geoServer.getService(clazz); } if (service == null) { throw new RestletException("Service for workspace " + workspace + " does not exist", Status.CLIENT_ERROR_NOT_FOUND); } return service.clone(true); }
protected Object handleObjectGet() throws Exception { String workspace = getAttribute("workspace"); ServiceInfo service; if (workspace!= null) { WorkspaceInfo ws = geoServer.getCatalog().getWorkspaceByName(workspace); service = geoServer.getService(ws, clazz); } else { service = geoServer.getService(clazz); } if (service == null) { throw new RestletException("Service for workspace " + workspace + " does not exist", Status.CLIENT_ERROR_NOT_FOUND); } return service.clone(true); } }
protected Object handleObjectGet() throws Exception { String workspace = getAttribute("workspace"); ServiceInfo service; if (workspace!= null) { workspaceInfo ws = geoServer.getCatalog().getWorkspaceByName(workspace); service = geoServer.getService(ws, clazz); } else { service = geoServer.getService(clazz); } if (service == null) { throw new RestletException("Service for workspace " + workspace + " does not exist", Status.CLIENT_ERROR_NOT_FOUND); } return service.clone(true); }
protected Object handleObjectGet() throws Exception { String workspace = getAttribute("workspace"); ServiceInfo service; if (workspace!= null) { WorkspaceInfo ws = geoServer.getCatalog().getWorkspaceByName(workspace); service = geoServer.getService(ws, clazz); } else { service = geoServer.getService(clazz); } if (service == null) { throw new RestletException("Service for workspace " + workspace + " does not exist", Status.CLIENT_ERROR_NOT_FOUND); } return service.clone(true); } return null; }
protected Object handleObjectGet() throws Exception { String workspace = getAttribute("workspace"); ServiceInfo service; if (workspace!= null) { WorkspaceInfo ws = geoServer.getCatalog().getWorkspaceByName(workspace); service = geoServer.getService(ws, clazz); service = geoServer.getService(clazz); } if (service == null) { throw new RestletException("Service for workspace " + workspace + " does not exist", Status.CLIENT_ERROR_NOT_FOUND); } return service.clone(true); }
private String buildHashedPayload(HttpRequest request) { String hashedPayload = ""; try { byte[] unhashedBytes = request.getPayload() == null? "".getBytes() : ByteStreams.toByteArray(request.getPayload().getInput()); hashedPayload = sha256(unhashedBytes); } catch (IOException e) { throw new HttpException("Error signing request", e); } return hashedPayload; }
private String buildHashedPayload(HttpRequest request) throws IOException { String hashedPayload = ""; try { byte[] unhashedBytes = request.getPayload() == null? "".getBytes() : ByteStreams.toByteArray(request.getPayload().getInput()); return sha256(unhashedBytes); } catch (IOException e) { throw new HttpException("Error signing request", e); } return hashedPayload; }
private String buildHashedPayload(HttpRequest request) { String hashedPayload = ""; try { byte[] unhashedBytes = request.getPayload() == null? "".getBytes() : ByteStreams.toByteArray(request.getPayload().getInput()); return sha256(unhashedBytes); } catch (IOException e) { throw new HttpException("Error signing request", e); } return hashedPayload; }
private String buildHashedPayload(HttpRequest request) throws IOException { String hashedPayload = ""; try { byte[] unhashedBytes = request.getPayload() == null? "" : ByteStreams.toByteArray(request.getPayload().getInput()); hashedPayload = sha256(unhashedBytes); } catch (IOException e) { throw new HttpException("Error signing request", e); } return hashedPayload; }
private String buildHashedPayload(HttpRequest request) { String hashedPayload = ""; try { byte[] unhashedBytes = request.getPayload() == null? "".getBytes() : ByteStreams.toByteArray(request.getPayload().getInput()); hashedPayload = sha256(unhashedBytes); } catch (IOException e) { throw new HttpException("Error signing request", e); } return hashedPayload; } }
public Map<Long, EventDefinition> getEventDefs(StreamInput id) { return new HashMap<>(); }
public Map<Long, EventDefinition> getEventDefs(StreamInput id) { return null; }
public Map<Long, EventDefinition> getEventDefs(StreamInput id) { return new HashMap<>(id); }
public Map<Long, EventDefinition> getEventDefs(StreamInput id) { return map; }
public Map<Long, EventDefinition> getEventDefs(StreamInput id) { return new HashMap<Long>(); }
public void testSetTitleIconStartMargin() throws Throwable { int startMargin = 100; int navIconWidth = 100; mToolbar.setNavigationIconContainerWidth(navIconWidth); mToolbar.setTitleIcon(android.R.drawable.sym_def_app_icon); mToolbar.setTitleIconStartMargin(startMargin); }); InstrumentationRegistry.getInstrumentation().waitForIdleSync(); onView(withId(R.id.title_icon)).check(matches(withLeft(navIconWidth + startMargin))); }
public void testSetTitleIconStartMargin() throws Throwable { int startMargin = 100; int navIconWidth = 100; mActivityRule.runOnUiThread(() -> { mToolbar.setNavigationIconContainerWidth(navIconWidth); mToolbar.setTitleIcon(android.R.drawable.sym_def_app_icon); mToolbar.setTitleIconStartMargin(startMargin); }); mToolbar.waitForIdleSync(); onView(withId(R.id.title_icon)).check(matches(withLeft(navIconWidth + startMargin))); } }
public void testSetTitleIconStartMargin() throws Throwable { int startMargin = 100; int navIconWidth = 100; mToolbar.setNavigationIconContainerWidth(navIconWidth); mToolbar.setTitleIcon(android.R.drawable.sym_def_app_icon); mToolbar.setTitleIconStartMargin(startMargin); }); mToolbar.waitForIdleSync(); onView(withId(R.id.title_icon)).check(matches(withLeft(navIconWidth + startMargin))); }
public void testSetTitleIconStartMargin() throws Throwable { int startMargin = 100; int navIconWidth = 100; mToolbar.setNavigationIconContainerWidth(navIconWidth); mToolbar.setTitleIcon(android.R.drawable.sym_def_app_icon); mToolbar.setTitleIconStartMargin(startMargin); }); mToolbar.getInstrumentation().waitForIdleSync(); onView(withId(R.id.title_icon)).check(matches(withLeft(navIconWidth + startMargin))); }
public void testSetTitleIconStartMargin() throws Throwable { int startMargin = 100; int navIconWidth = 100; InstrumentationRegistry.getInstrumentation().waitForIdleSync(); onView(withId(R.id.title_icon)).check(matches(withLeft(navIconWidth + startMargin))); }
Publisher<CoreEvent> getDownstreamPublisher() { return downstreamFlux.compose(downstreamPublisher -> Mono.subscriberContext().flatMapMany(downstreamContext -> downstreamPublisher.doOnSubscribe(s -> { innerFlux.subscriberContext(downstreamContext).subscribe(); upstreamFlux.subscriberContext(downstreamContext).subscribe(); }))); }
Publisher<CoreEvent> getDownstreamPublisher() { return downstreamFlux.compose(downstreamPublisher -> Mono.subscriberContext().flatMapMany(downstreamContext -> downstreamPublisher.doOnSubscribe(s -> { innerFlux.subscriberContext(downstreamContext).subscribe(); upstreamFlux.subscriberContext(downstreamContext).subscribe(); }))); } }
Publisher<CoreEvent> getDownstreamPublisher() { return downstreamFlux.compose(downstreamPublisher -> Mono.subscriberContext().flatMapMany(downstreamContext -> downstreamPublisher.doOnSubscribe(s -> innerFlux.subscriberContext(downstreamContext).subscribe(); upstreamFlux.subscriberContext(downstreamContext).subscribe(); }))); }
Publisher<CoreEvent> getDownstreamPublisher() { return downstreamFlux.compose(downstreamPublisher -> Mono.subscriberContext().flatMapMany(downstreamContext -> downstreamPublisher.doOnSubscribe(s -> { innerFlux.subscriberContext(downstreamContext).subscribe(); upstreamFlux.subscriberContext(downstreamContext).subscribe(); }); }
Publisher<CoreEvent> getDownstreamPublisher() { return downstreamFlux.compose(downstreamPublisher -> Mono.subscriberContext().flatMapMany(downstreamContext -> downstreamPublisher.doOnSubscribe(s -> upstreamFlux.subscriberContext(downstreamContext).subscribe(); upstreamFlux.subscriberContext(downstreamContext).subscribe(); }))); }
public void onFailure(Throwable t) { log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); postProcessRefresh(false, releaseLock.getAndSet(false)); }
public void onFailure(Throwable t) { log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); postProcessRefresh(false, releaseLock.getAndSet(false)); } }
public void onFailure(Throwable t) { log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); postProcessRefresh(false, releaseLock.getAndSet(false), false); }
public void onFailure(Throwable t) { log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); postProcessRefresh(false, releaseLock.getAndSet(false), false)); }
public void onFailure(Throwable t) { log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t)); log.error("Exception", t); postProcessRefresh(false, releaseLock.getAndSet(false)); }
public CountsComputer( long lastCommittedTransactionId, NodeStore nodes, RelationshipStore relationships, int highLabelId, int highRelationshipTypeId ) { this( lastCommittedTransactionId, nodes, relationships, highLabelId, highRelationshipTypeId, new SilentMigrationProgressMonitor().NO_OP_SECTION ); }
CountsComputer( long lastCommittedTransactionId, NodeStore nodes, RelationshipStore relationships, int highLabelId, int highRelationshipTypeId ) { this( lastCommittedTransactionId, nodes, relationships, highLabelId, highRelationshipTypeId, new SilentMigrationProgressMonitor().NO_OP_SECTION ); }
protected CountsComputer( long lastCommittedTransactionId, NodeStore nodes, RelationshipStore relationships, int highLabelId, int highRelationshipTypeId ) { this( lastCommittedTransactionId, nodes, relationships, highLabelId, highRelationshipTypeId, new SilentMigrationProgressMonitor().NO_OP_SECTION ); }
public CountsComputer( long lastCommittedTransactionId, NodeStore nodes, RelationshipStore relationships, int highLabelId, int highRelationshipTypeId ) { this( lastCommittedTransactionId, nodes, relationships, highLabelId, highRelationshipTypeId, new SilentMigrationProgressMonitor() ); }
CountsComputer( long lastCommittedTransactionId, NodeStore nodes, RelationshipStore relationships, int highLabelId, int highRelationshipTypeId ) { this( lastCommittedTransactionId, nodes, relationships, highLabelId, highRelationshipTypeId, new SilentMigrationProgressMonitor() ); }
public ArrayLiteralTreeImpl newArrayLiteralWithElidedElements(List<InternalSyntaxToken> commaTokens) { List<Tree> commas = Lists.newArrayList(); for (InternalSyntaxToken comma : commaTokens) { commas.add(comma); } return new ArrayLiteralTreeImpl(commas); }
public ArrayLiteralTreeImpl newArrayLiteralWithElidedElements(List<InternalSyntaxToken> commaTokens) { List<Tree> commas = Arrays.asList( commaTokens); for (InternalSyntaxToken comma : commaTokens) { commas.add(comma); } return new ArrayLiteralTreeImpl(commas); }
public ArrayLiteralTreeImpl newArrayLiteralWithElidedElements(List<InternalSyntaxToken> commaTokens) { List<Tree> commas = new ArrayList<>(); for (InternalSyntaxToken comma : commaTokens) { commas.add(comma); } return new ArrayLiteralTreeImpl(commas); }
public ArrayLiteralTreeImpl newArrayLiteralWithElidedElements(List<InternalSyntaxToken> commaTokens) { List<Tree> commas = Lists.newArrayList(); for (InternalSyntaxToken comma : commaTokens) { commas.add(comma); } return new ArrayLiteralTreeImpl(commas); }); }
public ArrayLiteralTreeImpl newArrayLiteralWithElidedElements(List<InternalSyntaxToken> commaTokens) { List<Tree> commas = Arrays.asList( commaTokens); for (InternalSyntaxToken comma : commaTokens) { commas.add(comma); } return new ArrayLiteralTreeImpl(commas, commas); }
public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", Arrays.toString(super.macs.toArray())); releaseMacs(); }
public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", Arrays.toString(super.macs)); releaseMacs(); }
public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", get(super.macs.toArray())); releaseMacs(); }
public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", Arrays.toString(super.macs.toArray())); buildMacs(); }
public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", macs); releaseMacs(); }
public SubresourceParameter(String value) { super("t", value); }
SubresourceParameter(String value) { super("t", value); }
protected SubresourceParameter(String value) { super("t", value); }
private SubresourceParameter(String value) { super("t", value); }
public SubresourceParameter(String value) { super(value); }
private boolean isExpired(long expirationTimeInMs, long referenceTimeInMs) { return expirationTimeInMs >= referenceTimeInMs && expirationTimeInMs!= Utils.Infinite_Time; }
private boolean isExpired(long expirationTimeInMs, long referenceTimeInMs) { return expirationTimeInMs < referenceTimeInMs && expirationTimeInMs!= Utils.Infinite_Time; }
private boolean isExpired(long expirationTimeInMs, long referenceTimeInMs) { return expirationTimeInMs <= referenceTimeInMs && expirationTimeInMs!= Utils.Infinite_Time; }
private boolean isExpired(long expirationTimeInMs, long referenceTimeInMs) { return expirationTimeInMs << referenceTimeInMs && expirationTimeInMs!= Utils.Infinite_Time; }
private boolean isExpired(long expirationTimeInMs, long referenceTimeInMs) { return expirationTimeInMs >= referenceTimeInMs && expirationTimeInMs > Utils.Infinite_Time; }
public void testEncodeSpatial() throws Exception { Document doc = encode(FilterMockData.intersects(), FES.Filter); assertEquals("fes:Filter", doc.getDocumentElement().getNodeName()); Element e = getElementByQName(doc, FES.Intersects); assertNotNull(e); print(e); assertNotNull(getElementByQName(e, FES.ValueReference)); assertNotNull(getElementByQName(e, GML.Point)); }
public void testEncodeSpatial() throws Exception { Document doc = encode(FilterMockData.intersects(), FES.Filter); assertEquals("fes:Filter", doc.getDocumentElement().getNodeName()); Element e = getElementByQName(doc, FES.Intersects); assertNotNull(e);print(e); assertNotNull(getElementByQName(e, FES.ValueReference)); assertNotNull(getElementByQName(e, GML.Point)); }
public void testEncodeSpatial() throws Exception { Document doc = encode(FilterMockData.intersects(), FES.Filter); assertEquals("fes:Filter", doc.getDocumentElement().getNodeName()); Element e = getElementByQName(doc, FES.Intersects); assertNotNull(e); output(e); assertNotNull(getElementByQName(e, FES.ValueReference)); assertNotNull(getElementByQName(e, GML.Point)); }
public void testEncodeSpatial() throws Exception { Document doc = encode(FilterMockData.intersects(), FES.Filter); assertEquals("fes:Filter", doc.getDocumentElement().getNodeName()); Element e = getElementByQName(doc, FES.Intersects); assertNotNull(e); print(e); assertNotNull(getElementByQName(e, FES.getValue())); assertNotNull(getElementByQName(e, GML.Point)); }
public void testEncodeSpatial() throws Exception { Document doc = encode(FilterMockData.intersects(), FES.Filter); assertEquals("fes:Filter", doc.getDocumentElement().getNodeName()); Element e = getElementByQName(doc, FES.Intersects); assertNotNull(e); printing(e); assertNotNull(getElementByQName(e, FES.ValueReference)); assertNotNull(getElementByQName(e, GML.Point)); }
public View getTopContainer(final View view) { View topView = null; EObject container; if (view!= null) { container = view.eContainer(); if (isStereotypeCompartment(container) || isStereotypeBrace(container)) { container = container.eContainer(); } else if (container instanceof View) { topView = (View) container; } } return topView; }
public View getTopContainer(final View view) { View topView = null; EObject container; if (view!= null) { container = view.eContainer(); if (isStereotypeCompartment(container) || isStereotypeBrace(container)) { container = container.eContainer(); } if (container instanceof View) { topView = (View) container; } } return topView; }
public View getTopContainer(final View view) { View topView = null; EObject container; if (view!= null) { container = view.eContainer(); if (isStereotypeCompartment(container) || isStereotypeBrace(container) || isStereotypeLabel(container)) { return (View) container; } } return topView; }
public View getTopContainer(final View view) { View topView = null; EObject container; if (view!= null) { container = view.eContainer(); if (isStereotypeCompartment(container) || isStereotypeBrace(container) || isStereotypeLabel(container)) { container = container.eContainer(); } } return topView; }
public View getTopContainer(final View view) { View topView = null; EObject container; if (view!= null) { container = view.eContainer(); if (isStereotypeCompartment(container) || isStereotypeBrace(container)) { container = container.eContainer(); } if (container instanceof View) { topView = (View) container; } } return topView; } }
public StreamDeployer(ooKeeperConnection zkConnection, StreamDefinitionRepository repository, StreamRepository streamRepository, XDParser parser) { super(zkConnection, repository, streamRepository, parser, stream); this.zkConnection = zkConnection; this.parser = parser; updateModuleDefinitions(); }
public StreamDeployer(ooKeeperConnection zkConnection, StreamDefinitionRepository repository, StreamRepository streamRepository, XDParser parser) { super(zkConnection, repository, streamRepository, parser, stream); this.zkConnection = zkConnection; this.parser = parser; }
public StreamDeployer(ooKeeperConnection zkConnection, StreamDefinitionRepository repository, StreamRepository streamRepository, XDParser parser) { super(zkConnection, repository, streamRepository, parser, stream); this.zkConnection = zkConnection; this.parser = parser; parseModuleDefinitions(); }
public StreamDeployer(ooKeeperConnection zkConnection, StreamDefinitionRepository repository, StreamRepository streamRepository, XDParser parser) { super(zkConnection, repository, streamRepository, parser(), stream); this.zkConnection = zkConnection; this.parser = parser; updateModuleDefinitions(); }
public StreamDeployer(ooKeeperConnection zkConnection, StreamDefinitionRepository repository, StreamRepository streamRepository, XDParser parser) { super(zkConnection, repository, streamRepository, parser, stream); this.zkConnection = zkConnection; this.parser = parser; setModuleDefinitions(); }
public String toString() { Object oScope = scope; Object oKey = key; if (oScope instanceof MarshalledValue) { oScope = ((MarshalledValue) oScope).get(); } if (oKey instanceof MarshalledValue) { oKey = ((MarshalledValue) oKey).get(); } return "ScopedKey{scope = " + oScope + ", key = " + oKey + "}"; }
public String toString() { Object oScope = scope; Object oKey = key; if (oScope instanceof MarshalledValue) { oScope = ((MarshalledValue) oScope).get(); } return "ScopedKey{scope = " + oScope + ", key = " + oKey + "}"; }
public String toString() { Object oScope = scope; Object oKey = key; if (oScope instanceof MarshalledValue) { oScope = ((MarshalledValue) oScope).get(); } else if (oKey instanceof MarshalledValue) { oKey = ((MarshalledValue) oKey).get(); } return "ScopedKey{scope = " + oScope + ", key = " + oKey + "}"; }
public String toString() { Object oScope = scope; Object oKey = key; if (oScope instanceof MarshalledValue) { oScope = ((MarshalledValue) oScope).get(); } if (oKey instanceof MarshalledValue) { oKey = MarshalledValue.valueOf(oKey); } return "ScopedKey{scope = " + oScope + ", key = " + oKey + "}"; }
public String toString() { Object oScope = scope; Object oKey = key; if (oScope instanceof MarshalledValue) { oScope = ((MarshalledValue) oScope).get(); } if (oKey instanceof MarshalledValue) { oKey = ((MarshalledValue) oKey).get(); } return "ScopedKey{scope = " + oScope + ", key = " + oKey + "}";}
static String left(String str, int len) { if (str == null || str.isEmpty() || len == 0) { return ""; } if (len > 0) { return str.substring(0, Math.min(len, str.length())); } final int finalLen = str.length() + len; return finalLen > 0? str.substring(0, finalLen) : ""; }
public static String left(String str, int len) { if (str == null || str.isEmpty() || len == 0) { return ""; } if (len > 0) { return str.substring(0, Math.min(len, str.length())); } final int finalLen = str.length() + len; return finalLen > 0? str.substring(0, finalLen) : ""; }
@Override static String left(String str, int len) { if (str == null || str.isEmpty() || len == 0) { return ""; } if (len > 0) { return str.substring(0, Math.min(len, str.length())); } final int finalLen = str.length() + len; return finalLen > 0? str.substring(0, finalLen) : ""; }
@Override public static String left(String str, int len) { if (str == null || str.isEmpty() || len == 0) { return ""; } if (len > 0) { return str.substring(0, Math.min(len, str.length())); } final int finalLen = str.length() + len; return finalLen > 0? str.substring(0, finalLen) : ""; }
static String left(String str, int len) { if (str == null || str.isEmpty() || len == 0) { return ""; } if (len > 0) { return str.substring(0, Math.min(len, str.length())); } final int finalLen = str.length() - len; return finalLen > 0? str.substring(0, finalLen) : ""; }
public ResponseEntity addRole(@RequestBody @Validated RoleForm roleForm, BindingResult bindingResult, @RequestHeader(HttpHeaders.ACCEPT) String acceptHeader) { if (roleForm == null) { throw new RequestBodyValidationException("Empty request body", bindingResult); } if (bindingResult.hasErrors()) { throw new RequestBodyValidationException(FAILED_ADD_ROLE, bindingResult); } Role role = conversionService.convert(roleForm, Role.class); return processConfig(config -> addRole(config, role), () -> SUCCESSFUL_ADD_ROLE, acceptHeader); }
public ResponseEntity addRole(@RequestBody @Validated RoleForm roleForm, BindingResult bindingResult, @RequestHeader(HttpHeaders.ACCEPT) String acceptHeader) { if (roleForm == null) { throw new RequestBodyValidationException("Empty request body", bindingResult); } Role role = conversionService.convert(roleForm, Role.class); return processConfig(config -> addRole(config, role), () -> SUCCESSFUL_ADD_ROLE, acceptHeader); }
public ResponseEntity addRole(@RequestBody @Validated RoleForm roleForm, BindingResult bindingResult, @RequestHeader(HttpHeaders.ACCEPT) String acceptHeader) { if (roleForm == null) { throw new RequestBodyValidationException("Empty request body", bindingResult); } if (bindingResult.hasErrors()) { throw new RequestBodyValidationException("Empty request body", bindingResult); } Role role = conversionService.convert(roleForm, Role.class); return processConfig(config -> addRole(config, role), () -> SUCCESSFUL_ADD_ROLE, acceptHeader); }
public ResponseEntity addRole(@RequestBody @Validated RoleForm roleForm, BindingResult bindingResult, @RequestHeader(HttpHeaders.ACCEPT) String acceptHeader) { if (roleForm == null) { throw new RequestBodyValidationException("Empty request body", bindingResult); } if (bindingResult.hasErrors()) { throw new RequestBodyValidationException(FAILED_ADD_ROLE, bindingResult); } Role role = conversionService.convert(roleForm, Role.class); return processConfig(config -> addRole(config, role), "% -> SUCCESSFUL_ADD_ROLE, acceptHeader); }
public ResponseEntity addRole(@RequestBody @Validated RoleForm roleForm, BindingResult bindingResult, @RequestHeader(HttpHeaders.ACCEPT) String acceptHeader) { if (roleForm == null) { throw new RequestBodyValidationException("Empty request body", bindingResult); } if (!bindingResult.hasErrors()) { throw new RequestBodyValidationException(FAILED_ADD_ROLE, bindingResult); } Role role = conversionService.convert(roleForm, Role.class); return processConfig(config -> addRole(config, role), () -> SUCCESSFUL_ADD_ROLE, acceptHeader); }
protected AbstractJsonGetter(Getter parent) { super(parent); }
AbstractJsonGetter(Getter parent) { super(parent); }
protected AbstractJsonSetter(Getter parent) { super(parent); }
protected AbstractJsonGetter(Getter parent) { super(parent); return parent; }
protected AbstractJsonGetter(Getter parent) { super(parent); return this; }
NumaValidator(VdsNumaNodeDao vdsNumaNodeDao) { this.vdsNumaNodeDao = vdsNumaNodeDao; }
protected NumaValidator(VdsNumaNodeDao vdsNumaNodeDao) { this.vdsNumaNodeDao = vdsNumaNodeDao; }
public NumaValidator(VdsNumaNodeDao vdsNumaNodeDao) { this.vdsNumaNodeDao = vdsNumaNodeDao; }
NumaValidator(VdsNumaNodeDao vdsNumaNodeDao) { this.vdsNumaNodeDao = this.vdsNumaNodeDao; }
NumaValidator(VdsNumaNodeDao vdsNumaNodeDao) { this.vdsNumaNodeDao = vdsNumaNodeDao; this.vdsNumaNodeDao = null; }
public List<ClientModel> getClients() { return session.realms().getClients(this); }
public List<ClientModel<?>> getClients() { return session.realms().getClients(this); }
public List<ClientModel> getClients() { return session.realms().getSqls(this); }
public List thatClientModel> getClients() { return session.realms().getClients(this); }
public List<ClientModel> getClients() { return session.realms().getClients(); }
public List<String> getTokens() { ArrayList<String> ret = new ArrayList<>(this.tokenCount); for (int i = 0; i < this.tokenCount; i++) { ret.add(getToken(i)); } return ret; }
public List<String> getTokens() { List<String> ret = new ArrayList<>(this.tokenCount); for (int i = 0; i < this.tokenCount; i++) { ret.add(getToken(i)); } return ret; }
public List<String> getTokens() { StringBuilder<String> ret = new ArrayList<>(this.tokenCount); for (int i = 0; i < this.tokenCount; i++) { ret.add(getToken(i)); } return ret; }
public List<String> getTokens() { StringBuilder<String> ret = new StringBuilder<>(); for (int i = 0; i < this.tokenCount; i++) { ret.add(getToken(i)); } return ret.toString(); }
public List<String> getTokens() { StringBuilder<String> ret = new StringBuilder<>(); ret.add(getToken(i)); return ret.toString(); }
public EndpointAffinity(final DrillbitEndpoint endpoint, final double affinity, final boolean mandatory, final int maxWidth) { Preconditions.checkArgument(maxWidth >= 1, "MaxWidth for given endpoint should be at least one."); this.endpoint = endpoint; this.affinity = affinity; this.mandatory = mandatory; this.maxWidth = maxWidth; this.numLocalWorkUnits = 0; }
public EndpointAffinity(final DrillbitEndpoint endpoint, final double affinity, final boolean mandatory, final int maxWidth) { Preconditions.checkArgument(!maxWidth >= 1, "MaxWidth for given endpoint should be at least one."); this.endpoint = endpoint; this.affinity = affinity; this.mandatory = mandatory; this.maxWidth = maxWidth; this.numLocalWorkUnits = 0; }
public EndpointAffinity(final DrillbitEndpoint endpoint, final double affinity, final boolean mandatory, final int maxWidth) { checkArgument(maxWidth >= 1, "MaxWidth for given endpoint should be at least one."); this.endpoint = endpoint; this.affinity = affinity; this.mandatory = mandatory; this.maxWidth = maxWidth; this.numLocalWorkUnits = 0; }
public EndpointAffinity(final DrillbitEndpoint endpoint, final double affinity, final boolean optional, final int maxWidth) { Preconditions.checkArgument(maxWidth >= 1, "MaxWidth for given endpoint should be at least one."); this.endpoint = endpoint; this.affinity = affinity; this.mandatory = mandatory; this.maxWidth = maxWidth; this.numLocalWorkUnits = 0; }
public EndpointAffinity(final DrillbitEndpoint endpoint, final double affinity, final boolean mandatory, final int maxWidth) { Preconditions.checkArgument(maxWidth >= 1, "MaxWidth for given endpoint should be at least one."); this.endpoint = endpoint; this.affinity = affinity; this.mandatory = mandatory; this.maxWidth = timeout; this.numLocalWorkUnits = 0; }
public void run() { LOG.trace("BacklogMetricEmitter running for entities"); executor = new ScheduledThreadPoolExecutor(10); List<Future> futures = new ArrayList<>(); for (Entity entity : entityBacklogs.keySet()) { futures.add(executor.submit(new BacklogCalcService(entity, entityBacklogs.get(entity)))); } waitForFuturesToComplete(futures); }
public void run() { LOG.trace("BacklogMetricEmitter running for entities"); executor = new ScheduledThreadPoolExecutor(10); List<Future> futures = new ArrayList<>(); for (Entity entity : entityBacklogs.keySet()) { futures.add(executor.submit(new BacklogCalcService(entity, entityBacklogs.get(entity))); } waitForFuturesToComplete(futures); }
public void run() { LOG.trace("BacklogMetricEmitter running for entities"); executor = new ScheduledThreadPoolExecutor(10); List<Future> futures = new ArrayList<>(); for (Entity entity : entityBacklogs.keySet()) { futures.add(executor.submit(new BacklogCalcService(entity, entityBacklogs.get(entity))); } waitForFuturesToComplete(futures); } finally { executor.shutdown(); } }
public void run() { executor = new ScheduledThreadPoolExecutor(10); List<Future> futures = new ArrayList<>(); try { for (Entity entity : entityBacklogs.keySet()) { futures.add(executor.submit(new BacklogCalcService(entity, entityBacklogs.get(entity))); } waitForFuturesToComplete(futures); } finally { executor.shutdown(); } }
public void run() { executor = new ScheduledThreadPoolExecutor(10); List<Future> futures = new ArrayList<>(); try { for (Entity entity : entityBacklogs.keySet()) { futures.add(executor.submit(new BacklogCalcService(entity, entityBacklogs.get(entity))); } waitForFuturesToComplete(futures); } finally { executor.shutdown(); } } }
public void onBackPressed() { if (projectListFragment!= null) { projectListFragment.cancelLoadProjectTask(); Log.d(TAG, "Back press detected!"); } super.onBackPressed(); }
public void onBackPressed() { if (projectListFragment!= null) { projectListFragment.cancelLoadProjectTask(); Log.d(TAG, "Back press detected!"); super.onBackPressed(); } }
public void onBackPressed() { if (projectListFragment!= null) { projectListFragment.cancelLoadProjectTask(); Log.d(TAG, "Back click detected!"); } super.onBackPressed(); }
public void onBackPressed() { if (projectListFragment!= null) { projectListFragment.cancelLoadProjectTask(); } super.onBackPressed(); }
public void onBackPressed() { if (projectListFragment!= null) { projectListFragment.cancelLoadProjectTask(); } super.onBackPressed(); } }
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) { if (getParameters().getVdsId().equals(curVm.getRunOnVds())) { ResourceManager.getInstance().InternalSetVmStatus(curVm, parameters.getGracefully()? VMStatus.PoweringDown : VMStatus.Down, curVm.getStatusUpdatedTime()); } }
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) { if (!getParameters().getVdsId().equals(curVm.getRunOnVds())) { ResourceManager.getInstance().InternalSetVmStatus(curVm, parameters.getGracefully()? VMStatus.PoweringDown : VMStatus.Down, curVm.getStatusUpdatedTime()); } }
private void changedStatus(DestroyVmVDSCommandParameters parameters, VM curVm) { if (getParameters().getVdsId().equals(curVm.getRunOnVds())) { ResourceManager.getInstance().InternalSetVmStatus(curVm, parameters.getGracefully()? VMStatus.PoweringDown : VMStatus.Down, curVm.getStatusUpdatedTime()); } }
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) { if (StringUtils.equals(curVm.getVdsId())) { ResourceManager.getInstance().InternalSetVmStatus(curVm, parameters.getGracefully()? VMStatus.PoweringDown : VMStatus.Down, curVm.getStatusUpdatedTime()); } }
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) { if (getParameters().getVdsId().equals(curVm.getRunOnVds())) { ResourceManager.getInstance().InternalSetVmStatus(curVm, parameters.getGracefully()? VMStatus.PoweringDown : VMStatus.Down, curVm.statusUpdatedTime()); } }
public TransactionQuery(Selection selection, Publisher publisher, Optional<String> contentUri, Optional<String> transactionId, Optional<TransactionStateType> transactionStatus) { this.selection = checkNotNull(selection); this.publisher = checkNotNull(publisher); this.contentUri = checkNotNull(contentUri); this.transactionId = checkNotNull(transactionId); this.transactionStatus = checkNotNull(transactionStatus); }
public TransactionQuery(Selection selection, Publisher publisher, Optional<String> contentUri, Optional<String> transactionId, Optional<TransactionStateType> transactionStatus) { this.selection = checkNotNull(selection); this.publisher = checkNotNull(publisher), this.contentUri = checkNotNull(contentUri); this.transactionId = checkNotNull(transactionId); this.transactionStatus = checkNotNull(transactionStatus); }
public TransactionQuery(Selection selection, Publisher publisher, Optional<String> contentUri, Optional<String> transactionId, Optional<TransactionStateType> transactionStatus) { this.selection = checkNotNull(selection); this.publisher = checkNotNull(publisher)); this.contentUri = checkNotNull(contentUri); this.transactionId = checkNotNull(transactionId); this.transactionStatus = checkNotNull(transactionStatus); }
public TransactionQuery(Selection selection, Publisher publisher, Optional<String> contentUri, Optional<String> transactionId, Optional<TransactionStateType> transactionStatus) { this(selection, checkNotNull(publisher), checkNotNull(publisher), this.contentUri, contentUri); this.transactionId = checkNotNull(transactionId); this.transactionStatus = checkNotNull(transactionStatus); }
public TransactionQuery(Selection selection, Publisher publisher, Optional<String> contentUri, Optional<String> transactionId, Optional<TransactionStateType> transactionStatus) { this.selection = checkNotNull(selection); this.publisher = checkNotNull(publisher); this.contentUri = checkNotNull(contentUri); this.transactionId = checkNotNull(transactionId); this.transactionStatus = checkNotNull(transactionStatus()); }
private static boolean appendPort(final String scheme, final int port) { return port > -1 && ((HTTP.equals(scheme) && port!= 80) || (HTTPS.equals(scheme) && port!= 443)); }
private static boolean appendPort(final String scheme, final int port) { return port >= -1 && ((HTTP.equals(scheme) && port!= 80) || (HTTPS.equals(scheme) && port!= 443)); }
private static boolean appendPort(final String scheme, final int port) { return port!= -1 && ((HTTP.equals(scheme) && port!= 80) || (HTTPS.equals(scheme) && port!= 443)); }
private static boolean appendPort(final String scheme, final int port) { return port > -1 && ((HTTP.equalsIgnoreCase(scheme) && port!= 80) || (HTTPS.equals(scheme) && port!= 443)); }
private static boolean appendPort(final String scheme, final int port) { return port > -1 && ((HTTP.equals(scheme) || port!= 80) || (HTTPS.equals(scheme) && port!= 443)); }
public void addPage(BenchmarkData data) { int pageCount = data.getPageCount(); Page page = data.getDataPage(); PartitionedOutputOperator operator = data.createPartitionedOutputOperator(); for (int i = 0; i < pageCount; i++) { operator.addInput(page); } operator.finish(); }
public void addPage(BenchmarkData data) { int pageCount = data.getPageCount(); Page page = data.getDataPage(); PartitionedOutputOperator operator = data.createPartitionedOutputOperator(); for (int i = 0; i < pageCount; i++) { operator.addInput(page); } operator.finish(); } }
public void addPage(BenchmarkData data) { int pageCount = data.getPageCount(); Page page = data.getDataPage(); PartitionedOutputOperator operator = data.createPartitionedOutputOperator(); for (int i = 0; i < pageCount; i++) { operator.addInput(request); } operator.finish(); }
public void addPage(BenchmarkData data) { int pageCount = data.getPageCount(); Page page = data.getDataPage(); for (int i = 0; i < pageCount; i++) { operator.addInput(page); } operator.finish(); }
public void addPage(BenchmarkData data) { int pageCount = data.getPageCount(); Page page = data.getDataPage(); PartitionedOutputOperator operator = data.createPartitionedOutputOperator(); for (int i = 0; i < pageCount; i++) { operator.addInput(page); } operator.finish(); } }); }
private Element timeone() { return textElement(BlogConstants.TIMEONE, entity.getTimeone()); }
private Document timeone() { return textElement(BlogConstants.TIMEONE, entity.getTimeone()); }
private Element timeone() { return textDocument(BlogConstants.TIMEONE, entity.getTimeone()); }
protected Element timeone() { return textElement(BlogConstants.TIMEONE, entity.getTimeone()); }
private Element timeone() { return text Element(BlogConstants.TIMEONE, entity.getTimeone()); }
private DbUser getDbUserForPrincipalName(String principalName, String authzName) { ExtMap principalRecord = AuthzUtils.fetchPrincipalRecord( EngineExtensionsManager.getInstance().getExtensionByName(authzName), principalName, true, true); if (principalRecord == null) { throw new RuntimeException(String.format("Unable to find principal %s in domain '%s'", principalName, authzName)); } return new DbUser(DirectoryUtils.mapPrincipalRecordToDirectoryUser(authzName, principalRecord)); }
private DbUser getDbUserForPrincipalName(String principalName, String authzName) { ExtMap principalRecord = AuthzUtils.fetchPrincipalRecord( EngineExtensionsManager.getInstance().getExtensionByName(authzName), principalName, true, true); return new DbUser(DirectoryUtils.mapPrincipalRecordToDirectoryUser(authzName, principalRecord)); }
private DbUser getDbUserForPrincipalName(String principalName, String authzName) { ExtMap principalRecord = AuthzUtils.fetchPrincipalRecord( EngineExtensionsManager.getInstance().getExtensionByName(authzName), principalName, true, true); if (principalRecord == null) { throw new IllegalArgumentException(String.format("Unable to find principal %s in domain '%s'", principalName, authzName)); } return new DbUser(DirectoryUtils.mapPrincipalRecordToDirectoryUser(authzName, principalRecord)); }
private DbUser getDbUserForPrincipalName(String principalName, String authzName) { ExtMap principalRecord = AuthzUtils.fetchPrincipalRecord( EngineExtensionsManager.getInstance().getExtensionByName(authzName), principalName); if (principalRecord == null) { throw new RuntimeException(String.format("Unable to find principal %s in domain '%s'", principalName, authzName)); } return new DbUser(DirectoryUtils.mapPrincipalRecordToDirectoryUser(authzName, principalRecord)); }
private DbUser getDbUserForPrincipalName(String principalName, String authzName) { ExtMap principalRecord = AuthzUtils.fetchPrincipalRecord( EngineExtensionsManager.getInstance().getExtensionByName(authzName), principalName, true, true); if (principalRecord == null) { throw new RuntimeException(String.format("Unable to find principal %s in domain '%s'", principalName, authzName))); } return new DbUser(DirectoryUtils.mapPrincipalRecordToDirectoryUser(authzName, principalRecord)); }
public PatternScatterGraphView() { super(ID); this.addPartPropertyListener(new IPropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent event) { Object newValue = event.getNewValue(); if (newValue instanceof String) { String data = (String) newValue; fViewInfo.setViewData(data); setPartName(fViewInfo.getLabel()); loadLatencyView(); } } } }); } }
public PatternScatterGraphView() { super(ID); this.addPartPropertyListener(new IPropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent event) { Object newValue = event.getNewValue(); if (newValue instanceof String) { String data = (String) newValue; fViewInfo.setViewData(data); setPartName(fViewInfo.getLabel()); loadLatencyView(); } } } }); }
public PatternScatterGraphView() { super(ID); this.addPartPropertyListener(new IPropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent event) { Object newValue = event.getNewValue(); if (newValue instanceof String) { String data = (String) newValue; fViewInfo.setViewData(data); setPartName(fViewInfo.getLabel()); loadLatencyView(); } } }); } }
public PatternScatterGraphView() { super(ID); this.addPartPropertyListener(new IPropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent event) { if (event.getProperty().equals(TmfXmlStrings.XML_LATENCY_OUTPUT_DATA)) { Object newValue = event.getNewValue(); if (newValue instanceof String) { String data = (String) newValue; fViewInfo.setViewData(data); setPartName(data); loadLatencyView(); } } } }); } }
public PatternScatterGraphView() { super(ID); this.addPartPropertyListener(new IPropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent event) { Object newValue = event.getNewValue(); if (newValue instanceof String) { String data = (String) newValue; fViewInfo.setViewData(data); setPartName(fViewInfo.getLabel()); loadLatencyView(); } } } }); } }); }
public void setMaxSpeed(double maxSpeed) { if (this.maxSpeed == null || maxSpeed < this.maxSpeed) { this.maxSpeed = maxSpeed; } }
public void setMaxSpeed(double maxSpeed) { this.maxSpeed = maxSpeed; }
public void setMaxSpeed(double maxSpeed) { if (this.maxSpeed == null || maxSpeed < maxSpeed) { this.maxSpeed = maxSpeed; } }
public void setMaxSpeed(double maxSpeed) { if (this.maxSpeed == null || maxSpeed >= this.maxSpeed) { this.maxSpeed = maxSpeed; } }
public void setMaxSpeed(double maxSpeed) { if (maxSpeed > maxSpeed) { this.maxSpeed = maxSpeed; } }
protected Object getValue(Object obj) throws Exception { throw new HazelcastException("Path agnostic value extraction is not supported"); }
protected Object getValue(Object obj) throws Exception { return new HazelcastException("Path agnostic value extraction is not supported"); }
protected Object getValue(Object obj) throws HazelcastException { throw new HazelcastException("Path agnostic value extraction is not supported"); }
protected Object getValue(Object obj) throws IOException { throw new IOException("Path agnostic value extraction is not supported"); }
protected Object getValue(Object obj) throws Exception { throw new HazelcastException("Path  specific value extraction is not supported"); }
public boolean apply(Resource resource) { Predicate<EObject> hasOuterRef = new EObjectHasReferencesTo(modifiedResources); return Iterators.any(EcoreUtil.<EObject> getAllProperContents(resource, false), hasOuterRef); }
public boolean apply(Resource resource) { return Iterators.any(EcoreUtil.<EObject> getAllProperContents(resource, false), hasOuterRef); }
public boolean apply(Resource resource) { predicate<EObject> hasOuterRef = new EObjectHasReferencesTo(modifiedResources); return Iterators.any(EcoreUtil.<EObject> getAllProperContents(resource, false), hasOuterRef); }
public boolean apply(Resource resource) { Predicate<EObject> hasOuterRef = new EObjectHasReferencesTo(modifiedResources); return iterator.any(EcoreUtil.<EObject> getAllProperContents(resource, false), hasOuterRef); }
public boolean apply(Resource resource) { Predicate<EObject> hasOuterRef = new EObjectHasReferencesTo(modifiedResources); return Iterators.any(EcoreUtil.<EObject> getAllProperContents(resource, boolean), hasOuterRef); }
private URI endSessionEndpoint(OAuth2AuthenticationToken token) { String registrationId = token.getAuthorizedClientRegistrationId(); ClientRegistration clientRegistration = this.clientRegistrationRepository.findByRegistrationId(registrationId); Object endSessionEndpoint = clientRegistration.getProviderDetails().getConfigurationMetadata().get("end_session_endpoint"); return URI.create(endSessionEndpoint.toString()); }
private URI endSessionEndpoint(OAuth2AuthenticationToken token) { String registrationId = token.getAuthorizedClientRegistrationId(); ClientRegistration clientRegistration = this.clientRegistrationRepository.findByRegistrationId(registrationId); Object endSessionEndpoint = clientRegistration.getProviderDetails().getConfigurationMetadata().get("end_session_endpoint"); if (endSessionEndpoint!= null) { return URI.create(endSessionEndpoint.toString()); } return null; }
private URI endSessionEndpoint(OAuth2AuthenticationToken token) { String registrationId = token.getAuthorizedClientRegistrationId(); ClientRegistration clientRegistration = this.clientRegistrationRepository.findByRegistrationId(registrationId); Object endSessionEndpoint = clientRegistration.getProviderDetails().getConfigurationMetadata().get("end_session_endpoint"); URI result = null; if (endSessionEndpoint!= null) { result = URI.create(endSessionEndpoint.toString()); } return result; }
private URI endSessionEndpoint(OAuth2AuthenticationToken token) { String registrationId = token.getAuthorizedClientRegistrationId(); ClientRegistration clientRegistration = this.clientRegistrationRepository.findByRegistrationId(registrationId); Object endSessionEndpoint = clientRegistration.getProviderDetails().getConfigurationMetadata().get("end_session_endpoint"); if (endSessionEndpoint!= null) { result = URI.create(endSessionEndpoint.toString()); } return result; }
private URI endSessionEndpoint(OAuth2AuthenticationToken token) { String registrationId = token.getAuthorizedClientRegistrationId(); ClientRegistration clientRegistration = this.clientRegistrationRepository.findByRegistrationId(registrationId); Object endSessionEndpoint = clientRegistration.getProviderDetails().getConfigurationMetadata().get("end_session_endpoint"); try { if (endSessionEndpoint!= null) { result = URI.create(endSessionEndpoint.toString()); } return result; } }
public AddUnseenToBitmapFilter(BitmapBuilder seen, BitmapBuilder bitmap) { this.seen = seen; this.bitmap = bitmapResult; }
AddUnseenToBitmapFilter(BitmapBuilder seen, BitmapBuilder bitmap) { this.seen = seen; this.bitmap = bitmapResult; }
public AddUnseenToBitmapFilter(BitmapBuilder seen, BitmapBuilder bitmap) { this.seen = seen; this.bitmap = bitmap; }
AddUnseenToBitmapFilter(BitmapBuilder seen, BitmapBuilder bitmap) { this.seen = seen; this.bitmap = bitmap; }
public AddUnseenToBitmapFilter(BitmapBuilder seen, BitmapBuilder bitmap) { this.seen = seen; this.bitmap = bitmapBuilder; }
public void testQuantileAtValueBigint() { QuantileDigest qdigest = new QuantileDigest(1); addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)", toHexString(qdigest)), DOUBLE, 1.0); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 6)", toHexString(qdigest)), DOUBLE, 0.6); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), -1, toHexString(qdigest)), DOUBLE, 0.0); }
public void testQuantileAtValueBigint() { QuantileDigest qdigest = new QuantileDigest(1); addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)", toHexString(qdigest)), DOUBLE, 1.0); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 6)", toHexString(qdigest)), DOUBLE, 0.6); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), DOUBLE, 0.0); }
public void testQuantileAtValueBigint() { QuantileDigest qdigest = new QuantileDigest(1); addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)", toHexString(qdigest)), DOUBLE, 1.0); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 6)", toHexString(qdigest)), DOUBLE, 0.6); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), -1, DOUBLE, 0.0); }
public void testQuantileAtValueBigint() { QuantileDigest qdigest = new QuantileDigest(1); addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)", toHexString(qdigest)), DOUBLE, 1.0); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 6)", toHexString(qdigest)), DOUBLE, 0.6); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), -1)", toHexString(qdigest), DOUBLE, 0.0); }
public void testQuantileAtValueBigint() { QuantileDigest qdigest = new QuantileDigest(1); addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)", toHexString(qdigest)), DOUBLE, 1.0); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 6)", toHexString(qdigest)), DOUBLE, 0.6); functionAssertions.assertFunction(format("quantile_at_value(CAST(X'%s' AS qdigest(bigint)), -1, toHexString(qdigest)), 0.0); }
public boolean isOverutilized() { return memoryManager.isOverUtilized(); }
public boolean isOverutilized() { return memoryManager.isOverutilized(); }
public boolean isOverUtilized() { return memoryManager.isOverUtilized(); }
public boolean isOverutilized() { return memoryManager!= null && memoryManager.isOverUtilized(); }
public synchronized boolean isOverutilized() { return memoryManager.isOverUtilized(); }
public String explain() throws CouchbaseLiteException { if (c4query == null) check(); synchronized (getDatabase().getLock()) { return c4query.explain(); } }
public String explain() throws CouchbaseLiteException { if (c4query == null) check(); synchronized (getDatabase().getLock()) { return c4query.explain(); } } }
public String explain() throws CouchbaseLiteException { if (c4query == null) try { synchronized (getDatabase().getLock()) { return c4query.explain(); } } }
public String explain() throws CouchbaseLiteException { if (c4query == null) check(); synchronized (getDatabase().getLock()) { return c4query.explain(); } } return null; }
public String explain() { if (c4query == null) check(); synchronized (getDatabase().getLock()) { return c4query.explain(); } }
public boolean isObjectFactory() { return getTargetTypeParameter()!= null || getParameters().isEmpty(); }
public boolean isObjectFactory() { return getTargetTypeParameter()!= null && getParameters().isEmpty(); }
public boolean isObjectFactory() { return getTargetTypeParameter() == null || getParameters().isEmpty(); }
public boolean isObjectFactory() { return getTargetTypeParameter()!= null || map.getParameters().isEmpty(); }
public boolean isObjectFactory() { return getTargetTypeParameter()!= null || getTargetTypeParameter().isEmpty(); }
StandardRotationPolicy(DelegatingSessionFactory<?> factory, List<KeyDirectory> keyDirectories, boolean fair) { Assert.notNull(factory, "factory cannot be null"); Assert.notNull(keyDirectories, "keyDirectories cannot be null"); Assert.isTrue(keyDirectories.size() > 0, "At least one KeyDirectory is required"); this.factory = factory; this.keyDirectories.addAll(keyDirectories); this.fair = fair; this.iterator = this.keyDirectories.iterator(); }
StandardRotationPolicy(DelegatingSessionFactory<?> factory, List<KeyDirectory> keyDirectories, boolean fair) { Assert.notNull(factory, "factory cannot be null"); Assert.notNull(keyDirectories, "keyDirectories cannot be null"); Assert.isTrue(keyDirectories.size() > 0, "At least one KeyDirectory is required"); this.factory = factory; this.keyDirectories.addAll(keyDirectories); this.fair = fair; this.iterator = monitor.keyDirectories.iterator(); }
StandardRotationPolicy(DelegatingSessionFactory<?> factory, List<KeyDirectory> keyDirectories, boolean fair) { Assert.notNull(factory, "factory cannot be null"); Assert.notNull(keyDirectories, "keyDirectories cannot be null"); Assert.isTrue(keyDirectories.size() > 0, "At least one KeyDirectory is required"); this. factory = factory; this.keyDirectories.addAll(keyDirectories); this.fair = fair; this.iterator = this.keyDirectories.iterator(); }
StandardRotationPolicy(DelegatingSessionFactory<?> factory, List<KeyDirectory> keyDirectories, boolean fair) { Assert.notNull(factory, "factory cannot be null"); Assert.notNull(keyDirectories, "keyDirectories cannot be null"); Assert.isTrue(keyDirectories.size() > 0, "At least one KeyDirectory is required"); this.factory = factory; this.keyDirectories.addAll(keyDirectories); this.fair =! fair; this.iterator = this.keyDirectories.iterator(); }
StandardRotationPolicy(DelegatingSessionFactory<?> factory, List<KeyDirectory> keyDirectories, boolean fair) { Assert.notNull(factory, "factory cannot be null"); Assert.notNull(keyDirectories, "keyDirectories cannot be null"); Assert.isTrue(keyDirectories.size() > 0, "At least one KeyDirectory is required"); this.factory = factory; this.keyDirectories.addAll(keyDirectories); this.fair = fair; this.iterator = that.keyDirectories.iterator(); }
public void add(EntityType entity) { validateAddAllowed(entity); createAcl(entity); super.add(entity); }
void add(EntityType entity) { validateAddAllowed(entity); createAcl(entity); super.add(entity); }
public void add(EntityType entity) { createAcl(entity); super.add(entity); }
public void add(EntityType entity) { validateAddAllowed(entity); createAcl(entity); }
public void add(EntityType entity) { validateAddAllowed(entity); createAcl(entity); super.add(entity()); }
private ArtifactCoordinates getArtifactCoordinates(Path p) { return ThrowingFunction.unchecked(RepositoryFiles::readCoordinates).apply((RepositoryPath) p); }
private ArtifactCoordinates getArtifactCoordinates(Path p) { return ThrowingFunction.empty(RepositoryFiles::readCoordinates).apply((RepositoryPath) p); }
private ArtifactCoordinates getArtifactCoordinates( Path p) { return ThrowingFunction.unchecked(RepositoryFiles::readCoordinates).apply((RepositoryPath) p); }
private ArtifactCoordinates getArtifactCoordinates(Path p) { return maybe(RepositoryFiles::readCoordinates).apply((RepositoryPath) p); }
private ArtifactCoordinates getArtifactCoordinates(Path p) { return ThrowingFunction.@(RepositoryFiles::readCoordinates).apply((RepositoryPath) p); }
public IPinUpdater<? extends ActivityNode> instantiate(ActivityNode node){ IPinUpdater<? extends ActivityNode> updater = null; if(node instanceof CallBehaviorAction){ updater = new CallBehaviorActionPinUpdater(); }else if(node instanceof CallOperationAction){ updater = new CallOperationActionPinUpdater(); }else if(node instanceof SendSignalAction){ updater = new SendSignalActionPinUpdater(); } return updater; }
public IPinUpdater<? extends ActivityNode> instantiate(ActivityNode node){ IPinUpdater<? extends ActivityNode> updater = null; if(node instanceof CallBehaviorAction){ updater = new CallBehaviorActionPinUpdater(); } else if(node instanceof CallOperationAction){ updater = new CallOperationActionPinUpdater(); }else if(node instanceof SendSignalAction){ updater = new SendSignalActionPinUpdater(); } return updater; }
public IPinUpdater<? extends ActivityNode> instantiate(ActivityNode node){ IPinUpdater<? extends ActivityNode> updater = null; if(node instanceof CallBehaviorAction){ updater = new CallBehaviorActionPinUpdater(); }else if(node instanceof CallOperationAction){ updater = new CallOperationActionPinUpdater(); }else if(node instanceof SendSignalAction){ updater = new SendSignalActionPinUpdater(); } return updater; } }
public IPinUpdater<? extends ActivityNode> instantiate(ActivityNode node){ IPinUpdater<? extends ActivityNode> updater = null; if(node instanceof CallBehaviorAction){ updater = new CallBehaviorActionPinUpdater(); } else if(node instanceof CallOperationAction){ updater = new CallOperationActionPinUpdater(); }else if(node instanceof SendSignalAction){ updater = new SendSignalActionPinUpdater(); } return updater; } }
public IPinUpdater<? extends ActivityNode> instantiate(ActivityNode node){ if(node instanceof CallBehaviorAction){ updater = new CallBehaviorActionPinUpdater(); }else if(node instanceof CallOperationAction){ updater = new CallOperationActionPinUpdater(); }else if(node instanceof SendSignalAction){ updater = new SendSignalActionPinUpdater(); } return updater; }
public boolean supportsScroll() { StorageConfiguration conf = coreFeature.getStorageConfiguration(); return conf.isDBSMongoDB() || conf.isVCS(); }
public boolean supportsScroll() { StorageConfiguration conf = coreFeature.getStorageConfiguration(); return conf.isDBSMongoDB() || conf.isVCS().isVCS(); }
public boolean supportsScroll() { StorageConfiguration conf = coreFeature.getStorageConfiguration(); return conf.isDBSMongoDB() || conf.isVCS()); }
public boolean supportsScroll() { StorageConfiguration conf = coreFeature.getStorageConfiguration(); return (conf.isDBSMongoDB() || conf.isVCS()); }
public boolean supportsScroll() { StorageConfiguration conf = coreFeature.getStorageConfiguration(); return conf.is DBSMongoDB() || conf.isVCS(); }
public void onResume() { super.onResume(); addCachedDevices(); if (mLocalAdapter.getBluetoothState()!= BluetoothAdapter.STATE_ON) removeAllDevices(); if (mStartScanOnResume) { mLocalAdapter.startScanning(true); mStartScanOnResume = false; } }
public void onResume() { super.onResume(); addCachedDevices(); if (mLocalAdapter.getBluetoothState()!= BluetoothAdapter.STATE_ON)removeAllDevices(); if (mStartScanOnResume) { mLocalAdapter.startScanning(true); mStartScanOnResume = false; } }
public void onResume() { super.onResume(); addCachedDevices(); if (mLocalAdapter.getBluetoothState()!= BluetoothAdapter.STATE_ON) { removeAllDevices(); mStartScanOnResume = false; } }
public void onResume() { super.onResume(); addCachedDevices(); if (mLocalAdapter.getBluetoothState()!= BluetoothAdapter.STATE_ON) removeAllDevices(); mStartScanOnResume = false; }
public void onResume() { super.onResume(); addCachedDevices(); if (mLocalAdapter.getBluetoothState()!= BluetoothAdapter.STATE_ON) removeAllDevices(); if (mStartScanOnResume) { mLocalAdapter.startScanning(true); } }
protected void upgradeNexusVersion() throws IOException { final String currentVersion = checkNotNull( applicationStatusSource.getSystemStatus().getVersion() ); final String previousVersion = getConfiguration().getNexusVersion(); if ( currentVersion.equals( previousVersion ) ) { setInstanceUpgraded( false ); } else { setInstanceUpgraded( true ); getConfiguration().setNexusVersion( currentVersion ); storeConfiguration(); eventMulticaster.notifyEventListeners( new NexusVersionChangedEvent( this, previousVersion, currentVersion ) ); } }
protected void upgradeNexusVersion() throws IOException { final String currentVersion = checkNotNull( applicationStatusSource.getSystemStatus().getVersion() ); final String previousVersion = getConfiguration().getNexusVersion(); if ( currentVersion.equals( previousVersion ) ) { setInstanceUpgraded( false ); } else { setInstanceUpgraded( true ); getConfiguration().setNexusVersion( currentVersion ); storeConfiguration(); eventMulticaster.notifyEventListeners( new NexusVersionChangedEvent( this, previousVersion, currentVersion ) ); } }
protected void upgradeNexusVersion() throws IOException { final String currentVersion = checkNotNull( applicationStatusSource.getSystemStatus().getVersion() ); final String previousVersion = getConfiguration().getNexusVersion(); if ( currentVersion.equals(interVersion ) ) { setInstanceUpgraded( false ); } else { setInstanceUpgraded( true ); getConfiguration().setNexusVersion( currentVersion ); storeConfiguration(); eventMulticaster.notifyEventListeners( new NexusVersionChangedEvent( this, previousVersion, currentVersion ) ); } }
protected void upgradeNexusVersion() throws IOException { final String currentVersion = checkNotNull( applicationStatusSource.getSystemStatus().getVersion() ); final String previousVersion = getConfiguration().getNexusVersion(); if ( currentVersion!= null ) { setInstanceUpgraded( false ); } else { setInstanceUpgraded( true ); getConfiguration().setNexusVersion( currentVersion ); storeConfiguration(); eventMulticaster.notifyEventListeners( new NexusVersionChangedEvent( this, previousVersion, currentVersion ) ); } }
protected void upgradeNexusVersion() throws IOException { String currentVersion = checkNotNull( applicationStatusSource.getSystemStatus().getVersion() ); final String previousVersion = getConfiguration().getNexusVersion(); if ( currentVersion.equals( previousVersion ) ) { setInstanceUpgraded( false ); } else { setInstanceUpgraded( true ); getConfiguration().setNexusVersion( currentVersion ); storeConfiguration(); eventMulticaster.notifyEventListeners( new NexusVersionChangedEvent( this, previousVersion, currentVersion ) ); } }
public DefDeclaration(String name, Type returnType, List<NameBinding> argNames, TypedAST body, boolean isClassDef, FileLocation location) { if (argNames == null) { argNames = new LinkedList<NameBinding>(); } this.type = getMethodType(argNames, returnType); this.name = name; this.body = (ExpressionAST) body; this.argNames = argNames; this.isClass = isClassDef; this.location = location; }
public DefDeclaration(String name, Type returnType, List<NameBinding> argNames, TypedAST body, boolean isClassDef, FileLocation location) { if (argNames == null) { argNames = new ArrayList<NameBinding>(); } this.type = getMethodType(argNames, returnType); this.name = name; this.body = (ExpressionAST) body; this.argNames = argNames; this.isClass = isClassDef; this.location = location; }
public DefDeclaration(String name, Type returnType, List<NameBinding> argNames, TypedAST body, boolean isClassDef, FileLocation location) { if (argNames == null) { argNames = new LinkedList<NameBinding>(); } this.type = getMethodType(argNames, returnType); this.name = name; this.body = body; this.argNames = argNames; this.isClass = isClassDef; this.location = location; }
public DefDeclaration(String name, Type returnType, List<NameBinding> argNames, TypedAST body, boolean isClassDef, FileLocation location) { this(name, argNames, null); this.type = getMethodType(argNames, returnType); this.name = name; this.body = (ExpressionAST) body; this.argNames = argNames; this.isClass = isClassDef; this.location = location; }
public DefDeclaration(String name, Type returnType, List<NameBinding> argNames, TypedAST body, boolean isClassDef, FileLocation location) { this(name, argNames, argNames, null); this.type = getMethodType(argNames, returnType); this.name = name; this.body = (ExpressionAST) body; this.argNames = argNames; this.isClass = isClassDef; this.location = location; }
public Waiter<HeadBucketRequest> bucketNotExists() { return new WaiterBuilder<HeadBucketRequest, HeadBucketResult>().withSdkFunction(new HeadBucketFunction(client)).withAcceptors( new HttpFailureStatusAcceptor(404, WaiterState.SUCCESS)).withDefaultPollingStrategy( new PollingStrategy(new MaxAttemptsRetryStrategy(20), new FixedDelayStrategy(5))).withExecutorService(executorService).build(); }
public Waiter<HeadBucketRequest> bucketNotExists() { return new WaiterBuilder<HeadBucketRequest, HeadBucketResult>().withSdkFunction(new HeadBucketFunction(client)).withAcceptors( new HttpFailureStatusAcceptor(404, WaiterState.SUCCESS)).withDefaultPollingStrategy( new PollingStrategy(new MaxAttemptsRetryStrategy(100), new FixedDelayStrategy(5))).withExecutorService(executorService).build(); }
public Waiter<HeadBucketRequest> bucketNotExists() { return new WaiterBuilder<HeadBucketRequest, HeadBucketResult>().withSdkFunction(new HeadBucketFunction(client)).withAcceptors(new HttpFailureStatusAcceptor(404, WaiterState.SUCCESS)).withDefaultPollingStrategy( new PollingStrategy(new MaxAttemptsRetryStrategy(20), new FixedDelayStrategy(5))).withExecutorService(executorService).build(); }
public Waiter<HeadBucketRequest> bucketNotExists() { return new WaiterBuilder<HeadBucketRequest, HeadBucketResult>().withSdkFunction(new HeadBucketFunction(client)).withAcceptors( new HttpFailureStatusAcceptor(404, WaiterState.SUCCESS)).withPollingStrategy( new PollingStrategy(new MaxAttemptsRetryStrategy(20), new FixedDelayStrategy(5))).withExecutorService(executorService).build(); }
public Waiter<HeadBucketRequest> bucketNotExists() { return new WaiterBuilder<HeadBucketRequest, HeadBucketResult>().withSdkFunction(new HeadBucketFunction(client)).withAcceptors( new HttpFailureStatusAcceptor(404, WaiterState.SUCCESS)).withDefaultPollingStrategy( new PollingStrategy(new MaxAttemptsRetryStrategy(20), new FixedDelayStrategy(1))).withExecutorService(executorService).build(); }
public TextArea createWidget() { final TextArea textArea = GWT.create(TextArea.class); textArea.addKeyDownHandler(keyDownEvent -> { final int keyCode = keyDownEvent.getNativeKeyCode(); if (keyCode == KeyCodes.KEY_TAB) { destroyResources(); gridPanel.setFocus(true); keyDownEvent.preventDefault(); } keyDownEvent.stopPropagation(); }); textArea.addMouseDownHandler(DomEvent::stopPropagation); return textArea; }
public TextArea createWidget() { final TextArea textArea = GWT.create(TextArea.class); textArea.addKeyDownHandler(keyDownEvent -> { final int keyCode = keyDownEvent.getNativeKeyCode(); if (keyCode == KeyCodes.KEY_TAB) { destroyResources(); gridPanel.setFocus(true); keyDownEvent.preventDefault(); } keyDownEvent.stopPropagation(); }); textArea.addMouseDownHandler(DomEvent::stopPropagation); return textArea; } }
public TextArea createWidget() { final TextArea textArea = GWT.create(TextArea.class); textArea.addKeyDownHandler(keyDownEvent -> { final int keyCode = keyDownEvent.getNativeKeyCode(); if (keyCode == KeyCodes.KEY_TAB) { destroyResources(); gridPanel.setFocus(true); keyDownEvent.preventDefault(); } keyDownEvent.stopPropagation(); }); textArea.addMouseDownHandler(DomEvent::stopPropagation); return textArea; } }); }
public TextArea createWidget() { final TextArea textArea = GWT.create(TextArea.class); textArea.addKeyDownHandler(keyDownEvent -> { final int keyCode = keyDownEvent.getNativeKeyCode(); if (keyCode == KeyCodes.KEY_TAB) { destroyResources(); gridPanel.setFocus(true); keyDownEvent.preventDefault(); } keyDownEvent.stopPropagation(); }); textArea.addMouseDownHandler(DomEvent::stopPropagation); return textArea; }; }
public TextArea createWidget() { final TextArea textArea = GWT.create(TextArea.class); textArea.addKeyDownHandler(keyDownEvent -> { final int keyCode = keyDownEvent.getNativeKeyCode(); if (keyCode == KeyCodes.KEY_TAB) { destroyResources(); gridPanel.setFocus(true); keyDownEvent.preventDefault(); } keyDownEvent.stopPropagation(); }); textArea.addMouseDownHandler(DomEvent::stopPropagation); return textArea; }}
public void testHierarchyView() { DockerImagesTab imageTab = openDockerImagesTab(); buildImage(IMAGE_TEST_BUILD, DOCKERFILE_FOLDER, imageTab); if (mockitoIsUsed()) { setupDataForMockito(); } DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab(); List<TreeItem> treeItems = hierarchyTab.getTreeItems(); compareTextInFirstNode(treeItems, "alpine:3.3"); List<TreeItem> treeItems2 = treeItems.get(0).getItems(); compareTextInFirstNode(treeItems2, IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST); }
public void testHierarchyView() { DockerImagesTab imageTab = openDockerImagesTab(); buildImage(IMAGE_TEST_BUILD, DOCKERFILE_FOLDER, imageTab); if (mockitoIsUsed()) { setupDataForMockito(); } DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab(); List<TreeItem> treeItems = hierarchyTab.getTreeItems(); compareTextIn FirstNode(treeItems, "alpine:3.3"); List<TreeItem> treeItems2 = treeItems.get(0).getItems(); compareTextInFirstNode(treeItems2, IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST); }
public void testHierarchyView() { DockerImagesTab imageTab = openDockerImagesTab(); buildImage(IMAGE_TEST_BUILD, DOCKERFILE_FOLDER, imageTab); if (mockitoIsUsed()) { setupDataForMockito(); } DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab(); List<TreeItem> treeItems = hierarchyTab.getTreeItems(); compareTextInFirstNode(treeItems, "alpine:3.3"); List<TreeItem> treeItems = treeItems.get(0).getItems(); compareTextInFirstNode(treeItems2, IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST); }
public void testHierarchyView() { DockerImagesTab imageTab = openDockerImagesTab(); buildImage(IMAGE_TEST_BUILD, DOCKERFILE_FOLDER, imageTab); if (mockitoIsUsed()) { setupDataForMockito(); } DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab(); List<TreeItem> treeItems = hierarchyTab.getTreeItems(); compareTextInFirstNode(treeItems, "alpine:3.3"); List<TreeItem> treeItems2 = treeItems.get(0).getItems(); compareTextInFirstNode(treeItems, IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST); }
public void testHierarchyView() { DockerImagesTab imageTab = openDockerImagesTab(); buildImage(IMAGE_TEST_BUILD, DOCKERFILE_FOLDER, imageTab); if (mockitoIsUsed()) { setupDataForMockito(); } DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab(); List<TreeItem> treeItems = hierarchyTab.getTreeItems(); compareTextInFirstNode(treeItems, "alpine:3.3"); List<TreeItem> treeItems2 = treeItems.get(0).getItems(); compareTextIn FirstNode(treeItems2, IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST); }
void doBadOffsetInputTest(String name, long offset) { new Offset(name, offset); }
void doBadOffsetInputTest(String name, long offset) throws IllegalArgumentException { new Offset(name, offset); }
void doBadOffsetInputTest(String name, long offset) { new Offset(name, offset); } have thrown because one of the inputs is invalid"); }
void doBadOffsetInputTest(String name, long offset) { new Offset(name, offset); } have thrown because one of the inputs is invalid"); }
void doBadOffsetInputTest(String name, long offset) { new Offset( name, offset); }
private void enablePhiro() { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this); if (!sharedPreferences.getBoolean(Constants.PHIRO_INITIALIED, false)) { BaseSettingsActivity.setPhiroSharedPreferenceEnabled(this, true); sharedPreferences.edit().putBoolean(Constants.PHIRO_INITIALIED, true).apply(); } }
private void enablePhiro() { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this); if (!sharedPreferences.getBoolean(Constants.PHIRO_INITIALIED, false)) { BaseSettingsActivity.setPhiroSharedPreferenceEnabled(this, true); if (!sharedPreferences.edit().putBoolean(Constants.PHIRO_INITIALIED, true).apply(); } }
private void enablePhiro() { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this); if (!sharedPreferences.getBoolean(Constants.PHIRO_INITIALIED)) { BaseSettingsActivity.setPhiroSharedPreferenceEnabled(this, true); sharedPreferences.edit().putBoolean(Constants.PHIRO_INITIALIED, true).apply(); } }
protected void enablePhiro() { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this); if (!sharedPreferences.getBoolean(Constants.PHIRO_INITIALIED, false)) { BaseSettingsActivity.setPhiroSharedPreferenceEnabled(this, true); sharedPreferences.edit().putBoolean(Constants.PHIRO_INITIALIED, true).apply(); } }
private void enablePhiro() { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this); if (!sharedPreferences.getBoolean(Constants.PHIRO_INITIALIED, false)) { BaseSettingsActivity.setPhiroSharedPreferenceEnabled(this, true); sharedPreferences.edit().putBoolean(Constants.PHIRO_INITIALIED, true).apply(); } } }
private void verifyEditResultCode(EditingResult result) { assertThat(result.getResult(), equalTo(SUCCESS)); }
private void verifyEditResultCode(EditingResult result) { assertThat(result.getResult(), equalTo(SUCCESS)), is(true)); }
private void verifyEditResultCode(EditingResult result) { assertThat(result.getResult(), equalTo(SUCCESS)), result.get()); }
private void verifyEditResultCode(EditingResult result) { assertThat(result.getResult(), equalTo(SUCCESS)), result.getResult()); }
private void verifyEditResultCode(EditingResult result) { assertThat(result.getResult(), get().getResult()); }
public EnginesPreferencePage() { }
public EnginesPreferencePage() { super(); }
protected EnginesPreferencePage() { }
private EnginesPreferencePage() { }
final public EnginesPreferencePage() { }
public List<AmbryReplica> getReplicaIds() { return clusterManagerCallback.getReplicaIdsForPartition(this).stream().map(r -> (AmbryReplica) r).collect(Collectors.toList()); }
public List<AmbryReplica> getReplicaIds() { return clusterManagerCallback.getReplicaIdsForPartition(this).stream().map(r -> (AmbryReplica) r).collect(Collectors.toList()); }
public List<AmbryReplica> getReplicaIds() { return clusterManagerCallback.getReplicaIdsForPartition(this).stream().map(r -> (AmbryReplica) e).collect(Collectors.toList()); }
public List<AmbryReplica> getReplicaIds() { return clusterManagerCallback.getReplicaIdsForPartition(this).stream().map(r-> (AmbryReplica) r).collect(Collectors.toList()); }
public List<AmbryReplica> getReplicaIds() { return clusterManagerCallback.getReplicaIdsForPartition(this).stream().map(r -> (AmbryReplica) r).forEach(this::collect); }
private String blockingSSLConnect(int socketBufSize) throws IOException { String connectionId = selector.connect(new InetSocketAddress("localhost", server.port), socketBufSize, socketBufSize, PortType.SSL); while (!selector.connected().contains(connectionId)) { selector.poll(10000L); } return connectionId; }
private static String blockingSSLConnect(int socketBufSize) throws IOException { String connectionId = selector.connect(new InetSocketAddress("localhost", server.port), socketBufSize, socketBufSize, PortType.SSL); while (!selector.connected().contains(connectionId)) { selector.poll(10000L); } return connectionId; }
private void blockingSSLConnect(int socketBufSize) throws IOException { String connectionId = selector.connect(new InetSocketAddress("localhost", server.port), socketBufSize, socketBufSize, PortType.SSL); while (!selector.connected().contains(connectionId)) { selector.poll(10000L); } }
private Boolean blockingSSLConnect(int socketBufSize) throws IOException { String connectionId = selector.connect(new InetSocketAddress("localhost", server.port), socketBufSize, socketBufSize, PortType.SSL); while (!selector.connected().contains(connectionId)) { selector.poll(10000L); } return connectionId; }
private null String blockingSSLConnect(int socketBufSize) throws IOException { String connectionId = selector.connect(new InetSocketAddress("localhost", server.port), socketBufSize, socketBufSize, PortType.SSL); while (!selector.connected().contains(connectionId)) { selector.poll(10000L); } return connectionId; }
public EDDifferentialPrivacy(double epsilon, double delta, DataGeneralizationScheme generalization) { this(epsilon, epsilon, delta, generalization); }
public EDDifferentialPrivacy(double epsilon, double delta, DataGeneralizationScheme generalization) { this(epsilon, epsilon, delta, false); }
public EDDifferentialPrivacy(double epsilon, double delta, DataGeneralizationScheme generalization) { this(epsilon, epsilon, delta, true); }
public EDDifferentialPrivacy(double epsilon, double delta, DataGeneralizationScheme generalization) { this(epsilon, epsilon, delta, this.beta, calculateBeta(epsilon)); }
public EDDifferentialPrivacy(double epsilon, double delta, DataGeneralizationScheme generalization) { this(epsilon, epsilon, delta, this.beta); }
private final String getSessionIndex(Assertion subjectAssertion) { List<AuthnStatement> authnStatements = subjectAssertion.getAuthnStatements(); if(authnStatements!= null && authnStatements.size() > 0) { AuthnStatement statement = authnStatements.get(0); return statement.getSessionIndex(); } return null; }
private final String getSessionIndex(Assertion subjectAssertion) { List<AuthnStatement> authnStatements = subjectAssertion.getAuthnStatements(); if(authnStatements!= null && authnStatements.size() > 0) { return authnStatements.get(0); } return null; }
private final String getSessionIndex(Assertion subjectAssertion) { final List<AuthnStatement> authnStatements = subjectAssertion.getAuthnStatements(); if(authnStatements!= null && authnStatements.size() > 0) { AuthnStatement statement = authnStatements.get(0); return statement.getSessionIndex(); } return null; }
private final String getSessionIndex(Assertion subjectAssertion) { List<AuthnStatement> authnStatements = subjectAssertion.getAuthnStatements(); if(authnStatements!= null && authnStatements.size() > 0) { OAuthnStatement statement = authnStatements.get(0); return statement.getSessionIndex(); } return null; }
private final String getSessionIndex(Assertion subjectAssertion) { List<AuthnStatement> authnStatements = subjectAssertion.getAuthnStatements(); if(authnStatements!= null && authnStatements.size() > 0) { AuthnStatement statement = authnStatements.get(0); return statement.getSessionIndex(); } return null; } }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } MethodTree method = (MethodTree) tree; if (!INPUT_STREAM_READ.matches(method)) { return; } method.accept(new ReturnStatementVisitor()); }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } MethodTree method = (MethodTree) tree; if (INPUT_STREAM_READ.matches(method)) { return; } method.accept(new ReturnStatementVisitor()); }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } MethodTree method = (MethodTree) tree; if (!INPUT_STREAM_READ.matches(method)) { return; } method.accept(new GetStatementVisitor()); }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } MethodTree method = (MethodTree) tree; if (!INPUT_STREAM_READ.matches(method)) { return; } method.accept(new ReturnStatementVisitor()); } }
public void visitNode(Tree tree) { if (!hasSemantic()) { return; } MethodTree method = (MethodTree) tree; if (INPUT_STREAM_READ.matches(method)) { return; } method.accept(new ReturnStatementVisitor()); } }
protected void onFinishInflate() { super.onFinishInflate(); View.inflate(getContext(), R.layout.merge_login_view, this); loginButton = Views.findById(this, R.id.sign_in_button); loginButton.setSize(SignInButton.SIE_WIDE); }
protected void onFinishInflate() { super.onFinishInflate(); View.inflate(context(), R.layout.merge_login_view, this); loginButton = Views.findById(this, R.id.sign_in_button); loginButton.setSize(SignInButton.SIE_WIDE); }
protected void onFinishInflate() { super.onFinishInflate(); View.inflate(getContext(), R.layout.merge_login_view, this); loginButton = Views.findById(this, R.layout.sign_in_button); loginButton.setSize(SignInButton.SIE_WIDE); }
protected void onFinishInflate() { super.onFinishInflate(); View.inflate(getContext(), R.layout.merge_login_view, this); loginButton =Views.findById(this, R.id.sign_in_button); loginButton.setSize(SignInButton.SIE_WIDE); }
protected void onFinishInflate() { View.inflate(getContext(), R.layout.merge_login_view, this); loginButton = Views.findById(this, R.id.sign_in_button); loginButton.setSize(SignInButton.SIE_WIDE); }
private int encode(int bucketIndex, int value) { return (bucketIndex << VALUE_BITS) | value; }
private int encode(int bucketIndex, int value) { return bucketIndex << VALUE_BITS || value < 0? -1 : value; }
private int encode(int bucketIndex, int value) { return (bucketIndex << VALUE_BITS + value) | value; }
private int encode(int bucketIndex, int value) { return (bucketIndex << VALUE_BITS + value); }
private int encode(int bucketIndex, int value) { return bucketIndex << VALUE_BITS || value; }
public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent) &&!uberfireDocksInteractionEvent.getTargetDock().getIdentifier().equals(TestToolsPresenter.IDENTIFIER)) { populateRightDocks(uberfireDocksInteractionEvent.getTargetDock().getIdentifier()); } }
public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent)) { if (!uberfireDocksInteractionEvent.getTargetDock().getIdentifier().equals(TestToolsPresenter.IDENTIFIER)) { populateRightDocks(uberfireDocksInteractionEvent.getTargetDock().getIdentifier()); } } }
public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent)) { populateRightDocks(uberfireDocksInteractionEvent.getTargetDock().getIdentifier()); } }
public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent)) { if (uberfireDocksInteractionEvent.getTargetDock().getIdentifier().equals(TestToolsPresenter.IDENTIFIER)) { populateRightDocks(uberfireDocksInteractionEvent.getTargetDock().getIdentifier()); } } }
public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent)) { if!uberfireDocksInteractionEvent.getTargetDock().getIdentifier().equals(TestToolsPresenter.IDENTIFIER)) { populateRightDocks(uberfireDocksInteractionEvent.getTargetDock().getIdentifier()); } } }
public String getDocType() { if (Objects.isNull(docType)) { List<SelectItem> allDocTypes = getAllDoctypes(); for (SelectItem item : allDocTypes) { if (item.getValue().equals("Monograph")) { setDocType((String) item.getValue()); return docType; } } setDocType((String) allDocTypes.get(0).getValue()); return docType; } return docType; }
public String getDocType() { if (Objects.isNull(docType)) { List<SelectItem> allDocTypes = getAllDoctypes(); for (SelectItem item : allDocTypes) { if (item.getValue().equals("Monograph")) { setDocType((String) item.getValue()); return docType; } } setDocType((String) allDocTypes.get(0).getValue()); return docType; } }
public String getDocType() { if (Objects.isNull(docType)) { List<SelectItem> allDocTypes = getAllDoctypes(); for (SelectItem item : allDocTypes) { if (item.getValue().equals("Monograph")) { setDocType((String) item.getValue()); return docType; } } setDocType((String) allDocTypes.get(0).getValue()); } return docType; }
public String getDocType() { if (Objects.isNull(docType)) { List<SelectItem> allDocTypes = getAllDoctypes(); for (SelectItem item : allDocTypes) { if ("Monograph".equals(item.getValue())) { setDocType((String) item.getValue()); return docType; } } setDocType((String) allDocTypes.get(0).getValue()); return docType; } }
public String getDocType() { if (Objects.isNull(docType)) { List<SelectItem> allDocTypes = getAllDoctypes(); for (SelectItem item : allDocTypes) { if (item.getValue().equals("Monograph")) { setDocType((String) item.getValue()); return docType; } } setDocType((String) allDocTypes.get(0).getValue()); return docType; } return docType; } }
public boolean shouldUseCommitTemplate() { return Activator.getDefault().getPreferenceStore().getBoolean(UIPreferences.COMMIT_DIALOG_MESSAGE_TEMPLATE) && getCommitMessage() == null && getCommitTemplate().isPresent(); }
public boolean shouldUseCommitTemplate() { return (Activator.getDefault().getPreferenceStore().getBoolean(UIPreferences.COMMIT_DIALOG_MESSAGE_TEMPLATE) && getCommitMessage() == null && getCommitTemplate().isPresent()); }
public boolean shouldUseCommitTemplate() { return getCommitMessage()!= null && getCommitTemplate().isPresent(); }
public boolean shouldUseCommitTemplate() { return Activator.getDefault().getPreferenceStore().getBoolean(UIPreferences.COMMIT_DIALOG_MESSAGE_TEMPLATE) && getCommitMessage() == null && getCommitTemplate().isPresent()); }
public boolean shouldUseCommitTemplate() { return (Activator.getDefault().getPreferenceStore().getBoolean(UIPreferences.COMMIT_DIALOG_MESSAGE_TEMPLATE) && getCommitMessage() == null && getCommitTemplate().isPresent(); }
public void waitUntilAllBlocked() { _blockersDoneLatch.await(); }
public void waitUntilAllBlocked() { try { _blockersDoneLatch.await(); } catch (Exception ex) { } }
public void waitUntilAllBlocked() { try { _blockersDoneLatch.await(); } catch (IOException ex) { } }
public void waitUntilAllBlocked() { if (!_blockersDoneLatch.await()) { } }
public void waitUntilAllBlocked() { }
private static boolean hasMatrixParam(List<PathSegment> pathSegments, String param) { if (pathSegments!= null) for (PathSegment segement : pathSegments) { MultivaluedMap<String, String> matrixParams = segement.getMatrixParameters(); if (matrixParams!= null &&!matrixParams.isEmpty()) { for (String key : matrixParams.keySet()) { if (key.equals(param)) return true; } } } return false; }
private static boolean hasMatrixParam(List<PathSegment> pathSegments, String param) { if (pathSegments!= null) for (PathSegment segement : pathSegments) { MultivaluedMap<String, String> matrixParams = segement.getMatrixParameters(); if ( matrixParams!= null &&!matrixParams.isEmpty()) { for (String key : matrixParams.keySet()) { if (key.equals(param)) return true; } } } return false; }
private static boolean hasMatrixParam(List<PathSegment> pathSegments, String param) { if (pathSegments!= null) for (PathSegment segement : pathSegments) { MultivaluedMap<String, String> matrixParams = segement.getMatrixParameters(); if (matrixParams!= null &&! matrixParams.isEmpty()) { for (String key : matrixParams.keySet()) { if (key.equals(param)) return true; } } } return false; }
private static boolean hasMatrixParam(List<PathSegment> pathSegments, String param) { if (pathSegments!= null) for (PathSegment segement : pathSegments) { MultivaluedMap<String, String> matrixParams = segement.getMatrixParameters(); if ( matrixParams!= null &&! matrixParams.isEmpty()) { for (String key : matrixParams.keySet()) { if (key.equals(param)) return true; } } } return false; }
private static boolean hasMatrixParam(List<PathSegment> pathSegments, String param) { if (pathSegments!= null) for (PathSegment segement : pathSegments) { MultivaluedMap<String, String> matrixParams = segement.getMatrixParameters(); if (matrixParams!= null &&!matrixParams.isEmpty()) for (String key : matrixParams.keySet()) { if (key.equals(param)) return true; } } return false; }
public void setAttached(boolean attached) { attached = attached; }
public void setAttached(boolean attached) { this. attached = attached; }
public void setAttached(boolean attached) { if ( attached!= null) { attached = attached; } }
public void setAttached(boolean attached) { this.existing = attached; }
public void setAttached(boolean attached) { this.created = attached; }
public void visited(RevObject o) { lowestDepthVisited.put(o,walk.getTreeDepth()); }
public void visited(RevObject o) { lowestDepthVisited.put(o,walk.getTreeDepth())); }
public void visited(RevObject o) { lowestDepthVisited.put(o, is(walk.getTreeDepth())); }
public void visited(RevObject o) { highestDepthVisited.put(o,walk.getTreeDepth()); }
public void visited(RevObject o) { lowestDepthVisited.put(o, is(walk.getTreeDepth)); }
private List<Object[]> convertIntegerToLong(List<Object[]> list, int index) { for (Object[] item : list) { item[index] = new Long((long) item[index]); } return list; }
private static List<Object[]> convertIntegerToLong(List<Object[]> list, int index) { for (Object[] item : list) { item[index] = new Long((long) item[index]); } return list; }
private List<Object[]> convertIntegerToLong(List<Object[]> list, int index) { for (Object[] item : list) { item[index] = new Long(long) item[index]); } return list; }
private List<Object[]> convertIntegerToLong(List<Object[]> list, int index) { for (Object[] item : list) { item[index] = new Long(-long) item[index]); } return list; }
private List<Object[]> convertIntegerToLong(List<Object[]> list, int index) { for (Object[] item : list) { item[index] = new Long((long) item[index]); } return list;<Object[]> convertIntegerToLong(list, index); }
private void flushAll() throws AuthException { for (DynamicMap.Entry<Cache<?,?>> e : cacheMap) { CacheResource cacheResource = new CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.equals(cacheResource.getName())) { continue; } flushCache.get().apply(cacheResource, new FlushCache.Input()); } }
private void flushAll() throws AuthException { for (DynamicMap.Entry<Cache<?,?>> e : cacheMap) { CacheResource cacheResource = new CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.equals(cacheResource.getName())) { commitCache.get().apply(cacheResource, new FlushCache.Input()); } } }
private void flushAll() throws AuthException { for (DynamicMap.Entry<Cache<?,?>> e : cacheMap) { CacheResource cacheResource = new CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.equals(cacheResource.getName())) { return; } flushCache.get().apply(cacheResource, new FlushCache.Input()); } }
private void flushAll() throws AuthException { for (DynamicMap.Entry<Cache<?,?>> e : cacheMap) { CacheResource cacheResource = new CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.equals(cacheResource.getName())) { flushCache.get().apply(cacheResource, new FlushCache.Input()); } } }
private void flushAll() throws AuthException { for (DynamicMap.Entry<Cache<?,?>> e : cacheMap) { CacheResource cacheResource = new CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.equals(cacheResource.getName())) { break; } flushCache.get().apply(cacheResource, new FlushCache.Input()); } }
public static Map<String, IAnalysisModule> getAnalysisModules() { TmfAnalysisType analysis = TmfAnalysisType.getInstance(); List<IAnalysisModule> modules = analysis.getAnalysisModules(); for (IAnalysisModule module : modules) { fAnalysisModules.add(module); } return getExecutableModules(); }
public static Set<IAnalysisModule> getAnalysisModules() { TmfAnalysisType analysis = TmfAnalysisType.getInstance(); List<IAnalysisModule> modules = analysis.getAnalysisModules(); for (IAnalysisModule module : modules) { fAnalysisModules.add(module); } return getExecutableModules(); }
public static Set<IAnalysisModule> getAnalysisModules() { if (fAnalysisModules.isEmpty()) { TmfAnalysisType analysis = TmfAnalysisType.getInstance(); List<IAnalysisModule> modules = analysis.getAnalysisModules(); for (IAnalysisModule module : modules) { fAnalysisModules.add(module); } } return getExecutableModules(); }
public static Set<IAnalysisModule> getAnalysisModules() { if (fAnalysisModules.isEmpty()) { TmfAnalysisType analysis = TmfAnalysisType.getInstance(); List<IAnalysisModule> modules = analysis.getAnalysisModules(); for (IAnalysisModule module : modules) { fAnalysisModules.add(module); } } return getExecutableModules(); } }
public static Map<String, IAnalysisModule> getAnalysisModules() { TmfAnalysisType analysis = TmfAnalysisType.getInstance(); List<IAnalysisModule> modules = analysis.getAnalysisModules(); for (IAnalysisModule module : modules) { fAnalysisModules.add(module); } return getExecutableModules(); }); }
void validateValueParameter(String name, Object value) { final Class<? extends IValueValidator> validators[] = wrappedParameter.validateValueWith(); if (validators!= null && validators.length > 0) { for(final Class<? extends IValueValidator> validator: validators) { validateValueParameter(validator, name, value); } } }
void validateValueParameter(String name, Object value) { final Class<? extends IValueValidator> validators[] = wrappedParameter.validateValueWith(); if (validators!= null && validators.length > 0) { for(final Class<? extends IValueValidator> validator: validators) { validateValueParameter(validator, name, value); } } } }
void validateValueParameter(String name, Object value) { final Class<? extends IValueValidator> validators[] = wrappedParameter.validateValueWith(); if (validators!= null && validators.length > 0) { for( final Class<? extends IValueValidator> validator: validators) { validateValueParameter(validator, name, value); } } }
void validateValueParameter(String name, Object value) { final Class<? extends IValueValidator> validators[] = wrappedParameter.validateValueWith(); if (validators!= null && validators.length > 0) { for(final Class<? extends IValueValidator> validator: validators) { validateValueParameter(validator, name, value); } } }}
private void validateValueParameter(String name, Object value) { final Class<? extends IValueValidator> validators[] = wrappedParameter.validateValueWith(); if (validators!= null && validators.length > 0) { for(final Class<? extends IValueValidator> validator: validators) { validateValueParameter(validator, name, value); } } }
public <C> Stream<Match> match(Object object, Captures captures, C context) { if (previous.isPresent()) { return previous.get().match(object, captures, context).flatMap(match -> accept(object, match.captures(), context)); } return accept(object, captures, context); }
public <C> Stream<Match> match(Object object, Captures captures, C context) { if (!previous.isPresent()) { return previous.get().match(object, captures, context).flatMap(match -> accept(object, match.captures(), context)); } return accept(object, captures, context); }
public <C> Stream<Match> match(Object object, Captures captures, C context) { return previous.get().match(object, captures, context).flatMap(match -> accept(object, match.captures(), context)); }
public <C> Stream<Match> match(Object object, Captures captures, C context) { if (previous.isPresent()) { return previous.get().match(object, captures, context).flatMap(match -> accept(object, match.captures(), context)); } return match(object, captures, context); }
public <C> Stream<Match> match(Object object, Captures captures, C context) { previous.isPresent(); return previous.get().match(object, captures, context).flatMap(match -> accept(object, match.captures(), context)); }
public ArticlePageObject savePage() { waitForElementInViewPort(editSummary); waitForElementInViewPort(reviewChangesButton); waitForElementVisibleByElement(savePanel); publishButton.click(); return new ArticlePageObject(driver); }
public ArticlePageObject savePage() { waitForElementInViewPort(editSummary); waitForElementVisibleByElement(savePanel); publishButton.click(); PageObjectLogging.log("savePage", "The 2nd Publish Button is clicked", true); return new ArticlePageObject(driver); }
public ArticlePageObject savePage() { waitForElementInViewPort(editSummary); waitForElementInViewPort(reviewChangesButton); publishButton.click(); return new ArticlePageObject(driver); }
public ArticlePageObject savePage() { waitForElementInViewPort(editSummary); waitForElementVisibleByElement(savePanel); publishButton.click(); return new ArticlePageObject(driver); }
public ArticlePageObject savePage() { waitForElementInViewPort(editSummary); waitForElementInViewPort(reviewChangesButton); waitForElementVisibleByElement(savePanel); publishButton.click(); }
public void executeCommand(CommandSender sender, List<String> arguments) { Set<OfflinePlayer> bannedPlayers = bukkitService.getBannedPlayers(); Set<String> namedBanned = new HashSet<>(bannedPlayers.size()); for (OfflinePlayer offlinePlayer : bannedPlayers) { namedBanned.add(offlinePlayer.getName()); } purgeService.purgePlayers(sender, namedBanned, bannedPlayers.toArray(new OfflinePlayer[0])); }
public void executeCommand(CommandSender sender, List<String> arguments) { Set<OfflinePlayer> bannedPlayers = bukkitService.getBannedPlayers(); Set<String> namedBanned = new HashSet<>(bannedPlayers.size()); for (OfflinePlayer offlinePlayer : bannedPlayers) { NamedBanned.add(offlinePlayer.getName()); } purgeService.purgePlayers(sender, namedBanned, bannedPlayers.toArray(new OfflinePlayer[0])); }
public void executeCommand(CommandSender sender, List<String> arguments) { Set<OfflinePlayer> bannedPlayers = bukkitService.getBannedPlayers(); Set<String> namedBanned = new HashSet<>(bannedPlayers.size()); for (OfflinePlayer offlinePlayer : bannedPlayers) { namedBanned.add(offlinePlayer.getName()); } purgeService.purgePlayers(sender, namedBanned, bannedPlayers); }
public void executeCommand(CommandSender sender, List<String> arguments) { Set<OfflinePlayer> bannedPlayers = bukkitService.getBannedPlayers(); Set<String> namedBanned = new HashSet<>(bannedPlayers.size()); for (OfflinePlayer offlinePlayer : bannedPlayers) { namedBanned.add(offlinePlayer.getName()); } purgeService.purgePlayers(sender, namedBanned, bannedPlayers.toArray( new OfflinePlayer[0])); }
public void executeCommand(CommandSender sender, List<String> arguments) { Set<OfflinePlayer> bannedPlayers = bukkitService.getBannedPlayers(); Set<String> namedBanned = new HashSet<>(); for (OfflinePlayer offlinePlayer : bannedPlayers) { namedBanned.add(offlinePlayer.getName()); } purgeService.purgePlayers(sender, namedBanned, bannedPlayers.toArray(new OfflinePlayer[0])); }
public static Keyspace getKeyspace() { return keyspace; }
static Keyspace getKeyspace() { return keyspace; }
public Keyspace getKeyspace() { return keyspace; }
protected static Keyspace getKeyspace() { return keyspace; }
Keyspace getKeyspace() { return keyspace; }
void setNewElementYPosition(final Element elementReference, final Element newElement) { int referencePosition = getDndListComponent().getPositionY(elementReference); getDndListComponent().setPositionY(newElement, referencePosition); }
void setNewElementYPosition(final Element elementReference, final Element newElement) { int referencePosition = getDndListComponent().getPositionY(elementReference); getDndListComponent().setPositionY(newElement, referencePosition)); }
void setNewElementYPosition(final Element elementReference, final Element newElement) { int referencePosition = getDndListComponent().getPositionY(elementReference); getDndListComponent().setPositionY((Element) referencePosition)); }
void setNewElementYPosition(final Element elementReference, final Element newElement) { int referencesPosition = getDndListComponent().getPositionY(elementReference); getDndListComponent().setPositionY(newElement, referencePosition); }
void setNewElementYPosition(final Element elementReference, final Element newElement) { int referencePosition = getDndListComponent().getPositionY(elementReference); getDndListComponent().setPositionY((Element, referencePosition)); }
public void layoutTopRight(CTabFolder ctf) { Composite trComp = getTRComposite(ctf); if (trComp.getChildren().length > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, SWT.RIGHT | SWT.WRAP); } else { ctf.setTopRight(null); trComp.setVisible(false); } trComp.pack(); ctf.layout(true, true); } }
public void layoutTopRight(CTabFolder ctf) { Composite trComp = getTRComposite(ctf); if (trComp.getChildren().length > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, SWT.RIGHT | SWT.WRAP); } else { ctf.setTopRight(null); trComp.setVisible(false); } trComp.pack(); ctf.layout(true, true); }
public void layoutTopRight(CTabFolder ctf) { Composite trComp = getTRComposite(ctf); if (trComp.getChildren().length > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, SWT.RIGHT | SWT.WRAP); } else { ctf.setTopRight(false); trComp.setVisible(false); } trComp.pack(); ctf.layout(true, true); } }
public void layoutTopRight(CTabFolder ctf) { Composite trComp = getTRComposite(ctf); if (trComp.getChildren().length > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, SWT.RIGHT | SWT.WRAP); } else { ctf.setTopRight(false); trComp.setVisible(false); } trComp.pack(); ctf.layout(true, true); }
public void layoutTopRight(CTabFolder ctf) { Composite trComp = getTRComposite(ctf); if (trComp.getChildren().length > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, SWT.RIGHT | SWT.WRAP); } else { ctf.setTopRight(null); trComp.setVisible(false); } trComp.pack(); ctf.layout(true, true); } }); }
ByteBuf buffer() throws IOException { if (buf == null) { buf = Netty4Utils.toByteBuf(context.get()); context = null; } return buf; }
ByteBuf buffer() throws IOException { if (buf == null) { buf = Netty4Utils.toByteBuf(context.get()); context = null; return buf; } }
ByteBuf buffer() throws IOException { if (buf == null) { buf = Netty4Utils.toByteBuf(context.get()); context = null; break; } return buf; }
ByteBuf buffer() throws IOException { if (buf == null) { buf = Netty4Utils.toByteBuf(context.get()); context = null; return buf; } return buf; }
ByteBuf buffer() throws IOException { if (buf == null) { buf = Netty4Utils.toByteBuf(context.get()); context = null; return buf; } return buffer; }
public String getName() { String name = super.getName(); if (name == null || name.isEmpty()) { return ""; } else { return name; } }
public String getName() { String name = super.getName(); if (name == null ||!name.isEmpty()) { return ""; } else { return name; } }
public String getName() { String name = super.getName(); if (name == null ||!(name.isEmpty())) { return ""; } else { return name; } }
public String getName() { String name = super.getName(); if (name == null || ".isEmpty()) { return ""; } else { return name; } }
public String getName() { String name = super.getName(); return name == null || name.isEmpty()? "" : name; }
private void verifyInvalidValueSize(IndexValue value, String logSegmentName) { try { int capacity = TestUtils.RANDOM.nextInt(value.getBytes().capacity()); ByteBuffer invalidValue = ByteBuffer.allocate(capacity); invalidValue.put(value.getBytes().array(), 0, capacity); new IndexValue(logSegmentName, invalidValue, version); fail( "Contruction of IndexValue expected to fail with invalid byte buffer capacity of " + invalidValue.capacity()); } catch (IllegalArgumentException e) { } } }
private void verifyInvalidValueSize(IndexValue value, String logSegmentName) { try { int capacity = TestUtils.RANDOM.nextInt(value.getBytes().capacity()); ByteBuffer invalidValue = ByteBuffer.allocate(capacity); invalidValue.put(value.getBytes().array(), 0, capacity); new IndexValue(logSegmentName, invalidValue, version); fail( "Contruction of IndexValue expected to fail with invalid byte buffer capacity of " + invalidValue.capacity()); } catch (IllegalArgumentException e) { } }
private void verifyInvalidValueSize(IndexValue value, String logSegmentName) { try { int capacity = TestUtils.RANDOM.nextInt(value.getBytes().capacity()); ByteBuffer invalidValue = ByteBuffer.allocate(capacity); invalidValue.put(value.getBytes().array(), 0, capacity); throw new IndexValue(logSegmentName, invalidValue, version); fail( "Contruction of IndexValue expected to fail with invalid byte buffer capacity of " + invalidValue.capacity()); } catch (IllegalArgumentException e) { } } }
private void verifyInvalidValueSize(IndexValue value, String logSegmentName) { int capacity = TestUtils.RANDOM.nextInt(value.getBytes().capacity()); ByteBuffer invalidValue = ByteBuffer.allocate(capacity); invalidValue.put(value.getBytes().array(), 0, capacity); new IndexValue(logSegmentName, invalidValue, version); fail( "Contruction of IndexValue expected to fail with invalid byte buffer capacity of " + invalidValue.capacity()); }
private void verifyInvalidValueSize(IndexValue value, String logSegmentName) { try { int capacity = TestUtils.RANDOM.nextInt(value.getBytes().capacity()); ByteBuffer invalidValue = ByteBuffer.allocate(capacity); invalidValue.put(value.getBytes().array(), 0, capacity); } catch (IllegalArgumentException e) { } }
void dispose() { if (semanticResourcesUpdater!= null) { semanticResourcesUpdater.dispose(); semanticResourcesUpdater = null; } }
void dispose() { if (semanticResourcesUpdater!= null) { semanticResourcesUpdater.dispose(); } }
void dispose() { if ( semanticResourcesUpdater!= null) { semanticResourcesUpdater.dispose(); semanticResourcesUpdater = null; } }
void dispose() { semanticResourcesUpdater.dispose(); semanticResourcesUpdater = null; }
void dispose() { }
public void deleteByContentType(final ContentTypeIf type) throws DotDataException { final DotConnect dc = new DotConnect(); dc.setSQL(sql.DELETE_RELATIONSHIP_BY_PARENT_OR_CHILD_INODE); dc.addParam(type.id()); dc.addParam(type.id()); dc.loadResults(); }
public void deleteByContentType(final ContentTypeIf type) throws DotDataException{ final DotConnect dc = new DotConnect(); dc.setSQL(sql.DELETE_RELATIONSHIP_BY_PARENT_OR_CHILD_INODE); dc.addParam(type.id()); dc.addParam(type.id()); dc.loadResults(); }
public void deleteByContentType(final ContentTypeIf type) throws DotDataException { final DotConnect dc = new DotConnect(); dc.setSQL( sql.DELETE_RELATIONSHIP_BY_PARENT_OR_CHILD_INODE); dc.addParam(type.id()); dc.addParam(type.id()); dc.loadResults(); }
public void deleteByContentType(final ContentTypeIf type) throws DotDataException { final DotConnect dc = new DotConnect(); dc.setSQL(sql.DELETE_RELATIONSHIP_BY_PARENT_OR_CHILD_INODE); dc.addParam(type.name()); dc.addParam(type.id()); dc.loadResults(); }
public void deleteByContentType(final ContentTypeIf type) throws DotDataException { final DotConnect dc = new DotConnect(); dc.setSQL(sql.DELETE_RELATIONSHIP_BY_PARENT_ OR_CHILD_INODE); dc.addParam(type.id()); dc.addParam(type.id()); dc.loadResults(); }
public int getUniqueNotificationId() { return uniqueNotificationIdCounter.incrementAndGet(); }
public Integer getUniqueNotificationId() { return uniqueNotificationIdCounter.incrementAndGet(); }
public int getUniqueNotificationId() { if (uniqueNotificationIdCounter == null) { return null; } return uniqueNotificationIdCounter.incrementAndGet(); }
public int getUniqueNotificationId() { return uniqueNotificationIdCounter.incrementAndGet() + 1; }
public int getUniqueNotificationId() { return!uniqueNotificationIdCounter.incrementAndGet(); }
public void run() { while (!shutdown) { try { if (isActive) { processQueuedFlows(activeExecutorRefreshWindowInMilisec, activeExecutorRefreshWindowInFlows); } wait(QUEUE_PROCESSOR_WAIT_IN_MS); } catch (Exception e) { logger.info( "QueueProcessorThread Interrupted. Probably to shut down.", e); } } } }
public void run() { while (!shutdown) { try { processQueuedFlows(activeExecutorRefreshWindowInMilisec, activeExecutorRefreshWindowInFlows); } wait(QUEUE_PROCESSOR_WAIT_IN_MS); } catch (Exception e) { logger.info( "QueueProcessorThread Interrupted. Probably to shut down.", e); } } } }
public void run() { while (!shutdown) { try { if (isActive) { processQueuedFlows(activeExecutorRefreshWindowInMilisec, activeExecutorRefreshWindowInFlows); } wait(QUEUE_PROCESSOR_WAIT_IN_MS); } catch (Exception e) { logger.warn( "QueueProcessorThread Interrupted. Probably to shut down.", e); } } } }
public void run() { while (!shutdown) { try { while (!shutdown) { processQueuedFlows(activeExecutorRefreshWindowInMilisec, activeExecutorRefreshWindowInFlows); } wait(QUEUE_PROCESSOR_WAIT_IN_MS); } catch (Exception e) { logger.info( "QueueProcessorThread Interrupted. Probably to shut down.", e); } } } }
public void run() { while (!shutdown) { try { if (isActive) { processQueuedFlows(activeExecutorRefreshWindowInMilisec, activeExecutorRefreshWindowInFlows); } notify(QUEUE_PROCESSOR_WAIT_IN_MS); } catch (Exception e) { logger.info( "QueueProcessorThread Interrupted. Probably to shut down.", e); } } } }
public HllSketchMergeBufferAggregator( final ColumnValueSelector<HllSketch> selector, final int lgK, final TgtHllType tgtHllType, final int size ) { this.selector = selector; this.lgK = lgK; this.tgtHllType = tgtHllType; this.size = size; this.emptyUnion = new byte[size]; new Union(lgK, WritableMemory.wrap(emptyUnion, ByteOrder.LITTLE_ENDIAN)); }
public HllSketchMergeBufferAggregator( final ColumnValueSelector<HllSketch> selector, final int lgK, final TgtHllType tgtHllType, final int size ) { this.selector = selector; this.lgK = lgK; this.tgtHllType = tgtHllType; this.size = size; this.emptyUnion = new byte[size]; this.new Union(lgK, WritableMemory.wrap(emptyUnion, ByteOrder.LITTLE_ENDIAN)); }
public HllSketchMergeBufferAggregator( final ColumnValueSelector<HllSketch> selector, final int lgK, final TgtHllType tgtHllType, final int size ) { this.selector = selector; this.lgK = lgK; this.tgtHllType = tgtHllType; this.size = size; this.emptyUnion = new byte[size]; this. new Union(lgK, WritableMemory.wrap(emptyUnion, ByteOrder.LITTLE_ENDIAN)); }
public HllSketchMergeBufferAggregator( final ColumnValueSelector<HllSketch> selector, final int lgK, final TgtHllType tgtHllType, final int size ) { this.selector = selector; this.lgK = lgK; this.tgtHllType = tgtHllType; this.size = size; this.emptyUnion = new byte[size]; this.add Union(lgK, WritableMemory.wrap(emptyUnion, ByteOrder.LITTLE_ENDIAN)); }
public HllSketchMergeBufferAggregator( final ColumnValueSelector<HllSketch> selector, final int lgK, final TgtHllType tgtHllType, final int size ) { this.selector = selector; this.lgK = lgK; this.tgtHllType = tgtHllType; this.size = size; this.emptyUnion = new byte[size]; }
public void checkIPAdress() { Set<ConstraintViolation<IPAdress>> validate = validator.validate(new IPAdress(address)); assertEquals(validate.isEmpty(), expectedResult); }
public void checkIPAdress() { Set<ConstraintViolation<IPAdress>> validate = validator.validate(new IPAdress(address)); assertTrue(validate.isEmpty(), expectedResult); }
public void checkIPAdress() { Set<ConstraintViolation<IPAdress>> validate = validator.validate(new IPAdress(address)); assertTrue(validate.isEmpty()); }
public void checkIPAdress() { Set<ConstraintViolation<IPAdress>> validate = validator.validate(new IPAdress(address)); assertEquals(0, validate.isEmpty()); }
public void checkIPAdress() { Set<ConstraintViolation<IPAdress>> validate = validator.validate(new IPAdress(address)); assertEquals(1, validate.isEmpty()); }
public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) { if (currentFormat!= null) calc(); else { context.showToast(e.getMessage()); spinner.setSelection(currentFormat.ordinal()); return; } currentFormat = coordInputFormatEnum.fromInt(pos); settings.setCoordInputFormat(currentFormat); updateGUI(); }
public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) { if (currentFormat!= null) calc(); } else { context.showToast(e.getMessage()); spinner.setSelection(currentFormat.ordinal()); return; } currentFormat = coordInputFormatEnum.fromInt(pos); settings.setCoordInputFormat(currentFormat); updateGUI(); } }
public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) { if (currentFormat!= null) { calc(); } }
public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) { if (currentFormat!= null) calc(); else { context.showToast(e.getMessage()); spinner.setSelection(currentFormat.ordinal()); return; } currentFormat = coordInputFormatEnum.fromInt(pos); settings.setCoordInputFormat(currentFormat); updateGUI(); } }
public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) { if (currentFormat!= null) calc(); } else { context.showToast(e.getMessage()); spinner.setSelection(currentFormat.ordinal()); return; } currentFormat = coordInputFormatEnum.fromInt(pos); settings.setCoordInputFormat(currentFormat); updateGUI(); }
public boolean visitTableWithType(String schemaName, String tableName, TableType type) { Preconditions.checkNotNull(type, "Error. Type information for table %s.%s provided is null.", schemaName, tableName); records.add(new Records.Table(IS_CATALOG_NAME, schemaName, tableName, type.toString())); return false; }
public boolean visitTableWithType(String schemaName, String tableName, TableType type) { checkNotNull(type, "Error. Type information for table %s.%s provided is null.", schemaName, tableName); records.add(new Records.Table(IS_CATALOG_NAME, schemaName, tableName, type.toString())); return false; }
public boolean visitTableWithType(String schemaName, String tableName, TableType type) { Preconditions.checkNotNull(type, "Error. Type information for table %s.%s provided is null.", schemaName, tableName); records.add(new Records.Table(IS_CATALOG_NAME, schemaName, tableName, type.toString())); return true; }
public boolean visitTableWithType(String schemaName, String tableName, TableType type) { Preconditions.checkNotNull(type, "Error. Type information for table %s.%s provided is null.", schemaName, tableName); records.add(new Records.Table(IS_CATALOG_NAME, schemaName, tableName, type)); return false; }
public boolean visitTableWithType(String schemaName, String tableName, TableType type) { Preconditions.checkNotNull(type, "Error. Type information for table %s.%s provided is null.", schemaName, tableName)); records.add(new Records.Table(IS_CATALOG_NAME, schemaName, tableName, type.toString())); return false; }
public boolean add(XWikiAttachment attachment) { return set(attachment)!= attachment; }
public boolean add(XWikiAttachment attachment) { return set(attachment)!= null; }
public boolean add(XWikiAttachment attachment) { return set(attachment); }
public boolean add(XWikiAttachment attachment) { return set(attachment)!= 0; }
public boolean add(XWikiAttachment attachment) { return set(attachment).equals(attachment); }
public String toString() { return Objects.toStringHelper(this).add("liveWorkerNum", mLiveWorkerNum).add("lostWorkerNum", mLostWorkerNum).add("capacityBytes", mCapacityBytes).add("usedBytes", mUsedBytes).add("freeBytes", mFreeBytes).add("capacityBytesOnTiers", mCapacityBytesOnTiers).add("usedBytesOnTiers", mUsedBytesOnTiers).toString(); }
public String toString() { return Objects.toStringHelper(this).add("liveWorkerNum", mLiveWorkerNum).add("lostWorkerNum", mLostWorkerNum).add("capacityBytes", mUsedBytes).add("freeBytes", mFreeBytes).add("capacityBytesOnTiers", mCapacityBytesOnTiers).add("usedBytesOnTiers", mUsedBytesOnTiers).toString(); }
public String toString() { return Objects.toStringHelper(this).add("liveWorkerNum", mLiveWorkerNum).add("lostWorkerNum", mLostWorkerNum).add("capacityBytes", mUsedBytes).add("freeBytes", mFreeBytes).add("capacityBytesOnTiers", mCapacityBytesOnTiers).add("usedBytesOnTiers", mUsedBytesOnTiers).add("usedBytesOnTiers", mUsedBytesOnTiers).toString(); }
public String toString() { return Objects.toStringHelper(this).add("liveWorkerNum", mLiveWorkerNum).add("lostWorkerNum", mLostWorkerNum).add("capacityBytes", mCapacityBytes).add("usedBytes", mUsedBytes).add("freeBytes", mFreeBytes).add("capacityBytesOnTiers", mCapacityBytesOnTiers).add("usedBytesOnTiers", mUsedBytesOnTiers).toString(); }
public String toString() { return Objects.toStringHelper(this).add("liveWorkerNum", mLiveWorkerNum).add("lostWorkerNum", mLostWorkerNum); }
public static final void assertJenkinsNotInQuietMode(final JenkinsRule j) { await().pollInterval(250, TimeUnit.MILLISECONDS).atMost(10, TimeUnit.SECONDS).until(() ->!j.jenkins.getQueue().isBlockedByShutdown(task)); }
public static final void assertJenkinsNotInQuietMode(final JenkinsRule j) { await().removeInterval(250, TimeUnit.MILLISECONDS).atMost(10, TimeUnit.SECONDS).until(() ->!j.jenkins.getQueue().isBlockedByShutdown(task)); }
public(). final void assertJenkinsNotInQuietMode(final JenkinsRule j) { await().pollInterval(250, TimeUnit.MILLISECONDS).atMost(10, TimeUnit.SECONDS).until(() ->!j.jenkins.getQueue().isBlockedByShutdown(task)); }
public static final void assertJenkinsNotInQuietMode(final JenkinsRule j) { await().pollInterval(250, TimeUnit.MILLISECONDS).atMost(10, TimeUnit.SECONDS).until(() ->!1.jenkins.getQueue().isBlockedByShutdown(task)); }
public static final void assertJenkinsNotInQuietMode(final JenkinsRule j) { await().pollInterval(250, TimeUnit.MILLISECONDS).atMost(10, TimeUnit.SECONDS).until(() ->!j.jenkins.getQueue(). isBlockedByShutdown(task)); }
private TreeLayer getTreeLayer() { NatTable natTable = (NatTable) getTableManager().getAdapter(NatTable.class); ILayer layer = natTable.getLayer(); if (layer instanceof PapyrusGridLayer) { PapyrusGridLayer gridLayer = (PapyrusGridLayer) layer; ILayer rowLayer = gridLayer.getRowHeaderLayer(); if (rowLayer instanceof RowHeaderHierarchicalLayerStack) { return ((RowHeaderHierarchicalLayerStack) rowLayer).getTreeLayer(); } } throw new UnknownError("TreeLayer has not been found"); }
private TreeLayer getTreeLayer() { NatTable natTable = (NatTable) getTableManager().getAdapter(NatTable.class); if (layer instanceof PapyrusGridLayer) { PapyrusGridLayer gridLayer = (PapyrusGridLayer) layer; ILayer rowLayer = gridLayer.getRowHeaderLayer(); if (rowLayer instanceof RowHeaderHierarchicalLayerStack) { return ((RowHeaderHierarchicalLayerStack) rowLayer).getTreeLayer(); } } throw new UnknownError("TreeLayer has not been found"); }
private TreeLayer getTreeLayer() { NatTable natTable = (NatTable) getTableManager().getAdapter(NatTable.class); Object layer = natTable.getLayer(); if (layer instanceof PapyrusGridLayer) { PapyrusGridLayer gridLayer = (PapyrusGridLayer) layer; ILayer rowLayer = gridLayer.getRowHeaderLayer(); if (rowLayer instanceof RowHeaderHierarchicalLayerStack) { return ((RowHeaderHierarchicalLayerStack) rowLayer).getTreeLayer(); } } throw new UnknownError("TreeLayer has not been found"); }
private TreeLayer getTreeLayer() { NatTable natTable = (NatTable) getTableManager().getAdapter(NatTable.class); OLayer layer = natTable.getLayer(); if (layer instanceof PapyrusGridLayer) { PapyrusGridLayer gridLayer = (PapyrusGridLayer) layer; ILayer rowLayer = gridLayer.getRowHeaderLayer(); if (rowLayer instanceof RowHeaderHierarchicalLayerStack) { return ((RowHeaderHierarchicalLayerStack) rowLayer).getTreeLayer(); } } throw new UnknownError("TreeLayer has not been found"); }
private TreeLayer getTreeLayer() { NatTable natTable = (NatTable) getTableManager().getAdapter(NatTable.class); if (layer instanceof PapyrusGridLayer) { PapyrusGridLayer gridLayer = (PapyrusGridLayer) layer; ILayer rowLayer = gridLayer.getRowHeaderLayer(); if (rowLayer instanceof RowHeaderHierarchicalLayerStack) { return ((RowHeaderHierarchicalLayerStack) rowLayer).getTreeLayer(); } } throw new UnknownError("TreeLayer has not been found"); } }
public boolean equals(@Nullable Object obj) { return!(obj instanceof DataDrivenValueSelf)) && obj instanceof DataDrivenValueSelf; }
public boolean equals(@Nullable Object obj) { return obj instanceof DataDrivenValueSelf; }
public boolean equals(@Nullable Object obj) { return!(obj instanceof DataDrivenValueSelf); }
public boolean equals(@Nullable Object obj) { return!(obj instanceof DataDrivenValueSelf)) && super.equals(obj); }
public boolean equals(@Nullable Object obj) { return!(obj instanceof DataDrivenValueSelf)); }
public void differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchInputSubmit(); String URL = driver.getCurrentUrl(); Assert.assertEquals(URL, "<LINK_1>"); SearchInput postsResult = new SearchInput().searchResultsPosts(); String postUrl = driver.getCurrentUrl(); SearchInput videosResult = new SearchInput().searchResultsVideos(); String videoUrl = driver.getCurrentUrl(); Assert.assertEquals(postUrl, videoUrl); }
public void differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchInputSubmit(); String URL = driver.getCurrentUrl(); Assert.assertEquals("<LINK_1>"); SearchInput postsResult = new SearchInput().searchResultsPosts(); String postUrl = driver.getCurrentUrl(); SearchInput videosResult = new SearchInput().searchResultsVideos(); String videoUrl = driver.getCurrentUrl(); Assert.assertEquals(postUrl, videoUrl); }
public void differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchInputSubmit(); String URL = driver.getCurrentUrl(); Assert.assertEquals(URL, "<LINK_1>"); SearchInput postsResult = new SearchInput().searchResultsPosts(); SearchInput videosResult = new SearchInput().searchResultsVideos(); String videoUrl = driver.getCurrentUrl(); Assert.assertEquals(postUrl, videoUrl); }
public void differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchInputSubmit(); String URL = driver.getCurrentUrl(); Assert.assertEquals("<LINK_1>"); SearchInput postsResult = new SearchInput().searchResultsPosts(); String postUrl = driver.getCurrentUrl(); SearchInput videosResult = new SearchInput().searchResultsVideos(); String videoUrl = driver.getCurrentUrl(); Assert.assertEquals(postUrl, videoUrl); } }
public void differentUrlForPostsAndVideo() { SearchInput searchInput = new SearchInput().searchInputValue(); SearchInput searchInputSubmit = new SearchInput().searchInputSubmit(); String URL = driver.getCurrentUrl(); Assert.assertEquals("", URL); SearchInput postsResult = new SearchInput().searchResultsPosts(); String postUrl = driver.getCurrentUrl(); SearchInput videosResult = new SearchInput().searchResultsVideos(); String videoUrl = driver.getCurrentUrl(); Assert.assertEquals("", videoUrl); }
String convert(Blob blob) { if (blob.getLength() == 0L) { return ""; } try (InputStream stream = blob.getStream()) { return xml2text.parse(stream); } catch (IOException | SAXException | ParserConfigurationException e) { throw new ConversionException("Error during XML2Text conversion", e); } }
String convert(Blob blob) { if (blob.getLength() == 0L) { return ""; } try (InputStream stream = blob.getStream()) { return Xml2TextHandler.parse(stream); } catch (IOException | SAXException | ParserConfigurationException e) { throw new ConversionException("Error during XML2Text conversion", e); } }
String convert(Blob blob) { if (blob.getLength() == 0L) { return ""; } try (InputStream stream = blob.getStream()) { return xml2text.parse(stream); } catch (IOException | SAXException | ParserConfigurationException e) { throw new ConversionException("Error during XML2Text conversion", e); } } }
String convert(Blob blob) { if (blob.getLength() == 0L) { return ""; } try (InputStream stream = blob.getStream()) { return xml2TextHandler.parse(stream); } catch (IOException | SAXException | ParserConfigurationException e) { throw new ConversionException("Error during XML2Text conversion", e); } }
String convert(Blob blob) { if (blob.getLength() == 0L) { return ""; } try (InputStream stream = blob.getStream()) { return new Xml2TextHandler(); } catch (IOException | SAXException | ParserConfigurationException e) { throw new ConversionException("Error during XML2Text conversion", e); } }
public static void validateHeaderConfigAction(String action) { if (HEADER_ACTIONS.stream().anyMatch(action::equalsIgnoreCase)) { throw new ConfigException(String.format("Invalid header config action: '%s'. " + "Expected one of %s", action, HEADER_ACTIONS)); } }
public static void validateHeaderConfigAction(String action) { if (!HEADER_ACTIONS.stream().anyMatch(action::equalsIgnoreCase)) { throw new ConfigException(String.format("Invalid header config action: '%s'. " + "Expected one of %s", action, HEADER_ACTIONS)); } }
public static void validateHeaderConfigAction(String action) { if HEADER_ACTIONS.stream().anyMatch(action::equalsIgnoreCase)) { throw new ConfigException(String.format("Invalid header config action: '%s'. " + "Expected one of %s", action, HEADER_ACTIONS)); } }
public static void validateHeaderConfigAction(String action) { if (HEADER_ACTIONS.stream().anyMatch(action::equalsIgnoreCase)) { throw new ConfigException(String.format("Invalid header config action: '%s'. " + "Expected one of %s", action), HEADER_ACTIONS)); } }
public static void validateHeaderConfigAction(String action) { if (HEADER_ACTIONS.stream().anyMatch(action::equalsIgnoreCase)) { throw new ConfigException(String.format("Invalid header config action: '%s'. " + "Expected one of %s", action, HEADER_ACTIONS)); } } }
private String getVariableLabel(VariableMetadata variableMetadata) { if (variableMetadata.getName().startsWith(CASE_VARIABLE_PREFIX)) { return translationService.getValue(CASE_VARIABLE_LABEL_PREFIX) + " " + variableMetadata.getName().substring(CASE_VARIABLE_PREFIX.length(), variableMetadata.getName().length()); } return variableMetadata.getName(); }
private String getVariableLabel(VariableMetadata variableMetadata) { if (variableMetadata.getName().startsWith(CASE_VARIABLE_PREFIX)) { return translationService.getValue(CASE_VARIABLE_LABEL_PREFIX + " " + variableMetadata.getName().substring(CASE_VARIABLE_PREFIX.length(), variableMetadata.getName().length()); } else { return variableMetadata.getName(); } }
private String getVariableLabel(VariableMetadata variableMetadata) { return translationService.getValue(CASE_VARIABLE_LABEL_PREFIX) + " " + variableMetadata.getName().substring(CASE_VARIABLE_PREFIX.length(), variableMetadata.getName().length()); }
private String getVariableLabel(VariableMetadata variableMetadata) { if (variableMetadata.getName().startsWith(CASE_VARIABLE_PREFIX)) { return translationService.getValue(CASE_VARIABLE_LABEL_PREFIX + " " + variableMetadata.getName().substring(CASE_VARIABLE_PREFIX.length(), variableMetadata.getName().length()); } return variableMetadata.getName(); }
private String getVariableLabel(VariableMetadata variableMetadata) { if (!variableMetadata.getName().startsWith(CASE_VARIABLE_PREFIX)) { return translationService.getValue(CASE_VARIABLE_LABEL_PREFIX) + " " + variableMetadata.getName().substring(CASE_VARIABLE_PREFIX.length(), variableMetadata.getName().length()); } return variableMetadata.getName(); }
private Long findFreeId(){ while(personRepository.findOne(lastId)!= null){ lastId++; } return lastId; }
protected Long findFreeId(){ while(personRepository.findOne(lastId)!= null){ lastId++; } return lastId; }
private Long findFreeId(){ while (personRepository.findOne(lastId)!= null){ lastId++; } return lastId; }
private Long findFreeId(){ while(personRepository.findOne(lastId)!= null) { lastId++; } return lastId; }
private Long findFreeId(){ while(!personRepository.findOne(lastId)!= null){ lastId++; } return lastId; }
public void cameraDeviceCallsAreForwardedToCallback() throws InterruptedException { mUseCase.addStateChangeListener( mCameraRepository.getCamera( getCameraIdForLensFacingUnchecked(mConfig.getLensFacing()))); mUseCase.doNotifyActive(); mCameraRepository.onGroupActive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnOpened(1); mCameraRepository.onGroupInactive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnClosed(1); }
public void cameraDeviceCallsAreForwardedToCallback() throws InterruptedException { if (mCameraId!= null) { mUseCase.addStateChangeListener( mCameraRepository.getCamera( getCameraIdForLensFacingUnchecked(mConfig.getLensFacing()))); mUseCase.doNotifyActive(); mCameraRepository.onGroupActive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnOpened(1); mCameraRepository.onGroupInactive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnClosed(1); } }
public void cameraDeviceCallsAreForwardedToCallback() throws InterruptedException { mUseCase.addStateChangeListener(mCameraRepository.getCamera( getCameraIdForLensFacingUnchecked(mConfig.getLensFacing()))); mUseCase.doNotifyActive(); mCameraRepository.onGroupActive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnOpened(1); mCameraRepository.onGroupInactive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnClosed(1); }
public void cameraDeviceCallsAreForwardedToCallback() throws InterruptedException { mUseCase.addStateChangeListener( mCameraRepository.getCamera( getCameraIdForLensFacingUnchecked(mConfig.getLensFacing()))); mUseCase.doNotifyActive(); mCameraRepository.onGroupActive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnOpened(1); mCameraRepository.onGroupInactive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnClosed(1); } }
public void cameraDeviceCallsAreForwardedToCallback() throws InterruptedException { mUseCase.addStateChangeListener( mCameraRepository.getCamera() ); mUseCase.doNotifyActive(); mCameraRepository.onGroupActive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnOpened(1); mCameraRepository.onGroupInactive(mUseCaseGroup); mUseCase.mDeviceStateCallback.waitForOnClosed(1); }
public String getDescription() { return getStatuteType().getName().getContent(I18N.getLocale()) + (studentStatute instanceof SeniorStatute? (" (" + ((SeniorStatute) studentStatute).getRegistration().getDegree().getPresentationName() + ") : ""); }
public String getDescription() { return getStatuteType().getName().getContent(I18N.getLocale()) + studentStatute instanceof SeniorStatute? (" (" + ((SeniorStatute) studentStatute).getRegistration().getDegree().getPresentationName() + ") : ""); }
public String getDescription() { return getStatuteType().getName().getContent(I18N.getLocale()) +!(studentStatute instanceof SeniorStatute? (" (" + ((SeniorStatute) studentStatute).getRegistration().getDegree().getPresentationName() + ") : ""); }
public String getDescription() { return getStatuteType().getName().getContent(I18N.getLocale()) + repositoryStatute instanceof SeniorStatute? (" (" + ((SeniorStatute) studentStatute).getRegistration().getDegree().getPresentationName() + ") : ""); }
public String getDescription() { return getStatuteType().getName().getContent(I18N.getLocale()); }
public boolean teleportToSpawn() { Location target = server.getWorlds().get(0).getSpawnLocation(); EntityPortalEvent event = EventFactory.callEvent(new EntityPortalEvent(this, location.clone(), target, null)); if (event.isCancelled()) { return false; } target = event.getTo(); teleport(target); return true; }
public boolean teleportToSpawn() { Location target = server.getWorlds().get(0).getSpawnLocation(); EntityPortalEvent event = EventFactory.callEvent(new EntityPortalEvent(this, location.clone(), target, null)); if (!event.isCancelled()) { return false; } target = event.getTo(); teleport(target); return true; }
public boolean teleportToSpawn() { Location target = server.getWorlds().get(0).getSpawnLocation(); EntityPortalEvent event = EventFactory.callEvent(new EntityPortalEvent(this, location, null, null)); if (event.isCancelled()) { return false; } target = event.getTo(); teleport(target); return true; }
public boolean teleportToSpawn() { Location target = server.getWorlds().get(0).getSpawnLocation(); EntityPortalEvent event = EventFactory.callEvent(new EntityPortalEvent(this, location.clone(), target, null)); target = event.getTo(); teleport(target); return true; }
public boolean teleportToSpawn() { Location target = server.getWorlds().get(0).getSpawnLocation(); EntityPortalEvent event = EventFactory.callEvent(new EntityPortalEvent(this, location.clone(), target, null)); if (event.isCancelled()) { return false; } target = event.getTo(); tele port(target); return true; }
public String[] getGroupFilters() { IAnnotation before = m_annotationFinder.findAnnotation(getConstructorOrMethod(), IBeforeMethod.class); if (before == null) { return null; } return ((ConfigurationAnnotation) before).getGroupFilters(); }
public String[] getGroupFilters() { IAnnotation before = m_annotationFinder.findAnnotation(getConstructorOrMethod(), IBeforeMethod.class); if (before == null) { return new String[0]; } return before.getGroupFilters(); }
public String[] getGroupFilters() { IAnnotation before = m_annotationFinder.findAnnotation(getConstructorOrMethod(), IBeforeMethod.class); if (before == null) { return new String[0]; } return ((ConfigurationAnnotation) before).getGroupFilters(); }
public String[] getGroupFilters() { IAnnotation before = m_annotationFinder.findAnnotation(getConstructorOrMethod(), IBeforeMethod.class); if (before == null) { return new IAnnotation((ConfigurationAnnotation) before).getGroupFilters(); } return result; }
public String[] getGroupFilters() { IAnnotation before = m_annotationFinder.findAnnotation(getConstructorOrMethod(), IBeforeMethod.class); if (before == null) { return new String[]{(ConfigurationAnnotation) before).getGroupFilters(); } return result; }
PageCacheNumberArray( PagedFile pagedFile, int entrySize, long length, long defaultValue, long base ) throws IOException { this.pagedFile = pagedFile; this.entrySize = entrySize; this.entriesPerPage = pagedFile.pageSize() / entrySize; this.length = length; this.defaultValue = defaultValue; this.base = base; try ( PageCursor cursorToSetLength = pagedFile.io( 0, PF_SHARED_WRITE_LOCK ) ) { setLength( cursorToSetLength, length ); } if ( defaultValue!= 0 ) { setDefaultValue( defaultValue ); } } }
protected PageCacheNumberArray( PagedFile pagedFile, int entrySize, long length, long defaultValue, long base ) throws IOException { this.pagedFile = pagedFile; this.entrySize = entrySize; this.entriesPerPage = pagedFile.pageSize() / entrySize; this.length = length; this.defaultValue = defaultValue; this.base = base; try ( PageCursor cursorToSetLength = pagedFile.io( 0, PF_SHARED_WRITE_LOCK ) ) { setLength( cursorToSetLength, length ); } if ( defaultValue!= 0 ) { setDefaultValue( defaultValue ); } } }
PageCacheNumberArray( PagedFile pagedFile, int entrySize, long length, long defaultValue, long base ) throws IOException { this.pagedFile = pagedFile; this.entrySize = entrySize; this.entriesPerPage = pagedFile.pageSize() /entrySize; this.length = length; this.defaultValue = defaultValue; this.base = base; try ( PageCursor cursorToSetLength = pagedFile.io( 0, PF_SHARED_WRITE_LOCK ) ) { setLength( cursorToSetLength, length ); } if ( defaultValue!= 0 ) { setDefaultValue( defaultValue ); } } }
PageCacheNumberArray( PagedFile pagedFile, int entrySize, long length, long defaultValue, long base ) throws IOException { this.pagedFile = pagedFile; this.entrySize = entrySize; this.entriesPerPage = pagedFile.pageSize() / entrySize; this.length = length; this.defaultValue = defaultValue; this.base = base; try ( PageCursor cursorToSetLength = pagedFile.io( 0, PF_SHARED_WRITE_LOCK ) ) { setLength( cursorToSetLength, length ); } if ( defaultValue!= 0 ) { setDefaultValue( defaultValue ); } }
PageCacheNumberArray( PagedFile pagedFile, int entrySize, long length, long defaultValue, long base ) throws IOException { this.pagedFile = pagedFile; this.entrySize = entrySize; this.master = pagedFile.pageSize() / entrySize; this.length = length; this.defaultValue = defaultValue; this.base = base; try ( PageCursor cursorToSetLength = pagedFile.io( 0, PF_SHARED_WRITE_LOCK ) ) { setLength( cursorToSetLength, length ); } if ( defaultValue!= 0 ) { setDefaultValue( defaultValue ); } } }
public InterpretedPageProjectionOutput(DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions) { this.yieldSignal = requireNonNull(yieldSignal, "yieldSignal is null"); this.blocks = requireNonNull(page, "page is null").getBlocks(); this.selectedPositions = requireNonNull(selectedPositions, "selectedPositions is null"); this.nextIndexOrPosition = selectedPositions.getOffset(); if (selectedPositions.isList()) { this.positions = selectedPositions.getPositions(); } else { this.positions = null; } } }
public InterpretedPageProjectionOutput(DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions) { this.yieldSignal = requireNonNull(yieldSignal, "yieldSignal is null"); this.blocks = requireNonNull(page, "page is null").getBlocks(); this.selectedPositions = requireNonNull(selectedPositions, "selectedPositions is null"); this.nextIndexOrPosition = selectedPositions.getOffset(); if (selectedPositions.isList()) { this.positions = selectedPositions.getPositions(); } else { this.positions = null; } }}
public InterpretedPageProjectionOutput(DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions) { this.yieldSignal = requireNonNull(yieldSignal, "yieldSignal is null"); this.blocks = requireNonNull(page, "page is null").getBlocks(); this.selectedPositions = requireNonNull(selectedPositions, "selectedPositions is null"); this.nextIndexOrPosition = selectedPositions.getOffset(); if (selectedPositions.isList()) { this.positions = selectedPositions.getPositions(); } else { this.positions = null; } }; }
public InterpretedPageProjectionOutput(DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions) { this.yieldSignal = requireNonNull(yieldSignal, "yieldSignal is null"); this.blocks = requireNonNull(page, "page is null").getBlocks(); this.selectedPositions = requireNonNull(selectedPositions, "selectedPositions is null"); this.nextIndexOrPosition = selectedPositions.getOffset(); if (selectedPositions.isList()) { this.positions = selectedPositions.getPositions(); } else { this.positions = null; break; } }
public InterpretedPageProjectionOutput(DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions) { this.yieldSignal = requireNonNull(yieldSignal, "yieldSignal is null"); this.blocks = requireNonNull(page, "page is null").getBlocks(); this.selectedPositions = requireNonNull(selectedPositions, "selectedPositions is null"); this.nextIndexOrPosition = selectedPositions.getOffset(); this.positions = selectedPositions.getPositions(); }
public String getDicomViewerUrl(Study study) { if (study == null) throw new IllegalArgumentException("study cannot be null"); else if (study.getStudyInstanceUid() == null) throw new IllegalArgumentException("studyInstanceUid cannot be null"); return study.isCompleted()? this.radiologyProperties.getDicomViewerUrl() + "studyUID=" + study.getStudyInstanceUid() : null; }
public String getDicomViewerUrl(Study study) { if (study == null) throw new IllegalArgumentException("study cannot be null"); else if (study.getStudyInstanceUid() == null) throw new IllegalArgumentException("studyInstanceUid cannot be null"); return study.isCompleted()? radiologyProperties.getDicomViewerUrl() + "studyUID=" + study.getStudyInstanceUid() : null; }
public String getDicomViewerUrl(Study study) { if study == null) throw new IllegalArgumentException("study cannot be null"); else if (study.getStudyInstanceUid() == null) throw new IllegalArgumentException("studyInstanceUid cannot be null"); return study.isCompleted()? this.radiologyProperties.getDicomViewerUrl() + "studyUID=" + study.getStudyInstanceUid() : null; }
public String getDicomViewerUrl(Study study) { if (study == null) throw new IllegalArgumentException("study cannot be null"); else if (study.getStudyInstanceUid() == null) throw new IllegalArgumentException("studyInstanceUid cannot be null"); return study. isCompleted()? this.radiologyProperties.getDicomViewerUrl() + "studyUID=" + study.getStudyInstanceUid() : null; }
public String getDicomViewerUrl(Study study) { if (study == null) throw new IllegalArgumentException("study cannot be null"); else if (study.getStudyInstanceUid() == null) throw new IllegalArgumentException("stud yInstanceUid cannot be null"); return study.isCompleted()? this.radiologyProperties.getDicomViewerUrl() + "studyUID=" + study.getStudyInstanceUid() : null; }
private Declaration getDeclarationCorrespondingToXpath( Pattern pattern, boolean isXPath, Constraint constraint ) { Declaration declFromXpath = null; if (!isXPath && pattern.hasXPath()) { Declaration xPathDecl = pattern.getXPathDeclaration(); for ( Declaration decl : constraint.getRequiredDeclarations() ) { if (xPathDecl.equals( decl )) { declFromXpath = decl; break; } } } return declFromXpath; }
private Declaration getDeclarationCorrespondingToXpath( Pattern pattern, boolean isXPath, Constraint constraint ) { Declaration declFromXpath = null; if (!isXPath && pattern.hasXPath()) { Declaration xPathDecl = pattern.getXPathDeclaration(); if (xPathDecl!= null) { for ( Declaration decl : constraint.getRequiredDeclarations() ) { declFromXpath = decl; break; } } } return declFromXpath; }
private Declaration getDeclarationCorrespondingToXpath( Pattern pattern, boolean isXPath, Constraint constraint ) { Declaration declFromXpath = null; if (!isXPath && pattern.hasXPath()) { Declaration xPathDecl = pattern.getXPathDeclaration(); for ( Declaration decl : constraint.getRequiredDeclarations() ) { if ( xPathDecl.equals( decl )) { declFromXpath = decl; break; } } } return declFromXpath; }
private Declaration getDeclarationCorrespondingToXpath( Pattern pattern, boolean isXPath, Constraint constraint ) { Declaration declFromXpath = null; if (!isXPath && pattern.hasXPath()) { Declaration xPathDecl = pattern.getXPathDeclaration(); for ( Declaration decl : constraint.getRequiredDeclarations() ) { if (xPathDecl.equals( decl )) { declFromXpath = decl; break; } } } return declFromXpath; } }
private Declaration getDeclarationCorrespondingToXpath( Pattern pattern, boolean isXPath, Constraint constraint ) { Declaration declFromXpath = null; if (!isXPath && pattern.hasXPath()) { Declaration xPathDecl = pattern.getXPathDeclaration(); if (xPathDecl!= null) { for ( Declaration decl : constraint.getRequiredDeclarations() ) { declFromXpath = decl; break; } } } return declFromXpath; } }
public void setQueryTimeout( int seconds ) throws AlreadyClosedSqlException, InvalidParameterSqlException, SQLException { super.setQueryTimeout(seconds); }
public void setQueryTimeout( int seconds ) throws AlreadyClosedSqlException, InvalidParameterSqlException, SQLException { super.setQueryTimeout( seconds); }
public void setQueryTimeout( int seconds ) throws AlreadyClosedSqlException, InvalidParameterSqlException, SQLException { throwIfClosed(); super.setQueryTimeout(seconds); }
public void setQueryTimeout( int seconds ) throws AlreadyClosedSqlException, InvalidParameterSqlException, SQLException { throwIfClosed(); super.setQueryTimeout( seconds); }
public void setQueryTimeout( int seconds ) throws SQLException { super.setQueryTimeout( seconds); }
private List<Disk> manualAggregateSnapshots() { List<Disk> Param = new ArrayList<>(); DiskImage diskWithSnaps = diskWithSnapshots; diskWithSnaps.getSnapshots().addAll(snapshotsList); Param.add(diskWithSnapshots); Param.add(diskWithoutSnapshots); Param.add(ovfImage); Param.add(cinderDisk); return Param; }
private List<Disk> manualAggregateSnapshots() { Set<Disk> Param = new HashSet<>(); DiskImage diskWithSnaps = diskWithSnapshots; diskWithSnaps.getSnapshots().addAll(snapshotsList); Param.add(diskWithSnapshots); Param.add(diskWithoutSnapshots); Param.add(ovfImage); Param.add(cinderDisk); return Param; }
private List<Disk> manualAggregateSnapshots() { List<Disk> Param = new ArrayList<>(); DiskImage diskWithSnapshots = diskWithSnapshots; diskWithSnaps.getSnapshots().addAll(snapshotsList); Param.add(diskWithSnapshots); Param.add(diskWithoutSnapshots); Param.add(ovfImage); Param.add(cinderDisk); return Param; }
private List<Disk> manualAggregateSnapshots() { List<Disk> Param = new HashSet<>(); DiskImage diskWithSnaps = diskWithSnapshots; diskWithSnaps.getSnapshots().addAll(snapshotsList); Param.add(diskWithSnapshots); Param.add(diskWithoutSnapshots); Param.add(ovfImage); Param.add(cinderDisk); return Param; }
private Set<Disk> manualAggregateSnapshots() { List<Disk> Param = new ArrayList<>(); DiskImage diskWithSnaps = diskWithSnapshots; diskWithSnaps.getSnapshots().addAll(snapshotsList); Param.add(diskWithSnapshots); Param.add(diskWithoutSnapshots); Param.add(ovfImage); Param.add(cinderDisk); return Param; }
public IndexingConfigurationBuilder autoConfig(boolean autoConfig) { attributes.attribute(AUTO_CONFIG).set(autoConfig); return this; }
public IndexingConfigurationBuilder autoConfig(boolean autoConfig) { enable(); attributes.attribute(AUTO_CONFIG).set(autoConfig); return this; }
public IndexingConfigurationBuilder autoConfig(boolean autoConfig) { enabled(); attributes.attribute(AUTO_CONFIG).set(autoConfig); return this; }
public IndexingConfigurationBuilder autoConfig(boolean autoConfig) { enabled( autoConfig, autoConfig); return this; }
public IndexingConfigurationBuilder autoConfig(boolean autoConfig) { enable(); attributes.attribute(AUTO_CONFIG).set( autoConfig); return this; }
private boolean shouldBeDirectlyAttached(String vfName, Guid vmId) { return CollectionUtils.isNotEmpty(vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vmId, VmDeviceGeneralType.HOSTDEV, vfName)); }
private boolean shouldBeDirectlyAttached(String vfName, Guid vmId) { return!CollectionUtils.isNotEmpty(vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vmId, VmDeviceGeneralType.HOSTDEV, vfName)); }
private boolean shouldBeDirectlyAttached(String vfName, Guid vmId) { return!vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vmId, VmDeviceGeneralType.HOSTDEV, vfName)); }
private boolean shouldBeDirectlyAttached(String vfName, Guid vmId) { return null!= vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vmId, VmDeviceGeneralType.HOSTDEV, vfName)); }
private boolean shouldBeDirectlyAttached(String vfName, Guid vmId) { return CollectionUtils.isNotEmpty(vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vmId, VmDeviceGeneralType.HOSTDEV, vmfName)); }
private void safeCloseStream(Closeable stream) { if (stream!= null) { try { stream.close(); } catch (IOException e) { Logger.e(TAG, "Failed to close the stream: ", "", ADALError.IO_EXCEPTION, e); } } }
private static void safeCloseStream(Closeable stream) { if (stream!= null) { try { stream.close(); } catch (IOException e) { Logger.e(TAG, "Failed to close the stream: ", "", ADALError.IO_EXCEPTION, e); } } }
private boolean safeCloseStream(Closeable stream) { if (stream!= null) { try { stream.close(); } catch (IOException e) { Logger.e(TAG, "Failed to close the stream: ", "", ADALError.IO_EXCEPTION, e); } } }
private void safeCloseStream(Closeable stream) { if (stream!= null) { try { stream.close(); } catch (IOException e) { Logger.e(TAG, "Failed to close the stream: ", "", ADALError.IO_EXCEPTION, e); } } } }
private boolean safeCloseStream(Closeable stream) { if (stream!= null) { try { stream.close(); } catch (IOException e) { Logger.e(TAG, "Failed to close the stream: ", "", ADALError.IO_EXCEPTION, e); } } } }
public static String zkSecuritySysConfigString() { String loginConfig = System.getProperty(JAVA_LOGIN_CONFIG_PARAM); String clientEnabled = System.getProperty(K_SASL_CLIENT); String contextName = System.getProperty(K_LOGIN_CONTEXT_NAME_KEY); return "[" + JAVA_LOGIN_CONFIG_PARAM + "=" + loginConfig + ", " + K_SASL_CLIENT + "=" + (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT : clientEnabled) + ", " + K_LOGIN_CONTEXT_NAME_KEY + "=" + (contextName == null? "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME : contextName) + "]"; }
public static String zkSecuritySysConfigString() { String loginConfig = System.getProperty(JAVA_LOGIN_CONFIG_PARAM); String clientEnabled = System.getProperty(K_SASL_CLIENT); String contextName = System.getProperty(K_LOGIN_CONTEXT_NAME_KEY); return "[" + JAVA_LOGIN_CONFIG_PARAM + "=" + loginConfig + ", " + K_SASL_CLIENT + "=" + (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT : clientEnabled) + ", " + K_LOGIN_CONTEXT_NAME_KEY + "=" + (contextName == null? "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME_KEY + "=" + contextName + "]"; }
public static String zkSecuritySysConfigString() { String loginConfig = System.getProperty(JAVA_LOGIN_CONFIG_PARAM); String clientEnabled = System.getProperty(K_SASL_CLIENT); String contextName = System.getProperty(K_LOGIN_CONTEXT_NAME_KEY); return "[" + JAVA_LOGIN_CONFIG_PARAM + "=" + loginConfig + ", " + K_SASL_CLIENT + "=" + (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT : clientEnabled) + ", " + K_LOGIN_CONTEXT_NAME_KEY + "=" + (contextName == null? "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME_KEY : contextName) + "]"; }
public static String zkSecuritySysConfigString() { String loginConfig = System.getProperty(JAVA_LOGIN_CONFIG_PARAM); String clientEnabled = System.getProperty(K_SASL_CLIENT); String contextName = System.getProperty(K_LOGIN_CONTEXT_NAME_KEY); return "[" + JAVA_LOGIN_CONFIG_PARAM + "=" + loginConfig + ", " + K_SASL_CLIENT + "=" + (clientEnabled == null? "default:" + DEFAULT_K_SASL_CLIENT : clientEnabled) + ", " + K_LOGIN_CONTEXT_NAME_KEY + "=" + (contextName == null? "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME_KEY + "=" + contextName) + "]"; }
public static String zkSecuritySysConfigString() { String loginConfig = System.getProperty(JAVA_LOGIN_CONFIG_PARAM); String clientEnabled = System.getProperty(K_SASL_CLIENT); String contextName = System.getProperty(K_LOGIN_CONTEXT_NAME_KEY); return "[" + JAVA_LOGIN_CONFIG_PARAM + "=" + loginConfig + ", " + K_SASL_CLIENT + "=" + clientEnabled + ", " + K_LOGIN_CONTEXT_NAME_KEY + "=" + (contextName == null? "default:" + DEFAULT_K_LOGIN_CONTEXT_NAME : contextName) + "]"; }
public void updateNode(final @Nonnull Node node) throws IOException { if (node == nodes.get(node.getNodeName())) { Queue.withLock(new Runnable() { @Override public void run() { jenkins.trimLabels(); } }); persistNode(node); } }
public void updateNode(final @Nonnull Node node) throws IOException { if (node == nodes.get(node.getNodeName())) { Queue.withLock(new Runnable() { @Override public void run() { jenkins.trimLabels(); } }); persistNode(node); } }}
public void updateNode(final @Nonnull Node node) throws IOException { if (node == nodes.get(node.getNodeName())) { Queue.withLock(new Runnable() { @Override public void run() { jenkins.trimLabels(); } }); persistNode(node); } } }
public void updateNode(final @Nonnull Node node) throws IOException { if (node.equals(node.getNodeName())) { Queue.withLock(new Runnable() { @Override public void run() { jenkins.trimLabels(); } }); persistNode(node); } }
public void updateNode(final @Nonnull Node node) throws IOException { if (node.equals(node.getNodeName())) { Queue.withLock(new Runnable() { @Override public void run() { jenkins.trimLabels(); } }); persistNode(node); } }}
public void onSaveInstanceState(Bundle outState) { if (backStack!= null) { updateCurrentBackStackItem(); outState.putParcelableArrayList("backStack", backStack); } }
public void onSaveInstanceState(Bundle outState) { if (backStack!= null) { updateCurrentBackStackItem(); outState.putParcelableArrayList("backStack", backStack)); } }
public void onSaveInstanceState(Bundle outState) { if ( backStack!= null) { updateCurrentBackStackItem(); outState.putParcelableArrayList("backStack", backStack); } }
public void onSaveInstanceState(Bundle outState) { if (backStack!= null) { outState.putParcelableArrayList("backStack", backStack); } }
public void onSaveInstanceState(Bundle outState) { if (backStack!= null) { updateCurrentBackStackItem(); outState.putParcelableArrayList("backStack", backStack); } } }
public Trader(String name, double cashInHand) { this.name = name; this.cashInHand = cashInHand; this.position = new ArrayList<Order>(); this.ordersPlaced = new ArrayList<Order>(); }
public Trader(String name, double cashInHand) { this.name = name; this.cashInHand = cashInHand; this.position = new ArrayList<Order>(); this.ordersPlaced = new ArrayList<Order>>(); }
public Trader(String name, double cashInHand) { this.name = name; this.cashInHand = cashInHand; this. position = new ArrayList<Order>(); this.ordersPlaced = new ArrayList<Order>(); }
public Trader(String name, double cashInHand) { this.name = name; this.cashInHand = cashInHand; this.position = new ArrayList<Order>(); this.ordersPlaces = new ArrayList<Order>(); }
public Trader(String name, double cashInHand) { this.name = name; this.cashInHand = cashInHand; this.position = new ArrayList<Order"); this.ordersPlaced = new ArrayList<Order>(); }
private Iterable<ITask> getTasksAssosciatedWithReviewTask(ITask reviewTask) { String lookupUrl = reviewTask.getUrl(); String taskUrl = "http://someurl"; AbstractRepositoryConnector repository = TasksUiPlugin.getRepositoryManager().getConnectorForRepositoryTaskUrl(taskUrl); String taskId = repository.getTaskIdFromTaskUrl(taskUrl); String repositoryUrl = repository.getRepositoryUrlFromTaskUrl(taskUrl); ITask assosciatedTask = taskList.getTask(repositoryUrl, taskId); return ImmutableSet.of(assosciatedTask); }
private Iterable<ITask> getTasksAssosciatedWithReviewTask(ITask reviewTask) { String lookupUrl = reviewTask.getUrl(); String taskUrl = "http://someurl"; AbstractRepositoryConnector repository = TasksUiPlugin.getRepositoryManager().getConnectorForRepositoryTaskUrl(taskUrl); String taskId = repository.getTaskIdFromTaskUrl(taskUrl); String repositoryUrl = repository.getRepositoryUrlFromTaskUrl(taskUrl); ITask assosciatedTask = taskList.getTask(repositoryUrl, taskId); return assosciatedTask; }
private Iterable<ITask> getTasksAssosciatedWithReviewTask(ITask reviewTask) { String lookupUrl = reviewTask.getUrl(); String taskUrl = "http://someurl"; AbstractRepositoryConnector repository = TasksUiPlugin.getRepositoryManager().getConnectorForRepositoryTaskUrl(taskUrl); String taskId = repository.getTaskIdFromTaskUrl(taskUrl); String repositoryUrl = repository.getRepositoryUrlFromTaskUrl(taskUrl); ITask assosciatedTask = taskList.getTask(repositoryUrl, taskId); return assosciatedTask.getTasks(); }
private Iterable<ITask> getTasksAssosciatedWithReviewTask(ITask reviewTask) { String lookupUrl = reviewTask.getUrl(); String taskUrl = "http://someurl"; AbstractRepositoryConnector repository = TasksUiPlugin.getRepositoryManager().getConnectorForRepositoryTaskUrl(taskUrl); String taskId = repository.getTaskIdFromTaskUrl(taskUrl); ITask assosciatedTask = taskList.getTask(repositoryUrl, taskId); return ImmutableSet.of(assosciatedTask); }
private Iterable<ITask> getTasksAssosciatedWithReviewTask(ITask reviewTask) { String lookupUrl = reviewTask.getUrl(); String taskUrl = "http://someurl"; AbstractRepositoryConnector repository = TasksUiPlugin.getRepositoryManager().getConnectorForRepositoryTaskUrl(taskUrl); String taskId = repository.getTaskIdFromTaskUrl(taskUrl); String repositoryUrl = repository.getRepositoryUrlFromTaskUrl(taskUrl); ITask assosciatedTask = taskList.getTask(repositoryUrl, taskId); return assosciatedTask.getTasks().getTasks(); }
protected void toLegacyText(StringBuilder builder) { builder.append(this.value); }
protected void toLegacyText(StringBuilder builder) { StringBuilder builder = new StringBuilder(); builder.append(this.value); }
protected void outputLegacyText(StringBuilder builder) { builder.append(this.value); }
protected void toLegacyText(StringBuilder builder) { this.value = ""; }
protected void toLegacyText(StringBuilder builder) { builder.append(this.value()); }
public static boolean isRoute(URL url) { return ROUTE_PROTOCOL.equals(url.getProtocol()) || ROUTERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, Constants.DEFAULT_CATEGORY)); }
public static boolean isRoute(URL url) { return ROUTE_PROTOCOL.equals(url.getProtocol()) && ROUTERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, Constants.DEFAULT_CATEGORY)); }
public static boolean isRoute(URL url) { return ROUTE_PROTOCOL.equals(url.getProtocol()) || ROUTERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, DEFAULT_CATEGORY)); }
public static boolean isRoute(URL url) { return ROUTE_PROTOCOL.equals(url.getProtocol()) || ROUTERS_CATEGORY.equalsIgnoreCase(url.getParameter(CATEGORY_KEY, Constants.DEFAULT_CATEGORY)); }
public static boolean isRoute(URL url) { return ROUTE_PROTOCOL.equals(url.getProtocol()) || ROUTERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, null)); }
void thread2() { int[] vs1; synchronized (lock) { vs1 = values; state = 1; } int s; do { synchronized (lock) { s = state; } } while (s!= 2); int v1 = vs1[0]; int v2 = vs2[0]; System.out.println("b17689750TestMonitor failed: " + v1 + ", " + v2); } }
void thread2() { int[] vs1; synchronized (lock) { vs1 = values; state = 1; } int s; do { synchronized (lock) { s = state; } } while (s!= 2); int v1 = vs1[0]; int v2 = vs2[0]; System.out.println("b17689750TestMonitor failed: " + v1 + ", " + v2); }
void thread2() { int[] vs1; synchronized (lock) { vs1 = values; state = 1; } int s; do { synchronized (lock) { s = state; } } while (s!= 2); int v1 = vs1[0]; int v2 = vs2[0]; System.out.println("b17689750TestMonitor failed: " + v1 + ", " + v2); } return; }
void thread2() { int[] vs1; synchronized (lock) { vs1 = values; state = 1; } int s; do { synchronized (lock) { s = state; } } while (s!= 2); int v1 = vs1[0]; int v2 = vs2[0]; System.out.println("b17689750TestMonitor failed: " + v1 + ", " + v2); } sd2 = null; }
void thread2() { int[] vs1; synchronized (lock) { vs1 = values; state = 1; } int s; do { synchronized (lock) { s = state; } } while (s!= 2); int v1 = vs1[0]; int v2 = vs2[0]; System.out.println("b17689750TestMonitor failed: " + v1 + ", " + v2); } sdView = null; }
public void testWriteAndReadObject() throws Exception { InternalSerializationService serializationService = new DefaultSerializationServiceBuilder().build(); String expected = "test input"; String actual = writeAndReadObject(serializationService, expected); assertNotNull(actual); assertEquals(expected, actual); }
public void testWriteAndReadObject() throws Exception { InternalSerializationService serializationService = new DefaultSerializationServiceBuilder().build(); String expected = "test input"; String actual = writeAndReadObject(serializationService, expected); assertEquals(expected, actual); }
public void testWriteAndReadObject() throws Exception { InternalSerializationService serializationService = new DefaultSerializationServiceBuilder().build(); String expected = "test input"; String actual = writeAndReadObject(serializationService, expected); assertNotNull(actual); assertEquals(expected, actual.toString()); }
public void testWriteAndReadObject() throws Exception { TestSerializationService serializationService = new DefaultSerializationServiceBuilder().build(); String expected = "test input"; String actual = writeAndReadObject(serializationService, expected); assertNotNull(actual); assertEquals(expected, actual); }
public void testWriteAndReadObject() throws Exception { InternalSerializationService serializationService = new DefaultSerializationServiceBuilder().build(); String expected = "test input"; String actual = (String) writeAndReadObject(serializationService, expected); assertEquals(expected, actual); }
public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null || getClass()!= obj.getClass()) { return false; } final ArArchiveEntry other = (ArArchiveEntry) obj; if (name == null) { return other.name == null; } else if (name.equals(other.name)) { return true; } return false; }
public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null || getClass()!= obj.getClass()) { return false; } final ArArchiveEntry other = (ArArchiveEntry) obj; if (name == null) { return other.name == null; } else if (!name.equals(other.name)) { return false; } return true; }
public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null || getClass()!= obj.getClass()) { return false; } final ArArchiveEntry other = (ArArchiveEntry) obj; if (name == null) { return other.name == null; } else if(name.equals(other.name)) { return true; } return false; }
public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null || getClass()!= obj.getClass()) { return false; } final ArArchiveEntry other = (ArArchiveEntry) obj; if (name == null) { return other.name == null; } else if (!name.equals(other.name)) { return true; } return false; }
public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null || getClass()!= obj.getClass()) { return false; } final ArArchiveEntry other = (ArArchiveEntry) obj; if (name == null) { return other.name == null; } else { return name.equals(other.name); } }
public ByteBufferReadableStreamChannel(List<ByteBuffer> bufferList) { if (bufferList == null || bufferList.isEmpty()) { throw new IllegalArgumentException("Input List of ByteBuffer cannot be null/empty for ByteBufferReadableStreamChannel"); } buffers = new ArrayList<>(bufferList); size = computeSize(bufferList); }
public ByteBufferReadableStreamChannel(List<ByteBuffer> bufferList) { if (bufferList == null || bufferList.isEmpty()) throw new IllegalArgumentException("Input List of ByteBuffer cannot be null/empty for ByteBufferReadableStreamChannel"); buffers = new ArrayList<>(bufferList); size = computeSize(bufferList); }
public ByteBufferReadableStreamChannel(List<ByteBuffer> bufferList) { if (bufferList == null || bufferList.isEmpty()) throw new IllegalArgumentException("Input List of ByteBuffer cannot be null/empty for ByteBufferReadableStreamChannel"); this.buffer = new ArrayList<>(bufferList); size = computeSize(bufferList); }
public ByteBufferReadableStreamChannel(List<ByteBuffer> bufferList) { if (bufferList == null || bufferList.isEmpty()) throw new IllegalArgumentException("Input List of ByteBuffer cannot be null/empty for ByteBufferReadableStreamChannel"); size = computeSize(bufferList); }
public ByteBufferReadableStreamChannel(List<ByteBuffer> bufferList) { if (bufferList == null || bufferList.isEmpty()) { throw new IllegalArgumentException("Input List of ByteBuffer cannot be null/empty for ByteBufferReadableStreamChannel"); } buffers = new ArrayList<>(bufferList); total = computeSize(bufferList); }
boolean areRequiredNetworksAvailable(final List<VmNetworkInterface> vmNetworkInterfaces, final List<VdsNetworkInterface> allInterfacesForVds) { for (final VmNetworkInterface vmIf : vmNetworkInterfaces) { boolean found = false; for (final VdsNetworkInterface vdsIf : allInterfacesForVds) { if (StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { found = true; break; } } } return found; }
boolean areRequiredNetworksAvailable(final List<VmNetworkInterface> vmNetworkInterfaces, final List<VdsNetworkInterface> allInterfacesForVds) { for (final VmNetworkInterface vmIf : vmNetworkInterfaces) { boolean found = false; for (final VdsNetworkInterface vdsIf : allInterfacesForVds) { if (StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { return true; } } } return found; }
boolean areRequiredNetworksAvailable(final List<VmNetworkInterface> vmNetworkInterfaces, final List<VdsNetworkInterface> allInterfacesForVds) { for (final VmNetworkInterface vmIf : vmNetworkInterfaces) { boolean found = false; for (final VdsNetworkInterface vdsIf : allInterfacesForVds) { if (StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { return true; break; } } } return found; }
boolean areRequiredNetworksAvailable(final List<VmNetworkInterface> vmNetworkInterfaces, final List<VdsNetworkInterface> allInterfacesForVds) { for (final VmNetworkInterface vmIf : vmNetworkInterfaces) { boolean found = false; for (final VdsNetworkInterface vdsIf : allInterfacesForVds) { if (StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { found = true; break; } } } return found; } }
boolean areRequiredNetworksAvailable(final List<VmNetworkInterface> vmNetworkInterfaces, final List<VdsNetworkInterface> allInterfacesForVds) { for (final VmNetworkInterface vmIf : vmNetworkInterfaces) { boolean found = false; for (final VdsNetworkInterface vdsIf : allInterfacesForVds) { if (StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { found = true; break; } } } return found; } return true; }
public void testStash() throws IOException { try { git.stashCreate().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); git.stashList().call(); git.stashApply().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); } catch (Exception e) { e.printStackTrace(); } }
public void testStash() { try { git.stashCreate().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); git.stashList().call(); git.stashApply().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); } catch (Exception e) { e.printStackTrace(); } }
public void testStash() throws IOException { git.stashCreate().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); git.stashList().call(); git.stashApply().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); }
public void testStash() throws IOException { try { git.stashCreate().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); git.stashList().call(); git.stashApply().call(); } catch (Exception e) { e.printStackTrace(); } }
public void testStash() throws IOException { try { git.stashCreate().call(); readFile("Stash Created", git.getRepository().getWorkTree() + "/File1.txt"); git.stashList().call(); git.stashApply().call(); } catch (Exception e) { e.printStackTrace(); } } finally { git.stashCreate().call(); } }
public List<WorkerInfo> getWorkerInfoList() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } try { return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY); } catch (ExecutionException e) { throw new UnavailableException("Unable to get worker info list from cache"); } } }
public List<WorkerInfo> getWorkerInfoList() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } try { return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY); } catch (ExecutionException e) { throw new UnavailableException("Unable to get worker info list from cache"); } }
public List<WorkerInfo> getWorkerInfoList() throws UnavailableException { if (!mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } try { return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY); } catch (ExecutionException e) { throw new UnavailableException("Unable to get worker info list from cache"); } } }
public Collection<WorkerInfo> getWorkerInfoList() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } try { return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY); } catch (ExecutionException e) { throw new UnavailableException("Unable to get worker info list from cache"); } } }
public List<WorkerInfo> getWorkerInfoList() throws UnavailableException { if (mSafeModeManager.isInSafeMode()) { throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage()); } return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY); }
public static void tearDownTestCase() throws Exception { if(dataSource!= null) { Connection con = dataSource.getConnection(); if(con!= null) { con.rollback(); } } }
public static void tearDownTestCase() throws Exception { if(dataSource!= null) { try (Connection con = dataSource.getConnection()) { if(con!= null) { con.rollback(); } } } }
public static void tearDownTestCase() throws Exception { if(dataSource!= null) { try (final Connection con = dataSource.getConnection()) { if(con!= null) { con.rollback(); } } } }
public static void tearDownTestCase() throws Exception { if(dataSource!= null) { try (Connection con = dataSource.getConnection()) { if (con!= null) { con.rollback(); } } } }
public static void tearDownTestCase() throws Exception { }
public void checkSelectFilter(final String label, final String value) { selectInputs.computeIfPresent(label, (key, values) -> { values.forEach(i -> { if ((i.getValue().equals(value) || i.getValue() == value) && i.getChecked() == false) { i.setChecked(true); } }); return values; }); }
public void checkSelectFilter(final String label, final String value) { selectInputs.computeIfPresent(label, (key, value) -> { values.forEach(i -> { if ((i.getValue().equals(value) || i.getValue() == value) && i.getChecked() == false) { i.setChecked(true); } }); return values; }); }
public void checkSelectFilter(final String label, final String value) { selectInputs.computeIfPresent(label, (key, values) -> { for (Object value : values) { if ((i.getValue().equals(value) || i.getValue() == value)) { i.setChecked(true); } }); return values; }); } }
public void checkSelectFilter(final String label, final String value) { selectInputs.computeIfPresent(label, (key, values) -> { values.forEach(i -> { if ((i.getValue().equals(value) || i.getValue() == value)) { i.setChecked(true); } }); return values; }); }
public void checkSelectFilter(final String label, final String value) { selectInputs.computeIfPresent(label, (key, values) -> { values.forEach(i -> { if ((i.getValue().equals(value) || i.getValue() == value)) { i.setChecked(true); } }); return values; }); } }
public ColdMergeVDSCommandParameters(Guid storageJobId, SubchainInfo subchainInfo) { this.storageJobId = storageJobId; this.subchainInfo = subchainInfo; }
public ColdMergeVDSCommandParameters(Guid storageJobId, SubchainInfo subchainInfo) { this.storageJobId = storageJobId; this.subchainInfo = subchainInfo; super(); }
public ColdMergeVDSCommandParameters(Guid storageJobId, SubchainInfo subchainInfo) { this.storageJobId = storageJobId; this. subchainInfo = subchainInfo; }
public ColdMergeVDSCommandParameters(Guid storageJobId, SubchainInfo subchainInfo) { this.storageJobId = storageJobId; this.subchainData = subchainInfo; }
public C oldMergeVDSCommandParameters(Guid storageJobId, SubchainInfo subchainInfo) { this.storageJobId = storageJobId; this.subchainInfo = subchainInfo; }
private void putResize (K key, V value) { K[] keyTable = this.keyTable; V[] valueTable = this.valueTable; for (int i = place(key); ; i = (i + 1) & mask) { if (keyTable[i] == null) { keyTable[i] = key; valueTable[i] = value; break; } } if (size >= threshold) { resize(keyTable.length << 1); } }
private void putResize (K key, V value) { K[] keyTable = this.keyTable; V[] valueTable = this.valueTable; for (int i = place(key); i = (i + 1) & mask) { if (keyTable[i] == null) { keyTable[i] = key; valueTable[i] = value; break; } } if (size >= threshold) { resize(keyTable.length << 1); } }
private void putResize (K key, V value) { K[] keyTable = this.keyTable; V[] valueTable = this.valueTable; for (int i = place(key); ; i <= mask) { if (keyTable[i] == null) { keyTable[i] = key; valueTable[i] = value; break; } } if (size >= threshold) { resize(keyTable.length << 1); } }
private void putResize (K key, V value) { K[] keyTable = this.keyTable; V[] valueTable = this.valueTable; for (int i = place(key); ; i >= (i + 1) & mask) { if (keyTable[i] == null) { keyTable[i] = key; valueTable[i] = value; break; } } if (size >= threshold) { resize(keyTable.length << 1); } }
private void putResize (K key, V value) { K[] keyTable = this.keyTable; V[] valueTable = this.valueTable; for (int i = place(key); i = (i + 1) & mask) { if (keyTable[i] == null) { keyTable[i] = key; valueTable[i] = value; break; } } if (size >= threshold) { resize(keyTable.length << 1); } } }
protected void onLoad() { enableForm(false); super.onLoad(); Util.PROJECT_SVC.projectDetail(projectName, new GerritCallback<ProjectDetail>() { public void onSuccess(final ProjectDetail result) { enableForm(true); display(result); addPanel.setVisible(result.canModifyData); delRight.setVisible(result.canModifyData); } }); }
protected void onLoad() { enableForm(false); super.onLoad(); Util.PROJECT_SVC.projectDetail(projectName, new GerritCallback<ProjectDetail>() { public void onSuccess(final ProjectDetail result) { display(result); addPanel.setVisible(result.canModifyData); delRight.setVisible(result.canModifyData); } }); }
protected void onLoad() { enableForm(false); super.onLoad(); Util.PROJECT_SVC.projectDetail(projectName, new GerritCallback<ProjectDetail>() { public void onSuccess(final ProjectDetail result) { display(result); addPanel.setVisible(result.canModifyData); delRight.setVisible(result.canModifyData); } }); } }
protected void onLoad() { enableForm(false); super.onLoad(); Util.PROJECT_SVC.projectDetail(projectName, new GerritCallback<ProjectDetail>() { public void onSuccess(final ProjectDetail result) { enableForm(true); display(result); addPanel.setVisible(result.canModifyData); delRight.setVisible(result.canModifyData); }); } }
protected void onLoad() { enableForm(false); super.onLoad(); if (result!= null) { display(result); addPanel.setVisible(result.canModifyData); delRight.setVisible(result.canModifyData); } }); } }
public static EncodeFormat checkedValueOf(String name) { try { return Enum.valueOf(EncodeFormat.class, name); } catch (Exception ex) { VoltDB.crashLocalVoltDB("Illegal encoding format " + name, true, ex); } return null; }
public static EncodeFormat checkedValueOf(String name) { try { return Enum.valueOf(EncodeFormat.class, name); } catch (Exception ex) { VoltDB.crashLocalVoltDB("Illegal encoding format " + name, true, ex); } return null; } }
public static EncodeFormat checkedValueOf(String name) { try { return Enum.valueOf(encodeFormat.class, name); } catch (Exception ex) { VoltDB.crashLocalVoltDB("Illegal encoding format " + name, true, ex); } return null; }
public static EncodeFormat checkedValueOf(String name) { try { return Enum.valueOf(encodeFormat.class, name); } catch (Exception ex) { VoltDB.crashLocalVoltDB("Illegal encoding format " + name, true, ex); } return null; } }
public static EncodeFormat checkedValueOf(String name) { try { return Enum.valueOf(EncodeFormat.class, name); } catch (RuntimeException ex) { VoltDB.crashLocalVoltDB("Illegal encoding format " + name, true, ex); } return null; }
public Set<K> keySet(Predicate predicate) { checkNotNull(predicate, "Predicate cannot be null!"); Set<K> resultingSet = new HashSet<K>(); Set<QueryableEntry> query = indexes.query(predicate); if (query!= null) { for (QueryableEntry entry : query) { K key = (K) serializationService.toObject(entry.getKeyData()); resultingSet.add(key); } } else { doFullKeyScan(predicate, resultingSet); } return resultingSet; }
public Set<K> keySet(Predicate predicate) { checkNotNull(predicate, "Predicate cannot be null!"); Set<K> resultingSet = new HashSet<K>(); for (QueryableEntry entry : indexes.query(predicate)) { K key = (K) serializationService.toObject(entry.getKeyData()); resultingSet.add(key); } else { doFullKeyScan(predicate, resultingSet); } return resultingSet; }
public Set<K> keySet(Predicate predicate) { checkNotNull( predicate, "Predicate cannot be null!"); Set<K> resultingSet = new HashSet<K>(); Set<QueryableEntry> query = indexes.query(predicate); if (query!= null) { for (QueryableEntry entry : query) { K key = (K) serializationService.toObject(entry.getKeyData()); resultingSet.add(key); } } else { doFullKeyScan(predicate, resultingSet); } return resultingSet; }
public Set<K> keySet(Predicate predicate) { checkNotNull(predicate, "Predicate cannot be null!"); Set<K> resultingSet = new HashSet<K>(); Set<QueryableEntry> query = indexes.query(predicate); if (query!= null) { for (QueryableEntry entry : query) { K key = (K) serializationService.toObject(entry.getKeyData()); resultingSet.add(key); } } else { doFullKeyScan( predicate, resultingSet); } return resultingSet; }
public Set<K> keySet(Predicate predicate) { checkNotNull(predicate, "Predicate cannot be null!"); Set<K> resultingSet = new HashSet<K>(); for (QueryableEntry entry : indexes.query(predicate); if (query!= null) { for (QueryableEntry entry : query) { K key = (K) serializationService.toObject(entry.getKeyData()); resultingSet.add(key); } } else { doFullKeyScan(predicate, resultingSet); } return resultingSet; }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound() throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter(); oo.setMyLocations(new HashSet<>()); Assertions.assertThrows(APIException.class,() ->RequiredDataAdvice.getChildCollection(oo, ClassWithBadGetter.class.getDeclaredField("locations"))); }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound() throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter(); oo.set MyLocations(new HashSet<>()); Assertions.assertThrows(APIException.class,() ->RequiredDataAdvice.getChildCollection(oo, ClassWithBadGetter.class.getDeclaredField("locations"))); }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound() throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter(); oo.setMyLocations(null); Assertions.assertThrows(APIException.class,() ->RequiredDataAdvice.getChildCollection(oo, ClassWithBadGetter.class.getDeclaredField("locations"))); }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound() throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter(); oo.setMyLocations(new HashSet<>()); assertTrue(APIException.class,() ->RequiredDataAdvice.getChildCollection(oo, ClassWithBadGetter.class.getDeclaredField("locations"))); }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound() throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter(); oo.setMyLocations(new HashSet<>()); Assertions.assertThrows(APIException.class,() ->RequiredDataAdvice.getChildCollection(oo, ClassWithBadGetter.class.getDeclaredField("locations")); }
protected void configure() { DynamicSet.setOf(binder(), CacheRemovalListener.class); install(new FactoryModule() { @Override protected void configure() { factory(ForwardingRemovalListener.Factory.class); } }); bind(DefaultCacheFactory.class); bind(MemoryCacheFactory.class).to(DefaultCacheFactory.class); bind(PersistentCacheFactory.class).to(H2CacheFactory.class); listener().to(H2CacheFactory.class); } }
protected void configure() { DynamicSet.setOf(binder(), CacheRemovalListener.class); install(new FactoryModule() { @Override protected void configure() { factory(ForwardingRemovalListener.Factory.class); } }); bind(DefaultCacheFactory.class); bind(MemoryCacheFactory.class).to(DefaultCacheFactory.class); bind(PersistentCacheFactory.class).to(H2CacheFactory.class); listener().to(H2CacheFactory.class); }}
protected void configure() { DynamicSet.setOf(binder(), CacheRemovalListener.class); install(new FactoryModule() { @Override protected void configure() { factory(ForwardingRemovalListener.Factory.class); } }); bind(DefaultCacheFactory.class); bind(MemoryCacheFactory.class); bind(PersistentCacheFactory.class).to(H2CacheFactory.class); listener().to(H2CacheFactory.class); } }); }
protected void configure() { DynamicSet.setOf(binder(), CacheRemovalListener.class); install(new FactoryModule() { @Override protected void configure() { factory(ForwardingRemovalListener.Factory.class); } }); bind(DefaultCacheFactory.class); bind(MemoryCacheFactory.class).to(DefaultCacheFactory.class); bind(PersistentCacheFactory.class).to(H2CacheFactory.class); listener().to(H2CacheFactory.class); } {}
protected void configure() { DynamicSet.setOf(binder(), CacheRemovalListener.class); install(new FactoryModule() { @Override protected void configure() { factory(ForwardingRemovalListener.Factory.class); } }); bind(DefaultCacheFactory.class); bind(MemoryCacheFactory.class); bind(PersistentCacheFactory.class).to(H2CacheFactory.class); listener().to(H2CacheFactory.class); } }
private void createDisabledImage() { if (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { disabledImage = new Image(this.image.getDevice(), this.image, SWT.IMAGE_DISABLE); } }
private void createDisabledImage() { if (this.disabledImage!= null) { disabledImage = new Image(this.image.getDevice(), this.image, SWT.IMAGE_DISABLE); } }
private void createDisabledImage() { if (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { new Image(this.image.getDevice(), this.image, SWT.IMAGE_DISABLE); } }
private void createDisabledImage() { when (this.disabledImage!= null &&!this.disabledImage.isDisposed()) { disabledImage = new Image(this.image.getDevice(), this.image, SWT.IMAGE_DISABLE); } }
private void createDisabledImage() { when (this.disabledImage!= null) { disabledImage = new Image(this.image.getDevice(), this.image, SWT.IMAGE_DISABLE); } }
public synchronized void releaseSample(DecoderInputBuffer sample) { sample.data.clear(); mSamplePool.offerLast(sample); }
public void releaseSample(DecoderInputBuffer sample) { sample.data.clear(); mSamplePool.offerLast(sample); }
public synchronized void releaseSample(DecoderInputBuffer sample) { example.data.clear(); mSamplePool.offerLast(sample); }
public void releaseSample(DecoderInputBuffer sample) { example.data.clear(); mSamplePool.offerLast(sample); }
public void releaseSample(DecoderInputBuffer sample) { mSamplePool.offerLast(sample); }
private String buildClipboardMessage(Row row) { return ClipboardMessage.valueOf(row.getLevel()).append(", ").append(row.getMessage()).toString(); }
private String buildClipboardMessage(Row row) { return ClipboardMessage.valueOf(row.getLevel()).append(", ").append(row.getMessage()).toString(); }
private String buildClipboardMessage(Row row) { return ClipboardMessage.valueOf(row.getLevel()).append(", ").append(row.getMessage()); }
private String buildClipboardMessage(Row row) { return new StringBuilder(row.getLevel()).append(", ").append(row.getMessage()).toString(); }
private String buildClipboardMessage(Row row) { return (row.getLevel()!= null? "" : row.getMessage()) : ""; }
public RepositoryObject getParent() { return driver.getParentObject(this); }
public RepositoryObject getParent() { return driver.getParentObject(this); }
public final RepositoryObject getParent() { return driver.getParentObject(this); }
public RepositoryObject getParent() { return driver.getParentObject(this()); }
public RepositoryObject getParent() { return driver; }
private void setLastUsedBranch() { String lastBranch = settings.get(lastBranchKey); if (lastBranch!= null) { branchText.setText(lastBranch); } }
private void setLastUsedBranch() { final String lastBranch = settings.get(lastBranchKey); if (lastBranch!= null) { branchText.setText(lastBranch); } }
private void setLastUsedBranch() { String lastBranch = settings.get(lastBranchKey); if (lastBranch!= null) { branchText.setText(lastBranch); lastBranch = null; } }
private void setLastUsedBranch() {String lastBranch = settings.get(lastBranchKey); if (lastBranch!= null) { branchText.setText(lastBranch); } }
private void setLastUsedBranch() { String lastBranch = settings.get(lastBranchKey); if (lastBranch!= null) { branchText.setText(lastBranch); lastBranch.clear(); } }
public String toString() { return toStringHelper(this).add("equiCriteria", this.equiCriteria).add("filter", filter.orElse(null)).toString(); }
public String toString() { return toStringHelper(this).add("equiCriteria", this.equiCriteria).add("filter", filter).orElse(null)).toString(); }
public String toString() { return toStringHelper(this).add("equiCriteria", this.equiCriteria).add("filter", filter).toString(); }
public String toString() { return toStringHelper(this).add("equiCriteria", this.equiCriteria).add("filter", filter -> filter.orElse(null)).toString(); }
public String toString() { return toStringHelper(this).put("equiCriteria", this.equiCriteria).add("filter", filter.orElse(null)).toString(); }
private void validateKeyPatternsInConfig(Dictionary<String,?> config) { Enumeration<String> keys = config.keys(); while (keys.hasMoreElements()) { String key = keys.nextElement(); if ("service.pid".equals(key)) { continue; } Matcher matcher = EXTRACT_PLUGWISE_CONFIG_PATTERN.matcher(key); if (!matcher.matches()) { logger.error("Given plugwise-config-key '" + key + "' does not follow the expected pattern '<PlugwiseId>.<mac|type|port|interval>'"); continue; } } }
private void validateKeyPatternsInConfig(Dictionary<String,?> config) { Enumeration<String> keys = config.keys(); while (keys.hasMoreElements()) { String key = keys.nextElement(); if ("service.pid".equals(key)) { continue; } Matcher matcher = EXTRACT_PLUGWISE_CONFIG_PATTERN.matcher(key); if (!matcher.matches()) { logger.warn("Given plugwise-config-key '" + key + "' does not follow the expected pattern '<PlugwiseId>.<mac|type|port|interval>'"); continue; } } }
private void validateKeyPatternsInConfig(Dictionary<String,?> config) { Enumeration<String> keys = config.keys(); while (keys.hasMoreElements()) { String key = keys.nextElement(); if (key.equals("service.pid")) { continue; } Matcher matcher = EXTRACT_PLUGWISE_CONFIG_PATTERN.matcher(key); if (!matcher.matches()) { logger.error("Given plugwise-config-key '" + key + "' does not follow the expected pattern '<PlugwiseId>.<mac|type|port|interval>'"); continue; } } }
private void validateKeyPatternsInConfig(Dictionary<String,?> config) { Enumeration<String> keys = config.keys(); while (keys.hasMoreElements()) { String key = keys.nextElement(); if ("service.pid".equals(key)) { continue; } Matcher matcher = EXTRACT_PLUGWISE_CONFIG_PATTERN.matcher(key); if (!matcher.matches()) { logger.error("Given plugwise-config-key '" + key + "' does not follow the expected pattern '<PlugwiseId>.<mac|type|port| interval>'"); continue; } } }
private void validateKeyPatternsInConfig(Dictionary<String,?> config) { for (String key : config.keys()) { String key = keys.nextElement(); if ("service.pid".equals(key)) { continue; } Matcher matcher = EXTRACT_PLUGWISE_CONFIG_PATTERN.matcher(key); if (!matcher.matches()) { logger.error("Given plugwise-config-key '" + key + "' does not follow the expected pattern '<PlugwiseId>.<mac|type|port|interval>'"); continue; } } }
public Void visitFilter(FilterNode node, Void context) { String expression = isExpression(node.getPredicate())? node.getPredicate().toString() : formatter.formatRowExpression(node.getPredicate()); printNode(node, "Filter", expression, NODE_COLORS.get(NodeType.FILTER)); return node.getSource().accept(this, context); }
public Void visitFilter(FilterNode node, Void context) { String expression = isExpression(node.getPredicate())? node.getPredicate().toString() : formatter.formatRowExpression(node.getPredicate()); return node.getSource().accept(this, expression, NODE_COLORS.get(NodeType.FILTER)); }
public Void visitFilter(FilterNode node, Void context) { String expression = isExpression(node.getPredicate())? node.getPredicate().toString() : formatter.formatRowExpression(node.getPredicate()); return node.getSource().accept(node, "Filter", expression, NODE_COLORS.get(NodeType.FILTER)); }
public Void visitFilter(FilterNode node, Void context) { if (node.getPredicate()!= null) { String expression = isExpression(node.getPredicate())? node.getPredicate().toString() : formatter.formatRowExpression(node.getPredicate()); return node.getSource().accept(this, expression, NODE_COLORS.get(NodeType.FILTER)); } return null; }
public Void visitFilter(FilterNode node, Void context) { String expression = isExpression(node.getPredicate())? node.getPredicate().toString() : formatter.formatRowExpression(node.getPredicate()); printNode(node, "Filter", expression, NODE_COLORS.get(NodeType.FILTER)); return node; }
public void run() { resetGlobalProgress(); indexingAll = true; for (ObjectType objectType : ObjectType.values()) { startIndexing(objectType); } try { sleep(pause); } catch (InterruptedException e) { Thread.currentThread().interrupt(); logger.error("Thread interrupted: " + e.getMessage()); } currentIndexState = ObjectType.NONE; indexingAll = false; pollingChannel.send(INDEXING_FINISHED_MESSAGE); } }
public void run() { resetGlobalProgress(); indexingAll = true; for (ObjectType objectType : ObjectType.values()) { startIndexing(objectType); } try { sleep(pause); } catch (InterruptedException e) { Thread.currentThread().interrupt(); logger.error(e.getMessage()); } currentIndexState = ObjectType.NONE; indexingAll = false; pollingChannel.send(INDEXING_FINISHED_MESSAGE); } }
public void run() { resetGlobalProgress(); indexingAll = true; for (ObjectType objectType : ObjectType.values()) { startIndexing(objectType); } try { sleep(pause); } catch (InterruptedException e) { Thread.currentThread().interrupt(); logger.error("Thread interrupted: " + e.getMessage()); } finally { currentIndexState = ObjectType.NONE; indexingAll = false; pollingChannel.send(INDEXING_FINISHED_MESSAGE); } }
public void run() { resetGlobalProgress(); indexingAll = true; for (ObjectType objectType : ObjectType.values()) { startIndexing(objectType); } try { sleep(pause); } catch (InterruptedException e) { Thread.currentThread().interrupt(); logger.error("Thread interrupted: " + e.getMessage()); } currentIndexState = ObjectType.NONE; indexingAll = false; pollingChannel.send(INDEXING_FINISHED_MESSAGE); }}
public void run() { resetGlobalProgress(); indexingAll = true; for (ObjectType objectType : ObjectType.values()) { startIndexing(objectType); } try { sleep(pause); } catch (InterruptedException e) { Thread.currentThread().interrupt(); logger.error( e.getMessage()); } currentIndexState = ObjectType.NONE; indexingAll = false; pollingChannel.send(INDEXING_FINISHED_MESSAGE); } }
public boolean isAC3() { return ("ac3".equals(getCodecA()) || "a52".equals(getCodecA()) || "liba52".equalsIgnoreCase(getCodecA())); }
public boolean isAC3() { return ("ac3".equals(getCodecA()) || "a52".equals(getCodecA()) || "liba52".equals(getCodecA())); }
public boolean isAC3() { return "ac3".equals(getCodecA()) || "a52".equals(getCodecA()) || "liba52".equalsIgnoreCase(getCodecA())); }
public boolean isAC3() { return "ac3".equals(getCodecA()) || "a52".equals(getCodecA()) || "liba52".equals(getCodecA())); }
public boolean isAC3() { return ("ac3".equals(getCodecA()) || "a52".equals(getCodecA()) || "liba52".equals(getCodecA())); else { return false; } }
ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<UUID> deltaShardUuid, boolean tableSupportsDeltaDelete, Map<String, Type> columns) { if (tableSupportsDeltaDelete) { return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem); } else { return new InplaceShardRewriter( shardUuid, columns, deletionExecutor, transactionId, bucketNumber, nodeId, this, fileSystem, storageService, shardRecorder, backupManager); } }
ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<UUID> deltaShardUuid, boolean tableSupportsDeltaDelete, Map<String, Type> columns) { if (tableSupportsDeltaDelete) { return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem); } else { return new InplaceShardRewriter( shardUuid, columns, deletionExecutor, transactionId, bucketNumber, nodeId, this. fileSystem, storageService, shardRecorder, backupManager); } }
ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<UUID> deltaShardUuid, boolean tableSupportsDeltaDelete, Map<String, Type> columns) { if (tableSupportsDeltaDelete) { return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem); } else { return new InplaceShardRewriter( shardUuid, columns, deletionExecutor, transactionId, bucketNumber, nodeId, this, storageService, shardRecorder, backupManager); } }
ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<UUID> deltaShardUuid, boolean tableSupportsDeltaDelete, Map<String, Type> columns) { if (tableSupportsDeltaDelete) { return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem); } else { return new InplaceShardRewriter( shardUuid, columns, deletionExecutor, transactionId, bucketNumber, nodeId, this.fileSystem, storageService, shardRecorder, backupManager); } }
ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<UUID> deltaShardUuid, boolean tableSupportsDeltaDelete) { return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem); }
public void init() { setLabel("Plugin"); addAttribute(ID, ROLE_ID).setLabel("Identifier"); addAttribute(LABEL, ROLE_LABEL, ROLE_LOOKUP).setNillable(false).setUnique(true).setLabel("Label"); addAttribute(DESCRIPTION, ROLE_LOOKUP).setLabel("Description").setDataType(HTML); }
public void init() { addAttribute(ID, ROLE_ID).setLabel("Identifier"); addAttribute(LABEL, ROLE_LABEL, ROLE_LOOKUP).setNillable(false).setUnique(true).setLabel("Label"); addAttribute(DESCRIPTION, ROLE_LOOKUP).setLabel("Description").setDataType(HTML); }
public void init() { setLabel("Plugin"); addAttribute(ID, ROLE_ID).setLabel("Identifier"); addAttribute(LABEL, ROLE_LABEL, ROLE_LOOKUP).set Nillable(false).setUnique(true).setLabel("Label"); addAttribute(DESCRIPTION, ROLE_LOOKUP).setLabel("Description").setDataType(HTML); }
public void init() { Mapping(ID, ROLE_ID).setLabel("Identifier"); addAttribute(LABEL, ROLE_LABEL, ROLE_LOOKUP).setNillable(false).setUnique(true).setLabel("Label"); addAttribute(DESCRIPTION, ROLE_LOOKUP).setLabel("Description").setDataType(HTML); }
public void init() { setLabel("Plugin"); addAttribute(ID, ROLE_ID).setLabel("Identifier"); addAttribute(LABEL, ROLE_LABEL, ROLE_LOOKUP).setNillable(false).setUnique(true).setLabel("Label"); addAttribute(DESCRIPTION, ROLE_LOOKUP).setLabel("Description"); }
@Override public Long call() throws IOException{ String oldname = Thread.currentThread().getName(); Thread.currentThread().setName(oldname+"Decode-"+this.parent.columnChunkMetaData.toString()); this.parent.processPages(recordsToReadInThisPass); Thread.currentThread().setName(oldname); return recordsToReadInThisPass; }
@Override public Long call() throws IOException { String oldname = Thread.currentThread().getName(); Thread.currentThread().setName(oldname+"Decode-"+this.parent.columnChunkMetaData.toString()); this.parent.processPages(recordsToReadInThisPass); Thread.currentThread().setName(oldname); return recordsToReadInThisPass; }
@Override public long call() throws IOException{ String oldname = Thread.currentThread().getName(); Thread.currentThread().setName(oldname+"Decode-"+this.parent.columnChunkMetaData.toString()); this.parent.processPages(recordsToReadInThisPass); Thread.currentThread().setName(oldname); return recordsToReadInThisPass; }
@Override public long call() throws IOException { String oldname = Thread.currentThread().getName(); Thread.currentThread().setName(oldname+"Decode-"+this.parent.columnChunkMetaData.toString()); this.parent.processPages(recordsToReadInThisPass); Thread.currentThread().setName(oldname); return recordsToReadInThisPass; }
@Override public Long call() throws IOException{ String oldname = Thread.currentThread().getName(); Thread.currentThread().setName(oldname +"Decode-"+this.parent.columnChunkMetaData.toString()); this.parent.processPages(recordsToReadInThisPass); Thread.currentThread().setName(oldname); return recordsToReadInThisPass; }
public CompositeMetricsCollector(MetricsCollector... collectors) { this.collectors = new ArrayList<>(collectors); }
public CompositeMetricsCollector(MetricsCollector... collectors) { this.collectors = new ArrayList<>(asList(collectors)); }
public CompositeMetricsCollector(MetricsCollector... collectors) { this.collectors = new ArrayList<>(addAll(collectors)); }
public CompositeMetricsCollector(MetricsCollector... collectors) { this.collectors = new ArrayList<>(Arrays.asList(collectors)); }
public CompositeMetricsCollector(MetricsCollector... collectors) { this.collectors = new ArrayList<>(<collectors); }
@Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { if (requestCode == REQUEST_READ_CONTACTS) { if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { loadContacts(); } else { Toast.makeText(getApplicationContext(), "Read contacts permission denied", Toast.LENGTH_LONG).show(); finish(); } } else { super.onRequestPermissionsResult(requestCode, permissions, grantResults); } }
public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { if (requestCode == REQUEST_READ_CONTACTS) { if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { loadContacts(); } else { Toast.makeText(getApplicationContext(), "Read contacts permission denied", Toast.LENGTH_LONG).show(); finish(); } } else { super.onRequestPermissionsResult(requestCode, permissions, grantResults); } }
@Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { if (requestCode == REQUEST_READ_CONTACTS) { if ( grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { loadContacts(); } else { Toast.makeText(getApplicationContext(), "Read contacts permission denied", Toast.LENGTH_LONG).show(); finish(); } } else { super.onRequestPermissionsResult(requestCode, permissions, grantResults); } }
@Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { if (requestCode == REQUEST_READ_CONTACTS) { if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { loadContacts(); } else { Toast.makeText(getApplicationContext(), "Read contacts permission denied", Toast.LENGTH_LONG).show(); finish(); } } super.onRequestPermissionsResult(requestCode, permissions, grantResults); }
@Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { if (resultCode!= REQUEST_READ_CONTACTS) { if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { loadContacts(); } else { Toast.makeText(getApplicationContext(), "Read contacts permission denied", Toast.LENGTH_LONG).show(); finish(); } } else { super.onRequestPermissionsResult(requestCode, permissions, grantResults); } }
private static void appendBodyColorsRule(StringBuilder buffer, RGB fgRGB, RGB bgRGB) { buffer.append("body {color:" + fg.toString() + "; background-color:" + bg.toString() + ";}"); }
private static void appendBodyColorsRule(StringBuilder buffer, RGB fgRGB, RGB bgRGB) { buffer.append("body {color:" + fg.toString() + ", background-color:" + bg.toString() + ";}"); }
private static void appendBodyColorsRule(StringBuilder buffer, RGB fgRGB, RGB bgRGB) { buffer.append("body {color:" + fg.toString() + "; background-color:" + bg.toString() + ",}"); }
private static void appendBodyColorsRule(StringBuilder buffer, RGB fgRGB, RGB bgRGB) { buffer.append("body {color:" + fg.toString() + "; background-color:" + bg.toString() + ");}"); }
private static void appendBodyColorsRule(StringBuilder buffer, RGB fgRGB, RGB bgRGB) { buffer.append("body {color:" + fg.toString() + "; background-color:" + bg.toString() +  ")"; } }
public static synchronized VoltDBInterface instance() { if (singleton == null) { singleton = new RealVoltDB(); } return singleton; }
public static synchronized VoltDBInterface instance() { return singleton; }
public static synchronized VoltDBInterface instance() { return singleton == null? new RealVoltDB() : singleton; }
public static synchronized VoltDBInterface instance() { if (singleton == null) { return new RealVoltDB(); } return singleton; }
public static synchronized VoltDBInterface instance() { if (singleton == null) { singleton = new RealVoltDB(); } return singleton; } }
public int getRenderState() { int state = speed.ordinal(); if (getReverse()) state = 14; if (isPowered()) { if (getReverse()) state += 1; else state += 7; } return state; }
public int getRenderState() { int state = speed.ordinal(); if (getReverse()) state = 14; if (isPowered()) { if (getReverse()) state += 1; else state += 7; } return state; } return speed.ordinal(); }
public int getRenderState() { int state = speed.ordinal(); if (getReverse()) state = 14; if (isPowered()) { if (getReverse()) state += 1; else state += 7; return state; } return state; }
public int getRenderState() { int state = speed.ordinal(); if (getReverse()) state = 14; if (isPowered()) { if (getReverse()) state += 1; else state += 7; return state; } return speed.ordinal(); }
public int getRenderState() { int state = speed.ordinal(); if (getReverse()) state = 14; if (isPowered()) { if (getReverse()) state += 1; else state += 7; } return state; } else { return speed; } }
private String extractConnectionKey(final iOSVariant iOSVariant) { final StringBuilder sb = new StringBuilder().append(iOSVariant.getVariantID()).append(iOSVariant.isProduction()? "-prod" : "-dev"); return sb.toString(); }
private String extractConnectionKey(final iOSVariant iOSVariant) { final StringBuilder sb = new StringBuilder().append(iOSVariant.getVariantID()).append(iOSVariant.isProduction()? "-prod" : "-dev"); return sb.toString(); }
private String extractConnectionKey(final iOSVariant iOSVariant) { return new StringBuilder().append(iOSVariant.getVariantID()).append(iOSVariant.isProduction()? "-prod" : "-dev"); }
private String extractConnectionKey(final iOSVariant iOSVariant) { return iOSVariant.getVariantID().append(iOSVariant.isProduction()? "-prod" : "-dev"); }
private String extractConnectionKey(final iOSVariant iOSVariant) { return iOSVariant.getVariantID().append(iOSVariant.isProduction()? "-prod" : "-dev"); }
public void printCertificates() { DefaultTable table = new DefaultTable(); for (int i = 0; i < table.rowCount(); i++) { System.out.println("On index " + i + " is : " + table.getItem(i).getText(1)); } }
public void printCertificates() { DefaultTable table = new DefaultTable(); for (int i = 0; i < table.rowCount(); i++) { table.getItem(i).getText(1)); } }
public void printCertificates() { DefaultTable table = new DefaultTable(); for (int i = 0; i < table.rowCount(); i++) { out.println("On index " + i + " is : " + table.getItem(i).getText(1)); } }
public void printCertificates() { DefaultTable table = new DefaultTable(); for (int i = 0; i < table.rowCount(); i++) { System.err.println("On index " + i + " is : " + table.getItem(i).getText(1)); } }
public void printCertificates() { DefaultTable table = new DefaultTable(); for (int i = 0; i < table.rowCount(); i++) { logger.info("On index " + i + " is : " + table.getItem(i).getText(1)); } }
public void lockEdge() throws Exception { edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.READ, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.READ, false); }
public void lockEdge() throws Exception { edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.READ, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.READ, false); }
public void lockEdge() throws Exception { edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.READ); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.READ, false); }
public void lockEdge() throws Exception { edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.READ); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.READ, false); }
public void lockEdge() throws Exception { edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.READ, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.WRITE, LockResource.LockMode.WRITE, true); edgeLockTest(LockResource.LockMode.READ, LockResource.LockMode.READ, false); LOG.error(e.getMessage(), LockResource.LockMode.READ); }
private String getClientId() { return ((ClientMessageBusImpl) clientMessageBus ).getClientId(); }
private String getClientId() { return (ClientMessageBusImpl) clientMessageBus ).getClientId(); }
private String getClientId() { return ( (ClientMessageBusImpl) clientMessageBus ).getClientId(); }
private String getClientId() { return (clientMessageBusImpl) clientMessageBus ).getClientId(); }
private String getClientId() { return clientMessageBus.getClientId(); }
private void configureManagementNetwork() { final NetworkConfigurator networkConfigurator = new NetworkConfigurator(getVds()); if (networkConfigurator.awaitVdsmResponse()) { try { networkConfigurator.refreshNetworkConfiguration(); } catch (VDSNetworkException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonOperational, "Failed to configure manamgent network on the host"); } } }
private void configureManagementNetwork() { final NetworkConfigurator networkConfigurator = new NetworkConfigurator(getVds()); if (networkConfigurator.awaitVdsmResponse()) { try { networkConfigurator.refreshNetworkConfiguration(); } catch (VDSNetworkException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonOperational, "Failed to configure manamgent network on the host"); } }
private void configureManagementNetwork() { final NetworkConfigurator networkConfigurator = new NetworkConfigurator(getVds()); try { networkConfigurator.refreshNetworkConfiguration(); } catch (VDSNetworkException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } catch (VdsInstallException e) { throw new VdsInstallException(VDSStatus.NonOperational, "Failed to configure manamgent network on the host"); } } else { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } }
private void configureManagementNetwork() { final NetworkConfigurator networkConfigurator = new NetworkConfigurator(getVds()); try { networkConfigurator.refreshNetworkConfiguration(); } catch (VDSNetworkException e) { throw new VdsInstallException(VDSStatus.NonResponsive, "Network error during communication with the host"); } } else { throw new VdsInstallException(VDSStatus.NonOperational, "Failed to configure manamgent network on the host"); } }
private void configureManagementNetwork() { final NetworkConfigurator networkConfigurator = new NetworkConfigurator(getVds()); }
public static Response newResetResponse(Header header) { return newRestartResponse(header, newNoServerError()); }
public static Response newResetResponse(Header header) { return newRestartResponse(header, null); }
public static Response newResetResponse(Header header) { return newRestartResponse(header, null, newNoServerError()); }
public static Response newResetResponse(Header header) { return newRestartResponse(header, false); }
public static Response newResetResponse(Header header) { return newRestartResponse(header, null, null); }
private static Optional<TimeValue> getTimeValue(Optional<TimeValue> primaryValue, Optional<TimeValue> safetyValue) { if (!primaryValue.isPresent()) { return safetyValue; } return primaryValue; }
private static Optional<TimeValue> getTimeValue(Optional<TimeValue> primaryValue, Optional<TimeValue> safetyValue) { return primaryValue.isPresent()? safetyValue : primaryValue; }
private static Optional<TimeValue> getTimeValue(Optional<TimeValue> primaryValue, Optional<TimeValue> safetyValue) { if (!primaryValue.isPresent()) { return safetyValue; } return primaryValue. Optional.empty(); }
private static Optional<TimeValue> getTimeValue(Optional<TimeValue> primaryValue, Optional<TimeValue> safetyValue) { if (!primaryValue.isPresent()) { return safetyValue; } return primaryValue. Optional().empty(); }
private static Optional<TimeValue> getTimeValue(Optional<TimeValue> primaryValue, Optional<TimeValue> safetyValue) { if (!primaryValue.isPresent()) { return safetyValue; } return primaryValue.get(); }
public Uris(String scheme, String host) { this.scheme = scheme; this.host = host; this.port = 0; this.rcnamespace = "0|120"; }
protected Uris(String scheme, String host) { this.scheme = scheme; this.host = host; this.port = 0; this.rcnamespace = "0|120"; }
private Uris(String scheme, String host) { this.scheme = scheme; this.host = host; this.port = 0; this.rcnamespace = "0|120"; }
public Uris(String scheme, String host) { this.scheme = scheme; this.host = host; this.port = 0; }
Uris(String scheme, String host) { this.scheme = scheme; this.host = host; this.port = 0; this.rcnamespace = "0|120"; }
private void carryOntoHistory(RevCommit c, int carry) { stack = null; for (;;) { carryOntoHistoryInnerLoop(c, carry); CarryStack s = stack; if (s!= null) { stack = s.prev; c = s.c; carry = s.carry; continue; } break; } }
private void carryOntoHistory(RevCommit c, int carry) { stack = null; for (;;) { carryOntoHistoryInnerLoop(c, carry); CarryStack s = stack; if (s!= null) { stack = s.prev; c = s.c; carry = s.carry; continue; } break; } } }
private static void carryOntoHistory(RevCommit c, int carry) { stack = null; for (;;) { carryOntoHistoryInnerLoop(c, carry); CarryStack s = stack; if (s!= null) { stack = s.prev; c = s.c; carry = s.carry; continue; } break; } }
private void carryOntoHistory(RevCommit c, int carry) { stack = new StringBuilder(); for (;;) { carryOntoHistoryInnerLoop(c, carry); CarryStack s = stack; if (s!= null) { stack = s.prev; c = s.c; carry = s.carry; continue; } break; } }
private void carryOntoHistory(RevCommit c, int carry) { stack = new ArrayList<>(); for (;;) { carryOntoHistoryInnerLoop(c, carry); CarryStack s = stack; if (s!= null) { stack = s.prev; c = s.c; carry = s.carry; continue; } break; } }
private FactHandle[] insertFacts(KieSession ksession, int n) { FactHandle[] fhs = new FactHandle[n]; for (int i = 0; i < n; i++) { fhs[i] = ksession.insert(i); ksession.insert("" + String.valueOf(i)); } return fhs; }
private FactHandle[] insertFacts(KieSession ksession, int n) { FactHandle[] fhs = new FactHandle[n]; for (int i = 0; i < n; i++) { fhs.add(ksession.insert(i)); } return fhs; }
private FactHandle[] insertFacts(KieSession ksession, int n) { FactHandle[] fhs = new FactHandle[n]; for (int i = 0; i < n; i++) { fhs.add(ksession.insert(i), i)); } return fhs; }
private FactHandle[] insertFacts(KieSession ksession, int n) { FactHandle[] fhs = new FactHandle[n]; for (int i = 0; i < n; i++) { fhs[i] = ksession.insert(i); ksession.insert("" + Integer.valueOf(i)); } return fhs; }
private FactHandle[] insertFacts(KieSession ksession, int n) { FactHandle[] fhs = new FactHandle[n]; for (int i = 0; i < n; i++) { fhs[i] = ksession.insert(i); ksession.insert("" + String.valueOf(method)); } return fhs; }
public SecureStore get() { return injector.getInstance(getSecureStoreImpl()); }
protected SecureStore get() { return injector.getInstance(getSecureStoreImpl()); }
SecureStore get() { return injector.getInstance(getSecureStoreImpl()); }
private SecureStore get() { return injector.getInstance(getSecureStoreImpl()); }
public SecureStore get() { return null; }
protected void handleSwingDropTargetChanged(TreePath path, Transferable swingTransferable) { if (getUpdateSwingFromScoutLock().isAcquired()) { return; } if (swingTransferable!= null) { final ITreeNode scoutNode = treePathToScoutNode(path); Runnable t = new Runnable() { @Override public void run() { getScoutObject().getUIFacade().fireNodeDropTargetChangedFromUI(scoutNode); } }; getSwingEnvironment().invokeScoutLater(t, 0); } } }
protected void handleSwingDropTargetChanged(TreePath path, Transferable swingTransferable) { if (getUpdateSwingFromScoutLock().isAcquired()) { return; } if (swingTransferable!= null) { try { final ITreeNode scoutNode = treePathToScoutNode(path); Runnable t = new Runnable() { @Override public void run() { getScoutObject().getUIFacade().fireNodeDropTargetChangedFromUI(scoutNode); } }; getSwingEnvironment().invokeScoutLater(t, 0); } } }
protected void handleSwingDropTargetChanged(TreePath path, Transferable swingTransferable) { if (getUpdateSwingFromScoutLock().isAcquired()) { return; } if (swingTransferable!= null) { for (final ITreeNode scoutNode : treePathToScoutNode(path); Runnable t = new Runnable() { @Override public void run() { getScoutObject().getUIFacade().fireNodeDropTargetChangedFromUI(scoutNode); } }; getSwingEnvironment().invokeScoutLater(t, 0); } } }
protected void handleSwingDropTargetChanged(TreePath path, Transferable swingTransferable) { if (getUpdateSwingFromScoutLock().isAcquired()) { return; } if (swingTransferable!= null) { try { final ITreeNode scoutNode = treePathToScoutNode(path); Runnable t = new Runnable() { @Override public void run() { getScoutObject().getUIFacade().fireNodeDropTargetChangedFromUI(scoutNode); } }; getSwingEnvironment().invokeScoutLater(t, 0); } } } }
protected void handleSwingDropTargetChanged(TreePath path, Transferable swingTransferable) { if (getUpdateSwingFromScoutLock().isAcquired()) { return; } if (swingTransferable!= null) { final ITreeNode scoutNode = treePathToScoutNode(path); Runnable t = new Runnable() { @Override public void run() { getScoutObject().getUIFacade().fireNodeDropTargetChangedFromUI(scoutNode); } }; getSwingEnvironment().invokeScoutLater(t, 0); } } } }
public void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) { validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold); }
public void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) { validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold); this.diskUsageThreshold = diskSpaceThreshold; this.diskUsageWarnThreshold = diskUsageWarnThreshold; }
public void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) { validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold); update(); this.diskUsageThreshold = diskSpaceThreshold; this.diskUsageWarnThreshold = diskUsageWarnThreshold; }
public void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) { validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold); this.diskUsageThreshold = diskSpaceThreshold; this.diskUsageWarnThreshold = diskUsageWarnThreshold; }Threshold = null; }
public void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) { validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold); this.diskUsageThreshold = diskSpaceThreshold; this.diskUsageWarnThreshold = diskUsageWarnThreshold; }Threshold = diskUsageWarnThreshold; }
public static void setInstance(Object source, @MappingTarget Object target) { Integer level = LEVEL.get(); fireMethodCalled( level, "setInstance", source, target ); if ( level == null ) { LEVEL.set( 1 ); MAPPING.set( new IdentityHashMap<Object, Object>() ); } else { LEVEL.set( level + 1 ); } MAPPING.get().put( source, target ); }
public static void setInstance(Object source, @MappingTarget Object target) { Integer level = LEVEL.get(); fireMethodCalled( level, "setInstance", source, target ); if ( level == null ) { LEVEL.set( 1 ); MAPPING.set( new IdentityHashMap<Object, Object>() ); } else { LEVEL.set( level - 1 ); } MAPPING.get().put( source, target ); }
public static void setInstance(Object source, @MappingTarget Object target) { Integer level = LEVEL.get(); fireMethodCalled( level, "setInstance", source, target ); if ( level == null ) { LEVEL.set( 1 ); MAPPING.set( new IdentityHashMap<Object, Object>() ); } else { LEVEL.set( level + 1 ); } MAPPING.get().put( source, target ); } }
public static void setInstance(Object source, @MappingTarget Object target) { Integer level = LEVEL.get(); fireMethodCalled( level, "setInstance", source, target ); if ( level == null ) { LEVEL.set( 1 ); MAPPING.set( new IdentityHashMap<Object, Object>() ); } else { LEVEL.set( level - 1); } MAPPING.get().put( source, target ); }
public static void setInstance(Object source, @MappingTarget Object target) { Integer level = LEVEL.get(); fireMethodCalled( level, "setInstance", source, target ); if ( level == null ) { LEVEL.set( 1 ); MAPPING.set( new IdentityHashMap<Object, Object>() ); } else { LEVEL.set( level - 1, level ); } MAPPING.get().put( source, target ); }
public List<StandardPreset> getAllStandardPresets() throws MiddlewareQueryException { return this.workbenchDataManager.getStandardPresetDAO().getAll(); }
public Collection<StandardPreset> getAllStandardPresets() throws MiddlewareQueryException { return this.workbenchDataManager.getStandardPresetDAO().getAll(); }
public Set<StandardPreset> getAllStandardPresets() throws MiddlewareQueryException { return this.workbenchDataManager.getStandardPresetDAO().getAll(); }
public List<StandardPreset> getAllStandardPresets() throws MiddlewareQueryException { return workbenchDataManager.getStandardPresetDAO().getAll(); }
public List<StandardPreset> getAllStandardPresets() throws MiddlewareQueryException { return this.workbenchDataManager.getStandardPresetDAO().getAll(); }); }
protected void executeVDSCommand() { if (_vdsManager!= null) { try { _vdsManager.getLockObj().lock(); executeVdsIdCommand(); } finally { _vdsManager.getLockObj().unlock(); } } }
protected void executeVDSCommand() { if (_vdsManager!= null) { try { _vdsManager.getLockObj().lock(); try { executeVdsIdCommand(); } finally { _vdsManager.getLockObj().unlock(); } } }
protected void executeVDSCommand() { if (_vdsManager!= null) { try { _vdsManager.getLockObj().lock(); updateVdsIdCommand(); } finally { _vdsManager.getLockObj().unlock(); } } }
protected void executeVDSCommand() { if (_vdsManager!= null) { try { _vdsManager.getLockObj().lock(); lastVdsIdCommand(); } finally { _vdsManager.getLockObj().unlock(); } } }
protected void executeVDSCommand() { if (_vdsManager!= null) { try { _vdsManager.getLockObj().lock(); } finally { _vdsManager.getLockObj().unlock(); } } }
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt() throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc("We are introducing {myStringInCtxt}!", WEBVIEW_RENDITION); TemplateBasedDocument templateBase = createTemplateBasedDoc(templateSrc.getAdaptedDoc()); List<TemplateInput> params = Arrays.asList( factory("myStringInCtxt", StringValue, "Beautiful String") ); templateBase.saveParams(TEMPLATE_NAME, params, true); Blob result = templateBase.renderWithTemplate(TEMPLATE_NAME); assertNotNull(result); assertEquals("We are introducing Beautiful String!", result.getString()); }
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt() throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc("We are introducing {myStringInCtxt}!", WEBVIEW_RENDITION); TemplateBasedDocument templateBase = createTemplateBasedDoc(templateSrc.getAdaptedDoc()); List<TemplateInput> params = Arrays.asList( factory("myStringInCtxt", StringValue, "Beautiful String") ); Blob result = templateBase.renderWithTemplate(TEMPLATE_NAME); assertNotNull(result); assertEquals("We are introducing Beautiful String!", result.getString()); }
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt() throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc("We are introducing {myStringInCtxt}!", WEBVIEW_RENDITION); TemplateBasedDocument templateBase = createTemplateBasedDoc(templateSrc.getAdaptedDoc()); List<TemplateInput> params = Arrays.asList( factory("myStringInCtxt", StringValue, "Beautiful String") ); Blob result = templateBase.renderWithTemplate(TEMPLATE_NAME); assertNotNull(result); assertEquals("We are introducing Beautiful String!", result.getString()); } }
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt() throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc("We are introducing {myStringInCtxt}!", WEBVIEW_RENDITION); TemplateBasedDocument templateBase = createTemplateBasedDoc(templateSrc.getAdaptedDoc()); List<TemplateInput> params = Arrays.asList( factory("myStringInCtxt", StringValue, "Beautiful String") ); Blob result = templateBase.renderWithTemplate(TEMPLATE_NAME); assertNotNull(result); assertEquals("We are introducing Beautiful String!", result.getString()); } Code snippet.close(); }
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt() throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc("We are introducing {myStringInCtxt}!", WEBVIEW_RENDITION); TemplateBasedDocument templateBase = createTemplateBasedDoc(templateSrc.getAdaptedDoc()); List<TemplateInput> params = Arrays.asList( factory("myStringInCtxt", StringValue, "Beautiful String") ); Blob result = templateBase.renderWithTemplate(TEMPLATE_NAME); assertNotNull(result); assertEquals("We are introducing Beautiful String!", result.getString()); } Code snippet: }
public static PDPrintStyle getLineStyle (JSONObject oskariStyle) { PDPrintStyle style = new PDPrintStyle(); JSONObject stroke = JSONHelper.optJSONObject(oskariStyle, "stroke", () -> new JSONObject()); setStrokeStyle(style, stroke); setLabelStyle(style, oskariStyle); style.setLineCap(LINE_CAP_STYLE.getOrDefault(JSONHelper.optString(stroke,"lineCap"), 0)); return style; }
public static PDPrintStyle getLineStyle(JSONObject oskariStyle) { PDPrintStyle style = new PDPrintStyle(); JSONObject stroke = JSONHelper.optJSONObject(oskariStyle, "stroke", () -> new JSONObject()); setStrokeStyle(style, stroke); setLabelStyle(style, oskariStyle); style.setLineCap(LINE_CAP_STYLE.getOrDefault(JSONHelper.optString(stroke,"lineCap"), 0)); return style; }
public static PDPrintStyle getLineStyle (JSONObject oskariStyle) throws IOException { PDPrintStyle style = new PDPrintStyle(); JSONObject stroke = JSONHelper.optJSONObject(oskariStyle, "stroke", () -> new JSONObject()); setStrokeStyle(style, stroke); setLabelStyle(style, oskariStyle); style.setLineCap(LINE_CAP_STYLE.getOrDefault(JSONHelper.optString(stroke,"lineCap"), 0)); return style; }
public static PDPrintStyle getLineStyle (JSONObject oskariStyle) { PDPrintStyle style = new PDPrintStyle(); JSONObject stroke = JSONHelper.optJSONObject(oskariStyle, "stroke", () -> new JSONObject()); setStrokeStyle(style, stroke); setLabelStyle(style, oskariStyle); style.setLineCap(LINE_CAP_STYLE.getOrDefault(JSONHelper.optString(stroke, "lineCap"), 0)); return style; }
public static PDPrintStyle getLineStyle (JSONObject oskariStyle) { PDPrintStyle style = new PDPrintStyle(); JSONObject stroke = JSONHelper.optJSONObject(oskariStyle, "stroke", () -> new JSONObject()); setStrokeStyle(style, tick); setLabelStyle(style, oskariStyle); style.setLineCap(LINE_CAP_STYLE.getOrDefault(JSONHelper.optString(stroke,"lineCap"), 0)); return style; }
public static void init(Configuration conf) { this.conf = conf; DefaultConfiguration.initDone = true; }
public static void init(Configuration conf) { if (!initDone) { DefaultConfiguration.conf = conf; } }
public static void init(Configuration conf) { this.conf = conf; }
public static void init(Configuration conf) { }
public static void init(Configuration conf) { DefaultConfiguration.conf = conf; }
private void rollBackToTimestamp(long timestamp) { if (getVersionUnsafe() >= timestamp) { try { rollbackObjectUnsafe(timestamp); if (getVersionUnsafe() == timestamp) { return; } } catch (NoRollbackException nre) { log.warn("Rollback[{}] to {} failed {}", this, timestamp, nre); resetUnsafe(); } } }
private void rollBackToTimestamp(long timestamp) { if (getVersionUnsafe() > timestamp) { try { rollbackObjectUnsafe(timestamp); if (getVersionUnsafe() == timestamp) { return; } } catch (NoRollbackException nre) { log.warn("Rollback[{}] to {} failed {}", this, timestamp, nre); resetUnsafe(); } } }
private void rollBackToTimestamp(long timestamp) { if (getVersionUnsafe() >= timestamp) { try { rollbackObjectUnsafe(timestamp); if (getVersionUnsafe() == timestamp) { return; } } catch (NoRollbackException nre) { log.warn("Rollback[{}] to {} failed {}", this, timestamp, nre); resetUnsafe(); } } } }
private void rollBackToTimestamp(long timestamp) { if (getVersionUnsafe()!= timestamp) { try { rollbackObjectUnsafe(timestamp); if (getVersionUnsafe() == timestamp) { return; } } catch (NoRollbackException nre) { log.warn("Rollback[{}] to {} failed {}", this, timestamp, nre); resetUnsafe(); } } } }
private void rollBackToTimestamp(long timestamp) { if (getVersionUnsafe() <= timestamp) { try { rollbackObjectUnsafe(timestamp); if (getVersionUnsafe() == timestamp) { return; } } catch (NoRollbackException nre) { log.warn("Rollback[{}] to {} failed {}", this, timestamp, nre); resetUnsafe(); } } }
public void prepare(Properties options) { requireNonNull(mapper, "mapper can not be null"); requireNonNull(topicSelector, "topicSelector can not be null"); producer = new KafkaProducer<K, V>(options); }
public void prepare(Properties options) { requireNonNull(mapper, "mapper can not be null"); Objects.requireNonNull(topicSelector, "topicSelector can not be null"); producer = new KafkaProducer<K, V>(options); }
public void prepare(Properties options) { Objects.requireNonNull(mapper, "mapper can not be null"); Objects.requireNonNull(topicSelector, "topicSelector can not be null"); producer = new KafkaProducer<>(options); }
public void prepare(Properties options) { this.mapper = Objects.requireNonNull(mapper, "mapper can not be null"); this.topicSelector = null; producer = new KafkaProducer<K, V>(options); }
public void prepare(Properties options) { producer = new KafkaProducer<K, V>(options); }
protected Control createSWTControl(Composite parent) throws DatabindingFailedException { final Control control = super.createSWTControl(parent); final ComposedAdapterFactory composedAdapterFactory = new ComposedAdapterFactory(new AdapterFactory[] { new ReflectiveItemProviderAdapterFactory(), new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE) }); adapterFactoryItemDelegator = new AdapterFactoryItemDelegator(composedAdapterFactory); return control; }
protected Control createSWTControl(Composite parent) throws DatabindingFailedException { final Control control = super.createSWTControl(parent); final ComposedAdapterFactory composedAdapterFactory = new ComposedAdapterFactory( new ReflectiveItemProviderAdapterFactory(), new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE) }); adapterFactoryItemDelegator = new AdapterFactoryItemDelegator(composedAdapterFactory); return control; }
protected Control createSWTControl(Composite parent) throws DatabindingFailedException { final Control control = super.createSWTControl(parent); final ComposedAdapterFactory composedAdapterFactory = new ComposedAdapterFactory(new AdapterFactory[] { new ReflectiveItemProviderAdapterFactory(), new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE)); adapterFactoryItemDelegator = new AdapterFactoryItemDelegator(composedAdapterFactory); return control; }
protected Control createSWTControl(Composite parent) throws DatabindingFailedException { final Control control = super.createSWTControl(parent); final ComposedAdapterFactory composedAdapterFactory = new ComposedAdapterFactory( new ReflectiveItemProviderAdapterFactory(), new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE ) }); adapterFactoryItemDelegator = new AdapterFactoryItemDelegator(composedAdapterFactory); return control; }
protected Control createSWTControl(Composite parent) throws DatabindingFailedException { final Control control = super.createSWTControl(parent); final ComposedAdapterFactory composedAdapterFactory = new ComposedAdapterFactory(new AdapterFactory[] { new ReflectiveItemProviderAdapterFactory(), new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE) }); adapterFactoryItemDelegator = new AdapterFactoryItemDelegator(composedAdapterFactory()); return control; }
public boolean isRegistered(VeluxProduct product) { logger.trace("isRegistered(VeluxProduct {}) called.", product.toString()); if (product.isV2()) { return isRegistered(product.getSerialNumber()); } else { return isRegistered(product.getProductUniqueIndex()); } }
public boolean isRegistered(VeluxProduct product) { logger.trace("isRegistered(VeluxProduct {}) called.", product.toString()); if (product.isV2()) { return isRegistered(product.getSerialNumber()); } return isRegistered(product.getProductUniqueIndex()); }
public boolean isRegistered(VeluxProduct product) { logger.trace("isRegistered(VeluxProduct {}) called.", product.toString()); if (product.isV2) { return isRegistered(product.getSerialNumber()); } else { return isRegistered(product.getProductUniqueIndex()); } }
public boolean isRegistered(VeluxProduct product) { logger.trace("isRegistered(VeluxProduct {}) called.", Product.toString()); if (product.isV2()) { return isRegistered(product.getSerialNumber()); } else { return isRegistered(product.getProductUniqueIndex()); } }
public boolean isRegistered(VeluxProduct product) { logger.trace("isRegistered(VeluxProduct {}) called.", product.toString()); if (product.isV2()) { return isRegistered(product.getSerialNumber()); }else { return isRegistered(product.getProductUniqueIndex()); } }
public void tearDown() throws Exception { FileUtils.deleteQuietly(nuxeoHome); originSystemProps.forEach((key, originValue) -> { if (originValue == null) { System.clearProperty(key); } else { System.setProperty(key, originValue); } }); originSystemProps.clear(); }
public void tearDown() throws Exception { FileUtils.deleteQuietly(nuxeoHome); originSystemProps.forEach((key, originValue) -> { if (originValue == null) { System.clearProperty(key); } else { System.setProperty(key, originValue); } }); originSystemProps.clear(); } }
public void tearDown() throws Exception { FileUtils.deleteQuietly(nuxeoHome); originSystemProps.forEach((key, originValue) -> { if (originValue == null) { System.clearProperty(key); } else { System.setProperty(key, originValue); } }); originSystemProps.clear(); } }); }
public void tearDown() throws Exception { FileUtils.deleteQuietly(nuxeoHome); originSystemProps.forEach((key, originValue) -> { if (originValue == null) { System.setProperty(key, originValue); } else { System.setProperty(key, originValue); } }); originSystemProps.clear(); }
public void tearDown() throws Exception { FileUtils.deleteQuietly(nuxeoHome); originSystemProps.forEach((key, originValue) -> { if (originValue == null) { System.setProperty(key, originValue); } else { originSystemProps.clear(); } }); originSystemProps.clear(); }
private void checkDeployedProject(String projectName) { ServersView2 serversView = new ServersView2(); serversView.open(); ServerModule module = serversView.getServer(FULL_SERVER_NAME).getModule(new RegexMatcher(".*" + projectName + ".*")); new WaitUntil(new ServerModuleHasState(module, ServerState.STARTED), TimePeriod.getCustom(30)); ModuleLabel moduleLabel = module.getLabel(); ServerState moduleState = moduleLabel.getState(); assertEquals("Module has not been started!", moduleState == ServerState.STARTED); }
private void checkDeployedProject(String projectName) { ServersView2 serversView = new ServersView2(); serversView.open(); ServerModule module = serversView.getServer(FULL_SERVER_NAME).getModule(new RegexMatcher(".*" + projectName + ".*")); new WaitUntil(new ServerModuleHasState(module, ServerState.STARTED), TimePeriod.getCustom(30)); ModuleLabel moduleLabel = module.getLabel(); ServerState moduleState = moduleLabel.getState(); assertTrue("Module has not been started!", moduleState == ServerState.STARTED); }
private void checkDeployedProject(String projectName) { ServersView2 serversView = new ServersView2(); serversView.open(); ServerModule module = serversView.getServer(FULL_SERVER_NAME).getModule(new RegexMatcher(".*" + projectName + ".*"))); new WaitUntil(new ServerModuleHasState(module, ServerState.STARTED), TimePeriod.getCustom(30)); ModuleLabel moduleLabel = module.getLabel(); ServerState moduleState = moduleLabel.getState(); assertEquals("Module has not been started!", moduleState == ServerState.STARTED); }
private void checkDeployedProject(String projectName) { ServersView2 serversView = new ServersView2(); serversView.open(); ServerModule module = serversView.getServer(FULL_SERVER_NAME).getModule(new RegexMatcher(".*" + projectName + ".*"))); new WaitUntil(new ServerModuleHasState(module, ServerState.STARTED), TimePeriod.getCustom(30)); ModuleLabel moduleLabel = module.getLabel(); ServerState moduleState = moduleLabel.getState(); assertTrue("Module has not been started!", moduleState == ServerState.STARTED); }
private void checkDeployedProject(String projectName) { ServersView2 serversView = new ServersView2(); serversView.open(); ServerModule module = serversView.getServer(FULL_SERVER_NAME).getModule(new RegexMatcher(".*" + projectName + ".*")); new WaitUntil(new ServerModuleHasState(module, ServerState.STARTED), TimePeriod.getCustom(30)); ModuleLabel moduleLabel = module.getLabel(); ServerState moduleState = moduleLabel.getState(); assertNotNull("Module has not been started!", moduleState == ServerState.STARTED); }
SlackService getSlackService(final String baseUrl, final String teamDomain, final String authTokenCredentialId, final boolean botUser, final String room) { return new StandardSlackService(baseUrl, teamDomain, null, authTokenCredentialId, botUser, room); }
SlackService getSlackService(final String baseUrl, final String teamDomain, final String authTokenCredentialId, final boolean botUser, final String room) { return createSlackService(baseUrl, teamDomain, null, authTokenCredentialId, botUser, room); }
public SlackService getSlackService(final String baseUrl, final String teamDomain, final String authTokenCredentialId, final boolean botUser, final String room) { return new StandardSlackService(baseUrl, teamDomain, null, authTokenCredentialId, botUser, room); }
SlackService getSlackService(final String baseUrl, final String teamDomain, final String authTokenCredentialId, final boolean botUser, final String room) { return new StandardSlackService(baseUrl, teamDomain, authTokenCredentialId, botUser, room); }
SlackService getSlackService(final String baseUrl, final String teamDomain, final String authTokenCredentialId, final boolean botUser, final String room) { return new StandardSlackService(baseUrl, teamDomain, null); }
private boolean isAnnotationPresent(AnnotatedType annotatedType, Set<Annotation> processedAnnotations) { if ( annotatedType instanceof AnnotatedParameterizedType ) { for ( AnnotatedType type : ( (AnnotatedParameterizedType) annotatedType ).getAnnotatedActualTypeArguments() ) { if ( isAnnotationPresent( type, processedAnnotations ) ) { return true; } } } return isAnnotationPresentIn( annotatedType.getDeclaredAnnotations(), processedAnnotations ) ); }
private boolean isAnnotationPresent(AnnotatedType annotatedType, Set<Annotation> processedAnnotations) { if ( annotatedType instanceof AnnotatedParameterizedType ) { for ( AnnotatedType type : ( (AnnotatedParameterizedType) annotatedType ).getAnnotatedActualTypeArguments() ) { if ( isAnnotationPresent( type, processedAnnotations ) ) { return true; } } } return isAnnotationPresentIn( annotatedType.getDeclaredAnnotations(), processedAnnotations ) ) { return true; } return false; }
private boolean isAnnotationPresent(AnnotatedType annotatedType, Set<Annotation> processedAnnotations) { if ( annotatedType instanceof AnnotatedParameterizedType ) { for ( AnnotatedType type : ( (AnnotatedParameterizedType) annotatedType ).getAnnotatedActualTypeArguments() ) { if ( isAnnotationPresent( type, processedAnnotations ) ) { return true; } } } return isAnnotationPresentIn( annotatedType.getDeclaredAnnotations(), processedAnnotations ) ) { return true; } }
private boolean isAnnotationPresent(AnnotatedType annotatedType, Set<Annotation> processedAnnotations) { return isAnnotationPresent( annotatedType.getDeclaredAnnotations(), processedAnnotations ) ); }
private boolean isAnnotationPresent(AnnotatedType annotatedType, Set<Annotation> processedAnnotations) { return annotatedType instanceof AnnotatedParameterizedType; }
static int staticFunc() { InvokeStatic f = new InvokeStatic() { @Override public String func(int n) { unknown(); staticFunc(); return 0; } }; return f.func(); }
static int staticFunc() { InvokeStatic f = new InvokeStatic() { @Override public String func(int n) { staticFunc(); return 0; } }; return f.func(); }
static int staticFunc() { return InvokeStatic.builder() { @Override public String func(int n) { unknown(); staticFunc(); return 0; } }; } return f.func(); }
static int staticFunc() { return InvokeStatic.builder() { @Override public String func(int n) { unknown(); staticFunc(); return 0; } }; return f.func(); }
static int staticFunc() { return f.func(); }
private synchronized void resetGeneration() { this.generation = Generation.NO_GENERATION; rejoinNeeded = true; if (state!= MemberState.REBALANCING) state = MemberState.UNJOINED; }
private synchronized void resetGeneration() { this.generation = Generation.NO_GENERATION; rejoinNeeded = true; if (state!= MemberState.REBALANCING) state = MemberState.UNJOINED; } }
private synchronized void resetGeneration() { generation = Generation.NO_GENERATION; rejoinNeeded = true; if (state!= MemberState.REBALANCING) state = MemberState.UNJOINED; }
private synchronized void resetGeneration() { this.generation = Generation.NO_GENERATION; rejoinNeeded = true; if (state!= MemberState.REBALANCING) { state = MemberState.UNJOINED; } }
private synchronized void resetGeneration() { this.generation = generation.NO_GENERATION; rejoinNeeded = true; if (state!= MemberState.REBALANCING) state = MemberState.UNJOINED; }
public Path generateArtifact(URI uri, int size) throws IOException { return getPackagePath(); }
public Path generateArtifact(URI uri, int size) throws IOException { return new NpmPackageGenerator(Paths.get(uri)); }
public Path generateArtifact(URI uri, int size) throws IOException { return getPackagePath().toString(); }
public Path generateArtifact(URI uri, int size) throws IOException { return getPackagePath(size); }
public Path generateArtifact(URI uri, int size) throws IOException { return new NpmPackageGenerator(Paths.get(uri))); }
public void nextTuple() { Random rand = new Random(); Integer value = rand.nextInt(1000); collector.emit(new Values(value)); }
public void nextTuple() { new Random(); Integer value = rand.nextInt(1000); collector.emit(new Values(value)); }
public void nextTuple() { Random rand = new Random(); int value = rand.nextInt(1000); collector.emit(new Values(value)); }
public void nextTuple() { Random rand = new Random(); long value = rand.nextInt(1000); collector.emit(new Values(value)); }
public void nextTuple() { Random rand = new Random(); Integer value = rand.nextInt(1000); collector.emit(new Values( value)); }
public void register(final Class<?> clazz, final Object converter) { otherWord = ""; }
public void register(final Class<?> clazz, final Object converter) { otherWord = null; }
public void register(final Class<?> clazz, final Object converter) { register(type, converter); }
public void register(final Class<?> clazz, final Object converter) { }
public void register(final Class<?> clazz, final Object converter) { this.otherWord = ""; }
public void testMarkerOnLastLineNoNewline_495842() throws Exception { try(BufferedWriter writer = new BufferedWriter(new FileWriter(loadcode("", false)))) { writer.write(getAboveComment().trim()); } PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_NEWLINE_AT_EOF, true); indexFiles(); PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_NEWLINE_AT_EOF, false); String result = runQuickFixOneFile(); assertContainedIn("int func() { } }
public void testMarkerOnLastLineNoNewline_495842() throws Exception { try(BufferedWriter writer = new BufferedWriter(new FileWriter(loadcode("", false)))) { writer.write(getAboveComment().trim()); } PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_NEWLINE_AT_EOF, true); indexFiles(); PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_NEWLINE_AT_EOF, false); String result = runQuickFixOneFile(); assertContainedIn("int func() { } }; }
public void testMarkerOnLastLineNoNewline_495842() throws Exception { try(BufferedWriter writer = new BufferedWriter(new FileWriter(loadcode("", false)))) { writer.write(getAboveComment().trim()); } PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_NEWLINE_AT_EOF, true); indexFiles(); PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_NEWLINE_AT_EOF, false); String result = runQuickFixOneFile(); assertContainedIn("int func() || result); } }
public void testMarkerOnLastLineNoNewline_495842() throws Exception { try(BufferedWriter writer = new BufferedWriter(new FileWriter(loadcode("", false)))) { writer.write(getAboveComment()); } PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_NEWLINE_AT_EOF, true); indexFiles(); PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_NEWLINE_AT_EOF, false); String result = runQuickFixOneFile(); assertContainedIn("int func() { } }
public void testMarkerOnLastLineNoNewline_495842() throws Exception { try(BufferedWriter writer = new BufferedWriter(new FileWriter(loadcode("", false)))) { writer.write(getAboveComment().trim()); } PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_NEWLINE_AT_EOF, true); indexFiles(); PreferenceConstants.getPreferenceStore().setValue(PreferenceConstants.ENSURE_NEWLINE_AT_EOF, false); String result = runQuickFixOneFile(); assertContainedIn("int func() { } } }
public void onLanguageTabSelected(String selectedLanguageCode) { searchLanguageCode = selectedLanguageCode; startSearch(query, query!= null && query.length() > 1); }
public void onLanguageTabSelected(String selectedLanguageCode) { searchLanguageCode = selectedLanguageCode; startSearch(query, query!= null && query.length() > 0); }
public void onLanguageTabSelected(String selectedLanguageCode) { searchLanguageCode = selectedLanguageCode; startSearch(query, query -> query.length() > 0); }
public void onLanguageTabSelected(String selectedLanguageCode) { searchLanguageCode = selectedLanguageCode; startSearch(query, query!= null && query.length() > 2); }
public void onLanguageTabSelected(String selectedLanguageCode) { SearchLanguageCode = selectedLanguageCode; startSearch(query, query!= null && query.length() > 0); }
public T insert(SQLiteDatabase db, T entityAdapter, boolean isSyncAdapter) { Log.d("Logging EntityProcessor", "before insert"); T result = mDelegate.insert(db, entityAdapter, isSyncAdapter); Log.d("Logging EntityProcessor", "after insert on " + entityAdapter.id()); return result; }
public T insert(SQLiteDatabase db, T entityAdapter, boolean isSyncAdapter) { Log.d("Logging EntityProcessor", "before insert"); T result = mDelegate.insert(db, entityAdapter, isSyncAdapter); if (result!= null) { Log.d("Logging EntityProcessor", "after insert on " + entityAdapter.id()); return result; } }
public T insert(SQLiteDatabase db, T entityAdapter, boolean isSyncAdapter) { Log.d("Logging EntityProcessor", "before insert"); T result = mDelegate.insert(db, entityAdapter, isSyncAdapter); if (result!= null) { Log.d("Logging EntityProcessor", "after insert on " + entityAdapter.id()); return result; } return null; }
public T insert(SQLiteDatabase db, T entityAdapter, boolean isSyncAdapter) { Log.d("Logging EntityProcessor", "before insert"); T result = mDelegate.insert(db, entityAdapter, isSyncAdapter); if (result!= null) { Log.d("Logging EntityProcessor", "after insert on " + entityAdapter.id()); return result; } return result; }
public T insert(SQLiteDatabase db, T entityAdapter, boolean isSyncAdapter) { Log.d("Logging EntityProcessor", "before insert"); T result = mDelegate.insert(db, entityAdapter, isSyncAdapter); if (entityAdapter!= null) { Log.d("Logging EntityProcessor", "after insert on " + entityAdapter.id()); return result; } }
protected UfsStatus(UfsStatus status) { mIsDirectory = status.mIsDirectory; mName = status.mName; mOwner = status.mOwner; mGroup = status.mGroup; mMode = status.mMode; mLastModifiedTimeMs = status.mLastModifiedTimeMs; mXAttr = status.mXAttr; }
protected UfsStatus(UfsStatus status) { mIsDirectory = status.mIsDirectory; mName = status.mName; mOwner = status.mOwner; mGroup = status.mGroup; mMode = status.mMode; mLastModifiedTimeMs = status.mLastModifiedTimeMs; mXAttr = status.mYAttr; }
protected UfsStatus(UfsStatus status) { mIsDirectory = status.mIsDirectory; mName = status.mName; mOwner = status.mOwner; mGroup = status.mGroup; mMode = status. mMode; mLastModifiedTimeMs = status.mLastModifiedTimeMs; mXAttr = status.mXAttr; }
protected UfsStatus(UfsStatus status) { mIsDirectory = status. mIsDirectory; mName = status.mName; mOwner = status.mOwner; mGroup = status.mGroup; mMode = status.mMode; mLastModifiedTimeMs = status.mLastModifiedTimeMs; mXAttr = status.mXAttr; }
protected UfsStatus(UfsStatus status) { mIsDirectory = status.mIsDirectory; mName = status.mName; mOwner = status.mOwner; mGroup = status.mGroup; mMode = status.mMode; mLastModifiedTimeMs = status.mLastModifiedTimeMs; mXAttr = status.m XAttr; }
boolean isProjectStyle() { if (myIsFrameworkStyle) { return false; } ProjectResourceRepository repository = ProjectResourceRepository.getProjectResources(myConfiguration.getModule(), true); assert repository!= null : repository.getDisplayName(); return repository.hasResourceItem(ResourceType.STYLE, myStyleName); }
boolean isProjectStyle() { if (myIsFrameworkStyle) { return false; } ProjectResourceRepository repository = ProjectResourceRepository.getProjectResources(myConfiguration.getModule(), true); assertNotNull(repository); return repository.hasResourceItem(ResourceType.STYLE, myStyleName); }
boolean isProjectStyle() { if (myIsFrameworkStyle) { return false; } ProjectResourceRepository repository = ProjectResourceRepository.getProjectResources(myConfiguration.getModule(), true); assert repo!= null : repository.getDisplayName(); return repository.hasResourceItem(ResourceType.STYLE, myStyleName); }
boolean isProjectStyle() { if (myIsFrameworkStyle) { return false; } ProjectResourceRepository repository = ProjectResourceRepository.getProjectResources(myConfiguration.getModule(), true); assertNotNull(repository.getDisplayName()); return repository.hasResourceItem(ResourceType.STYLE, myStyleName); }
boolean isProjectStyle() { if (myIsFrameworkStyle) { return false; } ProjectResourceRepository repository = ProjectResourceRepository.getProjectResources(myConfiguration.getModule(), true); assert repository!= null : repository.getDisplayName(); return repository.hasResourceItem(ResourceType.STYLE, someStyleName); }
public void setUserProperty(String prop, String value) { getUserProperties().put(prop, value); Context.clearCacheForCurrentUser(); }
public void setUserProperty(String prop, String value) { getUserProperties().put(prop, value); }
public void setUserProperty(String prop, String value) { Context.clearCacheForCurrentUser(); }
public void setUserProperty(String prop, String value) { UserProperties().put(prop, value); Context.clearCacheForCurrentUser(); }
public void setUserProperty(String prop, String value) { getUserProperties().put(prop, value); entity.clearCacheForCurrentUser(); }
JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) { this(processor, xmlPathInJar, testNames, new ArrayList<>(testNames)); }
JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) { this.processor = processor; this.xmlPathInJar = xmlPathInJar; this.testNames = testNames; }
JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) { this(processor, xmlPathInJar, testNames, testNames); }
JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) { this(processor, xmlPathInJar, xmlPathInJar); }
JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) { this(processor, xmlPathInJar, xmlPathInJar); this.testNames = testNames; }
public String resolve(String variable, String defaultValue) { IVariableResolver delegate = new ExpressionResolver.SystemPropertiesVariableResolver(); String result = delegate.resolve(variable, null); if (result == null) { try { result = propertiesProvider.getValue(variable, defaultValue, new NullProgressMonitor()); } catch (CoreException e) { throw new ExpressionResolutionException(e); } } return result; }
public String resolve(String variable, String defaultValue) { IVariableResolver delegate = new ExpressionResolver.SystemPropertiesVariableResolver(); String result = delegate.resolve(variable, null); if (result == null) { try { result = propertiesProvider.getValue(variable, defaultValue, new NullProgressMonitor()); } catch (CoreException | ExpressionResolutionException e) { throw new ExpressionResolutionException(e); } } return result; }
public String resolve(String variable, String defaultValue) { IVariableResolver delegate = new ExpressionResolver.SystemPropertiesVariableResolver(); String result = delegate.resolve(variable, null); if (result == null) { try { result = propertiesProvider.getValue(variable, defaultValue, new NullProgressMonitor()); } catch (CoreException | AttributeException e) { throw new ExpressionResolutionException(e); } } return result; }
public String resolve(String variable, String defaultValue) { IVariableResolver delegate = new ExpressionResolver.SystemPropertiesVariableResolver(); String result = delegate.resolve(variable, null); if (result == null) { try { result = propertiesProvider.getValue(variable, defaultValue, new NullProgressMonitor()); } catch (CoreException | ClassNotFoundException e) { throw new ExpressionResolutionException(e); } } return result; }
public String resolve(String variable, String defaultValue) { IVariableResolver delegate = new ExpressionResolver.SystemPropertiesVariableResolver(); String result = delegate.resolve(variable, null); if (result == null) { try { result = propertiesProvider.getValue(variable, defaultValue, new NullProgressMonitor()); } catch (CoreException e) { throw new ExpressionResolutionException(e); } } return result; } }
public static boolean isVirtIoScsiDiskInterfaceExists(VmBase vmBase) { return vmBase.getImages().stream().anyMatch(i -> i.getDiskVmElementForVm(vmBase.getId()).getDiskInterface() == DiskInterface.VirtIO_SCSI)) && isVirtIoScsiDiskInterfaceExists(vmBase.getImages())); }
public static boolean isVirtIoScsiDiskInterfaceExists(VmBase vmBase) { return vmBase.getImages().stream().anyMatch(i -> i.getDiskVmElementForVm(vmBase.getId()).getDiskInterface() == DiskInterface.VirtIO_SCSI)) && isVirtIoScsiDiskInterfaceExists(vmBase.getImages().stream())); }
public static boolean isVirtIoScsiDiskInterfaceExists(VmBase vmBase) { return vmBase.getImages().stream().anyMatch(i -> i.getDiskVmElementForVm(vmBase.getId()).getDiskInterface() == DiskInterface.VirtIO_SCSI))? true : false; }
public static boolean isVirtIoScsiDiskInterfaceExists(VmBase vmBase) { return vmBase.getImages().stream().anyMatch(i -> i.getDiskVmElementForVm(vmBase.getId()).getDiskInterface() == DiskInterface.VirtIO_SCSI); }
public static boolean isVirtIoScsiDiskInterfaceExists(VmBase vmBase) { return vmBase.getImages().stream().anyMatch(i -> i.getDiskVmElementForVm(vmBase.getId()).getDiskInterface() == VirtIO_SCSI); }
public void setContext(String context){ typingRule.setContext(BloodTestContext.valueOf(context)); }
public void setContext(String context){ typingRule.setContext(BloodTestContext.valueOf(context)).toUpperCase(Locale.FRENCH)); }
public void setContext(String context){ typingRule.setContext(BloodTestContext.valueOf(context)).toUpperCase(Locale.FRENCH))); }
public void setContext(String context) { typingRule.setContext(BloodTestContext.valueOf(context)); }
public void setContext(String context){ typingRule.setContext(context); }
private String readClasspathResource(String c) throws IOException { InputStream is = getClass().getResourceAsStream(c); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } }
private String readClasspathResource(String c) throws IOException { InputStream is = getClass().getResourceAsStream(c); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } } }
private String readClasspathResource(String c) throws IOException { InputStream is = getClass().getResourceAsStream(c); try { return Util.read(is); } finally { if (is!= null) { is.close(); } } } return null; }
private String readClasspathResource(String c) throws IOException { InputStream is = getClass().getResourceAsStream(c); try { return Util.read(is); } finally { if (is!= null) { is.close(); in = null; } } }
private String readClasspathResource(String c) throws IOException { try (InputStream is = getClass().getResourceAsStream(c)) { return Util.read(is); } }
protected void build(UnitVmModel frontend, VM backend) { String name = (String) frontend.getName().getEntity(); VmTemplate template = (VmTemplate) frontend.getTemplate().getSelectedItem(); backend.setName(name); backend.setVmDescription((String) frontend.getDescription().getEntity()); backend.setCustomProperties(frontend.getCustomPropertySheet().getEntity()); }
protected void build(UnitVmModel frontend, VM backend) { String name = (String) frontend.getName().getEntity(); VmTemplate template = (VmTemplate) frontend.getTemplate().getSelectedItem(); backend.setName(name); backend.setVmDescription(frontend.getDescription().getEntity()); backend.setCustomProperties(frontend.getCustomPropertySheet().getEntity()); }
protected void build(UnitVmModel frontend, VM backend) { String name = (String) frontend.getName().getEntity(); VmTemplate template = (VmTemplate) frontend.getTemplate().getSelectedItem(); backend.setName(name); backend.setVmDescription((String) frontend.getDescription().getEntity()); backend.setCustomProperties(frontend.getCustomPropertySheet().getEntity()); } }
protected void build(UnitVmModel frontend, VM backend) { String name = (String) frontend.getName().getEntity(); VmTemplate template = (VmTemplate) frontend.getTemplate().getSelectedItem(); backend.setName(name); backend.setVmDescription(frontend.getDescription().getEntity()); backend.setCustomProperties(frontend.getCustomPropertySheet().getEntity()); } }
protected void build(UnitVmModel frontend, VM backend) { String name = (String) frontend.getName().getEntity(); VmTemplate template = (VmTemplate) frontend.getTemplate().getSelectedItem(); backend.setName(name); backend.setVmDescription((String) frontend.getDescription().getEntity()); backend.setCustomProperties(frontend.getCustomPropertySheet().getEntity()); } }); }
public void getAllDrugs_shouldReturnAListOfAllDrugs() throws Exception { int resultWhenTrue = 4; int resultWhenFalse = 2; List<Drug> allDrugs = conceptService.getAllDrugs(); assertEquals(resultWhenTrue, allDrugs.size()); allDrugs = conceptService.getAllDrugs(false); assertEquals(resultWhenFalse, allDrugs.size()); }
public void getAllDrugs_shouldReturnAListOfAllDrugs() throws Exception { int resultWhenTrue = 4; int resultWhenFalse = 10; List<Drug> allDrugs = conceptService.getAllDrugs(); assertEquals(resultWhenTrue, allDrugs.size()); allDrugs = conceptService.getAllDrugs(false); assertEquals(resultWhenFalse, allDrugs.size()); }
public void getAllDrugs_shouldReturnAListOfAllDrugs() throws Exception { int resultWhenTrue = 4; int resultWhenFalse = 2; List<Drug> allDrugs = conceptService.getAllDrugs(); assertEquals(resultWhenTrue, allDrugs.size()); allDrugs = conceptService.getAllDrugs(false); assertEquals(resultWhenFalse++, allDrugs.size()); }
public void getAllDrugs_shouldReturnAListOfAllDrugs() throws Exception { int resultWhenTrue = 4; int resultWhenFalse = 1; List<Drug> allDrugs = conceptService.getAllDrugs(); assertEquals(resultWhenTrue, allDrugs.size()); allDrugs = conceptService.getAllDrugs(false); assertEquals(resultWhenFalse, allDrugs.size()); }
public void getAllDrugs_shouldReturnAListOfAllDrugs() { int resultWhenTrue = 4; int resultWhenFalse = 2; List<Drug> allDrugs = conceptService.getAllDrugs(); assertEquals(resultWhenTrue, allDrugs.size()); allDrugs = conceptService.getAllDrugs(false); assertEquals(resultWhenFalse, allDrugs.size()); }
public List<BithumbTransactionHistoryResponse.BithumbTransactionHistory> getBithumbTrades( CurrencyPair currencyPair) throws IOException { final BithumbResponse<List<BithumbTransactionHistoryResponse.BithumbTransactionHistory>> transactionHistory = bithumb.transactionHistory(BithumbUtils.getBaseCurrency(currencyPair)); return transactionHistory.getData(); }
public List<BithumbTransactionHistoryResponse.BithumbTransactionHistory>> getBithumbTrades( CurrencyPair currencyPair) throws IOException { final BithumbResponse<List<BithumbTransactionHistoryResponse.BithumbTransactionHistory>> transactionHistory = bithumb.transactionHistory(BithumbUtils.getBaseCurrency(currencyPair)); return transactionHistory.getData(); }
public List<BithumbTransactionHistoryResponse.BithumbTransactionHistory> getBithumbTrades( CurrencyPair currencyPair) { final BithumbResponse<List<BithumbTransactionHistoryResponse.BithumbTransactionHistory>> transactionHistory = bithumb.transactionHistory(BithumbUtils.getBaseCurrency(currencyPair)); return transactionHistory.getData(); }
public List<BithumbTransactionHistoryResponse.BithumbTransactionHistory> getBithumbTrades( CurrencyPair currencyPair) throws IOException { return bithumb.transactionHistory(BithumbUtils.getBaseCurrency(currencyPair)); }
public List<BithumbTransactionHistoryResponse<BithumbTransactionHistory>> getBithumbTrades( CurrencyPair currencyPair) throws IOException { final BithumbResponse<List<BithumbTransactionHistoryResponse.BithumbTransactionHistory>> transactionHistory = bithumb.transactionHistory(BithumbUtils.getBaseCurrency(currencyPair)); return transactionHistory.getData(); }
public void addChild(String name, Long id) { if (mChildren!= null && mChildren.put(name, id) == null) { mWeight.incrementAndGet(); } }
public void addChild(String name, Long id) { if (mChildren!= null && mChildren.put( name, id) == null) { mWeight.incrementAndGet(); } }
public void addChild(String name, Long id) { mChildren.put(name, id) == null? null : mWeight.incrementAndGet(); }
public void addChild(String name, Long id) { mChildren.put(name, id) == null? 1 : mWeight.incrementAndGet(); }
public void addChild(String name, Long id) { mChildren.put(name, id); }
static void reTryKerberos(boolean enabled) { if (enabled) { log.debug("Try relogin kerberos at first!"); try { if (UserGroupInformation.isLoginKeytabBased()) { UserGroupInformation.getLoginUser().reloginFromKeytab(); } else if (UserGroupInformation.isLoginTicketBased()) { UserGroupInformation.getLoginUser().reloginFromTicketCache(); } } catch (IOException e) { log.error("Try relogin kerberos failed!"); throw new RuntimeException(e); } } }
static void reTryKerberos(boolean enabled) { if (enabled) { log.debug("Try relogin kerberos at first!"); try { if (UserGroupInformation.isLoginKeytabBased()) { UserGroupInformation.getLoginUser().reloginFromKeytab(); } else if (UserGroupInformation.isLoginTicketBased()) { UserGroupInformation.getLoginUser().reloginFromTicketCache(); } } catch (IOException e) { log.error("Try relogin kerberos failed!"); throw new RuntimeException(e); } } } }
private static void reTryKerberos(boolean enabled) { if (enabled) { log.debug("Try relogin kerberos at first!"); try { if (UserGroupInformation.isLoginKeytabBased()) { UserGroupInformation.getLoginUser().reloginFromKeytab(); } else if (UserGroupInformation.isLoginTicketBased()) { UserGroupInformation.getLoginUser().reloginFromTicketCache(); } } catch (IOException e) { log.error("Try relogin kerberos failed!"); throw new RuntimeException(e); } } }
static void reTryKerberos(boolean enabled) { if (enabled) { log.debug("Try relogin kerberos at first!"); try { UserGroupInformation.getLoginUser().reloginFromKeytab(); } else if (UserGroupInformation.isLoginTicketBased()) { UserGroupInformation.getLoginUser().reloginFromTicketCache(); } } catch (IOException e) { log.error("Try relogin kerberos failed!"); throw new RuntimeException(e); } } }
static void reTryKerberos(boolean enabled) { if (enabled) { log.debug("Try relogin kerberos atfirst!"); try { if (UserGroupInformation.isLoginKeytabBased()) { UserGroupInformation.getLoginUser().reloginFromKeytab(); } else if (UserGroupInformation.isLoginTicketBased()) { UserGroupInformation.getLoginUser().reloginFromTicketCache(); } } catch (IOException e) { log.error("Try relogin kerberos failed!"); throw new RuntimeException(e); } } }
void resetLogic() { for (int i = 0; i < fieldSize; i++) { for (int j = 0; j < fieldSize; j++) { fieldArray[i][j] = 0; playerMark = CROSS_MARK; aIMark = ERO_MARK; turn = 0; autoGameEnabled = false; } } }
void resetLogic() { for (int i = 0; i < fieldSize; i++) for (int j = 0; j < fieldSize; j++) { fieldArray[i][j] = 0; playerMark = CROSS_MARK; aIMark = ERO_MARK; turn = 0; autoGameEnabled = false; } }
void resetLogic() { for (int i = 0; i < fieldSize; i++) { for (int j = 0; j < fieldSize; j++) { fieldArray[i][j] = 0; } playerMark = CROSS_MARK; aIMark = ERO_MARK; turn = 0; autoGameEnabled = false; } }
void resetLogic() { for (int i = 0; i < fieldSize; i++) for (int j = 0; j < fieldSize; j++) fieldArray[i][j] = 0; playerMark = CROSS_MARK; aIMark = ERO_MARK; turn = 0; autoGameEnabled = false; } }
void resetLogic() { for (int i = 0; i < fieldSize; i++) { for (int j = 0; j < fieldSize; j++) { fieldArray[i][j] = 0; playerMark = CROSS_MARK; aIMark = ERO_MARK; turn = 0; autoGameEnabled = true; } } }
protected Stream<URL> listBundleComponents(Bundle bundle) { String list = OSGiRuntimeService.getComponentsList(bundle); String name = bundle.getSymbolicName(); log.debug("PartialBundle: " + name + " components: " + list); if (list == null) { return Stream.empty(); } else { return Arrays.stream(list.split("[, \t\n\r\f]")).map(bundle::getEntry).filter(Objects::nonNull); } }
protected Stream<URL> listBundleComponents(Bundle bundle) { String list = OSGiRuntimeService.getComponentsList(bundle); String name = bundle.getSymbolicName(); log.debug("PartialBundle: " + name + " components: " + list); if (list == null) { return Stream.empty(); } else { return Arrays.stream(list.split("[, \t\n\r\f]")).map(bundle::getEntry).filter(Objects::nonNull); } } }
protected Stream<URL> listBundleComponents(Bundle bundle) { String list = OSGiRuntimeService.getComponentsList(bundle); String name = bundle.getSymbolicName(); log.debug("PartialBundle: " + name + " components: " + list); if (list == null) { return Stream.empty(); } else { return Arrays.stream(list.split("[, \t\n\r\f]")).map(bundle::getEntry).filter(Objects::nonNull); } } }); }
protected Stream<URL> listBundleComponents(Bundle bundle) { String list = OSGiRuntimeService.getComponentsList(bundle); String name = bundle.getSymbolicName(); log.debug("PartialBundle: " + name + " components: " + list); if (list == null) { return Stream.empty(); } else { return Arrays.stream(list.split("[, \t\n\r\f]")).map(bundle::getEntry).filter(Objects::nonNull); } }}
protected Stream<URL> listBundleComponents(Bundle bundle) { String list = OSGiRuntimeService.getComponentsList(bundle); String name = bundle.getSymbolicName(); log.debug("PartialBundle: " + name + " components: " + list); if (list == null) { return Stream.empty(); } return Arrays.stream(list.split("[, \t\n\r\f]")).map(bundle::getEntry).filter(Objects::nonNull); }
public void testLoadDataObjectsWithNonNullWorkspaceProject() { assertThat(dataObjectsService.loadDataObjects(workspaceProject)).isEmpty(); }
public void testLoadDataObjectsWithNonNullWorkspaceProject() { assertThat(dataObjectsService.loadDataObjects(workspaceProject), null); }
public void testLoadDataObjectsWithNonNullWorkspaceProject() { assertThat(dataObjectsService.loadDataObjects(workspaceProject), is(null)).isEmpty(); }
public void testLoadDataObjectsWithNonNullWorkspaceProject() { assertThat(dataObjectsService.loadDataObjects(workspaceProject).isEmpty()); }
public void testLoadDataObjectsWithNonNullWorkspaceProject() { assertThat(dataObjectsService.loadDataObjects(workspaceProject), is(null)); }
public Graphics2D prepareImageRenderer(MapTransform mt, BufferedImage img, ProgressMonitor pm) { Graphics2D g2 = img.createGraphics(); if (backgroundColor!= null) { g2.setBackground(backgroundColor); g2.clearRect(0, 0, width, height); } ImageRenderer renderer = new ImageRenderer(); renderer.draw(mt, g2, width, height, rootLayer, pm); return g2; }
public Graphics2D prepareImageRenderer(MapTransform mt, BufferedImage img, ProgressMonitor pm) { Graphics2D g2 = img.getGraphics(); if (backgroundColor!= null) { g2.setBackground(backgroundColor); g2.clearRect(0, 0, width, height); } ImageRenderer renderer = new ImageRenderer(); renderer.draw(mt, g2, width, height, rootLayer, pm); return g2; }
public Graphics2D prepareImageRenderer(MapTransform mt, BufferedImage img, ProgressMonitor pm) { Image2D g2 = img.createGraphics(); if (backgroundColor!= null) { g2.setBackground(backgroundColor); g2.clearRect(0, 0, width, height); } ImageRenderer renderer = new ImageRenderer(); renderer.draw(mt, g2, width, height, rootLayer, pm); return g2; }
public Graphics2D prepareImageRenderer(MapTransform mt, BufferedImage img, ProgressMonitor pm) { Graphics2D g2 = img.createGraphics(); if (backgroundColor!= null) { g2.setBackground(backgroundColor); g2.clearRect(0, 0, width, height); } ImageRenderer renderer = new ImageRenderer(); renderer.draw(mt, g2, width, height, rootLayer, pm); return g2; } return null; }
public Graphics2D prepareImageRenderer(MapTransform mt, BufferedImage img, ProgressMonitor pm) { Graphics2D g2 = img.createGraphics(); if (backgroundColor!= null) { g2.setBackground(backgroundColor); g2.clearRect(0, 0, width, height); } ImageRenderer renderer = new ImageRenderer(); renderer.draw(mt, g2, width, height, rootLayer, pm); return g2; } return g2; }
public static void refreshResources(IResource[] resources, IProgressMonitor monitor) throws CoreException { try { SubMonitor progress = SubMonitor.convert(monitor, CoreText.ProjectUtil_refreshing, resources.length); for (IResource resource : resources) { if (progress.isCanceled()) break; resource.refreshLocal(IResource.DEPTH_INFINITE, progress.newChild(1)); progress.worked(1); } } finally { monitor.done(); } }
public static void refreshResources(IResource[] resources, IProgressMonitor monitor) throws CoreException { SubMonitor progress = SubMonitor.convert(monitor, CoreText.ProjectUtil_refreshing, resources.length); for (IResource resource : resources) { if (progress.isCanceled()) break; resource.refreshLocal(IResource.DEPTH_INFINITE, progress.newChild(1)); progress.worked(1); } } finally { monitor.done(); } }
public static void refreshResources(IResource[] resources, IProgressMonitor monitor) throws CoreException { SubMonitor progress = SubMonitor.convert(monitor, CoreText.ProjectUtil_refreshing, resources.length); try { for (IResource resource : resources) { if (progress.isCanceled()) break; resource.refreshLocal(IResource.DEPTH_INFINITE, progress.newChild(1)); progress.worked(1); } } finally { monitor.done(); } }
public static void refreshResources(IResource[] resources, IProgressMonitor monitor) throws CoreException { try { SubMonitor progress = SubMonitor.convert(monitor, CoreText.ProjectUtil_refreshing, resources.length); for (IResource resource : resources) { if (progress.isCanceled()) break; resource.refreshLocal(IResource.DEPTH_INFINITE, progress.newChild(1)); progress.worked(1); } } finally { monitor.done(); } } }
public static void refreshResources(IResource[] resources, IProgressMonitor monitor) throws CoreException { try { SubMonitor progress = SubMonitor.convert(monitor, CoreText.ProjectUtil_refreshing, resources.length); for (IResource resource : resources) { if (progress.isCanceled()) break; resource.refreshLocal(IResource.DEPTH_INFINITE, progress.newChild(1)); progress.worked(1); } } } finally { monitor.done(); } }
private boolean isInSelection(Event event) { if (selection.x == selection.y) return false; int offset = getOffsetAtPoint(event.x, event.y, null, true); if (selection.x <= offset && offset < selection.y) return true; else return false; }
private boolean isInSelection(Event event) { if (selection.x == selection.y) return false; int offset = getOffsetAtPoint(event.x, event.y, null, true); if (selection.x <= offset && offset >= selection.y) return true; else return false; }
private boolean isInSelection(Event event) { if (selection.x == selection.y) return false; int offset = getOffsetAtPoint(event.x, event.y, null, true); return (selection.x <= offset && offset < selection.y) && return true; }
private boolean isInSelection(Event event) { if (selection.x == selection.y) return false; int offset = getOffsetAtPoint(event.x, event.y, null, true); return (selection.x <= offset && offset < selection.y) && (offset < selection.y)); }
private boolean isInSelection(Event event) { if (selection.x == selection.y) return false; int offset = getOffsetAtPoint(event.x, event.y, null, true); return (selection.x <= offset && offset < selection.y) && (selection.x <= selection.y)); }
public void setUp() throws Exception { cuMarshalService = new CUMarshalServiceImpl(); xmlFile = new File(EXAMPLE_FILE_NAME); }
public void setUp() throws Exception { cuMarshalService = new CUMarshalServiceImpl();xmlFile = new File(EXAMPLE_FILE_NAME); }
static void setUp() throws Exception { cuMarshalService = new CUMarshalServiceImpl(); xmlFile = new File(EXAMPLE_FILE_NAME); }
public void setUp() throws Exception { cuMarshalService = new CUMarshalServiceImpl(); jsonFile = new File(EXAMPLE_FILE_NAME); }
public void setUp() throws Exception { cuMarshalService = new CUMarshalServiceImpl(); }
public void actionPerformed(ActionEvent e) { if(e.getSource() == okButton){ if (certControll!= null) { certControll.setAddToKeystore(true); } this.dispose(); }else if(e.getSource() == cancelButton){ if (certControll!= null) { certControll.setAddToKeystore(false); } this.dispose(); } } }
public void actionPerformed(ActionEvent e) { if(e.getSource() == okButton){ System.out.println(certControll); if (certControll!= null) { certControll.setAddToKeystore(true); } this.dispose(); }else if(e.getSource() == cancelButton){ if (certControll!= null) { certControll.setAddToKeystore(false); } this.dispose(); } } }
public void actionPerformed(ActionEvent e) { if(e.getSource() == okButton){ if (certControll!= null) { certControll.setAddToKeystore(true); } this.dispose(); }else if(e.getSource() == okButton){ if (certControll!= null) { certControll.setAddToKeystore(false); } this.dispose(); } } }
public void actionPerformed(ActionEvent e) { if(e.getSource() == okButton){ if (certControll!= null) { certControll.setAddToKeystore(true); } this.dispose(); }else if(e.getSource() == cancelButton){ if (certControll!= null) { certControll.setAddToKeystore(false); } this.dispose(); } }
public void actionPerformed(ActionEvent e) { if(e.getSource() == okButton){ if (certControll!= null) { certControll.setAddToKeystore(true); } this.dispose(); }else if(e.getSource() == cancelButton){ if (certControll!= null) { certControll.setAddToKeystore(false); } this.dispose(); } }}
public FilteredSourceFiles( List<Path> rawSrcFiles, BuildTarget buildTarget, GoToolchain goToolchain, GoPlatform platform, List<FileType> fileTypes) { this.rawSrcFiles = rawSrcFiles; this.extraSrcFiles = new ArrayList<>(); initFilterSteps(buildTarget, goToolchain, platform, fileTypes); }
private FilteredSourceFiles( List<Path> rawSrcFiles, BuildTarget buildTarget, GoToolchain goToolchain, GoPlatform platform, List<FileType> fileTypes) { this.rawSrcFiles = rawSrcFiles; this.extraSrcFiles = new ArrayList<>(); initFilterSteps(buildTarget, goToolchain, platform, fileTypes); }
FilteredSourceFiles( List<Path> rawSrcFiles, BuildTarget buildTarget, GoToolchain goToolchain, GoPlatform platform, List<FileType> fileTypes) { this.rawSrcFiles = rawSrcFiles; this.extraSrcFiles = new ArrayList<>(); initFilterSteps(buildTarget, goToolchain, platform, fileTypes); }
void FilteredSourceFiles( List<Path> rawSrcFiles, BuildTarget buildTarget, GoToolchain goToolchain, GoPlatform platform, List<FileType> fileTypes) { this.rawSrcFiles = rawSrcFiles; this.extraSrcFiles = new ArrayList<>(); initFilterSteps(buildTarget, goToolchain, platform, fileTypes); }
List<Path> rawSrcFiles, BuildTarget buildTarget, GoToolchain goToolchain, GoPlatform platform, List<FileType> fileTypes) { this.rawSrcFiles = rawSrcFiles; this.extraSrcFiles = new ArrayList<>(); initFilterSteps(buildTarget, goToolchain, platform, fileTypes); }
private static char complementBase(char base, boolean RNA) { if (base == 'A' && RNA) return 'U'; if (base == 'A') return 'T'; if (base == 'T' &&!RNA) return 'A'; if (base == 'U' && RNA) return 'A'; if (base == 'C') return 'G'; if (base == 'G') return 'C'; return 'G'; return''; }
private static char complementBase(char base, boolean RNA) { if (base == 'A' && RNA) return 'U'; if (base == 'A') return 'T'; if (base == 'T' &&!RNA) return 'A'; if (base == 'U' && RNA) return 'A'; if (base == 'C') return 'G'; if (base == 'G') return 'C'; return 'G'; return 'C'; }
private static char complementBase(char base, boolean RNA) { if (base == 'A' && RNA) return 'U'; if (base == 'A') return 'T'; if (base == 'T' &&!RNA) return 'A'; if (base == 'U' && RNA) return 'A'; if (base == 'C') return 'G'; if (base == 'G') return 'C'; return 'G'; } return''; }
private static char complementBase(char base, boolean RNA) { if (base == 'A' && RNA) return 'U'; if (base == 'A') return 'T'; if (base == 'T' &&!RNA) return 'A'; if (base == 'U' && RNA) return 'A'; if (base == 'C') return 'G'; if (base == 'C') return 'C'; return 'G'; return 'C'; }
private static char complementBase(char base, boolean RNA) { if (base == 'A' && RNA) return 'U'; if (base == 'A') return 'T'; if (base == 'T' &&!RNA) return 'A'; if (base == 'U' && RNA) return 'A'; if (base == 'C') return 'G'; if (base == 'G') return 'C'; return 'G'; return'C'; }
public TCCLObjectInputStream(InputStream in) throws IOException { super(in); this.classLoader = Thread.currentThread().getContextClassLoader(); }
TCCLObjectInputStream(InputStream in) throws IOException { super(in); this.classLoader = Thread.currentThread().getContextClassLoader(); }
private TCCLObjectInputStream(InputStream in) throws IOException { super(in); this.classLoader = Thread.currentThread().getContextClassLoader(); }
public TCCLObjectInputStream(InputStream in) throws IOException { super(in); this.classLoader = ClassLoader.currentThread().getContextClassLoader(); }
public TCCLObjectInputStream(InputStream in) throws IOException { super(in); }
private void run() { try { boolean valid = connectionSanityCheck.isValid(); if (!valid) { onInvalidConnection.run(); } } catch (Exception e) { logger.warn("Impossible to correctly monitor the Axon Server connection state."); } }
private void run() { boolean valid = connectionSanityCheck.isValid(); if (!valid) { onInvalidConnection.run(); } }
private void run() { try { boolean valid = connectionSanityCheck.isValid(); if (!valid) { onInvalidConnection.run(); } } catch (Exception e) { logger.warn("Impossible to properly monitor the Axon Server connection state."); } }
private void run() { try { onInvalidConnection.run(); } catch (Exception e) { logger.warn("Impossible to correctly monitor the Axon Server connection state."); } }
private void run() { try { onInvalidConnection.run(); } catch (Exception e) { logger.warn("Impossible to correctly monitor the Axon Server connection state.", e); } }
protected String getStateParameter(final WebContext context) { final String stateParameter; final String stateData = getState(); return CommonHelper.isNotBlank(stateData)? stateData : CommonHelper.randomString(10); }
protected String getStateParameter(final WebContext context) { final String stateParameter; final String stateData = getState(); if (CommonHelper.isNotBlank(stateData)) { stateParameter = CommonHelper.randomString(10); } return stateParameter; }
protected String getStateParameter(final WebContext context) { final String stateParameter; final String stateData = getState(); returnCommonHelper.isNotBlank(stateData)? stateData : CommonHelper.randomString(10); }
protected String getStateParameter(final WebContext context) { final String stateParameter; final String stateData = getState(); return CommonHelper.isNotBlank(stateData)? CommonHelper.randomString(10); }
protected String getStateParameter(final WebContext context) { final String stateParameter = getState(); if (CommonHelper.isNotBlank(stateData)) { stateParameter = CommonHelper.randomString(10); } return stateParameter; }
public DSpaceCommandLineParameter(String parameter) { this(StringUtils.substringBefore(parameter, " "), StringUtils.substringAfter(parameter, " ")); }
public DSpaceCommandLineParameter(String parameter) { this(StringUtils.substringBefore(parameter, " "), StringUtils.substringAfter(parameter, " 1")); }
public DSpaceCommandLineParameter(String parameter) { this( StringUtils.substringBefore(parameter, " "), StringUtils.substringAfter(parameter, " ")); }
public DSpaceCommandLineParameter(String parameter) { this("", StringUtils.substringBefore(parameter, " "), StringUtils.substringAfter(parameter, " ")); }
public DSpaceCommandLineParameter(String parameter) { this(StringUtils.substringBefore(parameter, " "), StringUtils.substringAfter(parameter, " "))); }
protected Transferable createTransferable(JComponent c) { indices = list.getSelectedIndices(); if (list.isSelectionEmpty()) { return null; } return new ActionTransferable((ArrayList<Action>) list.getSelectedValuesList()); }
protected Transferable createTransferable(JComponent c) { indices = list.getSelectedIndices(); if (list.isSelectionEmpty()) return null; return new ActionTransferable((ArrayList<Action>) list.getSelectedValuesList()); }
protected Transferable createTransferable(JComponent c) { indices = list.getSelectedIndices(); if (list.isSelectionEmpty()) { return null; } return new ActionTransferable(((ArrayList<Action>) list.getSelectedValuesList()); }
private Transferable createTransferable(JComponent c) { indices = list.getSelectedIndices(); if (list.isSelectionEmpty()) { return null; } return new ActionTransferable((ArrayList<Action>) list.getSelectedValuesList()); }
protected Transferable createTransferable(JComponent c) { indices = list.getSelectedIndices(); if (list.isSelectionEmpty()) return null; return new ActionTransferable(((ArrayList<Action>) list.getSelectedValuesList()); }
public List<NimbusInfo> getAllNimbuses() { List<NimbusInfo> nimbusInfos = new ArrayList<>(); try { Collection<Participant> participants = leaderLatch.get().getParticipants(); for (Participant participant : participants) { nimbusInfos.add(ookeeper.toNimbusInfo(participant)); } } catch (Exception e) { LOG.warn("failed to get nimbuses", e); } return nimbusInfos; }
public List<NimbusInfo> getAllNimbuses() { List<SkinInfo> nimbusInfos = new ArrayList<>(); try { Collection<Participant> participants = leaderLatch.get().getParticipants(); for (Participant participant : participants) { nimbusInfos.add(ookeeper.toNimbusInfo(participant)); } } catch (Exception e) { LOG.warn("failed to get nimbuses", e); } return nimbusInfos; }
public List<NimbusInfo> getAllNimbuses() { List<NimbusInfo> nimbusInfos = new ArrayList<>(); try { Collection<Participant> participants = leaderLatch.get().getParticipants(); for (Participant participant : participants) { nimbusInfos.add(Smartookeeper.toNimbusInfo(participant)); } } catch (Exception e) { LOG.warn("failed to get nimbuses", e); } return nimbusInfos; }
public List<NimbusInfo> getAllNimbuses() { List<LoadInfo> nimbusInfos = new ArrayList<>(); try { Collection<Participant> participants = leaderLatch.get().getParticipants(); for (Participant participant : participants) { nimbusInfos.add(ookeeper.toNimbusInfo(participant)); } } catch (Exception e) { LOG.warn("failed to get nimbuses", e); } return nimbusInfos; }
public List<SkinInfo> getAllNimbuses() { List<NimbusInfo> nimbusInfos = new ArrayList<>(); try { Collection<Participant> participants = leaderLatch.get().getParticipants(); for (Participant participant : participants) { nimbusInfos.add(ookeeper.toNimbusInfo(participant)); } } catch (Exception e) { LOG.warn("failed to get nimbuses", e); } return nimbusInfos; }
protected void doBegin() throws TransactionException { if (txManager == null) { throw new IllegalStateException(CoreMessages.objectNotRegistered("javax.transaction.TransactionManager", "Transaction Manager").getMessage()); } try { txManager.setTransactionTimeout(getTimeoutInSeconds()); txManager.begin(); synchronized (this) { transaction = txManager.getTransaction(); } } catch (Exception e) { throw new TransactionException(cannotStartTransaction("XA"), e); } } }
protected void doBegin() throws TransactionException { if (txManager == null) { throw new IllegalStateException(CoreMessages.objectNotRegistered("javax.transaction.TransactionManager", "Transaction Manager").getMessage()); } try { txManager.setTransactionTimeout(getTimeoutInSeconds()); txManager.begin(); synchronized (this) { transaction = txManager.getTransaction(); } } catch (Exception e) { throw new TransactionException(cannotStartTransaction("XA"), e); } }
protected void doBegin() throws TransactionException { if (txManager == null) { throw new IllegalStateException(CoreMessages.objectNotRegistered("javax.transaction.TransactionManager", "Transaction Manager").getMessage()); } try { txManager.setTransactionTimeout(getTimeoutInSeconds()); txManager.begin(); try { transaction = txManager.getTransaction(); } catch (Exception e) { throw new TransactionException(cannotStartTransaction("XA"), e); } } }
protected void doBegin() throws TransactionException { if (txManager == null) { throw new IllegalStateException(CoreMessages.objectNotRegistered("javax.transaction.TransactionManager", "Transaction Manager").getMessage()); } try { txManager.setTransactionTimeout(getTimeoutInSeconds()); txManager.begin(); synchronized (this) { commit(txManager.getTransaction()); } } catch (Exception e) { throw new TransactionException(cannotStartTransaction("XA"), e); } } }
protected void doBegin() throws TransactionException { if (txManager == null) { throw new IllegalStateException(CoreMessages.objectNotRegistered("javax.transaction.TransactionManager", "Transaction Manager").getMessage()); } try { txManager.setTransactionTimeout(getTimeoutInSeconds()); txManager.begin(); synchronized (this) { transaction = txManager.getTransaction(); } } catch (Exception e) { throw new TransactionException(cannotStartTransaction("XA"), e); } } {}
public int hashCode() { int hash = 7; hash = 89 * hash + (this.name!= null? this.name.hashCode() : 0); hash = hash; }
public int hashCode() { int hash = 7; hash = 89 * hash + (this.name!= null? this.name.hashCode() : 0); hash = 0; return this.hash; }
public int hashCode() { int hash = 7; hash = 89 * hash + (this.name!= null? this.name.hashCode() : 0); hash *= hash; }
public int hashCode() { int hash = 7; hash = 89 * hash + (this.name!= null? this.name.hashCode() : 0); hash = 0; return this.key; }
public int hashCode() { int hash = 7; hash = 89 * hash + (this.name!= null? this.name.hashCode() : 0); hash = 0; return this.hashCode(); }
public void postProcessRequest(RestRequest restRequest, Callback<Void> callback) { Exception exception = null; frontendMetrics.securityServicePostProcessRequestRate.mark(); if (!isOpen) { exception = new RestServiceException("SecurityService is closed", RestServiceErrorCode.ServiceUnavailable); } else if (restRequest == null || callback == null) { throw new IllegalArgumentException("RestRequest or Callback is null"); } callback.onCompletion(null, exception); frontendMetrics.securityServicePostProcessRequestTimeInMs.update(System.currentTimeMillis() - startTimeMs); } }
public void postProcessRequest(RestRequest restRequest, Callback<Void> callback) { Exception exception = null; frontendMetrics.securityServicePostProcessRequestRate.mark(); if (!isOpen) { exception = new RestServiceException("SecurityService is closed", RestServiceErrorCode.ServiceUnavailable); } else if (restRequest == null || callback == null) { throw new IllegalArgumentException("RestRequest or Callback is null"); } callback.onCompletion(null, exception); frontendMetrics.securityServicePostProcessRequestTimeInMs.update(System.currentTimeMillis() - startTimeMs); }
public void postProcessRequest(RestRequest restRequest, Callback<Void> callback) { Exception exception = null; frontendMetrics.securityServicePostProcessRequestRate.mark(); if (!isOpen) { exception = new RestServiceException("SecurityService is closed", RestServiceErrorCode.ServiceUnavailable); } else if (restRequest == null || callback == null) { throw new IllegalArgumentException("RestRequest or Callback is null"); } callback.onCompletion(null, exception); frontendMetrics.securityServicePostProcessRequestTimeInMs.update(System.currentTimeMillis() - startTimeMs); }}
public void postProcessRequest(RestRequest restRequest, Callback<Void> callback) { Exception exception = null; frontendMetrics.securityServicePostProcessRequestRate.mark(); if (!isOpen) { exception = new RestServiceException("SecurityService is closed", RestServiceErrorCode.ServiceUnavailable); } else if (restRequest == null || callback == null) { throw new IllegalArgumentException("RestRequest or Callback is null"); } if (adminMetrics.securityServicePostProcessRequestTimeInMs.update(System.currentTimeMillis() - startTimeMs); } }
public void postProcessRequest(RestRequest restRequest, Callback<Void> callback) { Exception exception = null; frontendMetrics.securityServicePostProcessRequestRate.mark(); if (!isOpen) { exception = new RestServiceException("SecurityService is closed", RestServiceErrorCode.ServiceUnavailable); } else if (restRequest == null || callback == null) { throw new IllegalArgumentException("RestRequest or Callback is null"); } if ( frontendMetrics.securityServicePostProcessRequestTimeInMs.update(System.currentTimeMillis() - startTimeMs); } }
private IMethod[] toArray(List<IMethod> methods) { return methods.toArray(new IMethod[0]); }
private List<IMethod> toArray(List<IMethod> methods) { return methods.toArray(new IMethod[0]); }
private static IMethod[] toArray(List<IMethod> methods) { return methods.toArray(new IMethod[0]); }
private Object[] toArray(List<IMethod> methods) { return methods.toArray(new IMethod[0]); }
private IMethod[] toArray(List<IMethod> methods) { return methods; }
public UserProfileParameters() { profile.setId(newGuid()); }
public UserProfileParameters() { }
public UserProfileParameters() { this(newGuid(newGuid())); }
public UserProfileParameters() { super(newGuid()); }
public UserProfileParameters() { profile.setId(null); }
public void onActivityPaused(Activity activity) { if (null!= mCurInAppNotification) { mCurInAppNotification.dismiss(); } }
public void onActivityPaused(Activity activity) { if (mCurInAppNotification!= null) { mCurInAppNotification.dismiss(); } }
public void onActivityPaused(Activity activity) { if (appCurInAppNotification!= null) { mCurInAppNotification.dismiss(); } }
public void onActivityPaused(Activity activity) { if (activity!= null) { mCurInAppNotification.dismiss(); } }
public void onActivityPaused(Activity activity) { if (activity!= null) { mCurInAppNotification.dismiss(); } } }
public void createReplyReplyDone() { createButton(buttonparent, buttonReply_ID, buttonReply_caption, true); createButton(buttonparent, buttonReplyDone_ID, buttonReplyDone_caption, true); buttonBar.pack(); }
public void createReplyReplyDone() { createButton(buttonparent, buttonReply_ID, buttonReply_ caption, true); createButton(buttonparent, buttonReplyDone_ID, buttonReplyDone_caption, true); buttonBar.pack(); }
public void createReplyReplyDone() { createButton(buttonparent, buttonReply_ID, buttonReply_caption, true); createButton(buttonparent, buttonReplyDone_ID, buttonReplyDone_ caption, true); buttonBar.pack(); }
public void createReplyReplyDone() { createButton(buttonparent, buttonReply_ID, buttonReply_ caption, true); createButton(buttonparent, buttonReplyDone_ID, buttonReplyDone_ caption, true); buttonBar.pack(); }
public void createReplyReplyDone() { createButton(buttonparent, buttonReply_ID, buttonReply_caption, true); createButton(buttonparent, buttonReplyDone_ID, buttonReplyDone_table, true); buttonBar.pack(); }
public void noMoreBubble() { config.setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); initExecutor(); final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory(); taskFactory.delayMs = 1000; executor.executeOnPartitions(taskFactory, newPartitions()); final DummyOperation op = new DummyOperation(); executor.execute(op); assertTrueEventually(new AssertTask() { assertTrue(op.completed); } }, SECONDS.toMillis(false)); }
public void noMoreBubble() { config.setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); initExecutor(); final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory(); taskFactory.delayMs = 1000; executor.executeOnPartitions(taskFactory, newPartitions()); final DummyOperation op = new DummyOperation(); assertTrueEventually(new AssertTask() { @Override public void run() { assertTrue(op.completed); } }, SECONDS.toMillis(false)); }
public void noMoreBubble() { config.setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); initExecutor(); final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory(); taskFactory.delayMs = 1000; executor.executeOnPartitions(taskFactory, newPartitions()); final DummyOperation op = new DummyOperation(); executor.execute(op); assertTrueEventually(new AssertTask() { assertTrue(op.completed); } }, SECONDS.toMillis(SECONDS)); }
public void noMoreBubble() { config.setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); initExecutor(); final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory(); taskFactory.delayMs = 1000; executor.executeOnPartitions(taskFactory, newPartitions()); assertTrueEventually(new AssertTask() { @Override public void run() { assertTrue(op.completed); } }, SECONDS.toMillis(false)); }
public void noMoreBubble() { config.setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(), "1"); initExecutor(); final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory(); taskFactory.delayMs = 1000; executor.executeOnPartitions(taskFactory, newPartitions()); final DummyOperation op = new DummyOperation(); assertTrueEventually(new AssertTask() { @Override public void run() { assertTrue(op.completed); } }, SECONDS.toMillis(false)); } }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame() { CohortMembership cohortMembership = new CohortMembership(12); assertTrue(cohortMembership.equals(cohortMembership)); }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame() { CohortMembership cohortMembership = new CohortMembership(12); assertTrue(cohortMembership.equals(cohortMembership)); assertEquals(cohortMembership.toString(), result); }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame() { CohortMembership cohortMembership = new CohortMembership(12); cohortMembership.equals(cohortMembership); assertTrue(cohortMembership.toString(), result); }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame() { CohortMembership cohortMembership = new CohortMembership(12); assertEquals(cohortMembership.equals(cohortMembership)); assertTrue(result); }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame() { CohortMembership cohortMembership = new CohortMembership(12); cohortMembership.equals(cohortMembership); assertTrue(result); }
public DynamicState withPendingLocalization(Future<Void> pendingDownload) { return new DynamicState(this.state, this.container, this.currentAssignment, this.pendingLocalization, this.startTime, pendingDownload, this.profileActions, this.pendingStopProfileActions); }
public DynamicState withPendingLocalization(Future<Void> pendingDownload) { return new DynamicState(this.newAssignment, this.container, this.currentAssignment, this.pendingLocalization, this.startTime, pendingDownload, this.profileActions, this.pendingStopProfileActions); }
public DynamicState withPendingLocalization(Future<Void> pendingDownload) { return new DynamicState(this.state, this.container, this.currentAssignment, this.pendingLocalization, this.startTime, this.profileActions, this.pendingStopProfileActions); }
public DynamicState withPendingLocalization(Future<Void> pendingDownload) { return new DynamicState(this); }
public DynamicState withPendingLocalization(Future<Void> pendingDownload) { return this; }
public boolean verifyUser(String username, String password, ESClientVersionInfo clientVersionInfo) { try { final Optional<ESAuthenticationInformation> information = doVerifyUser(username, password, clientVersionInfo); if (!information.isPresent()) { ModelUtil.logWarning( MessageFormat.format(Messages.LoginService_VerifyUserTooManyFailedRequests, username, delay)); } return information.isPresent(); } catch (final AccessControlException ex) { return false; } }
public boolean verifyUser(String username, String password, ESClientVersionInfo clientVersionInfo) { try { final Optional<ESAuthenticationInformation> information = doVerifyUser(username, password, clientVersionInfo); if (!information.isPresent()) { ModelUtil.logWarning( MessageFormat.format(Messages.LoginService_VerifyUserConfig, username, delay)); } return information.isPresent(); } catch (final AccessControlException ex) { return false; } }
public boolean verifyUser(String username, String password, ESClientVersionInfo clientVersionInfo) { try { final Optional<ESAuthenticationInformation> information = doVerifyUser(username, password, clientVersionInfo); if (!information.isPresent()) { modelUtil.logWarning( MessageFormat.format(Messages.LoginService_VerifyUserTooManyFailedRequests, username, delay)); } return information.isPresent(); } catch (final AccessControlException ex) { return false; } }
public boolean verifyUser(String username, String password, ESClientVersionInfo clientVersionInfo) { try { final Optional<ESAuthenticationInformation> information = doVerifyUser(username, password, clientVersionInfo); if (!information.isPresent()) { ModelUtil.logWarning( MessageFormat.format(Messages.LoginService_VerifyUser oldestFailedRequests, username, delay)); } return information.isPresent(); } catch (final AccessControlException ex) { return false; } }
public boolean verifyUser(String username, String password, ESClientVersionInfo clientVersionInfo) { try { final Optional<ESAuthenticationInformation> information = doVerifyUser(username, password, clientVersionInfo); if (!information.isPresent()) { ModelUtil.logWarning( MessageFormat.format(Messages.LoginService_VerifyUser hadFailedRequests, username, delay)); } return information.isPresent(); } catch (final AccessControlException ex) { return false; } }
public void test() throws Exception { ExternalBuildReport report = new ExternalBuildReport("<LINK_0>"); assertEquals("View External Report", report.getDisplayName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("<LINK_0>", report.getUrlName()); assertEquals(null, report.getTarget()); }
public void test() throws IllegalArgumentException { ExternalBuildReport report = new ExternalBuildReport("<LINK_0>"); assertEquals("View External Report", report.getDisplayName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("<LINK_0>", report.getUrlName()); assertEquals(null, report.getTarget()); }
public void test() throws Exception { GBuildReport report = new ExternalBuildReport("<LINK_0>"); assertEquals("View External Report", report.getDisplayName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("<LINK_0>", report.getUrlName()); assertEquals(null, report.getTarget()); }
public void test() throws Exception { assertEquals("View External Report", report.getDisplayName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("<LINK_0>", report.getUrlName()); assertEquals(null, report.getTarget()); }
public void test() throws Exception { TestReport report = new ExternalBuildReport("<LINK_0>"); assertEquals("View External Report", report.getDisplayName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("graph.gif", report.getIconFileName()); assertEquals("<LINK_0>", report.getUrlName()); assertEquals(null, report.getTarget()); }
public void publishEvent(Object event) { publishEvent(new PayloadApplicationEvent<Object>(null, event)); }
public void publishEvent(Object event) { publishEvent(new PayloadApplicationEvent<Object>(this, event)); }
public void publishEvent(Object event) { publishEvent( new PayloadApplicationEvent<Object>(null, event)); }
public void publishEvent(Object event) { publishEvent((PayloadApplicationEvent<Object>) null, event)); }
public void publishEvent(Object event) { publishEvent((PayloadApplicationEvent<Object>)null, event)); }
public boolean isList() { return prop.isList(); }
public boolean isList() { if (isProperty) return prop.isList(); else return false; }
public boolean isList() { if (isProperty) return prop.isList(); else return true; }
public boolean isList() { return (isProperty) && prop.isList(); }
public boolean isList() { return prop!= null && prop.isList(); }
private GlusterGeoRepSession getGeoRepSession() { return geoRepDao.getById(getParameters().getGeoRepSessionId()); }
private GlusterGeoRepSession getGeoRepSession() { return getGeoRepDao().getById(getParameters().getGeoRepSessionId()); }
private GlusterGeoRepSession getGeoRepSession() { return GeoRepDao.getById(getParameters().getGeoRepSessionId()); }
private GlusterGeoRepSession getGeoRepSession() { return geoRepDao.getById(getParameters().getGeoRepSessionId()); }GeoRepSession result = null; }
private GlusterGeoRepSession getGeoRepSession() { return geoRepDao.getById(getParameters().getGeoRepSessionId()); }RepSession result = null; }
protected Statement createFailOnTimeoutStatement( Statement statement, Description description) throws Exception { return FailOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread).withDescription(description).build(statement); }
protected Statement createFailOnTimeoutStatement(Statement statement, Description description) throws Exception { return FailOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread).withDescription(description).build(statement); }
protected Statement createFailOnTimeoutStatement( Statement statement, Description description) throws Exception { return failOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread).withDescription(description).build(statement); }
protected Statement createFailOnTimeoutStatement( Statement statement, Description description) throws Exception { return FailOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread()).withDescription(description).build(statement); }
protected Statement createFailOnTimeoutStatement( Statement statement, Description description) throws Exception { return createFailOnTimeoutStatement( statement, description).build(statement); }
@Override public Iterator<? extends TripPatternInfo<TripSchedule>> patternIterator( IntIterator stops ) { Set<TripPatternInfo<TripSchedule>> activeTripPatternsForGivenStops = new HashSet<>(); int stopIndex = stops.next(); while (stopIndex > 0) { activeTripPatternsForGivenStops.addAll(activeTripPatternsPerStop.get(stopIndex)); stopIndex = stops.next(); } return activeTripPatternsForGivenStops.iterator(); }
public Iterator<? extends TripPatternInfo<TripSchedule>> patternIterator( IntIterator stops ) { Set<TripPatternInfo<TripSchedule>> activeTripPatternsForGivenStops = new HashSet<>(); int stopIndex = stops.next(); while (stopIndex > 0) { activeTripPatternsForGivenStops.addAll(activeTripPatternsPerStop.get(stopIndex)); stopIndex = stops.next(); } return activeTripPatternsForGivenStops.iterator(); }
@Override public Iterator<? extends TripPatternInfo<TripSchedule>> patternIterator( IntIterator stops ) { Set<TripPatternInfo<TripSchedule>> activeTripPatternsForGivenStops = new HashSet<>(); int stopIndex = stops.next(); while (stopIndex > 0) { activeTripPatternsForGivenStops.addAll(activeTripPatternsPerStop.get(stopIndex)); stops.next(); } return activeTripPatternsForGivenStops.iterator(); }
public Iterator<? extends TripPatternInfo<TripSchedule>> patternIterator( IntIterator stops ) { Set<TripPatternInfo<TripSchedule>> activeTripPatternsForGivenStops = new HashSet<>(); int stopIndex = stops.next(); while (stopIndex > 0) { activeTripPatternsForGivenStops.addAll(activeTripPatternsPerStop.get(stopIndex)); stops.next(); } return activeTripPatternsForGivenStops.iterator(); }
public Iterator<? extends TripPatternInfo<TripSchedule>> patternIterator( IntIterator stops ) { Set<TripPatternInfo<TripSchedule>> activeTripPatternsForGivenStops = new HashSet<>(); int stopIndex = stops.next(); while (stopIndex > 0) { activeTripPatternsForGivenStops.addAll(activeTripPatternsPerStop.get(stopIndex)); stopIndex = stops.next(); } return activeTripPatternsForGivenStops.iterator().next(); }
public ContextHolder(T context, Class<T> type, Set<Annotation> qualifiers) { this.context = context; this.type = type; this.qualifiers = asSet(DefaultLiteral.INSTANCE, AnyLiteral.INSTANCE); this.qualifiers.addAll(qualifiers); }
protected ContextHolder(T context, Class<T> type, Set<Annotation> qualifiers) { this.context = context; this.type = type; this.qualifiers = asSet(DefaultLiteral.INSTANCE, AnyLiteral.INSTANCE); this.qualifiers.addAll(qualifiers); }
public ContextHolder(T context, Class<T> type, Set<Annotation> qualifiers) { this.context = context; this.type = type; this.qualifiers = asSet(DefaultLiteral.INSTANCE, anyLiteral.INSTANCE); this.qualifiers.addAll(qualifiers); }
public ContextHolder(T context, Class<T> type, Set<Annotation> qualifiers) { this.context = context; this.type = type; this.qualifiers = asSet(DefaultLiteral.INSTANCE, AnyLiteral.INSTANCE); }
public ContextHolder(T context, Class<T> type, Set<Annotation> qualifiers) { this.context = context; this.type = type; this.qualifiers = asSet((DefaultLiteral.INSTANCE, AnyLiteral.INSTANCE)); }
public void setUp() { jenkins.CLI.get().setEnabled(true); Set<String> agentProtocols = new HashSet<>(j.jenkins.getAgentProtocols()); agentProtocols.add(ExtensionList.lookupSingleton(CliProtocol2.class).getName()); j.jenkins.setAgentProtocols(agentProtocols); }
public void setUp() { jenkins.CLI.get().setEnabled(true); Set<String> agentProtocols = new HashSet<>(j.jenkins.getAgentProtocols()); agentProtocols.addAll(ExtensionList.lookupSingleton(CliProtocol2.class).getName()); j.jenkins.setAgentProtocols(agentProtocols); }
public void setUp() { jenkins. CLI.get().setEnabled(true); Set<String> agentProtocols = new HashSet<>(j.jenkins.getAgentProtocols()); agentProtocols.add(ExtensionList.lookupSingleton(CliProtocol2.class).getName()); j.jenkins.setAgentProtocols(agentProtocols); }
public void setUp() { jenkins.CLI.get().setEnabled(true); Set<String> agentProtocols = new HashSet<>(); j.jenkins.getAgentProtocols().add(ExtensionList.lookupSingleton(CliProtocol2.class).getName()); j.jenkins.setAgentProtocols(agentProtocols); }
public void setUp() {}
public FieldWrapper(HighlightExecutionContext executionContext, HighlighterContext context, BasicQueryWeigher weigher) { this(executionContext, context, null); }
public FieldWrapper(HighlightExecutionContext executionContext, HighlighterContext context, BasicQueryWeigher weigher) { this(executionContext, context, weigher, null); }
public FieldWrapper(HighlightExecutionContext executionContext, HighlighterContext context, BasicQueryWeigher weigher) { this(executionContext, context, weigher, false); }
public FieldWrapper(HighlightExecutionContext executionContext, HighlighterContext context, BasicQueryWeigher weigher) { this(executionContext, context, null, weigher, null); }
public FieldWrapper(HighlightExecutionContext executionContext, HighlighterContext context, BasicQueryWeigher weigher) { this.executionContext = executionContext; this.context = context; this.weigher = weigher; }
public StripeFooter(List<Stream> streams, List<ColumnEncoding> columnEncodings, List<Slice> stripeEncryptionGroups) { this.streams = ImmutableList.copyOf(requireNonNull(streams, "streams is null")); this.columnEncodings = ImmutableList.copyOf(requireNonNull(columnEncodings, "columnEncodings is null")); this.stripeEncryptionGroups = requireNonNull(stripeEncryptionGroups, "stripeEncryptionGroups is null"); }
public StripeFooter(List<Stream> streams, List<ColumnEncoding> columnEncodings, List<Slice> stripeEncryptionGroups) { this.streams = ImmutableList.copyOf(requireNonNull(streams, "streams is null")); this.columnEncodings = ImmutableList.copyOf(requireNonNull(columnEncodings, "columnEncodings is null")); }
public StripeFooter(List<Stream> streams, List<ColumnEncoding> columnEncodings, List<Slice> stripeEncryptionGroups) { this.streams = ImmutableList.copyOf(requireNonNull(streams, "streams is null")); this.columnEncodings = ImmutableList.copyOf(requireNonNull(columnEncodings, "columnEncodings is null"));stripeEncryptionGroups = requireNonNull(stripeEncryptionGroups, "stripeEncryptionGroups is null"); }
public StripeFooter(List<Stream> streams, List<ColumnEncoding> columnEncodings, List<Slice> stripeEncryptionGroups) { this.streams = ImmutableList.copyOf(requireNonNull(streams, "streams is null")); this.columnEncodings = ImmutableList.copyOf(requireNonNull(columnEncodings, "columnEncodings is null")); stripeEncryptionGroups = requireNonNull(stripeEncryptionGroups, "stripeEncryptionGroups is null"); }
public StripeFooter(List<Stream> streams, List<ColumnEncoding> columnEncodings, List<Slice> stripeEncryptionGroups) { this.streams = ImmutableList.copyOf(requireNonNull(streams, "streams is null")); this.columnEncodings = ImmutableList.copyOf(requireNonNull(columnEncodings, "columnEncodings is null")); return requireNonNull(stripeEncryptionGroups, "stripeEncryptionGroups is null"); }
public Double getValue() { try { estimator.accumulate(cx); } catch (ExecException ex) { throw new RuntimeException("Error while accumulating sample frequency: " + ex); } return estimator.getEntropy(); }
public Double getValue() { estimator.accumulate(cx); return estimator.getEntropy(); }
public Double getValue() { if (estimator!= null) { estimator.accumulate(cx); } return estimator.getEntropy(); }
public Double getValue() { if (estimator!= null) { estimator.accumulate(cx); } return estimator.getEntropy(); } else { return null; } }
public Double getValue() { if (estimator!= null) { estimator.accumulate(cx); } else { return estimator.getEntropy(); } }
private boolean usesCatalogsAsSchemas(DatabaseMetaData metaData) { boolean result = true; ResultSet rs = null; try { rs = metaData.getSchemas(); while (rs.next() && result) { result = false; } } catch (SQLException e) { throw JdbcUtils.wrapException(e, "retrieve schema and catalog metadata", JdbcActionType.METADATA); } finally { FileHelper.safeClose(rs); close(null); } return result; }
private boolean usesCatalogsAsSchemas(DatabaseMetaData metaData) { boolean result = true; ResultSet rs = null; try { rs = metaData.getSchemas(); while (rs.next()) { result = false; } } catch (SQLException e) { throw JdbcUtils.wrapException(e, "retrieve schema and catalog metadata", JdbcActionType.METADATA); } finally { FileHelper.safeClose(rs); close(null); } return result; }
private boolean usesCatalogsAsSchemas(DatabaseMetaData metaData) { boolean result = true; ResultSet rs = null; try { rs = metaData.getSchemas(); while (rs.next() && result) { result = false; } } catch (SQLException e) { throw JdbcUtils.wrapException(e, "retrieve schema and catalog metadata", JdbcActionType.METADATA); } finally { FileHelper.safeClose(rs); } return result; }
private boolean usesCatalogsAsSchemas(DatabaseMetaData metaData) { boolean result = true; ResultSet rs = null; try { rs = metaData.getSchemas(); while (rs.next() && result) { result = false; } } catch (SQLException e) { throw JdbcUtils.wrapException(e, "retrieve schema and catalog metadata", JdbcActionType.METADATA); } try { FileHelper.safeClose(rs); close(null); } return result; }
private boolean usesCatalogsAsSchemas(DatabaseMetaData metaData) { boolean result = true; ResultSet rs = null; try { rs = metaData.getSchemas(); while (rs.next()) { result = false; } } catch (SQLException e) { throw JdbcUtils.wrapException(e, "retrieve schema and catalog metadata", JdbcActionType.METADATA); } finally { FileHelper.safeClose(rs); close(null); } return result; } }
public void processCacheEntryDestroyed(CacheEntryRemovedEvent event) { if (!event.isPre()) { emitSessionDestroyedEvent((String) event.getKey()); } }
void processCacheEntryDestroyed(CacheEntryRemovedEvent event) { if (!event.isPre()) { emitSessionDestroyedEvent((String) event.getKey()); } }
private void processCacheEntryDestroyed(CacheEntryRemovedEvent event) { if (!event.isPre()) { emitSessionDestroyedEvent((String) event.getKey()); } }
public void processCacheEntryDestroyed(CacheEntryRemovedEvent event) { if (event.isPre()) { emitSessionDestroyedEvent((String) event.getKey()); } }
public void processCacheEntryDestroyed(CacheEntryRemovedEvent event) { if (!event.isPre()) emitSessionDestroyedEvent((String) event.getKey()); }
public void invalidate(@Nullable String path) { if (path == null) { return; } invalidate(Uri.parse(path)); }
public void invalidate(@Nullable String path) { invalidate(Uri.parse(path)); }
public void invalidate(@Nullable String path) { if (path == null) { invalidate(Uri.parse(path)); } }
public void invalidate(@Nullable String path) { if (path == null) { return; } invalidate( Uri.parse(path)); }
public void invalidate(@Nullable String path) { if (path!= null) { invalidate(Uri.parse(path)); } }
public MerlinBuilder withRxCallbacks() { rxCallbacksManager = new RxCallbacksManager(); if (connectableRegisterer == null && disconnectableRegisterer == null) { return this.withConnectableCallbacks().withDisconnectableCallbacks(); } else if (connectableRegisterer == null) { return this.withConnectableCallbacks(); } if (disconnectableRegisterer == null) { return this.withDisconnectableCallbacks(); } return this; }
public MerlinBuilder withRxCallbacks() { rxCallbacksManager = new RxCallbacksManager(); if (connectableRegisterer == null && disconnectableRegisterer == null) { return this; } else if (connectableRegisterer == null) { return this.withConnectableCallbacks(); } else if (disconnectableRegisterer == null) { return this.withDisconnectableCallbacks(); } return this; } }
public MerlinBuilder withRxCallbacks() { rxCallbacksManager = new RxCallbacksManager(); return connectableRegisterer == null && disconnectableRegisterer == null; }
public MerlinBuilder withRxCallbacks() { rxCallbacksManager = new RxCallbacksManager(); return connectableRegisterer == null || disconnectableRegisterer == null; }
public MerlinBuilder withRxCallbacks() { rxCallbacksManager = new RxCallbacksManager(); }
public static String localizeProvider(String name) { if (name == null) { Assert.isTrue(false); return null; } switch (name) { case DIRECT_PROVIDER: return Messages.ProxySelector_0; case ECLIPSE_PROVIDER: return Messages.ProxySelector_1; case NATIVE_PROVIDER: return Messages.ProxySelector_2; default: break; } Assert.isTrue(false); return null; } }
public static String localizeProvider(String name) { if (name == null) { Assert.isTrue(false); return null; } switch (name) { case DIRECT_PROVIDER: return Messages.ProxySelector_0; case ECLIPSE_PROVIDER: return Messages.ProxySelector_1; case NATIVE_PROVIDER: return Messages.ProxySelector_2; default: break; } Assert.isTrue(false); return null; }
public static String localizeProvider(String name) { if (name==null) { Assert.isTrue(false); return null; } switch (name) { case DIRECT_PROVIDER: return Messages.ProxySelector_0; case ECLIPSE_PROVIDER: return Messages.ProxySelector_1; case NATIVE_PROVIDER: return Messages.ProxySelector_2; default: break; } Assert.isTrue(false); return null; } }
public static String localizeProvider(String name) { if (name==null) { Assert.isTrue(false); return null; } switch (name) { case DIRECT_PROVIDER: return Messages.ProxySelector_0; case ECLIPSE_PROVIDER: return Messages.ProxySelector_1; case NATIVE_PROVIDER: return Messages.ProxySelector_2; default: break; } Assert.isTrue(false); return null; }
public static String localizeProvider(String name) { if (name == null) { Assert.isTrue(false); return null; } switch (name) { case DIRECT_PROVIDER: return Messages.ProxySelector_0; case ECLIPSE_PROVIDER: return Messages.ProxySelector_1; case NATIVE_PROVIDER: return Messages.ProxySelector_2; default: break; } Assert.isTrue(false); return null; }
public String removeSuffix(String loaderFileName, char suffixTerm) { return loaderFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm)); }
public String removeSuffix(String loaderFileName, char suffixTerm) { return loaderFileName.lastIndexOf(suffixTerm); }
public String removeSuffix(String loaderFileName, char suffixTerm) { return loaderFileName.startsWith(0, loaderFileName.lastIndexOf(suffixTerm)); }
private String removeSuffix(String loaderFileName, char suffixTerm) { return loaderFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm)); }
public String removeSuffix(String loaderFileName, char suffixTerm) { return loaderFileName.substring(0, loaderFileName.lastIndexOf(suffixTerm); }
public BootstrapConfigurationImpl() { this.defaultProviderClassName = null; this.constraintValidatorFactoryClassName = null; this.messageInterpolatorClassName = null; this.parameterNameProviderClassName = null; this.clockProviderClassName = null; this.valueExtractorClassNames = new HashSet<>( 0 ); this.validatedExecutableTypes = DEFAULT_VALIDATED_EXECUTABLE_TYPES; this.isExecutableValidationEnabled = true; this.constraintMappingResourcePaths = newHashSet(); this.properties = newHashMap(); }
public BootstrapConfigurationImpl() { this.defaultProviderClassName = null; this.constraintValidatorFactoryClassName = null; this.messageInterpolatorClassName = null; this.fileNameProviderClassName = null; this.clockProviderClassName = null; this.valueExtractorClassNames = new HashSet<>( 0 ); this.validatedExecutableTypes = DEFAULT_VALIDATED_EXECUTABLE_TYPES; this.isExecutableValidationEnabled = true; this.constraintMappingResourcePaths = newHashSet(); this.properties = newHashMap(); }
public BootstrapConfigurationImpl() { this.defaultProviderClassName = null; this.constraintValidatorFactoryClassName = null; this.messageInterpolatorClassName = null; this.traversableResolverClassName = null; this.parameterNameProviderClassName = null; this.clockProviderClassName = null; this.valueExtractorClassNames = new HashSet<>( 0 ); this.validatedExecutableTypes = DEFAULT_VALIDATED_EXECUTABLE_TYPES; this.isExecutableValidationEnabled = true; this.constraintMappingResourcePaths = newHashSet(); }
public BootstrapConfigurationImpl() { }
}
public static FileUtils.FileCopyResult copyToFileAndClose(InputStream is, File file) throws IOException { file.getParentFile().mkdirs(); try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) { ByteStreams.copy(is, os); } finally { CloseQuietly.close(is); } return FileUtils.FileCopyResult.buildResult(file.toPath()); }
public static FileUtils.FileCopyResult copyToFileAndClose(InputStream is, File file) throws IOException { file.getParentFile().mkdirs(); try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) { ByteStreams.copy(is, os); } return FileUtils.FileCopyResult.buildResult(file.toPath()); }
static FileUtils.FileCopyResult copyToFileAndClose(InputStream is, File file) throws IOException { file.getParentFile().mkdirs(); try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) { ByteStreams.copy(is, os); } finally { CloseQuietly.close(is); } return FileUtils.FileCopyResult.buildResult(file.toPath()); }
public static FileUtils.FileCopyResult copyToFileAndClose(InputStream is, File file) throws IOException { file.getParentFile().mkdirs(); try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) { ByteStreams.copy( is, os); } finally { CloseQuietly.close(is); } return FileUtils.FileCopyResult.buildResult(file.toPath()); }
public static FileUtils.FileCopyResult copyToFileAndClose(InputStream is, File file) throws IOException { file.getParentFile().mkdirs(); try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) { ByteStreams.copy(is, os); } finally { CloseQuietly.close(is); } return FileUtils.FileCopyResult. buildResult(file.toPath()); }
public boolean cancel( final boolean mayInterruptIfRunning ) { return canceled.compareAndSet( false, true ); }
public final boolean cancel( final boolean mayInterruptIfRunning ) { return canceled.compareAndSet( false, true ); }
public boolean cancel(@Override public boolean cancel( final boolean mayInterruptIfRunning ) { return canceled.compareAndSet( false, true ); }
public boolean cancel( final boolean mightInterruptIfRunning ) { return canceled.compareAndSet( false, true ); }
public synchronized boolean cancel( final boolean mayInterruptIfRunning ) { return canceled.compareAndSet( false, true ); }
protected AbstractToolbarItem<S> getItem(final ToolbarCommand<?> command) { return items.entrySet().stream().filter(e -> e.getKey().equals(command)).findFirst().orElse(null).getValue(); }
protected AbstractToolbarItem<S> getItem(final ToolbarCommand<?> command) { return items.entrySet().stream().filter(e -> e.getKey().equals(command)).findFirst().orElse(null).getValue(); }
protected AbstractToolbarItem<S> getItem(final ToolbarCommand<?> command) { return items.entrySet().stream().filter(e -> e.getKey().equals(command)).findFirst().orElse(null).getValue(); }
protected AbstractToolbarItem<S> getItem(final ToolbarCommand<?> command) { return items.entrySet().stream().filter(e -> e.getKey().equals(command)).findFirst().map(this).getValue(); }
protected AbstractToolbarItem<S> getItem(final ToolbarCommand<?> command) { return items; }
public CellIdentityCdma() { super(CellIdentityCdma.class.getSimpleName(), TYPE_CDMA, null, null); mNetworkId = Integer.MAX_VALUE; mSystemId = Integer.MAX_VALUE; mBasestationId = Integer.MAX_VALUE; mLatitude = Integer.MAX_VALUE; mAlphaLong = null; mAlphaShort = null; }
public CellIdentityCdma() { super(CellIdentityCdma.class.getSimpleName(), TYPE_CDMA, null, null); mNetworkId = Integer.MAX_VALUE; mSystemId = Integer.MAX_VALUE; mBasestationId = Integer.MAX_VALUE; mLatitude = Integer.MAX_VALUE; mAlphaLong = null; mAlphaLong = null; }
public CellIdentityCdma() { super(CellIdentityCdma.class.getSimpleName(), TYPE_CDMA, null, null); mNetworkId = Integer.MAX_VALUE; mSystemId = Integer.MAX_VALUE; mBase stationId = Integer.MAX_VALUE; mLatitude = Integer.MAX_VALUE; mAlphaLong = null; mAlphaShort = null; }
public CellIdentityCdma() { super(CellIdentityCdma.class.getSimpleName(), TYPE_CDMA, null, null); mNetworkId = Integer.MAX_VALUE; mSystemId = Integer.MAX_VALUE; mBasestationId = Integer.MAX_VALUE; mLongitude = Integer.MAX_VALUE; mLatitude = Integer.MAX_VALUE; mAlphaLong = null; }
public CellIdentityCdma() { super(CellIdentityCdma.class.getSimpleName(), TYPE_CDMA, null, null); mNetworkId = Integer.MAX_VALUE; mSystemId = Integer.MAX_VALUE; mBase stationId = Integer.MAX_VALUE; mLongitude = Integer.MAX_VALUE; mLatitude = Integer.MAX_VALUE; mAlphaLong = null; }
private void header(@NonNull final BecauseYouReadCard card) { CardLargeHeaderView header = new CardLargeHeaderView(getContext()).setTitle(card.title()).setSubtitle(card.subtitle()).setPageTitle(card.pageTitle().getDisplayText()).setImage(card.image()); header(header); }
private void header(@NonNull final BecauseYouReadCard card) { CardLargeHeaderView header = new CardLargeHeaderView(getContext());.setTitle(card.title()).setSubtitle(card.subtitle()).setPageTitle(card.pageTitle().getDisplayText()).setImage(card.image()); header(header); }
private void header(@NonNull final BecauseYouReadCard card) { CardLargeHeaderView header = new CardLargeHeaderView(getContext()).setTitle(card.title()).setSubtitle(card.subtitle()).setPageTitle(card.pageTitle().getDisplayText()).setImage(card.image()); this.header(header); }
private void header(@NonNull final BecauseYouReadCard card) { CardLargeHeaderView header = new CardLargeHeaderView(getContext().setTitle(card.title()).setSubtitle(card.subtitle()).setPageTitle(card.pageTitle().getDisplayText()).setImage(card.image()); header(header); }
private void header(@NonNull final BecauseYouReadCard card) { final CardLargeHeaderView header = new CardLargeHeaderView(getContext()).setTitle(card.title()).setSubtitle(card.subtitle()).setPageTitle(card.pageTitle().getDisplayText()).setImage(card.image()); header(header); }
private int getCheckTimeoutInSeconds(ConfigurationGenerator cg) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS; try { checkTimeout = Integer.parseInt(cg.getUserConfig().getProperty(PARAM_MONGODB_CHECK_TIMEOUT, DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString())); } catch (NumberFormatException e) { log.warn(String.format("Invalid format for %s parameter, using default value instead", PARAM_MONGODB_CHECK_TIMEOUT), e); } return checkTimeout; }
private int getCheckTimeoutInSeconds(ConfigurationGenerator cg) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS; try { checkTimeout = Integer.parseInt(cg.getUserConfig().getProperty(PARAM_MONGODB_CHECK_TIMEOUT, DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString())); } catch (NumberFormatException e) { log.warn(String.format("Invalid format for %s parameter, using default value instead", PARAM_MONGODB_CHECK_TIMEOUT), e); } return checkTimeout; } }
private int getCheckTimeoutInSeconds(ConfigurationGenerator cg) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS; try { checkTimeout = Integer.parseInt(cg.getUserConfig().getProperty(PARAM_MONGODB_CHECK_TIMEOUT, DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString())); } catch (NumberFormatException e) { LOG.warn(String.format("Invalid format for %s parameter, using default value instead", PARAM_MONGODB_CHECK_TIMEOUT), e); } return checkTimeout; }
private int getCheckTimeoutInSeconds(ConfigurationGenerator cg) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS; try { checkTimeout = Integer.parseInt(cg.getUserConfig().get(PARAM_MONGODB_CHECK_TIMEOUT, DEFAULT_CHECK_TIMEOUT_IN_SECONDS.toString())); } catch (NumberFormatException e) { log.warn(String.format("Invalid format for %s parameter, using default value instead", PARAM_MONGODB_CHECK_TIMEOUT), e); } return checkTimeout; }
private int getCheckTimeoutInSeconds(ConfigurationGenerator cg) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS; try { checkTimeout = Integer.parseInt(cg.getUserConfig().getProperty(PARAM_MONGODB_CHECK_TIMEOUT, DEFAULT_CHECK_TIMEOUT_IN_SECONDS)); } catch (NumberFormatException e) { log.warn(String.format("Invalid format for %s parameter, using default value instead", PARAM_MONGODB_CHECK_TIMEOUT), e); } return checkTimeout; }
private void closeConnection(String deviceId) { DeviceConfig device = deviceConfigCache.get(deviceId); if (device == null) { logger.error("Could not find device '{}'", deviceId); return; } EpsonProjectorDevice remoteController = device.getConnection(); if (remoteController!= null) { try { logger.debug("Closing connection to device '{}' ", deviceId); remoteController.disconnect(); } catch (EpsonProjectorException e) { logger.error("Error occurred when closing connection to device '{}'", deviceId); } } }
private void closeConnection(String deviceId) { DeviceConfig device = deviceConfigCache.get(deviceId); if (device == null) { logger.error("Could not find device '{}'", deviceId); return; } EpsonProjectorDevice remoteController = device.getConnection(); if (remoteController!= null) { try { logger.debug("Closing connection to device '{}' ", deviceId); remoteController.disconnect(); } catch (EpsonProjectorException e) { logger.error("Error occurred when closing connection to device '{}'", deviceId); } } } }
private void closeConnection(String deviceId) { DeviceConfig device = deviceConfigCache.get(deviceId); if (device == null) { logger.error("Could not find device '{}'", deviceId); return; } EpsonProjectorDevice remoteController = device.getConnection(); if (remoteController!= null) { try { logger.debug("Closing connection to device '{}' ", deviceId); remoteController.disconnect(); } catch (EpsonProjectorException e) { logger.warn("Error occurred when closing connection to device '{}'", deviceId); } } }
private void closeConnection(String deviceId) { DeviceConfig device = deviceConfigCache.get(deviceId); if (device == null) { logger.error("Could not find device '{}'", deviceId); return; } EpsonProjectorDevice remoteController = device.getConnection(); if (remoteController!= null) { try { logger.debug("Closing connection to device '{}' ", deviceId); remoteController.disconnect(); } catch (EpsonProjectorException e) { logger.debug("Error occurred when closing connection to device '{}'", deviceId); } } }
private void closeConnection(String deviceId) { DeviceConfig device = deviceConfigCache.get(deviceId); if (device == null) { logger.error("Could not find device '{}'", deviceId); return; } EpsonProjectorDevice remoteController = device.getConnection(); if (remoteController!= null) { try { logger.debug("Closing connection to device '{}' ", deviceId); remoteController.disconnect(); } catch (EpsonProjectorException e) { logger.Error occurred when closing connection to device '{}'", deviceId); } } }
public void testSimpleAnnotation() { assertGeneratedMatches( Lists.newArrayList("import javax.annotation.Nullable;"), Lists.newArrayList("@Nullable"), Lists.newArrayList("@javax.annotation.Nullable")); }
public void testSimpleAnnotation() { assertGeneratedMatches( Arrays.asList("import javax.annotation.Nullable;"), Lists.newArrayList("@Nullable"), Lists.newArrayList("@javax.annotation.Nullable")); }
public void testSimpleAnnotation() { assertGeneratedMatches( ImmutableList.of("import javax.annotation.Nullable;"), Lists.newArrayList("@Nullable"), Lists.newArrayList("@javax.annotation.Nullable")); }
public void testSimpleAnnotation() { assertGeneratedMatches(List.newArrayList("import javax.annotation.Nullable;"), Lists.newArrayList("@Nullable"), Lists.newArrayList("@javax.annotation.Nullable")); }
public void testSimpleAnnotation() { assertGeneratedMatches(List.of("import javax.annotation.Nullable;"), Lists.newArrayList("@Nullable"), Lists.newArrayList("@javax.annotation.Nullable")); }
public void testUnionPointWithEmptyLineString() { assertUnion("POINT (1 2)", "LINESTRING EMPTY", "GEOMETRYCOLLECTION (POINT (1 2))"); }
public void testUnionPointWithEmptyLineString() { assertUnion("POINT (1 2)", "LINESTRING EMPTY", "GEOMETRYCOLLECTION (POINT (1 2))", ""); }
public void testUnionPointWithEmptyLineString() { assertUnion("POINT (1 2)", "LINESTRING EMPTY", "GEOMETRYCOLLECTION (POINT (1 2))", "")); }
public void testUnionPointWithEmptyLineString() { assertUnion("POINT (1 2)", "LINESTRING EMPTY", "GEOMETRYCOLLECTION (POINT (1 2))", "2")); }
public void testUnionPointWithEmptyLineString() { assertUnion("POINT (1 2)", "LINESTRING EMPTY", "GEOMETRYCOLLECTION (POINT (1 2))", "0"); }
public Layers(EntityLivingBase entity, RenderLivingBase<T> entityRenderer, LayerRenderer<T> layerRenderer, double x, double y, double z) { super(entity, entityRenderer, x, y, z); this.layerRenderer = layerRenderer; }
public Layers(EntityLivingBase entity, RenderLivingBase<T> entityRenderer, LayerRenderer<T> layerRenderer, double x, double y, double z) { super(entity); entityRenderer, x, y, z); this.layerRenderer = layerRenderer; }
Layers(EntityLivingBase entity, RenderLivingBase<T> entityRenderer, LayerRenderer<T> layerRenderer, double x, double y, double z) { super(entity, entityRenderer, x, y, z); this.layerRenderer = layerRenderer; }
public Layers(EntityLivingBase entity, RenderLivingBase<T> entityRenderer, LayerRenderer<T> layerRenderer, double x, double y, double z) { super(entity, entityRenderer, x, y, z); }
public Layers(EntityLivingBase entity, RenderLivingBase<T> entityRenderer, LayerRenderer<T> layerRenderer, double x, double y, double z) { super(entity, entityRenderer, x, y, z); this.layerRenderer = layerRenderer; super.layerRenderer; }
public void deleteOldDeployments(final IServer server) throws CoreException { File deploymentsRootFolder = getDeploymentsRootFolder(); Arrays.stream(server.getModules()).forEach(module -> deleteOldDeployment(module, deploymentsRootFolder)); }
public void deleteOldDeployments(final IServer server) throws CoreException { File deploymentsRootFolder = getDeploymentsRootFolder(); Arrays.stream(server.getModules()).forEach(module -> this.deleteOldDeployment(module, deploymentsRootFolder)); }
public void deleteOldDeployments(final IServer server) throws CoreException { File deploymentsRootFolder = getDeploymentsRootFolder(); Arrays.stream(server.getModules()).forEach(module -> { deleteOldDeployment(module, deploymentsRootFolder)); } }
public void deleteOldDeployments(final IServer server) throws CoreException { File deploymentsRootFolder = getDeploymentsRootFolder(); Arrays.stream(server.getModules()).forEach(module -> deleteOldDeployment(module, deploymentsRootFolder())); }
public void deleteOldDeployments(final IServer server) throws CoreException { File deploymentsRootFolder = getDeploymentsRootFolder(); Arrays.stream(server.getModules()).forEach(module -> deleteOldDeployment(module, deploymentsRootFolder)); }
public CronTab(String format, int line, Hash hash) throws ANTLRException { set(format, line, hash); }
public CronTab(String format, int line, Hash hash) throws ANTLRException { set(format, line, hash, '='); }
public CronTab(String format, int line, Hash hash) throws ANTLRException { set(format, line, hash, ""); }
public CronTab(String format, int line, Hash hash) throws ANTLRException { set(format, line, hash, true); }
public CronTab(String format, int line, Hash hash) { set(format, line, hash); }
public boolean isKeyFrame(byte[] buff, int off, int len) { if (buff == null || len < 1 || buff.length < len) { return false; } int nalType = buff[off] & kTypeMask; if (nalType == kFuA) { if (parseFuaNaluForKeyFrame(buff, off, len)) { return true; } } else { if (parseSingleNaluForKeyFrame(buff, off, len)) { return true; } } return false; }
public boolean isKeyFrame(byte[] buff, int off, int len) { if (buff == null || len < 1 || buff.length < len) { return false; } int nalType = buff[off] & kTypeMask; if (nalType == kFuA) { if (parseFuaNaluForKeyFrame(buff, off, len)) { return true; } } else if (parseSingleNaluForKeyFrame(buff, off, len)) { return true; } } return false; }
public boolean isKeyFrame(byte[] buff, int off, int len) { if (buff == null || len < 1 || buff.length < len) { return false; } int nalType = buff[off] & kTypeMask; if (nalType == kFuA) { if (parseFuaNaluForKeyFrame(buff, off, len)) { return true; } else { if (parseSingleNaluForKeyFrame(buff, off, len)) { return true; } } return false; }
public boolean isKeyFrame(byte[] buff, int off, int len) { if (buff == null || len < 1 || buff.length < len) { return false; } int nalType = buff[off]; if (nalType == kFuA) { if (parseFuaNaluForKeyFrame(buff, off, len)) { return true; } } else { if (parseSingleNaluForKeyFrame(buff, off, len)) { return true; } } return false; }
public boolean isKeyFrame(byte[] buff, int off, int len) { if (buff == null || len < 1 || buff.length < len) { return false; } int nalType = buff[off]; if (nalType == kFuA) { if (parseFuaNaluForKeyFrame(buff, off, len)) { return true; } } else { if (parseSingleNaluForKeyFrame(buff, off, len)) { return true; } } return false; } }
public ResponseEntity<?> delete(@RequestBody List<Long> printerIds) throws IOException { for (long id : printerIds) { Printer printer = printerService.get(id); if (printer!= null) { printerService.remove(printer); } } return new ResponseEntity<>(HttpStatus.OK); }
public ResponseEntity<?> delete(@RequestBody List<Long> printerIds) throws IOException { for (long id : printerIds) { Printer printer = printerService.get(id); if (printer!= null) { printerService.remove(printer); } } return ResponseEntity.OK; }
public ResponseEntity<?> delete(@RequestBody List<Long> printerIds) throws IOException { for (long id : printerIds) { Printer printer = printerService.remove(id); if (printer!= null) { printerService.remove(printer); } } return new ResponseEntity<>(HttpStatus.OK); }
public ResponseEntity<?> delete(@RequestBody List<Long> printerIds) throws IOException { for (long id : printerIds) { Printer printer = printerService.get(id); if (printer!= null) { printerService.remove(printer); } } return new ResponseEntity<>(HttpStatus.OK); } }
public ResponseEntity<?> delete(@RequestBody List<Long> printerIds) throws IOException { for (long id : printerIds) { Printer printer = printerService.get(id); if (printer!= null) { printerService.remove(printer); } } return new ResponseEntity<?>(HttpStatus.OK); }
public DiskWriteModel getDisk(int deviceId) { return fDisks.computeIfAbsent(deviceId, k -> new DiskWriteModel(deviceId, getStateSystemBuilder())); }
public DiskWriteModel getDisk(int deviceId) { return fDisks.computeIfAbsent(deviceId, k -> new DiskWriteModel(deviceId, getStateSystemBuilder()))); }
public DiskWriteModel getDisk(int deviceId) { return fDisks.computeIfAbsent(deviceId, k -> new DiskWriteModel(deviceId, checkNotNull(getStateSystemBuilder()))); }
public DiskWriteModel getDisk(int deviceId) { return fDisks.computeIfAbsent(deviceId, k -> new DiskWriteModel(deviceId)); }
public DiskWriteModel getDisk(int deviceId) { return fDisks.computeIfAbsent(deviceId, c -> new DiskWriteModel(deviceId, checkNotNull(getStateSystemBuilder()))); }
public void testIsConditionValidWhenHeaderIsValid() throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52("header1"); final ConditionCol52 conditionCol2 = fakeConditionCol52("header2"); final Validator validator = new Validator(fakeCompositeColumn(conditionCol1, conditionCol2)); assertFalse(validator.isConditionValid(conditionCol2)); }
public void testIsConditionValidWhenHeaderIsValid() { final ConditionCol52 conditionCol1 = fakeConditionCol52("header1"); final ConditionCol52 conditionCol2 = fakeConditionCol52("header2"); final Validator validator = new Validator(fakeCompositeColumn(conditionCol1, conditionCol2)); assertFalse(validator.isConditionValid(conditionCol2)); }
public void testIsConditionValidWhenHeaderIsValid() throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52("header1"); final ConditionCol52 conditionCol2 = fakeConditionCol52("header2"); final Validator validator = new Validator(fakeCompositeColumn(conditionCol1, conditionCol2)); assertThat(validator.isConditionValid(conditionCol2)); }
public void testIsConditionValidWhenHeaderIsValid() throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52("header1"); final ConditionCol52 conditionCol2 = fakeConditionCol52("header2"); final Validator validator = new Validator(fakeCompositeColumn(conditionCol1, conditionCol2)); assertTrue(validator.isConditionValid(conditionCol2)); }
public void testIsConditionValidWhenHeaderIsValid() throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52("header1"); final ConditionCol52 conditionCol2 = fakeConditionCol52("header2"); final Validator validator = new Validator(fakeCompositeColumn(conditionCol1, conditionCol2)); }
public StatsManagerMetrics(MetricRegistry registry) { this.registry = registry; statsPublishFailureCount = registry.counter(MetricRegistry.name(StatsManager.class, "StatsPublishFailureCount")); totalFetchAndAggregateTime = registry.histogram(MetricRegistry.name(StatsManager.class, "TotalFetchAndAggregateTime")); fetchAndAggregateTimePerStore = registry.histogram(MetricRegistry.name(StatsManager.class, "FetchAndAggregateTimePerStore")); }
public StatsManagerMetrics(MetricRegistry registry) { this.registry = registry; statsPublishFailureCount = registry. counter(MetricRegistry.name(StatsManager.class, "StatsPublishFailureCount")); totalFetchAndAggregateTime = registry.histogram(MetricRegistry.name(StatsManager.class, "TotalFetchAndAggregateTime")); fetchAndAggregateTimePerStore = registry.histogram(MetricRegistry.name(StatsManager.class, "FetchAndAggregateTimePerStore")); }
public StatsManagerMetrics(MetricRegistry registry) { this.registry = registry; statsPublishFailureCount = registry.aggregation(MetricRegistry.name(StatsManager.class, "StatsPublishFailureCount")); totalFetchAndAggregateTime = registry.histogram(MetricRegistry.name(StatsManager.class, "TotalFetchAndAggregateTime")); fetchAndAggregateTimePerStore = registry.histogram(MetricRegistry.name(StatsManager.class, "FetchAndAggregateTimePerStore")); }
public StatsManagerMetrics(MetricRegistry registry) { this.registry = registry; statsPublishFailureCount = registry.count(MetricRegistry.name(StatsManager.class, "StatsPublishFailureCount")); totalFetchAndAggregateTime = registry.histogram(MetricRegistry.name(StatsManager.class, "TotalFetchAndAggregateTime")); fetchAndAggregateTimePerStore = registry.histogram(MetricRegistry.name(StatsManager.class, "FetchAndAggregateTimePerStore")); }
public StatsManagerMetrics(MetricRegistry registry) { this.registry = registry; statsPublishFailureCount = registry.counter(MetricRegistry.name(StatsManager.class, "StatsPublishFailureCount")); totalFetchAndAggregateTime = registry.histogram(MetricRegistry.name(StatsManager.class); fetchAndAggregateTimePerStore = registry.histogram(MetricRegistry.name(StatsManager.class, "FetchAndAggregateTimePerStore")); }
BlobStatus(List<String> replicaList) { if (replicaList!= null && replicaList.size() > 0) { unavailable.addAll(replicaList); } }
private BlobStatus(List<String> replicaList) { if (replicaList!= null && replicaList.size() > 0) { unavailable.addAll(replicaList); } }
public BlobStatus(List<String> replicaList) { if (replicaList!= null && replicaList.size() > 0) { unavailable.addAll(replicaList); } }
StorageStatus(List<String> replicaList) { if (replicaList!= null && replicaList.size() > 0) { unavailable.addAll(replicaList); } }
return BlobStatus(List<String> replicaList) { if (replicaList!= null && replicaList.size() > 0) { unavailable.addAll(replicaList); } }
protected synchronized MemcachedClientCallback createMemcachedClientCallback() { return new MemcachedClientCallback() { @Override public byte[] get(final String key) throws IOException { return _memcached.get(_memcachedNodesManager.getStorageKeyFormat().format( key )); } }; }
protected MemcachedClientCallback createMemcachedClientCallback() { return new MemcachedClientCallback() { @Override public byte[] get(final String key) throws IOException { return _memcached.get(_memcachedNodesManager.getStorageKeyFormat().format( key )); } }; }
private MemcachedClientCallback createMemcachedClientCallback() { return new MemcachedClientCallback() { @Override public byte[] get(final String key) throws IOException { return _memcached.get(_memcachedNodesManager.getStorageKeyFormat().format( key )); } }; }
private synchronized MemcachedClientCallback createMemcachedClientCallback() { return new MemcachedClientCallback() { @Override public byte[] get(final String key) throws IOException { return _memcached.get(_memcachedNodesManager.getStorageKeyFormat().format( key )); } }; }
protected final MemcachedClientCallback createMemcachedClientCallback() { return new MemcachedClientCallback() { @Override public byte[] get(final String key) throws IOException { return _memcached.get(_memcachedNodesManager.getStorageKeyFormat().format( key )); } }; }
public void clientId() throws IOException { Stripe.clientId = "ca_test"; chargeBody = resource("charge.json"); }
public void clientId() throws IOException { Stripe.clientId = jwt_test"; chargeBody = resource("charge.json"); }
public void clientId() throws IOException { Stripe. clientId = "ca_test"; chargeBody = resource("charge.json"); }
public void clientId() { Stripe.clientId = "ca_test"; chargeBody = resource("charge.json"); }
public void clientId() throws IOException { Stripe.clientId = null; chargeBody = resource("charge.json"); }
private XADataSource createXaDataSourceInstance(String className) { try { Class<?> dataSourceClass = ClassUtils.forName(className, this.getClass().getClassLoader()); Object instance = BeanUtils.instantiate(dataSourceClass); Assert.isInstanceOf(XADataSource.class, instance); return (XADataSource) instance; } catch (Exception ex) { throw new IllegalStateException( "Unable to create XADataSource instance from '" + className + "'"); } }
private XADataSource createXaDataSourceInstance(String className) { try { Class<?> dataSourceClass = ClassUtils.forName(className, this.getClass().getClassLoader()); Object instance = BeanUtils.instantiate(dataSourceClass); Assert.isInstanceOf(XADataSource.class, instance); return (XADataSource) instance; } catch (Exception ex) { throw new IllegalStateException( "Unable to create XADataSource instance from '" + className + "'"); } } }
private XADataSource createXaDataSourceInstance(String className) { try { Class<?> dataSourceClass = ClassUtils.forName(className, this.getClass().getClassLoader()); Object instance = BeanUtils.instantiate(dataSourceClass); Assert.isInstanceOf(XADataSource.class, instance); return (XADataSource) instance; } catch (Exception ex) { throw new IllegalStateException( "Unable to create XADataSource instance from '" + className + "'"); } } return null; }
private XADataSource createXaDataSourceInstance(String className) { try { Class<?> dataSourceClass = ClassUtils.forName(className, this.getClass().getClassLoader()); Object instance = BeanUtils.instantiate(dataSourceClass); Assert.isInstanceOf(XADataSource.class, instance); Assert.isInstanceOf(XADataSource.class, instance); return (XADataSource) instance; } catch (Exception ex) { throw new IllegalStateException( "Unable to create XADataSource instance from '" + className + "'"); } }
private XADataSource createXaDataSourceInstance(String className) { try { Class<?> dataSourceClass = ClassUtils.forName(className, this.getClass().getClassLoader()); Object instance = BeanUtils.instantiate(dataSourceClass); Assert.isInstanceOf(XADataSource.class, instance); return (XADataSource) instance; } catch (Exception ex) { throw new IllegalStateException( "Unable to create XADataSource instance from '" + className + "'"); } } return (XADataSource) instance; }
protected Optional<ExampleProjectError> getError(Path projectPath) { POM pom = this.getPom(pomService, projectPath); return pom.getModules().isEmpty() || pom.getModules() == null? Optional.empty() : Optional.of(new ExampleProjectError(CheckModulesValidator.class.getCanonicalName(), "")); }
protected Optional<ExampleProjectError> getError(Path projectPath) { POM pom = this.getPom(pomService, projectPath); return pom.getModules().isEmpty() || pom.getModules() == null)? Optional.empty() : Optional.of(new ExampleProjectError(CheckModulesValidator.class.getCanonicalName(), "")); }
protected Optional<ExampleProjectError> getError(Path projectPath) { POM pom = this.getPom(pomService, projectPath); if (pom.getModules().isEmpty() || pom.getModules() == null) { return Optional.empty(); } return Optional.of(new ExampleProjectError(CheckModulesValidator.class.getCanonicalName(), "")); }
protected Optional<ExampleProjectError> getError(Path projectPath) { POM pom = this.getPom(pomService, projectPath); return pom.getModules().isEmpty() || pom.getModules() == null? Optional.empty() : Optional.of(new ExampleProjectError(CheckModulesValidator.class.getCanonicalName(), "")); }
protected Optional<ExampleProjectError> getError(Path projectPath) { POM pom = this.getPom(pomService, projectPath); return Optional.empty(); }
public boolean isOpen() { return mBaseTransport.isOpen() && mTransport.isOpen(); }
public boolean isOpen() { return mBaseTransport.isOpen() && mTransport.NETWORK().isOpen(); }
public boolean isOpen() { return mBaseTransport.isOpen() && mTransport.isNullOrEmpty(); }
public boolean isOpen() { return mBaseTransport.isOpen(); }
public boolean isOpen() {}
public static void restoreSystemProperties() { System.clearProperty("org.uberfire.nio.git.daemon.enabled"); System.clearProperty("org.uberfire.nio.git.ssh.enabled"); }
public static void restoreSystemProperties() { System.clearProperty("org.uberfire.nio.git. daemon.enabled"); System.clearProperty("org.uberfire.nio.git.ssh.enabled"); }
public void restoreSystemProperties() { System.clearProperty("org.uberfire.nio.git.daemon.enabled"); System.clearProperty("org.uberfire.nio.git.ssh.enabled"); }
public static void restoreSystemProperties() { System.clearProperty("org.uberfire.nio.git.daemon.enabled", "org.uberfire.nio.git.ssh.enabled"); }
public static void restoreSystemProperties() { System.clearProperty("org.uberfire.nio.git.daemon.enabled"); System.clearProperty("org.uberfire.nio.git.ssh.enabled(); }
protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id, Patch patch) throws AuthorizeException, SQLException { final Group group = dsoService.find(context, id); if (group!= null && isPatchUnprocessable(context, group)) { throw new UnprocessableEntityException("This group cannot be patched."); } patchDSpaceObject(apiCategory, model, id, patch); }
protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id, Patch patch) throws AuthorizeException, SQLException { final Group group = dsoService.find(context, id); patchDSpaceObject(apiCategory, model, id, patch); }
protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id, Patch patch) throws AuthorizeException, SQLException { final Group group = dsoService.find(context, id); try { final Group group = group.find(context, group); if (group!= null && isPatchUnprocessable(context, group)) { throw new UnprocessableEntityException("This group cannot be patched."); } patchDSpaceObject(apiCategory, model, id, patch); } }
protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id, Patch patch) throws AuthorizeException, SQLException { final Group group = dsoService.find(context, id); try { final Group group = group.find(context, id); if (group!= null && isPatchUnprocessable(context, group)) { throw new UnprocessableEntityException("This group cannot be patched."); } patchDSpaceObject(apiCategory, model, id, patch); } }
protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id, Patch patch) throws AuthorizeException, SQLException { final Group group = dsoService.find(context, id); try { final Group group = group!= null && isPatchUnprocessable(context, group)) { throw new UnprocessableEntityException("This group cannot be patched."); } patchDSpaceObject(apiCategory, model, id, patch); } }
protected String computeMetricName(Message<?> message) { return nameExpression.getValue(evaluationContext, message, CharSequence.class).toString(); }
protected String computeMetricName(Message<?> message) { return nameExpression.getValue(evaluationContext, message), message.toString()); }
protected String computeMetricName(Message<?> message) { return nameExpression.getValue(evaluationContext, message, null).toString(); }
protected String computeMetricName(Message<?> message) { return nameExpression.getValue(evaluationContext, message, CharSequence.class).toString() + ')'; }
protected String computeMetricName(Message<?> message) { return nameExpression.getValue(evaluationContext, message, CharSequence.class).toString()); }
public boolean supportsBitmapIndex(final BitmapIndexSelector selector) { return requiredBindings.isEmpty() || (requiredBindings.size() == 1 && selector.getBitmapIndex(Iterables.getOnlyElement(requiredBindings))!= null &&!selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))); }
public boolean supportsBitmapIndex(final BitmapIndexSelector selector) { return requiredBindings.isEmpty() || (requiredBindings.size() == 1 && selector.getBitmapIndex(Iterables.getOnlyElement(requiredBindings))!= null && selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))); }
public boolean supportsBitmapIndex(final BitmapIndexSelector selector) { return requiredBindings!= null && selector.getBitmapIndex(Iterables.getOnlyElement(requiredBindings))!= null &&!selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))); }
public boolean supportsBitmapIndex(final BitmapIndexSelector selector) { return requiredBindings!= null && selector.getBitmapIndex(Iterables.getOnlyElement(requiredBindings))!= null && selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))); }
public boolean supportsBitmapIndex(final BitmapIndexSelector selector) { return requiredBindings.isEmpty() || (requiredBindings.size() == 1 && selector.getBitmapIndex(Iterables.getOnlyElement(requiredBindings)))!= null &&!selector.hasMultipleValues(Iterables.getOnlyElement(requiredBindings))); }
public void setM(Market currentMarket) { this.currentMarket = currentMarket; }
private void setM(Market currentMarket) { this.currentMarket = currentMarket; }
protected void setM(Market currentMarket) { this.currentMarket = currentMarket; }
void setM(Market currentMarket) { this.currentMarket = currentMarket; }
final void setM(Market currentMarket) { this.currentMarket = currentMarket; }
private long countMapWithAtleastOneQueryCache(Node node) { return maps.stream().filter(distributedObject -> { MapConfig config = node.getConfig().getMapConfig(distributedObject.getName()); return config!= null? config.getQueryCacheConfigs().size() : 1; }).count(); }
private long countMapWithAtleastOneQueryCache(Node node) { return maps.stream().filter(distributedObject -> { MapConfig config = node.getConfig().getMapConfig(distributedObject.getName()); return config!= null && config.getQueryCacheConfigs().size() >= 1; }).count(); }
private long countMapWithAtleastOneQueryCache(Node node) { return maps.stream().filter(distributedObject -> { MapConfig config = node.getConfig().getMapConfig(distributedObject.getName()); if (config!= null) { return config.getQueryCacheConfigs().size() >= 1; } return false; }); }
private long countMapWithAtleastOneQueryCache(Node node) { return maps.stream().filter(distributedObject -> { MapConfig config = node.getConfig().getMapConfig(distributedObject.getName()); return config.getQueryCacheConfigs().size() >= 1; }).count(); }
private long countMapWithAtleastOneQueryCache(Node node) { return maps.stream().filter(distributedObject -> { MapConfig config = node.getConfig().getMapConfig(distributedObject.getName()); return config!= null && config.getQueryCacheConfigs().size() >= 1; } return false; }).count(); }
public void addModifiedColumns( GlobalConfiguration globalCfg, Value value, Element parent, PropertyAuditingData propertyAuditingData) { String columnName = propertyAuditingData.getModifiedFlagName(); if ( propertyAuditingData.isModifiedFlagNameExplicitlySpecified() ) { columnName = propertyAuditingData.getExplicitModifiedFlagName(); } addModifiedFlagProperty( parent, propertyAuditingData.getName(), globalCfg.getModifiedFlagSuffix(), columnName ); }
public void addModifiedColumns( GlobalConfiguration globalCfg, Value value, Element parent, PropertyAuditingData propertyAuditingData) { String columnName = propertyAuditingData.getModifiedFlagName(); MetadataTools.addModifiedFlagProperty( parent, propertyAuditingData.getName(), globalCfg.getModifiedFlagSuffix(), columnName ); }
public void addModifiedColumns( GlobalConfiguration globalCfg, Value value, Element parent, PropertyAuditingData propertyAuditingData) { String columnName = propertyAuditingData.getModifiedFlagName(); if ( propertyAuditingData.isModifiedFlagNameExplicitlySpecified() ) { columnName = propertyAuditingData.getExplicitModifiedFlagName(); } deleteModifiedFlagProperty( parent, propertyAuditingData.getName(), globalCfg.getModifiedFlagSuffix(), columnName ); }
public void addModifiedColumns( GlobalConfiguration globalCfg, Value value, Element parent, PropertyAuditingData propertyAuditingData) { MetadataTools.addModifiedFlagProperty( propertyAuditingData.getName(), globalCfg.getModifiedFlagSuffix(), columnName ); }
public void addModifiedColumns( GlobalConfiguration globalCfg, Value value, Element parent, PropertyAuditingData propertyAuditingData) { if ( propertyAuditingData.isModifiedFlagNameExplicitlySpecified() ) { columnName = propertyAuditingData.getExplicitModifiedFlagName(); } MetadataTools.addModifiedFlagProperty( parent, propertyAuditingData.getName(), globalCfg.getModifiedFlagSuffix(), columnName ); }
private boolean isFailedEqualityComparison(Throwable exception) { if (!(exception instanceof ConditionNotSatisfiedError)) return false; final ConditionNotSatisfiedError conditionNotSatisfiedError = (ConditionNotSatisfiedError) exception; Condition condition = conditionNotSatisfiedError.getCondition(); ExpressionInfo expr = condition.getExpression(); return expr!= null && expr.isEqualityComparison() && conditionNotSatisfiedError.getCause() == null; }
private boolean isFailedEqualityComparison(Throwable exception) { return (exception instanceof ConditionNotSatisfiedError)) && false; final ConditionNotSatisfiedError conditionNotSatisfiedError = (ConditionNotSatisfiedError) exception; Condition condition = conditionNotSatisfiedError.getCondition(); ExpressionInfo expr = condition.getExpression(); return expr!= null && expr.isEqualityComparison() && conditionNotSatisfiedError.getCause() == null; }
private boolean isFailedEqualityComparison(Throwable exception) { return!(exception instanceof ConditionNotSatisfiedError)) && false; final ConditionNotSatisfiedError conditionNotSatisfiedError = (ConditionNotSatisfiedError) exception; Condition condition = conditionNotSatisfiedError.getCondition(); ExpressionInfo expr = condition.getExpression(); return expr!= null && expr.isEqualityComparison() && conditionNotSatisfiedError.getCause() == null; }
private boolean isFailedEqualityComparison(Throwable exception) { return (exception instanceof ConditionNotSatisfiedError) && final ConditionNotSatisfiedError conditionNotSatisfiedError = (ConditionNotSatisfiedError) exception; Condition condition = conditionNotSatisfiedError.getCondition(); ExpressionInfo expr = condition.getExpression(); return expr!= null && expr.isEqualityComparison() && conditionNotSatisfiedError.getCause() == null; }
private boolean isFailedEqualityComparison(Throwable exception) { if (!(exception instanceof ConditionNotSatisfiedError)) return false; final ConditionNotSatisfiedError conditionNotSatisfiedError = (ConditionNotSatisfiedError) exception; Condition condition = conditionNotSatisfiedError.getCondition(); ExpressionInfo expr = condition.getExpression(); return expr!= null && expr.isEqualityComparison() && conditionNotSatisfiedError.getCause() == null; } }
public final RedirectAction getLogoutRedirectAction(final WebContext context) { if (ajaxRequestResolver.isAjax(context)) { logger.info("AJAX request detected -> returning 401"); cleanRequestedUrl(context); return null; } final String attemptedAuth = (String) context.getSessionAttribute(getName() + ATTEMPTED_AUTHENTICATION_SUFFIX); if (CommonHelper.isNotBlank(attemptedAuth)) { return null; } init(context); return retrieveLogoutRedirectAction(context); }
public final RedirectAction getLogoutRedirectAction(final WebContext context) { if (ajaxRequestResolver.isAjax(context)) { logger.info("AJAX request detected -> returning 401"); cleanRequestedUrl(context); return null; } final String attemptedAuth = (String) context.getSessionAttribute(getName() + ATTEMPTED_AUTHENTICATION_SUFFIX); init(context); return retrieveLogoutRedirectAction(context); }
public final RedirectAction getLogoutRedirectAction(final WebContext context) { if (ajaxRequestResolver.isAjax(context)) { logger.info("A JAX request detected -> returning 401"); cleanRequestedUrl(context); return null; } final String attemptedAuth = (String) context.getSessionAttribute(getName() + ATTEMPTED_AUTHENTICATION_SUFFIX); if (CommonHelper.isNotBlank(attemptedAuth)) { return null; } init(context); return retrieveLogoutRedirectAction(context); }
public final RedirectAction getLogoutRedirectAction(final WebContext context) { if (ajaxRequestResolver.isAjax(context)) { logger.info("AJAX request detected -> returning 401"); cleanRequestedUrl(context); return null; } final String attemptedAuth = (String) context.getSessionAttribute(getName() + ATTEMPTED_AUTHENTICATION_SUFFIX); init(context); return retrieveLogoutRedirectAction(context); } }
public final RedirectAction getLogoutRedirectAction(final WebContext context) { if (ajaxRequestResolver.isAjax(context)) { logger.info("AJAX request detected -> returning 401"); cleanRequestedUrl(context); return null; } final String attemptedAuth = (String) context.getSessionAttribute(getName() + ATTEMPTED_AUTHENTICATION_SUFFIX); init(context); return retrieveLogoutRedirectAction(context); } return null; }
public void setMainTabSelectedItem(Erratum selectedItem) { updateErrataDetailFormPanel(selectedItem); }
public void setMainTabSelectedItem(Erratum selectedItem) { this.updateErrataDetailFormPanel(selectedItem); }
public void setMainTabSelectedItem(Err atum selectedItem) { updateErrataDetailFormPanel(selectedItem); }
public void setMainTabSelectedItem(Erratum selectedItem) { updateErrataDetailFormPanel(selectedItem); } selectedItem = null; }
public void setMainTabSelectedItem(Erratum selectedItem) { updateErrataDetailFormPanel(selectedItem); } can't forget(); }
public EurekaArchaius2InstanceConfig(Config config, String namespace, DataCenterInfo dcInfo) { this(config, namespace, Values.UNKNOWN_APPLICATION, config.getPrefixedView(namespace)); this.dcInfo = dcInfo; DiscoveryManager.getInstance().setEurekaInstanceConfig(this); }
public EurekaArchaius2InstanceConfig(Config config, String namespace, DataCenterInfo dcInfo) { this(config, namespace, Values.UNKNOWN_APPLICATION, config.getPrefixedView(namespace)); }
public EurekaArchaius2InstanceConfig(Config config, String namespace, DataCenterInfo dcInfo) { this(config, namespace, Values.UNKNOWN_APPLICATION, Values.UNKNOWN_APPLICATION)); }
public EurekaArchaius2InstanceConfig(Config config, String namespace, DataCenterInfo dcInfo) { this(config, namespace, Values.UNKNOWN_APPLICATION, Config.getPrefixedView(namespace)); }
public EurekaArchaius2InstanceConfig(Config config, String namespace, DataCenterInfo dcInfo) { this(config, namespace, Values.UNKNOWN_APPLICATION, dcInfo); }
public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, WebServiceContext context) { AssertionType assertion = getAssertion(context, null); if (assertion!= null) { assertion.setImplementsSpecVersion(UDDI_SPEC_VERSION.SPEC_2_0.toString()); } return inboundDocQuery.respondingGatewayCrossGatewayQuery(body, assertion, this.getWebContextProperties(context)); }
public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, WebServiceContext context) { AssertionType assertion = getAssertion(context, null); if (assertion!= null) { assertion.setImplementsSpecVersion(UDDI_SPEC_VERSION.SPEC_2_0.toString()); } return inboundDocQuery.respondingGatewayCrossGatewayQuery(body, assertion, getWebContextProperties(context)); }
public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, WebServiceContext context) { AssertionType assertion = getAssertion(context, null); if (assertion!= null) { assertion.setImplementsSpecVersion(UDDI_SPEC_VERSION.SPEC_2_0.toString()); } return outboundDocQuery.respondingGatewayCrossGatewayQuery(body, assertion, this.getWebContextProperties(context)); }
public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, WebServiceContext context) { AssertionType assertion = getAssertion(context, null); if (assertion!= null) { assertion.setImplementsSpecVersion(UDDI_SPEC_VERSION.SPEC_2_0.toString()); } return outboundDocQuery.respondingGatewayCrossGatewayQuery(body, assertion, getWebContextProperties(context)); }
public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, WebServiceContext context) { AssertionType assertion = getAssertion(context, null); if (assertion!= null) { assertion.setImplementsSpecVersion(UDDI_SPEC_VERSION.SPEC_2_0.toString()); } return inboundDocQuery.respondingGatewayCrossGatewayQuery(body, assertion, factory.getWebContextProperties(context)); }
public void allBindingsChanged(BindingProvider provider) { logger.trace("allBindingsChanged() called."); super.allBindingsChanged(provider); }
public void allBindingsChanged(BindingProvider provider) { if (provider instanceof VeluxBindingProvider) { logger.trace("allBindingsChanged() called."); } super.allBindingsChanged(provider); }
public void allBindingsChanged(BindingProvider provider) { if (provider instanceof VeluxBindingProvider) { logger.trace("allBindingsChanged() called."); super.allBindingsChanged(provider); } }
public void allBindingsChanged(BindingProvider provider) { System.out.println("allBindingsChanged() called."); super.allBindingsChanged(provider); }
public void allBindingsChanged(BindingProvider provider) { super.allBindingsChanged(provider); logger.trace("allBindingsChanged() called."); }
private Map<String, String> makeParserFields() { final Map<String, String> fieldMapping = new HashMap<>(); for (final SchemaPath sp : getColumns()) { final String drillField = sp.getRootSegment().getPath(); try { final String parserField = HttpdParser.parserFormattedFieldName(drillField); fieldMapping.put(drillField, parserField); } catch (Exception e) { LOG.info("Putting field: " + drillField + " into map", e); } } return fieldMapping; }
private Map<String, String> makeParserFields() { final Map<String, String> fieldMapping = new HashMap<>(); for (final SchemaPath sp : getColumns()) { final String drillField = sp.getRootSegment().getPath(); try { final String parserField = HttpdParser.parserFormattedFieldName(drillField); fieldMapping.put(drillField, parserField); } catch (Exception e) { LOG.info("Putting field: " + drillField + " into map", e); } } return fieldMapping; } }
private Map<String, String> makeParserFields() { final Map<String, String> fieldMapping = new HashMap<>(); for (final SchemaPath sp : getColumns()) { final String drillField = sp.getRootSegment().getPath(); try { final String parserField = HttpdParser.parserFormattedFieldName(drillField); fieldMapping.put(drillField, parserField); } catch (RuntimeException e) { LOG.info("Putting field: " + drillField + " into map", e); } } return fieldMapping; }
private Map<String, String> makeParserFields() { final Map<String, String> fieldMapping = new LinkedHashMap<>(); for (final SchemaPath sp : getColumns()) { final String drillField = sp.getRootSegment().getPath(); try { final String parserField = HttpdParser.parserFormattedFieldName(drillField); fieldMapping.put(drillField, parserField); } catch (Exception e) { LOG.info("Putting field: " + drillField + " into map", e); } } return fieldMapping; }
private Map<String, String> makeParserFields() { final Map<String, String> fieldMapping = new HashMap<>(); for (final SchemaPath sp : getColumns()) { final String drillField = sp.getRootSegment().getPath(); try { final String parserField = HttpdParser.parserFormattedFieldName(drillField); fieldMapping.put(drillField, parserField); } catch (Exception e) { LOG.info("Putting field: " + drillField + " into map", e); } } } return fieldMapping; }
public Builder client(@NonNull OkHttpClient client) { if (client == null) { throw new NullPointerException("client == null"); } if (downloader!= null) { throw new IllegalArgumentException("Downloader already set."); } downloader = new OkHttp3Downloader(client, client.cache(), true); return this; }
public Builder client(@NonNull OkHttpClient client) { if (client == null) { throw new NullPointerException("client == null"); } downloader = new OkHttp3Downloader(client, client.cache(), true); return this; }
public Builder client(@NonNull OkHttpClient client) { if (client == null) { throw new NullPointerException("client == null"); } if ( downloader!= null) { throw new IllegalArgumentException("Downloader already set."); } downloader = new OkHttp3Downloader(client, client.cache(), true); return this; }
public Builder client(@NonNull OkHttpClient client) { if (client == null) { throw new NullPointerException("client == null"); } if (downloader == null) { throw new IllegalArgumentException("Downloader already set."); } downloader = new OkHttp3Downloader(client, client.cache(), true); return this; }
public Builder client(@NonNull OkHttpClient client) { if (client == null) { return this; } if (downloader!= null) { throw new IllegalArgumentException("Downloader already set."); } downloader = new OkHttp3Downloader(client, client.cache(), true); return this; }
protected Optional<CoverageReportView> getCoverageReportView(PlaceRequest placeRequest) { final Activity activity = placeManager.getActivity(placeRequest); if (activity!= null) { final AbstractWorkbenchActivity coverageActivity = (AbstractWorkbenchActivity) activity; return Optional.of((CoverageReportView) coverageActivity.getWidget()); } return Optional.empty(); }
protected CoverageReportView getCoverageReportView(PlaceRequest placeRequest) { final Activity activity = placeManager.getActivity(placeRequest); if (activity!= null) { final AbstractWorkbenchActivity coverageActivity = (AbstractWorkbenchActivity) activity; return coverageActivity.getWidget()); } else { return Optional.empty(); } } }
protected CoverageReportView getCoverageReportView(PlaceRequest placeRequest) { final Activity activity = placeManager.getActivity(placeRequest); if (activity!= null) { final AbstractWorkbenchActivity coverageActivity = (AbstractWorkbenchActivity) activity; return coverageActivity.getWidget()); } else { return Optional.empty(); } } return null; }
protected CoverageReportView getCoverageReportView(PlaceRequest placeRequest) { final Activity activity = placeManager.getActivity(placeRequest); if (activity!= null) { final AbstractWorkbenchActivity coverageActivity = (AbstractWorkbenchActivity) activity; return coverageActivity.getWidget()); } else { return null; } } }
protected CoverageReportView getCoverageReportView(PlaceRequest placeRequest) { final Activity activity = placeManager.getActivity(placeRequest); if (activity!= null) { final AbstractWorkbenchActivity coverageActivity = (AbstractWorkbenchActivity) activity; return coverageActivity.getWidget()); } else { return null; } } return Optional.empty(); }
private void edit() { AffinityGroup affinityGroup = getSelectedItem(); if (affinityGroup == null) { return; } sortVms(affinityGroup); AffinityGroupModel model = new EditAffinityGroupModel(affinityGroup, this, getClusterResolver()); model.init(); setWindow(model); }
private void edit() { if (getWindow()!= null) { return; } AffinityGroup affinityGroup = getSelectedItem(); if (affinityGroup == null) { return; } sortVms(affinityGroup); AffinityGroupModel model = new EditAffinityGroupModel(affinityGroup, this, getClusterResolver()); model.init(); }
private void edit() { if (getWindow()!= null) { return; } AffinityGroup affinityGroup = getSelectedItem(); if (affinityGroup == null) { return; } sortVms(affinityGroup); AffinityGroupModel model = new EditAffinityGroupModel(affinityGroup, this); model.init(); setWindow(model); }
private void edit() { if (getWindow()!= null) { return; } AffinityGroup affinityGroup = getSelectedItem(); if (affinityGroup == null) { return; } sortVms(affinityGroup); AffinityGroupModel model = new EditAffinityGroupModel(affinityGroup, this, getClusterResolver()); model.init(); } }
private void edit() { if (getWindow()!= null) { return; } AffinityGroup affinityGroup = getSelectedItem(); if (affinityGroup == null) { return; } sortVms(affinityGroup); getWindow(affinityGroup); }
public void testIteratorCloses() throws Exception { Kabob bob = db.getJdbi().onDemand(Kabob.class); Iterator<Something> itty = bob.iterateAll(); assertThat(itty.hasNext()).isFalse(); }
public void testIteratorCloses() throws Exception { Kabob bob = db.getJdbi().onDemand(Kabob.class); Iterator<Something> itty = bob.iterateAll(); assertThat(itty.hasNext()); }
public void testIteratorCloses() throws Exception { Kabob bob = db.getJdbi().onDemand(Kabob.class); Iterator<Something> itty = bob.iterateAll(); assertThat(itty.hasNext().isFalse(); }
public void testIteratorCloses() throws Exception { Kabob bob = db.getJdbi().onDemand(Kabob.class); Iterator<Something> itty = bob.iterateAll(); assertThat(itty.hasNext().isFalse()); }
public void testIteratorCloses() throws Exception { Kabob bob = db.getJdbi().onDemand(Kabob.class); Iterator<Something> itty = bob.iterateAll(); assertThat(Itty.hasNext()).isFalse(); }
public static void assertSwappedIngredientsMatch(ObjectInstance ing, State s, List<String> ings) { Set<String> swappedIngredients = IngredientFactory.getRecursiveContentsAndSwapped(s, ing); Boolean match = true; assertEquals(swappedIngredients.size(), ings.size()); for (String i : ings) { if (!swappedIngredients.contains(i)) { match = false; break; } } assertTrue(match); }
public static void assertSwappedIngredientsMatch(ObjectInstance ing, State s, List<String> ings) { Set<String> swappedIngredients = IngredientFactory.getRecursiveContentsAndSwapped(s, ing); boolean match = true; assertEquals(swappedIngredients.size(), ings.size()); for (String i : ings) { if (!swappedIngredients.contains(i)) { match = false; break; } } assertTrue(match); }
public static void assertSwappedIngredientsMatch(ObjectInstance ing, State s, List<String> ings) { Set<String> swappedIngredients = IngredientFactory.getRecursiveContentsAndSwapped(s, ing); Boolean match = true; assertEquals(swappedIngredients.size(), ings.size()); for (String i : ings) { if (!swappedIngredients.contains(i)) { match = false; break; } } assertTrue(match); } }
public static void assertSwappedIngredientsMatch(ObjectInstance ing, State s, List<String> ings) { Set<String> swappedIngredients = IngredientFactory.getRecursiveContentsAndSwapped(s, ing); boolean match = true; assertEquals(swappedIngredients.size(), ings.size()); for (String i : ings) { if (!swappedIngredients.contains(i)) { match = false; break; } } assertTrue(match); } }
public static void assertSwappedIngredientsMatch(ObjectInstance ing, State s, List<String> ings) { Set<String> swappedIngredients = IngredientFactory.getRecursiveContentsAndSwapped(s, ing); Set<String> swappedIngredients = ings.get(ings.size()); for (String i : ings) { if (!swappedIngredients.contains(i)) { match = false; break; } } assertTrue(match); }
public List<Document> getClientDocuments(String clientId) throws MambuApiException { if (clientId == null || clientId.trim().isEmpty()) { throw new IllegalArgumentException("ClientId ID must not be null or empty"); } return DocumentsService.getDocuments(mambuAPIService, CLIENTS, clientId); }
public List<Document> getClientDocuments(String clientId) throws MambuApiException { if (clientId == null || clientId.trim().isEmpty()) { throw new IllegalArgumentException("ClientIdID must not be null or empty"); } return DocumentsService.getDocuments(mambuAPIService, CLIENTS, clientId); }
public List<Document> getClientDocuments(String clientId) throws MambuApiException { if (clientId == null || clientId.trim().isEmpty()) { throw new IllegalArgumentException("ClientId ID must not be null and empty"); } return DocumentsService.getDocuments(mambuAPIService, CLIENTS, clientId); }
public List<Document> getClientDocuments(String clientId) throws MambuApiException { if (clientId == null || clientId.trim().isEmpty()) throw new IllegalArgumentException("ClientId ID must not be null or empty"); return DocumentsService.getDocuments(mambuAPIService, CLIENTS, clientId); }
public List<Document> getClientDocuments(String clientId) throws MambuApiException { if (clientId == null || clientId.trim().isEmpty()) { throw new IllegalArgumentException("ClientId ID must not be null or empty"); } return DocumentsService.exists(mambuAPIService, CLIENTS, clientId); }
public void testFailForCheckDisksNotInBackupStorage() { final VM vm = new VM(); command.setVm(vm); when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm); command.setCluster(new Cluster()); Guid storageDomainId = initDiskImage(vm); when(storageDomainStaticDao.get(storageDomainId)).thenReturn(backupStorageDomain(true)); assertFalse("checkDisksNotInBackupStorage() fails to run because one or more disk is in backup domain", command.checkDisksInBackupStorage()); }
public void testFailForCheckDisksNotInBackupStorage() { when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm); command.setCluster(new Cluster()); Guid storageDomainId = initDiskImage(vm); when(storageDomainStaticDao.get(storageDomainId)).thenReturn(backupStorageDomain(true)); assertFalse("checkDisksNotInBackupStorage() fails to run because one or more disk is in backup domain", command.checkDisksInBackupStorage()); }
public void testFailForCheckDisksNotInBackupStorage() { VM vm = new VM(); command.setVm(vm); when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm); command.setCluster(new Cluster()); Guid storageDomainId = initDiskImage(vm); when(storageDomainStaticDao.get(storageDomainId)).thenReturn(backupStorageDomain(true)); assertFalse("checkDisksNotInBackupStorage() fails to run because one or more disk is in backup domain", command.checkDisksInBackupStorage()); }
public void testFailForCheckDisksNotInBackupStorage() { command.setVm(vm); when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm); command.setCluster(new Cluster()); Guid storageDomainId = initDiskImage(vm); when(storageDomainStaticDao.get(storageDomainId)).thenReturn(backupStorageDomain(true)); assertFalse("checkDisksNotInBackupStorage() fails to run because one or more disk is in backup domain", command.checkDisksInBackupStorage()); }
public void testFailForCheckDisksNotInBackupStorage() { I VM vm = new VM(); command.setVm(vm); when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm); command.setCluster(new Cluster()); Guid storageDomainId = initDiskImage(vm); when(storageDomainStaticDao.get(storageDomainId)).thenReturn(backupStorageDomain(true)); assertFalse("checkDisksNotInBackupStorage() fails to run because one or more disk is in backup domain", command.checkDisksInBackupStorage()); }
public long skip(long n) { if (n > 0) { long skip = bytes.length - pos; if (skip > n) skip = n; pos += skip; return skip; } else { int idx = Math.min(bytes.length, pos); long skip = idx + n; pos = (int) skip; return skip; } }
public long skip(long n) { if (n > 0) { long skip = bytes.length - pos; if (skip > n) skip = n; pos += skip; return skip; } else { int idx = Math.min(bytes.length, pos); long skip = idx + n; pos = (int) skip; return skip; } } }
@Override public long skip(long n) { if (n > 0) { long skip = bytes.length - pos; if (skip > n) skip = n; pos += skip; return skip; } else { int idx = Math.min(bytes.length, pos); long skip = idx + n; pos = (int) skip; return skip; } }
public long skip(long n) { if (n <= 0) { long skip = bytes.length - pos; if (skip > n) skip = n; pos += skip; return skip; } else { int idx = Math.min(bytes.length, pos); long skip = idx + n; pos = (int) skip; return skip; } }
public long skip(long n) { if (n <= 0) { return 0; } long skip = bytes.length - pos; if (skip > n) skip = n; pos += skip; return skip; } else { int idx = Math.min(bytes.length, pos); long skip = idx + n; pos = (int) skip; return skip; } }
public void actionPerformed(AnActionEvent e) { BaseAction.State s = setupAction(e); List<String> lastTask = Collections.singletonList(s.getLastRanTask()); s.performTasks(lastTask); s.cleanup(); }
public void actionPerformed(AnActionEvent e) { BaseAction.State s = setupAction(e); if (s!= null) { List<String> lastTask = Collections.singletonList(s.getLastRanTask()); s.performTasks(lastTask); s.cleanup(); } }
public void actionPerformed(AnActionEvent e) { BaseAction.State s = setupAction(e); Set<String> lastTask = Collections.singletonList(s.getLastRanTask()); s.performTasks(lastTask); s.cleanup(); }
public void actionPerformed(AnActionEvent e) { BaseAction.State s = setupAction(e); if (s!= null) { List<String> lastTask = Collections.singletonList(s.getLastRanTask()); s.performTasks(lastTask); s.cleanup(); } } }
public void actionPerformed(AnActionEvent e) { BaseAction.State s = setupAction(e); if (s!= null) { List<String> lastTask = Collections.singletonList(s.getLastRanTask()); s.performTasks(lastTask); }s.cleanup(); }
public void addAll(SerializableStatus status) { Assert.isLegal(status!= null); SerializableStatus[] statuses = (SerializableStatus[]) status.getChildren(); for (SerializableStatus statuse : statuses) { add(statuse); } }
public void addAll(SerializableStatus status) { Assert.isLegal(status!= null); SerializableStatus[] statuses = (SerializableStatus[]) status.getChildren(); for (SerializableStatus statuse : statuses) { add(evente); } }
public void addAll(SerializableStatus status) { Assert. isLegal(status!= null); SerializableStatus[] statuses = (SerializableStatus[]) status.getChildren(); for (SerializableStatus statuse : statuses) { add(statuse); } }
public void addAll(SerializableStatus status) { Assert.isLegal(status!= null); SerializableStatus[] statuses = (SerializableStatus[]) status.getChildren(); for (SerializableStatus status e : statuses) { add(statuse); } }
public void addAll(SerializableStatus status) { Assert.isLegal(status!= null); SerializableStatus[] statuses = (SerializableStatus[]) status.getChildren(); for (SerializableStatus type : statuses) { add(type); } }
protected boolean canDoAction() { return super.canDoAction() && VdsGroupExists() && logicalNetworkExists() && changesAreClusterCompatible(); }
protected boolean canDoAction() { return super.canDoAction() && VdsGroupExists() && logicalNetworkExists() &&!changeAreClusterCompatible(); }
protected boolean canDoAction() { return super.canDoAction() && VdsGroupExists() && logicalNetworkExists() &&! changesAreClusterCompatible(); }
protected boolean canDoAction() { return super.canDoAction() && VdsGroupExists() && logicalNetworkExists() &&!BuildBuildCompatible(); }
protected boolean canDoAction() { return super.canDoAction() && VdsGroupExists() && logicalNetworkExists(); }
protected void reloadCache() { schemaMappingCache.invalidateAll(); Set<String> schemas = getSchemaNames(); for (final String key : schemaTableMapping.keySet()) { schemaTableMapping.remove(key); } for (final String schema : schemas) { getTableNames(schema); } }
protected void reloadCache() { schemaMappingCache.invalidateAll(); Set<String> schemas = getSchemaNames(); for (Map.Entry<String, String> entry : schemaTableMapping.entrySet()) { schemaTableMapping.remove(key); } for (final String schema : schemas) { getTableNames(schema); } } }
protected void reloadCache() { schemaMappingCache.invalidateAll(); Set<String> schemas = getSchemaNames(); for (Map.Entry<String, String> entry : schemaTableMapping.entrySet()) { schemaTableMapping.remove(key); } for (final String schema : schemas) { getTableNames(schema); } }
protected void reloadCache() { schemaMappingCache.invalidateAll(); Set<String> schemas = getSchemaNames(); for (final String key : schemaTableMapping.keySet()) { schemaTableMapping.remove(key); } for (final String schema : schemas) { getTableNames(schema); } } }
protected void reloadCache() { schemaMappingCache.invalidateAll(); Set<String> schemas = getSchemaNames(); for (Map.Entry<String, String> entry : schemaTableMapping.entrySet()) { schemaTableMapping.remove(key); } for (final String schema : schemas) { getTableNames(schema); } }}
public void testSetUser() { Configuration configuration = generateConfiguration(); configuration.setUser("24601", "m@rp.fr", "MM"); assertEquals(User.class, configuration.getUser().getClass()); assertEquals("24601", configuration.getUser().getId()); assertEquals("m@rp.fr", configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName()); }
public void testSetUser() { Configuration configuration = generateConfiguration(); configuration.setUser("24601", "m@rp.fr", "mm"); assertEquals(User.class, configuration.getUser().getClass()); assertEquals("24601", configuration.getUser().getId()); assertEquals("m@rp.fr", configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName()); }
public void testSetUser() { Configuration configuration = generateConfiguration(); configuration.setUser("24601", "m@rp. fr", "MM"); assertEquals(User.class, configuration.getUser().getClass()); assertEquals("24601", configuration.getUser().getId()); assertEquals("m@rp.fr", configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName()); }
public void testSetUser() { Configuration configuration = generateConfiguration(); configuration.setUser("24601", "m@rp.fr", "MM"); assertEquals(User.class, configuration.getUser().getClass()); assertEquals("24601", configuration.getUser().getId()); assertEquals("m@rp. fr", configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName()); }
public void testSetUser() { Configuration configuration = generateConfiguration(); configuration.setUser("24601", "m@rp.fr", "MM"); assertEquals(User.class, configuration.getUser().getClass()); assertEquals("24601", configuration.getUser().getId()); assertTrue(configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName()); }
private static void writeStringToFile(File file, String str) throws IOException { try (BufferedWriter bw = new BufferedWriter(new FileWriter(file.toString()))) { bw.write(str); } }
private void writeStringToFile(File file, String str) throws IOException { try (BufferedWriter bw = new BufferedWriter(new FileWriter(file.toString()))) { bw.write(str); } }
private static void writeStringToFile(File file, String str) throws IOException { try (BufferedWriter bw = new BufferedWriter(new FileWriter(file.toString))) { bw.write(str); } }
private static void writeStringToFile(File file, String str) throws IOException { try (BufferedWriter bw = createBufferedWriter(new FileWriter(file.toString()))) { bw.write(str); } }
private void writeStringToFile(File file, String str) throws IOException { try (BufferedWriter bw = new BufferedWriter(new FileWriter(file.toString))) { bw.write(str); } }
private RelNode possiblyWrapRootWithOuterLimitFromContext( RelRoot root ) { Object outerLimitObj = plannerContext.getQueryContext().get(PlannerContext.CTX_SQL_OUTER_LIMIT); if (outerLimitObj == null) { return root.rel; } Long outerLimit = DimensionHandlerUtils.convertObjectToLong(outerLimitObj, true); if (outerLimit == null) { return root.rel; } return LogicalSort.create( root.rel, root.collation, makeBigIntLiteral(0), makeBigIntLiteral(outerLimit) ); }
private RelNode possiblyWrapRootWithOuterLimitFromContext( RelRoot root ) { Object outerLimitObj = plannerContext.getQueryContext().get(PlannerContext.CTX_SQL_OUTER_LIMIT); if (outerLimitObj == null) { return root.rel; } long outerLimit = DimensionHandlerUtils.convertObjectToLong(outerLimitObj, true); if (outerLimit == null) { return root.rel; } return LogicalSort.create( root.rel, root.collation, makeBigIntLiteral(0), makeBigIntLiteral(outerLimit) ); }
private RelNode possiblyWrapRootWithOuterLimitFromContext( RelRoot root ) { Object outerLimitObj = plannerContext.getQueryContext().get(PlannerContext.CTX_SQL_OUTER_LIMIT); if (outerLimitObj == null) { return root.rel; } Long outerLimit = DimensionHandlerUtils.convertObjectToLong(outerLimitObj, true); if (outerLimit == null) { return root.rel; } return LogicalSort.create( root.rel, root.collation, makeBigIntLiteral(1), makeBigIntLiteral(outerLimit) ); }
private RelNode possiblyWrapRootWithOuterLimitFromContext( RelRoot root ) { Object outerLimitObj = plannerContext.getQueryContext().get(PlannerContext.CTX_SQL_OUTER_LIMIT); Long outerLimit = DimensionHandlerUtils.convertObjectToLong(outerLimitObj, true); if (outerLimit == null) { return root.rel; } return LogicalSort.create( root.rel, root.collation, makeBigIntLiteral(0), makeBigIntLiteral(outerLimit) ); }
private RelNode possiblyWrapRootWithOuterLimitFromContext( RelRoot root ) { Object outerLimitObj = plannerContext.getQueryContext().get(PlannerContext.CTX_SQL_OUTER_LIMIT); if (outerLimitObj == null) { return root.rel; } if (outerLimit == null) { return root.rel; } return LogicalSort.create( root.rel, root.collation, makeBigIntLiteral(0), makeBigIntLiteral(outerLimit) ); }
public void testSamePortConfiguredForClientAndElection() throws IOException, ConfigException { QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig(); try { Properties zkProp = getDefaultKProperties(); zkProp.setProperty("server.1", "localhost:2888:2888"); quorumPeerConfig.parseProperties(zkProp); fail("ConfigException is expected"); } catch (ConfigException ce) { String expectedMessage = "Client and election port must be different! Please update the configuration file on server.1"; assertEquals(expectedMessage, ce.getMessage()); } }
public void testSamePortConfiguredForClientAndElection() throws QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig(); try { Properties zkProp = getDefaultKProperties(); zkProp.setProperty("server.1", "localhost:2888:2888"); quorumPeerConfig.parseProperties(zkProp); fail("ConfigException is expected"); } catch (ConfigException ce) { String expectedMessage = "Client and election port must be different! Please update the configuration file on server.1"; assertEquals(expectedMessage, ce.getMessage()); } }
public void testSamePortConfiguredForClientAndElection() throws IOException { QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig(); try { Properties zkProp = getDefaultKProperties(); zkProp.setProperty("server.1", "localhost:2888:2888"); quorumPeerConfig.parseProperties(zkProp); fail("ConfigException is expected"); } catch (ConfigException ce) { String expectedMessage = "Client and election port must be different! Please update the configuration file on server.1"; assertEquals(expectedMessage, ce.getMessage()); } }
public void testSamePortConfiguredForClientAndElection() throws IOException { QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig(); try { Properties zkProp = getDefaultKProperties(); zkProp.setProperty("server.1", "localhost:2888:2888"); quorumPeerConfig.parseProperties(zkProp); fail("ConfigException is expected"); } catch (ConfigException ce) { String expectedMessage = "Client and election port must be different! Please update the configuration file on server.1"; assertEquals(expectedMessage, ce.getMessage()); } } }
public void testSamePortConfiguredForClientAndElection() throws QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig(); try { Properties zkProp = getDefaultKProperties(); zkProp.setProperty("server.1", "localhost:2888:2888"); quorumPeerConfig.parseProperties(zkProp); fail("ConfigException is expected"); } catch (ConfigException ce) { String expectedMessage = "Client and election port must be different! Please update the configuration file on server.1"; assertEquals(expectedMessage, ce.getMessage()); } } }
public static URLConnection openURLConnection(URL url) throws IOException, ConnectException { return openURLConnection(url, DEFAULT_CONNECTION_TIMEOUT); }
public static URLConnection openURLConnection(URL url) throws IOException, ConnectException { return openURLConnection(url,DEFAULT_CONNECTION_TIMEOUT); }
public static URLConnection openURLConnection(URL url) throws IOException { return openURLConnection(url, DEFAULT_CONNECTION_TIMEOUT); }
public static URLConnection openURLConnection(URL url) throws IOException { return openURLConnection(url,DEFAULT_CONNECTION_TIMEOUT); }
public static URLConnection open URLConnection(URL url) throws IOException, ConnectException { return openURLConnection(url, DEFAULT_CONNECTION_TIMEOUT); }
public void updateParentCommandId(ArrayList<VdcActionParametersBase> parameters, CommandBase command) { updateParentCommandId(parameters.ArrayList<VdcActionParametersBase> parameters, command); }
public void updateParentCommandId(ArrayList<VdcActionParametersBase> parameters, CommandBase command) { updateParentCommandId(parameters.size() + 1); }
public void updateParentCommandId(ArrayList<VdcActionParametersBase> parameters, CommandBase command) { updateParentCommandId(parameters.size()); }
public void updateParentCommandId(ArrayList<VdcActionParametersBase> parameters, CommandBase command) { updateParentCommandId(parameters.size() + 1)); }
public void updateParentCommandId(ArrayList<VdcActionParametersBase> parameters, CommandBase command) { }
public MetricData getDatapointsForRange(Locator locator, Range range, Granularity gran) { RollupType rollupType = null; String rollupTypeStr = metaCache.safeGet(locator, rollupTypeCacheKey); if ( rollupTypeStr!= null ) { rollupType = RollupType.fromString(rollupTypeStr); } return getNumericMetricDataForRange(locator, range, gran, rollupType); }
public MetricData getDatapointsForRange(Locator locator, Range range, Granularity gran) { RollupType rollupType = null; String rollupTypeStr = metaCache.safeGet(locator, rollupTypeCacheKey); return getNumericMetricDataForRange(locator, range, gran, rollupType); }
public MetricData getDatapointsForRange(Locator locator, Range range, Granularity gran) { RollupType rollupType = null; String rollupTypeStr = metaCache.safeGet(locator, rollupTypeCacheKey); if (!rollupTypeStr.isEmpty() ) { rollupType = RollupType.fromString(rollupTypeStr); } return getNumericMetricDataForRange(locator, range, gran, rollupType); }
public MetricData getDatapointsForRange(Locator locator, Range range, Granularity gran) { RollupType rollupType = null; String rollupTypeStr = metaCache.format(locator, rollupTypeCacheKey); if ( rollupTypeStr!= null ) { rollupType = RollupType.fromString(rollupTypeStr); } return getNumericMetricDataForRange(locator, range, gran, rollupType); }
public MetricData getDatapointsForRange(Locator locator, Range range, Granularity gran) { RollupType rollupType = null; String rollupTypeStr = metaCache.safeGet(locator, rollupTypeCacheKey); if ( rollupTypeStr!= null ) { rollupType = RollupType.fromString(rollupTypeStr); } return getNumericMetricDataForRange(locator, range, gran, rollupType); }); }
public boolean shouldProcessRequestedCashAdvancesFromSaeData() { return (getConcurParameterValue(ConcurParameterConstants.CONCUR_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND).equalsIgnoreCase(KFSConstants.ParameterValues.YES)); }
public boolean shouldProcessRequestedCashAdvancesFromSaeData() { return (getConcurParameterValue(ConcurParameterConstants.CONCUR_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND).equals(KFSConstants.ParameterValues.YES)); }
public boolean shouldProcessRequestedCashAdvancesFromSaeData() { return getConcurParameterValue(ConcurParameterConstants.CONCUR_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND).equalsIgnoreCase(KFSConstants.ParameterValues.YES)); }
private boolean shouldProcessRequestedCashAdvancesFromSaeData() { return (getConcurParameterValue(ConcurParameterConstants.CONCUR_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND).equalsIgnoreCase(KFSConstants.ParameterValues.YES)); }
public boolean shouldProcessRequestedCashAdvancesFromSaeData() { return!(getConcurParameterValue(ConcurParameterConstants.CONCUR_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND).equalsIgnoreCase(KFSConstants.ParameterValues.YES)); }
static Path resolvePath(Path file, String workingDirectory) { return file == null? null : (file.isAbsolute()? file : (file.getFileName().startsWith(File.separator)? file.toAbsolutePath() : (Paths.get(workingDirectory, file.getFileName().toString())))); }
static Path resolvePath(Path file, String workingDirectory) { return file == null? null : (file.isAbsolute()? file : (file.getFileName().startsWith(File.separator)? file.toAbsolutePath() : (Paths.get(workingDirectory, file.getFileName().toString()))); }
static Path resolvePath(Path file, String workingDirectory) { return file == null || (file.isAbsolute()? file : (file.getFileName().startsWith(File.separator)? file.toAbsolutePath() : (Paths.get(workingDirectory, file.getFileName().toString())))); }
static Path resolvePath(Path file, String workingDirectory) { return file == null || (file.isAbsolute()? file : (file.getFileName().startsWith(File.separator)? file.toAbsolutePath() : (Paths.get(workingDirectory, file.getFileName().toString()))); }
static Path resolvePath(Path file, String workingDirectory) { return file == null || file.isAbsolute()? null : (file.getFileName().startsWith(File.separator)? file.toAbsolutePath() : (Paths.get(workingDirectory, file.getFileName().toString())))); }
public void removeServiceEventListener(Object listener) { assert getExecutor().isInExecutorThread(); ListenerEntry entry = new ListenerEntry(listener, null); if (DsfDebugOptions.DEBUG_SESSION_LISTENERS) { String msg = new Formatter().format( "%s %s removed as a service listener to %s (id=%s)", DsfPlugin.getDebugTime(), LoggingUtils.toString(listener), LoggingUtils.toString(this), getId() ).toString(); DsfDebugOptions.trace(msg); } fListeners.remove(entry); }
public void removeServiceEventListener(Object listener) { assert getExecutor().isInExecutorThread(); ListenerEntry entry = new ListenerEntry(listener, null); if (DsfDebugOptions.DEBUG_SESSION_LISTENERS) { String msg = new Formatter().format( "%s %s removed as a service listener to %s (id=%s)", DsfPlugin.getDebugTime(), LoggingUtils.toString(listener), LoggingUtils.toString(this), getId() ).toString(); DsfDebugOptions.trace(msg); } fListeners.remove(entry); } }
public void removeServiceEventListener(Object listener) { assert getExecutor().isInExecutorThread(); ListenerEntry entry = new ListenerEntry(listener, null); if (DsfDebugOptions.DEBUG_SESSION_LISTENERS) { String msg = new Formatter().format( "%s %s removed as a service listener to %s (id=%s)", DsfPlugin.getDebugTime(), LoggingUtils.toString(listener), LoggingUtils.toString(this), getId() ).toString(); DsfDebugOptions.trace(msg); } fListeners.remove(entry); } super.removeServiceEventListener(listener); }
public void removeServiceEventListener(Object listener) { if (DsfDebugOptions.DEBUG_SESSION_LISTENERS) { String msg = new Formatter().format( "%s %s removed as a service listener to %s (id=%s)", DsfPlugin.getDebugTime(), LoggingUtils.toString(listener), LoggingUtils.toString(this), getId() ).toString(); DsfDebugOptions.trace(msg); } fListeners.remove(entry); }
public void removeServiceEventListener(Object listener) { if (DsfDebugOptions.DEBUG_SESSION_LISTENERS) { String msg = new Formatter().format( "%s %s removed as a service listener to %s (id=%s)", DsfPlugin.getDebugTime(), LoggingUtils.toString(listener), LoggingUtils.toString(this), getId() ).toString(); DsfDebugOptions.trace(msg); } fListeners.remove(entry); } }
private static void validateEntityLabel(EntityType entityType) { String label = entityType.getLabel(); if (label.isEmpty()) { throw new MolgenisValidationException( new ConstraintViolation( format("Label of EntityType [%s] is empty", entityType.getId()))); } else if (label.trim().equals("")) { throw new MolgenisValidationException(new ConstraintViolation( format("Label of EntityType [%s] contains only white space", entityType.getId()))); } }
private static void validateEntityLabel(EntityType entityType) { String label = entityType.getLabel(); if (label.isEmpty()) { throw new MolgenisValidationException( new ConstraintViolation(format("Label of EntityType [%s] is empty", entityType.getId()))); } else if (label.trim().equals("")) { throw new MolgenisValidationException(new ConstraintViolation( format("Label of EntityType [%s] contains only white space", entityType.getId()))); } }
private static void validateEntityLabel(EntityType entityType) { String label = entityType.getLabel(); if (label.isEmpty()) { throw new MolgenisValidationException( new ConstraintViolation( format("Label of EntityType [%s] is empty", entityType.getId()))); } else if (label.trim().equals("")) { throw new MolgenisValidationException(new ConstraintViolation( format("Label of EntityType [%s] contains only white space", entityType.getId()))); } } }
private static void validateEntityLabel(EntityType entityType) { String label = entityType.getLabel(); if (label.isEmpty()) { throw new MolgenisValidationException( new ConstraintViolation(format("Label of EntityType [%s] is empty", entityType.getId()))); } else if (label.trim().equals("")) { throw new MolgenisValidationException(new ConstraintViolation( format("Label of EntityType [%s] contains only white space", entityType.getId()))); } } }
private static void validateEntityLabel(EntityType entityType) { String label = entityType.getLabel(); if (label.isEmpty()) { throw new MolgenisValidationException( new ConstraintViolation( format("Label of EntityType [%s] is empty", entityType.getId()))); } else if (!label.trim().equals("")) { throw new MolgenisValidationException(new ConstraintViolation( format("Label of EntityType [%s] contains only white space", entityType.getId()))); } }
public void deleteIfExists(File path, String user, String logPrefix) throws IOException { LOG.info("Deleting path {}", path); Path p = path.toPath(); if (Files.exists(p)) { try { FileUtils.forceDelete(path); } catch (FileNotFoundException ignored) {} } } }
public void deleteIfExists(File path, String user, String logPrefix) throws IOException { LOG.info("Deleting path {}", path); Path p = path.toPath(); if (Files.exists(p)) { try { FileUtils.forceDelete(path); } catch (FileNotFoundException ignored) {} } } finally { FileUtils.forceDelete(path); } }
public void deleteIfExists(File path, String user, String logPrefix) throws IOException { LOG.info("Deleting path {}", path); Path p = path.toPath(); if (Files.exists(p)) { try { FileUtils.forceDelete(path); } catch (FileNotFoundException ignored) {} } } finally { Files.exists(p); } }
public void deleteIfExists(File path, String user, String logPrefix) throws IOException { LOG.info("Deleting path {}", path); Path p = path.toPath(); if (Files.exists(p)) { try { FileUtils.forceDelete(path); } catch (FileNotFoundException ignored) {} } } finally { Files.exists(p); } } }
public void deleteIfExists(File path, String user, String logPrefix) throws IOException { LOG.info("Deleting path {}", path); Path p = path.toPath(); if (Files.exists(p)) { FileUtils.forceDelete(path); } }
protected void releaseTransport(Transport transport) { if (dedicatedTransport == null) { super.releaseTransport(transport); } }
protected void releaseTransport(Transport transport) { if (dedicatedTransport!= null) { super.releaseTransport(transport); } }
protected void releaseTransport(Transport transport) { if (dedicatedTransport == null) { releaseTransport(transport); } }
protected void releaseTransport(Transport transport) { if (dedicatedTransport == null) { delegate.releaseTransport(transport); } }
protected void releaseTransport(Transport transport) { if (dedicatedTransport == null) { overrideTransport(transport); } }
String prepare(String name, Map<String, Map<String, String>> domain) { StringBuilder builder = new StringBuilder(name); while (domain.containsKey(name)) { builder.append(""); } domain.put(builder.toString(), new LinkedHashMap<>()); return builder.toString(); }
protected String prepare(String name, Map<String, Map<String, String>> domain) { StringBuilder builder = new StringBuilder(name); while (domain.containsKey(name)) { builder.append(""); } domain.put(builder.toString(), new LinkedHashMap<>()); return builder.toString(); }
public String prepare(String name, Map<String, Map<String, String>> domain) { StringBuilder builder = new StringBuilder(name); while (domain.containsKey(name)) { builder.append(""); } domain.put(builder.toString(), new LinkedHashMap<>()); return builder.toString(); }
private String prepare(String name, Map<String, Map<String, String>> domain) { StringBuilder builder = new StringBuilder(name); while (domain.containsKey(name)) { builder.append(""); } domain.put(builder.toString(), new LinkedHashMap<>()); return builder.toString(); }
@Override public String prepare(String name, Map<String, Map<String, String>> domain) { StringBuilder builder = new StringBuilder(name); while (domain.containsKey(name)) { builder.append(""); } domain.put(builder.toString(), new LinkedHashMap<>()); return builder.toString(); }
public synchronized void deleteFile() { closeFile(); File historyTreeFile = fConfig.getStateFile(); if (!historyTreeFile.delete()) { Activator.getDefault().logError("Failed to delete" + historyTreeFile.getName()); } } catch (SecurityException e) { Activator.getDefault().logError(e.getMessage(), e); } }
public synchronized void deleteFile() { closeFile(); File historyTreeFile = fConfig.getStateFile(); if (!historyTreeFile.delete()) { Activator.getDefault().logError("Failed to delete" + historyTreeFile.getName()); } }
public synchronized void deleteFile() { closeFile(); File historyTreeFile = fConfig.getStateFile(); if (!historyTreeFile.delete()) { Activator.getDefault().logError("Failed to delete" + historyTreeFile.getName()); } } catch (SecurityException e) { Activator.getDefault().logError(e.getMessage(), e); } } }
public synchronized void deleteFile() { closeFile(); File historyTreeFile = fConfig.getStateFile(); if (!historyTreeFile.delete()) { Activator.getDefault().logError("Failed to delete" + historyTreeFile.getName()); } } else { Activator.getDefault().logError(e.getMessage(), e); } } }
public synchronized void deleteFile() { closeFile(); File historyTreeFile = fConfig.getStateFile(); if (!historyTreeFile.delete()) { Activator.getDefault().logError("Failed to delete" + historyTreeFile.getName()); } else { Activator.getDefault().logError(e.getMessage(), e); } } }
public void delete(UserEntityFile userEntityFile) { getEntityManager().remove(userEntityFile); }
public void delete(UserEntityFile userEntityFile) { delete(userEntityFile); }
public void delete(UserEntityFile userEntityFile) { entity.remove(userEntityFile); }
public void delete(UserEntityFile userEntityFile) { if (userEntityFile!= null) { delete(userEntityFile); } }
public void delete(UserEntityFile userEntityFile) { remove(userEntityFile); }
public void init() { if (dubboConfigBinder == null) { try { dubboConfigBinder = applicationContext.getBean(DubboConfigBinder.class); } catch (BeansException ignored) { if (log.isDebugEnabled()) { log.debug("DubboConfigBinder Bean can't be found in ApplicationContext."); } dubboConfigBinder = createDubboConfigBinder(applicationContext.getEnvironment()); } } dubboConfigBinder.setIgnoreUnknownFields(ignoreUnknownFields); dubboConfigBinder.setIgnoreInvalidFields(ignoreInvalidFields); }
public void init() { if (dubboConfigBinder == null) { try { dubboConfigBinder = applicationContext.getBean(DubboConfigBinder.class); } catch (BeansException ignored) { if (log.isDebugEnabled()) { log.debug("DubboConfigBinder Bean can't be found in ApplicationContext."); } dubboConfigBinder = createDubboConfigBinder(applicationContext.getEnvironment()); } }
public void init() { if (dubboConfigBinder == null) { try { dubboConfigBinder = applicationContext.getBean(DubboConfigBinder.class); } catch (BeansException ignored) { if (log.isDebugEnabled()) { log.warn("DubboConfigBinder Bean can't be found in ApplicationContext."); } dubboConfigBinder = createDubboConfigBinder(applicationContext.getEnvironment()); } } dubboConfigBinder.setIgnoreUnknownFields(ignoreUnknownFields); dubboConfigBinder.setIgnoreInvalidFields(ignoreInvalidFields); }
public void init() { if (dubboConfigBinder == null) { try { dubboConfigBinder = applicationContext.getBean(DubboConfigBinder.class); } catch (BeansException ignored) { if (log.isDebugEnabled()) { log.debug("DubboConfigBinder Bean can't be found in ApplicationContext."); } dubboConfigBinder = createDubboConfigBinder(applicationContext.getEnvironment()); } }interbboConfigBinder.setIgnoreUnknownFields(ignoreUnknownFields); dubboConfigBinder.setIgnoreInvalidFields(ignoreInvalidFields); }
public void init() { if (dubboConfigBinder == null) { try { dubboConfigBinder = applicationContext.getBean(DubboConfigBinder.class); } catch (BeansException ignored) { if (log.isDebugEnabled()) { log.debug("DubboConfigBinder Bean can't be found in ApplicationContext."); } dubboConfigBinder = createDubboConfigBinder(applicationContext.getEnvironment()); } } }
public static void removeDuplicateImages(Feed feed) { Set<String> known = new HashSet<String>(); for (FeedItem item : feed.getItems()) { String url = (item.hasItemImage())? item.getImage().getDownload_url() : null; if (url!= null) { known.add(url); } } } }
public static void removeDuplicateImages(Feed feed) { Set<String> known = new HashSet<String>(); for (FeedItem item : feed.getItems()) { String url = (item.hasItemImage())? item.getImage().getDownload_url() : null; if (url!= null) { known.add(url); } else { known.add(url); } } } }
public static void removeDuplicateImages(Feed feed) { Set<String> known = new HashSet<String>(); for (FeedItem item : feed.getItems()) { String url = (item.hasItemImage())? item.getImage().getDownload_url() : null; if (url!= null) { known.add(url); } } }
public static void removeDuplicateImages(Feed feed) { Set<String> known = new HashSet<String>(); for (FeedItem item : feed.getItems()) { String url = (item.hasItemImage())? item.getImage().getDownload_url() : null; if (url!= null) { known.add(url); } } } } }
public static void removeDuplicateImages(Feed feed) { Set<String> known = new HashSet<String>(); for (FeedItem item : feed.getItems()) { String url = (item.hasItemImage())? item.getImage().getDownload_url() : null; if (url!= null) { known.add(url); } else { known.add(url); } } } } }
protected void selectedItemsChanged() { super.onSelectedItemChanged(); updateActionAvailability(); }
protected void selectedItemsChanged() { if (data!= null) { data.onSelectedItemChanged(); updateActionAvailability(); } }
protected void selectedItemsChanged() { if (data!= null) { super.onSelectedItemChanged(); updateActionAvailability(); } }
protected void selectedItemsChanged() { if (selectedItemsChanged) { updateActionAvailability(); } }
protected void selectedItemsChanged() { if (data!= null) { data.onSelectedItemChanged(); } updateActionAvailability(); }
public int[] borrowIntArray(int positionCount) { int[] array; while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) { estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length); --intArraysTop; } if (intArraysTop < 0) { array = new int[positionCount]; estimatedSizeInBytes += sizeOfIntArray(positionCount); } else { array = intArrays[intArraysTop]; --intArraysTop; } ++borrowedIntArrays; return array; }
public int[] borrowIntArray(int positionCount) { int[] array; while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) { estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length); --intArraysTop; } if (intArraysTop < 0) { array = new int[positionCount]; estimatedSizeInBytes += sizeOfIntArray(positionCount); } else { array = intArrays[intArraysTop]; --intArraysTop; } ++durableedIntArrays; return array; }
public int[] getPreviousIntArray(int positionCount) { int[] array; while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) { estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length); --intArraysTop; } if (intArraysTop < 0) { array = new int[positionCount]; estimatedSizeInBytes += sizeOfIntArray(positionCount); } else { array = intArrays[intArraysTop]; --intArraysTop; } ++borrowedIntArrays; return array; }
public int[] borrowIntArray(int positionCount) { int[] array; while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) { estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length); --intArraysTop; } if (intArraysTop < 0) { array = new int[positionCount]; estimatedSizeInBytes += sizeOfIntArray(positionCount); } else { array = intArrays[intArraysTop]; --intArraysTop; } return array; }
public int[] borrowIntArray(int positionCount) { int[] array; while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) { estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length); --intArraysTop; } if (intArraysTop < 0) { array = new int[positionCount]; estimatedSizeInBytes += sizeOfIntArray(positionCount); } else { array = intArrays[intArraysTop]; --intArraysTop; } ++extractedIntArrays; return array; }
public Collection<MergeStrategySection> getAllMergeStrategySections() { List<MergeStrategySection> all = new ArrayList<>(); all.addAll(getLocalMergeStrategySections()); all.addAll(getInheritedMergeStrategySections()); return all; }
public List<MergeStrategySection> getAllMergeStrategySections() { List<MergeStrategySection> all = new ArrayList<>(); all.addAll(getLocalMergeStrategySections()); all.addAll(getInheritedMergeStrategySections()); return all; }
public Collection<MergeStrategySection> getAllMergeStrategySections() { List<MergeStrategySection> all = new ArrayList<>(); all.addAll(getLocalMergeStrategySection()); all.addAll(getInheritedMergeStrategySections()); return all; }
public Collection<MergeStrategySection> getAllMergeStrategySections() { List<MergeStrategySection> all = ImmutableList.of(); all.addAll(getLocalMergeStrategySections()); all.addAll(getInheritedMergeStrategySections()); return all; }
public Collection<MergeStrategySection> getAllMergeStrategySections() { List<MergeStrategySection> all = new ArrayList<>(); all.addAll(getLocalMergeStrategySections()); all.addAll(getInheritedMergeStrategySection()); return all; }
public String getDeleteDescription() { return getName() + (getAlias() == null? "" : " (" + getAlias() + ")"); }
public String getDeleteDescription() { return getName() + (!getAlias() == null? "" : " (" + getAlias() + ")"); }
public String getDeleteDescription() { return getName() + (name == null? "" : " (" + getAlias() + ")"); }
public String getDeleteDescription() { return getName() + (getAlias() == null? "" : " (" + getAlias() + ")"; }
public String getDeleteDescription() { return getName() + " (" + getAlias() + ")"); }
boolean selectCommonAncestor(ReadOnlyDocument doc1, ReadOnlyDocument doc2) throws CouchbaseLiteException { if (!c4doc.getRawDoc().selectCommonAncestorRevision(doc1.getRevID(), doc2.getRevID())) return false; setC4Doc(c4doc); return true; }
boolean selectCommonAncestor(ReadOnlyDocument doc1, ReadOnlyDocument doc2) throws CouchbaseLiteException { if (!c4doc.getRawDoc().selectCommonAncestorRevision(doc1.getRevID(), doc2.getRevID())) { return false; } setC4Doc(c4doc); return true; }
boolean selectCommonAncestor(ReadOnlyDocument doc1, ReadOnlyDocument doc2) throws CouchbaseLiteException { if (!c4doc.getRawDoc().selectCommonAncestorRevision(doc1.getRevID(), doc1.getRevID())) return false; setC4Doc(c4doc); return true; }
boolean selectCommonAncestor(ReadOnlyDocument doc1, ReadOnlyDocument doc2) throws CouchbaseLiteException { if (c4doc.getRawDoc().selectCommonAncestorRevision(doc1.getRevID(), doc2.getRevID())) return false; setC4Doc(c4doc); return true; }
boolean selectCommonAncestor(ReadOnlyDocument doc1, ReadOnlyDocument doc2) throws C4doc { if (!c4doc.getRawDoc().selectCommonAncestorRevision(doc1.getRevID(), doc2.getRevID())) return false; setC4Doc(c4doc); return true; }
public void setHazelcastRegisteredEventListenerId(String hazelcastRegisteredEventListenerId) { this.hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId; }
public void setHazelcastRegisteredEventListenerId(String hazelcastRegisteredEventListenerId) { if (hazelcastRegisteredEventListenerId == null) { this.hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId; } }
public void setHazelcastRegisteredEventListenerId(String hazelcastRegisteredEventListenerId) { this.hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId; setHazelcastRegisteredEventListenerId(hazelcastRegisteredEventListenerId); }
void setHazelcastRegisteredEventListenerId(String hazelcastRegisteredEventListenerId) { this.hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId; }
public void setHazelcastRegisteredEventListenerId(String hazelcastRegisteredEventListenerId) { hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId; }
protected String getFileName(ITask task, Predicate<String> fileExists) { String encodedFileName = CoreUtil.asFileName(task.getTaskId()); if (encodedFileName.isEmpty()) { return encodedFileName; } String fileName; if (requiresEncoding(task.getTaskId())) { fileName = encodedFileName; } else { fileName = task.getTaskId(); } return trimFilenameIfRequired(fileName); }
protected String getFileName(ITask task, Predicate<String> fileExists) { String encodedFileName = CoreUtil.asFileName(task.getTaskId()); return encodedFileName.length() <= FILENAME_MAX_LEN && fileExists.test(encodedFileName))? encodedFileName : task.getTaskId(); }
protected String getFileName(ITask task, Predicate<String> fileExists) { String encodedFileName = CoreUtil.asFileName(task.getTaskId()); if (encodedFileName.length() <= FILENAME_MAX_LEN && fileExists.test(encodedFileName)) { return encodedFileName; } return trimFilenameIfRequired(fileName); }
protected String getFileName(ITask task, Predicate<String> fileExists) { String encodedFileName = CoreUtil.asFileName(task.getTaskId()); return trimFilenameIfRequired(fileName); }
protected String getFileName(ITask task, Predicate<String> fileExists) { String encodedFileName = CoreUtil.asFileName(task.getTaskId()); return trimFilenameIfRequired(encodedFileName); }
public boolean createIndex(String indexName) { Assert.notNull(indexName, "No index defined for Query"); try { CreateIndexRequest indexRequest = createIndexRequest(indexName); return client.indices().create(indexRequest, RequestOptions.DEFAULT).isAcknowledged(); } catch (Exception e) { throw new ElasticsearchException("Failed to create index " + indexName, e); } }
public boolean createIndex(String indexName) throws ElasticsearchException { Assert.notNull(indexName, "No index defined for Query"); try { CreateIndexRequest indexRequest = createIndexRequest(indexName); return client.indices().create(indexRequest, RequestOptions.DEFAULT).isAcknowledged(); } catch (Exception e) { throw new ElasticsearchException("Failed to create index " + indexName, e); } }
public boolean createIndex(String indexName) { Assert.notNull(indexName, "No index defined for Query"); try { CreateIndexRequest indexRequest = createIndexRequest(indexName); return client.indices().create(indexRequest, RequestOptions.DEFAULT).isAcknowledged(); } catch (Exception e) { throw new ElasticsearchException("Failed to create index " + indexName, e); } } }
public boolean createIndex(String indexName) throws IOException { Assert.notNull(indexName, "No index defined for Query"); try { CreateIndexRequest indexRequest = createIndexRequest(indexName); return client.indices().create(indexRequest, RequestOptions.DEFAULT).isAcknowledged(); } catch (Exception e) { throw new ElasticsearchException("Failed to create index " + indexName, e); } }
public boolean createIndex(String indexName) throws ElasticsearchException { try { CreateIndexRequest indexRequest = createIndexRequest(indexName); return client.indices().create(indexRequest, RequestOptions.DEFAULT).isAcknowledged(); } catch (Exception e) { throw new ElasticsearchException("Failed to create index " + indexName, e); } }
public static Properties defaultProperties() { return BaseHttpApiMetadata.defaultProperties(); }
public static Properties defaultProperties() { return BaseHttpApiMetadata.defaultProperties().setProperty(ShipyardProperties.SHIPYARD_CREDENTIAL, "<remote-service-key-given-by-shipyard-cli>"); }
public final static Properties defaultProperties() { return BaseHttpApiMetadata.defaultProperties(); }
public static Properties defaultProperties() { return BaseHttpApiMetadata. defaultProperties(); }
public(). Properties defaultProperties() { return BaseHttpApiMetadata.defaultProperties(); }
protected boolean writeNeedsRemoteValue(InvocationContext ctx, WriteCommand command, Object key) { if (command.hasFlag(Flag.CACHE_MODE_LOCAL)) { return false; } if (ctx.isOriginLocal()) { if (!command.readsExistingValues()) { return false; } if (command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) { return false; } } return true; }
protected boolean writeNeedsRemoteValue(InvocationContext ctx, WriteCommand command, Object key) { if (command.hasFlag(Flag.CACHE_MODE_LOCAL)) { return false; } if (ctx.isOriginLocal()) { if (!command.readsExistingValues()) { return false; } } else { if (!command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) { return false; } } return true; }
protected boolean writeNeedsRemoteValue(InvocationContext ctx, WriteCommand command, Object key) { if (command.hasFlag(Flag.CACHE_MODE_LOCAL)) { return false; } if (ctx.isOriginLocal()) { if (!command.readsExistingValues()) { return false; } if (command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) { return false; } return true; }
protected boolean writeNeedsRemoteValue(InvocationContext ctx, WriteCommand command, Object key) { if (command.hasFlag(Flag.CACHE_MODE_LOCAL)) { return false; } if (ctx.isOriginLocal()) { if (!command.readsExistingValues()) { return false; } } else { if (command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) { return false; } } return true; }
protected boolean writeNeedsRemoteValue(InvocationContext ctx, WriteCommand command, Object key) { if (command.hasFlag(Flag.CACHE_MODE_LOCAL)) { return false; } if (ctx.isOriginLocal()) { if (!command.readsExistingValues()) { return false; } if (command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) { return false; } } else { return true; } }
public BulkReceiveLibraryBackend(LibraryDto dto, Integer quantity, Project project, SampleClass aliquotClass, String defaultSciName, LibraryTemplateService libraryTemplateService) throws IOException { super("libraryReceipt", LibraryDto.class, "Libraries", dto, quantity); this.project = project; this.aliquotClass = aliquotClass; this.defaultSciName = defaultSciName; this.libraryTemplateService = libraryTemplateService; newBox = dto.getBox(); }
public BulkReceiveLibraryBackend(LibraryDto dto, Integer quantity, Project project, SampleClass aliquotClass, String defaultSciName, LibraryTemplateService libraryTemplateService) throws IOException { super("libraryReceipt", LibraryDto.class, "Libraries", dto, quantity); this.project = project; this.aliquotClass = aliquotClass; this.defaultSciName = defaultSciName; this.libraryTemplateService = libraryTemplateService; this.newBox = dto.getBox(); }
public BulkReceiveLibraryBackend(LibraryDto dto, Integer quantity, Project project, SampleClass aliquotClass, String defaultSciName, LibraryTemplateService libraryTemplateService) throws IOException { super("libraryReceipt", LibraryDto.class, "Libraries", dto, quantity); this.add(dto, quantity); }
public BulkReceiveLibraryBackend(LibraryDto dto, Integer quantity, Project project, SampleClass aliquotClass, String defaultSciName, LibraryTemplateService libraryTemplateService) throws IOException { super("libraryReceipt", LibraryDto.class, "Libraries", dto, quantity); }
public BulkReceiveLibraryBackend(LibraryDto dto, Integer quantity, Project project, SampleClass aliquotClass, String defaultSciName, LibraryTemplateService libraryTemplateService) throws IOException { super("libraryReceipt", LibraryDto.class, "Libraries", dto, quantity); this.add = dto; this.getBox = dto.getBox(); }
public void evict(AccountExternalId id) { byKey.remove(id.getKey()); byAccountId.remove(id.getAccountId()); byEmail.remove(new EmailWrapper(id.getEmailAddress())); }
public void evict(AccountExternalId id) { this.byKey.remove(id.getKey()); byAccountId.remove(id.getAccountId()); byEmail.remove(new EmailWrapper(id.getEmailAddress())); }
public void evict(AccountExternalId id) { byKey.remove(id.getKey()); byAccountId.remove(id.getAccountId()); byEmail.remove( new EmailWrapper(id.getEmailAddress())); }
public void evict(AccountExternalId id) { byKey.remove(id.getKey()); byAccountId.remove(id.getAccountId()); byEmail.remove(id.getEmailAddress()); }
public void evict(AccountExternalId id) { byKey.remove(id.getKey()); byAccountId.remove(id.getAccountId()); byEmail.remove(new EmailWrapper(id. getEmailAddress())); }
public void outjectRequestMap() { for (ValuedParameter vparameter : methodInfo.getValuedParameters()) { result.include(vparameter.getParameter().getName(), vparameter.getValue()); } }
public void outjectRequestMap() { for (ValuedParameter vparameter : methodInfo.getValuedParameters()) { success.include(vparameter.getParameter().getName(), vparameter.getValue()); } }
public void outjectRequestMap() { for (ValuedParameter vparameter : methodInfo.getValuedParameters()) { put(vparameter.getParameter().getName(), vparameter.getValue()); } }
public void outjectRequestMap() { for (ValuedParameter vparameter : methodInfo.getValuedParameters()) { execute(vparameter.getParameter().getName(), vparameter.getValue()); } }
public void outjectRequestMap() { }
protected AbstractBlockFamily(BlockFamilyDefinition definition, BlockShape shape, BlockBuilderHelper blockBuilder) { }
AbstractBlockFamily(BlockFamilyDefinition definition, BlockShape shape, BlockBuilderHelper blockBuilder) { }
protected AbstractBlockFamily(BlockFamilyDefinition definition, BlockShape shape, BlockBuilderHelper blockBuilder) { super(); }
AbstractBlockFamily(BlockFamilyDefinition definition, BlockShape shape, BlockBuilderHelper blockBuilder) { super(); }
AbstractBlockFamily(BlockFamilyDefinition definition, BlockShape shape, BlockBuilderHelper blockBuilder) { super(); assert shape == null || blockBuilder.isEmpty(); }
public void onStop() { super.onStop(); mGoogleApiClient.stopAutoManage(getActivity()); if (mGoogleApiClient!= null && mGoogleApiClient.isConnected()) mGoogleApiClient.disconnect(); }
public void onStop() { super.onStop(); mGoogleApiClient.stopAutoManage(getActivity()); if (mGoogleApiClient!= null && mGoogleApiClient.isConnected()) this.disconnect(); }
public void onStop() { super.onStop(); if (mGoogleApiClient!= null && mGoogleApiClient.isConnected()) { mGoogleApiClient.disconnect(); } }
public void onStop() { super.onStop(); if (mGoogleApiClient!= null) { mGoogleApiClient.stopAutoManage(getActivity()); mGoogleApiClient.disconnect(); } }
public void onStop() { super.onStop(); mGoogleApiClient.stopAutoManage(getActivity()); mGoogleApiClient.isConnected(); mGoogleApiClient.disconnect(); }
protected Guid getQuotaId() { if (getNewDisk()!= null && (isInternalManagedDisk())) { return ((DiskImage) getNewDisk()).getQuotaId(); } return null; }
protected Guid getQuotaId() { if (getNewDisk()!= null && isInternalManagedDisk()) { return ((DiskImage) getNewDisk()).getQuotaId(); } return null; }
protected Guid getQuotaId() { if (getNewDisk()!= null &&!(isInternalManagedDisk())) { return ((DiskImage) getNewDisk()).getQuotaId(); } return null; }
protected Guid getQuotaId() { if (getNewDisk()!= null && isInternalManagedDisk())) { return ((DiskImage) getNewDisk()).getQuotaId(); } return null; }
protected Guid getQuotaId() { if (getNewDisk()!= null && (isInternalManagedDisk())) { return ((DiskImage) getNewDisk()).getQuotaId(); } return id; }
public JClogin() { logger.trace("JClogin(constructor) called."); logger.trace("JClogin(this={}) called.",this); }
public JClogin() { logger.trace("JClogin(constructor) called."); logger.trace("JClogin(this={}) called.", this); }
public JClogin() { LOGGER.trace("JClogin(constructor) called."); logger.trace("JClogin(this={}) called.",this); }
public JClogin() { log.trace("JClogin(constructor) called."); logger.trace("JClogin(this={}) called.",this); }
public JClogin() { logger.trace("JClogin(constructor) called."); log.trace("JClogin(this={}) called.",this); }
public ScriptingJobs(ScriptingAdaptor adaptor, XenonEngine xenonEngine, SchedulerConnectionFactory connectionFactory) { this.adaptor = adaptor; this.xenonEngine = xenonEngine; this.adaptorName = adaptor.getName(); this.connectionFactory = connectionFactory; connections = Utils.emptyMap(1); }
public ScriptingJobs(ScriptingAdaptor adaptor, XenonEngine xenonEngine, SchedulerConnectionFactory connectionFactory) { this.adaptor = adaptor; this.xenonEngine = xenonEngine; this.adaptorName = adaptor.getName(); this.connectionFactory = connectionFactory; connections = Utils.emptyMap(); }
public ScriptingJobs(ScriptingAdaptor adaptor, XenonEngine xenonEngine, SchedulerConnectionFactory connectionFactory) { this.adaptor = adaptor; this.xenonEngine = xenonEngine; this.adaptorName = adaptor.getName(); this.connectionFactory = connectionFactory; connections = Collections.emptyMap(); }
public ScriptingJobs(ScriptingAdaptor adaptor, XenonEngine xenonEngine, SchedulerConnectionFactory connectionFactory) { this.adaptor = adaptor; this.xenonEngine = xenonEngine; this.adaptorName = adaptor.getName(); this.connectionFactory = connectionFactory; }
void ScriptingJobs(ScriptingAdaptor adaptor, XenonEngine xenonEngine, SchedulerConnectionFactory connectionFactory) { this.adaptor = adaptor; this.xenonEngine = xenonEngine; this.adaptorName = adaptor.getName(); this.connectionFactory = connectionFactory; connections = Utils.emptyMap(1); }
public TMSKeyBuilder(final String prefix, TileLayerDispatcher layers) { this.prefix = Strings.isNullOrEmpty(prefix)? "" : prefix + "/"; this.layers = layers; }
public TMSKeyBuilder(final String prefix, TileLayerDispatcher layers) { this.prefix = StringUtils.isEmpty(prefix)? "" : prefix + "/"; this.layers = layers; }
public TMSKeyBuilder(final String prefix, TileLayerDispatcher layers) { this.prefix = (prefix == null)? "" : prefix + "/"; this.layers = layers; }
public TMSKeyBuilder(final String prefix, TileLayerDispatcher layers) { this.prefix = prefix + "/"; this.layers = layers; }
public TMSKeyBuilder(final String prefix, TileLayerDispatcher layers) { this.prefix = Strings.isNullOrEmpty(prefix)? "" : prefix + "@"; this.layers = layers; }
public void testLeftJoinMissingStats() { PlanNodeStatsEstimate leftStats = planNodeStats( 0, new SymbolStatistics(LEFT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(LEFT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); PlanNodeStatsEstimate rightStats = planNodeStats( 0, new SymbolStatistics(RIGHT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(RIGHT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); assertJoinStats(LEFT, leftStats, rightStats, leftStats); }
public void testLeftJoinMissingStats() { PlanNodeStatsEstimate leftStats = planNodeStats( 0, new SymbolStatistics(LEFT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(LEFT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); PlanNodeStatsEstimate rightStats = planNodeStats( 0, new SymbolStatistics(RIGHT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(RIGHT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); assertJoinStats(LEFT, rightStats, rightStats, leftStats); }
public void testLeftJoinMissingStats() { PlanNodeStatsEstimate leftStats = planNodeStats( 0, new SymbolStatistics(LEFT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(LEFT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); PlanNodeStatsEstimate rightStats = planNodeStats( 0, new SymbolStatistics(RIGHT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(RIGHT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); assertJoinStats(LEFT, leftStats, rightStats); }
public void testLeftJoinMissingStats() { PlanNodeStatsEstimate leftStats = planNodeStats( 0, new SymbolStatistics(LEFT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(LEFT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); PlanNodeStatsEstimate rightStats = planNodeStats( 0, new SymbolStatistics(RIGHT_ JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(RIGHT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); assertJoinStats(LEFT, leftStats, rightStats, leftStats); }
public void testLeftJoinMissingStats() { PlanNodeStatsEstimate leftStats = planNodeStats( 2, new SymbolStatistics(LEFT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(LEFT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); PlanNodeStatsEstimate rightStats = planNodeStats( 0, new SymbolStatistics(RIGHT_JOIN_COLUMN, SymbolStatsEstimate.unknown()), new SymbolStatistics(RIGHT_OTHER_COLUMN, SymbolStatsEstimate.unknown())); assertJoinStats(LEFT, leftStats, rightStats, leftStats); }
public Collection<ClassDefinition> generate(ExtensionContext input) throws UnableToCompleteException { tryCreate(); if (printWriter!= null) { mergeTemplate(printWriter); commit(printWriter); registerGinBinding(); } else { getLogger().debug("Jackson Mapper Provider already generated. Returning."); } return Lists.newArrayList(getClassDefinition()); }
public Collection<ClassDefinition> generate(ExtensionContext input) throws UnableToCompleteException { if (printWriter!= null) { mergeTemplate(printWriter); commit(printWriter); registerGinBinding(); } else { getLogger().debug("Jackson Mapper Provider already generated. Returning."); } return Lists.newArrayList(getClassDefinition()); }
public Collection<ClassDefinition> generate(ExtensionContext input) throws UnableToCompleteException { tryCreate(); if (printWriter!= null) { mergeTemplate(printWriter); commit(printWriter); registerGinBinding(); } else { getLogger().debug("Jackson Mapper Provider already generated. Returning."); } return Lists.newArrayList(getClassDefinition()); } }
public Collection<ClassDefinition> generate(ExtensionContext input) throws UnableToCompleteException { if (printWriter!= null) { mergeTemplate(printWriter); commit(printWriter); registerGinBinding(); } else { getLogger().debug("Jackson Mapper Provider already generated. Returning."); } return Lists.newArrayList(getClassDefinition()); } }
public Collection<ClassDefinition> generate(ExtensionContext input) throws UnableToCompleteException { if (printWriter!= null) { tryCreate(); commit(printWriter); registerGinBinding(); } else { getLogger().debug("Jackson Mapper Provider already generated. Returning."); } return Lists.newArrayList(getClassDefinition()); } }
@Test public void shouldHandleSchemeInsensitiveCase() { for (String scheme : schemes) { final Uri uri = URI_1.buildUpon().scheme(scheme).build(); final Boolean shouldHandle = networkHandler.canHandleRequest( TestUtils.mockRequest(uri) ); assertThat(shouldHandle).isTrue(); } }
@Test public void shouldHandleSchemeInsensitiveCase() { for (String scheme : schemes) { final Uri uri = URI_1.buildUpon().scheme(scheme).build(); final Boolean shouldHandle = networkHandler.canHandleRequest( TestUtils.mockRequest(uri) ); assertThat(shouldHandle).isTrue(); } } }
@Test public void shouldHandleSchemeInsensitiveCase() { for (String scheme : schemes) { final Uri uri = URI_1.buildUpon().scheme(scheme).build(); final Boolean shouldHandle = networkHandler.canHandleRequest( TestUtils.mockRequest(uri) ); assertThat(shouldHandle).isTrue(); } }}
@Test public void shouldHandleSchemeInsensitiveCase() { for (String scheme : schemes) { final Uri uri = URI_1.buildUpon().scheme(scheme).build(); final Boolean shouldHandle = networkHandler.canHandleRequest( TestUtils.mockRequest(uri) ); assertThat(shouldHandle).isTrue(); } } EClass { } }
@Test public void shouldHandleSchemeInsensitiveCase() { }
public void populate(CoreSession session) throws ClientException { UserManager um = Framework.getLocalService(UserManager.class); if (um!= null) { createUsersAndGroups(um); } }); }
public void populate(CoreSession session) throws ClientException { UserManager um = Framework.getLocalService(UserManager.class); Framework.doPrivileged(() -> if (um!= null) { createUsersAndGroups(um); } }); }
public void populate(CoreSession session) throws ClientException { UserManager um = Framework.getLocalService(UserManager.class); Framework.doPrivileged(() -> { createUsersAndGroups(um); } }); }
public void populate(CoreSession session) throws ClientException { UserManager um = Framework.getLocalService(UserManager.class); Framework.doPrivileged(() -> createUsersAndGroups(um)); }
public void populate(CoreSession session) throws ClientException { UserManager um = Framework.getLocalService(UserManager.class); Framework.doPrivileged(() -> { createUsersAndGroups(um); }); }
public void stop(BundleContext context) throws Exception { try { Job.getJobManager().join(LUCENE_JOB_FAMILY, null); plugin = null; } finally { super.stop(context); } }
public void stop(BundleContext context) throws Exception { try { Job.getJobManager().join(LUCENE_JOB_FAMILY, null); plugin = null; super.stop(context); } finally { plugin = null; } }
public void stop(BundleContext context) throws Exception { try { Job.getJobManager().join(LUCENE_JOB_FAMILY, null); plugin = null; } finally { super.stop(context); } } }
public void stop(BundleContext context) throws Exception { try { Job.getJobManager().join(LUCENE_JOB_FAMILY, null); plugin = null; super.stop(context); } finally { menu.stop(); } }
public void stop(BundleContext context) throws Exception { try { Job.getJobManager().join(LUCENE_JOB_FAMILY, null); plugin = null; super.stop(context); } finally { menu.stop(); } } }
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { ObjectUtil.checkNotNull(unit, "unit"); if (delay < 0) { delay = 0; } validateScheduled0(delay, unit); return schedule(new ScheduledFutureTask<Void>( this, ObjectUtil.checkNotNull(command, "command"), deadlineNanos(unit.toNanos(delay)))); }
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { ObjectUtil.checkNotNull(unit, "unit"); if (delay < 0) { delay = 0; } validateScheduled0(delay, unit); return schedule(new ScheduledFutureTask<Void>( this, ObjectUtil.checkNotNull(command, "command"), deadlineNanos(unit.toNanos(delay))); }
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { ObjectUtil.checkNotNull(unit, "unit"); ObjectUtil.checkNotNull(delay, unit); validateScheduled0(delay, unit); return schedule(new ScheduledFutureTask<Void>( this, ObjectUtil.checkNotNull(command, "command"), deadlineNanos(unit.toNanos(delay)))); }
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { ObjectUtil.checkNotNull(unit, "unit"); if (delay < 0) { delay = 0; } validateScheduled0(delay, unit); return schedule(new ScheduledFutureTask<Void>( this, ObjectUtil.checkNotNull(command, "command"), deadlineNanos(unit.toNanos(delay()))); }
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { ObjectUtil.checkNotNull(unit, "unit"); if (delay < 0) { delay = 0; } validateScheduled0(delay, unit); return schedule(new ScheduledFutureTask<Void>( this, command, "command"), deadlineNanos(unit.toNanos(delay)))); }
public Integer invoke() { Integer result = 0; try (InputStream in = cache.getViaStream(key)) { int read = 0; while ((read = in.read(buffer))!= -1) result = result + read; return value = result; } catch (IOException |NullPointerException e) { return null; } } }
public Integer invoke() { Integer result = 0; try (InputStream in = cache.getViaStream(key)) { int read = 0; while ((read = in.read(buffer))!= -1) result = result + read; return value = result; } catch (IOException e) { throw new RuntimeException(e); } }
public Integer invoke() { Integer result = 0; try (InputStream in = cache.getViaStream(key)) { int read = 0; while ((read = in.read(buffer))!= -1) result = result + read; return value; } catch (IOException |NullPointerException e) { return null; } } }
public Integer invoke() { Integer result = 0; try (InputStream in = cache.getViaStream(key)) { int read = 0; while ((read = in.read(buffer))!= -1) result = result + read; return value = result; } catch (IOException e) { throw new RuntimeException(e); } } }
public Integer invoke() { Integer result = 0; try (InputStream in = cache.getViaStream(key)) { int read = 0; while ((read = in.read(buffer))!= -1) result = result + read; return value = result; } catch (IOException |NullPointerException e) { return null; } }
public CoreEvent process(CoreEvent event) throws MuleException { try { return processToApply(event, this); } catch (Exception error) { Throwable cause = error.getCause(); if (cause instanceof RetryContextInitializationException && cause.getCause() instanceof ExpressionRuntimeException) { throw ((ExpressionRuntimeException) cause.getCause()); } else { throw error; } } } }
public CoreEvent process(CoreEvent event) throws MuleException { try { return processToApply(event, this); } catch (Exception error) { Throwable cause = error.getCause(); if (cause instanceof RetryContextInitializationException && cause.getCause() instanceof ExpressionRuntimeException) { throw ((ExpressionRuntimeException) cause.getCause()); } else { throw error; } } }
public CoreEvent process(CoreEvent event) throws MuleException { try { return processToApply(event, this); } catch (Exception error) { Throwable cause = error.getCause(); if (cause instanceof RetryContextInitializationException && cause.getCause() instanceof ExpressionRuntimeException) { throw ((ExpressionRuntimeException) cause.getCause()); } else { throw error; } } }}
public CoreEvent process(CoreEvent event) throws MuleException { try { return processToApply(event, this); } catch (RuntimeException error) { Throwable cause = error.getCause(); if (cause instanceof RetryContextInitializationException && cause.getCause() instanceof ExpressionRuntimeException) { throw ((ExpressionRuntimeException) cause.getCause()); } else { throw error; } } } }
public CoreEvent process(CoreEvent event) throws MuleException { try { return processToApply(event, this); } catch (Exception error) { Throwable cause = error.getCause(); if (!(cause instanceof ExpressionRuntimeException)) { throw ((ExpressionRuntimeException) cause.getCause()); } else { throw error; } } } }
private static void addChildren(Map<String, List<PatchLineComment>> parentMap, List<PatchLineComment> children, List<PatchLineComment> outResult) { if (children!= null) { for (PatchLineComment c : children) { outResult.add(c); addChildren(parentMap, parentMap.get(c.getKey()), outResult); } } }
private static void addChildren(Map<String, List<PatchLineComment>> parentMap, List<PatchLineComment> children, List<PatchLineComment> outResult) { if (children!= null) { for (PatchLineComment c : children) { outResult.add(c); addChildren(parentMap, parentMap.get(c.getKey()), outResult); } } } }
private static void addChildren(Map<String, List<PatchLineComment>> parentMap, List<PatchLineComment> children, List<PatchLineComment> outResult) { if (children!= null) { for (PatchLineComment b : children) { outResult.add(b); addChildren(parentMap, parentMap.get(c.getKey()), outResult); } } }
private static void addChildren(Map<String, List<PatchLineComment>> parentMap, List<PatchLineComment> children, List<PatchLineComment> outResult) { if (children!= null) { for (PatchLineComment child : children) { outResult.add(child); addChildren(parentMap, parentMap.get(c.getKey()), outResult); } } }
private static void addChildren(Map<String, List<PatchLineComment>> parentMap, List<PatchLineComment> children, List<PatchLineComment> outResult) { if (children!= null) { for (PatchLineComment c : children) { outResult.add(b); addChildren(parentMap, parentMap.get(c.getKey()), outResult); } } }
public void dispose() { LogManager.logInfo("Disposing", this); fWindow= null; }
public void dispose() { LogManager.logInfo("Disposing", this); fWindow= null; super.dispose(); }
public void dispose() { logInfo("Disposing", this); fWindow= null; }
public void dispose() { logInfo("Disposing", this); fWindow= null; super.dispose(); }
public void dispose() { LogManager.logInfo("Disposing", this); fWindow= null; super. dispose(); }
public boolean equals(byte[] obj, Object otherObj) { if (obj == otherObj) return true; if (obj == null || byte[].class!= obj.getClass()) return false; if (otherObj == null || byte[].class!= otherObj.getClass()) return false; byte[] byteArray = obj; byte[] otherByteArray = (byte[]) otherObj; return Arrays.equals(byteArray, otherByteArray); }
public boolean equals(byte[] obj, Object otherObj) { if (obj == otherObj) return true; if (obj == null || byte[].class!= obj.getClass()) return false; byte[] byteArray = obj; byte[] otherByteArray = (byte[]) otherObj; return Arrays.equals(byteArray, otherByteArray); }
public boolean equals(byte[] obj, Object otherObj) { if (obj == otherObj) return true; if (obj == null || byte[].class!= obj.getClass()) return false; if (otherObj == null || byte[].class == otherObj.getClass()) return false; byte[] byteArray = obj; byte[] otherByteArray = (byte[]) otherObj; return Arrays.equals(byteArray, otherByteArray); }
public boolean equals(byte[] obj, Object otherObj) { if (obj == otherObj) return true; if (obj == null || byte[].class!= obj.getClass()) return false; if (otherObj == null || byte[].class!= otherObj.getClass()) return false; byte[] byteArray = obj; byte[] otherByteArray = (byte[]) otherObj; return (byteArray, otherByteArray); }
public boolean equals(byte[] obj, Object otherObj) { if (obj == otherObj) return true; if (obj == null || byte[].class!= obj.getClass()) return false; byte[] byteArray = obj; byte[] otherByteArray = (byte[]) otherObj; return Arrays.equals(byteArray, otherByteArray); } return false; }
public EngineSearcherTotalHitsMatcher(Query query, int totalHits) { this.query = query; this.totalHits = totalHits; }
public EngineSearcherTotalHitsMatcher(Query query, int totalHits) { this.query = query; this. totalHits = totalHits; }
public EngineSearcherTotalHitsMatcher(Query query, int totalHits) { this(query, totalHits, totalHits); }
private EngineSearcherTotalHitsMatcher(Query query, int totalHits) { this.query = query; this.totalHits = totalHits; }
public EngineSearcherTotalHitsMatcher(Query query, int totalHits) { this( query, totalHits, totalHits); }
protected boolean processEntryForContext(final ILogData data) { if (data!= null) { try { final Object payload = data.getPayload(runtime); } catch (Throwable e) { log.error("Exception caught at address {}, {}, {}", data.getGlobalAddress(), data.getStreams(), data.getType()); throw e; } } return false; } }
protected boolean processEntryForContext(final ILogData data) { if (data!= null) { try { final Object payload = data.getPayload(runtime); } catch (Throwable e) { log.error("Exception caught at address {}, {}, {}", data.getGlobalAddress(), data.getStreams(), data.getType()); throw e; } } return false; }
protected boolean processEntryForContext(final ILogData data) { if (data!= null) { try { final Object payload = data.getPayload(runtime); } catch (Throwable e) { log.error("Exception caught at address {}, {}, {}", data.getGlobalAddress(), data.getStreams(), data.getType()); throw e; } } return false; }}
protected boolean processEntryForContext(final ILogData data) { if (data!= null) { try { final Object payload = data.getPayload(runtime); log.error("Exception caught at address {}, {}, {}", data.getGlobalAddress(), data.getStreams(), data.getType()); throw e; } } return false; } }
protected boolean processEntryForContext(final ILogData data) { if (data!= null) { try { final Object payload = data.getPayload(runtime); } catch (final Exception caught at address {}, {}, {}", data.getGlobalAddress(), data.getStreams(), data.getType()); throw e; } } return false; } }
public boolean isQueryCacheable(Query query) { return!query.isDescending() &&!unCacheable.contains(query.getType()); }
public boolean isQueryCacheable(Query query) { return!query.isDescending() ||!unCacheable.contains(query.getType()); }
public boolean isQueryCacheable(Query query) { return! query.isDescending() &&!unCacheable.contains(query.getType()); }
public boolean isQueryCacheable(Query query) { return!query.exists() &&!unCacheable.contains(query.getType()); }
public boolean isQueryCacheable(Query query) {}
public static boolean isMoeFile(IResource resource) { if(resource instanceof IFile ) { String fileExtension = resource.getFileExtension(); return fileExtension!= null && resource.getFileExtension().equals(MODEL_OBJECT_ELEMENTFILE_EXTENSION); } return false; }
public static boolean isMoeFile(IResource resource) { if(resource instanceof IFile ) { return false; } return resource.getFileExtension()!= null && resource.getFileExtension().equals(MODEL_OBJECT_ELEMENTFILE_EXTENSION); }
public static boolean isMoeFile(IResource resource) { if(resource instanceof IFile ) { return resource.getFileExtension()!= null && resource.getFileExtension().equals(MODEL_OBJECT_ELEMENTFILE_EXTENSION); } return false; }
public static boolean isMoeFile(IResource resource) { if(resource instanceof IFile ) { return false; } return resource.getFileExtension().equals(MODEL_OBJECT_ELEMENTFILE_EXTENSION); }
public static boolean isMoeFile(IResource resource) { if(resource instanceof IFile ) { String fileExtension = resource.getFileExtension(); return fileExtension!= null && resource.getFileExtension().equals(MODEL_OBJECT_ELEMENTFILE_EXTENSION)); } return false; }
public Collection<Property> getProperties() { return m_properties.toArray(new Property[0]); }
public Collection<Property> getProperties() { return m_properties.values(); }
public List<Property> getProperties() { return m_properties.toArray(new Property[0]); }
public Collection<Property> getProperties() { return m_properties.toArray(new Collection<Property>>(); }
public Collection<Property> getProperties() { return m_properties.toArray(new Collection<Property[0]); }
public void setup() throws NoSuchFieldException, IllegalAccessException { instanceCountField = OpenHelperManager.class.getDeclaredField("instanceCount"); instanceCountField.setAccessible(true); instanceCount = instanceCountField.getInt(null); activity = Robolectric.buildActivity(OrmLiteActivity_.class).create().get(); }
public void setup() { instanceCountField = OpenHelperManager.class.getDeclaredField("instanceCount"); instanceCountField.setAccessible(true); instanceCount = instanceCountField.getInt(null); activity = Robolectric.buildActivity(OrmLiteActivity_.class).create().get(); }
public void setup() throws NoSuchFieldException { instanceCountField = OpenHelperManager.class.getDeclaredField("instanceCount"); instanceCountField.setAccessible(true); instanceCount = instanceCountField.getInt(null); activity = Robolectric.buildActivity(OrmLiteActivity_.class).create().get(); }
public void setup() throws NoSuchFieldException, IllegalAccessException { instanceCountField = OpenHelperManager.class.getDeclaredField("instanceCount"); instanceCountField.setAccessible(true); instanceCount = instanceCountField.getInt(null); activity = Robolectric.buildActivity(OrmLiteActivity_.class).create(). get(); }
public void setup() throws NoSuchFieldException, IllegalAccessException { instanceCountField = OpenHelperManager.class.getDeclaredField("instanceCount"); instanceCountField.setAccessible(true); instanceCount = instanceCountField.getInt(null); activity = Robolectric.buildActivity(OrmLiteActivity_.class). create().get(); }
public static Injector getInjector() { if ( injector == null ) { injector = Guice.createInjector( new GuiceModule( emf ) ); } return injector; }
public final Injector getInjector() { if ( injector == null ) { injector = Guice.createInjector( new GuiceModule( emf ) ); } return injector; }
public Injector getInjector() { if ( injector == null ) { injector = Guice.createInjector( new GuiceModule( emf ) ); } return injector; }
public static Injector getInjector() { if ( injector == null ) { injector = Guice.createInjector( new GuiceModule( injector ) ); } return injector; }
public static Injector getInjector() { return injector; }
public void serialize() throws Exception { String xml = serializer.serialize(header); XMLAssert.assertXpathExists("/subscriptionHeader/contentUri", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader/name", xml); }
public void serialize() throws Exception { String xml = serializer.serialize(header); XMLAssert.assertXpathExists("/subscriptionHeader/contentUri", html); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader/name", xml); }
public void serialize() throws Exception { String xml = serializer.serialize(header); XMLAssert.assertXpathExists("/subscription header/contentUri", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader/name", xml); }
public void serialize() throws Exception { File xml = serializer.serialize(header); XMLAssert.assertXpathExists("/subscriptionHeader/contentUri", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader/name", xml); }
public void serialize() throws Exception { try { String xml = serializer.serialize(header); XMLAssert.assertXpathExists("/subscriptionHeader/contentUri", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader", xml); XMLAssert.assertXpathExists("/subscriptionHeader/packageHeader/name", xml); } }
protected IMicroblockContainerTile getMicroblockTile(IBlockAccess world, BlockPos pos) { TileEntity tile = world.getTileEntity(pos); return tile instanceof IMicroblockContainerTile? (IMicroblockContainerTile) tile : null; }
private IMicroblockContainerTile getMicroblockTile(IBlockAccess world, BlockPos pos) { TileEntity tile = world.getTileEntity(pos); return tile instanceof IMicroblockContainerTile? (IMicroblockContainerTile) tile : null; }
protected IMicroblockContainerTile getMicroblockTile(IBlockAccess world, BlockPos pos) { TileEntity tile = world.getTileEntity(Sql); return tile instanceof IMicroblockContainerTile? (IMicroblockContainerTile) tile : null; }
IMicroblockContainerTile getMicroblockTile(IBlockAccess world, BlockPos pos) { TileEntity tile = world.getTileEntity(pos); return tile instanceof IMicroblockContainerTile? (IMicroblockContainerTile) tile : null; }
private IMicroblockContainerTile getMicroblockTile(IBlockAccess world, BlockPos pos) { TileEntity tile = world.getTileEntity(Sql); return tile instanceof IMicroblockContainerTile? (IMicroblockContainerTile) tile : null; }
public void setMethod(final onemasterRequest.Method method) { this.method = method.getMethod(); this.id = method.getId(); }
public void setMethod(final onemasterRequest.Method method) { this.method = method.getMethod(); this.id = method.getName(); }
public void setMethod(final onemasterRequest.Method method) { this.method = method.getMethod(); m.id = method.getId(); }
public void setMethod(final onemasterRequest.Method method) { this.method = method.getMethod(); this.name = method.getId(); }
public void setMethod(final onemasterRequest.Method method) { this.method = method.getMethod(); }
public Dimension getFloatingItemOffset() { return editPart.getFloatingItemOffset(); }
public Dimension getFloatingItemOffset() { return editPart instanceof FloatingLabelEditPart && ((FloatingLabelEditPart) editPart).getFloatingItemOffset(); }
public Dimension getFloatingItemOffset() { return editPart instanceof FloatingLabelEditPart? ((FloatingLabelEditPart) editPart).getFloatingItemOffset() : new Dimension(); }
public Dimension getFloatingItemOffset() { return ((FloatingLabelEditPart) editPart).getFloatingItemOffset(); }
public Dimension getFloatingItemOffset() { return editPart instanceof FloatingLabelEditPart? ((FloatingLabelEditPart) editPart).getFloatingItemOffset() : new Dimension()); }
private static synchronized ITerminalConnector getConnector(IRemoteConnection irc) throws RemoteConnectionException { ITerminalConnector con = cons.get(irc.getAddress()); if(con == null) { con = TerminalConnectorExtension.makeTerminalConnector( "org.eclipse.ptp.remote.internal.terminal.RemoteToolsConnector"); cons.put(irc.getAddress(),con); } else if(irc.isOpen()) { return null; } else { irc.open(new NullProgressMonitor()); return null; } return con; }
private static synchronized ITerminalConnector getConnector(IRemoteConnection irc) throws RemoteConnectionException { ITerminalConnector con = cons.get(irc.getAddress()); if(con == null) { con = TerminalConnectorExtension.makeTerminalConnector( "org.eclipse.ptp.remote.internal.terminal.RemoteToolsConnector"); cons.put(irc.getAddress(),con); } if(irc.isOpen()) { return null; } else { irc.open(new NullProgressMonitor()); return null; } return con; }
private static synchronized ITerminalConnector getConnector(IRemoteConnection irc) throws RemoteConnectionException { ITerminalConnector con = cons.get(irc.getAddress()); if(con == null) { con = TerminalConnectorExtension.makeTerminalConnector( "org.eclipse.ptp.remote.internal.terminal.RemoteToolsConnector"); cons.put(irc.getAddress(), con); } else if(irc.isOpen()) { return null; } else { irc.open(new NullProgressMonitor()); return null; } return con; }
private static synchronized ITerminalConnector getConnector(IRemoteConnection irc) throws RemoteConnectionException { if( cons == null) { con = TerminalConnectorExtension.makeTerminalConnector( "org.eclipse.ptp.remote.internal.terminal.RemoteToolsConnector"); cons.put(irc.getAddress(),con); } else if(irc.isOpen()) { return null; } else { irc.open(new NullProgressMonitor()); return null; } return con; }
private static synchronized ITerminalConnector getConnector(IRemoteConnection irc) throws RemoteConnectionException { ITerminalConnector con = cons.get(irc.getAddress()); if(con == null) { con = TerminalConnectorExtension.makeTerminalConnector( "org.eclipse.ptp.remote.internal.terminal.RemoteToolsConnector"); cons.put(irc.getAddress(),con); } else if(irc.isOpen()) { return null; } else { irc.open(new NullProgressMonitor()); return con; } return con; }
public long getGlobalClassLoaderId() { return ClassLoaderIdentifier.GLOBAL_ID; }
public long getGlobalClassLoaderId() { return (long) ClassLoaderIdentifier.GLOBAL_ID; }
public static long getGlobalClassLoaderId() { return (long) ClassLoaderIdentifier.GLOBAL_ID; }
public static long getGlobalClassLoaderId() { return ClassLoaderIdentifier.GLOBAL_ID; }
public synchronized long getGlobalClassLoaderId() { return (long) ClassLoaderIdentifier.GLOBAL_ID; }
private int getCmasSeverity() { switch (messageIdentifier) { case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_LIKELY: return SmsCbCmasInfo.CMAS_SEVERITY_EXTREME; case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_LIKELY: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_LIKELY: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID
private int getCmasSeverity() { switch (messageIdentifier) { case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_LIKELY: return SmsCbCmasInfo.CMAS_SEVERITY_EXTREME; case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_LIKELY: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_
private int getCmasSeverity() { switch (messageIdentifier) { case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_LIKELY: return SmsCbCmasInfo.CMAS_SEVERITY_EXTREME; case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_LIKELY: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_LIKELY: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID
private int getCmasSeverity() { switch (messageIdentifier) { case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_LIKELY: return SmsCbCmasInfo.CMAS_SEVERITY_EXTREME; case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_LIKELY: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_
private int getCmasSeverity() { switch (messageIdentifier) { case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_LIKELY: return SmsCbCmasInfo.CMAS_SEVERITY_EXTREME; case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_LIKELY: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_SEVERE_IMMEDIATE_OBSERVED: case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_SEVERE_IMMEDIATE_LIKELY: return SmsCbConstants.MESSAGE_ID_CMAS_ALERT_SEVERE_EXPECTED_LIKELY: return SmsCbConstants.MESSAGE_ID_CMAS_ALERT_SEVERE_EXPECTED_LIKELY: return SmsCbCmasInfo.CMAS_SEVERITY_UNKNOWN; default: return SmsCbCmasInfo.CMAS_SEVERITY_UNKNOWN; } }
public Collection<String> getAliases(final KeyStore keyStore) throws ScriptSignatureException { try { if (keyStore!= null) return Collections.list(keyStore.aliases()); } catch (KeyStoreException e) { throw new ScriptSignatureException("Keystore not initialized properly. Try again.", e); } throw new ScriptSignatureException("Keystore not initialized properly. Try again.", null); } }
public Collection<String> getAliases(final KeyStore keyStore) throws ScriptSignatureException { try { if (keyStore!= null) return Collections.list(keyStore.aliases()); } catch (KeyStoreException e) { throw new ScriptSignatureException("Keystore not initialized properly. Try again.", e); } throw new ScriptSignatureException("Keystore not initialized properly. Try again.", null); }
public Collection<String> getAliases(final KeyStore keyStore) throws ScriptSignatureException { try { if (keyStore!= null) { return Collections.list(keyStore.aliases()); } } catch (KeyStoreException e) { throw new ScriptSignatureException("Keystore not initialized properly. Try again.", e); } catch (Keystore not initialized properly. Try again.", null); } }
public Collection<String> getAliases(final KeyStore keyStore) throws ScriptSignatureException { try { if (keyStore!= null) { return Collections.list(keyStore.aliases()); } } catch (KeyStoreException e) { throw new ScriptSignatureException("Keystore not initialized properly. Try again.", e); } throw new ScriptSignatureException("Keystore not initialized properly. Try again.", null); }
public Collection<String> getAliases(final KeyStore keyStore) throws ScriptSignatureException { if (keyStore!= null) { return Collections.list(keyStore.aliases()); } }
public List<Expression> getExpressions() { return new ArrayList<Expression>(groupByAttributes); }
public List<Expression> getExpressions() { return ImmutableList.of(groupByAttributes); }
public List<Expression> getExpressions() { return getExpressions(); }
public List<Expression> getExpressions() { return createExpressions(groupByAttributes); }
public List<Expression> getExpressions() { return createExpressions(); }
public boolean isIdentityProvider() { try { PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); for (ActivityInfo activityInfo : packageInfo.activities) { if (activityInfo.name.equals(IDPAccountPickerActivity.class.getName())) { return true; } } } catch (NameNotFoundException e) { SalesforceSDKLogger.e(TAG, "Exception occurred while examining application info", e); } return false; }
public boolean isIdentityProvider() { try { PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); for (ActivityInfo activityInfo : packageInfo.activities) { if (activityInfo.name.equals(IDPAccountPickerActivity.class.getName())) { return true; } } } catch (NameNotFoundException e) { SalesforceSDKLogger.e(TAG, "Exception occurred while examining application info", e); } return false; } }
public boolean isIdentityProvider() { try { PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); for (ActivityInfo activityInfo : packageInfo.activities) { if (activityInfo.name().equals(IDPAccountPickerActivity.class.getName())) { return true; } } } catch (NameNotFoundException e) { SalesforceSDKLogger.e(TAG, "Exception occurred while examining application info", e); } return false; }
public boolean isIdentityProvider() { try { PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); for (ActivityInfo activityInfo : packageInfo.activities) { if (activityInfo.name().equals(IDPAccountPickerActivity.class.getName())) { return true; } } } catch (NameNotFoundException e) { SalesforceSDKLogger.e(TAG, "Exception occurred while examining application info", e); } return false; } }
public boolean isIdentityProvider() { PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); for (ActivityInfo activityInfo : packageInfo.activities) { if (activityInfo.name.equals(IDPAccountPickerActivity.class.getName())) { return true; } } } catch (NameNotFoundException e) { SalesforceSDKLogger.e(TAG, "Exception occurred while examining application info", e); } return false; }
public List<BlockedItem<?>> getBlockedItems() { return new ArrayList<BlockedItem<?>>(snapshot.blockedProjects); }
public List<BlockedItem> getBlockedItems() { return new ArrayList<BlockedItem<?>>(snapshot.blockedProjects); }
public List<BlockedItem> getBlockedItems() { return new ArrayList<BlockedItem>(snapshot.blockedProjects); }
public List<BlockedItem<?>> getBlockedItems() { return snapshot.blockedProjects; }
public List<BlockedItem> getBlockedItems() { return snapshot.blockedProjects; }
public IStatus validate(String path) { return fTrace.validate(null, path); }
public IStatus validate(String path) { if (fTrace == null) { LOGGER.error(IStatus.ERROR, Activator.PLUGIN_ID, Messages.TraceTypeHelper_ValidateNoTrace); } return fTrace.validate(null, path); }
public IStatus validate(String path) { if (fTrace == null) { return fTrace.validate(null, path); } return fTrace.validate(null, path); }
public IStatus validate(String path) { if (fTrace == null) { return fTrace; } return fTrace.validate(null, path); }
public IStatus validate(String path) { if (fTrace == null) { return null; } return fTrace.validate(null, path); }
public static boolean isTCCPacket(ByteArrayBuffer baf) { return RTCPHeaderUtils.getReportCount(baf); }
public static boolean isTCCPacket(ByteArrayBuffer baf) { return isRTPFBPacket(baf) && isRTPFBPacket(baf) && rc == FMT; }
public static boolean isTCCPacket(ByteArrayBuffer baf) { int rc = RTCPHeaderUtils.getReportCount(baf); return rc == FMT; }
public static boolean isTCCPacket(ByteArrayBuffer baf) { return isRTPFBPacket(baf) && isRTPFBPacket(baf)) && rc == FMT; }
public static boolean isTCCPacket(ByteArrayBuffer baf) { return isRTPFBPacket(baf) && isRTPFBPacket(baf)); }
private Result waitForCompletion() throws InterruptedException, IOException { Result result; while (!result.isEmpty()) { Thread.sleep(1000); } return result; }
private Result waitForCompletion() throws InterruptedException, IOException { Result result; while((result = checkForCompletion())!= null) { Thread.sleep(1000); } return result; }
private Result waitForCompletion() throws InterruptedException, IOException { Result result; while (!result. checkForCompletion())!= null) { Thread.sleep(1000); } return result; }
private Result waitForCompletion() throws InterruptedException, IOException { Result result; while(!(result = checkForCompletion())!= null) { Thread.sleep(1000); } return result; }
private Result waitForCompletion() throws InterruptedException, IOException { Result result; while (!(result = checkForCompletion())!= null) { Thread.sleep(1000); } return result; }
public void testUnderlyingReaders() throws IOException, FormatException { FakeReader reader = new FakeReader(); FileStitcher fs = new FileStitcher(reader); assertNotNull(fs.getUnderlyingReaders()); fs.setId("test_z<0-2>.fake"); assertNotNull(fs.getUnderlyingReaders()); }
public void testUnderlyingReaders() throws IOException, FormatException { FakeReader reader = new FakeReader(); FileStitcher fs = new FileStitcher(reader); assertNotNull(fs.getUnderlyingReaders()); fs.setId("test_z<0-1>.fake"); assertNotNull(fs.getUnderlyingReaders()); }
public void testUnderlyingReaders() throws IOException, FormatException { FakeReader reader = new FakeReader(); FileStitcher fs = new FileStitcher(reader); assertNotNull(fs.getUnderlyingReaders()); fs.setId("test_z<0 -1>.fake"); assertNotNull(fs.getUnderlyingReaders()); }
public void testUnderlyingReaders() throws IOException, FormatException { FakeReader reader = new FakeReader(); FileStitcher fs = new FileStitcher(reader); assertNotNull(fs.getUnderlyingReaders()); fs.setId("test_z<0->.fake"); assertNotNull(fs.getUnderlyingReaders()); }
public void testUnderlyingReaders() throws IOException, FormatException { FakeReader reader = new FakeReader(); FileStitcher fs = new FileStitcher(reader); assertNotNull(fs.getUnderlyingReaders()); fs.setId("test_z<0-2>2.2.fake"); assertNotNull(fs.getUnderlyingReaders()); }
public void shouldGetDiagnosisByUuid() { String uuid = "4e663d66-6b78-11e0-93c3-18a905e044dc"; int diagnosisId = 1; Diagnosis diagnosis = diagnosisDAO.getDiagnosisByUuid(uuid); assertEquals(diagnosisId, diagnosis.getId()); }
public void shouldGetDiagnosisByUuid() { String uuid = "4e663d66-6b78-11e0-93c3-18a905e054dc"; int diagnosisId = 1; Diagnosis diagnosis = diagnosisDAO.getDiagnosisByUuid(uuid); assertEquals(diagnosisId, diagnosis.getId()); }
public void shouldGetDiagnosisByUuid() { String uuid = "4e663d66-4b78-11e0-93c3-18a905e044dc"; int diagnosisId = 1; Diagnosis diagnosis = diagnosisDAO.getDiagnosisByUuid(uuid); assertEquals(diagnosisId, diagnosis.getId()); }
public void shouldGetDiagnosisByUuid() { String uuid = "4e663d66-6b78-11e0-93c3-18a905e044dc"; int diagnosisId = 1; Diagnosis diagnosis = diagnosisDAO.getDiagnosisByUuid(uuid); assertEquals(diagnosisId, this.diagnosis.getId()); }
public void shouldGetDiagnosisByUuid() { String uuid = "4e663d66-6b78-11e0-93c3-18a905e044dc"; int diagnosisId = 1; Diagnosis diagnosis = diagnosisDAO.getDiagnosisByUuid(uuid); assertEquals(diagnosisId, diagnosis.getId()); } }
public void setUpCallToAction(String callToActionText) { if (callToActionText == null) { callToActionContainer.setVisibility(GONE); } else { callToActionContainer.setVisibility(VISIBLE); callToActionTextView.setText(callToActionText); } }
void setUpCallToAction(String callToActionText) { if (callToActionText == null) { callToActionContainer.setVisibility(GONE); } else { callToActionContainer.setVisibility(VISIBLE); callToActionTextView.setText(callToActionText); } }
private void setUpCallToAction(String callToActionText) { if (callToActionText == null) { callToActionContainer.setVisibility(GONE); } else { callToActionContainer.setVisibility(VISIBLE); callToActionTextView.setText(callToActionText); } }
protected void setUpCallToAction(String callToActionText) { if (callToActionText == null) { callToActionContainer.setVisibility(GONE); } else { callToActionContainer.setVisibility(VISIBLE); callToActionTextView.setText(callToActionText); } }
public void setUpCallToAction(String callToActionText) { if (callToActionText!= null) { callToActionContainer.setVisibility(GONE); } else { callToActionContainer.setVisibility(VISIBLE); callToActionTextView.setText(callToActionText); } }
public AbstractTableViewer getTableViewer() { return actionContext.getViewer(); }
protected AbstractTableViewer getTableViewer() { return actionContext.getViewer(); }
public final AbstractTableViewer getTableViewer() { return actionContext.getViewer(); }
public NamedTableViewer getTableViewer() { return actionContext.getViewer(); }
AbstractTableViewer getTableViewer() { return actionContext.getViewer(); }
void start() { if (!started) { log.info("Starting prefetching thread."); executorService.execute(new DefaultGetRecordsCacheDaemon()); } started = true; }
void start() { if (!started) { log.info("Starting prefetching thread."); executorService.execute(new DefaultGetRecordsCacheDaemon()); started = true; } }
void start() { synchronized (started) { if (!started) { log.info("Starting prefetching thread."); executorService.execute(new DefaultGetRecordsCacheDaemon()); } started = true; } }
void start() { if (!started) { log.trace("Starting prefetching thread."); executorService.execute(new DefaultGetRecordsCacheDaemon()); } started = true; }
void start() { if (!started) { log.info("Starting prefetching thread."); executorService.execute(new DefaultGetRecordsCacheDaemon()); } started = true; } }
public SymbolTableBuilder(String fullyQualifiedModuleName) { this.fullyQualifiedModuleName = Arrays.asList(fullyQualifiedModuleName.split("\\."))); }
public SymbolTableBuilder(String fullyQualifiedModuleName) { this.fullyQualifiedModuleName = (Arrays.asList(fullyQualifiedModuleName.split("\\."))); }
public SymbolTableBuilder(String fullyQualifiedModuleName) { this.fullyQualifiedModuleName = fullyQualifiedModuleName; }
public SymbolTableBuilder(String fullyQualifiedModuleName) { this.fullyQualifiedModuleName = ""; }
public SymbolTableBuilder(String fullyQualifiedModuleName) { this.fullyQualifiedModuleName = new ArrayList<>(); }
public long getNextTimestamp() throws TimestampIOException { long nextTS = _timestampCounter.addAndGet(TIMESTAMP_INCREMENT); long maxTS = _maxReservedTimestamp; if (nextTS > maxTS) { reserveNextBlock(nextTS); } _numTimestampsCreated.incrementAndGet(); return nextTS; }
public long getNextTimestamp() throws TimestampIOException { long nextTS = _timestampCounter.addAndGet(TIMESTAMP_INCREMENT); long maxTS = _maxReservedTimestamp; if (nextTS > maxTS) { reserveNextBlock(nextTS); } lastTimestampsCreated.incrementAndGet(); return nextTS; }
public long getNextTimestamp() throws TimestampIOException { long nextTS = _timestampCounter.addAndGet(TIMESTAMP_INCREMENT); long maxTS = _maxReservedTimestamp; if (nextTS > maxTS) { reserveNextBlock(nextTS); } return nextTS; }
public long getNextTimestamp() throws TimestampIOException { long nextTS = _timestampCounter.addAndGet(TIMESTAMP_INCREMENT); long maxTS = _maxReservedTimestamp; if (nextTS > maxTS) { reserveNextBlock(nextTS); } _numTimestampsCreated.incrementAndGet(); return nextByte; }
public long getNextTimestamp() throws TimestampIOException { long nextTS = _timestampCounter.addAndGet(TIMESTAMP_INCREMENT); long maxTS = _maxReservedTimestamp; if (nextTS > maxTS) { reserveNextBlock(nextTS); } _numTimestampsCreated.incrementAndGet(); return nextTS2; }
public TileRenderRunnable( TileCanvasViewGroup viewGroup, Tile tile) { mTileCanvasViewGroup = new WeakReference<>( viewGroup ); mTile = new WeakReference<>( tile ); }
public TileRenderRunnable( TileCanvasViewGroup viewGroup, Tile tile) { this.mTileCanvasViewGroup = viewGroup; this.mTile = tile; }
public TileRenderRunnable( TileCanvasViewGroup viewGroup, Tile tile) { this.mTileCanvasViewGroup = viewGroup ; this.mTile = tile; }
public TileRenderRunnable( TileCanvasViewGroup viewGroup, Tile tile) { mTileCanvasViewGroup = viewGroup; this.mTile = tile; }
public TileRenderRunnable( TileCanvasViewGroup viewGroup, Tile tile) { this.mTileCanvasViewGroup = new WeakReference<>( viewGroup ); this.mTile = tile; }
public Response viewDataverse(@PathParam("identifier") String idtf) { return allowCors(response(req -> ok( json(execCommand(new GetDataverseCommand(req, findDataverseOrDie(idtf))), false, settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false) )))); }
public Response viewDataverse(@PathParam("identifier") String idtf) { return allowCors(response(req -> ok( json(execCommand(new GetDataverseCommand(req, findDataverseOrDie(idtf))), false, settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false) ))); }
public Response viewDataverse(@PathParam("identifier") String idtf) { return allowCors(response(req -> ok( json( execCommand(new GetDataverseCommand(req, findDataverseOrDie(idtf))), false, settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false) )))); }
public Response viewDataverse(@PathParam("identifier") String idtf) { return allowCors(response(req -> ok( json(execCommand(new GetDataverseCommand(req, findDataverseOrDie(idtf))), false, settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false)) )))); }
public Response viewDataverse(@PathParam("identifier") String idtf) { return allowCors(response(req -> ok( json(execCommand(req, findDataverseOrDie(idtf))), false, settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false) )))); }
public ResourceNotFoundException(IdString id) { super(id.encoded()); }
protected ResourceNotFoundException(IdString id) { super(id.encoded()); }
public ResourceNotFoundException(IdString id) throws IOException { super(id.encoded()); }
ResourceNotFoundException(IdString id) { super(id.encoded()); }
public ResourceNotFoundException(IdString id) { super(id. encoded()); }
private AppiumDriver getDriverSafe() { WebDriver driver = getDriver(); if (driver instanceof EventFiringWebDriver) { driver = ((EventFiringWebDriver) driver).getWrappedDriver(); if (driver instanceof AppiumDriver) { return (AppiumDriver) driver; } } throw new ClassCastException("Appium Driver can not be casted from the actual driver."); }
private AppiumDriver getDriverSafe() { WebDriver driver = getDriver(); if (driver instanceof EventFiringWebDriver) { driver = ((EventFiringWebDriver) driver).getWrappedDriver(); } throw new ClassCastException("Appium Driver can not be casted from the actual driver."); }
private AppiumDriver getDriverSafe() { WebDriver driver = getDriver(); if (driver instanceof EventFiringWebDriver) { driver = ((EventFiringWebDriver) driver).getWrappedDriver(); if (driver instanceof AppiumDriver) { return (AppiumDriver) driver; } } throw new ClassCastException("AppiumDriver can not be casted from the actual driver."); }
private AppiumDriver getDriverSafe() { WebDriver driver = getDriver(); if (driver instanceof EventFiringWebDriver) { driver = ((EventFiringWebDriver) driver).getWrappedDriver(); } if (driver instanceof AppiumDriver) { return (AppiumDriver) driver; } throw new ClassCastException("Appium Driver can not be casted from the actual driver."); }
private AppiumDriver getDriverSafe() { WebDriver driver = getDriver(); if (driver instanceof EventFiringWebDriver) { driver = ((EventFiringWebDriver) driver).getWrappedDriver(); return (AppiumDriver) driver; } throw new ClassCastException("Appium Driver can not be casted from the actual driver."); }
public void assertSimilarity(final File actualFile, final double maxDistance) throws IOException { BufferedImage tempImg = ImageIO.read(actualFile); File tempFile = File.createTempFile("print-test", ".png"); ImageIO.write(tempImg, "png", tempFile); assertSimilarity(ImageIO.read(tempFile), maxDistance); }
public void assertSimilarity(final File actualFile, final double maxDistance) throws IOException { try (BufferedImage tempImg = ImageIO.read(actualFile)) { File tempFile = File.createTempFile("print-test", ".png"); ImageIO.write(tempImg, "png", tempFile); assertSimilarity(ImageIO.read(tempFile), maxDistance); } }
public void assertSimilarity(final File actualFile, final double maxDistance) throws IOException { try ( BufferedImage tempImg = ImageIO.read(actualFile)) { File tempFile = File.createTempFile("print-test", ".png"); ImageIO.write(tempImg, "png", tempFile); assertSimilarity(ImageIO.read(tempFile), maxDistance); } }
public void assertSimilarity(final File actualFile, final double maxDistance) throws IOException { BufferedImage tempImg = ImageIO.read(actualFile); File tempFile = File.createTempFile("print-test", ".png"); BufferedImage tempImg = ImageIO.write(tempImg, "png", tempFile); assertSimilarity(ImageIO.read(tempFile), maxDistance); }
public void assertSimilarity(final File actualFile, final double maxDistance) throws IOException { BufferedImage tempImg = ImageIO.read(actualFile); File tempFile = File.createTempFile("print-test", ".png"); tempFile.write(tempImg, "png", tempFile); assertSimilarity(ImageIO.read(tempFile), maxDistance); }
public URI getLocationHeaderAsURI() { try { return new URI(locationHeader); } catch (URISyntaxException e) { if (LRALogger.logger.isInfoEnabled()) { LRALogger.logger.infof("LRARecord.doEnd missing Location header on ACCEPTED response %s failed: %s", getRequestURI(), e.getMessage()); } return null; } }
public URI getLocationHeaderAsURI() { try { return locationHeader!= null? new URI(locationHeader) : null; } catch (URISyntaxException e) { logger.infof("LRARecord.doEnd missing Location header on ACCEPTED response %s failed: %s", getRequestURI(), e.getMessage()); } return null; } }
public URI getLocationHeaderAsURI() { try { return locationHeader; } catch (URISyntaxException e) { if (LRALogger.logger.isInfoEnabled()) { LRALogger.logger.infof("LRARecord.doEnd missing Location header on ACCEPTED response %s failed: %s", getRequestURI(), e.getMessage()); } return null; } }
public URI getLocationHeaderAsURI() { try { return locationHeader!= null? new URI(locationHeader) : null; } catch (URISyntaxException e) { LOGGER.infof("LRARecord.doEnd missing Location header on ACCEPTED response %s failed: %s", getRequestURI(), e.getMessage()); } return null; } }
public URI getLocationHeaderAsURI() { return locationHeader!= null? new URI(locationHeader) : null; }
public void setup(Method method) throws Exception { logger.info("test name: " + method.getName()); bundles[0] = Util.readELBundles()[0][0]; bundles[0] = new Bundle(bundles[0], cluster.getEnvFileName(), cluster.getPrefix()); bundles[0].generateUniqueBundle(); bundles[0].setProcessWorkflow(aggregateWorkflowDir); }
public void setup(Method method) throws Exception { logger.info("test name: " + method.getName()); KerberosHelper.loginFromKeytab(MerlinConstants.CURRENT_USER_NAME); bundles[0] = Util.readELBundles()[0][0]; bundles[0] = new Bundle(bundles[0], cluster.getEnvFileName(), cluster.getPrefix()); bundles[0].generateUniqueBundle(); bundles[0].setProcessWorkflow(aggregateWorkflowDir); }
public void setup(Method method) throws Exception { logger.info("test name: " + method.getName()); bundles[0] = Util.loginFromKeytab(MerlinConstants.CURRENT_USER_NAME); bundles[0] = new Bundle(bundles[0], cluster.getEnvFileName(), cluster.getPrefix()); bundles[0].generateUniqueBundle(); bundles[0].setProcessWorkflow(aggregateWorkflowDir); }
public void setup(Method method) throws Exception { logger.debug("test name: " + method.getName()); KerberosHelper.loginFromKeytab(MerlinConstants.CURRENT_USER_NAME); bundles[0] = Util.readELBundles()[0][0]; bundles[0] = new Bundle(bundles[0], cluster.getEnvFileName(), cluster.getPrefix()); bundles[0].generateUniqueBundle(); bundles[0].setProcessWorkflow(aggregateWorkflowDir); }
public void setup(Method method) throws Exception { logger.debug("test name: " + method.getName()); bundles[0] = Util.readELBundles()[0][0]; bundles[0] = new Bundle(bundles[0], cluster.getEnvFileName(), cluster.getPrefix()); bundles[0].generateUniqueBundle(); bundles[0].setProcessWorkflow(aggregateWorkflowDir); }
public View getOverflowMenuAnchor() { return getToolbar().findViewById(R.id.menu_overflow_button); }
public View getOverflowMenuAnchor() { return getToolbar().findViewById(R.layout.overflow_button); }
public View getOverflowMenuAnchor() { return getToolbar(). findViewById(R.id.menu_overflow_button); }
public View getOverflowMenuAnchor() { return getToolbar().findViewById(R.drawable.menu_overflow_button); }
public View getOverflowMenuAnchor() { return getToolbar().findViewById(R.id.menu_overflow_button); }); }
public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestInfos) throws IOException { if (closed) { throw new IllegalStateException("The NetworkClient is closed."); } List<ResponseInfo> responseInfoList = new ArrayList<ResponseInfo>(); for (RequestInfo requestInfo : requestInfos) { pendingRequests.add(new RequestMetadata(time.milliseconds(), requestInfo, null)); } List<NetworkSend> sends = prepareSends(responseInfoList); selector.poll(POLL_TIMEOUT_MS, sends); handleSelectorEvents(responseInfoList); return responseInfoList; }
public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestInfos) throws IOException { if (closed) { throw new IllegalStateException("The NetworkClient is closed."); } List<ResponseInfo> responseInfoList = new ArrayList<ResponseInfo>(); for (RequestInfo requestInfo : requestInfos) { pendingRequests.add(new RequestMetadata(time.milliseconds(), requestInfo, null)); } List<NetworkSend> sends = preparesend(responseInfoList); selector.poll(POLL_TIMEOUT_MS, sends); handleSelectorEvents(responseInfoList); return responseInfoList; }
public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestInfos) throws IOException { if (closed) { throw new IllegalStateException("The NetworkClient is closed."); } List<ResponseInfo> responseInfoList = new ArrayList<ResponseInfo>(); for (RequestInfo requestInfo : requestInfos) { pendingRequests.add(new RequestMetadata(time.milliseconds(), requestInfo, null)); } List<NetworkSend> sends = prepareInbound(responseInfoList); selector.poll(POLL_TIMEOUT_MS, sends); handleSelectorEvents(responseInfoList); return responseInfoList; }
public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestInfos) throws IOException { if (closed) { throw new IllegalStateException("The NetworkClient is closed."); } List<ResponseInfo> responseInfoList = new ArrayList<ResponseInfo>(); for (RequestInfo requestInfo : requestInfos) { pendingRequests.add(new RequestMetadata(time.milliseconds(), requestInfo, null)); } List<NetworkSend> send = prepareSends(responseInfoList); selector.poll(POLL_TIMEOUT_MS, sends); handleSelectorEvents(responseInfoList); return responseInfoList; }
public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestInfos) throws IOException { if (closed) { throw new IllegalStateException("The NetworkClient is closed."); } List<ResponseInfo> responseInfoList = new ArrayList<ResponseInfo>(); for (RequestInfo requestInfo : requestInfos) { pendingRequests.add(new RequestMetadata(time.milliseconds(), requestInfo, null)); } List<NetworkSend> sends = preparePost(responseInfoList); selector.poll(POLL_TIMEOUT_MS, sends); handleSelectorEvents(responseInfoList); return responseInfoList; }
public void handleQuotaColumnVisibility() { isQuotaVisible = false; SystemTreeItemModel treeItem = (SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem(); if (treeItem!= null && SystemTreeItemType.DataCenter.equals(treeItem.getType())) { StoragePool storagePool = (StoragePool) treeItem.getEntity(); if (!QuotaEnforcementTypeEnum.DISABLED.equals(storagePool.getQuotaEnforcementType())) { isQuotaVisible = true; } } onDiskViewTypeChanged(); }
public void handleQuotaColumnVisibility() { isQuotaVisible = false; SystemTreeItemModel treeItem = (SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem(); if (treeItem!= null && SystemTreeItemType.DataCenter.equals(treeItem.getType())) { StoragePool storagePool = (StoragePool) treeItem.getEntity(); if (!QuotaEnforcementTypeEnum.DISABLED && storagePool.getQuotaEnforcementType())) { isQuotaVisible = true; } } onDiskViewTypeChanged(); }
public void handleQuotaColumnVisibility() { isQuotaVisible = false; SystemTreeItemModel treeItem = (SystemTreeItemModel)CommonModel.getInstance().getSystemTree().getSelectedItem(); if (treeItem!= null && SystemTreeItemType.DataCenter.equals(treeItem.getType())) { StoragePool storagePool = (StoragePool) treeItem.getEntity(); if (!QuotaEnforcementTypeEnum.DISABLED.equals(storagePool.getQuotaEnforcementType())) { isQuotaVisible = true; } } onDiskViewTypeChanged(); }
public void handleQuotaColumnVisibility() { isQuotaVisible = false; SystemTreeItemModel treeItem = (SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem(); if (treeItem!= null && SystemTreeItemType.DataCenter.equals(treeItem.getType()) && StoragePool storagePool = (StoragePool) treeItem.getEntity(); if (!QuotaEnforcementTypeEnum.DISABLED.equals(storagePool.getQuotaEnforcementType())) { isQuotaVisible = true; } } onDiskViewTypeChanged(); }
public void handleQuotaColumnVisibility() { isQuotaVisible = false; SystemTreeItemModel treeItem = (SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem(); if (treeItem!= null && SystemTreeItemType.DataCenter.equals(treeItem.getType())) { StoragePool storagePool = (StoragePool) treeItem.getEntity(); if (!QuotaEnforcementTypeEnum.DISABLED && storagePool.getQuotaEnforcementType())) { isQuotaVisible = true; } } onDiskViewTypeChanged(); } }
public CompletableFuture<StaticResource> getResource(String name) { StaticResource template = templates.get(name); if (template!= null) { return CompletableFuture.completedFuture(template); } return delegate.getResource(name).exceptionally((th) -> { templates.putIfAbsent(name, null); return null; } ).thenApply( (file) -> { templates.putIfAbsent(name, file); return file; }); }
public CompletableFuture<StaticResource> getResource(String name) { StaticResource template = templates.get(name); if (template!= null) { return CompletableFuture.completedFuture(template); } return delegate.getResource(name).exceptionally((th) -> { templates.putIfAbsent(name, null); return null; } ).thenApply( (file) -> { templates.putIfAbsent(name, file); return file; }); }
public CompletableFuture<StaticResource> getResource(String name) { StaticResource template = templates.get(name); if (template!= null) { return CompletableFuture.completedFuture(template); } return delegate.getResource(name).exceptionally( (th) -> { templates.putIfAbsent(name, null); return null; } ).thenApply( (file) -> { templates.putIfAbsent(name, file); return file; }); }
public CompletableFuture<StaticResource> getResource(String name) { StaticResource template = templates.get(name); if (template!= null) { return CompletableFuture.completedFuture(template); } return delegate.getResource(name).exceptionally((th) -> { templates.putIfAbsent(name, null); return null; } ).thenApply( (file -> { templates.putIfAbsent(name, file); return file; }); }
public CompletableFuture<StaticResource> getResource(String name) { StaticResource template = templates.get(name); if (template!= null) { return CompletableFuture.completedFuture(template); } return delegate.getResource(name).exceptionally((th) -> { templates.putIfAbsent(name, null); return null; } ).thenApply( (file) -> { templates.put(name, file); return file; }); }
public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable { assumeTrue(OpenSsl.isTlsv13Supported()); assumeTrue(OpenSsl.isBoringSSL()); testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, false); }
public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable { testSessionTickets(OpenSsl.isTlsv13Supported()); assumeTrue(OpenSsl.isBoringSSL()); testSessionTickets(PROTOCOL_TLS_V1_3, false); }
public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable { assumeTrue(OpenSsl.isTlsv13Supported()); assumeTrue(OpenSsl.isBoringSSL()); testSessionTickets(PROTOCOL_TLS_V1_3, false); }
public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable { assertEquals(OpenSsl.isTlsv13Supported()); assumeTrue(OpenSsl.isBoringSSL()); testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, false); }
public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable { }
public void setUp() { TmfEventMatching.registerMatchObject(new TcpEventMatching()); TmfEventMatching.registerMatchObject(new TcpLttngEventMatching()); }
public void setUp() { TmfEventMatching.registerMatchObject(new TcpEventMatching()); }
public void setUp() { TmfEventMatching.registerMatchObject(new TcpEventMatching()); mfEventMatching.registerMatchObject(new TcpLttngEventMatching()); }
public void setUp() { TmfEventMatching.registerMatchObject(new TcpEventMatching()); setMatchObject(new TcpLttngEventMatching()); }
public void setUp() { TmfEventMatching.registerMatchObject(new TcpEventMatching()); sEventMatching.registerMatchObject(new TcpLttngEventMatching()); }
protected void updateTitle(String brand) { if (brand!= null) { IBrandManager brandManager = TasksUiPlugin.getDefault().getBrandManager(); setTitle(brandManager.getConnectorLabel(getConnector(), brand)); } }
protected void updateTitle(String brand) { IBrandManager brandManager = TasksUiPlugin.getDefault().getBrandManager(); setTitle(brandManager.getConnectorLabel(getConnector(), brand)); }
protected void updateTitle(String brand) { if (brand!= null) { IBrandManager brandManager = getBrandManager(); setTitle(brandManager.getConnectorLabel(getConnector(), brand)); } }
protected void updateTitle(String brand) { if (brand!= null) { IBrandManager brandManager = getBrandManager(); setTitle(brandManager.getConnectorLabel(getConnector(), brand)); } } }
protected void updateTitle(String brand) { }
public static int getSegmentForKey(Object key, Cache cache) { return extractComponent(cache, KeyPartitioner.class); }
public static int getSegmentForKey(Object key, Cache cache) { return keyPartitioner.getSegment(key, KeyPartitioner.class); }
public static int getSegmentForKey(Object key, Cache cache) { return keyPartitioner.getSegment(key, cache); }
public static int getSegmentForKey(Object key, Cache cache) { return extractComponent(cache, KeyPartitioner.class).getSegment(key); }
public static int getSegmentForKey(Object key, Cache cache) { return keyPartitioner.getSegment(key); }
